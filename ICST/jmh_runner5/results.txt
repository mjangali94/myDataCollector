=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperThrowsObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperThrowsObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 527020.925 ops/s
# Warmup Iteration   2: 715817.024 ops/s
# Warmup Iteration   3: 760244.396 ops/s
# Warmup Iteration   4: 798271.915 ops/s
# Warmup Iteration   5: 798530.660 ops/s
# Warmup Iteration   6: 796170.023 ops/s
# Warmup Iteration   7: 801957.182 ops/s
# Warmup Iteration   8: 796728.541 ops/s
# Warmup Iteration   9: 797815.317 ops/s
# Warmup Iteration  10: 793787.144 ops/s
# Warmup Iteration  11: 793750.257 ops/s
# Warmup Iteration  12: 793196.323 ops/s
# Warmup Iteration  13: 794294.970 ops/s
# Warmup Iteration  14: 797359.006 ops/s
# Warmup Iteration  15: 793641.444 ops/s
# Warmup Iteration  16: 795599.760 ops/s
# Warmup Iteration  17: 832392.394 ops/s
# Warmup Iteration  18: 831114.694 ops/s
# Warmup Iteration  19: 831446.585 ops/s
# Warmup Iteration  20: 834571.825 ops/s
# Warmup Iteration  21: 831674.396 ops/s
# Warmup Iteration  22: 831899.269 ops/s
# Warmup Iteration  23: 832922.852 ops/s
# Warmup Iteration  24: 832638.705 ops/s
# Warmup Iteration  25: 834933.780 ops/s
# Warmup Iteration  26: 835866.259 ops/s
# Warmup Iteration  27: 831874.740 ops/s
# Warmup Iteration  28: 837586.434 ops/s
# Warmup Iteration  29: 834757.433 ops/s
# Warmup Iteration  30: 838545.202 ops/s
Iteration   1: 838275.838 ops/s
Iteration   2: 830659.343 ops/s
Iteration   3: 833482.683 ops/s
Iteration   4: 837220.704 ops/s
Iteration   5: 834954.080 ops/s
Iteration   6: 834668.266 ops/s
Iteration   7: 833607.648 ops/s
Iteration   8: 833684.353 ops/s
Iteration   9: 834715.704 ops/s
Iteration  10: 834018.772 ops/s
Iteration  11: 831656.256 ops/s
Iteration  12: 836431.037 ops/s
Iteration  13: 837025.035 ops/s
Iteration  14: 837145.446 ops/s
Iteration  15: 827278.087 ops/s
Iteration  16: 824320.608 ops/s
Iteration  17: 823067.508 ops/s
Iteration  18: 834599.674 ops/s
Iteration  19: 830283.684 ops/s
Iteration  20: 831908.439 ops/s
Iteration  21: 830141.493 ops/s
Iteration  22: 832020.631 ops/s
Iteration  23: 830597.758 ops/s
Iteration  24: 832466.229 ops/s
Iteration  25: 835406.483 ops/s
Iteration  26: 834569.954 ops/s
Iteration  27: 836147.778 ops/s
Iteration  28: 834879.136 ops/s
Iteration  29: 835466.714 ops/s
Iteration  30: 830810.074 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperThrowsObservable":
  833050.314 ±(99.9%) 2403.432 ops/s [Average]
  (min, avg, max) = (823067.508, 833050.314, 838275.838), stdev = 3597.345
  CI (99.9%): [830646.882, 835453.746] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperThrowsObservable  thrpt   30  833050.314 ± 2403.432  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 764866.255 ops/s
# Warmup Iteration   2: 873409.545 ops/s
# Warmup Iteration   3: 906598.903 ops/s
# Warmup Iteration   4: 976381.531 ops/s
# Warmup Iteration   5: 981493.592 ops/s
# Warmup Iteration   6: 976456.326 ops/s
# Warmup Iteration   7: 979075.482 ops/s
# Warmup Iteration   8: 976772.321 ops/s
# Warmup Iteration   9: 973464.553 ops/s
# Warmup Iteration  10: 975263.830 ops/s
# Warmup Iteration  11: 977604.737 ops/s
# Warmup Iteration  12: 973416.881 ops/s
# Warmup Iteration  13: 978850.106 ops/s
# Warmup Iteration  14: 976736.950 ops/s
# Warmup Iteration  15: 973492.108 ops/s
# Warmup Iteration  16: 971369.288 ops/s
# Warmup Iteration  17: 1033484.246 ops/s
# Warmup Iteration  18: 1024781.170 ops/s
# Warmup Iteration  19: 1035478.341 ops/s
# Warmup Iteration  20: 1030310.855 ops/s
# Warmup Iteration  21: 1026729.644 ops/s
# Warmup Iteration  22: 1029019.123 ops/s
# Warmup Iteration  23: 1034411.692 ops/s
# Warmup Iteration  24: 1029021.475 ops/s
# Warmup Iteration  25: 1026271.950 ops/s
# Warmup Iteration  26: 1023370.190 ops/s
# Warmup Iteration  27: 1026323.612 ops/s
# Warmup Iteration  28: 1028338.460 ops/s
# Warmup Iteration  29: 1034313.612 ops/s
# Warmup Iteration  30: 1034030.175 ops/s
Iteration   1: 1037988.374 ops/s
Iteration   2: 1030056.252 ops/s
Iteration   3: 1026182.393 ops/s
Iteration   4: 1030943.532 ops/s
Iteration   5: 1028063.737 ops/s
Iteration   6: 1032227.550 ops/s
Iteration   7: 1034956.740 ops/s
Iteration   8: 1031327.056 ops/s
Iteration   9: 1027890.877 ops/s
Iteration  10: 1030879.970 ops/s
Iteration  11: 1030115.645 ops/s
Iteration  12: 1024955.340 ops/s
Iteration  13: 1031961.535 ops/s
Iteration  14: 1026100.510 ops/s
Iteration  15: 1016841.068 ops/s
Iteration  16: 1017441.627 ops/s
Iteration  17: 1026368.490 ops/s
Iteration  18: 1036320.238 ops/s
Iteration  19: 1033852.170 ops/s
Iteration  20: 1027177.032 ops/s
Iteration  21: 1028286.468 ops/s
Iteration  22: 1025840.843 ops/s
Iteration  23: 1034533.136 ops/s
Iteration  24: 1028679.240 ops/s
Iteration  25: 1032432.184 ops/s
Iteration  26: 1029848.758 ops/s
Iteration  27: 1031771.789 ops/s
Iteration  28: 1023700.253 ops/s
Iteration  29: 1022892.404 ops/s
Iteration  30: 1025291.622 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_error":
  1028830.894 ±(99.9%) 3268.009 ops/s [Average]
  (min, avg, max) = (1016841.068, 1028830.894, 1037988.374), stdev = 4891.403
  CI (99.9%): [1025562.885, 1032098.904] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
BlockingObservableLatestTest._Benchmark.benchmark_error  thrpt   30  1028830.894 ± 3268.009  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 729216.085 ops/s
# Warmup Iteration   2: 861558.785 ops/s
# Warmup Iteration   3: 955553.904 ops/s
# Warmup Iteration   4: 959999.316 ops/s
# Warmup Iteration   5: 961369.453 ops/s
# Warmup Iteration   6: 958111.311 ops/s
# Warmup Iteration   7: 962411.715 ops/s
# Warmup Iteration   8: 957834.546 ops/s
# Warmup Iteration   9: 955519.095 ops/s
# Warmup Iteration  10: 954554.877 ops/s
# Warmup Iteration  11: 955957.812 ops/s
# Warmup Iteration  12: 954940.058 ops/s
# Warmup Iteration  13: 955869.277 ops/s
# Warmup Iteration  14: 949822.947 ops/s
# Warmup Iteration  15: 953242.363 ops/s
# Warmup Iteration  16: 952698.972 ops/s
# Warmup Iteration  17: 1013200.278 ops/s
# Warmup Iteration  18: 1010274.091 ops/s
# Warmup Iteration  19: 1007853.759 ops/s
# Warmup Iteration  20: 1005392.602 ops/s
# Warmup Iteration  21: 1013738.295 ops/s
# Warmup Iteration  22: 1009204.757 ops/s
# Warmup Iteration  23: 1007242.198 ops/s
# Warmup Iteration  24: 1008302.601 ops/s
# Warmup Iteration  25: 1012566.870 ops/s
# Warmup Iteration  26: 1012596.002 ops/s
# Warmup Iteration  27: 1012782.659 ops/s
# Warmup Iteration  28: 1010535.914 ops/s
# Warmup Iteration  29: 1013020.218 ops/s
# Warmup Iteration  30: 1006104.461 ops/s
Iteration   1: 1014584.771 ops/s
Iteration   2: 1013863.130 ops/s
Iteration   3: 1012535.402 ops/s
Iteration   4: 1017240.576 ops/s
Iteration   5: 1013366.817 ops/s
Iteration   6: 1012603.367 ops/s
Iteration   7: 1019894.458 ops/s
Iteration   8: 1018880.929 ops/s
Iteration   9: 1013526.419 ops/s
Iteration  10: 1013264.284 ops/s
Iteration  11: 1015051.139 ops/s
Iteration  12: 1011534.698 ops/s
Iteration  13: 1003359.789 ops/s
Iteration  14: 1003943.839 ops/s
Iteration  15: 1000814.204 ops/s
Iteration  16: 1005144.450 ops/s
Iteration  17: 1011884.457 ops/s
Iteration  18: 1009768.546 ops/s
Iteration  19: 1014348.338 ops/s
Iteration  20: 1014033.952 ops/s
Iteration  21: 1014874.854 ops/s
Iteration  22: 1010072.798 ops/s
Iteration  23: 1015015.554 ops/s
Iteration  24: 1008432.792 ops/s
Iteration  25: 1010327.794 ops/s
Iteration  26: 1013154.742 ops/s
Iteration  27: 1010762.427 ops/s
Iteration  28: 1012877.348 ops/s
Iteration  29: 1008810.527 ops/s
Iteration  30: 1015981.743 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_error":
  1011998.472 ±(99.9%) 2924.984 ops/s [Average]
  (min, avg, max) = (1000814.204, 1011998.472, 1019894.458), stdev = 4377.979
  CI (99.9%): [1009073.488, 1014923.455] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ObservableTakeLastOneTest._Benchmark.benchmark_error  thrpt   30  1011998.472 ± 2924.984  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_error2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_error2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 792466.419 ops/s
# Warmup Iteration   2: 884631.603 ops/s
# Warmup Iteration   3: 957345.268 ops/s
# Warmup Iteration   4: 990669.951 ops/s
# Warmup Iteration   5: 995705.618 ops/s
# Warmup Iteration   6: 997987.788 ops/s
# Warmup Iteration   7: 995806.821 ops/s
# Warmup Iteration   8: 994142.606 ops/s
# Warmup Iteration   9: 992241.074 ops/s
# Warmup Iteration  10: 991613.004 ops/s
# Warmup Iteration  11: 987192.029 ops/s
# Warmup Iteration  12: 989773.409 ops/s
# Warmup Iteration  13: 990980.064 ops/s
# Warmup Iteration  14: 983626.949 ops/s
# Warmup Iteration  15: 989650.275 ops/s
# Warmup Iteration  16: 989432.485 ops/s
# Warmup Iteration  17: 1047766.016 ops/s
# Warmup Iteration  18: 1046181.825 ops/s
# Warmup Iteration  19: 1053988.760 ops/s
# Warmup Iteration  20: 1056304.762 ops/s
# Warmup Iteration  21: 1053106.880 ops/s
# Warmup Iteration  22: 1052107.548 ops/s
# Warmup Iteration  23: 1051486.942 ops/s
# Warmup Iteration  24: 1050620.583 ops/s
# Warmup Iteration  25: 1052585.237 ops/s
# Warmup Iteration  26: 1052410.372 ops/s
# Warmup Iteration  27: 1050217.648 ops/s
# Warmup Iteration  28: 1056582.226 ops/s
# Warmup Iteration  29: 1051877.196 ops/s
# Warmup Iteration  30: 1051087.794 ops/s
Iteration   1: 1049158.832 ops/s
Iteration   2: 1051367.280 ops/s
Iteration   3: 1054892.355 ops/s
Iteration   4: 1049100.672 ops/s
Iteration   5: 1051316.995 ops/s
Iteration   6: 1052205.557 ops/s
Iteration   7: 1047039.905 ops/s
Iteration   8: 1048112.287 ops/s
Iteration   9: 1046038.476 ops/s
Iteration  10: 1051010.783 ops/s
Iteration  11: 1046998.238 ops/s
Iteration  12: 1043511.965 ops/s
Iteration  13: 1045587.155 ops/s
Iteration  14: 1041200.658 ops/s
Iteration  15: 1050462.704 ops/s
Iteration  16: 1045933.698 ops/s
Iteration  17: 1053232.592 ops/s
Iteration  18: 1051223.831 ops/s
Iteration  19: 1045665.167 ops/s
Iteration  20: 1052765.148 ops/s
Iteration  21: 1048835.263 ops/s
Iteration  22: 1050477.065 ops/s
Iteration  23: 1048374.470 ops/s
Iteration  24: 1051462.803 ops/s
Iteration  25: 1049858.989 ops/s
Iteration  26: 1056252.595 ops/s
Iteration  27: 1052174.337 ops/s
Iteration  28: 1050533.204 ops/s
Iteration  29: 1049650.081 ops/s
Iteration  30: 1052927.151 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_error2":
  1049579.009 ±(99.9%) 2219.238 ops/s [Average]
  (min, avg, max) = (1041200.658, 1049579.009, 1056252.595), stdev = 3321.651
  CI (99.9%): [1047359.770, 1051798.247] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
BlockingObservableLatestTest._Benchmark.benchmark_error2  thrpt   30  1049579.009 ± 2219.238  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 694795.204 ops/s
# Warmup Iteration   2: 822258.237 ops/s
# Warmup Iteration   3: 935502.308 ops/s
# Warmup Iteration   4: 944315.901 ops/s
# Warmup Iteration   5: 946298.270 ops/s
# Warmup Iteration   6: 945870.377 ops/s
# Warmup Iteration   7: 948521.395 ops/s
# Warmup Iteration   8: 948882.466 ops/s
# Warmup Iteration   9: 946935.366 ops/s
# Warmup Iteration  10: 949695.000 ops/s
# Warmup Iteration  11: 946328.425 ops/s
# Warmup Iteration  12: 941980.252 ops/s
# Warmup Iteration  13: 939323.859 ops/s
# Warmup Iteration  14: 946780.610 ops/s
# Warmup Iteration  15: 942661.134 ops/s
# Warmup Iteration  16: 941995.820 ops/s
# Warmup Iteration  17: 994984.438 ops/s
# Warmup Iteration  18: 992800.747 ops/s
# Warmup Iteration  19: 995506.534 ops/s
# Warmup Iteration  20: 989313.519 ops/s
# Warmup Iteration  21: 989456.136 ops/s
# Warmup Iteration  22: 986793.760 ops/s
# Warmup Iteration  23: 991309.809 ops/s
# Warmup Iteration  24: 991168.669 ops/s
# Warmup Iteration  25: 993116.800 ops/s
# Warmup Iteration  26: 995464.026 ops/s
# Warmup Iteration  27: 994310.293 ops/s
# Warmup Iteration  28: 995881.703 ops/s
# Warmup Iteration  29: 991367.326 ops/s
# Warmup Iteration  30: 992658.893 ops/s
Iteration   1: 991752.342 ops/s
Iteration   2: 990087.805 ops/s
Iteration   3: 993785.629 ops/s
Iteration   4: 988760.962 ops/s
Iteration   5: 987871.002 ops/s
Iteration   6: 989013.983 ops/s
Iteration   7: 988678.292 ops/s
Iteration   8: 989976.592 ops/s
Iteration   9: 989459.754 ops/s
Iteration  10: 995084.797 ops/s
Iteration  11: 990424.459 ops/s
Iteration  12: 976039.802 ops/s
Iteration  13: 977135.065 ops/s
Iteration  14: 986083.053 ops/s
Iteration  15: 992595.225 ops/s
Iteration  16: 990740.678 ops/s
Iteration  17: 994574.243 ops/s
Iteration  18: 992791.590 ops/s
Iteration  19: 989335.900 ops/s
Iteration  20: 996793.500 ops/s
Iteration  21: 986347.948 ops/s
Iteration  22: 990738.613 ops/s
Iteration  23: 988603.222 ops/s
Iteration  24: 988291.885 ops/s
Iteration  25: 989295.405 ops/s
Iteration  26: 985838.884 ops/s
Iteration  27: 999697.030 ops/s
Iteration  28: 989342.667 ops/s
Iteration  29: 995322.140 ops/s
Iteration  30: 991314.793 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_error":
  989859.242 ±(99.9%) 3214.565 ops/s [Average]
  (min, avg, max) = (976039.802, 989859.242, 999697.030), stdev = 4811.410
  CI (99.9%): [986644.677, 993073.807] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_error  thrpt   30  989859.242 ± 3214.565  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_mapperToEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_mapperToEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9956747.819 ops/s
# Warmup Iteration   2: 14071283.364 ops/s
# Warmup Iteration   3: 15770668.358 ops/s
# Warmup Iteration   4: 15806698.585 ops/s
# Warmup Iteration   5: 15716142.216 ops/s
# Warmup Iteration   6: 15630223.264 ops/s
# Warmup Iteration   7: 15673066.307 ops/s
# Warmup Iteration   8: 15761181.837 ops/s
# Warmup Iteration   9: 15655239.943 ops/s
# Warmup Iteration  10: 15742241.777 ops/s
# Warmup Iteration  11: 15619247.632 ops/s
# Warmup Iteration  12: 15580881.218 ops/s
# Warmup Iteration  13: 15659229.646 ops/s
# Warmup Iteration  14: 15712201.703 ops/s
# Warmup Iteration  15: 15644816.194 ops/s
# Warmup Iteration  16: 15756847.453 ops/s
# Warmup Iteration  17: 15569167.133 ops/s
# Warmup Iteration  18: 15554634.393 ops/s
# Warmup Iteration  19: 15662216.304 ops/s
# Warmup Iteration  20: 15543658.442 ops/s
# Warmup Iteration  21: 15632093.440 ops/s
# Warmup Iteration  22: 15515673.181 ops/s
# Warmup Iteration  23: 15642162.786 ops/s
# Warmup Iteration  24: 15612563.830 ops/s
# Warmup Iteration  25: 15555170.326 ops/s
# Warmup Iteration  26: 15594990.781 ops/s
# Warmup Iteration  27: 14989753.152 ops/s
# Warmup Iteration  28: 15565668.774 ops/s
# Warmup Iteration  29: 15631503.096 ops/s
# Warmup Iteration  30: 15607205.247 ops/s
Iteration   1: 15616877.286 ops/s
Iteration   2: 15644970.443 ops/s
Iteration   3: 15720465.446 ops/s
Iteration   4: 15518316.369 ops/s
Iteration   5: 15467903.937 ops/s
Iteration   6: 15598995.351 ops/s
Iteration   7: 15574878.737 ops/s
Iteration   8: 15642831.075 ops/s
Iteration   9: 15674882.947 ops/s
Iteration  10: 15288615.979 ops/s
Iteration  11: 15126548.239 ops/s
Iteration  12: 15086847.631 ops/s
Iteration  13: 15626104.136 ops/s
Iteration  14: 15580261.260 ops/s
Iteration  15: 15569369.773 ops/s
Iteration  16: 15688518.769 ops/s
Iteration  17: 15573682.737 ops/s
Iteration  18: 15489913.421 ops/s
Iteration  19: 15779222.093 ops/s
Iteration  20: 15604299.521 ops/s
Iteration  21: 15587671.166 ops/s
Iteration  22: 15484080.894 ops/s
Iteration  23: 15622727.765 ops/s
Iteration  24: 15598883.609 ops/s
Iteration  25: 15615418.799 ops/s
Iteration  26: 15709031.699 ops/s
Iteration  27: 15546855.705 ops/s
Iteration  28: 15563979.887 ops/s
Iteration  29: 15548450.275 ops/s
Iteration  30: 15644795.584 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_mapperToEmpty":
  15559846.684 ±(99.9%) 101922.768 ops/s [Average]
  (min, avg, max) = (15086847.631, 15559846.684, 15779222.093), stdev = 152553.213
  CI (99.9%): [15457923.916, 15661769.453] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ObservableScalarXMapTest._Benchmark.benchmark_mapperToEmpty  thrpt   30  15559846.684 ± 101922.768  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalErrorConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalErrorConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 685997.099 ops/s
# Warmup Iteration   2: 826265.228 ops/s
# Warmup Iteration   3: 935721.386 ops/s
# Warmup Iteration   4: 937296.208 ops/s
# Warmup Iteration   5: 937464.438 ops/s
# Warmup Iteration   6: 936701.909 ops/s
# Warmup Iteration   7: 936794.414 ops/s
# Warmup Iteration   8: 937411.363 ops/s
# Warmup Iteration   9: 936903.065 ops/s
# Warmup Iteration  10: 934639.170 ops/s
# Warmup Iteration  11: 932295.565 ops/s
# Warmup Iteration  12: 931187.224 ops/s
# Warmup Iteration  13: 932670.623 ops/s
# Warmup Iteration  14: 933544.433 ops/s
# Warmup Iteration  15: 934307.418 ops/s
# Warmup Iteration  16: 927384.266 ops/s
# Warmup Iteration  17: 991228.808 ops/s
# Warmup Iteration  18: 984634.120 ops/s
# Warmup Iteration  19: 993098.570 ops/s
# Warmup Iteration  20: 989287.717 ops/s
# Warmup Iteration  21: 986605.317 ops/s
# Warmup Iteration  22: 985122.253 ops/s
# Warmup Iteration  23: 984898.934 ops/s
# Warmup Iteration  24: 986528.872 ops/s
# Warmup Iteration  25: 987804.673 ops/s
# Warmup Iteration  26: 990009.892 ops/s
# Warmup Iteration  27: 989519.827 ops/s
# Warmup Iteration  28: 986594.572 ops/s
# Warmup Iteration  29: 982975.159 ops/s
# Warmup Iteration  30: 991503.193 ops/s
Iteration   1: 989532.970 ops/s
Iteration   2: 980753.647 ops/s
Iteration   3: 984735.205 ops/s
Iteration   4: 993233.101 ops/s
Iteration   5: 987426.760 ops/s
Iteration   6: 980328.750 ops/s
Iteration   7: 989768.050 ops/s
Iteration   8: 987719.079 ops/s
Iteration   9: 974976.469 ops/s
Iteration  10: 973757.058 ops/s
Iteration  11: 979522.187 ops/s
Iteration  12: 986299.817 ops/s
Iteration  13: 982076.028 ops/s
Iteration  14: 986400.080 ops/s
Iteration  15: 987228.286 ops/s
Iteration  16: 986303.265 ops/s
Iteration  17: 990271.146 ops/s
Iteration  18: 981284.729 ops/s
Iteration  19: 985277.203 ops/s
Iteration  20: 989210.723 ops/s
Iteration  21: 985302.664 ops/s
Iteration  22: 988345.363 ops/s
Iteration  23: 988667.630 ops/s
Iteration  24: 992553.664 ops/s
Iteration  25: 984795.107 ops/s
Iteration  26: 982609.939 ops/s
Iteration  27: 987066.381 ops/s
Iteration  28: 988628.970 ops/s
Iteration  29: 983932.518 ops/s
Iteration  30: 988223.666 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalErrorConditional":
  985541.015 ±(99.9%) 3057.017 ops/s [Average]
  (min, avg, max) = (973757.058, 985541.015, 993233.101), stdev = 4575.600
  CI (99.9%): [982483.998, 988598.032] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_normalErrorConditional  thrpt   30  985541.015 ± 3057.017  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNextTest._Benchmark.benchmark_onError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNextTest._Benchmark.benchmark_onError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 600675.119 ops/s
# Warmup Iteration   2: 714196.981 ops/s
# Warmup Iteration   3: 699662.411 ops/s
# Warmup Iteration   4: 752123.975 ops/s
# Warmup Iteration   5: 764316.388 ops/s
# Warmup Iteration   6: 760093.111 ops/s
# Warmup Iteration   7: 760315.256 ops/s
# Warmup Iteration   8: 759152.653 ops/s
# Warmup Iteration   9: 760091.310 ops/s
# Warmup Iteration  10: 758180.216 ops/s
# Warmup Iteration  11: 759492.867 ops/s
# Warmup Iteration  12: 758771.234 ops/s
# Warmup Iteration  13: 755248.865 ops/s
# Warmup Iteration  14: 755919.259 ops/s
# Warmup Iteration  15: 753635.306 ops/s
# Warmup Iteration  16: 753684.937 ops/s
# Warmup Iteration  17: 798440.362 ops/s
# Warmup Iteration  18: 797174.602 ops/s
# Warmup Iteration  19: 797415.450 ops/s
# Warmup Iteration  20: 789991.563 ops/s
# Warmup Iteration  21: 786787.190 ops/s
# Warmup Iteration  22: 790421.939 ops/s
# Warmup Iteration  23: 796837.313 ops/s
# Warmup Iteration  24: 793524.554 ops/s
# Warmup Iteration  25: 796079.583 ops/s
# Warmup Iteration  26: 794721.463 ops/s
# Warmup Iteration  27: 795079.484 ops/s
# Warmup Iteration  28: 797264.497 ops/s
# Warmup Iteration  29: 794322.841 ops/s
# Warmup Iteration  30: 796939.737 ops/s
Iteration   1: 801419.516 ops/s
Iteration   2: 798626.719 ops/s
Iteration   3: 799588.472 ops/s
Iteration   4: 794839.098 ops/s
Iteration   5: 797241.155 ops/s
Iteration   6: 792595.368 ops/s
Iteration   7: 794760.633 ops/s
Iteration   8: 787426.920 ops/s
Iteration   9: 785642.730 ops/s
Iteration  10: 790704.222 ops/s
Iteration  11: 797787.125 ops/s
Iteration  12: 796179.515 ops/s
Iteration  13: 796412.043 ops/s
Iteration  14: 793975.243 ops/s
Iteration  15: 796077.652 ops/s
Iteration  16: 794555.342 ops/s
Iteration  17: 799366.789 ops/s
Iteration  18: 795097.560 ops/s
Iteration  19: 798707.134 ops/s
Iteration  20: 797987.749 ops/s
Iteration  21: 795515.843 ops/s
Iteration  22: 796733.539 ops/s
Iteration  23: 795666.463 ops/s
Iteration  24: 800544.960 ops/s
Iteration  25: 795600.785 ops/s
Iteration  26: 803635.986 ops/s
Iteration  27: 797415.472 ops/s
Iteration  28: 797328.983 ops/s
Iteration  29: 797059.318 ops/s
Iteration  30: 797580.637 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNextTest._Benchmark.benchmark_onError":
  796202.432 ±(99.9%) 2460.023 ops/s [Average]
  (min, avg, max) = (785642.730, 796202.432, 803635.986), stdev = 3682.047
  CI (99.9%): [793742.409, 798662.455] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
BlockingObservableNextTest._Benchmark.benchmark_onError  thrpt   30  796202.432 ± 2460.023  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_onErrorResumeNextFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_onErrorResumeNextFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 356125.550 ops/s
# Warmup Iteration   2: 422793.081 ops/s
# Warmup Iteration   3: 416294.406 ops/s
# Warmup Iteration   4: 448923.747 ops/s
# Warmup Iteration   5: 452227.413 ops/s
# Warmup Iteration   6: 453122.864 ops/s
# Warmup Iteration   7: 452305.383 ops/s
# Warmup Iteration   8: 450517.778 ops/s
# Warmup Iteration   9: 452344.943 ops/s
# Warmup Iteration  10: 452462.292 ops/s
# Warmup Iteration  11: 451611.961 ops/s
# Warmup Iteration  12: 452775.171 ops/s
# Warmup Iteration  13: 451737.067 ops/s
# Warmup Iteration  14: 451277.301 ops/s
# Warmup Iteration  15: 450946.716 ops/s
# Warmup Iteration  16: 448955.565 ops/s
# Warmup Iteration  17: 472411.528 ops/s
# Warmup Iteration  18: 474631.014 ops/s
# Warmup Iteration  19: 475133.031 ops/s
# Warmup Iteration  20: 471548.462 ops/s
# Warmup Iteration  21: 472882.045 ops/s
# Warmup Iteration  22: 472981.584 ops/s
# Warmup Iteration  23: 471256.128 ops/s
# Warmup Iteration  24: 470269.727 ops/s
# Warmup Iteration  25: 472262.465 ops/s
# Warmup Iteration  26: 473922.889 ops/s
# Warmup Iteration  27: 472065.691 ops/s
# Warmup Iteration  28: 473765.526 ops/s
# Warmup Iteration  29: 473232.849 ops/s
# Warmup Iteration  30: 472864.123 ops/s
Iteration   1: 475196.986 ops/s
Iteration   2: 474303.303 ops/s
Iteration   3: 471925.012 ops/s
Iteration   4: 477380.244 ops/s
Iteration   5: 471646.904 ops/s
Iteration   6: 474192.890 ops/s
Iteration   7: 467582.168 ops/s
Iteration   8: 468888.116 ops/s
Iteration   9: 470980.329 ops/s
Iteration  10: 471440.834 ops/s
Iteration  11: 472022.770 ops/s
Iteration  12: 475284.093 ops/s
Iteration  13: 471755.774 ops/s
Iteration  14: 473505.028 ops/s
Iteration  15: 472111.522 ops/s
Iteration  16: 473525.341 ops/s
Iteration  17: 472994.546 ops/s
Iteration  18: 472506.465 ops/s
Iteration  19: 473732.590 ops/s
Iteration  20: 474181.108 ops/s
Iteration  21: 473652.452 ops/s
Iteration  22: 470633.326 ops/s
Iteration  23: 473237.642 ops/s
Iteration  24: 472011.255 ops/s
Iteration  25: 472018.047 ops/s
Iteration  26: 470122.105 ops/s
Iteration  27: 472284.956 ops/s
Iteration  28: 473235.840 ops/s
Iteration  29: 475294.137 ops/s
Iteration  30: 471375.815 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_onErrorResumeNextFunctionReturnsNull":
  472634.053 ±(99.9%) 1329.676 ops/s [Average]
  (min, avg, max) = (467582.168, 472634.053, 477380.244), stdev = 1990.197
  CI (99.9%): [471304.377, 473963.730] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_onErrorResumeNextFunctionReturnsNull  thrpt   30  472634.053 ± 1329.676  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_takeLastZeroProcessesAllItemsButIgnoresThem$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_takeLastZeroProcessesAllItemsButIgnoresThem

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3249892.792 ops/s
# Warmup Iteration   2: 4045753.454 ops/s
# Warmup Iteration   3: 4911232.916 ops/s
# Warmup Iteration   4: 4893495.574 ops/s
# Warmup Iteration   5: 4881807.728 ops/s
# Warmup Iteration   6: 4912304.935 ops/s
# Warmup Iteration   7: 4908390.920 ops/s
# Warmup Iteration   8: 4891679.896 ops/s
# Warmup Iteration   9: 4880185.638 ops/s
# Warmup Iteration  10: 4839377.272 ops/s
# Warmup Iteration  11: 4896221.439 ops/s
# Warmup Iteration  12: 4899511.258 ops/s
# Warmup Iteration  13: 4889738.696 ops/s
# Warmup Iteration  14: 4883357.556 ops/s
# Warmup Iteration  15: 4878777.626 ops/s
# Warmup Iteration  16: 4857653.795 ops/s
# Warmup Iteration  17: 4906130.027 ops/s
# Warmup Iteration  18: 4925175.513 ops/s
# Warmup Iteration  19: 4912560.245 ops/s
# Warmup Iteration  20: 4895228.612 ops/s
# Warmup Iteration  21: 4896855.129 ops/s
# Warmup Iteration  22: 4876108.452 ops/s
# Warmup Iteration  23: 4891374.205 ops/s
# Warmup Iteration  24: 4932108.186 ops/s
# Warmup Iteration  25: 4860905.618 ops/s
# Warmup Iteration  26: 4895747.994 ops/s
# Warmup Iteration  27: 4888605.409 ops/s
# Warmup Iteration  28: 4898966.876 ops/s
# Warmup Iteration  29: 4841948.235 ops/s
# Warmup Iteration  30: 4924500.038 ops/s
Iteration   1: 4914429.923 ops/s
Iteration   2: 4940660.804 ops/s
Iteration   3: 4913838.556 ops/s
Iteration   4: 4919044.465 ops/s
Iteration   5: 4853872.349 ops/s
Iteration   6: 4809966.120 ops/s
Iteration   7: 4794492.712 ops/s
Iteration   8: 4873617.515 ops/s
Iteration   9: 4865340.521 ops/s
Iteration  10: 4900152.535 ops/s
Iteration  11: 4883923.403 ops/s
Iteration  12: 4910637.203 ops/s
Iteration  13: 4890728.867 ops/s
Iteration  14: 4907455.836 ops/s
Iteration  15: 4891584.524 ops/s
Iteration  16: 4851275.629 ops/s
Iteration  17: 4883207.340 ops/s
Iteration  18: 4874728.230 ops/s
Iteration  19: 4907321.105 ops/s
Iteration  20: 4871834.646 ops/s
Iteration  21: 4896020.981 ops/s
Iteration  22: 4924475.303 ops/s
Iteration  23: 4868838.617 ops/s
Iteration  24: 4875435.870 ops/s
Iteration  25: 4953231.304 ops/s
Iteration  26: 4875813.062 ops/s
Iteration  27: 4858655.021 ops/s
Iteration  28: 4919895.359 ops/s
Iteration  29: 4883973.007 ops/s
Iteration  30: 4852571.733 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_takeLastZeroProcessesAllItemsButIgnoresThem":
  4885567.418 ±(99.9%) 23002.256 ops/s [Average]
  (min, avg, max) = (4794492.712, 4885567.418, 4953231.304), stdev = 34428.697
  CI (99.9%): [4862565.162, 4908569.674] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
FlowableTakeLastOneTest._Benchmark.benchmark_takeLastZeroProcessesAllItemsButIgnoresThem  thrpt   30  4885567.418 ± 23002.256  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastRange$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastRange

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8596154.794 ops/s
# Warmup Iteration   2: 11963683.778 ops/s
# Warmup Iteration   3: 13027235.692 ops/s
# Warmup Iteration   4: 13031634.053 ops/s
# Warmup Iteration   5: 13157116.045 ops/s
# Warmup Iteration   6: 13020386.288 ops/s
# Warmup Iteration   7: 13054110.133 ops/s
# Warmup Iteration   8: 13077864.990 ops/s
# Warmup Iteration   9: 13102351.945 ops/s
# Warmup Iteration  10: 13044161.123 ops/s
# Warmup Iteration  11: 13061682.691 ops/s
# Warmup Iteration  12: 12945401.193 ops/s
# Warmup Iteration  13: 12999876.287 ops/s
# Warmup Iteration  14: 12987153.964 ops/s
# Warmup Iteration  15: 13016297.329 ops/s
# Warmup Iteration  16: 13082332.558 ops/s
# Warmup Iteration  17: 13027617.287 ops/s
# Warmup Iteration  18: 12981884.592 ops/s
# Warmup Iteration  19: 13015446.092 ops/s
# Warmup Iteration  20: 12988651.410 ops/s
# Warmup Iteration  21: 13080909.394 ops/s
# Warmup Iteration  22: 12934001.736 ops/s
# Warmup Iteration  23: 13031702.149 ops/s
# Warmup Iteration  24: 13064828.220 ops/s
# Warmup Iteration  25: 13045683.812 ops/s
# Warmup Iteration  26: 13053461.145 ops/s
# Warmup Iteration  27: 13066521.116 ops/s
# Warmup Iteration  28: 13057461.593 ops/s
# Warmup Iteration  29: 13051225.711 ops/s
# Warmup Iteration  30: 13123134.204 ops/s
Iteration   1: 12960052.343 ops/s
Iteration   2: 13084540.907 ops/s
Iteration   3: 12974783.616 ops/s
Iteration   4: 12947907.129 ops/s
Iteration   5: 12852234.190 ops/s
Iteration   6: 12576156.677 ops/s
Iteration   7: 12799472.980 ops/s
Iteration   8: 12985424.245 ops/s
Iteration   9: 12992152.670 ops/s
Iteration  10: 13027168.186 ops/s
Iteration  11: 12970929.571 ops/s
Iteration  12: 12974453.354 ops/s
Iteration  13: 12927556.157 ops/s
Iteration  14: 13025216.250 ops/s
Iteration  15: 13111117.004 ops/s
Iteration  16: 13090266.416 ops/s
Iteration  17: 12968409.465 ops/s
Iteration  18: 13054527.661 ops/s
Iteration  19: 12972090.115 ops/s
Iteration  20: 12967215.944 ops/s
Iteration  21: 12992530.677 ops/s
Iteration  22: 12910229.838 ops/s
Iteration  23: 12972956.683 ops/s
Iteration  24: 13033708.698 ops/s
Iteration  25: 13009204.544 ops/s
Iteration  26: 13013443.408 ops/s
Iteration  27: 13034072.940 ops/s
Iteration  28: 13005484.951 ops/s
Iteration  29: 13041851.353 ops/s
Iteration  30: 12999302.516 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastRange":
  12975815.350 ±(99.9%) 66132.706 ops/s [Average]
  (min, avg, max) = (12576156.677, 12975815.350, 13111117.004), stdev = 98984.328
  CI (99.9%): [12909682.644, 13041948.056] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastRange  thrpt   30  12975815.350 ± 66132.706  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastRange$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastRange

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8581929.929 ops/s
# Warmup Iteration   2: 11735537.708 ops/s
# Warmup Iteration   3: 13058540.372 ops/s
# Warmup Iteration   4: 13201776.696 ops/s
# Warmup Iteration   5: 13154433.849 ops/s
# Warmup Iteration   6: 13139292.444 ops/s
# Warmup Iteration   7: 13144255.946 ops/s
# Warmup Iteration   8: 13093860.222 ops/s
# Warmup Iteration   9: 13124796.702 ops/s
# Warmup Iteration  10: 13086700.463 ops/s
# Warmup Iteration  11: 13112634.570 ops/s
# Warmup Iteration  12: 13097503.234 ops/s
# Warmup Iteration  13: 12986543.008 ops/s
# Warmup Iteration  14: 13102593.184 ops/s
# Warmup Iteration  15: 13090113.403 ops/s
# Warmup Iteration  16: 13056097.492 ops/s
# Warmup Iteration  17: 13169629.003 ops/s
# Warmup Iteration  18: 13079998.364 ops/s
# Warmup Iteration  19: 13111986.770 ops/s
# Warmup Iteration  20: 13176859.358 ops/s
# Warmup Iteration  21: 13051387.303 ops/s
# Warmup Iteration  22: 13157930.799 ops/s
# Warmup Iteration  23: 13142335.455 ops/s
# Warmup Iteration  24: 13060563.353 ops/s
# Warmup Iteration  25: 13135813.434 ops/s
# Warmup Iteration  26: 13189184.472 ops/s
# Warmup Iteration  27: 13099888.393 ops/s
# Warmup Iteration  28: 13079581.441 ops/s
# Warmup Iteration  29: 13106594.781 ops/s
# Warmup Iteration  30: 13113937.618 ops/s
Iteration   1: 13237730.313 ops/s
Iteration   2: 13113506.175 ops/s
Iteration   3: 13213963.698 ops/s
Iteration   4: 12871491.537 ops/s
Iteration   5: 12894548.994 ops/s
Iteration   6: 13119285.104 ops/s
Iteration   7: 13148117.404 ops/s
Iteration   8: 13088568.437 ops/s
Iteration   9: 13105299.490 ops/s
Iteration  10: 13153988.022 ops/s
Iteration  11: 13094243.677 ops/s
Iteration  12: 13076029.922 ops/s
Iteration  13: 13182574.676 ops/s
Iteration  14: 13173151.297 ops/s
Iteration  15: 13235231.209 ops/s
Iteration  16: 13085382.698 ops/s
Iteration  17: 13110612.015 ops/s
Iteration  18: 13169583.059 ops/s
Iteration  19: 13126392.509 ops/s
Iteration  20: 13110358.924 ops/s
Iteration  21: 13164435.427 ops/s
Iteration  22: 13206340.816 ops/s
Iteration  23: 13073044.528 ops/s
Iteration  24: 13100503.142 ops/s
Iteration  25: 13188660.161 ops/s
Iteration  26: 13196466.149 ops/s
Iteration  27: 13171642.897 ops/s
Iteration  28: 13126515.534 ops/s
Iteration  29: 13153087.777 ops/s
Iteration  30: 13246404.259 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastRange":
  13131238.662 ±(99.9%) 55971.213 ops/s [Average]
  (min, avg, max) = (12871491.537, 13131238.662, 13246404.259), stdev = 83775.083
  CI (99.9%): [13075267.448, 13187209.875] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastRange  thrpt   30  13131238.662 ± 55971.213  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_issue1522$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_issue1522

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5675358.012 ops/s
# Warmup Iteration   2: 7948282.149 ops/s
# Warmup Iteration   3: 9092920.754 ops/s
# Warmup Iteration   4: 9112794.519 ops/s
# Warmup Iteration   5: 9055411.028 ops/s
# Warmup Iteration   6: 9051814.317 ops/s
# Warmup Iteration   7: 9048240.898 ops/s
# Warmup Iteration   8: 9060940.017 ops/s
# Warmup Iteration   9: 9068086.050 ops/s
# Warmup Iteration  10: 9036871.350 ops/s
# Warmup Iteration  11: 9018645.448 ops/s
# Warmup Iteration  12: 9038428.449 ops/s
# Warmup Iteration  13: 9081582.901 ops/s
# Warmup Iteration  14: 9030719.921 ops/s
# Warmup Iteration  15: 9058111.217 ops/s
# Warmup Iteration  16: 9070111.089 ops/s
# Warmup Iteration  17: 9049001.520 ops/s
# Warmup Iteration  18: 9049314.469 ops/s
# Warmup Iteration  19: 9058543.974 ops/s
# Warmup Iteration  20: 9059638.207 ops/s
# Warmup Iteration  21: 9034217.789 ops/s
# Warmup Iteration  22: 9022504.117 ops/s
# Warmup Iteration  23: 9059373.795 ops/s
# Warmup Iteration  24: 9088940.205 ops/s
# Warmup Iteration  25: 8995330.390 ops/s
# Warmup Iteration  26: 9038137.685 ops/s
# Warmup Iteration  27: 9072991.485 ops/s
# Warmup Iteration  28: 8998911.462 ops/s
# Warmup Iteration  29: 9056566.227 ops/s
# Warmup Iteration  30: 9055195.149 ops/s
Iteration   1: 9019267.631 ops/s
Iteration   2: 9011192.653 ops/s
Iteration   3: 8887816.473 ops/s
Iteration   4: 8886670.772 ops/s
Iteration   5: 9042994.747 ops/s
Iteration   6: 9059925.609 ops/s
Iteration   7: 9035827.067 ops/s
Iteration   8: 9036531.845 ops/s
Iteration   9: 9104850.784 ops/s
Iteration  10: 9068118.923 ops/s
Iteration  11: 9023807.914 ops/s
Iteration  12: 9032725.691 ops/s
Iteration  13: 9009340.584 ops/s
Iteration  14: 9046371.096 ops/s
Iteration  15: 9005838.611 ops/s
Iteration  16: 9026394.466 ops/s
Iteration  17: 9098744.832 ops/s
Iteration  18: 9052579.349 ops/s
Iteration  19: 9018932.204 ops/s
Iteration  20: 9033932.682 ops/s
Iteration  21: 9067258.275 ops/s
Iteration  22: 9044096.665 ops/s
Iteration  23: 9076459.659 ops/s
Iteration  24: 9122612.148 ops/s
Iteration  25: 9030894.338 ops/s
Iteration  26: 9035690.873 ops/s
Iteration  27: 9025500.989 ops/s
Iteration  28: 9046320.443 ops/s
Iteration  29: 9056714.425 ops/s
Iteration  30: 9026505.946 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_issue1522":
  9034463.923 ±(99.9%) 32567.194 ops/s [Average]
  (min, avg, max) = (8886670.772, 9034463.923, 9122612.148), stdev = 48745.047
  CI (99.9%): [9001896.729, 9067031.117] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableTakeLastTest._Benchmark.benchmark_issue1522  thrpt   30  9034463.923 ± 32567.194  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnoredFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnoredFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3175011.848 ops/s
# Warmup Iteration   2: 3858629.973 ops/s
# Warmup Iteration   3: 4693474.949 ops/s
# Warmup Iteration   4: 4764570.133 ops/s
# Warmup Iteration   5: 4707925.895 ops/s
# Warmup Iteration   6: 4710500.919 ops/s
# Warmup Iteration   7: 4672124.049 ops/s
# Warmup Iteration   8: 4735271.348 ops/s
# Warmup Iteration   9: 4700632.395 ops/s
# Warmup Iteration  10: 4734654.191 ops/s
# Warmup Iteration  11: 4719973.985 ops/s
# Warmup Iteration  12: 4666529.343 ops/s
# Warmup Iteration  13: 4673944.511 ops/s
# Warmup Iteration  14: 4739104.616 ops/s
# Warmup Iteration  15: 4683428.124 ops/s
# Warmup Iteration  16: 4694136.170 ops/s
# Warmup Iteration  17: 4680950.070 ops/s
# Warmup Iteration  18: 4694604.872 ops/s
# Warmup Iteration  19: 4697919.349 ops/s
# Warmup Iteration  20: 4743410.580 ops/s
# Warmup Iteration  21: 4722943.497 ops/s
# Warmup Iteration  22: 4703681.395 ops/s
# Warmup Iteration  23: 4721959.445 ops/s
# Warmup Iteration  24: 4674605.546 ops/s
# Warmup Iteration  25: 4702254.747 ops/s
# Warmup Iteration  26: 4689202.478 ops/s
# Warmup Iteration  27: 4660762.743 ops/s
# Warmup Iteration  28: 4693694.838 ops/s
# Warmup Iteration  29: 4695259.143 ops/s
# Warmup Iteration  30: 4707802.259 ops/s
Iteration   1: 4705015.345 ops/s
Iteration   2: 4660249.829 ops/s
Iteration   3: 4612756.487 ops/s
Iteration   4: 4726112.381 ops/s
Iteration   5: 4684032.732 ops/s
Iteration   6: 4700288.751 ops/s
Iteration   7: 4726976.345 ops/s
Iteration   8: 4732370.628 ops/s
Iteration   9: 4703416.415 ops/s
Iteration  10: 4711040.157 ops/s
Iteration  11: 4716886.293 ops/s
Iteration  12: 4740079.531 ops/s
Iteration  13: 4681476.911 ops/s
Iteration  14: 4682392.566 ops/s
Iteration  15: 4706461.348 ops/s
Iteration  16: 4720120.752 ops/s
Iteration  17: 4681652.504 ops/s
Iteration  18: 4688327.804 ops/s
Iteration  19: 4707350.228 ops/s
Iteration  20: 4738214.644 ops/s
Iteration  21: 4708561.205 ops/s
Iteration  22: 4734558.695 ops/s
Iteration  23: 4703299.072 ops/s
Iteration  24: 4744059.863 ops/s
Iteration  25: 4743695.604 ops/s
Iteration  26: 4695311.799 ops/s
Iteration  27: 4679798.931 ops/s
Iteration  28: 4711828.365 ops/s
Iteration  29: 4713533.752 ops/s
Iteration  30: 4715799.223 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnoredFlowable":
  4705855.605 ±(99.9%) 18462.152 ops/s [Average]
  (min, avg, max) = (4612756.487, 4705855.605, 4744059.863), stdev = 27633.281
  CI (99.9%): [4687393.454, 4724317.757] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnoredFlowable  thrpt   30  4705855.605 ± 18462.152  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_seedFactoryFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_seedFactoryFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1181585.671 ops/s
# Warmup Iteration   2: 1640820.961 ops/s
# Warmup Iteration   3: 2027011.356 ops/s
# Warmup Iteration   4: 2034912.741 ops/s
# Warmup Iteration   5: 2037910.926 ops/s
# Warmup Iteration   6: 2041184.619 ops/s
# Warmup Iteration   7: 2041020.066 ops/s
# Warmup Iteration   8: 2021496.783 ops/s
# Warmup Iteration   9: 2033897.490 ops/s
# Warmup Iteration  10: 2033859.267 ops/s
# Warmup Iteration  11: 2037621.337 ops/s
# Warmup Iteration  12: 2029286.178 ops/s
# Warmup Iteration  13: 2037448.762 ops/s
# Warmup Iteration  14: 2028530.048 ops/s
# Warmup Iteration  15: 2033159.698 ops/s
# Warmup Iteration  16: 2034400.301 ops/s
# Warmup Iteration  17: 2011734.719 ops/s
# Warmup Iteration  18: 2006067.845 ops/s
# Warmup Iteration  19: 2019750.748 ops/s
# Warmup Iteration  20: 2005907.625 ops/s
# Warmup Iteration  21: 2009553.913 ops/s
# Warmup Iteration  22: 2016929.297 ops/s
# Warmup Iteration  23: 2020839.807 ops/s
# Warmup Iteration  24: 2014270.598 ops/s
# Warmup Iteration  25: 2019487.590 ops/s
# Warmup Iteration  26: 2014069.689 ops/s
# Warmup Iteration  27: 2013464.762 ops/s
# Warmup Iteration  28: 2015204.773 ops/s
# Warmup Iteration  29: 2010706.177 ops/s
# Warmup Iteration  30: 2010131.897 ops/s
Iteration   1: 1993746.940 ops/s
Iteration   2: 1962621.289 ops/s
Iteration   3: 2006744.595 ops/s
Iteration   4: 2014704.494 ops/s
Iteration   5: 2016146.679 ops/s
Iteration   6: 2022131.742 ops/s
Iteration   7: 2007929.987 ops/s
Iteration   8: 2016501.042 ops/s
Iteration   9: 2011003.012 ops/s
Iteration  10: 2016325.813 ops/s
Iteration  11: 2014020.770 ops/s
Iteration  12: 2015809.689 ops/s
Iteration  13: 2014794.492 ops/s
Iteration  14: 2007980.647 ops/s
Iteration  15: 2011810.144 ops/s
Iteration  16: 2019089.604 ops/s
Iteration  17: 2017867.483 ops/s
Iteration  18: 2019104.911 ops/s
Iteration  19: 2006315.423 ops/s
Iteration  20: 2018370.725 ops/s
Iteration  21: 2013724.786 ops/s
Iteration  22: 2017319.079 ops/s
Iteration  23: 2009593.015 ops/s
Iteration  24: 2012609.924 ops/s
Iteration  25: 2019556.867 ops/s
Iteration  26: 2020438.944 ops/s
Iteration  27: 2023505.416 ops/s
Iteration  28: 2012894.234 ops/s
Iteration  29: 2017066.172 ops/s
Iteration  30: 2023539.146 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_seedFactoryFlowable":
  2012775.569 ±(99.9%) 7519.137 ops/s [Average]
  (min, avg, max) = (1962621.289, 2012775.569, 2023539.146), stdev = 11254.291
  CI (99.9%): [2005256.432, 2020294.706] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FlowableScanTest._Benchmark.benchmark_seedFactoryFlowable  thrpt   30  2012775.569 ± 7519.137  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.SubscribeWithTest._Benchmark.benchmark_withFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.SubscribeWithTest._Benchmark.benchmark_withFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2870882.420 ops/s
# Warmup Iteration   2: 3612946.361 ops/s
# Warmup Iteration   3: 4206856.997 ops/s
# Warmup Iteration   4: 4236744.605 ops/s
# Warmup Iteration   5: 4222964.146 ops/s
# Warmup Iteration   6: 4226733.174 ops/s
# Warmup Iteration   7: 4228482.397 ops/s
# Warmup Iteration   8: 4226687.359 ops/s
# Warmup Iteration   9: 4172834.293 ops/s
# Warmup Iteration  10: 4199350.474 ops/s
# Warmup Iteration  11: 4187313.802 ops/s
# Warmup Iteration  12: 4224308.425 ops/s
# Warmup Iteration  13: 4216516.520 ops/s
# Warmup Iteration  14: 4212999.004 ops/s
# Warmup Iteration  15: 4212876.550 ops/s
# Warmup Iteration  16: 4187236.427 ops/s
# Warmup Iteration  17: 4213578.393 ops/s
# Warmup Iteration  18: 4195385.816 ops/s
# Warmup Iteration  19: 4199039.357 ops/s
# Warmup Iteration  20: 4192248.996 ops/s
# Warmup Iteration  21: 4216122.832 ops/s
# Warmup Iteration  22: 4220217.998 ops/s
# Warmup Iteration  23: 4216083.081 ops/s
# Warmup Iteration  24: 4193006.139 ops/s
# Warmup Iteration  25: 4199602.931 ops/s
# Warmup Iteration  26: 4205448.743 ops/s
# Warmup Iteration  27: 4205389.000 ops/s
# Warmup Iteration  28: 4218942.052 ops/s
# Warmup Iteration  29: 4177646.916 ops/s
# Warmup Iteration  30: 4109887.699 ops/s
Iteration   1: 4164776.790 ops/s
Iteration   2: 4214641.878 ops/s
Iteration   3: 4204374.509 ops/s
Iteration   4: 4209760.775 ops/s
Iteration   5: 4200171.468 ops/s
Iteration   6: 4205315.166 ops/s
Iteration   7: 4230713.590 ops/s
Iteration   8: 4222525.243 ops/s
Iteration   9: 4209822.206 ops/s
Iteration  10: 4197101.633 ops/s
Iteration  11: 4207385.912 ops/s
Iteration  12: 4190352.764 ops/s
Iteration  13: 4225945.821 ops/s
Iteration  14: 4213221.101 ops/s
Iteration  15: 4191963.410 ops/s
Iteration  16: 4231275.417 ops/s
Iteration  17: 4235826.418 ops/s
Iteration  18: 4214686.097 ops/s
Iteration  19: 4197933.427 ops/s
Iteration  20: 4199330.846 ops/s
Iteration  21: 4207509.394 ops/s
Iteration  22: 4221713.135 ops/s
Iteration  23: 4217303.287 ops/s
Iteration  24: 4187900.501 ops/s
Iteration  25: 4222337.523 ops/s
Iteration  26: 4209344.236 ops/s
Iteration  27: 4196962.666 ops/s
Iteration  28: 4187714.325 ops/s
Iteration  29: 4202153.446 ops/s
Iteration  30: 4207101.546 ops/s


Result "io.reactivex.rxjava3.internal.SubscribeWithTest._Benchmark.benchmark_withFlowable":
  4207572.151 ±(99.9%) 10193.509 ops/s [Average]
  (min, avg, max) = (4164776.790, 4207572.151, 4235826.418), stdev = 15257.165
  CI (99.9%): [4197378.642, 4217765.660] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
SubscribeWithTest._Benchmark.benchmark_withFlowable  thrpt   30  4207572.151 ± 10193.509  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3169190.510 ops/s
# Warmup Iteration   2: 5158732.666 ops/s
# Warmup Iteration   3: 5789020.512 ops/s
# Warmup Iteration   4: 5821412.500 ops/s
# Warmup Iteration   5: 5845590.653 ops/s
# Warmup Iteration   6: 5749312.024 ops/s
# Warmup Iteration   7: 5793440.578 ops/s
# Warmup Iteration   8: 5810611.662 ops/s
# Warmup Iteration   9: 5762361.629 ops/s
# Warmup Iteration  10: 5802817.995 ops/s
# Warmup Iteration  11: 5811918.040 ops/s
# Warmup Iteration  12: 5804025.538 ops/s
# Warmup Iteration  13: 5713548.510 ops/s
# Warmup Iteration  14: 5807116.477 ops/s
# Warmup Iteration  15: 5825066.249 ops/s
# Warmup Iteration  16: 5772038.494 ops/s
# Warmup Iteration  17: 5803665.605 ops/s
# Warmup Iteration  18: 5839659.773 ops/s
# Warmup Iteration  19: 5757358.968 ops/s
# Warmup Iteration  20: 5849421.339 ops/s
# Warmup Iteration  21: 5814054.969 ops/s
# Warmup Iteration  22: 5798498.004 ops/s
# Warmup Iteration  23: 5880234.284 ops/s
# Warmup Iteration  24: 5817848.564 ops/s
# Warmup Iteration  25: 5841341.249 ops/s
# Warmup Iteration  26: 5765522.041 ops/s
# Warmup Iteration  27: 5785842.770 ops/s
# Warmup Iteration  28: 5769824.936 ops/s
# Warmup Iteration  29: 5533321.007 ops/s
# Warmup Iteration  30: 5729490.590 ops/s
Iteration   1: 5791779.163 ops/s
Iteration   2: 5835773.998 ops/s
Iteration   3: 5799911.574 ops/s
Iteration   4: 5819610.934 ops/s
Iteration   5: 5804782.213 ops/s
Iteration   6: 5787308.746 ops/s
Iteration   7: 5817148.613 ops/s
Iteration   8: 5818072.661 ops/s
Iteration   9: 5822145.314 ops/s
Iteration  10: 5820489.207 ops/s
Iteration  11: 5815125.012 ops/s
Iteration  12: 5833123.089 ops/s
Iteration  13: 5808110.264 ops/s
Iteration  14: 5762257.323 ops/s
Iteration  15: 5746529.687 ops/s
Iteration  16: 5767569.488 ops/s
Iteration  17: 5798474.446 ops/s
Iteration  18: 5804959.622 ops/s
Iteration  19: 5823921.219 ops/s
Iteration  20: 5845291.977 ops/s
Iteration  21: 5887920.743 ops/s
Iteration  22: 5799250.994 ops/s
Iteration  23: 5807226.533 ops/s
Iteration  24: 5808756.293 ops/s
Iteration  25: 5774190.281 ops/s
Iteration  26: 5860990.401 ops/s
Iteration  27: 5860849.688 ops/s
Iteration  28: 5827488.773 ops/s
Iteration  29: 5883858.070 ops/s
Iteration  30: 5796881.927 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_dispose":
  5814326.608 ±(99.9%) 21635.989 ops/s [Average]
  (min, avg, max) = (5746529.687, 5814326.608, 5887920.743), stdev = 32383.733
  CI (99.9%): [5792690.619, 5835962.598] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
FlowableToListTest._Benchmark.benchmark_dispose  thrpt   30  5814326.608 ± 21635.989  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_basic$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_basic

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2317696.522 ops/s
# Warmup Iteration   2: 3563718.718 ops/s
# Warmup Iteration   3: 4176671.721 ops/s
# Warmup Iteration   4: 4150478.003 ops/s
# Warmup Iteration   5: 4168370.260 ops/s
# Warmup Iteration   6: 4140985.130 ops/s
# Warmup Iteration   7: 4171503.582 ops/s
# Warmup Iteration   8: 4169083.021 ops/s
# Warmup Iteration   9: 4137843.620 ops/s
# Warmup Iteration  10: 4157228.678 ops/s
# Warmup Iteration  11: 4159923.363 ops/s
# Warmup Iteration  12: 4155414.889 ops/s
# Warmup Iteration  13: 4171919.331 ops/s
# Warmup Iteration  14: 4132731.400 ops/s
# Warmup Iteration  15: 4149125.170 ops/s
# Warmup Iteration  16: 4134658.644 ops/s
# Warmup Iteration  17: 4139399.934 ops/s
# Warmup Iteration  18: 4147064.291 ops/s
# Warmup Iteration  19: 4147129.932 ops/s
# Warmup Iteration  20: 4147222.752 ops/s
# Warmup Iteration  21: 4143535.993 ops/s
# Warmup Iteration  22: 4145470.066 ops/s
# Warmup Iteration  23: 4146961.052 ops/s
# Warmup Iteration  24: 4134095.970 ops/s
# Warmup Iteration  25: 4151624.085 ops/s
# Warmup Iteration  26: 4153828.270 ops/s
# Warmup Iteration  27: 4115777.689 ops/s
# Warmup Iteration  28: 4059154.710 ops/s
# Warmup Iteration  29: 4114572.228 ops/s
# Warmup Iteration  30: 4123022.883 ops/s
Iteration   1: 4119792.419 ops/s
Iteration   2: 4142529.799 ops/s
Iteration   3: 4133340.916 ops/s
Iteration   4: 4127546.843 ops/s
Iteration   5: 4148063.798 ops/s
Iteration   6: 4153604.308 ops/s
Iteration   7: 4146436.191 ops/s
Iteration   8: 4148562.582 ops/s
Iteration   9: 4147935.775 ops/s
Iteration  10: 4156865.577 ops/s
Iteration  11: 4149768.635 ops/s
Iteration  12: 4165385.634 ops/s
Iteration  13: 4139196.751 ops/s
Iteration  14: 4144120.838 ops/s
Iteration  15: 4146252.949 ops/s
Iteration  16: 4133628.634 ops/s
Iteration  17: 4155414.752 ops/s
Iteration  18: 4156292.463 ops/s
Iteration  19: 4124507.548 ops/s
Iteration  20: 4126882.374 ops/s
Iteration  21: 4175777.339 ops/s
Iteration  22: 4156027.250 ops/s
Iteration  23: 4140812.829 ops/s
Iteration  24: 4148740.651 ops/s
Iteration  25: 4149616.310 ops/s
Iteration  26: 4150417.067 ops/s
Iteration  27: 4157263.270 ops/s
Iteration  28: 4171413.575 ops/s
Iteration  29: 4136555.535 ops/s
Iteration  30: 4152249.321 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_basic":
  4146833.398 ±(99.9%) 8719.591 ops/s [Average]
  (min, avg, max) = (4119792.419, 4146833.398, 4175777.339), stdev = 13051.075
  CI (99.9%): [4138113.806, 4155552.989] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_basic  thrpt   30  4146833.398 ± 8719.591  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_requestOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_requestOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 520662.546 ops/s
# Warmup Iteration   2: 668184.944 ops/s
# Warmup Iteration   3: 634586.464 ops/s
# Warmup Iteration   4: 718363.791 ops/s
# Warmup Iteration   5: 717008.314 ops/s
# Warmup Iteration   6: 717406.256 ops/s
# Warmup Iteration   7: 719963.471 ops/s
# Warmup Iteration   8: 721918.109 ops/s
# Warmup Iteration   9: 710378.766 ops/s
# Warmup Iteration  10: 719258.013 ops/s
# Warmup Iteration  11: 721514.117 ops/s
# Warmup Iteration  12: 710925.898 ops/s
# Warmup Iteration  13: 707419.531 ops/s
# Warmup Iteration  14: 712876.344 ops/s
# Warmup Iteration  15: 707807.787 ops/s
# Warmup Iteration  16: 705092.947 ops/s
# Warmup Iteration  17: 711000.643 ops/s
# Warmup Iteration  18: 711730.798 ops/s
# Warmup Iteration  19: 705728.254 ops/s
# Warmup Iteration  20: 719101.756 ops/s
# Warmup Iteration  21: 708618.221 ops/s
# Warmup Iteration  22: 710393.263 ops/s
# Warmup Iteration  23: 717166.307 ops/s
# Warmup Iteration  24: 713840.412 ops/s
# Warmup Iteration  25: 711131.236 ops/s
# Warmup Iteration  26: 707880.037 ops/s
# Warmup Iteration  27: 699866.271 ops/s
# Warmup Iteration  28: 713297.230 ops/s
# Warmup Iteration  29: 714632.031 ops/s
# Warmup Iteration  30: 711341.971 ops/s
Iteration   1: 709599.162 ops/s
Iteration   2: 707723.905 ops/s
Iteration   3: 704744.458 ops/s
Iteration   4: 699902.114 ops/s
Iteration   5: 711469.449 ops/s
Iteration   6: 720276.304 ops/s
Iteration   7: 711746.906 ops/s
Iteration   8: 707608.774 ops/s
Iteration   9: 706563.010 ops/s
Iteration  10: 708218.503 ops/s
Iteration  11: 710270.273 ops/s
Iteration  12: 711525.393 ops/s
Iteration  13: 711024.790 ops/s
Iteration  14: 719527.639 ops/s
Iteration  15: 705164.480 ops/s
Iteration  16: 714322.076 ops/s
Iteration  17: 704214.372 ops/s
Iteration  18: 716604.650 ops/s
Iteration  19: 711903.226 ops/s
Iteration  20: 715355.708 ops/s
Iteration  21: 712997.734 ops/s
Iteration  22: 712244.083 ops/s
Iteration  23: 711504.762 ops/s
Iteration  24: 703522.313 ops/s
Iteration  25: 711118.386 ops/s
Iteration  26: 714038.369 ops/s
Iteration  27: 706750.602 ops/s
Iteration  28: 713123.385 ops/s
Iteration  29: 713267.429 ops/s
Iteration  30: 711295.098 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_requestOverflow":
  710587.578 ±(99.9%) 3064.826 ops/s [Average]
  (min, avg, max) = (699902.114, 710587.578, 720276.304), stdev = 4587.287
  CI (99.9%): [707522.753, 713652.404] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableTakeLastTest._Benchmark.benchmark_requestOverflow  thrpt   30  710587.578 ± 3064.826  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnEach$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnEach

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5739997.687 ops/s
# Warmup Iteration   2: 7801794.143 ops/s
# Warmup Iteration   3: 8881449.881 ops/s
# Warmup Iteration   4: 8903219.664 ops/s
# Warmup Iteration   5: 8814712.270 ops/s
# Warmup Iteration   6: 8811152.265 ops/s
# Warmup Iteration   7: 8845105.009 ops/s
# Warmup Iteration   8: 8825676.545 ops/s
# Warmup Iteration   9: 8790371.020 ops/s
# Warmup Iteration  10: 8781067.263 ops/s
# Warmup Iteration  11: 8795248.818 ops/s
# Warmup Iteration  12: 8870227.605 ops/s
# Warmup Iteration  13: 8834311.413 ops/s
# Warmup Iteration  14: 8824297.362 ops/s
# Warmup Iteration  15: 8858303.793 ops/s
# Warmup Iteration  16: 8873606.012 ops/s
# Warmup Iteration  17: 8867945.513 ops/s
# Warmup Iteration  18: 8850256.362 ops/s
# Warmup Iteration  19: 8872239.284 ops/s
# Warmup Iteration  20: 8841487.473 ops/s
# Warmup Iteration  21: 8858150.140 ops/s
# Warmup Iteration  22: 8874422.040 ops/s
# Warmup Iteration  23: 8885627.117 ops/s
# Warmup Iteration  24: 8831509.573 ops/s
# Warmup Iteration  25: 8796612.879 ops/s
# Warmup Iteration  26: 8509571.388 ops/s
# Warmup Iteration  27: 8756892.027 ops/s
# Warmup Iteration  28: 8826961.991 ops/s
# Warmup Iteration  29: 8928957.705 ops/s
# Warmup Iteration  30: 8834633.058 ops/s
Iteration   1: 8870447.105 ops/s
Iteration   2: 8846228.316 ops/s
Iteration   3: 8868680.353 ops/s
Iteration   4: 8834476.363 ops/s
Iteration   5: 8857546.674 ops/s
Iteration   6: 8870138.516 ops/s
Iteration   7: 8811731.062 ops/s
Iteration   8: 8839559.167 ops/s
Iteration   9: 8832055.252 ops/s
Iteration  10: 8825582.090 ops/s
Iteration  11: 8828456.468 ops/s
Iteration  12: 8827442.671 ops/s
Iteration  13: 8784795.866 ops/s
Iteration  14: 8815547.337 ops/s
Iteration  15: 8870860.887 ops/s
Iteration  16: 8827432.978 ops/s
Iteration  17: 8864150.133 ops/s
Iteration  18: 8789095.356 ops/s
Iteration  19: 8889454.079 ops/s
Iteration  20: 8833820.483 ops/s
Iteration  21: 8809998.634 ops/s
Iteration  22: 8857273.334 ops/s
Iteration  23: 8912179.379 ops/s
Iteration  24: 8890639.416 ops/s
Iteration  25: 8885566.628 ops/s
Iteration  26: 8814454.700 ops/s
Iteration  27: 8836000.095 ops/s
Iteration  28: 8843238.767 ops/s
Iteration  29: 8810201.067 ops/s
Iteration  30: 8877562.187 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnEach":
  8844153.845 ±(99.9%) 20878.346 ops/s [Average]
  (min, avg, max) = (8784795.866, 8844153.845, 8912179.379), stdev = 31249.728
  CI (99.9%): [8823275.499, 8865032.192] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
FlowableDoOnTest._Benchmark.benchmark_doOnEach  thrpt   30  8844153.845 ± 20878.346  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnCompleted$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnCompleted

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5150924.149 ops/s
# Warmup Iteration   2: 7668110.189 ops/s
# Warmup Iteration   3: 8807330.767 ops/s
# Warmup Iteration   4: 8769783.587 ops/s
# Warmup Iteration   5: 8761775.381 ops/s
# Warmup Iteration   6: 8769643.855 ops/s
# Warmup Iteration   7: 8773147.507 ops/s
# Warmup Iteration   8: 8716047.674 ops/s
# Warmup Iteration   9: 8708531.965 ops/s
# Warmup Iteration  10: 8733337.745 ops/s
# Warmup Iteration  11: 8767852.560 ops/s
# Warmup Iteration  12: 8713672.935 ops/s
# Warmup Iteration  13: 8752754.607 ops/s
# Warmup Iteration  14: 8739112.493 ops/s
# Warmup Iteration  15: 8771890.193 ops/s
# Warmup Iteration  16: 8758105.905 ops/s
# Warmup Iteration  17: 8729155.447 ops/s
# Warmup Iteration  18: 8724384.600 ops/s
# Warmup Iteration  19: 8791574.917 ops/s
# Warmup Iteration  20: 8706812.394 ops/s
# Warmup Iteration  21: 8716904.184 ops/s
# Warmup Iteration  22: 8734179.559 ops/s
# Warmup Iteration  23: 8728550.610 ops/s
# Warmup Iteration  24: 8630584.667 ops/s
# Warmup Iteration  25: 8581303.796 ops/s
# Warmup Iteration  26: 8703525.219 ops/s
# Warmup Iteration  27: 8744985.608 ops/s
# Warmup Iteration  28: 8711761.450 ops/s
# Warmup Iteration  29: 8658825.698 ops/s
# Warmup Iteration  30: 8695041.519 ops/s
Iteration   1: 8718387.055 ops/s
Iteration   2: 8736172.618 ops/s
Iteration   3: 8734192.179 ops/s
Iteration   4: 8770989.513 ops/s
Iteration   5: 8723268.150 ops/s
Iteration   6: 8813227.156 ops/s
Iteration   7: 8754840.177 ops/s
Iteration   8: 8759727.650 ops/s
Iteration   9: 8748682.408 ops/s
Iteration  10: 8756861.443 ops/s
Iteration  11: 8719967.178 ops/s
Iteration  12: 8672479.262 ops/s
Iteration  13: 8758007.305 ops/s
Iteration  14: 8726508.244 ops/s
Iteration  15: 8754370.845 ops/s
Iteration  16: 8723089.562 ops/s
Iteration  17: 8674130.582 ops/s
Iteration  18: 8767828.470 ops/s
Iteration  19: 8769464.576 ops/s
Iteration  20: 8813393.767 ops/s
Iteration  21: 8702812.300 ops/s
Iteration  22: 8759878.029 ops/s
Iteration  23: 8703646.754 ops/s
Iteration  24: 8692569.479 ops/s
Iteration  25: 8822904.948 ops/s
Iteration  26: 8741251.787 ops/s
Iteration  27: 8757789.364 ops/s
Iteration  28: 8716428.846 ops/s
Iteration  29: 8690573.741 ops/s
Iteration  30: 8783695.638 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnCompleted":
  8742237.968 ±(99.9%) 25640.584 ops/s [Average]
  (min, avg, max) = (8672479.262, 8742237.968, 8822904.948), stdev = 38377.622
  CI (99.9%): [8716597.384, 8767878.551] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableDoOnTest._Benchmark.benchmark_doOnCompleted  thrpt   30  8742237.968 ± 25640.584  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_completedOkFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_completedOkFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3916970.051 ops/s
# Warmup Iteration   2: 5874226.692 ops/s
# Warmup Iteration   3: 6424150.242 ops/s
# Warmup Iteration   4: 6414788.264 ops/s
# Warmup Iteration   5: 6430155.112 ops/s
# Warmup Iteration   6: 6381732.571 ops/s
# Warmup Iteration   7: 6352597.455 ops/s
# Warmup Iteration   8: 6359248.653 ops/s
# Warmup Iteration   9: 6446989.030 ops/s
# Warmup Iteration  10: 6402712.385 ops/s
# Warmup Iteration  11: 6414624.378 ops/s
# Warmup Iteration  12: 6391547.100 ops/s
# Warmup Iteration  13: 6399361.444 ops/s
# Warmup Iteration  14: 6371155.798 ops/s
# Warmup Iteration  15: 6430855.156 ops/s
# Warmup Iteration  16: 6400566.313 ops/s
# Warmup Iteration  17: 6405172.745 ops/s
# Warmup Iteration  18: 6344929.005 ops/s
# Warmup Iteration  19: 6399698.296 ops/s
# Warmup Iteration  20: 6395628.746 ops/s
# Warmup Iteration  21: 6422234.716 ops/s
# Warmup Iteration  22: 6372018.517 ops/s
# Warmup Iteration  23: 6321717.349 ops/s
# Warmup Iteration  24: 6280720.603 ops/s
# Warmup Iteration  25: 6397167.610 ops/s
# Warmup Iteration  26: 6435792.601 ops/s
# Warmup Iteration  27: 6372741.681 ops/s
# Warmup Iteration  28: 6390965.380 ops/s
# Warmup Iteration  29: 6452412.539 ops/s
# Warmup Iteration  30: 6414705.784 ops/s
Iteration   1: 6388073.586 ops/s
Iteration   2: 6446345.592 ops/s
Iteration   3: 6450545.917 ops/s
Iteration   4: 6351744.991 ops/s
Iteration   5: 6355335.610 ops/s
Iteration   6: 6436353.075 ops/s
Iteration   7: 6422343.654 ops/s
Iteration   8: 6406253.993 ops/s
Iteration   9: 6389663.379 ops/s
Iteration  10: 6404271.084 ops/s
Iteration  11: 6383398.252 ops/s
Iteration  12: 6387826.627 ops/s
Iteration  13: 6374908.070 ops/s
Iteration  14: 6473947.297 ops/s
Iteration  15: 6392996.445 ops/s
Iteration  16: 6400892.324 ops/s
Iteration  17: 6419140.520 ops/s
Iteration  18: 6431550.704 ops/s
Iteration  19: 6397137.387 ops/s
Iteration  20: 6347846.843 ops/s
Iteration  21: 6349069.066 ops/s
Iteration  22: 6395679.223 ops/s
Iteration  23: 6390790.279 ops/s
Iteration  24: 6397539.981 ops/s
Iteration  25: 6415078.419 ops/s
Iteration  26: 6391395.807 ops/s
Iteration  27: 6414041.981 ops/s
Iteration  28: 6385877.592 ops/s
Iteration  29: 6402045.503 ops/s
Iteration  30: 6403112.617 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_completedOkFlowable":
  6400173.527 ±(99.9%) 19706.256 ops/s [Average]
  (min, avg, max) = (6347846.843, 6400173.527, 6473947.297), stdev = 29495.398
  CI (99.9%): [6380467.271, 6419879.783] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_completedOkFlowable  thrpt   30  6400173.527 ± 19706.256  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnTerminateComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnTerminateComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5560736.315 ops/s
# Warmup Iteration   2: 7537358.239 ops/s
# Warmup Iteration   3: 8659574.772 ops/s
# Warmup Iteration   4: 8644401.547 ops/s
# Warmup Iteration   5: 8565715.556 ops/s
# Warmup Iteration   6: 8568030.607 ops/s
# Warmup Iteration   7: 8637459.840 ops/s
# Warmup Iteration   8: 8646207.414 ops/s
# Warmup Iteration   9: 8591287.494 ops/s
# Warmup Iteration  10: 8639453.580 ops/s
# Warmup Iteration  11: 8681253.533 ops/s
# Warmup Iteration  12: 8707909.925 ops/s
# Warmup Iteration  13: 8652879.598 ops/s
# Warmup Iteration  14: 8674658.680 ops/s
# Warmup Iteration  15: 8648869.642 ops/s
# Warmup Iteration  16: 8571112.927 ops/s
# Warmup Iteration  17: 8591289.910 ops/s
# Warmup Iteration  18: 8618711.661 ops/s
# Warmup Iteration  19: 8565876.253 ops/s
# Warmup Iteration  20: 8608571.795 ops/s
# Warmup Iteration  21: 8564585.194 ops/s
# Warmup Iteration  22: 8492714.138 ops/s
# Warmup Iteration  23: 8357164.178 ops/s
# Warmup Iteration  24: 8566664.179 ops/s
# Warmup Iteration  25: 8610733.935 ops/s
# Warmup Iteration  26: 8589847.635 ops/s
# Warmup Iteration  27: 8625357.775 ops/s
# Warmup Iteration  28: 8641279.747 ops/s
# Warmup Iteration  29: 8631448.159 ops/s
# Warmup Iteration  30: 8614473.979 ops/s
Iteration   1: 8602139.181 ops/s
Iteration   2: 8605372.257 ops/s
Iteration   3: 8667563.108 ops/s
Iteration   4: 8569947.296 ops/s
Iteration   5: 8671343.156 ops/s
Iteration   6: 8600680.789 ops/s
Iteration   7: 8644377.841 ops/s
Iteration   8: 8648276.933 ops/s
Iteration   9: 8571758.009 ops/s
Iteration  10: 8589361.348 ops/s
Iteration  11: 8611027.251 ops/s
Iteration  12: 8628134.681 ops/s
Iteration  13: 8624011.164 ops/s
Iteration  14: 8663395.992 ops/s
Iteration  15: 8572356.620 ops/s
Iteration  16: 8594402.031 ops/s
Iteration  17: 8562505.532 ops/s
Iteration  18: 8603353.202 ops/s
Iteration  19: 8599138.545 ops/s
Iteration  20: 8565374.959 ops/s
Iteration  21: 8622945.106 ops/s
Iteration  22: 8641733.571 ops/s
Iteration  23: 8624293.697 ops/s
Iteration  24: 8603727.121 ops/s
Iteration  25: 8634121.448 ops/s
Iteration  26: 8613023.373 ops/s
Iteration  27: 8601284.693 ops/s
Iteration  28: 8625700.419 ops/s
Iteration  29: 8590088.324 ops/s
Iteration  30: 8631217.136 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnTerminateComplete":
  8612755.160 ±(99.9%) 19921.567 ops/s [Average]
  (min, avg, max) = (8562505.532, 8612755.160, 8671343.156), stdev = 29817.666
  CI (99.9%): [8592833.592, 8632676.727] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableDoOnTest._Benchmark.benchmark_doOnTerminateComplete  thrpt   30  8612755.160 ± 19921.567  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenNotEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenNotEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4342332.887 ops/s
# Warmup Iteration   2: 6161558.177 ops/s
# Warmup Iteration   3: 7008421.097 ops/s
# Warmup Iteration   4: 6999339.479 ops/s
# Warmup Iteration   5: 6969807.257 ops/s
# Warmup Iteration   6: 6967718.531 ops/s
# Warmup Iteration   7: 6966745.559 ops/s
# Warmup Iteration   8: 6993240.660 ops/s
# Warmup Iteration   9: 6977680.234 ops/s
# Warmup Iteration  10: 6938175.862 ops/s
# Warmup Iteration  11: 6988571.125 ops/s
# Warmup Iteration  12: 7003458.783 ops/s
# Warmup Iteration  13: 6985060.063 ops/s
# Warmup Iteration  14: 6955260.338 ops/s
# Warmup Iteration  15: 6989345.997 ops/s
# Warmup Iteration  16: 7002494.883 ops/s
# Warmup Iteration  17: 6953945.022 ops/s
# Warmup Iteration  18: 6965596.272 ops/s
# Warmup Iteration  19: 6982862.484 ops/s
# Warmup Iteration  20: 6960911.514 ops/s
# Warmup Iteration  21: 6878411.886 ops/s
# Warmup Iteration  22: 6777128.957 ops/s
# Warmup Iteration  23: 6970538.649 ops/s
# Warmup Iteration  24: 6957424.893 ops/s
# Warmup Iteration  25: 6972771.588 ops/s
# Warmup Iteration  26: 6907004.178 ops/s
# Warmup Iteration  27: 6971927.890 ops/s
# Warmup Iteration  28: 6934196.149 ops/s
# Warmup Iteration  29: 6975260.387 ops/s
# Warmup Iteration  30: 6963534.761 ops/s
Iteration   1: 6965383.943 ops/s
Iteration   2: 6980776.857 ops/s
Iteration   3: 6969435.239 ops/s
Iteration   4: 6931944.343 ops/s
Iteration   5: 6955347.319 ops/s
Iteration   6: 6973908.806 ops/s
Iteration   7: 6972403.140 ops/s
Iteration   8: 6954526.362 ops/s
Iteration   9: 6944706.505 ops/s
Iteration  10: 6966197.606 ops/s
Iteration  11: 6980703.023 ops/s
Iteration  12: 6927057.894 ops/s
Iteration  13: 6917334.521 ops/s
Iteration  14: 6930706.238 ops/s
Iteration  15: 6934308.715 ops/s
Iteration  16: 6950862.644 ops/s
Iteration  17: 6943501.127 ops/s
Iteration  18: 6941048.748 ops/s
Iteration  19: 6961401.267 ops/s
Iteration  20: 6949414.409 ops/s
Iteration  21: 6964644.727 ops/s
Iteration  22: 7006017.315 ops/s
Iteration  23: 6970014.486 ops/s
Iteration  24: 6992717.914 ops/s
Iteration  25: 6969179.562 ops/s
Iteration  26: 6917215.168 ops/s
Iteration  27: 6995123.788 ops/s
Iteration  28: 6932384.904 ops/s
Iteration  29: 6923411.702 ops/s
Iteration  30: 6939880.214 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenNotEmpty":
  6955385.283 ±(99.9%) 15700.447 ops/s [Average]
  (min, avg, max) = (6917215.168, 6955385.283, 7006017.315), stdev = 23499.692
  CI (99.9%): [6939684.836, 6971085.730] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenNotEmpty  thrpt   30  6955385.283 ± 15700.447  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_completedOk$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_completedOk

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5420518.380 ops/s
# Warmup Iteration   2: 7128009.315 ops/s
# Warmup Iteration   3: 8088096.214 ops/s
# Warmup Iteration   4: 8091949.148 ops/s
# Warmup Iteration   5: 7995701.168 ops/s
# Warmup Iteration   6: 8070352.649 ops/s
# Warmup Iteration   7: 8083199.271 ops/s
# Warmup Iteration   8: 8030985.858 ops/s
# Warmup Iteration   9: 8053844.588 ops/s
# Warmup Iteration  10: 8051563.123 ops/s
# Warmup Iteration  11: 7991213.839 ops/s
# Warmup Iteration  12: 8016792.265 ops/s
# Warmup Iteration  13: 8047189.156 ops/s
# Warmup Iteration  14: 8079462.058 ops/s
# Warmup Iteration  15: 7964934.140 ops/s
# Warmup Iteration  16: 8060769.145 ops/s
# Warmup Iteration  17: 8079065.428 ops/s
# Warmup Iteration  18: 8047872.952 ops/s
# Warmup Iteration  19: 8019188.068 ops/s
# Warmup Iteration  20: 7934303.234 ops/s
# Warmup Iteration  21: 7861695.743 ops/s
# Warmup Iteration  22: 8039277.869 ops/s
# Warmup Iteration  23: 8069583.346 ops/s
# Warmup Iteration  24: 8076738.526 ops/s
# Warmup Iteration  25: 8018305.367 ops/s
# Warmup Iteration  26: 8072777.583 ops/s
# Warmup Iteration  27: 8046207.119 ops/s
# Warmup Iteration  28: 8045317.103 ops/s
# Warmup Iteration  29: 8105501.707 ops/s
# Warmup Iteration  30: 8012695.725 ops/s
Iteration   1: 8039517.290 ops/s
Iteration   2: 8024718.520 ops/s
Iteration   3: 8054507.383 ops/s
Iteration   4: 8074376.813 ops/s
Iteration   5: 8040246.421 ops/s
Iteration   6: 8070959.451 ops/s
Iteration   7: 8020137.605 ops/s
Iteration   8: 8030746.879 ops/s
Iteration   9: 8047805.519 ops/s
Iteration  10: 8052783.854 ops/s
Iteration  11: 8068193.433 ops/s
Iteration  12: 8044674.391 ops/s
Iteration  13: 8062931.591 ops/s
Iteration  14: 8085968.995 ops/s
Iteration  15: 8055637.105 ops/s
Iteration  16: 8086098.738 ops/s
Iteration  17: 8025680.663 ops/s
Iteration  18: 8028334.915 ops/s
Iteration  19: 8037338.234 ops/s
Iteration  20: 8083099.115 ops/s
Iteration  21: 8115635.093 ops/s
Iteration  22: 8111156.354 ops/s
Iteration  23: 8064295.307 ops/s
Iteration  24: 8124603.076 ops/s
Iteration  25: 8050338.401 ops/s
Iteration  26: 8041607.117 ops/s
Iteration  27: 8058382.828 ops/s
Iteration  28: 8089568.228 ops/s
Iteration  29: 8103885.598 ops/s
Iteration  30: 8088834.153 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_completedOk":
  8062735.436 ±(99.9%) 19105.870 ops/s [Average]
  (min, avg, max) = (8020137.605, 8062735.436, 8124603.076), stdev = 28596.768
  CI (99.9%): [8043629.566, 8081841.305] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_completedOk  thrpt   30  8062735.436 ± 19105.870  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_range$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_range

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 552745.340 ops/s
# Warmup Iteration   2: 705178.726 ops/s
# Warmup Iteration   3: 747372.448 ops/s
# Warmup Iteration   4: 744845.050 ops/s
# Warmup Iteration   5: 744496.515 ops/s
# Warmup Iteration   6: 740361.077 ops/s
# Warmup Iteration   7: 743646.270 ops/s
# Warmup Iteration   8: 744433.242 ops/s
# Warmup Iteration   9: 748097.102 ops/s
# Warmup Iteration  10: 745949.392 ops/s
# Warmup Iteration  11: 749043.987 ops/s
# Warmup Iteration  12: 744586.142 ops/s
# Warmup Iteration  13: 742772.501 ops/s
# Warmup Iteration  14: 744569.276 ops/s
# Warmup Iteration  15: 740690.099 ops/s
# Warmup Iteration  16: 743970.975 ops/s
# Warmup Iteration  17: 779192.177 ops/s
# Warmup Iteration  18: 776454.632 ops/s
# Warmup Iteration  19: 758991.089 ops/s
# Warmup Iteration  20: 761002.018 ops/s
# Warmup Iteration  21: 770323.908 ops/s
# Warmup Iteration  22: 777046.785 ops/s
# Warmup Iteration  23: 774782.887 ops/s
# Warmup Iteration  24: 777131.569 ops/s
# Warmup Iteration  25: 776265.653 ops/s
# Warmup Iteration  26: 774647.650 ops/s
# Warmup Iteration  27: 777919.597 ops/s
# Warmup Iteration  28: 778715.115 ops/s
# Warmup Iteration  29: 777887.854 ops/s
# Warmup Iteration  30: 779022.102 ops/s
Iteration   1: 778101.102 ops/s
Iteration   2: 774954.838 ops/s
Iteration   3: 775070.532 ops/s
Iteration   4: 777441.702 ops/s
Iteration   5: 773352.185 ops/s
Iteration   6: 772434.359 ops/s
Iteration   7: 774226.268 ops/s
Iteration   8: 773009.534 ops/s
Iteration   9: 777151.497 ops/s
Iteration  10: 773867.452 ops/s
Iteration  11: 775723.381 ops/s
Iteration  12: 773372.871 ops/s
Iteration  13: 779960.794 ops/s
Iteration  14: 775572.341 ops/s
Iteration  15: 776205.859 ops/s
Iteration  16: 772405.713 ops/s
Iteration  17: 775666.176 ops/s
Iteration  18: 773751.395 ops/s
Iteration  19: 773423.513 ops/s
Iteration  20: 774261.096 ops/s
Iteration  21: 778293.857 ops/s
Iteration  22: 771760.983 ops/s
Iteration  23: 775985.243 ops/s
Iteration  24: 774717.156 ops/s
Iteration  25: 780114.759 ops/s
Iteration  26: 774946.743 ops/s
Iteration  27: 779298.620 ops/s
Iteration  28: 776995.087 ops/s
Iteration  29: 779634.635 ops/s
Iteration  30: 773654.516 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_range":
  775511.807 ±(99.9%) 1584.581 ops/s [Average]
  (min, avg, max) = (771760.983, 775511.807, 780114.759), stdev = 2371.726
  CI (99.9%): [773927.226, 777096.388] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
SingleFromPublisherTest._Benchmark.benchmark_range  thrpt   30  775511.807 ± 1584.581  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncRangeHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncRangeHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2361484.925 ops/s
# Warmup Iteration   2: 2879904.704 ops/s
# Warmup Iteration   3: 3581182.272 ops/s
# Warmup Iteration   4: 3606745.509 ops/s
# Warmup Iteration   5: 3588461.362 ops/s
# Warmup Iteration   6: 3591910.602 ops/s
# Warmup Iteration   7: 3586595.119 ops/s
# Warmup Iteration   8: 3558638.279 ops/s
# Warmup Iteration   9: 3576455.189 ops/s
# Warmup Iteration  10: 3592303.417 ops/s
# Warmup Iteration  11: 3579244.688 ops/s
# Warmup Iteration  12: 3584178.064 ops/s
# Warmup Iteration  13: 3591579.960 ops/s
# Warmup Iteration  14: 3581523.947 ops/s
# Warmup Iteration  15: 3590556.248 ops/s
# Warmup Iteration  16: 3562117.583 ops/s
# Warmup Iteration  17: 3549901.966 ops/s
# Warmup Iteration  18: 3529645.328 ops/s
# Warmup Iteration  19: 3544580.785 ops/s
# Warmup Iteration  20: 3569421.683 ops/s
# Warmup Iteration  21: 3563251.272 ops/s
# Warmup Iteration  22: 3566629.803 ops/s
# Warmup Iteration  23: 3569032.141 ops/s
# Warmup Iteration  24: 3570564.749 ops/s
# Warmup Iteration  25: 3547816.321 ops/s
# Warmup Iteration  26: 3576784.324 ops/s
# Warmup Iteration  27: 3576846.216 ops/s
# Warmup Iteration  28: 3562672.017 ops/s
# Warmup Iteration  29: 3555314.576 ops/s
# Warmup Iteration  30: 3583582.433 ops/s
Iteration   1: 3561393.638 ops/s
Iteration   2: 3573619.627 ops/s
Iteration   3: 3566192.074 ops/s
Iteration   4: 3566055.125 ops/s
Iteration   5: 3573512.745 ops/s
Iteration   6: 3572978.566 ops/s
Iteration   7: 3565582.679 ops/s
Iteration   8: 3560900.410 ops/s
Iteration   9: 3566376.608 ops/s
Iteration  10: 3554379.017 ops/s
Iteration  11: 3569074.669 ops/s
Iteration  12: 3566247.247 ops/s
Iteration  13: 3548917.329 ops/s
Iteration  14: 3570933.853 ops/s
Iteration  15: 3565525.085 ops/s
Iteration  16: 3574386.747 ops/s
Iteration  17: 3560445.200 ops/s
Iteration  18: 3574622.870 ops/s
Iteration  19: 3555409.959 ops/s
Iteration  20: 3572704.224 ops/s
Iteration  21: 3571351.375 ops/s
Iteration  22: 3558469.052 ops/s
Iteration  23: 3563907.308 ops/s
Iteration  24: 3567460.038 ops/s
Iteration  25: 3576171.583 ops/s
Iteration  26: 3552651.481 ops/s
Iteration  27: 3549341.719 ops/s
Iteration  28: 3572489.594 ops/s
Iteration  29: 3573243.739 ops/s
Iteration  30: 3573634.736 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncRangeHidden":
  3565932.610 ±(99.9%) 5275.506 ops/s [Average]
  (min, avg, max) = (3548917.329, 3565932.610, 3576171.583), stdev = 7896.130
  CI (99.9%): [3560657.104, 3571208.116] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FlowableFuseableTest._Benchmark.benchmark_syncRangeHidden  thrpt   30  3565932.610 ± 5275.506  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_noUnsubscribeDownstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_noUnsubscribeDownstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3261874.896 ops/s
# Warmup Iteration   2: 4889524.813 ops/s
# Warmup Iteration   3: 5591581.743 ops/s
# Warmup Iteration   4: 5599068.114 ops/s
# Warmup Iteration   5: 5619237.479 ops/s
# Warmup Iteration   6: 5561289.470 ops/s
# Warmup Iteration   7: 5596038.369 ops/s
# Warmup Iteration   8: 5605829.810 ops/s
# Warmup Iteration   9: 5602128.575 ops/s
# Warmup Iteration  10: 5550037.463 ops/s
# Warmup Iteration  11: 5608161.218 ops/s
# Warmup Iteration  12: 5543864.308 ops/s
# Warmup Iteration  13: 5596173.010 ops/s
# Warmup Iteration  14: 5598199.444 ops/s
# Warmup Iteration  15: 5608157.330 ops/s
# Warmup Iteration  16: 5587287.902 ops/s
# Warmup Iteration  17: 5423654.683 ops/s
# Warmup Iteration  18: 5467872.472 ops/s
# Warmup Iteration  19: 5572701.832 ops/s
# Warmup Iteration  20: 5562699.513 ops/s
# Warmup Iteration  21: 5556511.578 ops/s
# Warmup Iteration  22: 5559898.702 ops/s
# Warmup Iteration  23: 5612132.290 ops/s
# Warmup Iteration  24: 5594520.182 ops/s
# Warmup Iteration  25: 5561330.901 ops/s
# Warmup Iteration  26: 5551738.481 ops/s
# Warmup Iteration  27: 5551988.187 ops/s
# Warmup Iteration  28: 5539008.552 ops/s
# Warmup Iteration  29: 5549079.505 ops/s
# Warmup Iteration  30: 5589863.402 ops/s
Iteration   1: 5562525.071 ops/s
Iteration   2: 5578409.305 ops/s
Iteration   3: 5574971.897 ops/s
Iteration   4: 5597224.593 ops/s
Iteration   5: 5586795.718 ops/s
Iteration   6: 5564012.851 ops/s
Iteration   7: 5604143.809 ops/s
Iteration   8: 5583280.507 ops/s
Iteration   9: 5561917.669 ops/s
Iteration  10: 5570873.501 ops/s
Iteration  11: 5576253.807 ops/s
Iteration  12: 5551538.294 ops/s
Iteration  13: 5579064.069 ops/s
Iteration  14: 5548311.847 ops/s
Iteration  15: 5538484.724 ops/s
Iteration  16: 5571444.115 ops/s
Iteration  17: 5578822.887 ops/s
Iteration  18: 5608331.082 ops/s
Iteration  19: 5567359.050 ops/s
Iteration  20: 5572767.682 ops/s
Iteration  21: 5577131.422 ops/s
Iteration  22: 5569201.921 ops/s
Iteration  23: 5544551.972 ops/s
Iteration  24: 5591520.106 ops/s
Iteration  25: 5577376.921 ops/s
Iteration  26: 5570326.667 ops/s
Iteration  27: 5617122.070 ops/s
Iteration  28: 5572785.407 ops/s
Iteration  29: 5585960.440 ops/s
Iteration  30: 5559002.118 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_noUnsubscribeDownstream":
  5574717.051 ±(99.9%) 11939.566 ops/s [Average]
  (min, avg, max) = (5538484.724, 5574717.051, 5617122.070), stdev = 17870.582
  CI (99.9%): [5562777.485, 5586656.617] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableTakeWhileTest._Benchmark.benchmark_noUnsubscribeDownstream  thrpt   30  5574717.051 ± 11939.566  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnored$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnored

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2954311.205 ops/s
# Warmup Iteration   2: 3797039.820 ops/s
# Warmup Iteration   3: 3916490.877 ops/s
# Warmup Iteration   4: 4230108.852 ops/s
# Warmup Iteration   5: 4252315.452 ops/s
# Warmup Iteration   6: 4277708.699 ops/s
# Warmup Iteration   7: 4192946.861 ops/s
# Warmup Iteration   8: 4253766.950 ops/s
# Warmup Iteration   9: 4259817.767 ops/s
# Warmup Iteration  10: 4220145.811 ops/s
# Warmup Iteration  11: 4211546.157 ops/s
# Warmup Iteration  12: 4200737.191 ops/s
# Warmup Iteration  13: 4208089.623 ops/s
# Warmup Iteration  14: 4201607.219 ops/s
# Warmup Iteration  15: 4245526.010 ops/s
# Warmup Iteration  16: 4160562.133 ops/s
# Warmup Iteration  17: 4234044.451 ops/s
# Warmup Iteration  18: 4247912.428 ops/s
# Warmup Iteration  19: 4280184.065 ops/s
# Warmup Iteration  20: 4275610.690 ops/s
# Warmup Iteration  21: 4306341.215 ops/s
# Warmup Iteration  22: 4332870.484 ops/s
# Warmup Iteration  23: 4232827.556 ops/s
# Warmup Iteration  24: 4262746.773 ops/s
# Warmup Iteration  25: 4274709.129 ops/s
# Warmup Iteration  26: 4267106.203 ops/s
# Warmup Iteration  27: 4276590.671 ops/s
# Warmup Iteration  28: 4268306.225 ops/s
# Warmup Iteration  29: 4242850.170 ops/s
# Warmup Iteration  30: 4290649.971 ops/s
Iteration   1: 4234726.089 ops/s
Iteration   2: 4247818.823 ops/s
Iteration   3: 4253183.395 ops/s
Iteration   4: 4276096.011 ops/s
Iteration   5: 4288188.332 ops/s
Iteration   6: 4270863.475 ops/s
Iteration   7: 4201152.882 ops/s
Iteration   8: 4325426.345 ops/s
Iteration   9: 4298062.070 ops/s
Iteration  10: 4216804.082 ops/s
Iteration  11: 4309912.036 ops/s
Iteration  12: 4244859.944 ops/s
Iteration  13: 4279189.810 ops/s
Iteration  14: 4316077.692 ops/s
Iteration  15: 4319609.836 ops/s
Iteration  16: 4242493.031 ops/s
Iteration  17: 4259185.361 ops/s
Iteration  18: 4227828.007 ops/s
Iteration  19: 4247678.069 ops/s
Iteration  20: 4256266.943 ops/s
Iteration  21: 4286582.020 ops/s
Iteration  22: 4283591.450 ops/s
Iteration  23: 4270834.471 ops/s
Iteration  24: 4274311.576 ops/s
Iteration  25: 4351657.716 ops/s
Iteration  26: 4259313.459 ops/s
Iteration  27: 4285089.119 ops/s
Iteration  28: 4224021.454 ops/s
Iteration  29: 4267205.459 ops/s
Iteration  30: 4226437.038 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnored":
  4268148.867 ±(99.9%) 23361.014 ops/s [Average]
  (min, avg, max) = (4201152.882, 4268148.867, 4351657.716), stdev = 34965.669
  CI (99.9%): [4244787.852, 4291509.881] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnored  thrpt   30  4268148.867 ± 23361.014  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapToNonScalar$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapToNonScalar

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2109589.706 ops/s
# Warmup Iteration   2: 2938614.697 ops/s
# Warmup Iteration   3: 3664248.874 ops/s
# Warmup Iteration   4: 3656799.310 ops/s
# Warmup Iteration   5: 3673987.635 ops/s
# Warmup Iteration   6: 3689381.329 ops/s
# Warmup Iteration   7: 3666225.601 ops/s
# Warmup Iteration   8: 3684331.513 ops/s
# Warmup Iteration   9: 3649176.976 ops/s
# Warmup Iteration  10: 3693394.137 ops/s
# Warmup Iteration  11: 3690980.714 ops/s
# Warmup Iteration  12: 3689170.348 ops/s
# Warmup Iteration  13: 3669794.711 ops/s
# Warmup Iteration  14: 3636473.791 ops/s
# Warmup Iteration  15: 3604789.970 ops/s
# Warmup Iteration  16: 3661177.590 ops/s
# Warmup Iteration  17: 3616070.199 ops/s
# Warmup Iteration  18: 3608134.010 ops/s
# Warmup Iteration  19: 3610353.003 ops/s
# Warmup Iteration  20: 3645298.231 ops/s
# Warmup Iteration  21: 3621904.552 ops/s
# Warmup Iteration  22: 3631295.684 ops/s
# Warmup Iteration  23: 3656315.375 ops/s
# Warmup Iteration  24: 3615190.839 ops/s
# Warmup Iteration  25: 3636526.156 ops/s
# Warmup Iteration  26: 3632158.224 ops/s
# Warmup Iteration  27: 3643662.328 ops/s
# Warmup Iteration  28: 3663751.276 ops/s
# Warmup Iteration  29: 3659865.181 ops/s
# Warmup Iteration  30: 3643074.305 ops/s
Iteration   1: 3665778.430 ops/s
Iteration   2: 3643779.752 ops/s
Iteration   3: 3626545.528 ops/s
Iteration   4: 3657782.531 ops/s
Iteration   5: 3641782.934 ops/s
Iteration   6: 3669716.503 ops/s
Iteration   7: 3644235.718 ops/s
Iteration   8: 3609949.760 ops/s
Iteration   9: 3644577.926 ops/s
Iteration  10: 3639909.818 ops/s
Iteration  11: 3630710.362 ops/s
Iteration  12: 3672484.428 ops/s
Iteration  13: 3635340.786 ops/s
Iteration  14: 3673974.412 ops/s
Iteration  15: 3677112.054 ops/s
Iteration  16: 3635518.972 ops/s
Iteration  17: 3666963.093 ops/s
Iteration  18: 3623123.071 ops/s
Iteration  19: 3673393.862 ops/s
Iteration  20: 3630210.032 ops/s
Iteration  21: 3667996.339 ops/s
Iteration  22: 3641161.216 ops/s
Iteration  23: 3669675.647 ops/s
Iteration  24: 3627885.709 ops/s
Iteration  25: 3625069.341 ops/s
Iteration  26: 3650805.166 ops/s
Iteration  27: 3658644.984 ops/s
Iteration  28: 3616859.629 ops/s
Iteration  29: 3634815.867 ops/s
Iteration  30: 3644692.218 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapToNonScalar":
  3646683.203 ±(99.9%) 12825.162 ops/s [Average]
  (min, avg, max) = (3609949.760, 3646683.203, 3677112.054), stdev = 19196.100
  CI (99.9%): [3633858.041, 3659508.365] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableScalarXMapTest._Benchmark.benchmark_mapToNonScalar  thrpt   30  3646683.203 ± 12825.162  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3699080.838 ops/s
# Warmup Iteration   2: 5598207.900 ops/s
# Warmup Iteration   3: 6042844.660 ops/s
# Warmup Iteration   4: 5974253.359 ops/s
# Warmup Iteration   5: 6028785.772 ops/s
# Warmup Iteration   6: 6019370.264 ops/s
# Warmup Iteration   7: 6017413.139 ops/s
# Warmup Iteration   8: 5985451.967 ops/s
# Warmup Iteration   9: 5962463.098 ops/s
# Warmup Iteration  10: 6038369.740 ops/s
# Warmup Iteration  11: 6057717.144 ops/s
# Warmup Iteration  12: 6004517.223 ops/s
# Warmup Iteration  13: 5995953.899 ops/s
# Warmup Iteration  14: 5811486.120 ops/s
# Warmup Iteration  15: 5891770.691 ops/s
# Warmup Iteration  16: 6000175.433 ops/s
# Warmup Iteration  17: 6043161.213 ops/s
# Warmup Iteration  18: 6065896.574 ops/s
# Warmup Iteration  19: 6048578.175 ops/s
# Warmup Iteration  20: 6025237.430 ops/s
# Warmup Iteration  21: 6049406.077 ops/s
# Warmup Iteration  22: 5979290.487 ops/s
# Warmup Iteration  23: 6044891.469 ops/s
# Warmup Iteration  24: 6039910.080 ops/s
# Warmup Iteration  25: 5990327.071 ops/s
# Warmup Iteration  26: 6005496.994 ops/s
# Warmup Iteration  27: 6046456.391 ops/s
# Warmup Iteration  28: 6002415.256 ops/s
# Warmup Iteration  29: 6017576.107 ops/s
# Warmup Iteration  30: 6019958.036 ops/s
Iteration   1: 6050940.205 ops/s
Iteration   2: 5977122.376 ops/s
Iteration   3: 6103407.344 ops/s
Iteration   4: 6025959.185 ops/s
Iteration   5: 6092324.467 ops/s
Iteration   6: 6061271.907 ops/s
Iteration   7: 6031246.938 ops/s
Iteration   8: 6073616.936 ops/s
Iteration   9: 5995996.471 ops/s
Iteration  10: 5974226.616 ops/s
Iteration  11: 5994254.539 ops/s
Iteration  12: 6063782.479 ops/s
Iteration  13: 6025518.261 ops/s
Iteration  14: 6008167.983 ops/s
Iteration  15: 6037437.473 ops/s
Iteration  16: 6050942.104 ops/s
Iteration  17: 6020188.149 ops/s
Iteration  18: 6031662.648 ops/s
Iteration  19: 5995135.317 ops/s
Iteration  20: 6006927.342 ops/s
Iteration  21: 6041686.331 ops/s
Iteration  22: 6071103.031 ops/s
Iteration  23: 6076449.448 ops/s
Iteration  24: 6016762.717 ops/s
Iteration  25: 6021137.878 ops/s
Iteration  26: 6088857.887 ops/s
Iteration  27: 6026642.154 ops/s
Iteration  28: 6019436.204 ops/s
Iteration  29: 6088932.410 ops/s
Iteration  30: 6050400.552 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_dispose":
  6037384.578 ±(99.9%) 23212.816 ops/s [Average]
  (min, avg, max) = (5974226.616, 6037384.578, 6103407.344), stdev = 34743.853
  CI (99.9%): [6014171.762, 6060597.395] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FlowableTakeLastTest._Benchmark.benchmark_dispose  thrpt   30  6037384.578 ± 23212.816  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_backpressureWithoutInitialValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_backpressureWithoutInitialValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4418144.423 ops/s
# Warmup Iteration   2: 5189304.782 ops/s
# Warmup Iteration   3: 5645478.706 ops/s
# Warmup Iteration   4: 5872342.969 ops/s
# Warmup Iteration   5: 6066083.466 ops/s
# Warmup Iteration   6: 5989231.025 ops/s
# Warmup Iteration   7: 5898037.466 ops/s
# Warmup Iteration   8: 5974479.203 ops/s
# Warmup Iteration   9: 6024422.611 ops/s
# Warmup Iteration  10: 5972760.795 ops/s
# Warmup Iteration  11: 6026568.338 ops/s
# Warmup Iteration  12: 5922945.883 ops/s
# Warmup Iteration  13: 5839420.708 ops/s
# Warmup Iteration  14: 5899230.723 ops/s
# Warmup Iteration  15: 5949701.363 ops/s
# Warmup Iteration  16: 6008699.457 ops/s
# Warmup Iteration  17: 5971279.133 ops/s
# Warmup Iteration  18: 5988764.962 ops/s
# Warmup Iteration  19: 5922944.291 ops/s
# Warmup Iteration  20: 5934078.841 ops/s
# Warmup Iteration  21: 5913755.146 ops/s
# Warmup Iteration  22: 5944943.770 ops/s
# Warmup Iteration  23: 5949722.323 ops/s
# Warmup Iteration  24: 5899630.392 ops/s
# Warmup Iteration  25: 5893532.456 ops/s
# Warmup Iteration  26: 5979798.182 ops/s
# Warmup Iteration  27: 5989886.552 ops/s
# Warmup Iteration  28: 5912242.053 ops/s
# Warmup Iteration  29: 5885301.667 ops/s
# Warmup Iteration  30: 5949394.945 ops/s
Iteration   1: 5925542.313 ops/s
Iteration   2: 5968656.430 ops/s
Iteration   3: 5939816.782 ops/s
Iteration   4: 6026850.476 ops/s
Iteration   5: 5947854.226 ops/s
Iteration   6: 5960775.656 ops/s
Iteration   7: 5975385.945 ops/s
Iteration   8: 5918801.643 ops/s
Iteration   9: 5969362.894 ops/s
Iteration  10: 6054640.017 ops/s
Iteration  11: 6036701.609 ops/s
Iteration  12: 5918330.772 ops/s
Iteration  13: 5949004.637 ops/s
Iteration  14: 5990776.176 ops/s
Iteration  15: 5871212.224 ops/s
Iteration  16: 5948357.198 ops/s
Iteration  17: 5903479.780 ops/s
Iteration  18: 5959597.771 ops/s
Iteration  19: 5972025.001 ops/s
Iteration  20: 6009066.126 ops/s
Iteration  21: 6004380.476 ops/s
Iteration  22: 5905600.717 ops/s
Iteration  23: 6033518.702 ops/s
Iteration  24: 5993288.129 ops/s
Iteration  25: 5989963.387 ops/s
Iteration  26: 6000919.257 ops/s
Iteration  27: 6007072.420 ops/s
Iteration  28: 5934314.149 ops/s
Iteration  29: 5969646.136 ops/s
Iteration  30: 5952978.904 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_backpressureWithoutInitialValue":
  5967930.665 ±(99.9%) 29059.814 ops/s [Average]
  (min, avg, max) = (5871212.224, 5967930.665, 6054640.017), stdev = 43495.365
  CI (99.9%): [5938870.851, 5996990.479] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableScanTest._Benchmark.benchmark_backpressureWithoutInitialValue  thrpt   30  5967930.665 ± 29059.814  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingSingleEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingSingleEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 699034.613 ops/s
# Warmup Iteration   2: 816025.887 ops/s
# Warmup Iteration   3: 765342.057 ops/s
# Warmup Iteration   4: 874253.025 ops/s
# Warmup Iteration   5: 878688.980 ops/s
# Warmup Iteration   6: 874362.734 ops/s
# Warmup Iteration   7: 879871.657 ops/s
# Warmup Iteration   8: 874749.168 ops/s
# Warmup Iteration   9: 873619.342 ops/s
# Warmup Iteration  10: 875326.991 ops/s
# Warmup Iteration  11: 871987.709 ops/s
# Warmup Iteration  12: 862609.145 ops/s
# Warmup Iteration  13: 871409.392 ops/s
# Warmup Iteration  14: 875447.298 ops/s
# Warmup Iteration  15: 875066.369 ops/s
# Warmup Iteration  16: 871721.433 ops/s
# Warmup Iteration  17: 917361.712 ops/s
# Warmup Iteration  18: 918412.777 ops/s
# Warmup Iteration  19: 918522.347 ops/s
# Warmup Iteration  20: 917258.875 ops/s
# Warmup Iteration  21: 913470.712 ops/s
# Warmup Iteration  22: 921009.768 ops/s
# Warmup Iteration  23: 914145.885 ops/s
# Warmup Iteration  24: 915098.971 ops/s
# Warmup Iteration  25: 915503.611 ops/s
# Warmup Iteration  26: 918055.054 ops/s
# Warmup Iteration  27: 913576.572 ops/s
# Warmup Iteration  28: 917463.583 ops/s
# Warmup Iteration  29: 916855.755 ops/s
# Warmup Iteration  30: 911941.143 ops/s
Iteration   1: 917815.333 ops/s
Iteration   2: 913533.661 ops/s
Iteration   3: 907462.286 ops/s
Iteration   4: 911723.346 ops/s
Iteration   5: 917652.297 ops/s
Iteration   6: 913213.349 ops/s
Iteration   7: 913285.842 ops/s
Iteration   8: 913566.388 ops/s
Iteration   9: 914794.026 ops/s
Iteration  10: 912692.928 ops/s
Iteration  11: 907472.475 ops/s
Iteration  12: 910695.853 ops/s
Iteration  13: 917532.519 ops/s
Iteration  14: 918674.673 ops/s
Iteration  15: 908594.213 ops/s
Iteration  16: 916701.042 ops/s
Iteration  17: 912542.131 ops/s
Iteration  18: 913252.333 ops/s
Iteration  19: 912496.505 ops/s
Iteration  20: 908086.144 ops/s
Iteration  21: 912891.623 ops/s
Iteration  22: 913451.522 ops/s
Iteration  23: 913255.898 ops/s
Iteration  24: 912641.181 ops/s
Iteration  25: 909512.055 ops/s
Iteration  26: 915309.666 ops/s
Iteration  27: 917280.733 ops/s
Iteration  28: 916349.736 ops/s
Iteration  29: 914634.109 ops/s
Iteration  30: 913216.516 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingSingleEmpty":
  913344.346 ±(99.9%) 2054.317 ops/s [Average]
  (min, avg, max) = (907462.286, 913344.346, 918674.673), stdev = 3074.805
  CI (99.9%): [911290.029, 915398.663] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableBlockingTest._Benchmark.benchmark_blockingSingleEmpty  thrpt   30  913344.346 ± 2054.317  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4023101.742 ops/s
# Warmup Iteration   2: 5356605.213 ops/s
# Warmup Iteration   3: 6266667.908 ops/s
# Warmup Iteration   4: 6416183.332 ops/s
# Warmup Iteration   5: 6564038.892 ops/s
# Warmup Iteration   6: 6554803.945 ops/s
# Warmup Iteration   7: 6524875.255 ops/s
# Warmup Iteration   8: 6499589.483 ops/s
# Warmup Iteration   9: 6534212.724 ops/s
# Warmup Iteration  10: 6547664.545 ops/s
# Warmup Iteration  11: 6466697.987 ops/s
# Warmup Iteration  12: 6454985.330 ops/s
# Warmup Iteration  13: 6509758.178 ops/s
# Warmup Iteration  14: 6540249.850 ops/s
# Warmup Iteration  15: 6576992.942 ops/s
# Warmup Iteration  16: 6564270.201 ops/s
# Warmup Iteration  17: 6662360.355 ops/s
# Warmup Iteration  18: 6668255.769 ops/s
# Warmup Iteration  19: 6669345.442 ops/s
# Warmup Iteration  20: 6673882.161 ops/s
# Warmup Iteration  21: 6632071.307 ops/s
# Warmup Iteration  22: 6679486.531 ops/s
# Warmup Iteration  23: 6729080.707 ops/s
# Warmup Iteration  24: 6735327.958 ops/s
# Warmup Iteration  25: 6704333.700 ops/s
# Warmup Iteration  26: 6661424.763 ops/s
# Warmup Iteration  27: 6623167.497 ops/s
# Warmup Iteration  28: 6669805.017 ops/s
# Warmup Iteration  29: 6697569.819 ops/s
# Warmup Iteration  30: 6635895.335 ops/s
Iteration   1: 6640805.816 ops/s
Iteration   2: 6689692.893 ops/s
Iteration   3: 6694639.372 ops/s
Iteration   4: 6673297.286 ops/s
Iteration   5: 6655949.244 ops/s
Iteration   6: 6726487.529 ops/s
Iteration   7: 6660123.926 ops/s
Iteration   8: 6632062.468 ops/s
Iteration   9: 6636100.614 ops/s
Iteration  10: 6644869.826 ops/s
Iteration  11: 6615922.833 ops/s
Iteration  12: 6723428.707 ops/s
Iteration  13: 6649968.482 ops/s
Iteration  14: 6649032.676 ops/s
Iteration  15: 6683760.176 ops/s
Iteration  16: 6672023.020 ops/s
Iteration  17: 6707496.549 ops/s
Iteration  18: 6702517.529 ops/s
Iteration  19: 6658795.033 ops/s
Iteration  20: 6696669.856 ops/s
Iteration  21: 6698623.640 ops/s
Iteration  22: 6659896.231 ops/s
Iteration  23: 6652081.757 ops/s
Iteration  24: 6749440.010 ops/s
Iteration  25: 6664302.556 ops/s
Iteration  26: 6667397.836 ops/s
Iteration  27: 6672540.907 ops/s
Iteration  28: 6707901.597 ops/s
Iteration  29: 6765927.847 ops/s
Iteration  30: 6665989.995 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_disposed":
  6677258.207 ±(99.9%) 23326.456 ops/s [Average]
  (min, avg, max) = (6615922.833, 6677258.207, 6765927.847), stdev = 34913.944
  CI (99.9%): [6653931.751, 6700584.663] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_disposed  thrpt   30  6677258.207 ± 23326.456  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsToEmitItem$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsToEmitItem

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7139908.229 ops/s
# Warmup Iteration   2: 9918901.197 ops/s
# Warmup Iteration   3: 11177257.293 ops/s
# Warmup Iteration   4: 11142169.714 ops/s
# Warmup Iteration   5: 11086774.776 ops/s
# Warmup Iteration   6: 11081407.843 ops/s
# Warmup Iteration   7: 11077495.469 ops/s
# Warmup Iteration   8: 11097050.773 ops/s
# Warmup Iteration   9: 10859294.746 ops/s
# Warmup Iteration  10: 10817375.359 ops/s
# Warmup Iteration  11: 11102627.996 ops/s
# Warmup Iteration  12: 11126911.241 ops/s
# Warmup Iteration  13: 11148656.235 ops/s
# Warmup Iteration  14: 11064153.188 ops/s
# Warmup Iteration  15: 11175909.232 ops/s
# Warmup Iteration  16: 11103179.907 ops/s
# Warmup Iteration  17: 11120862.401 ops/s
# Warmup Iteration  18: 11090099.998 ops/s
# Warmup Iteration  19: 11115568.476 ops/s
# Warmup Iteration  20: 11285959.753 ops/s
# Warmup Iteration  21: 11175167.012 ops/s
# Warmup Iteration  22: 11147540.468 ops/s
# Warmup Iteration  23: 11123852.426 ops/s
# Warmup Iteration  24: 11190720.317 ops/s
# Warmup Iteration  25: 11188052.953 ops/s
# Warmup Iteration  26: 11108149.377 ops/s
# Warmup Iteration  27: 11195957.632 ops/s
# Warmup Iteration  28: 11247786.543 ops/s
# Warmup Iteration  29: 11131400.945 ops/s
# Warmup Iteration  30: 11164770.916 ops/s
Iteration   1: 11157462.127 ops/s
Iteration   2: 11142451.479 ops/s
Iteration   3: 11197270.660 ops/s
Iteration   4: 11089133.678 ops/s
Iteration   5: 11098112.030 ops/s
Iteration   6: 11163465.711 ops/s
Iteration   7: 11070503.352 ops/s
Iteration   8: 11216508.767 ops/s
Iteration   9: 11139045.240 ops/s
Iteration  10: 11198362.377 ops/s
Iteration  11: 11196518.508 ops/s
Iteration  12: 11053879.995 ops/s
Iteration  13: 11138618.937 ops/s
Iteration  14: 11222227.515 ops/s
Iteration  15: 11158172.179 ops/s
Iteration  16: 11173046.165 ops/s
Iteration  17: 11163801.482 ops/s
Iteration  18: 11107079.881 ops/s
Iteration  19: 11152541.558 ops/s
Iteration  20: 11158183.673 ops/s
Iteration  21: 11170818.853 ops/s
Iteration  22: 11139190.455 ops/s
Iteration  23: 11178881.826 ops/s
Iteration  24: 11174257.079 ops/s
Iteration  25: 11093126.714 ops/s
Iteration  26: 11168986.707 ops/s
Iteration  27: 11073725.791 ops/s
Iteration  28: 11221414.927 ops/s
Iteration  29: 11052069.828 ops/s
Iteration  30: 11200454.415 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsToEmitItem":
  11148977.064 ±(99.9%) 32864.768 ops/s [Average]
  (min, avg, max) = (11052069.828, 11148977.064, 11222227.515), stdev = 49190.442
  CI (99.9%): [11116112.295, 11181841.832] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt         Score       Error  Units
FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsToEmitItem  thrpt   30  11148977.064 ± 32864.768  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_lastOfManyReturnsLast$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_lastOfManyReturnsLast

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3405303.882 ops/s
# Warmup Iteration   2: 4670047.034 ops/s
# Warmup Iteration   3: 5430093.949 ops/s
# Warmup Iteration   4: 5421671.373 ops/s
# Warmup Iteration   5: 5422276.772 ops/s
# Warmup Iteration   6: 5412535.218 ops/s
# Warmup Iteration   7: 5392439.275 ops/s
# Warmup Iteration   8: 5311602.295 ops/s
# Warmup Iteration   9: 5328534.058 ops/s
# Warmup Iteration  10: 5386576.873 ops/s
# Warmup Iteration  11: 5396783.609 ops/s
# Warmup Iteration  12: 5405224.418 ops/s
# Warmup Iteration  13: 5381614.164 ops/s
# Warmup Iteration  14: 5368822.608 ops/s
# Warmup Iteration  15: 5406905.464 ops/s
# Warmup Iteration  16: 5391280.814 ops/s
# Warmup Iteration  17: 5421351.339 ops/s
# Warmup Iteration  18: 5397021.729 ops/s
# Warmup Iteration  19: 5428302.323 ops/s
# Warmup Iteration  20: 5393858.973 ops/s
# Warmup Iteration  21: 5414709.623 ops/s
# Warmup Iteration  22: 5442183.292 ops/s
# Warmup Iteration  23: 5420495.842 ops/s
# Warmup Iteration  24: 5397883.919 ops/s
# Warmup Iteration  25: 5398107.603 ops/s
# Warmup Iteration  26: 5404555.304 ops/s
# Warmup Iteration  27: 5392264.381 ops/s
# Warmup Iteration  28: 5388424.326 ops/s
# Warmup Iteration  29: 5420410.466 ops/s
# Warmup Iteration  30: 5394151.027 ops/s
Iteration   1: 5364377.918 ops/s
Iteration   2: 5387474.892 ops/s
Iteration   3: 5445443.719 ops/s
Iteration   4: 5416711.533 ops/s
Iteration   5: 5416915.854 ops/s
Iteration   6: 5419553.469 ops/s
Iteration   7: 5410484.104 ops/s
Iteration   8: 5401414.736 ops/s
Iteration   9: 5408277.208 ops/s
Iteration  10: 5352499.810 ops/s
Iteration  11: 5380781.954 ops/s
Iteration  12: 5363548.243 ops/s
Iteration  13: 5396573.537 ops/s
Iteration  14: 5412449.212 ops/s
Iteration  15: 5393036.281 ops/s
Iteration  16: 5389248.542 ops/s
Iteration  17: 5359492.997 ops/s
Iteration  18: 5402954.330 ops/s
Iteration  19: 5427579.244 ops/s
Iteration  20: 5396847.038 ops/s
Iteration  21: 5364511.184 ops/s
Iteration  22: 5419102.004 ops/s
Iteration  23: 5442185.882 ops/s
Iteration  24: 5434412.998 ops/s
Iteration  25: 5383467.458 ops/s
Iteration  26: 5373031.886 ops/s
Iteration  27: 5423552.308 ops/s
Iteration  28: 5379796.062 ops/s
Iteration  29: 5383856.036 ops/s
Iteration  30: 5451118.622 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_lastOfManyReturnsLast":
  5400023.302 ±(99.9%) 17871.395 ops/s [Average]
  (min, avg, max) = (5352499.810, 5400023.302, 5451118.622), stdev = 26749.065
  CI (99.9%): [5382151.907, 5417894.697] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableTakeLastOneTest._Benchmark.benchmark_lastOfManyReturnsLast  thrpt   30  5400023.302 ± 17871.395  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fusedClearIsEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fusedClearIsEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7364247.544 ops/s
# Warmup Iteration   2: 11204752.158 ops/s
# Warmup Iteration   3: 12322670.621 ops/s
# Warmup Iteration   4: 12341716.193 ops/s
# Warmup Iteration   5: 12372622.076 ops/s
# Warmup Iteration   6: 12310375.183 ops/s
# Warmup Iteration   7: 12110789.075 ops/s
# Warmup Iteration   8: 12119241.511 ops/s
# Warmup Iteration   9: 12222696.554 ops/s
# Warmup Iteration  10: 12313448.955 ops/s
# Warmup Iteration  11: 12279510.672 ops/s
# Warmup Iteration  12: 12316629.546 ops/s
# Warmup Iteration  13: 12306771.008 ops/s
# Warmup Iteration  14: 12235082.154 ops/s
# Warmup Iteration  15: 12283875.140 ops/s
# Warmup Iteration  16: 12278214.220 ops/s
# Warmup Iteration  17: 12202582.511 ops/s
# Warmup Iteration  18: 12232560.995 ops/s
# Warmup Iteration  19: 12178535.823 ops/s
# Warmup Iteration  20: 12226842.705 ops/s
# Warmup Iteration  21: 12189232.448 ops/s
# Warmup Iteration  22: 12188345.285 ops/s
# Warmup Iteration  23: 12259291.106 ops/s
# Warmup Iteration  24: 12245055.064 ops/s
# Warmup Iteration  25: 12237978.046 ops/s
# Warmup Iteration  26: 12265729.008 ops/s
# Warmup Iteration  27: 12151727.015 ops/s
# Warmup Iteration  28: 12243716.186 ops/s
# Warmup Iteration  29: 12239777.159 ops/s
# Warmup Iteration  30: 12183694.172 ops/s
Iteration   1: 12286466.968 ops/s
Iteration   2: 12193843.447 ops/s
Iteration   3: 12236973.377 ops/s
Iteration   4: 12264733.389 ops/s
Iteration   5: 12104431.409 ops/s
Iteration   6: 12314532.788 ops/s
Iteration   7: 12351300.895 ops/s
Iteration   8: 12314842.255 ops/s
Iteration   9: 12212792.875 ops/s
Iteration  10: 12269070.818 ops/s
Iteration  11: 12224618.108 ops/s
Iteration  12: 12316789.052 ops/s
Iteration  13: 12266410.576 ops/s
Iteration  14: 12274653.771 ops/s
Iteration  15: 12271679.149 ops/s
Iteration  16: 12365055.506 ops/s
Iteration  17: 12248370.467 ops/s
Iteration  18: 12139166.134 ops/s
Iteration  19: 12279529.877 ops/s
Iteration  20: 12189652.115 ops/s
Iteration  21: 12186299.120 ops/s
Iteration  22: 12311502.385 ops/s
Iteration  23: 12280093.186 ops/s
Iteration  24: 12287611.998 ops/s
Iteration  25: 12278751.176 ops/s
Iteration  26: 12394644.023 ops/s
Iteration  27: 12254629.995 ops/s
Iteration  28: 12249867.345 ops/s
Iteration  29: 12194811.765 ops/s
Iteration  30: 12196081.571 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_fusedClearIsEmpty":
  12258640.185 ±(99.9%) 42721.380 ops/s [Average]
  (min, avg, max) = (12104431.409, 12258640.185, 12394644.023), stdev = 63943.355
  CI (99.9%): [12215918.805, 12301361.564] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_fusedClearIsEmpty  thrpt   30  12258640.185 ± 42721.380  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_nonFusedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_nonFusedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2077709.676 ops/s
# Warmup Iteration   2: 3181262.611 ops/s
# Warmup Iteration   3: 3738372.304 ops/s
# Warmup Iteration   4: 3758891.724 ops/s
# Warmup Iteration   5: 3749624.702 ops/s
# Warmup Iteration   6: 3689523.058 ops/s
# Warmup Iteration   7: 3645279.205 ops/s
# Warmup Iteration   8: 3750679.872 ops/s
# Warmup Iteration   9: 3725176.469 ops/s
# Warmup Iteration  10: 3740469.982 ops/s
# Warmup Iteration  11: 3758204.313 ops/s
# Warmup Iteration  12: 3745810.704 ops/s
# Warmup Iteration  13: 3738736.700 ops/s
# Warmup Iteration  14: 3764298.430 ops/s
# Warmup Iteration  15: 3761202.400 ops/s
# Warmup Iteration  16: 3773705.857 ops/s
# Warmup Iteration  17: 3769731.779 ops/s
# Warmup Iteration  18: 3758366.121 ops/s
# Warmup Iteration  19: 3767059.745 ops/s
# Warmup Iteration  20: 3774015.849 ops/s
# Warmup Iteration  21: 3762244.364 ops/s
# Warmup Iteration  22: 3738546.255 ops/s
# Warmup Iteration  23: 3748193.008 ops/s
# Warmup Iteration  24: 3761139.127 ops/s
# Warmup Iteration  25: 3755524.352 ops/s
# Warmup Iteration  26: 3771341.962 ops/s
# Warmup Iteration  27: 3752473.671 ops/s
# Warmup Iteration  28: 3786694.269 ops/s
# Warmup Iteration  29: 3753262.873 ops/s
# Warmup Iteration  30: 3769313.431 ops/s
Iteration   1: 3777817.238 ops/s
Iteration   2: 3780804.884 ops/s
Iteration   3: 3773491.128 ops/s
Iteration   4: 3757349.367 ops/s
Iteration   5: 3760384.573 ops/s
Iteration   6: 3769625.067 ops/s
Iteration   7: 3758416.839 ops/s
Iteration   8: 3770743.839 ops/s
Iteration   9: 3748434.540 ops/s
Iteration  10: 3775725.712 ops/s
Iteration  11: 3770136.544 ops/s
Iteration  12: 3758942.167 ops/s
Iteration  13: 3745270.972 ops/s
Iteration  14: 3791959.396 ops/s
Iteration  15: 3751759.443 ops/s
Iteration  16: 3755250.756 ops/s
Iteration  17: 3748833.623 ops/s
Iteration  18: 3759942.476 ops/s
Iteration  19: 3769484.577 ops/s
Iteration  20: 3767546.928 ops/s
Iteration  21: 3756764.604 ops/s
Iteration  22: 3766499.618 ops/s
Iteration  23: 3781004.582 ops/s
Iteration  24: 3755486.530 ops/s
Iteration  25: 3744221.887 ops/s
Iteration  26: 3741251.537 ops/s
Iteration  27: 3750764.538 ops/s
Iteration  28: 3754873.336 ops/s
Iteration  29: 3787362.976 ops/s
Iteration  30: 3784874.135 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_nonFusedConditional":
  3763834.127 ±(99.9%) 9106.899 ops/s [Average]
  (min, avg, max) = (3741251.537, 3763834.127, 3791959.396), stdev = 13630.779
  CI (99.9%): [3754727.228, 3772941.026] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_nonFusedConditional  thrpt   30  3763834.127 ± 9106.899  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 555928.173 ops/s
# Warmup Iteration   2: 708842.322 ops/s
# Warmup Iteration   3: 764921.876 ops/s
# Warmup Iteration   4: 751585.584 ops/s
# Warmup Iteration   5: 803567.208 ops/s
# Warmup Iteration   6: 800034.855 ops/s
# Warmup Iteration   7: 808401.681 ops/s
# Warmup Iteration   8: 809502.766 ops/s
# Warmup Iteration   9: 810058.089 ops/s
# Warmup Iteration  10: 806307.667 ops/s
# Warmup Iteration  11: 807477.452 ops/s
# Warmup Iteration  12: 805019.682 ops/s
# Warmup Iteration  13: 806763.823 ops/s
# Warmup Iteration  14: 805201.352 ops/s
# Warmup Iteration  15: 806601.862 ops/s
# Warmup Iteration  16: 802559.461 ops/s
# Warmup Iteration  17: 845640.772 ops/s
# Warmup Iteration  18: 844744.617 ops/s
# Warmup Iteration  19: 850885.807 ops/s
# Warmup Iteration  20: 847511.847 ops/s
# Warmup Iteration  21: 839273.232 ops/s
# Warmup Iteration  22: 843467.367 ops/s
# Warmup Iteration  23: 842698.452 ops/s
# Warmup Iteration  24: 839688.072 ops/s
# Warmup Iteration  25: 841769.144 ops/s
# Warmup Iteration  26: 840398.249 ops/s
# Warmup Iteration  27: 841161.462 ops/s
# Warmup Iteration  28: 846425.347 ops/s
# Warmup Iteration  29: 846723.845 ops/s
# Warmup Iteration  30: 840631.972 ops/s
Iteration   1: 841831.599 ops/s
Iteration   2: 846217.439 ops/s
Iteration   3: 844662.226 ops/s
Iteration   4: 846316.581 ops/s
Iteration   5: 845728.120 ops/s
Iteration   6: 847968.889 ops/s
Iteration   7: 845564.002 ops/s
Iteration   8: 844491.737 ops/s
Iteration   9: 844421.894 ops/s
Iteration  10: 842594.223 ops/s
Iteration  11: 844070.089 ops/s
Iteration  12: 845921.846 ops/s
Iteration  13: 840898.947 ops/s
Iteration  14: 844646.560 ops/s
Iteration  15: 845110.094 ops/s
Iteration  16: 841531.170 ops/s
Iteration  17: 842720.637 ops/s
Iteration  18: 845354.233 ops/s
Iteration  19: 846647.992 ops/s
Iteration  20: 846936.854 ops/s
Iteration  21: 845275.221 ops/s
Iteration  22: 843880.322 ops/s
Iteration  23: 846013.591 ops/s
Iteration  24: 841245.084 ops/s
Iteration  25: 847052.114 ops/s
Iteration  26: 844523.904 ops/s
Iteration  27: 842372.102 ops/s
Iteration  28: 842674.931 ops/s
Iteration  29: 837360.597 ops/s
Iteration  30: 842171.540 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_otherError":
  844206.818 ±(99.9%) 1532.572 ops/s [Average]
  (min, avg, max) = (837360.597, 844206.818, 847968.889), stdev = 2293.881
  CI (99.9%): [842674.246, 845739.390] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableConcatWithMaybeTest._Benchmark.benchmark_otherError  thrpt   30  844206.818 ± 1532.572  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_takeLastTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_takeLastTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2250151.289 ops/s
# Warmup Iteration   2: 3221929.356 ops/s
# Warmup Iteration   3: 3608647.669 ops/s
# Warmup Iteration   4: 3598395.089 ops/s
# Warmup Iteration   5: 3587189.330 ops/s
# Warmup Iteration   6: 3626012.327 ops/s
# Warmup Iteration   7: 3639796.817 ops/s
# Warmup Iteration   8: 3640347.959 ops/s
# Warmup Iteration   9: 3606311.276 ops/s
# Warmup Iteration  10: 3618317.637 ops/s
# Warmup Iteration  11: 3644927.796 ops/s
# Warmup Iteration  12: 3645256.992 ops/s
# Warmup Iteration  13: 3664795.031 ops/s
# Warmup Iteration  14: 3610481.051 ops/s
# Warmup Iteration  15: 3614083.994 ops/s
# Warmup Iteration  16: 3639917.760 ops/s
# Warmup Iteration  17: 3640230.021 ops/s
# Warmup Iteration  18: 3641045.002 ops/s
# Warmup Iteration  19: 3657054.573 ops/s
# Warmup Iteration  20: 3634358.948 ops/s
# Warmup Iteration  21: 3614408.186 ops/s
# Warmup Iteration  22: 3612961.466 ops/s
# Warmup Iteration  23: 3630765.922 ops/s
# Warmup Iteration  24: 3625746.939 ops/s
# Warmup Iteration  25: 3642622.137 ops/s
# Warmup Iteration  26: 3616396.737 ops/s
# Warmup Iteration  27: 3662269.088 ops/s
# Warmup Iteration  28: 3649249.301 ops/s
# Warmup Iteration  29: 3650095.849 ops/s
# Warmup Iteration  30: 3635554.029 ops/s
Iteration   1: 3614665.257 ops/s
Iteration   2: 3605303.888 ops/s
Iteration   3: 3683861.355 ops/s
Iteration   4: 3662032.727 ops/s
Iteration   5: 3641401.855 ops/s
Iteration   6: 3623982.454 ops/s
Iteration   7: 3652102.006 ops/s
Iteration   8: 3638453.420 ops/s
Iteration   9: 3652163.649 ops/s
Iteration  10: 3598874.652 ops/s
Iteration  11: 3633515.049 ops/s
Iteration  12: 3608718.760 ops/s
Iteration  13: 3636614.026 ops/s
Iteration  14: 3649288.724 ops/s
Iteration  15: 3612225.327 ops/s
Iteration  16: 3640749.850 ops/s
Iteration  17: 3622693.590 ops/s
Iteration  18: 3642436.269 ops/s
Iteration  19: 3611017.257 ops/s
Iteration  20: 3629579.488 ops/s
Iteration  21: 3645855.255 ops/s
Iteration  22: 3652381.993 ops/s
Iteration  23: 3613388.150 ops/s
Iteration  24: 3661810.398 ops/s
Iteration  25: 3635317.482 ops/s
Iteration  26: 3624244.256 ops/s
Iteration  27: 3650612.283 ops/s
Iteration  28: 3656887.172 ops/s
Iteration  29: 3639241.188 ops/s
Iteration  30: 3597744.222 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_takeLastTake":
  3634572.067 ±(99.9%) 13919.458 ops/s [Average]
  (min, avg, max) = (3597744.222, 3634572.067, 3683861.355), stdev = 20833.991
  CI (99.9%): [3620652.609, 3648491.525] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableTakeLastTest._Benchmark.benchmark_takeLastTake  thrpt   30  3634572.067 ± 13919.458  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsToEmitErrorFromEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsToEmitErrorFromEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 655821.841 ops/s
# Warmup Iteration   2: 774422.077 ops/s
# Warmup Iteration   3: 721551.405 ops/s
# Warmup Iteration   4: 827805.807 ops/s
# Warmup Iteration   5: 839511.328 ops/s
# Warmup Iteration   6: 839195.507 ops/s
# Warmup Iteration   7: 844462.556 ops/s
# Warmup Iteration   8: 832665.377 ops/s
# Warmup Iteration   9: 835861.870 ops/s
# Warmup Iteration  10: 840638.424 ops/s
# Warmup Iteration  11: 838955.719 ops/s
# Warmup Iteration  12: 842383.262 ops/s
# Warmup Iteration  13: 843324.899 ops/s
# Warmup Iteration  14: 832735.559 ops/s
# Warmup Iteration  15: 840438.745 ops/s
# Warmup Iteration  16: 835357.215 ops/s
# Warmup Iteration  17: 883259.835 ops/s
# Warmup Iteration  18: 880477.322 ops/s
# Warmup Iteration  19: 876464.320 ops/s
# Warmup Iteration  20: 878308.914 ops/s
# Warmup Iteration  21: 880103.750 ops/s
# Warmup Iteration  22: 880238.994 ops/s
# Warmup Iteration  23: 880860.838 ops/s
# Warmup Iteration  24: 874851.232 ops/s
# Warmup Iteration  25: 878458.568 ops/s
# Warmup Iteration  26: 877651.080 ops/s
# Warmup Iteration  27: 883024.185 ops/s
# Warmup Iteration  28: 883815.846 ops/s
# Warmup Iteration  29: 883185.984 ops/s
# Warmup Iteration  30: 879973.049 ops/s
Iteration   1: 879244.892 ops/s
Iteration   2: 882764.528 ops/s
Iteration   3: 878086.367 ops/s
Iteration   4: 876428.304 ops/s
Iteration   5: 878211.225 ops/s
Iteration   6: 878646.686 ops/s
Iteration   7: 883554.972 ops/s
Iteration   8: 883247.746 ops/s
Iteration   9: 882077.624 ops/s
Iteration  10: 878434.747 ops/s
Iteration  11: 882872.294 ops/s
Iteration  12: 877954.718 ops/s
Iteration  13: 879449.269 ops/s
Iteration  14: 881672.638 ops/s
Iteration  15: 881169.484 ops/s
Iteration  16: 882543.464 ops/s
Iteration  17: 885879.764 ops/s
Iteration  18: 880677.690 ops/s
Iteration  19: 879336.382 ops/s
Iteration  20: 876429.054 ops/s
Iteration  21: 880069.424 ops/s
Iteration  22: 876100.105 ops/s
Iteration  23: 878054.837 ops/s
Iteration  24: 873002.730 ops/s
Iteration  25: 885402.501 ops/s
Iteration  26: 881275.534 ops/s
Iteration  27: 877962.207 ops/s
Iteration  28: 877416.872 ops/s
Iteration  29: 879250.051 ops/s
Iteration  30: 872197.018 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsToEmitErrorFromEmpty":
  879647.104 ±(99.9%) 2143.572 ops/s [Average]
  (min, avg, max) = (872197.018, 879647.104, 885879.764), stdev = 3208.398
  CI (99.9%): [877503.532, 881790.677] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt       Score      Error  Units
FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsToEmitErrorFromEmpty  thrpt   30  879647.104 ± 2143.572  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_allEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_allEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4110637.200 ops/s
# Warmup Iteration   2: 6302998.107 ops/s
# Warmup Iteration   3: 6846493.189 ops/s
# Warmup Iteration   4: 6889744.696 ops/s
# Warmup Iteration   5: 6909985.269 ops/s
# Warmup Iteration   6: 6914916.931 ops/s
# Warmup Iteration   7: 6850737.343 ops/s
# Warmup Iteration   8: 6910070.459 ops/s
# Warmup Iteration   9: 6848033.962 ops/s
# Warmup Iteration  10: 6947428.507 ops/s
# Warmup Iteration  11: 6872755.243 ops/s
# Warmup Iteration  12: 6911488.892 ops/s
# Warmup Iteration  13: 6884947.145 ops/s
# Warmup Iteration  14: 6907291.719 ops/s
# Warmup Iteration  15: 6892845.384 ops/s
# Warmup Iteration  16: 6921647.252 ops/s
# Warmup Iteration  17: 6891164.015 ops/s
# Warmup Iteration  18: 6914902.649 ops/s
# Warmup Iteration  19: 6941026.792 ops/s
# Warmup Iteration  20: 6912546.372 ops/s
# Warmup Iteration  21: 6927275.709 ops/s
# Warmup Iteration  22: 6944446.584 ops/s
# Warmup Iteration  23: 6888912.446 ops/s
# Warmup Iteration  24: 6913988.549 ops/s
# Warmup Iteration  25: 6952404.035 ops/s
# Warmup Iteration  26: 6931464.166 ops/s
# Warmup Iteration  27: 6903199.589 ops/s
# Warmup Iteration  28: 6931720.904 ops/s
# Warmup Iteration  29: 6940405.545 ops/s
# Warmup Iteration  30: 6937527.605 ops/s
Iteration   1: 6920829.720 ops/s
Iteration   2: 6906566.653 ops/s
Iteration   3: 6918942.853 ops/s
Iteration   4: 6898471.554 ops/s
Iteration   5: 6925440.520 ops/s
Iteration   6: 6912026.143 ops/s
Iteration   7: 6942143.165 ops/s
Iteration   8: 6886079.018 ops/s
Iteration   9: 6914430.794 ops/s
Iteration  10: 6915381.461 ops/s
Iteration  11: 6915506.918 ops/s
Iteration  12: 6911774.420 ops/s
Iteration  13: 6954299.600 ops/s
Iteration  14: 6913826.886 ops/s
Iteration  15: 6928364.117 ops/s
Iteration  16: 6920563.596 ops/s
Iteration  17: 6890765.124 ops/s
Iteration  18: 6906770.204 ops/s
Iteration  19: 6920431.578 ops/s
Iteration  20: 6945772.712 ops/s
Iteration  21: 6947985.189 ops/s
Iteration  22: 6929509.404 ops/s
Iteration  23: 6929707.443 ops/s
Iteration  24: 6935988.316 ops/s
Iteration  25: 6897756.015 ops/s
Iteration  26: 6896817.203 ops/s
Iteration  27: 6931575.129 ops/s
Iteration  28: 6960984.954 ops/s
Iteration  29: 6921341.810 ops/s
Iteration  30: 6951770.279 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_allEmpty":
  6921727.426 ±(99.9%) 12706.939 ops/s [Average]
  (min, avg, max) = (6886079.018, 6921727.426, 6960984.954), stdev = 19019.149
  CI (99.9%): [6909020.487, 6934434.365] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_allEmpty  thrpt   30  6921727.426 ± 12706.939  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableForEachTest._Benchmark.benchmark_forEachWileWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableForEachTest._Benchmark.benchmark_forEachWileWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 517047.906 ops/s
# Warmup Iteration   2: 637452.377 ops/s
# Warmup Iteration   3: 742932.023 ops/s
# Warmup Iteration   4: 738847.395 ops/s
# Warmup Iteration   5: 739428.202 ops/s
# Warmup Iteration   6: 738916.261 ops/s
# Warmup Iteration   7: 736924.218 ops/s
# Warmup Iteration   8: 738753.985 ops/s
# Warmup Iteration   9: 735587.524 ops/s
# Warmup Iteration  10: 731877.980 ops/s
# Warmup Iteration  11: 730466.061 ops/s
# Warmup Iteration  12: 736875.504 ops/s
# Warmup Iteration  13: 736445.515 ops/s
# Warmup Iteration  14: 733148.675 ops/s
# Warmup Iteration  15: 733407.715 ops/s
# Warmup Iteration  16: 736770.044 ops/s
# Warmup Iteration  17: 764118.525 ops/s
# Warmup Iteration  18: 764763.432 ops/s
# Warmup Iteration  19: 762527.022 ops/s
# Warmup Iteration  20: 762947.664 ops/s
# Warmup Iteration  21: 761256.869 ops/s
# Warmup Iteration  22: 760387.354 ops/s
# Warmup Iteration  23: 760567.514 ops/s
# Warmup Iteration  24: 765753.898 ops/s
# Warmup Iteration  25: 764277.512 ops/s
# Warmup Iteration  26: 764710.548 ops/s
# Warmup Iteration  27: 760213.470 ops/s
# Warmup Iteration  28: 763878.918 ops/s
# Warmup Iteration  29: 759528.744 ops/s
# Warmup Iteration  30: 763364.312 ops/s
Iteration   1: 760727.628 ops/s
Iteration   2: 762752.343 ops/s
Iteration   3: 760170.521 ops/s
Iteration   4: 758324.391 ops/s
Iteration   5: 766615.598 ops/s
Iteration   6: 766494.669 ops/s
Iteration   7: 764167.707 ops/s
Iteration   8: 764471.378 ops/s
Iteration   9: 759942.081 ops/s
Iteration  10: 763178.993 ops/s
Iteration  11: 758607.119 ops/s
Iteration  12: 764964.254 ops/s
Iteration  13: 756584.568 ops/s
Iteration  14: 762082.575 ops/s
Iteration  15: 763795.632 ops/s
Iteration  16: 760727.918 ops/s
Iteration  17: 758987.795 ops/s
Iteration  18: 761170.816 ops/s
Iteration  19: 762082.545 ops/s
Iteration  20: 763378.268 ops/s
Iteration  21: 764187.752 ops/s
Iteration  22: 764413.257 ops/s
Iteration  23: 761762.955 ops/s
Iteration  24: 764966.776 ops/s
Iteration  25: 762241.608 ops/s
Iteration  26: 764349.120 ops/s
Iteration  27: 761144.813 ops/s
Iteration  28: 764730.137 ops/s
Iteration  29: 757836.285 ops/s
Iteration  30: 754385.122 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableForEachTest._Benchmark.benchmark_forEachWileWithError":
  761974.821 ±(99.9%) 1968.130 ops/s [Average]
  (min, avg, max) = (754385.122, 761974.821, 766615.598), stdev = 2945.805
  CI (99.9%): [760006.691, 763942.951] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableForEachTest._Benchmark.benchmark_forEachWileWithError  thrpt   30  761974.821 ± 1968.130  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1347718.304 ops/s
# Warmup Iteration   2: 1723261.723 ops/s
# Warmup Iteration   3: 1946756.253 ops/s
# Warmup Iteration   4: 2044601.888 ops/s
# Warmup Iteration   5: 2041311.206 ops/s
# Warmup Iteration   6: 2038717.890 ops/s
# Warmup Iteration   7: 2025543.769 ops/s
# Warmup Iteration   8: 2024086.893 ops/s
# Warmup Iteration   9: 2012244.910 ops/s
# Warmup Iteration  10: 2018810.257 ops/s
# Warmup Iteration  11: 2019982.249 ops/s
# Warmup Iteration  12: 2017827.265 ops/s
# Warmup Iteration  13: 1999168.617 ops/s
# Warmup Iteration  14: 2000868.356 ops/s
# Warmup Iteration  15: 2024218.994 ops/s
# Warmup Iteration  16: 1999089.306 ops/s
# Warmup Iteration  17: 2028986.496 ops/s
# Warmup Iteration  18: 2044572.904 ops/s
# Warmup Iteration  19: 2055051.002 ops/s
# Warmup Iteration  20: 2008800.809 ops/s
# Warmup Iteration  21: 2030343.978 ops/s
# Warmup Iteration  22: 2031681.589 ops/s
# Warmup Iteration  23: 2037145.380 ops/s
# Warmup Iteration  24: 2030530.068 ops/s
# Warmup Iteration  25: 2020569.010 ops/s
# Warmup Iteration  26: 2023583.809 ops/s
# Warmup Iteration  27: 2012300.588 ops/s
# Warmup Iteration  28: 2036334.063 ops/s
# Warmup Iteration  29: 2031062.679 ops/s
# Warmup Iteration  30: 2025851.438 ops/s
Iteration   1: 2011390.023 ops/s
Iteration   2: 2042871.063 ops/s
Iteration   3: 2043009.882 ops/s
Iteration   4: 2044260.058 ops/s
Iteration   5: 2047105.254 ops/s
Iteration   6: 2010563.264 ops/s
Iteration   7: 2002444.196 ops/s
Iteration   8: 2033845.119 ops/s
Iteration   9: 2032465.096 ops/s
Iteration  10: 2042143.585 ops/s
Iteration  11: 2021357.969 ops/s
Iteration  12: 2028027.344 ops/s
Iteration  13: 2014562.260 ops/s
Iteration  14: 2026147.017 ops/s
Iteration  15: 2009778.911 ops/s
Iteration  16: 2029950.959 ops/s
Iteration  17: 2019791.799 ops/s
Iteration  18: 2024633.343 ops/s
Iteration  19: 2029445.038 ops/s
Iteration  20: 2026550.217 ops/s
Iteration  21: 2031352.019 ops/s
Iteration  22: 2047151.229 ops/s
Iteration  23: 2039408.873 ops/s
Iteration  24: 2034205.869 ops/s
Iteration  25: 2017019.658 ops/s
Iteration  26: 2046924.048 ops/s
Iteration  27: 2011241.736 ops/s
Iteration  28: 2023393.895 ops/s
Iteration  29: 1988683.321 ops/s
Iteration  30: 1987602.965 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_backpressure":
  2025577.534 ±(99.9%) 10772.247 ops/s [Average]
  (min, avg, max) = (1987602.965, 2025577.534, 2047151.229), stdev = 16123.394
  CI (99.9%): [2014805.286, 2036349.781] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableCacheTest._Benchmark.benchmark_backpressure  thrpt   30  2025577.534 ± 10772.247  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeToEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeToEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1910330.873 ops/s
# Warmup Iteration   2: 3153040.771 ops/s
# Warmup Iteration   3: 3384841.280 ops/s
# Warmup Iteration   4: 3388528.247 ops/s
# Warmup Iteration   5: 3374675.585 ops/s
# Warmup Iteration   6: 3416280.201 ops/s
# Warmup Iteration   7: 3385726.008 ops/s
# Warmup Iteration   8: 3424729.304 ops/s
# Warmup Iteration   9: 3391861.113 ops/s
# Warmup Iteration  10: 3392157.672 ops/s
# Warmup Iteration  11: 3414653.188 ops/s
# Warmup Iteration  12: 3391091.235 ops/s
# Warmup Iteration  13: 3422602.586 ops/s
# Warmup Iteration  14: 3401611.273 ops/s
# Warmup Iteration  15: 3414781.159 ops/s
# Warmup Iteration  16: 3386461.303 ops/s
# Warmup Iteration  17: 3386090.167 ops/s
# Warmup Iteration  18: 3390265.318 ops/s
# Warmup Iteration  19: 3358103.012 ops/s
# Warmup Iteration  20: 3413600.962 ops/s
# Warmup Iteration  21: 3410239.315 ops/s
# Warmup Iteration  22: 3401326.428 ops/s
# Warmup Iteration  23: 3398186.199 ops/s
# Warmup Iteration  24: 3394133.042 ops/s
# Warmup Iteration  25: 3391424.537 ops/s
# Warmup Iteration  26: 3410354.734 ops/s
# Warmup Iteration  27: 3404398.610 ops/s
# Warmup Iteration  28: 3392550.648 ops/s
# Warmup Iteration  29: 3423758.636 ops/s
# Warmup Iteration  30: 3414978.943 ops/s
Iteration   1: 3409659.674 ops/s
Iteration   2: 3388395.687 ops/s
Iteration   3: 3411805.691 ops/s
Iteration   4: 3390216.764 ops/s
Iteration   5: 3369215.202 ops/s
Iteration   6: 3395450.480 ops/s
Iteration   7: 3399535.777 ops/s
Iteration   8: 3398124.112 ops/s
Iteration   9: 3412695.516 ops/s
Iteration  10: 3414500.556 ops/s
Iteration  11: 3402313.821 ops/s
Iteration  12: 3384517.103 ops/s
Iteration  13: 3384768.219 ops/s
Iteration  14: 3391755.614 ops/s
Iteration  15: 3403288.621 ops/s
Iteration  16: 3391168.093 ops/s
Iteration  17: 3400665.838 ops/s
Iteration  18: 3379943.842 ops/s
Iteration  19: 3397500.854 ops/s
Iteration  20: 3355887.515 ops/s
Iteration  21: 3374440.352 ops/s
Iteration  22: 3399934.306 ops/s
Iteration  23: 3393895.875 ops/s
Iteration  24: 3374051.580 ops/s
Iteration  25: 3413764.978 ops/s
Iteration  26: 3383883.957 ops/s
Iteration  27: 3398503.770 ops/s
Iteration  28: 3322203.171 ops/s
Iteration  29: 3306087.233 ops/s
Iteration  30: 3342996.124 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeToEmpty":
  3386372.344 ±(99.9%) 17173.401 ops/s [Average]
  (min, avg, max) = (3306087.233, 3386372.344, 3414500.556), stdev = 25704.340
  CI (99.9%): [3369198.943, 3403545.745] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_rangeToEmpty  thrpt   30  3386372.344 ± 17173.401  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_innerObserverFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_innerObserverFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1557070.057 ops/s
# Warmup Iteration   2: 1854059.039 ops/s
# Warmup Iteration   3: 2283266.151 ops/s
# Warmup Iteration   4: 2271051.719 ops/s
# Warmup Iteration   5: 2207108.521 ops/s
# Warmup Iteration   6: 2225309.479 ops/s
# Warmup Iteration   7: 2221053.864 ops/s
# Warmup Iteration   8: 2212479.405 ops/s
# Warmup Iteration   9: 2204291.155 ops/s
# Warmup Iteration  10: 2210724.205 ops/s
# Warmup Iteration  11: 2185903.323 ops/s
# Warmup Iteration  12: 2189472.552 ops/s
# Warmup Iteration  13: 2205266.294 ops/s
# Warmup Iteration  14: 2206911.184 ops/s
# Warmup Iteration  15: 2194013.101 ops/s
# Warmup Iteration  16: 2204042.932 ops/s
# Warmup Iteration  17: 2207419.053 ops/s
# Warmup Iteration  18: 2213747.970 ops/s
# Warmup Iteration  19: 2217662.886 ops/s
# Warmup Iteration  20: 2212586.397 ops/s
# Warmup Iteration  21: 2197865.146 ops/s
# Warmup Iteration  22: 2192530.382 ops/s
# Warmup Iteration  23: 2196416.556 ops/s
# Warmup Iteration  24: 2189993.799 ops/s
# Warmup Iteration  25: 2198923.464 ops/s
# Warmup Iteration  26: 2196827.994 ops/s
# Warmup Iteration  27: 2217949.260 ops/s
# Warmup Iteration  28: 2199584.039 ops/s
# Warmup Iteration  29: 2196728.524 ops/s
# Warmup Iteration  30: 2213348.435 ops/s
Iteration   1: 2221060.062 ops/s
Iteration   2: 2204678.050 ops/s
Iteration   3: 2211566.304 ops/s
Iteration   4: 2185734.737 ops/s
Iteration   5: 2210860.199 ops/s
Iteration   6: 2207353.589 ops/s
Iteration   7: 2186281.797 ops/s
Iteration   8: 2187469.494 ops/s
Iteration   9: 2201200.507 ops/s
Iteration  10: 2200244.267 ops/s
Iteration  11: 2194047.999 ops/s
Iteration  12: 2201713.392 ops/s
Iteration  13: 2187653.509 ops/s
Iteration  14: 2183477.399 ops/s
Iteration  15: 2206002.893 ops/s
Iteration  16: 2199077.790 ops/s
Iteration  17: 2196369.106 ops/s
Iteration  18: 2202324.866 ops/s
Iteration  19: 2207977.204 ops/s
Iteration  20: 2200083.335 ops/s
Iteration  21: 2191592.619 ops/s
Iteration  22: 2198124.575 ops/s
Iteration  23: 2189721.207 ops/s
Iteration  24: 2188367.584 ops/s
Iteration  25: 2206014.637 ops/s
Iteration  26: 2209542.914 ops/s
Iteration  27: 2176288.057 ops/s
Iteration  28: 2164861.329 ops/s
Iteration  29: 2201958.105 ops/s
Iteration  30: 2201508.566 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_innerObserverFlowable":
  2197438.536 ±(99.9%) 7800.344 ops/s [Average]
  (min, avg, max) = (2164861.329, 2197438.536, 2221060.062), stdev = 11675.189
  CI (99.9%): [2189638.192, 2205238.881] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_innerObserverFlowable  thrpt   30  2197438.536 ± 7800.344  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 676531.925 ops/s
# Warmup Iteration   2: 845169.049 ops/s
# Warmup Iteration   3: 857763.514 ops/s
# Warmup Iteration   4: 924553.492 ops/s
# Warmup Iteration   5: 949911.916 ops/s
# Warmup Iteration   6: 949168.862 ops/s
# Warmup Iteration   7: 949402.632 ops/s
# Warmup Iteration   8: 948921.862 ops/s
# Warmup Iteration   9: 948066.895 ops/s
# Warmup Iteration  10: 946153.142 ops/s
# Warmup Iteration  11: 953783.114 ops/s
# Warmup Iteration  12: 950012.536 ops/s
# Warmup Iteration  13: 947932.652 ops/s
# Warmup Iteration  14: 947347.129 ops/s
# Warmup Iteration  15: 947403.194 ops/s
# Warmup Iteration  16: 941807.190 ops/s
# Warmup Iteration  17: 995132.932 ops/s
# Warmup Iteration  18: 998717.350 ops/s
# Warmup Iteration  19: 989416.605 ops/s
# Warmup Iteration  20: 994628.420 ops/s
# Warmup Iteration  21: 995431.411 ops/s
# Warmup Iteration  22: 994903.583 ops/s
# Warmup Iteration  23: 993240.843 ops/s
# Warmup Iteration  24: 995258.849 ops/s
# Warmup Iteration  25: 992941.976 ops/s
# Warmup Iteration  26: 993850.689 ops/s
# Warmup Iteration  27: 988656.914 ops/s
# Warmup Iteration  28: 996062.629 ops/s
# Warmup Iteration  29: 996459.362 ops/s
# Warmup Iteration  30: 991628.434 ops/s
Iteration   1: 994880.435 ops/s
Iteration   2: 997951.326 ops/s
Iteration   3: 994713.115 ops/s
Iteration   4: 992525.092 ops/s
Iteration   5: 995394.621 ops/s
Iteration   6: 1000383.069 ops/s
Iteration   7: 992005.338 ops/s
Iteration   8: 995532.107 ops/s
Iteration   9: 997504.907 ops/s
Iteration  10: 995718.536 ops/s
Iteration  11: 995501.177 ops/s
Iteration  12: 994261.803 ops/s
Iteration  13: 991042.473 ops/s
Iteration  14: 992765.103 ops/s
Iteration  15: 993715.125 ops/s
Iteration  16: 996403.477 ops/s
Iteration  17: 991730.991 ops/s
Iteration  18: 994842.783 ops/s
Iteration  19: 995775.578 ops/s
Iteration  20: 998399.765 ops/s
Iteration  21: 992076.100 ops/s
Iteration  22: 994874.291 ops/s
Iteration  23: 993837.987 ops/s
Iteration  24: 988435.870 ops/s
Iteration  25: 986278.345 ops/s
Iteration  26: 982339.275 ops/s
Iteration  27: 981458.198 ops/s
Iteration  28: 993889.927 ops/s
Iteration  29: 987145.780 ops/s
Iteration  30: 992276.900 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_error":
  993121.983 ±(99.9%) 2897.199 ops/s [Average]
  (min, avg, max) = (981458.198, 993121.983, 1000383.069), stdev = 4336.391
  CI (99.9%): [990224.784, 996019.182] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
FlowableToListTest._Benchmark.benchmark_error  thrpt   30  993121.983 ± 2897.199  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureMixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureMixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2059130.781 ops/s
# Warmup Iteration   2: 3142739.809 ops/s
# Warmup Iteration   3: 3659433.456 ops/s
# Warmup Iteration   4: 3656232.397 ops/s
# Warmup Iteration   5: 3654292.833 ops/s
# Warmup Iteration   6: 3624496.190 ops/s
# Warmup Iteration   7: 3627181.087 ops/s
# Warmup Iteration   8: 3646876.914 ops/s
# Warmup Iteration   9: 3634366.805 ops/s
# Warmup Iteration  10: 3641596.076 ops/s
# Warmup Iteration  11: 3617913.406 ops/s
# Warmup Iteration  12: 3634159.920 ops/s
# Warmup Iteration  13: 3632101.412 ops/s
# Warmup Iteration  14: 3621969.326 ops/s
# Warmup Iteration  15: 3614148.122 ops/s
# Warmup Iteration  16: 3629811.230 ops/s
# Warmup Iteration  17: 3632749.968 ops/s
# Warmup Iteration  18: 3629853.192 ops/s
# Warmup Iteration  19: 3623372.095 ops/s
# Warmup Iteration  20: 3633289.942 ops/s
# Warmup Iteration  21: 3646705.642 ops/s
# Warmup Iteration  22: 3627809.082 ops/s
# Warmup Iteration  23: 3638589.786 ops/s
# Warmup Iteration  24: 3648662.196 ops/s
# Warmup Iteration  25: 3636420.728 ops/s
# Warmup Iteration  26: 3634790.777 ops/s
# Warmup Iteration  27: 3627057.229 ops/s
# Warmup Iteration  28: 3636859.220 ops/s
# Warmup Iteration  29: 3646205.530 ops/s
# Warmup Iteration  30: 3634078.526 ops/s
Iteration   1: 3628894.226 ops/s
Iteration   2: 3645477.069 ops/s
Iteration   3: 3643592.679 ops/s
Iteration   4: 3627525.356 ops/s
Iteration   5: 3624421.322 ops/s
Iteration   6: 3629671.184 ops/s
Iteration   7: 3630241.105 ops/s
Iteration   8: 3636415.022 ops/s
Iteration   9: 3652156.564 ops/s
Iteration  10: 3619868.469 ops/s
Iteration  11: 3628636.765 ops/s
Iteration  12: 3642053.119 ops/s
Iteration  13: 3624609.488 ops/s
Iteration  14: 3640533.892 ops/s
Iteration  15: 3624802.248 ops/s
Iteration  16: 3612370.514 ops/s
Iteration  17: 3645072.992 ops/s
Iteration  18: 3656846.677 ops/s
Iteration  19: 3643502.873 ops/s
Iteration  20: 3641279.546 ops/s
Iteration  21: 3648566.747 ops/s
Iteration  22: 3638981.786 ops/s
Iteration  23: 3631015.641 ops/s
Iteration  24: 3648345.979 ops/s
Iteration  25: 3591489.229 ops/s
Iteration  26: 3555653.988 ops/s
Iteration  27: 3629684.859 ops/s
Iteration  28: 3629919.299 ops/s
Iteration  29: 3633899.714 ops/s
Iteration  30: 3616707.802 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureMixed":
  3630741.205 ±(99.9%) 12970.058 ops/s [Average]
  (min, avg, max) = (3555653.988, 3630741.205, 3656846.677), stdev = 19412.973
  CI (99.9%): [3617771.148, 3643711.263] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_backpressureMixed  thrpt   30  3630741.205 ± 12970.058  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_fusedSync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_fusedSync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3435470.406 ops/s
# Warmup Iteration   2: 5335368.607 ops/s
# Warmup Iteration   3: 6061830.814 ops/s
# Warmup Iteration   4: 6070568.015 ops/s
# Warmup Iteration   5: 6098101.932 ops/s
# Warmup Iteration   6: 6054241.319 ops/s
# Warmup Iteration   7: 6093189.708 ops/s
# Warmup Iteration   8: 6066494.886 ops/s
# Warmup Iteration   9: 6117039.591 ops/s
# Warmup Iteration  10: 6016523.020 ops/s
# Warmup Iteration  11: 6074040.510 ops/s
# Warmup Iteration  12: 6076527.919 ops/s
# Warmup Iteration  13: 6030669.032 ops/s
# Warmup Iteration  14: 6059601.263 ops/s
# Warmup Iteration  15: 6099451.515 ops/s
# Warmup Iteration  16: 6090258.557 ops/s
# Warmup Iteration  17: 6096547.700 ops/s
# Warmup Iteration  18: 6068908.670 ops/s
# Warmup Iteration  19: 6007673.254 ops/s
# Warmup Iteration  20: 6087311.620 ops/s
# Warmup Iteration  21: 6126826.579 ops/s
# Warmup Iteration  22: 6124354.487 ops/s
# Warmup Iteration  23: 6031127.759 ops/s
# Warmup Iteration  24: 6113538.075 ops/s
# Warmup Iteration  25: 6129411.130 ops/s
# Warmup Iteration  26: 6106964.308 ops/s
# Warmup Iteration  27: 6096427.427 ops/s
# Warmup Iteration  28: 6118714.964 ops/s
# Warmup Iteration  29: 6120703.932 ops/s
# Warmup Iteration  30: 6094853.022 ops/s
Iteration   1: 6106253.490 ops/s
Iteration   2: 6081838.902 ops/s
Iteration   3: 6116155.566 ops/s
Iteration   4: 6075737.241 ops/s
Iteration   5: 5987720.738 ops/s
Iteration   6: 6109868.420 ops/s
Iteration   7: 6127883.545 ops/s
Iteration   8: 6129346.224 ops/s
Iteration   9: 6066335.842 ops/s
Iteration  10: 6091401.582 ops/s
Iteration  11: 6105484.862 ops/s
Iteration  12: 6109024.390 ops/s
Iteration  13: 6098613.968 ops/s
Iteration  14: 6060378.329 ops/s
Iteration  15: 6109936.387 ops/s
Iteration  16: 6078760.078 ops/s
Iteration  17: 6076818.804 ops/s
Iteration  18: 6091141.127 ops/s
Iteration  19: 6098923.989 ops/s
Iteration  20: 6087983.718 ops/s
Iteration  21: 6071800.987 ops/s
Iteration  22: 6071684.423 ops/s
Iteration  23: 6073346.790 ops/s
Iteration  24: 5951253.477 ops/s
Iteration  25: 5916580.836 ops/s
Iteration  26: 6095195.529 ops/s
Iteration  27: 6125306.372 ops/s
Iteration  28: 6104734.799 ops/s
Iteration  29: 6135166.263 ops/s
Iteration  30: 6105202.185 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_fusedSync":
  6081995.962 ±(99.9%) 32839.604 ops/s [Average]
  (min, avg, max) = (5916580.836, 6081995.962, 6135166.263), stdev = 49152.776
  CI (99.9%): [6049156.359, 6114835.566] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_fusedSync  thrpt   30  6081995.962 ± 32839.604  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_distinctUntilChangedFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_distinctUntilChangedFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3089578.955 ops/s
# Warmup Iteration   2: 4904053.055 ops/s
# Warmup Iteration   3: 5292765.891 ops/s
# Warmup Iteration   4: 5252157.740 ops/s
# Warmup Iteration   5: 5242907.850 ops/s
# Warmup Iteration   6: 5252669.139 ops/s
# Warmup Iteration   7: 5245855.686 ops/s
# Warmup Iteration   8: 5258373.568 ops/s
# Warmup Iteration   9: 5267791.978 ops/s
# Warmup Iteration  10: 5244353.305 ops/s
# Warmup Iteration  11: 5265122.218 ops/s
# Warmup Iteration  12: 5268596.702 ops/s
# Warmup Iteration  13: 5269574.340 ops/s
# Warmup Iteration  14: 5293891.959 ops/s
# Warmup Iteration  15: 5255516.597 ops/s
# Warmup Iteration  16: 5290170.974 ops/s
# Warmup Iteration  17: 5211173.993 ops/s
# Warmup Iteration  18: 5222151.780 ops/s
# Warmup Iteration  19: 5200272.611 ops/s
# Warmup Iteration  20: 5205847.348 ops/s
# Warmup Iteration  21: 5223807.516 ops/s
# Warmup Iteration  22: 5213798.512 ops/s
# Warmup Iteration  23: 5188690.833 ops/s
# Warmup Iteration  24: 5203338.946 ops/s
# Warmup Iteration  25: 5210828.444 ops/s
# Warmup Iteration  26: 5229924.563 ops/s
# Warmup Iteration  27: 5212852.761 ops/s
# Warmup Iteration  28: 5205376.845 ops/s
# Warmup Iteration  29: 5230204.654 ops/s
# Warmup Iteration  30: 5189483.054 ops/s
Iteration   1: 5203878.716 ops/s
Iteration   2: 5215262.189 ops/s
Iteration   3: 5220401.860 ops/s
Iteration   4: 5212527.345 ops/s
Iteration   5: 5229553.488 ops/s
Iteration   6: 5212654.294 ops/s
Iteration   7: 5200082.910 ops/s
Iteration   8: 5210037.839 ops/s
Iteration   9: 5195526.004 ops/s
Iteration  10: 5228902.936 ops/s
Iteration  11: 5239125.497 ops/s
Iteration  12: 5205249.305 ops/s
Iteration  13: 5226468.090 ops/s
Iteration  14: 5198198.525 ops/s
Iteration  15: 5235841.441 ops/s
Iteration  16: 5211057.211 ops/s
Iteration  17: 5201858.407 ops/s
Iteration  18: 5217821.460 ops/s
Iteration  19: 5208762.454 ops/s
Iteration  20: 5208792.742 ops/s
Iteration  21: 5197828.054 ops/s
Iteration  22: 5178526.504 ops/s
Iteration  23: 5094961.782 ops/s
Iteration  24: 5074040.977 ops/s
Iteration  25: 5187101.028 ops/s
Iteration  26: 5189331.880 ops/s
Iteration  27: 5225923.465 ops/s
Iteration  28: 5229328.789 ops/s
Iteration  29: 5211122.503 ops/s
Iteration  30: 5223915.404 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_distinctUntilChangedFunctionReturnsNull":
  5203136.103 ±(99.9%) 23713.243 ops/s [Average]
  (min, avg, max) = (5074040.977, 5203136.103, 5239125.497), stdev = 35492.868
  CI (99.9%): [5179422.861, 5226849.346] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
FlowableNullTests._Benchmark.benchmark_distinctUntilChangedFunctionReturnsNull  thrpt   30  5203136.103 ± 23713.243  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 648484.369 ops/s
# Warmup Iteration   2: 906995.780 ops/s
# Warmup Iteration   3: 1078258.827 ops/s
# Warmup Iteration   4: 1089978.096 ops/s
# Warmup Iteration   5: 1086157.163 ops/s
# Warmup Iteration   6: 1086511.278 ops/s
# Warmup Iteration   7: 1083785.959 ops/s
# Warmup Iteration   8: 1078879.068 ops/s
# Warmup Iteration   9: 1084133.854 ops/s
# Warmup Iteration  10: 1081632.169 ops/s
# Warmup Iteration  11: 1073295.493 ops/s
# Warmup Iteration  12: 1085624.263 ops/s
# Warmup Iteration  13: 1081286.738 ops/s
# Warmup Iteration  14: 1080466.181 ops/s
# Warmup Iteration  15: 1079290.880 ops/s
# Warmup Iteration  16: 1082051.266 ops/s
# Warmup Iteration  17: 1091633.618 ops/s
# Warmup Iteration  18: 1084380.882 ops/s
# Warmup Iteration  19: 1084468.416 ops/s
# Warmup Iteration  20: 1082968.543 ops/s
# Warmup Iteration  21: 1085763.237 ops/s
# Warmup Iteration  22: 1088219.650 ops/s
# Warmup Iteration  23: 1087097.826 ops/s
# Warmup Iteration  24: 1079601.836 ops/s
# Warmup Iteration  25: 1084130.875 ops/s
# Warmup Iteration  26: 1092280.667 ops/s
# Warmup Iteration  27: 1077049.297 ops/s
# Warmup Iteration  28: 1079878.224 ops/s
# Warmup Iteration  29: 1088393.755 ops/s
# Warmup Iteration  30: 1088060.807 ops/s
Iteration   1: 1080129.073 ops/s
Iteration   2: 1085700.424 ops/s
Iteration   3: 1085847.020 ops/s
Iteration   4: 1082072.473 ops/s
Iteration   5: 1089617.336 ops/s
Iteration   6: 1083448.309 ops/s
Iteration   7: 1084986.353 ops/s
Iteration   8: 1080400.634 ops/s
Iteration   9: 1082279.832 ops/s
Iteration  10: 1082141.792 ops/s
Iteration  11: 1085151.153 ops/s
Iteration  12: 1080378.751 ops/s
Iteration  13: 1078159.247 ops/s
Iteration  14: 1082875.043 ops/s
Iteration  15: 1085291.822 ops/s
Iteration  16: 1090357.041 ops/s
Iteration  17: 1081565.515 ops/s
Iteration  18: 1085410.756 ops/s
Iteration  19: 1086516.867 ops/s
Iteration  20: 1080817.347 ops/s
Iteration  21: 1081260.215 ops/s
Iteration  22: 1060776.064 ops/s
Iteration  23: 1055250.419 ops/s
Iteration  24: 1086645.808 ops/s
Iteration  25: 1082522.269 ops/s
Iteration  26: 1086563.008 ops/s
Iteration  27: 1079557.296 ops/s
Iteration  28: 1084505.240 ops/s
Iteration  29: 1084760.366 ops/s
Iteration  30: 1072376.180 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeTake":
  1081578.788 ±(99.9%) 4904.034 ops/s [Average]
  (min, avg, max) = (1055250.419, 1081578.788, 1090357.041), stdev = 7340.128
  CI (99.9%): [1076674.754, 1086482.822] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_rangeTake  thrpt   30  1081578.788 ± 4904.034  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 679235.917 ops/s
# Warmup Iteration   2: 835816.695 ops/s
# Warmup Iteration   3: 887347.507 ops/s
# Warmup Iteration   4: 889890.491 ops/s
# Warmup Iteration   5: 949131.630 ops/s
# Warmup Iteration   6: 951994.977 ops/s
# Warmup Iteration   7: 949186.691 ops/s
# Warmup Iteration   8: 946935.347 ops/s
# Warmup Iteration   9: 948271.065 ops/s
# Warmup Iteration  10: 949178.852 ops/s
# Warmup Iteration  11: 948350.755 ops/s
# Warmup Iteration  12: 945109.122 ops/s
# Warmup Iteration  13: 946172.394 ops/s
# Warmup Iteration  14: 942624.422 ops/s
# Warmup Iteration  15: 942144.442 ops/s
# Warmup Iteration  16: 941359.642 ops/s
# Warmup Iteration  17: 1004504.445 ops/s
# Warmup Iteration  18: 999511.816 ops/s
# Warmup Iteration  19: 995686.585 ops/s
# Warmup Iteration  20: 997052.397 ops/s
# Warmup Iteration  21: 999836.568 ops/s
# Warmup Iteration  22: 996814.260 ops/s
# Warmup Iteration  23: 995613.958 ops/s
# Warmup Iteration  24: 993824.873 ops/s
# Warmup Iteration  25: 1001146.647 ops/s
# Warmup Iteration  26: 997248.266 ops/s
# Warmup Iteration  27: 998711.314 ops/s
# Warmup Iteration  28: 1005820.968 ops/s
# Warmup Iteration  29: 1000698.500 ops/s
# Warmup Iteration  30: 997756.358 ops/s
Iteration   1: 993293.517 ops/s
Iteration   2: 990673.165 ops/s
Iteration   3: 998692.419 ops/s
Iteration   4: 1004649.807 ops/s
Iteration   5: 1005539.895 ops/s
Iteration   6: 1006717.490 ops/s
Iteration   7: 1000929.933 ops/s
Iteration   8: 996371.399 ops/s
Iteration   9: 994629.321 ops/s
Iteration  10: 996393.892 ops/s
Iteration  11: 994898.326 ops/s
Iteration  12: 999259.667 ops/s
Iteration  13: 995881.702 ops/s
Iteration  14: 1001076.098 ops/s
Iteration  15: 995040.511 ops/s
Iteration  16: 993823.942 ops/s
Iteration  17: 990779.256 ops/s
Iteration  18: 995596.045 ops/s
Iteration  19: 996007.068 ops/s
Iteration  20: 992819.822 ops/s
Iteration  21: 985696.571 ops/s
Iteration  22: 987141.228 ops/s
Iteration  23: 996180.173 ops/s
Iteration  24: 996445.940 ops/s
Iteration  25: 1000062.580 ops/s
Iteration  26: 999051.033 ops/s
Iteration  27: 997030.626 ops/s
Iteration  28: 997262.262 ops/s
Iteration  29: 998738.621 ops/s
Iteration  30: 999986.235 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_error":
  996688.951 ±(99.9%) 3171.363 ops/s [Average]
  (min, avg, max) = (985696.571, 996688.951, 1006717.490), stdev = 4746.747
  CI (99.9%): [993517.589, 999860.314] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_error  thrpt   30  996688.951 ± 3171.363  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_slowPathRebatch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_slowPathRebatch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2314001.000 ops/s
# Warmup Iteration   2: 3487095.939 ops/s
# Warmup Iteration   3: 3934162.650 ops/s
# Warmup Iteration   4: 3940228.554 ops/s
# Warmup Iteration   5: 3942056.379 ops/s
# Warmup Iteration   6: 3927692.078 ops/s
# Warmup Iteration   7: 3908746.255 ops/s
# Warmup Iteration   8: 3927631.641 ops/s
# Warmup Iteration   9: 3922192.386 ops/s
# Warmup Iteration  10: 3952769.499 ops/s
# Warmup Iteration  11: 3939849.203 ops/s
# Warmup Iteration  12: 3925173.000 ops/s
# Warmup Iteration  13: 3929533.626 ops/s
# Warmup Iteration  14: 3935025.639 ops/s
# Warmup Iteration  15: 3945339.827 ops/s
# Warmup Iteration  16: 3926958.583 ops/s
# Warmup Iteration  17: 3932577.150 ops/s
# Warmup Iteration  18: 3928835.202 ops/s
# Warmup Iteration  19: 3925908.595 ops/s
# Warmup Iteration  20: 3943376.060 ops/s
# Warmup Iteration  21: 3941907.752 ops/s
# Warmup Iteration  22: 3941085.106 ops/s
# Warmup Iteration  23: 3922370.318 ops/s
# Warmup Iteration  24: 3920831.621 ops/s
# Warmup Iteration  25: 3938300.239 ops/s
# Warmup Iteration  26: 3930827.943 ops/s
# Warmup Iteration  27: 3934548.236 ops/s
# Warmup Iteration  28: 3917451.018 ops/s
# Warmup Iteration  29: 3949760.478 ops/s
# Warmup Iteration  30: 3952234.119 ops/s
Iteration   1: 3914144.454 ops/s
Iteration   2: 3921409.071 ops/s
Iteration   3: 3936523.473 ops/s
Iteration   4: 3929415.344 ops/s
Iteration   5: 3920183.230 ops/s
Iteration   6: 3898740.996 ops/s
Iteration   7: 3946680.609 ops/s
Iteration   8: 3933035.585 ops/s
Iteration   9: 3927333.487 ops/s
Iteration  10: 3948181.615 ops/s
Iteration  11: 3928789.215 ops/s
Iteration  12: 3930692.103 ops/s
Iteration  13: 3941509.874 ops/s
Iteration  14: 3931872.005 ops/s
Iteration  15: 3939698.061 ops/s
Iteration  16: 3934297.221 ops/s
Iteration  17: 3932988.586 ops/s
Iteration  18: 3904008.134 ops/s
Iteration  19: 3868730.679 ops/s
Iteration  20: 3853588.837 ops/s
Iteration  21: 3931854.901 ops/s
Iteration  22: 3916080.278 ops/s
Iteration  23: 3924571.323 ops/s
Iteration  24: 3950764.522 ops/s
Iteration  25: 3944771.434 ops/s
Iteration  26: 3934061.013 ops/s
Iteration  27: 3931847.407 ops/s
Iteration  28: 3957575.146 ops/s
Iteration  29: 3944746.534 ops/s
Iteration  30: 3938244.954 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_slowPathRebatch":
  3927211.336 ±(99.9%) 14837.495 ops/s [Average]
  (min, avg, max) = (3853588.837, 3927211.336, 3957575.146), stdev = 22208.065
  CI (99.9%): [3912373.842, 3942048.831] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_slowPathRebatch  thrpt   30  3927211.336 ± 14837.495  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_syncFusedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_syncFusedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3327721.113 ops/s
# Warmup Iteration   2: 5407660.640 ops/s
# Warmup Iteration   3: 6103264.303 ops/s
# Warmup Iteration   4: 6099845.610 ops/s
# Warmup Iteration   5: 6108969.586 ops/s
# Warmup Iteration   6: 6109547.755 ops/s
# Warmup Iteration   7: 6042893.635 ops/s
# Warmup Iteration   8: 6085216.085 ops/s
# Warmup Iteration   9: 6096808.356 ops/s
# Warmup Iteration  10: 6131722.621 ops/s
# Warmup Iteration  11: 6079933.565 ops/s
# Warmup Iteration  12: 6118109.589 ops/s
# Warmup Iteration  13: 6080004.131 ops/s
# Warmup Iteration  14: 6105941.836 ops/s
# Warmup Iteration  15: 6086031.645 ops/s
# Warmup Iteration  16: 6061933.050 ops/s
# Warmup Iteration  17: 6154633.129 ops/s
# Warmup Iteration  18: 6149899.957 ops/s
# Warmup Iteration  19: 6136734.636 ops/s
# Warmup Iteration  20: 6128126.861 ops/s
# Warmup Iteration  21: 6120529.245 ops/s
# Warmup Iteration  22: 6137741.324 ops/s
# Warmup Iteration  23: 6160441.325 ops/s
# Warmup Iteration  24: 6096145.459 ops/s
# Warmup Iteration  25: 6159376.157 ops/s
# Warmup Iteration  26: 6165179.508 ops/s
# Warmup Iteration  27: 6144600.636 ops/s
# Warmup Iteration  28: 6169940.052 ops/s
# Warmup Iteration  29: 6131926.939 ops/s
# Warmup Iteration  30: 6154851.174 ops/s
Iteration   1: 6147542.530 ops/s
Iteration   2: 6150506.518 ops/s
Iteration   3: 6155940.801 ops/s
Iteration   4: 6157461.410 ops/s
Iteration   5: 6153871.846 ops/s
Iteration   6: 6132364.333 ops/s
Iteration   7: 6105379.335 ops/s
Iteration   8: 6163314.139 ops/s
Iteration   9: 6166890.977 ops/s
Iteration  10: 6104941.887 ops/s
Iteration  11: 6135170.036 ops/s
Iteration  12: 6146081.840 ops/s
Iteration  13: 6146226.631 ops/s
Iteration  14: 6180882.817 ops/s
Iteration  15: 6148994.725 ops/s
Iteration  16: 6129702.844 ops/s
Iteration  17: 6130076.482 ops/s
Iteration  18: 6075254.686 ops/s
Iteration  19: 5981549.343 ops/s
Iteration  20: 6039574.541 ops/s
Iteration  21: 6154285.280 ops/s
Iteration  22: 6159713.461 ops/s
Iteration  23: 6155947.804 ops/s
Iteration  24: 6132931.328 ops/s
Iteration  25: 6116152.845 ops/s
Iteration  26: 6135551.499 ops/s
Iteration  27: 6117191.513 ops/s
Iteration  28: 6147819.895 ops/s
Iteration  29: 6159535.558 ops/s
Iteration  30: 6150868.362 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_syncFusedConditional":
  6132724.176 ±(99.9%) 26922.366 ops/s [Average]
  (min, avg, max) = (5981549.343, 6132724.176, 6180882.817), stdev = 40296.133
  CI (99.9%): [6105801.810, 6159646.541] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_syncFusedConditional  thrpt   30  6132724.176 ± 26922.366  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureAllConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureAllConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1695643.415 ops/s
# Warmup Iteration   2: 2453574.775 ops/s
# Warmup Iteration   3: 3058490.122 ops/s
# Warmup Iteration   4: 3028868.893 ops/s
# Warmup Iteration   5: 3050894.696 ops/s
# Warmup Iteration   6: 3022920.807 ops/s
# Warmup Iteration   7: 3015744.425 ops/s
# Warmup Iteration   8: 2976158.251 ops/s
# Warmup Iteration   9: 3005701.034 ops/s
# Warmup Iteration  10: 3010176.677 ops/s
# Warmup Iteration  11: 3009914.735 ops/s
# Warmup Iteration  12: 3028017.381 ops/s
# Warmup Iteration  13: 2994903.464 ops/s
# Warmup Iteration  14: 3016214.776 ops/s
# Warmup Iteration  15: 3019333.218 ops/s
# Warmup Iteration  16: 2999737.489 ops/s
# Warmup Iteration  17: 3033579.678 ops/s
# Warmup Iteration  18: 3011484.635 ops/s
# Warmup Iteration  19: 3037174.821 ops/s
# Warmup Iteration  20: 3031323.026 ops/s
# Warmup Iteration  21: 3033784.812 ops/s
# Warmup Iteration  22: 3048418.889 ops/s
# Warmup Iteration  23: 3060040.885 ops/s
# Warmup Iteration  24: 3054900.272 ops/s
# Warmup Iteration  25: 3014970.447 ops/s
# Warmup Iteration  26: 3026756.661 ops/s
# Warmup Iteration  27: 3049888.148 ops/s
# Warmup Iteration  28: 3039765.699 ops/s
# Warmup Iteration  29: 3038081.166 ops/s
# Warmup Iteration  30: 3038892.747 ops/s
Iteration   1: 3046055.930 ops/s
Iteration   2: 3041748.232 ops/s
Iteration   3: 3033326.628 ops/s
Iteration   4: 3051584.653 ops/s
Iteration   5: 3053264.573 ops/s
Iteration   6: 3048543.894 ops/s
Iteration   7: 3032617.036 ops/s
Iteration   8: 3014837.207 ops/s
Iteration   9: 3039610.423 ops/s
Iteration  10: 3016364.420 ops/s
Iteration  11: 3053303.551 ops/s
Iteration  12: 3011784.060 ops/s
Iteration  13: 3044341.912 ops/s
Iteration  14: 3038705.967 ops/s
Iteration  15: 3026431.839 ops/s
Iteration  16: 3025167.428 ops/s
Iteration  17: 2989132.575 ops/s
Iteration  18: 2993972.563 ops/s
Iteration  19: 3038217.740 ops/s
Iteration  20: 3023229.156 ops/s
Iteration  21: 3028213.131 ops/s
Iteration  22: 3050585.950 ops/s
Iteration  23: 3040325.846 ops/s
Iteration  24: 3057977.665 ops/s
Iteration  25: 3039026.744 ops/s
Iteration  26: 3053638.499 ops/s
Iteration  27: 3052940.892 ops/s
Iteration  28: 3028071.428 ops/s
Iteration  29: 3027107.056 ops/s
Iteration  30: 3021337.800 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureAllConditional":
  3034048.827 ±(99.9%) 11522.141 ops/s [Average]
  (min, avg, max) = (2989132.575, 3034048.827, 3057977.665), stdev = 17245.800
  CI (99.9%): [3022526.685, 3045570.968] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_backpressureAllConditional  thrpt   30  3034048.827 ± 11522.141  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureMixedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureMixedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1923394.633 ops/s
# Warmup Iteration   2: 2934484.472 ops/s
# Warmup Iteration   3: 3307390.696 ops/s
# Warmup Iteration   4: 3338233.943 ops/s
# Warmup Iteration   5: 3325870.562 ops/s
# Warmup Iteration   6: 3332951.261 ops/s
# Warmup Iteration   7: 3303878.454 ops/s
# Warmup Iteration   8: 3339343.145 ops/s
# Warmup Iteration   9: 3340722.501 ops/s
# Warmup Iteration  10: 3313738.158 ops/s
# Warmup Iteration  11: 3313127.380 ops/s
# Warmup Iteration  12: 3323275.382 ops/s
# Warmup Iteration  13: 3303334.320 ops/s
# Warmup Iteration  14: 3341818.286 ops/s
# Warmup Iteration  15: 3331973.719 ops/s
# Warmup Iteration  16: 3320260.842 ops/s
# Warmup Iteration  17: 3303330.072 ops/s
# Warmup Iteration  18: 3332745.804 ops/s
# Warmup Iteration  19: 3316211.262 ops/s
# Warmup Iteration  20: 3330457.527 ops/s
# Warmup Iteration  21: 3316977.155 ops/s
# Warmup Iteration  22: 3323225.002 ops/s
# Warmup Iteration  23: 3325714.305 ops/s
# Warmup Iteration  24: 3324616.376 ops/s
# Warmup Iteration  25: 3322366.129 ops/s
# Warmup Iteration  26: 3327067.456 ops/s
# Warmup Iteration  27: 3331780.231 ops/s
# Warmup Iteration  28: 3315703.535 ops/s
# Warmup Iteration  29: 3306668.100 ops/s
# Warmup Iteration  30: 3320082.141 ops/s
Iteration   1: 3324276.531 ops/s
Iteration   2: 3319714.847 ops/s
Iteration   3: 3310992.679 ops/s
Iteration   4: 3320592.724 ops/s
Iteration   5: 3317125.853 ops/s
Iteration   6: 3323553.591 ops/s
Iteration   7: 3328426.833 ops/s
Iteration   8: 3323875.225 ops/s
Iteration   9: 3335738.576 ops/s
Iteration  10: 3322261.482 ops/s
Iteration  11: 3328965.208 ops/s
Iteration  12: 3312753.153 ops/s
Iteration  13: 3310053.610 ops/s
Iteration  14: 3318954.896 ops/s
Iteration  15: 3323349.518 ops/s
Iteration  16: 3268636.398 ops/s
Iteration  17: 3258724.355 ops/s
Iteration  18: 3313873.631 ops/s
Iteration  19: 3315348.420 ops/s
Iteration  20: 3304362.474 ops/s
Iteration  21: 3324217.599 ops/s
Iteration  22: 3322169.402 ops/s
Iteration  23: 3338248.011 ops/s
Iteration  24: 3316064.815 ops/s
Iteration  25: 3327832.233 ops/s
Iteration  26: 3327421.818 ops/s
Iteration  27: 3325633.164 ops/s
Iteration  28: 3329393.367 ops/s
Iteration  29: 3310503.182 ops/s
Iteration  30: 3309931.369 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureMixedConditional":
  3317099.832 ±(99.9%) 11059.898 ops/s [Average]
  (min, avg, max) = (3258724.355, 3317099.832, 3338248.011), stdev = 16553.936
  CI (99.9%): [3306039.934, 3328159.730] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_backpressureMixedConditional  thrpt   30  3317099.832 ± 11059.898  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_valuesAndThenError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_valuesAndThenError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 296853.768 ops/s
# Warmup Iteration   2: 397834.071 ops/s
# Warmup Iteration   3: 457386.335 ops/s
# Warmup Iteration   4: 456823.551 ops/s
# Warmup Iteration   5: 457211.735 ops/s
# Warmup Iteration   6: 457578.935 ops/s
# Warmup Iteration   7: 456158.274 ops/s
# Warmup Iteration   8: 457984.385 ops/s
# Warmup Iteration   9: 460063.696 ops/s
# Warmup Iteration  10: 453035.460 ops/s
# Warmup Iteration  11: 454361.231 ops/s
# Warmup Iteration  12: 454828.068 ops/s
# Warmup Iteration  13: 455453.615 ops/s
# Warmup Iteration  14: 453115.899 ops/s
# Warmup Iteration  15: 454570.744 ops/s
# Warmup Iteration  16: 458184.212 ops/s
# Warmup Iteration  17: 466304.178 ops/s
# Warmup Iteration  18: 466550.274 ops/s
# Warmup Iteration  19: 465977.910 ops/s
# Warmup Iteration  20: 468767.559 ops/s
# Warmup Iteration  21: 465105.777 ops/s
# Warmup Iteration  22: 471133.406 ops/s
# Warmup Iteration  23: 467853.526 ops/s
# Warmup Iteration  24: 470568.810 ops/s
# Warmup Iteration  25: 471120.683 ops/s
# Warmup Iteration  26: 465009.545 ops/s
# Warmup Iteration  27: 470804.492 ops/s
# Warmup Iteration  28: 470861.202 ops/s
# Warmup Iteration  29: 467856.730 ops/s
# Warmup Iteration  30: 469490.808 ops/s
Iteration   1: 468011.162 ops/s
Iteration   2: 467621.352 ops/s
Iteration   3: 467068.292 ops/s
Iteration   4: 467998.198 ops/s
Iteration   5: 466122.500 ops/s
Iteration   6: 466579.461 ops/s
Iteration   7: 467569.740 ops/s
Iteration   8: 466871.880 ops/s
Iteration   9: 469489.779 ops/s
Iteration  10: 469332.603 ops/s
Iteration  11: 472341.402 ops/s
Iteration  12: 469226.368 ops/s
Iteration  13: 466735.667 ops/s
Iteration  14: 469460.156 ops/s
Iteration  15: 462227.562 ops/s
Iteration  16: 459513.104 ops/s
Iteration  17: 467118.162 ops/s
Iteration  18: 466450.838 ops/s
Iteration  19: 469631.149 ops/s
Iteration  20: 468520.400 ops/s
Iteration  21: 470834.217 ops/s
Iteration  22: 467733.827 ops/s
Iteration  23: 465200.916 ops/s
Iteration  24: 468892.111 ops/s
Iteration  25: 468416.985 ops/s
Iteration  26: 468624.770 ops/s
Iteration  27: 470951.842 ops/s
Iteration  28: 467840.205 ops/s
Iteration  29: 470579.064 ops/s
Iteration  30: 466946.403 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_valuesAndThenError":
  467797.004 ±(99.9%) 1665.022 ops/s [Average]
  (min, avg, max) = (459513.104, 467797.004, 472341.402), stdev = 2492.127
  CI (99.9%): [466131.981, 469462.026] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableCacheTest._Benchmark.benchmark_valuesAndThenError  thrpt   30  467797.004 ± 1665.022  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_whenTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_whenTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 595098.063 ops/s
# Warmup Iteration   2: 822478.311 ops/s
# Warmup Iteration   3: 827466.022 ops/s
# Warmup Iteration   4: 1068276.881 ops/s
# Warmup Iteration   5: 1369623.084 ops/s
# Warmup Iteration   6: 1356532.213 ops/s
# Warmup Iteration   7: 1362915.840 ops/s
# Warmup Iteration   8: 1360190.697 ops/s
# Warmup Iteration   9: 1354453.335 ops/s
# Warmup Iteration  10: 1360207.547 ops/s
# Warmup Iteration  11: 1346983.094 ops/s
# Warmup Iteration  12: 1364530.438 ops/s
# Warmup Iteration  13: 1361909.367 ops/s
# Warmup Iteration  14: 1352622.413 ops/s
# Warmup Iteration  15: 1345246.577 ops/s
# Warmup Iteration  16: 1366676.844 ops/s
# Warmup Iteration  17: 1352768.869 ops/s
# Warmup Iteration  18: 1349137.957 ops/s
# Warmup Iteration  19: 1360792.933 ops/s
# Warmup Iteration  20: 1364666.149 ops/s
# Warmup Iteration  21: 1368480.114 ops/s
# Warmup Iteration  22: 1348657.572 ops/s
# Warmup Iteration  23: 1359860.757 ops/s
# Warmup Iteration  24: 1352565.688 ops/s
# Warmup Iteration  25: 1362675.397 ops/s
# Warmup Iteration  26: 1371576.438 ops/s
# Warmup Iteration  27: 1362930.059 ops/s
# Warmup Iteration  28: 1366439.572 ops/s
# Warmup Iteration  29: 1366142.702 ops/s
# Warmup Iteration  30: 1364789.080 ops/s
Iteration   1: 1379214.121 ops/s
Iteration   2: 1363258.290 ops/s
Iteration   3: 1345249.128 ops/s
Iteration   4: 1344678.609 ops/s
Iteration   5: 1363308.012 ops/s
Iteration   6: 1363184.914 ops/s
Iteration   7: 1352946.236 ops/s
Iteration   8: 1357797.263 ops/s
Iteration   9: 1354084.825 ops/s
Iteration  10: 1348412.453 ops/s
Iteration  11: 1355689.325 ops/s
Iteration  12: 1348591.491 ops/s
Iteration  13: 1352316.672 ops/s
Iteration  14: 1340575.831 ops/s
Iteration  15: 1337807.325 ops/s
Iteration  16: 1358782.761 ops/s
Iteration  17: 1360569.865 ops/s
Iteration  18: 1342284.848 ops/s
Iteration  19: 1365320.575 ops/s
Iteration  20: 1353424.871 ops/s
Iteration  21: 1353522.599 ops/s
Iteration  22: 1346248.376 ops/s
Iteration  23: 1356158.338 ops/s
Iteration  24: 1371180.774 ops/s
Iteration  25: 1369004.351 ops/s
Iteration  26: 1355691.976 ops/s
Iteration  27: 1347646.436 ops/s
Iteration  28: 1346510.324 ops/s
Iteration  29: 1365730.800 ops/s
Iteration  30: 1356475.328 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_whenTake":
  1355188.891 ±(99.9%) 6443.952 ops/s [Average]
  (min, avg, max) = (1337807.325, 1355188.891, 1379214.121), stdev = 9645.004
  CI (99.9%): [1348744.939, 1361632.842] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
FlowableRepeatTest._Benchmark.benchmark_whenTake  thrpt   30  1355188.891 ± 6443.952  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147933.576 ops/s
# Warmup Iteration   2: 180597.904 ops/s
# Warmup Iteration   3: 178451.160 ops/s
# Warmup Iteration   4: 192133.735 ops/s
# Warmup Iteration   5: 192476.820 ops/s
# Warmup Iteration   6: 191850.555 ops/s
# Warmup Iteration   7: 192963.765 ops/s
# Warmup Iteration   8: 191785.052 ops/s
# Warmup Iteration   9: 191487.708 ops/s
# Warmup Iteration  10: 191404.497 ops/s
# Warmup Iteration  11: 192212.800 ops/s
# Warmup Iteration  12: 191567.635 ops/s
# Warmup Iteration  13: 191060.051 ops/s
# Warmup Iteration  14: 191350.880 ops/s
# Warmup Iteration  15: 192175.712 ops/s
# Warmup Iteration  16: 190998.258 ops/s
# Warmup Iteration  17: 198720.057 ops/s
# Warmup Iteration  18: 200042.106 ops/s
# Warmup Iteration  19: 199218.959 ops/s
# Warmup Iteration  20: 199234.131 ops/s
# Warmup Iteration  21: 199176.264 ops/s
# Warmup Iteration  22: 198911.278 ops/s
# Warmup Iteration  23: 199731.269 ops/s
# Warmup Iteration  24: 198949.100 ops/s
# Warmup Iteration  25: 198452.337 ops/s
# Warmup Iteration  26: 199522.937 ops/s
# Warmup Iteration  27: 199147.306 ops/s
# Warmup Iteration  28: 198501.373 ops/s
# Warmup Iteration  29: 198488.915 ops/s
# Warmup Iteration  30: 199016.853 ops/s
Iteration   1: 199503.737 ops/s
Iteration   2: 198913.647 ops/s
Iteration   3: 199992.620 ops/s
Iteration   4: 198848.562 ops/s
Iteration   5: 198793.867 ops/s
Iteration   6: 199882.696 ops/s
Iteration   7: 197969.401 ops/s
Iteration   8: 199320.644 ops/s
Iteration   9: 198941.780 ops/s
Iteration  10: 197859.183 ops/s
Iteration  11: 198440.366 ops/s
Iteration  12: 198141.754 ops/s
Iteration  13: 195675.055 ops/s
Iteration  14: 195538.119 ops/s
Iteration  15: 198520.145 ops/s
Iteration  16: 199381.249 ops/s
Iteration  17: 199219.918 ops/s
Iteration  18: 198645.154 ops/s
Iteration  19: 199116.603 ops/s
Iteration  20: 199173.756 ops/s
Iteration  21: 199075.317 ops/s
Iteration  22: 199022.204 ops/s
Iteration  23: 199256.847 ops/s
Iteration  24: 199687.233 ops/s
Iteration  25: 198627.319 ops/s
Iteration  26: 199617.461 ops/s
Iteration  27: 200183.135 ops/s
Iteration  28: 198562.387 ops/s
Iteration  29: 198747.278 ops/s
Iteration  30: 199399.064 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile":
  198801.883 ±(99.9%) 690.162 ops/s [Average]
  (min, avg, max) = (195538.119, 198801.883, 200183.135), stdev = 1033.002
  CI (99.9%): [198111.721, 199492.045] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile  thrpt   30  198801.883 ± 690.162  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_unsafeChildOnNextThrowsSizeBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_unsafeChildOnNextThrowsSizeBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 140978.969 ops/s
# Warmup Iteration   2: 198033.467 ops/s
# Warmup Iteration   3: 190066.987 ops/s
# Warmup Iteration   4: 218849.563 ops/s
# Warmup Iteration   5: 222188.952 ops/s
# Warmup Iteration   6: 221084.353 ops/s
# Warmup Iteration   7: 221377.720 ops/s
# Warmup Iteration   8: 220167.603 ops/s
# Warmup Iteration   9: 222109.578 ops/s
# Warmup Iteration  10: 220497.927 ops/s
# Warmup Iteration  11: 220192.799 ops/s
# Warmup Iteration  12: 221043.475 ops/s
# Warmup Iteration  13: 219274.474 ops/s
# Warmup Iteration  14: 220799.971 ops/s
# Warmup Iteration  15: 219659.576 ops/s
# Warmup Iteration  16: 218970.796 ops/s
# Warmup Iteration  17: 223276.245 ops/s
# Warmup Iteration  18: 224465.214 ops/s
# Warmup Iteration  19: 222572.845 ops/s
# Warmup Iteration  20: 222388.952 ops/s
# Warmup Iteration  21: 222835.743 ops/s
# Warmup Iteration  22: 223693.123 ops/s
# Warmup Iteration  23: 225469.349 ops/s
# Warmup Iteration  24: 222437.752 ops/s
# Warmup Iteration  25: 222098.736 ops/s
# Warmup Iteration  26: 223260.133 ops/s
# Warmup Iteration  27: 223608.562 ops/s
# Warmup Iteration  28: 223758.650 ops/s
# Warmup Iteration  29: 223451.621 ops/s
# Warmup Iteration  30: 222273.669 ops/s
Iteration   1: 222171.424 ops/s
Iteration   2: 222327.277 ops/s
Iteration   3: 221790.047 ops/s
Iteration   4: 224705.583 ops/s
Iteration   5: 224815.932 ops/s
Iteration   6: 223835.859 ops/s
Iteration   7: 222201.682 ops/s
Iteration   8: 223501.106 ops/s
Iteration   9: 224979.001 ops/s
Iteration  10: 222824.696 ops/s
Iteration  11: 223440.905 ops/s
Iteration  12: 219413.677 ops/s
Iteration  13: 219828.999 ops/s
Iteration  14: 222371.434 ops/s
Iteration  15: 224473.449 ops/s
Iteration  16: 224287.503 ops/s
Iteration  17: 223483.012 ops/s
Iteration  18: 221858.743 ops/s
Iteration  19: 223252.941 ops/s
Iteration  20: 224533.442 ops/s
Iteration  21: 222598.665 ops/s
Iteration  22: 224588.969 ops/s
Iteration  23: 222241.077 ops/s
Iteration  24: 224078.884 ops/s
Iteration  25: 223776.948 ops/s
Iteration  26: 221730.618 ops/s
Iteration  27: 223820.164 ops/s
Iteration  28: 226355.322 ops/s
Iteration  29: 223744.760 ops/s
Iteration  30: 222239.223 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_unsafeChildOnNextThrowsSizeBound":
  223175.711 ±(99.9%) 995.692 ops/s [Average]
  (min, avg, max) = (219413.677, 223175.711, 226355.322), stdev = 1490.304
  CI (99.9%): [222180.020, 224171.403] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
FlowableReplayTest._Benchmark.benchmark_unsafeChildOnNextThrowsSizeBound  thrpt   30  223175.711 ± 995.692  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorSubscriberSwap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorSubscriberSwap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 798969.687 ops/s
# Warmup Iteration   2: 1169862.551 ops/s
# Warmup Iteration   3: 1435060.175 ops/s
# Warmup Iteration   4: 1441745.131 ops/s
# Warmup Iteration   5: 1445872.397 ops/s
# Warmup Iteration   6: 1469494.461 ops/s
# Warmup Iteration   7: 1441666.981 ops/s
# Warmup Iteration   8: 1446304.255 ops/s
# Warmup Iteration   9: 1445490.167 ops/s
# Warmup Iteration  10: 1448929.805 ops/s
# Warmup Iteration  11: 1446853.349 ops/s
# Warmup Iteration  12: 1456687.065 ops/s
# Warmup Iteration  13: 1461687.110 ops/s
# Warmup Iteration  14: 1435800.874 ops/s
# Warmup Iteration  15: 1452832.883 ops/s
# Warmup Iteration  16: 1449754.778 ops/s
# Warmup Iteration  17: 1444497.916 ops/s
# Warmup Iteration  18: 1426260.173 ops/s
# Warmup Iteration  19: 1436010.377 ops/s
# Warmup Iteration  20: 1438149.083 ops/s
# Warmup Iteration  21: 1437950.043 ops/s
# Warmup Iteration  22: 1440117.821 ops/s
# Warmup Iteration  23: 1440980.436 ops/s
# Warmup Iteration  24: 1430545.723 ops/s
# Warmup Iteration  25: 1438590.803 ops/s
# Warmup Iteration  26: 1451915.832 ops/s
# Warmup Iteration  27: 1434468.580 ops/s
# Warmup Iteration  28: 1443028.709 ops/s
# Warmup Iteration  29: 1426837.741 ops/s
# Warmup Iteration  30: 1453420.625 ops/s
Iteration   1: 1445101.684 ops/s
Iteration   2: 1438245.326 ops/s
Iteration   3: 1442598.054 ops/s
Iteration   4: 1456586.822 ops/s
Iteration   5: 1445455.653 ops/s
Iteration   6: 1441048.884 ops/s
Iteration   7: 1430645.314 ops/s
Iteration   8: 1452458.234 ops/s
Iteration   9: 1449770.238 ops/s
Iteration  10: 1433929.054 ops/s
Iteration  11: 1426931.029 ops/s
Iteration  12: 1417386.149 ops/s
Iteration  13: 1443053.226 ops/s
Iteration  14: 1445723.735 ops/s
Iteration  15: 1445368.354 ops/s
Iteration  16: 1449378.337 ops/s
Iteration  17: 1442390.366 ops/s
Iteration  18: 1453829.156 ops/s
Iteration  19: 1439134.885 ops/s
Iteration  20: 1438579.633 ops/s
Iteration  21: 1439877.664 ops/s
Iteration  22: 1441310.270 ops/s
Iteration  23: 1434173.262 ops/s
Iteration  24: 1441574.868 ops/s
Iteration  25: 1440990.382 ops/s
Iteration  26: 1461108.147 ops/s
Iteration  27: 1444451.562 ops/s
Iteration  28: 1441333.379 ops/s
Iteration  29: 1457119.787 ops/s
Iteration  30: 1455473.580 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorSubscriberSwap":
  1443167.568 ±(99.9%) 6197.620 ops/s [Average]
  (min, avg, max) = (1417386.149, 1443167.568, 1461108.147), stdev = 9276.306
  CI (99.9%): [1436969.948, 1449365.188] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_selectorSubscriberSwap  thrpt   30  1443167.568 ± 6197.620  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_fusedAsync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_fusedAsync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1033193.748 ops/s
# Warmup Iteration   2: 1561413.570 ops/s
# Warmup Iteration   3: 1763612.821 ops/s
# Warmup Iteration   4: 1773820.832 ops/s
# Warmup Iteration   5: 1753720.224 ops/s
# Warmup Iteration   6: 1746658.117 ops/s
# Warmup Iteration   7: 1750182.435 ops/s
# Warmup Iteration   8: 1747933.758 ops/s
# Warmup Iteration   9: 1758144.228 ops/s
# Warmup Iteration  10: 1771960.478 ops/s
# Warmup Iteration  11: 1751974.524 ops/s
# Warmup Iteration  12: 1774322.040 ops/s
# Warmup Iteration  13: 1765138.760 ops/s
# Warmup Iteration  14: 1764744.681 ops/s
# Warmup Iteration  15: 1774411.855 ops/s
# Warmup Iteration  16: 1766678.678 ops/s
# Warmup Iteration  17: 1762398.112 ops/s
# Warmup Iteration  18: 1783515.064 ops/s
# Warmup Iteration  19: 1770132.943 ops/s
# Warmup Iteration  20: 1779967.063 ops/s
# Warmup Iteration  21: 1763281.737 ops/s
# Warmup Iteration  22: 1751805.318 ops/s
# Warmup Iteration  23: 1770658.301 ops/s
# Warmup Iteration  24: 1766027.578 ops/s
# Warmup Iteration  25: 1739774.699 ops/s
# Warmup Iteration  26: 1765759.180 ops/s
# Warmup Iteration  27: 1753009.906 ops/s
# Warmup Iteration  28: 1768767.417 ops/s
# Warmup Iteration  29: 1746428.021 ops/s
# Warmup Iteration  30: 1765069.687 ops/s
Iteration   1: 1769246.791 ops/s
Iteration   2: 1766052.263 ops/s
Iteration   3: 1773314.204 ops/s
Iteration   4: 1778951.870 ops/s
Iteration   5: 1769222.597 ops/s
Iteration   6: 1766976.420 ops/s
Iteration   7: 1765746.847 ops/s
Iteration   8: 1764162.741 ops/s
Iteration   9: 1728144.566 ops/s
Iteration  10: 1710985.273 ops/s
Iteration  11: 1694483.211 ops/s
Iteration  12: 1756037.520 ops/s
Iteration  13: 1761038.712 ops/s
Iteration  14: 1762776.083 ops/s
Iteration  15: 1773341.973 ops/s
Iteration  16: 1757551.299 ops/s
Iteration  17: 1775409.470 ops/s
Iteration  18: 1792570.781 ops/s
Iteration  19: 1760933.733 ops/s
Iteration  20: 1782569.396 ops/s
Iteration  21: 1772237.168 ops/s
Iteration  22: 1771999.860 ops/s
Iteration  23: 1767319.083 ops/s
Iteration  24: 1784150.136 ops/s
Iteration  25: 1787229.410 ops/s
Iteration  26: 1755296.543 ops/s
Iteration  27: 1745981.922 ops/s
Iteration  28: 1767595.446 ops/s
Iteration  29: 1770741.008 ops/s
Iteration  30: 1769210.605 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_fusedAsync":
  1763375.898 ±(99.9%) 13801.953 ops/s [Average]
  (min, avg, max) = (1694483.211, 1763375.898, 1792570.781), stdev = 20658.115
  CI (99.9%): [1749573.945, 1777177.850] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_fusedAsync  thrpt   30  1763375.898 ± 13801.953  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48117.722 ops/s
# Warmup Iteration   2: 23514.695 ops/s
# Warmup Iteration   3: 24464.937 ops/s
# Warmup Iteration   4: 24734.791 ops/s
# Warmup Iteration   5: 24639.069 ops/s
# Warmup Iteration   6: 24622.343 ops/s
# Warmup Iteration   7: 24471.517 ops/s
# Warmup Iteration   8: 24325.630 ops/s
# Warmup Iteration   9: 23914.621 ops/s
# Warmup Iteration  10: 24998.798 ops/s
# Warmup Iteration  11: 25472.255 ops/s
# Warmup Iteration  12: 23676.135 ops/s
# Warmup Iteration  13: 24300.101 ops/s
# Warmup Iteration  14: 24483.632 ops/s
# Warmup Iteration  15: 25876.930 ops/s
# Warmup Iteration  16: 24714.028 ops/s
# Warmup Iteration  17: 24641.364 ops/s
# Warmup Iteration  18: 24440.838 ops/s
# Warmup Iteration  19: 24642.450 ops/s
# Warmup Iteration  20: 24643.689 ops/s
# Warmup Iteration  21: 23989.514 ops/s
# Warmup Iteration  22: 23833.360 ops/s
# Warmup Iteration  23: 24481.977 ops/s
# Warmup Iteration  24: 29352.484 ops/s
# Warmup Iteration  25: 27640.967 ops/s
# Warmup Iteration  26: 24557.753 ops/s
# Warmup Iteration  27: 24125.679 ops/s
# Warmup Iteration  28: 24013.238 ops/s
# Warmup Iteration  29: 24170.097 ops/s
# Warmup Iteration  30: 24514.894 ops/s
Iteration   1: 24350.225 ops/s
Iteration   2: 24713.702 ops/s
Iteration   3: 24540.705 ops/s
Iteration   4: 24575.827 ops/s
Iteration   5: 24743.652 ops/s
Iteration   6: 24024.367 ops/s
Iteration   7: 24100.220 ops/s
Iteration   8: 23304.280 ops/s
Iteration   9: 23254.874 ops/s
Iteration  10: 23078.290 ops/s
Iteration  11: 24223.743 ops/s
Iteration  12: 24438.322 ops/s
Iteration  13: 24720.694 ops/s
Iteration  14: 24261.714 ops/s
Iteration  15: 23968.159 ops/s
Iteration  16: 24577.346 ops/s
Iteration  17: 25106.244 ops/s
Iteration  18: 24200.397 ops/s
Iteration  19: 24311.820 ops/s
Iteration  20: 24634.782 ops/s
Iteration  21: 24051.108 ops/s
Iteration  22: 24070.312 ops/s
Iteration  23: 24804.820 ops/s
Iteration  24: 24285.050 ops/s
Iteration  25: 24417.795 ops/s
Iteration  26: 24359.850 ops/s
Iteration  27: 24383.158 ops/s
Iteration  28: 25022.939 ops/s
Iteration  29: 24585.671 ops/s
Iteration  30: 24371.654 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingFirst":
  24316.057 ±(99.9%) 312.761 ops/s [Average]
  (min, avg, max) = (23078.290, 24316.057, 25106.244), stdev = 468.126
  CI (99.9%): [24003.296, 24628.818] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt      Score     Error  Units
FlowableBlockingTest._Benchmark.benchmark_blockingFirst  thrpt   30  24316.057 ± 312.761  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelayTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelayTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7238130.551 ops/s
# Warmup Iteration   2: 10414105.797 ops/s
# Warmup Iteration   3: 11207114.887 ops/s
# Warmup Iteration   4: 11181561.001 ops/s
# Warmup Iteration   5: 11134900.047 ops/s
# Warmup Iteration   6: 11183780.155 ops/s
# Warmup Iteration   7: 11136305.177 ops/s
# Warmup Iteration   8: 11175531.738 ops/s
# Warmup Iteration   9: 11186350.361 ops/s
# Warmup Iteration  10: 11176107.832 ops/s
# Warmup Iteration  11: 11083345.606 ops/s
# Warmup Iteration  12: 11223181.999 ops/s
# Warmup Iteration  13: 11118809.689 ops/s
# Warmup Iteration  14: 11137989.503 ops/s
# Warmup Iteration  15: 11160594.242 ops/s
# Warmup Iteration  16: 11042552.190 ops/s
# Warmup Iteration  17: 11133033.547 ops/s
# Warmup Iteration  18: 11148543.526 ops/s
# Warmup Iteration  19: 11177684.317 ops/s
# Warmup Iteration  20: 11107169.868 ops/s
# Warmup Iteration  21: 11179011.595 ops/s
# Warmup Iteration  22: 11182195.467 ops/s
# Warmup Iteration  23: 11123870.729 ops/s
# Warmup Iteration  24: 11143239.509 ops/s
# Warmup Iteration  25: 11158054.384 ops/s
# Warmup Iteration  26: 11115796.451 ops/s
# Warmup Iteration  27: 11208177.998 ops/s
# Warmup Iteration  28: 11203618.923 ops/s
# Warmup Iteration  29: 11168683.720 ops/s
# Warmup Iteration  30: 11130874.303 ops/s
Iteration   1: 11161148.837 ops/s
Iteration   2: 11066440.535 ops/s
Iteration   3: 11072764.760 ops/s
Iteration   4: 11152642.015 ops/s
Iteration   5: 11101548.951 ops/s
Iteration   6: 11103814.685 ops/s
Iteration   7: 10909072.172 ops/s
Iteration   8: 10936308.306 ops/s
Iteration   9: 11001546.114 ops/s
Iteration  10: 11191050.708 ops/s
Iteration  11: 11202307.594 ops/s
Iteration  12: 11197665.832 ops/s
Iteration  13: 11191718.444 ops/s
Iteration  14: 11087109.711 ops/s
Iteration  15: 11087155.537 ops/s
Iteration  16: 11119517.537 ops/s
Iteration  17: 11099736.963 ops/s
Iteration  18: 11152858.753 ops/s
Iteration  19: 11075664.673 ops/s
Iteration  20: 11142343.417 ops/s
Iteration  21: 11153291.198 ops/s
Iteration  22: 11156813.915 ops/s
Iteration  23: 11112829.217 ops/s
Iteration  24: 11167455.818 ops/s
Iteration  25: 11148135.521 ops/s
Iteration  26: 11133488.940 ops/s
Iteration  27: 11135717.968 ops/s
Iteration  28: 11141961.967 ops/s
Iteration  29: 11097553.630 ops/s
Iteration  30: 11122681.192 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDelayTest._Benchmark.benchmark_disposed":
  11114078.164 ±(99.9%) 45714.129 ops/s [Average]
  (min, avg, max) = (10909072.172, 11114078.164, 11202307.594), stdev = 68422.762
  CI (99.9%): [11068364.034, 11159792.293] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
CompletableDelayTest._Benchmark.benchmark_disposed  thrpt   30  11114078.164 ± 45714.129  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1368251.553 ops/s
# Warmup Iteration   2: 1568967.881 ops/s
# Warmup Iteration   3: 1663653.912 ops/s
# Warmup Iteration   4: 1662160.765 ops/s
# Warmup Iteration   5: 1670913.250 ops/s
# Warmup Iteration   6: 1665034.275 ops/s
# Warmup Iteration   7: 1667903.541 ops/s
# Warmup Iteration   8: 1670801.024 ops/s
# Warmup Iteration   9: 1661067.368 ops/s
# Warmup Iteration  10: 1667049.199 ops/s
# Warmup Iteration  11: 1656500.333 ops/s
# Warmup Iteration  12: 1647442.508 ops/s
# Warmup Iteration  13: 1650309.879 ops/s
# Warmup Iteration  14: 1653916.599 ops/s
# Warmup Iteration  15: 1658784.774 ops/s
# Warmup Iteration  16: 1659878.030 ops/s
# Warmup Iteration  17: 1660542.697 ops/s
# Warmup Iteration  18: 1650615.244 ops/s
# Warmup Iteration  19: 1656529.713 ops/s
# Warmup Iteration  20: 1647610.801 ops/s
# Warmup Iteration  21: 1657494.019 ops/s
# Warmup Iteration  22: 1625941.460 ops/s
# Warmup Iteration  23: 1653025.583 ops/s
# Warmup Iteration  24: 1655360.081 ops/s
# Warmup Iteration  25: 1659629.410 ops/s
# Warmup Iteration  26: 1663162.366 ops/s
# Warmup Iteration  27: 1664387.049 ops/s
# Warmup Iteration  28: 1658869.076 ops/s
# Warmup Iteration  29: 1660396.389 ops/s
# Warmup Iteration  30: 1661158.659 ops/s
Iteration   1: 1652838.069 ops/s
Iteration   2: 1660681.981 ops/s
Iteration   3: 1665775.643 ops/s
Iteration   4: 1661022.506 ops/s
Iteration   5: 1653690.719 ops/s
Iteration   6: 1607490.051 ops/s
Iteration   7: 1630588.420 ops/s
Iteration   8: 1663867.109 ops/s
Iteration   9: 1666725.575 ops/s
Iteration  10: 1654092.346 ops/s
Iteration  11: 1650776.544 ops/s
Iteration  12: 1656852.828 ops/s
Iteration  13: 1659749.109 ops/s
Iteration  14: 1645314.687 ops/s
Iteration  15: 1657076.798 ops/s
Iteration  16: 1659646.143 ops/s
Iteration  17: 1658051.973 ops/s
Iteration  18: 1656679.202 ops/s
Iteration  19: 1659312.392 ops/s
Iteration  20: 1658128.965 ops/s
Iteration  21: 1656001.747 ops/s
Iteration  22: 1643551.888 ops/s
Iteration  23: 1656495.360 ops/s
Iteration  24: 1662028.719 ops/s
Iteration  25: 1665107.661 ops/s
Iteration  26: 1667368.342 ops/s
Iteration  27: 1666960.442 ops/s
Iteration  28: 1655350.090 ops/s
Iteration  29: 1665791.920 ops/s
Iteration  30: 1668808.070 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_empty":
  1656194.177 ±(99.9%) 8146.417 ops/s [Average]
  (min, avg, max) = (1607490.051, 1656194.177, 1668808.070), stdev = 12193.175
  CI (99.9%): [1648047.759, 1664340.594] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
MaybeTimeIntervalTest._Benchmark.benchmark_empty  thrpt   30  1656194.177 ± 8146.417  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1302212.116 ops/s
# Warmup Iteration   2: 1483936.104 ops/s
# Warmup Iteration   3: 1395060.967 ops/s
# Warmup Iteration   4: 1567836.819 ops/s
# Warmup Iteration   5: 1567313.292 ops/s
# Warmup Iteration   6: 1564112.850 ops/s
# Warmup Iteration   7: 1567607.867 ops/s
# Warmup Iteration   8: 1570138.814 ops/s
# Warmup Iteration   9: 1568210.924 ops/s
# Warmup Iteration  10: 1581397.438 ops/s
# Warmup Iteration  11: 1567187.236 ops/s
# Warmup Iteration  12: 1567361.758 ops/s
# Warmup Iteration  13: 1571346.760 ops/s
# Warmup Iteration  14: 1577074.901 ops/s
# Warmup Iteration  15: 1567974.519 ops/s
# Warmup Iteration  16: 1562970.268 ops/s
# Warmup Iteration  17: 1564652.173 ops/s
# Warmup Iteration  18: 1567255.541 ops/s
# Warmup Iteration  19: 1560687.536 ops/s
# Warmup Iteration  20: 1558354.417 ops/s
# Warmup Iteration  21: 1561889.979 ops/s
# Warmup Iteration  22: 1552941.049 ops/s
# Warmup Iteration  23: 1559572.764 ops/s
# Warmup Iteration  24: 1556767.676 ops/s
# Warmup Iteration  25: 1560208.897 ops/s
# Warmup Iteration  26: 1563679.067 ops/s
# Warmup Iteration  27: 1559056.529 ops/s
# Warmup Iteration  28: 1556766.775 ops/s
# Warmup Iteration  29: 1551259.002 ops/s
# Warmup Iteration  30: 1566770.518 ops/s
Iteration   1: 1570064.591 ops/s
Iteration   2: 1557815.895 ops/s
Iteration   3: 1558102.547 ops/s
Iteration   4: 1549627.658 ops/s
Iteration   5: 1539986.527 ops/s
Iteration   6: 1524646.793 ops/s
Iteration   7: 1550041.053 ops/s
Iteration   8: 1562112.334 ops/s
Iteration   9: 1562207.193 ops/s
Iteration  10: 1553988.093 ops/s
Iteration  11: 1560828.143 ops/s
Iteration  12: 1559445.696 ops/s
Iteration  13: 1555510.200 ops/s
Iteration  14: 1551230.035 ops/s
Iteration  15: 1562693.161 ops/s
Iteration  16: 1563023.553 ops/s
Iteration  17: 1568126.469 ops/s
Iteration  18: 1567126.451 ops/s
Iteration  19: 1564068.776 ops/s
Iteration  20: 1556679.951 ops/s
Iteration  21: 1555537.664 ops/s
Iteration  22: 1557279.933 ops/s
Iteration  23: 1562107.111 ops/s
Iteration  24: 1560467.615 ops/s
Iteration  25: 1554408.874 ops/s
Iteration  26: 1565180.602 ops/s
Iteration  27: 1560401.036 ops/s
Iteration  28: 1557283.953 ops/s
Iteration  29: 1560913.709 ops/s
Iteration  30: 1562122.288 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_just":
  1557767.597 ±(99.9%) 5851.626 ops/s [Average]
  (min, avg, max) = (1524646.793, 1557767.597, 1570064.591), stdev = 8758.438
  CI (99.9%): [1551915.971, 1563619.222] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
MaybeTimestampTest._Benchmark.benchmark_just  thrpt   30  1557767.597 ± 5851.626  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 733443.192 ops/s
# Warmup Iteration   2: 833831.482 ops/s
# Warmup Iteration   3: 811631.315 ops/s
# Warmup Iteration   4: 857994.255 ops/s
# Warmup Iteration   5: 863607.848 ops/s
# Warmup Iteration   6: 855956.022 ops/s
# Warmup Iteration   7: 850814.218 ops/s
# Warmup Iteration   8: 854931.050 ops/s
# Warmup Iteration   9: 860442.554 ops/s
# Warmup Iteration  10: 856261.866 ops/s
# Warmup Iteration  11: 857456.165 ops/s
# Warmup Iteration  12: 853573.836 ops/s
# Warmup Iteration  13: 855456.877 ops/s
# Warmup Iteration  14: 849257.812 ops/s
# Warmup Iteration  15: 856155.500 ops/s
# Warmup Iteration  16: 853627.916 ops/s
# Warmup Iteration  17: 853726.730 ops/s
# Warmup Iteration  18: 852744.824 ops/s
# Warmup Iteration  19: 849922.914 ops/s
# Warmup Iteration  20: 856194.441 ops/s
# Warmup Iteration  21: 853664.961 ops/s
# Warmup Iteration  22: 853698.113 ops/s
# Warmup Iteration  23: 851401.757 ops/s
# Warmup Iteration  24: 853116.729 ops/s
# Warmup Iteration  25: 853297.803 ops/s
# Warmup Iteration  26: 854964.224 ops/s
# Warmup Iteration  27: 853153.020 ops/s
# Warmup Iteration  28: 851597.516 ops/s
# Warmup Iteration  29: 849694.969 ops/s
# Warmup Iteration  30: 849301.214 ops/s
Iteration   1: 851439.357 ops/s
Iteration   2: 850809.597 ops/s
Iteration   3: 855665.174 ops/s
Iteration   4: 843721.919 ops/s
Iteration   5: 831986.052 ops/s
Iteration   6: 844061.971 ops/s
Iteration   7: 856679.333 ops/s
Iteration   8: 853591.227 ops/s
Iteration   9: 855020.369 ops/s
Iteration  10: 849415.500 ops/s
Iteration  11: 848962.380 ops/s
Iteration  12: 848835.668 ops/s
Iteration  13: 849760.996 ops/s
Iteration  14: 851660.268 ops/s
Iteration  15: 851552.079 ops/s
Iteration  16: 846713.318 ops/s
Iteration  17: 854869.725 ops/s
Iteration  18: 852085.050 ops/s
Iteration  19: 852000.263 ops/s
Iteration  20: 848282.415 ops/s
Iteration  21: 854753.964 ops/s
Iteration  22: 853133.778 ops/s
Iteration  23: 854725.709 ops/s
Iteration  24: 850708.841 ops/s
Iteration  25: 850472.451 ops/s
Iteration  26: 848352.428 ops/s
Iteration  27: 844830.750 ops/s
Iteration  28: 849550.434 ops/s
Iteration  29: 851174.552 ops/s
Iteration  30: 852196.667 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_just":
  850233.741 ±(99.9%) 3187.798 ops/s [Average]
  (min, avg, max) = (831986.052, 850233.741, 856679.333), stdev = 4771.346
  CI (99.9%): [847045.943, 853421.539] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
MaybeTimeIntervalTest._Benchmark.benchmark_just  thrpt   30  850233.741 ± 3187.798  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 912442.262 ops/s
# Warmup Iteration   2: 1243236.195 ops/s
# Warmup Iteration   3: 1514564.199 ops/s
# Warmup Iteration   4: 1639672.588 ops/s
# Warmup Iteration   5: 1855505.367 ops/s
# Warmup Iteration   6: 1862216.890 ops/s
# Warmup Iteration   7: 1844845.208 ops/s
# Warmup Iteration   8: 1857777.583 ops/s
# Warmup Iteration   9: 1852646.947 ops/s
# Warmup Iteration  10: 1852424.230 ops/s
# Warmup Iteration  11: 1855305.830 ops/s
# Warmup Iteration  12: 1862378.298 ops/s
# Warmup Iteration  13: 1853914.108 ops/s
# Warmup Iteration  14: 1847514.681 ops/s
# Warmup Iteration  15: 1843380.220 ops/s
# Warmup Iteration  16: 1854842.270 ops/s
# Warmup Iteration  17: 1863490.280 ops/s
# Warmup Iteration  18: 1858181.472 ops/s
# Warmup Iteration  19: 1864393.975 ops/s
# Warmup Iteration  20: 1859308.750 ops/s
# Warmup Iteration  21: 1871913.265 ops/s
# Warmup Iteration  22: 1865706.853 ops/s
# Warmup Iteration  23: 1859958.352 ops/s
# Warmup Iteration  24: 1869701.842 ops/s
# Warmup Iteration  25: 1871320.271 ops/s
# Warmup Iteration  26: 1865173.399 ops/s
# Warmup Iteration  27: 1866046.302 ops/s
# Warmup Iteration  28: 1873749.520 ops/s
# Warmup Iteration  29: 1860457.972 ops/s
# Warmup Iteration  30: 1866102.771 ops/s
Iteration   1: 1862507.791 ops/s
Iteration   2: 1854764.886 ops/s
Iteration   3: 1838143.777 ops/s
Iteration   4: 1836732.253 ops/s
Iteration   5: 1858701.525 ops/s
Iteration   6: 1867998.840 ops/s
Iteration   7: 1869251.859 ops/s
Iteration   8: 1866923.102 ops/s
Iteration   9: 1867595.223 ops/s
Iteration  10: 1862823.030 ops/s
Iteration  11: 1858747.689 ops/s
Iteration  12: 1861551.527 ops/s
Iteration  13: 1862775.903 ops/s
Iteration  14: 1870265.846 ops/s
Iteration  15: 1856970.752 ops/s
Iteration  16: 1866932.803 ops/s
Iteration  17: 1871983.015 ops/s
Iteration  18: 1846344.288 ops/s
Iteration  19: 1872334.278 ops/s
Iteration  20: 1845471.594 ops/s
Iteration  21: 1856860.748 ops/s
Iteration  22: 1877096.499 ops/s
Iteration  23: 1883304.141 ops/s
Iteration  24: 1866163.246 ops/s
Iteration  25: 1876342.508 ops/s
Iteration  26: 1872290.997 ops/s
Iteration  27: 1868360.693 ops/s
Iteration  28: 1862495.498 ops/s
Iteration  29: 1871609.180 ops/s
Iteration  30: 1867620.729 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_disposed":
  1863365.474 ±(99.9%) 7250.946 ops/s [Average]
  (min, avg, max) = (1836732.253, 1863365.474, 1883304.141), stdev = 10852.876
  CI (99.9%): [1856114.528, 1870616.420] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ObservableTimeoutTests._Benchmark.benchmark_disposed  thrpt   30  1863365.474 ± 7250.946  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_timedDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_timedDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28912.694 ops/s
# Warmup Iteration   2: 274784.580 ops/s
# Warmup Iteration   3: 363925.319 ops/s
# Warmup Iteration   4: 354281.903 ops/s
# Warmup Iteration   5: 406589.225 ops/s
# Warmup Iteration   6: 396757.050 ops/s
# Warmup Iteration   7: 397094.945 ops/s
# Warmup Iteration   8: 396158.460 ops/s
# Warmup Iteration   9: 394520.936 ops/s
# Warmup Iteration  10: 395417.726 ops/s
# Warmup Iteration  11: 393936.202 ops/s
# Warmup Iteration  12: 392643.024 ops/s
# Warmup Iteration  13: 393967.902 ops/s
# Warmup Iteration  14: 392924.320 ops/s
# Warmup Iteration  15: 394785.583 ops/s
# Warmup Iteration  16: 393748.412 ops/s
# Warmup Iteration  17: 394566.991 ops/s
# Warmup Iteration  18: 394239.364 ops/s
# Warmup Iteration  19: 394994.557 ops/s
# Warmup Iteration  20: 392625.944 ops/s
# Warmup Iteration  21: 395198.589 ops/s
# Warmup Iteration  22: 393224.056 ops/s
# Warmup Iteration  23: 393090.830 ops/s
# Warmup Iteration  24: 393138.125 ops/s
# Warmup Iteration  25: 394412.466 ops/s
# Warmup Iteration  26: 394665.175 ops/s
# Warmup Iteration  27: 392501.453 ops/s
# Warmup Iteration  28: 394978.851 ops/s
# Warmup Iteration  29: 393251.031 ops/s
# Warmup Iteration  30: 392870.092 ops/s
Iteration   1: 391451.232 ops/s
Iteration   2: 386841.908 ops/s
Iteration   3: 384523.055 ops/s
Iteration   4: 390607.672 ops/s
Iteration   5: 393375.836 ops/s
Iteration   6: 391002.903 ops/s
Iteration   7: 394717.966 ops/s
Iteration   8: 393615.303 ops/s
Iteration   9: 394493.940 ops/s
Iteration  10: 393252.039 ops/s
Iteration  11: 393723.232 ops/s
Iteration  12: 394855.700 ops/s
Iteration  13: 394079.194 ops/s
Iteration  14: 394797.957 ops/s
Iteration  15: 393678.102 ops/s
Iteration  16: 395556.156 ops/s
Iteration  17: 394421.133 ops/s
Iteration  18: 392940.302 ops/s
Iteration  19: 390949.010 ops/s
Iteration  20: 392955.067 ops/s
Iteration  21: 393939.876 ops/s
Iteration  22: 392092.408 ops/s
Iteration  23: 393220.303 ops/s
Iteration  24: 394401.257 ops/s
Iteration  25: 398010.871 ops/s
Iteration  26: 395148.814 ops/s
Iteration  27: 394966.231 ops/s
Iteration  28: 393915.979 ops/s
Iteration  29: 394148.234 ops/s
Iteration  30: 393259.058 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_timedDoubleOnSubscribe":
  393164.691 ±(99.9%) 1700.962 ops/s [Average]
  (min, avg, max) = (384523.055, 393164.691, 398010.871), stdev = 2545.919
  CI (99.9%): [391463.730, 394865.653] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableDebounceTest._Benchmark.benchmark_timedDoubleOnSubscribe  thrpt   30  393164.691 ± 1700.962  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 652043.490 ops/s
# Warmup Iteration   2: 1044534.217 ops/s
# Warmup Iteration   3: 1265871.686 ops/s
# Warmup Iteration   4: 1336728.973 ops/s
# Warmup Iteration   5: 1488990.411 ops/s
# Warmup Iteration   6: 1478822.312 ops/s
# Warmup Iteration   7: 1480326.648 ops/s
# Warmup Iteration   8: 1485690.508 ops/s
# Warmup Iteration   9: 1483821.297 ops/s
# Warmup Iteration  10: 1484788.931 ops/s
# Warmup Iteration  11: 1488687.369 ops/s
# Warmup Iteration  12: 1488032.780 ops/s
# Warmup Iteration  13: 1491393.831 ops/s
# Warmup Iteration  14: 1489314.151 ops/s
# Warmup Iteration  15: 1483091.138 ops/s
# Warmup Iteration  16: 1475611.067 ops/s
# Warmup Iteration  17: 1475335.770 ops/s
# Warmup Iteration  18: 1482760.050 ops/s
# Warmup Iteration  19: 1471503.319 ops/s
# Warmup Iteration  20: 1487466.724 ops/s
# Warmup Iteration  21: 1471448.678 ops/s
# Warmup Iteration  22: 1473962.040 ops/s
# Warmup Iteration  23: 1475272.335 ops/s
# Warmup Iteration  24: 1461741.958 ops/s
# Warmup Iteration  25: 1472018.535 ops/s
# Warmup Iteration  26: 1477107.199 ops/s
# Warmup Iteration  27: 1478770.441 ops/s
# Warmup Iteration  28: 1482365.627 ops/s
# Warmup Iteration  29: 1478998.466 ops/s
# Warmup Iteration  30: 1478208.173 ops/s
Iteration   1: 1453299.394 ops/s
Iteration   2: 1447865.745 ops/s
Iteration   3: 1461659.557 ops/s
Iteration   4: 1474289.249 ops/s
Iteration   5: 1479577.777 ops/s
Iteration   6: 1480247.982 ops/s
Iteration   7: 1475885.250 ops/s
Iteration   8: 1476698.110 ops/s
Iteration   9: 1472110.432 ops/s
Iteration  10: 1472152.402 ops/s
Iteration  11: 1486372.166 ops/s
Iteration  12: 1478011.626 ops/s
Iteration  13: 1485221.512 ops/s
Iteration  14: 1476906.953 ops/s
Iteration  15: 1482225.275 ops/s
Iteration  16: 1496137.882 ops/s
Iteration  17: 1480043.675 ops/s
Iteration  18: 1476275.199 ops/s
Iteration  19: 1479658.369 ops/s
Iteration  20: 1465710.961 ops/s
Iteration  21: 1486534.632 ops/s
Iteration  22: 1483875.546 ops/s
Iteration  23: 1479987.645 ops/s
Iteration  24: 1480551.919 ops/s
Iteration  25: 1478301.598 ops/s
Iteration  26: 1485578.795 ops/s
Iteration  27: 1471829.573 ops/s
Iteration  28: 1470657.292 ops/s
Iteration  29: 1475345.825 ops/s
Iteration  30: 1482363.045 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_disposed":
  1476512.513 ±(99.9%) 6493.978 ops/s [Average]
  (min, avg, max) = (1447865.745, 1476512.513, 1496137.882), stdev = 9719.881
  CI (99.9%): [1470018.535, 1483006.491] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
FlowableTimeoutTests._Benchmark.benchmark_disposed  thrpt   30  1476512.513 ± 6493.978  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32373.570 ops/s
# Warmup Iteration   2: 85965.982 ops/s
# Warmup Iteration   3: 87610.877 ops/s
# Warmup Iteration   4: 112391.646 ops/s
# Warmup Iteration   5: 111194.145 ops/s
# Warmup Iteration   6: 115998.714 ops/s
# Warmup Iteration   7: 112853.432 ops/s
# Warmup Iteration   8: 116704.778 ops/s
# Warmup Iteration   9: 112937.471 ops/s
# Warmup Iteration  10: 112619.763 ops/s
# Warmup Iteration  11: 114016.214 ops/s
# Warmup Iteration  12: 113760.126 ops/s
# Warmup Iteration  13: 115344.391 ops/s
# Warmup Iteration  14: 116275.097 ops/s
# Warmup Iteration  15: 114812.226 ops/s
# Warmup Iteration  16: 105814.393 ops/s
# Warmup Iteration  17: 117188.554 ops/s
# Warmup Iteration  18: 116405.283 ops/s
# Warmup Iteration  19: 118092.350 ops/s
# Warmup Iteration  20: 119211.701 ops/s
# Warmup Iteration  21: 118283.984 ops/s
# Warmup Iteration  22: 116775.577 ops/s
# Warmup Iteration  23: 118644.462 ops/s
# Warmup Iteration  24: 117685.778 ops/s
# Warmup Iteration  25: 118656.394 ops/s
# Warmup Iteration  26: 119922.089 ops/s
# Warmup Iteration  27: 118569.319 ops/s
# Warmup Iteration  28: 120315.100 ops/s
# Warmup Iteration  29: 117370.504 ops/s
# Warmup Iteration  30: 113149.158 ops/s
Iteration   1: 113217.200 ops/s
Iteration   2: 118986.707 ops/s
Iteration   3: 117682.953 ops/s
Iteration   4: 118939.539 ops/s
Iteration   5: 116572.003 ops/s
Iteration   6: 119541.545 ops/s
Iteration   7: 117597.242 ops/s
Iteration   8: 114710.823 ops/s
Iteration   9: 117517.570 ops/s
Iteration  10: 118512.632 ops/s
Iteration  11: 116828.430 ops/s
Iteration  12: 117520.628 ops/s
Iteration  13: 118829.507 ops/s
Iteration  14: 118512.811 ops/s
Iteration  15: 117744.654 ops/s
Iteration  16: 119012.925 ops/s
Iteration  17: 118443.140 ops/s
Iteration  18: 119852.127 ops/s
Iteration  19: 118484.751 ops/s
Iteration  20: 117239.824 ops/s
Iteration  21: 119269.787 ops/s
Iteration  22: 117516.260 ops/s
Iteration  23: 119500.763 ops/s
Iteration  24: 116984.754 ops/s
Iteration  25: 119032.593 ops/s
Iteration  26: 117688.578 ops/s
Iteration  27: 118306.496 ops/s
Iteration  28: 118871.704 ops/s
Iteration  29: 120829.366 ops/s
Iteration  30: 118513.915 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_badSource":
  118075.374 ±(99.9%) 992.939 ops/s [Average]
  (min, avg, max) = (113217.200, 118075.374, 120829.366), stdev = 1486.185
  CI (99.9%): [117082.435, 119068.314] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ObservableTimeoutTests._Benchmark.benchmark_badSource  thrpt   30  118075.374 ± 992.939  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_replaySizeAndTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_replaySizeAndTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 274371.714 ops/s
# Warmup Iteration   2: 365047.297 ops/s
# Warmup Iteration   3: 354664.883 ops/s
# Warmup Iteration   4: 377748.126 ops/s
# Warmup Iteration   5: 388225.576 ops/s
# Warmup Iteration   6: 388815.568 ops/s
# Warmup Iteration   7: 388957.103 ops/s
# Warmup Iteration   8: 388598.562 ops/s
# Warmup Iteration   9: 389029.343 ops/s
# Warmup Iteration  10: 389094.490 ops/s
# Warmup Iteration  11: 388938.907 ops/s
# Warmup Iteration  12: 386746.803 ops/s
# Warmup Iteration  13: 387838.841 ops/s
# Warmup Iteration  14: 387124.461 ops/s
# Warmup Iteration  15: 386313.936 ops/s
# Warmup Iteration  16: 388131.259 ops/s
# Warmup Iteration  17: 386647.211 ops/s
# Warmup Iteration  18: 387397.394 ops/s
# Warmup Iteration  19: 388337.528 ops/s
# Warmup Iteration  20: 386590.604 ops/s
# Warmup Iteration  21: 384345.784 ops/s
# Warmup Iteration  22: 385252.318 ops/s
# Warmup Iteration  23: 387386.964 ops/s
# Warmup Iteration  24: 386213.982 ops/s
# Warmup Iteration  25: 386562.478 ops/s
# Warmup Iteration  26: 384866.727 ops/s
# Warmup Iteration  27: 385180.329 ops/s
# Warmup Iteration  28: 384977.163 ops/s
# Warmup Iteration  29: 379965.624 ops/s
# Warmup Iteration  30: 378123.543 ops/s
Iteration   1: 380836.516 ops/s
Iteration   2: 385046.043 ops/s
Iteration   3: 386554.334 ops/s
Iteration   4: 386187.204 ops/s
Iteration   5: 386265.849 ops/s
Iteration   6: 385805.732 ops/s
Iteration   7: 386345.087 ops/s
Iteration   8: 389872.751 ops/s
Iteration   9: 386354.068 ops/s
Iteration  10: 387957.240 ops/s
Iteration  11: 386378.103 ops/s
Iteration  12: 387527.728 ops/s
Iteration  13: 386275.699 ops/s
Iteration  14: 386992.874 ops/s
Iteration  15: 385922.209 ops/s
Iteration  16: 385323.234 ops/s
Iteration  17: 384674.039 ops/s
Iteration  18: 386276.620 ops/s
Iteration  19: 385849.340 ops/s
Iteration  20: 386312.188 ops/s
Iteration  21: 387669.492 ops/s
Iteration  22: 385837.014 ops/s
Iteration  23: 385609.806 ops/s
Iteration  24: 385937.766 ops/s
Iteration  25: 385433.375 ops/s
Iteration  26: 386140.124 ops/s
Iteration  27: 385360.423 ops/s
Iteration  28: 385798.055 ops/s
Iteration  29: 385775.434 ops/s
Iteration  30: 385314.645 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_replaySizeAndTime":
  386054.433 ±(99.9%) 938.685 ops/s [Average]
  (min, avg, max) = (380836.516, 386054.433, 389872.751), stdev = 1404.980
  CI (99.9%): [385115.748, 386993.118] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
FlowableReplayTest._Benchmark.benchmark_replaySizeAndTime  thrpt   30  386054.433 ± 938.685  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_close$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_close

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 657063.048 ops/s
# Warmup Iteration   2: 1147411.612 ops/s
# Warmup Iteration   3: 1306223.680 ops/s
# Warmup Iteration   4: 1340807.476 ops/s
# Warmup Iteration   5: 1331976.562 ops/s
# Warmup Iteration   6: 1327577.170 ops/s
# Warmup Iteration   7: 1337735.449 ops/s
# Warmup Iteration   8: 1334718.083 ops/s
# Warmup Iteration   9: 1332347.956 ops/s
# Warmup Iteration  10: 1326242.049 ops/s
# Warmup Iteration  11: 1327646.546 ops/s
# Warmup Iteration  12: 1341415.324 ops/s
# Warmup Iteration  13: 1342516.334 ops/s
# Warmup Iteration  14: 1340427.423 ops/s
# Warmup Iteration  15: 1331917.421 ops/s
# Warmup Iteration  16: 1322478.704 ops/s
# Warmup Iteration  17: 1325336.409 ops/s
# Warmup Iteration  18: 1334568.548 ops/s
# Warmup Iteration  19: 1339390.112 ops/s
# Warmup Iteration  20: 1324408.659 ops/s
# Warmup Iteration  21: 1341770.809 ops/s
# Warmup Iteration  22: 1324084.283 ops/s
# Warmup Iteration  23: 1336202.882 ops/s
# Warmup Iteration  24: 1332137.404 ops/s
# Warmup Iteration  25: 1322158.880 ops/s
# Warmup Iteration  26: 1325667.679 ops/s
# Warmup Iteration  27: 1319652.520 ops/s
# Warmup Iteration  28: 1292223.382 ops/s
# Warmup Iteration  29: 1282309.514 ops/s
# Warmup Iteration  30: 1329338.999 ops/s
Iteration   1: 1342669.812 ops/s
Iteration   2: 1327099.164 ops/s
Iteration   3: 1342610.638 ops/s
Iteration   4: 1338855.581 ops/s
Iteration   5: 1339115.451 ops/s
Iteration   6: 1318469.636 ops/s
Iteration   7: 1322571.503 ops/s
Iteration   8: 1331573.237 ops/s
Iteration   9: 1330685.161 ops/s
Iteration  10: 1343381.160 ops/s
Iteration  11: 1332227.183 ops/s
Iteration  12: 1345608.202 ops/s
Iteration  13: 1336633.580 ops/s
Iteration  14: 1326466.123 ops/s
Iteration  15: 1334184.476 ops/s
Iteration  16: 1321215.738 ops/s
Iteration  17: 1338448.352 ops/s
Iteration  18: 1332214.670 ops/s
Iteration  19: 1344905.321 ops/s
Iteration  20: 1331830.251 ops/s
Iteration  21: 1324578.581 ops/s
Iteration  22: 1319566.244 ops/s
Iteration  23: 1328336.715 ops/s
Iteration  24: 1342670.014 ops/s
Iteration  25: 1326220.265 ops/s
Iteration  26: 1319248.867 ops/s
Iteration  27: 1329408.902 ops/s
Iteration  28: 1341720.488 ops/s
Iteration  29: 1335553.568 ops/s
Iteration  30: 1343015.800 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_close":
  1333036.156 ±(99.9%) 5622.781 ops/s [Average]
  (min, avg, max) = (1318469.636, 1333036.156, 1345608.202), stdev = 8415.914
  CI (99.9%): [1327413.375, 1338658.937] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ObservableBlockingStreamTest._Benchmark.benchmark_close  thrpt   30  1333036.156 ± 5622.781  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_close$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_close

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 672851.658 ops/s
# Warmup Iteration   2: 1171605.057 ops/s
# Warmup Iteration   3: 1328229.020 ops/s
# Warmup Iteration   4: 1337447.676 ops/s
# Warmup Iteration   5: 1332820.565 ops/s
# Warmup Iteration   6: 1327608.391 ops/s
# Warmup Iteration   7: 1311218.335 ops/s
# Warmup Iteration   8: 1310674.723 ops/s
# Warmup Iteration   9: 1335797.571 ops/s
# Warmup Iteration  10: 1329582.842 ops/s
# Warmup Iteration  11: 1328940.404 ops/s
# Warmup Iteration  12: 1332417.055 ops/s
# Warmup Iteration  13: 1334789.384 ops/s
# Warmup Iteration  14: 1334894.963 ops/s
# Warmup Iteration  15: 1331887.256 ops/s
# Warmup Iteration  16: 1324394.224 ops/s
# Warmup Iteration  17: 1325037.915 ops/s
# Warmup Iteration  18: 1334136.969 ops/s
# Warmup Iteration  19: 1322458.060 ops/s
# Warmup Iteration  20: 1333041.394 ops/s
# Warmup Iteration  21: 1315907.639 ops/s
# Warmup Iteration  22: 1333347.140 ops/s
# Warmup Iteration  23: 1328984.505 ops/s
# Warmup Iteration  24: 1318799.936 ops/s
# Warmup Iteration  25: 1320015.108 ops/s
# Warmup Iteration  26: 1311130.702 ops/s
# Warmup Iteration  27: 1281201.829 ops/s
# Warmup Iteration  28: 1283191.744 ops/s
# Warmup Iteration  29: 1317595.594 ops/s
# Warmup Iteration  30: 1327610.659 ops/s
Iteration   1: 1332614.627 ops/s
Iteration   2: 1321378.043 ops/s
Iteration   3: 1342744.374 ops/s
Iteration   4: 1333244.141 ops/s
Iteration   5: 1330304.231 ops/s
Iteration   6: 1322290.176 ops/s
Iteration   7: 1334645.690 ops/s
Iteration   8: 1341016.781 ops/s
Iteration   9: 1335594.409 ops/s
Iteration  10: 1312328.895 ops/s
Iteration  11: 1331386.948 ops/s
Iteration  12: 1331175.155 ops/s
Iteration  13: 1321870.559 ops/s
Iteration  14: 1332073.583 ops/s
Iteration  15: 1339254.299 ops/s
Iteration  16: 1327502.579 ops/s
Iteration  17: 1332184.174 ops/s
Iteration  18: 1336144.565 ops/s
Iteration  19: 1332097.939 ops/s
Iteration  20: 1327548.196 ops/s
Iteration  21: 1332445.623 ops/s
Iteration  22: 1332467.424 ops/s
Iteration  23: 1323789.728 ops/s
Iteration  24: 1326743.157 ops/s
Iteration  25: 1326125.636 ops/s
Iteration  26: 1328928.584 ops/s
Iteration  27: 1333740.093 ops/s
Iteration  28: 1336712.524 ops/s
Iteration  29: 1328800.332 ops/s
Iteration  30: 1318678.982 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_close":
  1330194.382 ±(99.9%) 4444.937 ops/s [Average]
  (min, avg, max) = (1312328.895, 1330194.382, 1342744.374), stdev = 6652.973
  CI (99.9%): [1325749.445, 1334639.318] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
FlowableBlockingStreamTest._Benchmark.benchmark_close  thrpt   30  1330194.382 ± 4444.937  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_callableCrashDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_callableCrashDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 371123.643 ops/s
# Warmup Iteration   2: 473905.978 ops/s
# Warmup Iteration   3: 537447.857 ops/s
# Warmup Iteration   4: 536803.118 ops/s
# Warmup Iteration   5: 534507.785 ops/s
# Warmup Iteration   6: 535767.675 ops/s
# Warmup Iteration   7: 534698.265 ops/s
# Warmup Iteration   8: 535132.763 ops/s
# Warmup Iteration   9: 530020.461 ops/s
# Warmup Iteration  10: 534250.701 ops/s
# Warmup Iteration  11: 531398.124 ops/s
# Warmup Iteration  12: 529603.215 ops/s
# Warmup Iteration  13: 534309.170 ops/s
# Warmup Iteration  14: 535749.708 ops/s
# Warmup Iteration  15: 533294.777 ops/s
# Warmup Iteration  16: 531978.035 ops/s
# Warmup Iteration  17: 551299.996 ops/s
# Warmup Iteration  18: 550490.416 ops/s
# Warmup Iteration  19: 551571.446 ops/s
# Warmup Iteration  20: 544503.507 ops/s
# Warmup Iteration  21: 552460.966 ops/s
# Warmup Iteration  22: 550077.236 ops/s
# Warmup Iteration  23: 551194.630 ops/s
# Warmup Iteration  24: 549521.378 ops/s
# Warmup Iteration  25: 546071.548 ops/s
# Warmup Iteration  26: 539793.588 ops/s
# Warmup Iteration  27: 542619.611 ops/s
# Warmup Iteration  28: 543434.628 ops/s
# Warmup Iteration  29: 551334.165 ops/s
# Warmup Iteration  30: 551469.061 ops/s
Iteration   1: 551097.479 ops/s
Iteration   2: 551071.184 ops/s
Iteration   3: 549425.834 ops/s
Iteration   4: 551669.923 ops/s
Iteration   5: 550636.959 ops/s
Iteration   6: 546914.721 ops/s
Iteration   7: 547686.338 ops/s
Iteration   8: 550689.043 ops/s
Iteration   9: 548928.257 ops/s
Iteration  10: 549347.304 ops/s
Iteration  11: 552529.169 ops/s
Iteration  12: 547688.530 ops/s
Iteration  13: 548641.865 ops/s
Iteration  14: 547985.555 ops/s
Iteration  15: 550817.406 ops/s
Iteration  16: 547229.158 ops/s
Iteration  17: 550149.470 ops/s
Iteration  18: 551131.311 ops/s
Iteration  19: 551426.947 ops/s
Iteration  20: 550079.136 ops/s
Iteration  21: 548307.608 ops/s
Iteration  22: 550750.148 ops/s
Iteration  23: 551133.400 ops/s
Iteration  24: 549651.353 ops/s
Iteration  25: 550259.214 ops/s
Iteration  26: 551420.692 ops/s
Iteration  27: 551050.162 ops/s
Iteration  28: 547200.347 ops/s
Iteration  29: 546260.030 ops/s
Iteration  30: 546793.774 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_callableCrashDelayError":
  549599.077 ±(99.9%) 1160.091 ops/s [Average]
  (min, avg, max) = (546260.030, 549599.077, 552529.169), stdev = 1736.370
  CI (99.9%): [548438.986, 550759.168] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_callableCrashDelayError  thrpt   30  549599.077 ± 1160.091  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerJustDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerJustDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2124293.086 ops/s
# Warmup Iteration   2: 3238150.197 ops/s
# Warmup Iteration   3: 3709501.392 ops/s
# Warmup Iteration   4: 3708391.205 ops/s
# Warmup Iteration   5: 3681415.803 ops/s
# Warmup Iteration   6: 3676597.485 ops/s
# Warmup Iteration   7: 3662859.656 ops/s
# Warmup Iteration   8: 3685453.770 ops/s
# Warmup Iteration   9: 3683438.579 ops/s
# Warmup Iteration  10: 3701603.073 ops/s
# Warmup Iteration  11: 3692248.125 ops/s
# Warmup Iteration  12: 3698053.902 ops/s
# Warmup Iteration  13: 3695051.627 ops/s
# Warmup Iteration  14: 3664051.600 ops/s
# Warmup Iteration  15: 3664039.193 ops/s
# Warmup Iteration  16: 3670791.365 ops/s
# Warmup Iteration  17: 3681422.200 ops/s
# Warmup Iteration  18: 3693626.243 ops/s
# Warmup Iteration  19: 3683043.921 ops/s
# Warmup Iteration  20: 3682691.343 ops/s
# Warmup Iteration  21: 3692734.790 ops/s
# Warmup Iteration  22: 3718641.944 ops/s
# Warmup Iteration  23: 3694641.538 ops/s
# Warmup Iteration  24: 3675947.642 ops/s
# Warmup Iteration  25: 3636597.321 ops/s
# Warmup Iteration  26: 3625490.052 ops/s
# Warmup Iteration  27: 3688967.816 ops/s
# Warmup Iteration  28: 3685133.520 ops/s
# Warmup Iteration  29: 3687406.363 ops/s
# Warmup Iteration  30: 3665449.668 ops/s
Iteration   1: 3676784.499 ops/s
Iteration   2: 3655762.689 ops/s
Iteration   3: 3690314.057 ops/s
Iteration   4: 3692264.290 ops/s
Iteration   5: 3672400.129 ops/s
Iteration   6: 3705929.191 ops/s
Iteration   7: 3691213.405 ops/s
Iteration   8: 3682740.567 ops/s
Iteration   9: 3701235.959 ops/s
Iteration  10: 3706539.712 ops/s
Iteration  11: 3689067.456 ops/s
Iteration  12: 3734034.286 ops/s
Iteration  13: 3694469.283 ops/s
Iteration  14: 3690009.823 ops/s
Iteration  15: 3677363.473 ops/s
Iteration  16: 3671203.259 ops/s
Iteration  17: 3687677.662 ops/s
Iteration  18: 3688459.397 ops/s
Iteration  19: 3700376.577 ops/s
Iteration  20: 3701633.850 ops/s
Iteration  21: 3694535.178 ops/s
Iteration  22: 3727029.555 ops/s
Iteration  23: 3690763.330 ops/s
Iteration  24: 3681679.194 ops/s
Iteration  25: 3704433.480 ops/s
Iteration  26: 3683110.639 ops/s
Iteration  27: 3696127.285 ops/s
Iteration  28: 3670222.828 ops/s
Iteration  29: 3699837.054 ops/s
Iteration  30: 3674474.694 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerJustDispose":
  3691056.427 ±(99.9%) 10775.537 ops/s [Average]
  (min, avg, max) = (3655762.689, 3691056.427, 3734034.286), stdev = 16128.318
  CI (99.9%): [3680280.889, 3701831.964] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerJustDispose  thrpt   30  3691056.427 ± 10775.537  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_drainMaxLoopDontAccept$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_drainMaxLoopDontAccept

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5341498.803 ops/s
# Warmup Iteration   2: 8870628.638 ops/s
# Warmup Iteration   3: 8636295.372 ops/s
# Warmup Iteration   4: 8626393.443 ops/s
# Warmup Iteration   5: 8734507.866 ops/s
# Warmup Iteration   6: 8629060.765 ops/s
# Warmup Iteration   7: 8854172.576 ops/s
# Warmup Iteration   8: 8804459.976 ops/s
# Warmup Iteration   9: 8745791.404 ops/s
# Warmup Iteration  10: 8517008.221 ops/s
# Warmup Iteration  11: 8454268.378 ops/s
# Warmup Iteration  12: 8684661.037 ops/s
# Warmup Iteration  13: 8560201.618 ops/s
# Warmup Iteration  14: 8621325.160 ops/s
# Warmup Iteration  15: 8642869.539 ops/s
# Warmup Iteration  16: 8534142.271 ops/s
# Warmup Iteration  17: 8827288.884 ops/s
# Warmup Iteration  18: 8722679.358 ops/s
# Warmup Iteration  19: 8787161.235 ops/s
# Warmup Iteration  20: 8794685.943 ops/s
# Warmup Iteration  21: 8890569.956 ops/s
# Warmup Iteration  22: 8647772.389 ops/s
# Warmup Iteration  23: 8585845.766 ops/s
# Warmup Iteration  24: 8474285.745 ops/s
# Warmup Iteration  25: 8590169.631 ops/s
# Warmup Iteration  26: 8787561.831 ops/s
# Warmup Iteration  27: 8856971.384 ops/s
# Warmup Iteration  28: 8829641.169 ops/s
# Warmup Iteration  29: 8837340.728 ops/s
# Warmup Iteration  30: 8706725.688 ops/s
Iteration   1: 8802842.538 ops/s
Iteration   2: 8778767.235 ops/s
Iteration   3: 8690041.740 ops/s
Iteration   4: 8784530.542 ops/s
Iteration   5: 8702135.706 ops/s
Iteration   6: 8742055.118 ops/s
Iteration   7: 8933079.314 ops/s
Iteration   8: 8858227.982 ops/s
Iteration   9: 8825391.940 ops/s
Iteration  10: 8853633.385 ops/s
Iteration  11: 8913172.041 ops/s
Iteration  12: 8801299.363 ops/s
Iteration  13: 8730070.099 ops/s
Iteration  14: 8901888.103 ops/s
Iteration  15: 8770858.380 ops/s
Iteration  16: 8766843.182 ops/s
Iteration  17: 8869313.441 ops/s
Iteration  18: 8800480.081 ops/s
Iteration  19: 8916273.190 ops/s
Iteration  20: 8715273.787 ops/s
Iteration  21: 8805548.424 ops/s
Iteration  22: 8783719.016 ops/s
Iteration  23: 8830116.340 ops/s
Iteration  24: 8837536.042 ops/s
Iteration  25: 8784060.764 ops/s
Iteration  26: 8855065.994 ops/s
Iteration  27: 8752086.949 ops/s
Iteration  28: 8833761.739 ops/s
Iteration  29: 8814188.674 ops/s
Iteration  30: 8671588.137 ops/s


Result "io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_drainMaxLoopDontAccept":
  8804128.308 ±(99.9%) 44971.182 ops/s [Average]
  (min, avg, max) = (8671588.137, 8804128.308, 8933079.314), stdev = 67310.753
  CI (99.9%): [8759157.126, 8849099.490] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
QueueDrainHelperTest._Benchmark.benchmark_drainMaxLoopDontAccept  thrpt   30  8804128.308 ± 44971.182  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerJustDisposeDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerJustDisposeDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1943429.062 ops/s
# Warmup Iteration   2: 3259907.603 ops/s
# Warmup Iteration   3: 3548152.290 ops/s
# Warmup Iteration   4: 3541727.055 ops/s
# Warmup Iteration   5: 3517825.640 ops/s
# Warmup Iteration   6: 3535516.166 ops/s
# Warmup Iteration   7: 3518015.192 ops/s
# Warmup Iteration   8: 3488939.505 ops/s
# Warmup Iteration   9: 3530188.649 ops/s
# Warmup Iteration  10: 3514447.534 ops/s
# Warmup Iteration  11: 3508673.301 ops/s
# Warmup Iteration  12: 3511980.321 ops/s
# Warmup Iteration  13: 3535318.365 ops/s
# Warmup Iteration  14: 3510362.345 ops/s
# Warmup Iteration  15: 3520073.559 ops/s
# Warmup Iteration  16: 3516840.653 ops/s
# Warmup Iteration  17: 3512836.506 ops/s
# Warmup Iteration  18: 3533979.053 ops/s
# Warmup Iteration  19: 3502816.592 ops/s
# Warmup Iteration  20: 3531464.881 ops/s
# Warmup Iteration  21: 3518925.376 ops/s
# Warmup Iteration  22: 3503268.600 ops/s
# Warmup Iteration  23: 3422488.699 ops/s
# Warmup Iteration  24: 3450901.821 ops/s
# Warmup Iteration  25: 3513952.643 ops/s
# Warmup Iteration  26: 3523651.049 ops/s
# Warmup Iteration  27: 3534516.625 ops/s
# Warmup Iteration  28: 3498063.792 ops/s
# Warmup Iteration  29: 3532362.603 ops/s
# Warmup Iteration  30: 3534286.736 ops/s
Iteration   1: 3507321.263 ops/s
Iteration   2: 3574519.210 ops/s
Iteration   3: 3535215.611 ops/s
Iteration   4: 3549928.684 ops/s
Iteration   5: 3501775.308 ops/s
Iteration   6: 3529335.657 ops/s
Iteration   7: 3535413.304 ops/s
Iteration   8: 3514609.293 ops/s
Iteration   9: 3525580.554 ops/s
Iteration  10: 3511176.714 ops/s
Iteration  11: 3524714.894 ops/s
Iteration  12: 3515152.692 ops/s
Iteration  13: 3532353.500 ops/s
Iteration  14: 3516981.650 ops/s
Iteration  15: 3510439.241 ops/s
Iteration  16: 3504797.658 ops/s
Iteration  17: 3516261.098 ops/s
Iteration  18: 3537531.602 ops/s
Iteration  19: 3507849.529 ops/s
Iteration  20: 3506202.090 ops/s
Iteration  21: 3523226.876 ops/s
Iteration  22: 3532718.423 ops/s
Iteration  23: 3543014.252 ops/s
Iteration  24: 3499777.586 ops/s
Iteration  25: 3495788.011 ops/s
Iteration  26: 3528141.541 ops/s
Iteration  27: 3510923.795 ops/s
Iteration  28: 3549949.301 ops/s
Iteration  29: 3559706.309 ops/s
Iteration  30: 3523206.612 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerJustDisposeDelayError":
  3524120.409 ±(99.9%) 12446.632 ops/s [Average]
  (min, avg, max) = (3495788.011, 3524120.409, 3574519.210), stdev = 18629.534
  CI (99.9%): [3511673.777, 3536567.040] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerJustDisposeDelayError  thrpt   30  3524120.409 ± 12446.632  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapScalarBackpressuredDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapScalarBackpressuredDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1636093.262 ops/s
# Warmup Iteration   2: 2547037.090 ops/s
# Warmup Iteration   3: 2884620.917 ops/s
# Warmup Iteration   4: 2870729.530 ops/s
# Warmup Iteration   5: 2887450.072 ops/s
# Warmup Iteration   6: 2888342.506 ops/s
# Warmup Iteration   7: 2875653.454 ops/s
# Warmup Iteration   8: 2874367.987 ops/s
# Warmup Iteration   9: 2865609.882 ops/s
# Warmup Iteration  10: 2862589.951 ops/s
# Warmup Iteration  11: 2857882.037 ops/s
# Warmup Iteration  12: 2851267.956 ops/s
# Warmup Iteration  13: 2866311.353 ops/s
# Warmup Iteration  14: 2867416.123 ops/s
# Warmup Iteration  15: 2868556.279 ops/s
# Warmup Iteration  16: 2884348.411 ops/s
# Warmup Iteration  17: 2872635.877 ops/s
# Warmup Iteration  18: 2851095.146 ops/s
# Warmup Iteration  19: 2872075.702 ops/s
# Warmup Iteration  20: 2865838.297 ops/s
# Warmup Iteration  21: 2825726.868 ops/s
# Warmup Iteration  22: 2790352.822 ops/s
# Warmup Iteration  23: 2847578.900 ops/s
# Warmup Iteration  24: 2868503.097 ops/s
# Warmup Iteration  25: 2857165.091 ops/s
# Warmup Iteration  26: 2873553.584 ops/s
# Warmup Iteration  27: 2857305.365 ops/s
# Warmup Iteration  28: 2850710.253 ops/s
# Warmup Iteration  29: 2874087.588 ops/s
# Warmup Iteration  30: 2861443.848 ops/s
Iteration   1: 2882950.050 ops/s
Iteration   2: 2864270.870 ops/s
Iteration   3: 2876902.883 ops/s
Iteration   4: 2873881.882 ops/s
Iteration   5: 2868015.712 ops/s
Iteration   6: 2863444.991 ops/s
Iteration   7: 2860033.455 ops/s
Iteration   8: 2858758.762 ops/s
Iteration   9: 2874283.602 ops/s
Iteration  10: 2856169.493 ops/s
Iteration  11: 2862178.744 ops/s
Iteration  12: 2852627.843 ops/s
Iteration  13: 2879136.197 ops/s
Iteration  14: 2861960.934 ops/s
Iteration  15: 2859592.454 ops/s
Iteration  16: 2871843.991 ops/s
Iteration  17: 2857959.692 ops/s
Iteration  18: 2859864.454 ops/s
Iteration  19: 2889055.304 ops/s
Iteration  20: 2889351.175 ops/s
Iteration  21: 2881963.838 ops/s
Iteration  22: 2852065.028 ops/s
Iteration  23: 2849804.912 ops/s
Iteration  24: 2873737.646 ops/s
Iteration  25: 2864209.579 ops/s
Iteration  26: 2867142.649 ops/s
Iteration  27: 2868440.654 ops/s
Iteration  28: 2863598.243 ops/s
Iteration  29: 2864032.525 ops/s
Iteration  30: 2848647.308 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapScalarBackpressuredDelayError":
  2866530.829 ±(99.9%) 7293.254 ops/s [Average]
  (min, avg, max) = (2848647.308, 2866530.829, 2889351.175), stdev = 10916.200
  CI (99.9%): [2859237.575, 2873824.083] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapScalarBackpressuredDelayError  thrpt   30  2866530.829 ± 7293.254  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_delayErrorBuffer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_delayErrorBuffer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 456347.473 ops/s
# Warmup Iteration   2: 650552.641 ops/s
# Warmup Iteration   3: 650536.665 ops/s
# Warmup Iteration   4: 735485.556 ops/s
# Warmup Iteration   5: 737415.245 ops/s
# Warmup Iteration   6: 739905.171 ops/s
# Warmup Iteration   7: 736931.701 ops/s
# Warmup Iteration   8: 736332.410 ops/s
# Warmup Iteration   9: 735330.772 ops/s
# Warmup Iteration  10: 732634.128 ops/s
# Warmup Iteration  11: 733488.980 ops/s
# Warmup Iteration  12: 728242.002 ops/s
# Warmup Iteration  13: 727454.826 ops/s
# Warmup Iteration  14: 727424.717 ops/s
# Warmup Iteration  15: 726821.186 ops/s
# Warmup Iteration  16: 730671.113 ops/s
# Warmup Iteration  17: 763335.193 ops/s
# Warmup Iteration  18: 757537.835 ops/s
# Warmup Iteration  19: 759482.704 ops/s
# Warmup Iteration  20: 749531.744 ops/s
# Warmup Iteration  21: 741460.799 ops/s
# Warmup Iteration  22: 749777.819 ops/s
# Warmup Iteration  23: 762145.218 ops/s
# Warmup Iteration  24: 759013.070 ops/s
# Warmup Iteration  25: 758094.906 ops/s
# Warmup Iteration  26: 760809.323 ops/s
# Warmup Iteration  27: 757445.963 ops/s
# Warmup Iteration  28: 761287.385 ops/s
# Warmup Iteration  29: 756286.493 ops/s
# Warmup Iteration  30: 756165.868 ops/s
Iteration   1: 755563.777 ops/s
Iteration   2: 763206.308 ops/s
Iteration   3: 758407.553 ops/s
Iteration   4: 761788.107 ops/s
Iteration   5: 760910.004 ops/s
Iteration   6: 764426.302 ops/s
Iteration   7: 757408.846 ops/s
Iteration   8: 760919.499 ops/s
Iteration   9: 757910.243 ops/s
Iteration  10: 764632.362 ops/s
Iteration  11: 758257.137 ops/s
Iteration  12: 757522.754 ops/s
Iteration  13: 762088.409 ops/s
Iteration  14: 762568.929 ops/s
Iteration  15: 765534.752 ops/s
Iteration  16: 759975.783 ops/s
Iteration  17: 760127.373 ops/s
Iteration  18: 759902.767 ops/s
Iteration  19: 761992.897 ops/s
Iteration  20: 758417.212 ops/s
Iteration  21: 758886.202 ops/s
Iteration  22: 762427.549 ops/s
Iteration  23: 764824.120 ops/s
Iteration  24: 765244.483 ops/s
Iteration  25: 757496.764 ops/s
Iteration  26: 757325.140 ops/s
Iteration  27: 761904.470 ops/s
Iteration  28: 762130.085 ops/s
Iteration  29: 761511.994 ops/s
Iteration  30: 761347.760 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_delayErrorBuffer":
  760821.986 ±(99.9%) 1798.305 ops/s [Average]
  (min, avg, max) = (755563.777, 760821.986, 765534.752), stdev = 2691.619
  CI (99.9%): [759023.681, 762620.291] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_delayErrorBuffer  thrpt   30  760821.986 ± 1798.305  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerErrorDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerErrorDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 511226.799 ops/s
# Warmup Iteration   2: 672685.531 ops/s
# Warmup Iteration   3: 669216.552 ops/s
# Warmup Iteration   4: 755485.608 ops/s
# Warmup Iteration   5: 758645.700 ops/s
# Warmup Iteration   6: 759488.157 ops/s
# Warmup Iteration   7: 758691.660 ops/s
# Warmup Iteration   8: 756457.967 ops/s
# Warmup Iteration   9: 762629.164 ops/s
# Warmup Iteration  10: 761114.714 ops/s
# Warmup Iteration  11: 758514.791 ops/s
# Warmup Iteration  12: 756606.303 ops/s
# Warmup Iteration  13: 754991.323 ops/s
# Warmup Iteration  14: 754085.629 ops/s
# Warmup Iteration  15: 754741.918 ops/s
# Warmup Iteration  16: 750462.307 ops/s
# Warmup Iteration  17: 785350.078 ops/s
# Warmup Iteration  18: 784240.323 ops/s
# Warmup Iteration  19: 774054.493 ops/s
# Warmup Iteration  20: 768377.386 ops/s
# Warmup Iteration  21: 779293.661 ops/s
# Warmup Iteration  22: 787779.340 ops/s
# Warmup Iteration  23: 787050.608 ops/s
# Warmup Iteration  24: 787953.047 ops/s
# Warmup Iteration  25: 781943.879 ops/s
# Warmup Iteration  26: 782879.276 ops/s
# Warmup Iteration  27: 787914.113 ops/s
# Warmup Iteration  28: 788930.889 ops/s
# Warmup Iteration  29: 790670.663 ops/s
# Warmup Iteration  30: 783133.711 ops/s
Iteration   1: 784580.516 ops/s
Iteration   2: 786381.418 ops/s
Iteration   3: 786756.033 ops/s
Iteration   4: 783623.266 ops/s
Iteration   5: 787860.138 ops/s
Iteration   6: 785019.747 ops/s
Iteration   7: 787237.207 ops/s
Iteration   8: 785497.338 ops/s
Iteration   9: 789431.688 ops/s
Iteration  10: 784288.101 ops/s
Iteration  11: 790432.142 ops/s
Iteration  12: 788261.987 ops/s
Iteration  13: 784005.705 ops/s
Iteration  14: 787310.942 ops/s
Iteration  15: 784471.735 ops/s
Iteration  16: 787640.799 ops/s
Iteration  17: 790923.762 ops/s
Iteration  18: 785714.205 ops/s
Iteration  19: 790969.140 ops/s
Iteration  20: 787776.552 ops/s
Iteration  21: 783492.158 ops/s
Iteration  22: 780036.417 ops/s
Iteration  23: 788733.743 ops/s
Iteration  24: 789697.354 ops/s
Iteration  25: 790526.023 ops/s
Iteration  26: 790085.585 ops/s
Iteration  27: 787979.079 ops/s
Iteration  28: 795526.323 ops/s
Iteration  29: 789825.084 ops/s
Iteration  30: 791320.607 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerErrorDelayError":
  787513.493 ±(99.9%) 2098.182 ops/s [Average]
  (min, avg, max) = (780036.417, 787513.493, 795526.323), stdev = 3140.460
  CI (99.9%): [785415.312, 789611.675] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerErrorDelayError  thrpt   30  787513.493 ± 2098.182  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSourceDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSourceDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 122758.100 ops/s
# Warmup Iteration   2: 177614.170 ops/s
# Warmup Iteration   3: 186552.692 ops/s
# Warmup Iteration   4: 202645.044 ops/s
# Warmup Iteration   5: 204170.250 ops/s
# Warmup Iteration   6: 203017.354 ops/s
# Warmup Iteration   7: 201797.242 ops/s
# Warmup Iteration   8: 203479.894 ops/s
# Warmup Iteration   9: 204277.607 ops/s
# Warmup Iteration  10: 204045.535 ops/s
# Warmup Iteration  11: 204013.924 ops/s
# Warmup Iteration  12: 203732.534 ops/s
# Warmup Iteration  13: 202891.081 ops/s
# Warmup Iteration  14: 202707.620 ops/s
# Warmup Iteration  15: 202504.313 ops/s
# Warmup Iteration  16: 201875.487 ops/s
# Warmup Iteration  17: 209736.748 ops/s
# Warmup Iteration  18: 206990.402 ops/s
# Warmup Iteration  19: 205017.530 ops/s
# Warmup Iteration  20: 208662.998 ops/s
# Warmup Iteration  21: 209942.174 ops/s
# Warmup Iteration  22: 209894.593 ops/s
# Warmup Iteration  23: 209930.747 ops/s
# Warmup Iteration  24: 208367.875 ops/s
# Warmup Iteration  25: 209878.761 ops/s
# Warmup Iteration  26: 209731.946 ops/s
# Warmup Iteration  27: 208908.723 ops/s
# Warmup Iteration  28: 208960.037 ops/s
# Warmup Iteration  29: 210388.741 ops/s
# Warmup Iteration  30: 210796.550 ops/s
Iteration   1: 209556.860 ops/s
Iteration   2: 210240.885 ops/s
Iteration   3: 210397.904 ops/s
Iteration   4: 209467.872 ops/s
Iteration   5: 209504.624 ops/s
Iteration   6: 209855.579 ops/s
Iteration   7: 209618.126 ops/s
Iteration   8: 209541.246 ops/s
Iteration   9: 209790.216 ops/s
Iteration  10: 208364.594 ops/s
Iteration  11: 209489.426 ops/s
Iteration  12: 209435.917 ops/s
Iteration  13: 210599.190 ops/s
Iteration  14: 210323.082 ops/s
Iteration  15: 210027.509 ops/s
Iteration  16: 210579.080 ops/s
Iteration  17: 209287.407 ops/s
Iteration  18: 210609.130 ops/s
Iteration  19: 210113.867 ops/s
Iteration  20: 210013.330 ops/s
Iteration  21: 211633.880 ops/s
Iteration  22: 210595.877 ops/s
Iteration  23: 210561.209 ops/s
Iteration  24: 209813.846 ops/s
Iteration  25: 210123.684 ops/s
Iteration  26: 208847.275 ops/s
Iteration  27: 210133.711 ops/s
Iteration  28: 210181.091 ops/s
Iteration  29: 210691.245 ops/s
Iteration  30: 208607.971 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSourceDelayError":
  209933.521 ±(99.9%) 453.464 ops/s [Average]
  (min, avg, max) = (208364.594, 209933.521, 211633.880), stdev = 678.724
  CI (99.9%): [209480.057, 210386.985] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score     Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSourceDelayError  thrpt   30  209933.521 ± 453.464  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_backpressureTwoConsumers$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_backpressureTwoConsumers

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 351152.649 ops/s
# Warmup Iteration   2: 615812.828 ops/s
# Warmup Iteration   3: 628984.060 ops/s
# Warmup Iteration   4: 700337.960 ops/s
# Warmup Iteration   5: 722774.522 ops/s
# Warmup Iteration   6: 720166.736 ops/s
# Warmup Iteration   7: 719146.646 ops/s
# Warmup Iteration   8: 719233.802 ops/s
# Warmup Iteration   9: 716338.978 ops/s
# Warmup Iteration  10: 717262.685 ops/s
# Warmup Iteration  11: 710348.041 ops/s
# Warmup Iteration  12: 715943.672 ops/s
# Warmup Iteration  13: 718293.728 ops/s
# Warmup Iteration  14: 717656.368 ops/s
# Warmup Iteration  15: 715947.000 ops/s
# Warmup Iteration  16: 708546.517 ops/s
# Warmup Iteration  17: 695645.618 ops/s
# Warmup Iteration  18: 691179.960 ops/s
# Warmup Iteration  19: 709977.498 ops/s
# Warmup Iteration  20: 713957.391 ops/s
# Warmup Iteration  21: 705646.259 ops/s
# Warmup Iteration  22: 708714.296 ops/s
# Warmup Iteration  23: 709666.304 ops/s
# Warmup Iteration  24: 704376.534 ops/s
# Warmup Iteration  25: 709101.170 ops/s
# Warmup Iteration  26: 707021.067 ops/s
# Warmup Iteration  27: 710773.557 ops/s
# Warmup Iteration  28: 707019.740 ops/s
# Warmup Iteration  29: 705998.012 ops/s
# Warmup Iteration  30: 708243.873 ops/s
Iteration   1: 711719.364 ops/s
Iteration   2: 711838.076 ops/s
Iteration   3: 712075.395 ops/s
Iteration   4: 707708.108 ops/s
Iteration   5: 714020.302 ops/s
Iteration   6: 707536.557 ops/s
Iteration   7: 708688.150 ops/s
Iteration   8: 713573.201 ops/s
Iteration   9: 713054.616 ops/s
Iteration  10: 710343.393 ops/s
Iteration  11: 706382.587 ops/s
Iteration  12: 710201.027 ops/s
Iteration  13: 709745.997 ops/s
Iteration  14: 704286.274 ops/s
Iteration  15: 707843.288 ops/s
Iteration  16: 707809.326 ops/s
Iteration  17: 714044.662 ops/s
Iteration  18: 709972.368 ops/s
Iteration  19: 708788.273 ops/s
Iteration  20: 704081.479 ops/s
Iteration  21: 708684.045 ops/s
Iteration  22: 709304.166 ops/s
Iteration  23: 709244.064 ops/s
Iteration  24: 708682.615 ops/s
Iteration  25: 711768.989 ops/s
Iteration  26: 707841.198 ops/s
Iteration  27: 705125.680 ops/s
Iteration  28: 707516.701 ops/s
Iteration  29: 707136.937 ops/s
Iteration  30: 706488.488 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_backpressureTwoConsumers":
  709183.511 ±(99.9%) 1810.569 ops/s [Average]
  (min, avg, max) = (704081.479, 709183.511, 714044.662), stdev = 2709.975
  CI (99.9%): [707372.941, 710994.080] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_backpressureTwoConsumers  thrpt   30  709183.511 ± 1810.569  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedDoesNotEmitErrorTwiceIfScanFunctionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedDoesNotEmitErrorTwiceIfScanFunctionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83535.587 ops/s
# Warmup Iteration   2: 133723.784 ops/s
# Warmup Iteration   3: 160308.812 ops/s
# Warmup Iteration   4: 161840.052 ops/s
# Warmup Iteration   5: 162319.491 ops/s
# Warmup Iteration   6: 162617.783 ops/s
# Warmup Iteration   7: 162190.774 ops/s
# Warmup Iteration   8: 162229.488 ops/s
# Warmup Iteration   9: 161695.151 ops/s
# Warmup Iteration  10: 161245.566 ops/s
# Warmup Iteration  11: 161698.709 ops/s
# Warmup Iteration  12: 162279.455 ops/s
# Warmup Iteration  13: 161365.282 ops/s
# Warmup Iteration  14: 159827.334 ops/s
# Warmup Iteration  15: 160723.118 ops/s
# Warmup Iteration  16: 154120.404 ops/s
# Warmup Iteration  17: 157297.035 ops/s
# Warmup Iteration  18: 162082.285 ops/s
# Warmup Iteration  19: 165206.257 ops/s
# Warmup Iteration  20: 166326.269 ops/s
# Warmup Iteration  21: 164715.529 ops/s
# Warmup Iteration  22: 164762.584 ops/s
# Warmup Iteration  23: 165710.266 ops/s
# Warmup Iteration  24: 165579.737 ops/s
# Warmup Iteration  25: 165762.254 ops/s
# Warmup Iteration  26: 164763.153 ops/s
# Warmup Iteration  27: 165330.366 ops/s
# Warmup Iteration  28: 164851.289 ops/s
# Warmup Iteration  29: 164746.141 ops/s
# Warmup Iteration  30: 165458.464 ops/s
Iteration   1: 164442.545 ops/s
Iteration   2: 163288.889 ops/s
Iteration   3: 164461.048 ops/s
Iteration   4: 166201.086 ops/s
Iteration   5: 165263.227 ops/s
Iteration   6: 165495.564 ops/s
Iteration   7: 166192.018 ops/s
Iteration   8: 166052.424 ops/s
Iteration   9: 164874.607 ops/s
Iteration  10: 165051.319 ops/s
Iteration  11: 164196.965 ops/s
Iteration  12: 165224.676 ops/s
Iteration  13: 165617.646 ops/s
Iteration  14: 166260.307 ops/s
Iteration  15: 164402.420 ops/s
Iteration  16: 164909.161 ops/s
Iteration  17: 165767.143 ops/s
Iteration  18: 163838.785 ops/s
Iteration  19: 164367.889 ops/s
Iteration  20: 165594.992 ops/s
Iteration  21: 165787.931 ops/s
Iteration  22: 165821.181 ops/s
Iteration  23: 165649.941 ops/s
Iteration  24: 166488.910 ops/s
Iteration  25: 165190.010 ops/s
Iteration  26: 165401.308 ops/s
Iteration  27: 165282.675 ops/s
Iteration  28: 165044.275 ops/s
Iteration  29: 165352.443 ops/s
Iteration  30: 166213.395 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedDoesNotEmitErrorTwiceIfScanFunctionThrows":
  165257.826 ±(99.9%) 517.076 ops/s [Average]
  (min, avg, max) = (163288.889, 165257.826, 166488.910), stdev = 773.936
  CI (99.9%): [164740.750, 165774.902] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score     Error  Units
FlowableScanTest._Benchmark.benchmark_scanWithSeedDoesNotEmitErrorTwiceIfScanFunctionThrows  thrpt   30  165257.826 ± 517.076  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_overflowQueueRefCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_overflowQueueRefCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 372737.633 ops/s
# Warmup Iteration   2: 552461.760 ops/s
# Warmup Iteration   3: 573558.437 ops/s
# Warmup Iteration   4: 610827.119 ops/s
# Warmup Iteration   5: 626026.708 ops/s
# Warmup Iteration   6: 625798.030 ops/s
# Warmup Iteration   7: 627549.997 ops/s
# Warmup Iteration   8: 625357.494 ops/s
# Warmup Iteration   9: 623100.614 ops/s
# Warmup Iteration  10: 619750.160 ops/s
# Warmup Iteration  11: 619851.984 ops/s
# Warmup Iteration  12: 620763.132 ops/s
# Warmup Iteration  13: 621748.813 ops/s
# Warmup Iteration  14: 619207.095 ops/s
# Warmup Iteration  15: 606204.693 ops/s
# Warmup Iteration  16: 609088.477 ops/s
# Warmup Iteration  17: 644640.328 ops/s
# Warmup Iteration  18: 645999.722 ops/s
# Warmup Iteration  19: 643047.890 ops/s
# Warmup Iteration  20: 643210.805 ops/s
# Warmup Iteration  21: 644365.252 ops/s
# Warmup Iteration  22: 645379.190 ops/s
# Warmup Iteration  23: 647065.116 ops/s
# Warmup Iteration  24: 647694.371 ops/s
# Warmup Iteration  25: 645574.471 ops/s
# Warmup Iteration  26: 644240.707 ops/s
# Warmup Iteration  27: 644803.093 ops/s
# Warmup Iteration  28: 647121.883 ops/s
# Warmup Iteration  29: 646154.438 ops/s
# Warmup Iteration  30: 645317.914 ops/s
Iteration   1: 646021.271 ops/s
Iteration   2: 646700.492 ops/s
Iteration   3: 645766.828 ops/s
Iteration   4: 642796.264 ops/s
Iteration   5: 643040.085 ops/s
Iteration   6: 644062.988 ops/s
Iteration   7: 646372.770 ops/s
Iteration   8: 645699.500 ops/s
Iteration   9: 644764.796 ops/s
Iteration  10: 647908.253 ops/s
Iteration  11: 649052.536 ops/s
Iteration  12: 646214.711 ops/s
Iteration  13: 647862.566 ops/s
Iteration  14: 646350.640 ops/s
Iteration  15: 646238.282 ops/s
Iteration  16: 645945.222 ops/s
Iteration  17: 646444.565 ops/s
Iteration  18: 648190.702 ops/s
Iteration  19: 648058.400 ops/s
Iteration  20: 644037.902 ops/s
Iteration  21: 645569.793 ops/s
Iteration  22: 643678.815 ops/s
Iteration  23: 644366.220 ops/s
Iteration  24: 643063.956 ops/s
Iteration  25: 645245.319 ops/s
Iteration  26: 640387.886 ops/s
Iteration  27: 650069.197 ops/s
Iteration  28: 643045.386 ops/s
Iteration  29: 647217.343 ops/s
Iteration  30: 645643.415 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_overflowQueueRefCount":
  645660.537 ±(99.9%) 1399.174 ops/s [Average]
  (min, avg, max) = (640387.886, 645660.537, 650069.197), stdev = 2094.217
  CI (99.9%): [644261.363, 647059.710] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_overflowQueueRefCount  thrpt   30  645660.537 ± 1399.174  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_invalidSpan$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_invalidSpan

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 646604.584 ops/s
# Warmup Iteration   2: 751059.281 ops/s
# Warmup Iteration   3: 785399.341 ops/s
# Warmup Iteration   4: 858129.588 ops/s
# Warmup Iteration   5: 854781.193 ops/s
# Warmup Iteration   6: 855582.351 ops/s
# Warmup Iteration   7: 857689.552 ops/s
# Warmup Iteration   8: 857640.314 ops/s
# Warmup Iteration   9: 856578.025 ops/s
# Warmup Iteration  10: 852631.520 ops/s
# Warmup Iteration  11: 848681.066 ops/s
# Warmup Iteration  12: 852942.152 ops/s
# Warmup Iteration  13: 849873.135 ops/s
# Warmup Iteration  14: 845676.281 ops/s
# Warmup Iteration  15: 840538.525 ops/s
# Warmup Iteration  16: 843933.303 ops/s
# Warmup Iteration  17: 898831.477 ops/s
# Warmup Iteration  18: 896484.909 ops/s
# Warmup Iteration  19: 893958.082 ops/s
# Warmup Iteration  20: 898187.003 ops/s
# Warmup Iteration  21: 898394.650 ops/s
# Warmup Iteration  22: 895069.557 ops/s
# Warmup Iteration  23: 891716.463 ops/s
# Warmup Iteration  24: 887839.948 ops/s
# Warmup Iteration  25: 893358.224 ops/s
# Warmup Iteration  26: 894576.303 ops/s
# Warmup Iteration  27: 898975.843 ops/s
# Warmup Iteration  28: 898024.719 ops/s
# Warmup Iteration  29: 895945.827 ops/s
# Warmup Iteration  30: 893596.795 ops/s
Iteration   1: 899166.197 ops/s
Iteration   2: 895786.122 ops/s
Iteration   3: 891635.566 ops/s
Iteration   4: 901661.765 ops/s
Iteration   5: 895168.504 ops/s
Iteration   6: 899710.103 ops/s
Iteration   7: 896040.548 ops/s
Iteration   8: 888711.574 ops/s
Iteration   9: 897607.529 ops/s
Iteration  10: 894426.414 ops/s
Iteration  11: 895597.475 ops/s
Iteration  12: 888945.969 ops/s
Iteration  13: 892813.858 ops/s
Iteration  14: 891502.507 ops/s
Iteration  15: 888870.650 ops/s
Iteration  16: 890102.177 ops/s
Iteration  17: 893225.036 ops/s
Iteration  18: 892311.909 ops/s
Iteration  19: 898795.965 ops/s
Iteration  20: 891160.783 ops/s
Iteration  21: 889655.282 ops/s
Iteration  22: 895704.854 ops/s
Iteration  23: 898823.494 ops/s
Iteration  24: 893290.607 ops/s
Iteration  25: 891148.852 ops/s
Iteration  26: 893813.906 ops/s
Iteration  27: 890833.662 ops/s
Iteration  28: 896289.539 ops/s
Iteration  29: 896017.228 ops/s
Iteration  30: 889257.599 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_invalidSpan":
  893935.856 ±(99.9%) 2420.537 ops/s [Average]
  (min, avg, max) = (888711.574, 893935.856, 901661.765), stdev = 3622.946
  CI (99.9%): [891515.319, 896356.393] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_invalidSpan  thrpt   30  893935.856 ± 2420.537  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6908380.924 ops/s
# Warmup Iteration   2: 9821982.972 ops/s
# Warmup Iteration   3: 10582336.231 ops/s
# Warmup Iteration   4: 10575565.740 ops/s
# Warmup Iteration   5: 10537834.660 ops/s
# Warmup Iteration   6: 10580297.922 ops/s
# Warmup Iteration   7: 10571243.696 ops/s
# Warmup Iteration   8: 10523533.893 ops/s
# Warmup Iteration   9: 10549167.642 ops/s
# Warmup Iteration  10: 10517807.503 ops/s
# Warmup Iteration  11: 10524713.001 ops/s
# Warmup Iteration  12: 10277442.588 ops/s
# Warmup Iteration  13: 10325241.701 ops/s
# Warmup Iteration  14: 10434572.353 ops/s
# Warmup Iteration  15: 10493634.445 ops/s
# Warmup Iteration  16: 10608608.756 ops/s
# Warmup Iteration  17: 10553096.055 ops/s
# Warmup Iteration  18: 10542358.864 ops/s
# Warmup Iteration  19: 10524944.427 ops/s
# Warmup Iteration  20: 10538952.887 ops/s
# Warmup Iteration  21: 10627644.108 ops/s
# Warmup Iteration  22: 10632759.172 ops/s
# Warmup Iteration  23: 10521774.240 ops/s
# Warmup Iteration  24: 10516276.352 ops/s
# Warmup Iteration  25: 10657400.289 ops/s
# Warmup Iteration  26: 10565286.774 ops/s
# Warmup Iteration  27: 10613769.617 ops/s
# Warmup Iteration  28: 10398299.807 ops/s
# Warmup Iteration  29: 10619310.692 ops/s
# Warmup Iteration  30: 10610497.908 ops/s
Iteration   1: 10597077.863 ops/s
Iteration   2: 10455392.435 ops/s
Iteration   3: 10536242.677 ops/s
Iteration   4: 10645866.624 ops/s
Iteration   5: 10613932.296 ops/s
Iteration   6: 10527612.748 ops/s
Iteration   7: 10524285.782 ops/s
Iteration   8: 10624117.299 ops/s
Iteration   9: 10597032.004 ops/s
Iteration  10: 10561247.645 ops/s
Iteration  11: 10545364.420 ops/s
Iteration  12: 10517748.104 ops/s
Iteration  13: 10673584.876 ops/s
Iteration  14: 10600097.453 ops/s
Iteration  15: 10561388.100 ops/s
Iteration  16: 10622416.178 ops/s
Iteration  17: 10563066.921 ops/s
Iteration  18: 10564600.910 ops/s
Iteration  19: 10551852.721 ops/s
Iteration  20: 10647221.749 ops/s
Iteration  21: 10585049.999 ops/s
Iteration  22: 10578179.639 ops/s
Iteration  23: 10573224.113 ops/s
Iteration  24: 10570197.856 ops/s
Iteration  25: 10528438.150 ops/s
Iteration  26: 10546189.784 ops/s
Iteration  27: 10568199.180 ops/s
Iteration  28: 10557059.465 ops/s
Iteration  29: 10562441.213 ops/s
Iteration  30: 10511144.606 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_empty":
  10570342.427 ±(99.9%) 30583.224 ops/s [Average]
  (min, avg, max) = (10455392.435, 10570342.427, 10673584.876), stdev = 45775.534
  CI (99.9%): [10539759.203, 10600925.651] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
MaybeUnsubscribeOnTest._Benchmark.benchmark_empty  thrpt   30  10570342.427 ± 30583.224  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_justSeconds$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_justSeconds

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1288186.648 ops/s
# Warmup Iteration   2: 1479002.274 ops/s
# Warmup Iteration   3: 1395389.119 ops/s
# Warmup Iteration   4: 1560910.932 ops/s
# Warmup Iteration   5: 1568100.735 ops/s
# Warmup Iteration   6: 1572023.311 ops/s
# Warmup Iteration   7: 1565082.781 ops/s
# Warmup Iteration   8: 1571109.476 ops/s
# Warmup Iteration   9: 1563519.228 ops/s
# Warmup Iteration  10: 1566352.864 ops/s
# Warmup Iteration  11: 1544195.372 ops/s
# Warmup Iteration  12: 1533682.996 ops/s
# Warmup Iteration  13: 1552958.233 ops/s
# Warmup Iteration  14: 1563721.730 ops/s
# Warmup Iteration  15: 1557802.716 ops/s
# Warmup Iteration  16: 1560233.834 ops/s
# Warmup Iteration  17: 1553281.663 ops/s
# Warmup Iteration  18: 1560566.686 ops/s
# Warmup Iteration  19: 1554345.760 ops/s
# Warmup Iteration  20: 1549068.506 ops/s
# Warmup Iteration  21: 1556026.305 ops/s
# Warmup Iteration  22: 1568017.045 ops/s
# Warmup Iteration  23: 1558334.328 ops/s
# Warmup Iteration  24: 1545541.846 ops/s
# Warmup Iteration  25: 1550650.976 ops/s
# Warmup Iteration  26: 1554856.047 ops/s
# Warmup Iteration  27: 1553919.885 ops/s
# Warmup Iteration  28: 1554641.922 ops/s
# Warmup Iteration  29: 1549059.901 ops/s
# Warmup Iteration  30: 1554145.832 ops/s
Iteration   1: 1552690.786 ops/s
Iteration   2: 1547572.551 ops/s
Iteration   3: 1562177.769 ops/s
Iteration   4: 1555226.818 ops/s
Iteration   5: 1552804.885 ops/s
Iteration   6: 1549064.933 ops/s
Iteration   7: 1558111.610 ops/s
Iteration   8: 1557016.210 ops/s
Iteration   9: 1546559.909 ops/s
Iteration  10: 1554436.515 ops/s
Iteration  11: 1558329.184 ops/s
Iteration  12: 1563496.632 ops/s
Iteration  13: 1557693.644 ops/s
Iteration  14: 1547667.462 ops/s
Iteration  15: 1545425.081 ops/s
Iteration  16: 1552222.807 ops/s
Iteration  17: 1557669.639 ops/s
Iteration  18: 1544028.702 ops/s
Iteration  19: 1552916.687 ops/s
Iteration  20: 1548679.527 ops/s
Iteration  21: 1556403.571 ops/s
Iteration  22: 1557282.345 ops/s
Iteration  23: 1555139.665 ops/s
Iteration  24: 1544963.290 ops/s
Iteration  25: 1553617.940 ops/s
Iteration  26: 1551464.717 ops/s
Iteration  27: 1552711.396 ops/s
Iteration  28: 1556281.961 ops/s
Iteration  29: 1550076.315 ops/s
Iteration  30: 1556719.975 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_justSeconds":
  1553281.751 ±(99.9%) 3330.742 ops/s [Average]
  (min, avg, max) = (1544028.702, 1553281.751, 1563496.632), stdev = 4985.298
  CI (99.9%): [1549951.009, 1556612.493] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
MaybeTimestampTest._Benchmark.benchmark_justSeconds  thrpt   30  1553281.751 ± 3330.742  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_justSeconds$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_justSeconds

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 737979.949 ops/s
# Warmup Iteration   2: 832536.187 ops/s
# Warmup Iteration   3: 810267.062 ops/s
# Warmup Iteration   4: 862275.692 ops/s
# Warmup Iteration   5: 860366.295 ops/s
# Warmup Iteration   6: 860918.339 ops/s
# Warmup Iteration   7: 860492.339 ops/s
# Warmup Iteration   8: 860130.679 ops/s
# Warmup Iteration   9: 851794.994 ops/s
# Warmup Iteration  10: 845170.997 ops/s
# Warmup Iteration  11: 845347.740 ops/s
# Warmup Iteration  12: 859212.685 ops/s
# Warmup Iteration  13: 852914.750 ops/s
# Warmup Iteration  14: 855287.830 ops/s
# Warmup Iteration  15: 857928.352 ops/s
# Warmup Iteration  16: 854017.418 ops/s
# Warmup Iteration  17: 856018.371 ops/s
# Warmup Iteration  18: 857174.844 ops/s
# Warmup Iteration  19: 851889.878 ops/s
# Warmup Iteration  20: 851528.609 ops/s
# Warmup Iteration  21: 847101.028 ops/s
# Warmup Iteration  22: 850737.227 ops/s
# Warmup Iteration  23: 854879.231 ops/s
# Warmup Iteration  24: 854631.028 ops/s
# Warmup Iteration  25: 850689.190 ops/s
# Warmup Iteration  26: 858964.818 ops/s
# Warmup Iteration  27: 849032.497 ops/s
# Warmup Iteration  28: 857848.676 ops/s
# Warmup Iteration  29: 850064.332 ops/s
# Warmup Iteration  30: 856320.997 ops/s
Iteration   1: 853615.747 ops/s
Iteration   2: 852101.738 ops/s
Iteration   3: 853388.801 ops/s
Iteration   4: 852595.443 ops/s
Iteration   5: 849393.455 ops/s
Iteration   6: 850065.081 ops/s
Iteration   7: 852855.052 ops/s
Iteration   8: 850717.137 ops/s
Iteration   9: 858766.502 ops/s
Iteration  10: 847199.999 ops/s
Iteration  11: 858480.440 ops/s
Iteration  12: 854909.039 ops/s
Iteration  13: 853644.311 ops/s
Iteration  14: 855300.477 ops/s
Iteration  15: 854676.173 ops/s
Iteration  16: 855182.617 ops/s
Iteration  17: 850726.228 ops/s
Iteration  18: 850911.968 ops/s
Iteration  19: 848469.237 ops/s
Iteration  20: 854417.225 ops/s
Iteration  21: 853202.625 ops/s
Iteration  22: 848031.993 ops/s
Iteration  23: 855618.202 ops/s
Iteration  24: 854781.431 ops/s
Iteration  25: 853920.739 ops/s
Iteration  26: 850779.062 ops/s
Iteration  27: 854533.116 ops/s
Iteration  28: 851085.573 ops/s
Iteration  29: 853655.634 ops/s
Iteration  30: 855558.803 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_justSeconds":
  852952.795 ±(99.9%) 1872.239 ops/s [Average]
  (min, avg, max) = (847199.999, 852952.795, 858766.502), stdev = 2802.279
  CI (99.9%): [851080.556, 854825.034] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
MaybeTimeIntervalTest._Benchmark.benchmark_justSeconds  thrpt   30  852952.795 ± 1872.239  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71084.929 ops/s
# Warmup Iteration   2: 150016.448 ops/s
# Warmup Iteration   3: 218176.953 ops/s
# Warmup Iteration   4: 214865.539 ops/s
# Warmup Iteration   5: 162207.103 ops/s
# Warmup Iteration   6: 222027.320 ops/s
# Warmup Iteration   7: 216031.393 ops/s
# Warmup Iteration   8: 221628.047 ops/s
# Warmup Iteration   9: 217019.623 ops/s
# Warmup Iteration  10: 199810.942 ops/s
# Warmup Iteration  11: 212152.251 ops/s
# Warmup Iteration  12: 221550.608 ops/s
# Warmup Iteration  13: 215283.924 ops/s
# Warmup Iteration  14: 221506.776 ops/s
# Warmup Iteration  15: 218083.524 ops/s
# Warmup Iteration  16: 216861.790 ops/s
# Warmup Iteration  17: 230819.149 ops/s
# Warmup Iteration  18: 216543.877 ops/s
# Warmup Iteration  19: 221939.199 ops/s
# Warmup Iteration  20: 214851.784 ops/s
# Warmup Iteration  21: 218529.749 ops/s
# Warmup Iteration  22: 197505.086 ops/s
# Warmup Iteration  23: 217865.413 ops/s
# Warmup Iteration  24: 218886.287 ops/s
# Warmup Iteration  25: 197911.789 ops/s
# Warmup Iteration  26: 197333.117 ops/s
# Warmup Iteration  27: 170032.818 ops/s
# Warmup Iteration  28: 196808.825 ops/s
# Warmup Iteration  29: 196020.315 ops/s
# Warmup Iteration  30: 222061.021 ops/s
Iteration   1: 230583.664 ops/s
Iteration   2: 223439.638 ops/s
Iteration   3: 226702.715 ops/s
Iteration   4: 226458.247 ops/s
Iteration   5: 220090.889 ops/s
Iteration   6: 222753.623 ops/s
Iteration   7: 229466.103 ops/s
Iteration   8: 220917.618 ops/s
Iteration   9: 226250.376 ops/s
Iteration  10: 225058.107 ops/s
Iteration  11: 222419.551 ops/s
Iteration  12: 224621.817 ops/s
Iteration  13: 226198.258 ops/s
Iteration  14: 227861.905 ops/s
Iteration  15: 224745.089 ops/s
Iteration  16: 219331.286 ops/s
Iteration  17: 224934.148 ops/s
Iteration  18: 223312.238 ops/s
Iteration  19: 223567.137 ops/s
Iteration  20: 208294.306 ops/s
Iteration  21: 201145.034 ops/s
Iteration  22: 201822.274 ops/s
Iteration  23: 219641.777 ops/s
Iteration  24: 167880.500 ops/s
Iteration  25: 211587.472 ops/s
Iteration  26: 218903.034 ops/s
Iteration  27: 225927.859 ops/s
Iteration  28: 221429.584 ops/s
Iteration  29: 221449.673 ops/s
Iteration  30: 223872.024 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedError":
  219688.865 ±(99.9%) 8073.315 ops/s [Average]
  (min, avg, max) = (167880.500, 219688.865, 230583.664), stdev = 12083.759
  CI (99.9%): [211615.549, 227762.180] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableTimeoutTests._Benchmark.benchmark_timedError  thrpt   30  219688.865 ± 8073.315  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 442746.478 ops/s
# Warmup Iteration   2: 561663.414 ops/s
# Warmup Iteration   3: 619963.430 ops/s
# Warmup Iteration   4: 622986.719 ops/s
# Warmup Iteration   5: 635290.937 ops/s
# Warmup Iteration   6: 630427.673 ops/s
# Warmup Iteration   7: 628577.625 ops/s
# Warmup Iteration   8: 618105.297 ops/s
# Warmup Iteration   9: 613110.966 ops/s
# Warmup Iteration  10: 619042.760 ops/s
# Warmup Iteration  11: 622851.773 ops/s
# Warmup Iteration  12: 623331.514 ops/s
# Warmup Iteration  13: 628528.264 ops/s
# Warmup Iteration  14: 626518.963 ops/s
# Warmup Iteration  15: 627004.365 ops/s
# Warmup Iteration  16: 626675.939 ops/s
# Warmup Iteration  17: 633051.279 ops/s
# Warmup Iteration  18: 638452.806 ops/s
# Warmup Iteration  19: 641032.755 ops/s
# Warmup Iteration  20: 636008.340 ops/s
# Warmup Iteration  21: 630686.069 ops/s
# Warmup Iteration  22: 635847.509 ops/s
# Warmup Iteration  23: 631895.020 ops/s
# Warmup Iteration  24: 634012.946 ops/s
# Warmup Iteration  25: 636278.884 ops/s
# Warmup Iteration  26: 635182.736 ops/s
# Warmup Iteration  27: 636203.595 ops/s
# Warmup Iteration  28: 629723.267 ops/s
# Warmup Iteration  29: 636729.725 ops/s
# Warmup Iteration  30: 636628.663 ops/s
Iteration   1: 637662.807 ops/s
Iteration   2: 637780.651 ops/s
Iteration   3: 637208.715 ops/s
Iteration   4: 637089.906 ops/s
Iteration   5: 636413.758 ops/s
Iteration   6: 635538.022 ops/s
Iteration   7: 637757.716 ops/s
Iteration   8: 636681.020 ops/s
Iteration   9: 636027.145 ops/s
Iteration  10: 635149.466 ops/s
Iteration  11: 637454.761 ops/s
Iteration  12: 635925.277 ops/s
Iteration  13: 634682.556 ops/s
Iteration  14: 632158.495 ops/s
Iteration  15: 634556.980 ops/s
Iteration  16: 637225.328 ops/s
Iteration  17: 637300.729 ops/s
Iteration  18: 634131.457 ops/s
Iteration  19: 635608.742 ops/s
Iteration  20: 637537.232 ops/s
Iteration  21: 635973.718 ops/s
Iteration  22: 639003.002 ops/s
Iteration  23: 639973.313 ops/s
Iteration  24: 638090.825 ops/s
Iteration  25: 636700.628 ops/s
Iteration  26: 639052.432 ops/s
Iteration  27: 632899.092 ops/s
Iteration  28: 636566.340 ops/s
Iteration  29: 637504.578 ops/s
Iteration  30: 633949.524 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_doubleOnSubscribe":
  636453.474 ±(99.9%) 1192.357 ops/s [Average]
  (min, avg, max) = (632158.495, 636453.474, 639973.313), stdev = 1784.664
  CI (99.9%): [635261.117, 637645.831] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableTakeLastTimedTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  636453.474 ± 1192.357  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normalMaxConcurrent1Backpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normalMaxConcurrent1Backpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 256063.002 ops/s
# Warmup Iteration   2: 380872.814 ops/s
# Warmup Iteration   3: 371811.794 ops/s
# Warmup Iteration   4: 409094.530 ops/s
# Warmup Iteration   5: 435197.133 ops/s
# Warmup Iteration   6: 434182.068 ops/s
# Warmup Iteration   7: 426749.615 ops/s
# Warmup Iteration   8: 428494.288 ops/s
# Warmup Iteration   9: 428975.363 ops/s
# Warmup Iteration  10: 429541.294 ops/s
# Warmup Iteration  11: 434222.893 ops/s
# Warmup Iteration  12: 431705.603 ops/s
# Warmup Iteration  13: 435190.033 ops/s
# Warmup Iteration  14: 428978.834 ops/s
# Warmup Iteration  15: 430317.438 ops/s
# Warmup Iteration  16: 429983.970 ops/s
# Warmup Iteration  17: 431717.407 ops/s
# Warmup Iteration  18: 435704.001 ops/s
# Warmup Iteration  19: 430941.777 ops/s
# Warmup Iteration  20: 430429.623 ops/s
# Warmup Iteration  21: 430143.324 ops/s
# Warmup Iteration  22: 428228.628 ops/s
# Warmup Iteration  23: 433509.221 ops/s
# Warmup Iteration  24: 430503.379 ops/s
# Warmup Iteration  25: 427192.954 ops/s
# Warmup Iteration  26: 429981.422 ops/s
# Warmup Iteration  27: 434117.275 ops/s
# Warmup Iteration  28: 428163.358 ops/s
# Warmup Iteration  29: 435752.730 ops/s
# Warmup Iteration  30: 429558.500 ops/s
Iteration   1: 427846.918 ops/s
Iteration   2: 427830.253 ops/s
Iteration   3: 434150.560 ops/s
Iteration   4: 430432.367 ops/s
Iteration   5: 432618.468 ops/s
Iteration   6: 430406.120 ops/s
Iteration   7: 431146.592 ops/s
Iteration   8: 431639.644 ops/s
Iteration   9: 430493.348 ops/s
Iteration  10: 429909.008 ops/s
Iteration  11: 428926.000 ops/s
Iteration  12: 431221.075 ops/s
Iteration  13: 432539.649 ops/s
Iteration  14: 431856.232 ops/s
Iteration  15: 430246.927 ops/s
Iteration  16: 429478.445 ops/s
Iteration  17: 430948.060 ops/s
Iteration  18: 428573.296 ops/s
Iteration  19: 433925.349 ops/s
Iteration  20: 429283.381 ops/s
Iteration  21: 428081.717 ops/s
Iteration  22: 431655.962 ops/s
Iteration  23: 428636.887 ops/s
Iteration  24: 434535.972 ops/s
Iteration  25: 435321.428 ops/s
Iteration  26: 432381.213 ops/s
Iteration  27: 425377.527 ops/s
Iteration  28: 428779.901 ops/s
Iteration  29: 430497.375 ops/s
Iteration  30: 430721.877 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normalMaxConcurrent1Backpressured":
  430648.718 ±(99.9%) 1486.743 ops/s [Average]
  (min, avg, max) = (425377.527, 430648.718, 435321.428), stdev = 2225.286
  CI (99.9%): [429161.976, 432135.461] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_normalMaxConcurrent1Backpressured  thrpt   30  430648.718 ± 1486.743  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_rebatchAndTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_rebatchAndTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1170551.135 ops/s
# Warmup Iteration   2: 1700368.015 ops/s
# Warmup Iteration   3: 1734126.455 ops/s
# Warmup Iteration   4: 1901859.941 ops/s
# Warmup Iteration   5: 1873820.976 ops/s
# Warmup Iteration   6: 1873363.764 ops/s
# Warmup Iteration   7: 1861539.766 ops/s
# Warmup Iteration   8: 1882075.429 ops/s
# Warmup Iteration   9: 1874689.307 ops/s
# Warmup Iteration  10: 1855736.847 ops/s
# Warmup Iteration  11: 1871772.286 ops/s
# Warmup Iteration  12: 1879644.141 ops/s
# Warmup Iteration  13: 1874109.246 ops/s
# Warmup Iteration  14: 1879859.127 ops/s
# Warmup Iteration  15: 1861482.171 ops/s
# Warmup Iteration  16: 1865458.696 ops/s
# Warmup Iteration  17: 1886839.312 ops/s
# Warmup Iteration  18: 1867776.387 ops/s
# Warmup Iteration  19: 1882580.889 ops/s
# Warmup Iteration  20: 1882857.039 ops/s
# Warmup Iteration  21: 1880528.294 ops/s
# Warmup Iteration  22: 1907920.173 ops/s
# Warmup Iteration  23: 1893193.356 ops/s
# Warmup Iteration  24: 1886170.599 ops/s
# Warmup Iteration  25: 1898389.695 ops/s
# Warmup Iteration  26: 1871485.364 ops/s
# Warmup Iteration  27: 1894277.708 ops/s
# Warmup Iteration  28: 1908280.673 ops/s
# Warmup Iteration  29: 1900142.781 ops/s
# Warmup Iteration  30: 1885825.977 ops/s
Iteration   1: 1893457.875 ops/s
Iteration   2: 1891220.451 ops/s
Iteration   3: 1887721.094 ops/s
Iteration   4: 1885137.722 ops/s
Iteration   5: 1879615.985 ops/s
Iteration   6: 1888729.260 ops/s
Iteration   7: 1895824.210 ops/s
Iteration   8: 1891073.064 ops/s
Iteration   9: 1878657.833 ops/s
Iteration  10: 1892992.724 ops/s
Iteration  11: 1868411.462 ops/s
Iteration  12: 1885270.261 ops/s
Iteration  13: 1876604.414 ops/s
Iteration  14: 1895811.426 ops/s
Iteration  15: 1888368.614 ops/s
Iteration  16: 1892987.122 ops/s
Iteration  17: 1874194.120 ops/s
Iteration  18: 1901587.886 ops/s
Iteration  19: 1895005.056 ops/s
Iteration  20: 1897409.008 ops/s
Iteration  21: 1883945.083 ops/s
Iteration  22: 1905955.829 ops/s
Iteration  23: 1880519.475 ops/s
Iteration  24: 1886108.116 ops/s
Iteration  25: 1889620.092 ops/s
Iteration  26: 1879079.390 ops/s
Iteration  27: 1888558.248 ops/s
Iteration  28: 1883601.392 ops/s
Iteration  29: 1882983.730 ops/s
Iteration  30: 1904356.152 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_rebatchAndTake":
  1888160.237 ±(99.9%) 5837.894 ops/s [Average]
  (min, avg, max) = (1868411.462, 1888160.237, 1905955.829), stdev = 8737.886
  CI (99.9%): [1882322.342, 1893998.131] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
FlowableGenerateTest._Benchmark.benchmark_rebatchAndTake  thrpt   30  1888160.237 ± 5837.894  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathRebatch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathRebatch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1240328.608 ops/s
# Warmup Iteration   2: 1850650.098 ops/s
# Warmup Iteration   3: 1945035.805 ops/s
# Warmup Iteration   4: 2108622.920 ops/s
# Warmup Iteration   5: 2082210.852 ops/s
# Warmup Iteration   6: 2067578.661 ops/s
# Warmup Iteration   7: 2075561.902 ops/s
# Warmup Iteration   8: 2092354.248 ops/s
# Warmup Iteration   9: 2091418.693 ops/s
# Warmup Iteration  10: 2094800.229 ops/s
# Warmup Iteration  11: 2108479.515 ops/s
# Warmup Iteration  12: 2103159.666 ops/s
# Warmup Iteration  13: 2117059.513 ops/s
# Warmup Iteration  14: 2101785.178 ops/s
# Warmup Iteration  15: 2093839.838 ops/s
# Warmup Iteration  16: 2107826.523 ops/s
# Warmup Iteration  17: 2070414.294 ops/s
# Warmup Iteration  18: 2108469.783 ops/s
# Warmup Iteration  19: 2082339.554 ops/s
# Warmup Iteration  20: 2077677.817 ops/s
# Warmup Iteration  21: 2098101.794 ops/s
# Warmup Iteration  22: 2084105.919 ops/s
# Warmup Iteration  23: 2084017.360 ops/s
# Warmup Iteration  24: 2098245.538 ops/s
# Warmup Iteration  25: 2108086.003 ops/s
# Warmup Iteration  26: 2092530.477 ops/s
# Warmup Iteration  27: 2073892.895 ops/s
# Warmup Iteration  28: 2093043.480 ops/s
# Warmup Iteration  29: 2074477.129 ops/s
# Warmup Iteration  30: 2103028.605 ops/s
Iteration   1: 2087555.883 ops/s
Iteration   2: 2085732.660 ops/s
Iteration   3: 2087684.046 ops/s
Iteration   4: 2094968.381 ops/s
Iteration   5: 2122280.330 ops/s
Iteration   6: 2093666.400 ops/s
Iteration   7: 2080665.502 ops/s
Iteration   8: 2101815.946 ops/s
Iteration   9: 2097098.198 ops/s
Iteration  10: 2089701.280 ops/s
Iteration  11: 2109734.359 ops/s
Iteration  12: 2077317.000 ops/s
Iteration  13: 2104484.957 ops/s
Iteration  14: 2089685.746 ops/s
Iteration  15: 2084717.042 ops/s
Iteration  16: 2092602.819 ops/s
Iteration  17: 2091722.863 ops/s
Iteration  18: 2071223.837 ops/s
Iteration  19: 2088085.766 ops/s
Iteration  20: 2113875.879 ops/s
Iteration  21: 2108178.419 ops/s
Iteration  22: 2098652.290 ops/s
Iteration  23: 2107631.818 ops/s
Iteration  24: 2097225.355 ops/s
Iteration  25: 2086874.674 ops/s
Iteration  26: 2095603.071 ops/s
Iteration  27: 2090511.734 ops/s
Iteration  28: 2090484.562 ops/s
Iteration  29: 2090817.188 ops/s
Iteration  30: 2089804.860 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathRebatch":
  2094013.429 ±(99.9%) 7275.138 ops/s [Average]
  (min, avg, max) = (2071223.837, 2094013.429, 2122280.330), stdev = 10889.084
  CI (99.9%): [2086738.291, 2101288.566] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathRebatch  thrpt   30  2094013.429 ± 7275.138  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalSlowPathRebatch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalSlowPathRebatch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1037103.121 ops/s
# Warmup Iteration   2: 1464142.173 ops/s
# Warmup Iteration   3: 1542101.081 ops/s
# Warmup Iteration   4: 1651750.006 ops/s
# Warmup Iteration   5: 1653935.706 ops/s
# Warmup Iteration   6: 1666460.607 ops/s
# Warmup Iteration   7: 1669600.337 ops/s
# Warmup Iteration   8: 1659182.879 ops/s
# Warmup Iteration   9: 1660287.238 ops/s
# Warmup Iteration  10: 1645077.576 ops/s
# Warmup Iteration  11: 1648294.718 ops/s
# Warmup Iteration  12: 1653820.355 ops/s
# Warmup Iteration  13: 1633591.351 ops/s
# Warmup Iteration  14: 1661179.306 ops/s
# Warmup Iteration  15: 1659443.447 ops/s
# Warmup Iteration  16: 1688547.981 ops/s
# Warmup Iteration  17: 1658270.933 ops/s
# Warmup Iteration  18: 1637751.244 ops/s
# Warmup Iteration  19: 1653531.909 ops/s
# Warmup Iteration  20: 1682114.359 ops/s
# Warmup Iteration  21: 1670107.366 ops/s
# Warmup Iteration  22: 1666986.866 ops/s
# Warmup Iteration  23: 1663838.294 ops/s
# Warmup Iteration  24: 1665873.096 ops/s
# Warmup Iteration  25: 1648764.229 ops/s
# Warmup Iteration  26: 1661910.211 ops/s
# Warmup Iteration  27: 1660179.081 ops/s
# Warmup Iteration  28: 1642262.183 ops/s
# Warmup Iteration  29: 1667313.316 ops/s
# Warmup Iteration  30: 1662899.108 ops/s
Iteration   1: 1674370.217 ops/s
Iteration   2: 1642757.793 ops/s
Iteration   3: 1665276.477 ops/s
Iteration   4: 1661878.352 ops/s
Iteration   5: 1653879.468 ops/s
Iteration   6: 1642425.933 ops/s
Iteration   7: 1657458.552 ops/s
Iteration   8: 1672528.416 ops/s
Iteration   9: 1662186.770 ops/s
Iteration  10: 1668411.516 ops/s
Iteration  11: 1648582.387 ops/s
Iteration  12: 1648396.885 ops/s
Iteration  13: 1667932.176 ops/s
Iteration  14: 1659234.906 ops/s
Iteration  15: 1671573.692 ops/s
Iteration  16: 1657048.293 ops/s
Iteration  17: 1664217.865 ops/s
Iteration  18: 1668637.416 ops/s
Iteration  19: 1669712.412 ops/s
Iteration  20: 1672979.900 ops/s
Iteration  21: 1646538.001 ops/s
Iteration  22: 1692623.524 ops/s
Iteration  23: 1673200.766 ops/s
Iteration  24: 1660113.487 ops/s
Iteration  25: 1653112.598 ops/s
Iteration  26: 1659478.864 ops/s
Iteration  27: 1646036.870 ops/s
Iteration  28: 1673438.121 ops/s
Iteration  29: 1662606.245 ops/s
Iteration  30: 1657408.677 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalSlowPathRebatch":
  1661801.553 ±(99.9%) 7552.712 ops/s [Average]
  (min, avg, max) = (1642425.933, 1661801.553, 1692623.524), stdev = 11304.545
  CI (99.9%): [1654248.841, 1669354.265] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
FlowableRangeTest._Benchmark.benchmark_conditionalSlowPathRebatch  thrpt   30  1661801.553 ± 7552.712  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_conditionalMoreWorkInRunAsync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_conditionalMoreWorkInRunAsync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 990187.060 ops/s
# Warmup Iteration   2: 2001242.194 ops/s
# Warmup Iteration   3: 2191192.784 ops/s
# Warmup Iteration   4: 2171352.520 ops/s
# Warmup Iteration   5: 2252776.486 ops/s
# Warmup Iteration   6: 2257722.012 ops/s
# Warmup Iteration   7: 2259339.536 ops/s
# Warmup Iteration   8: 2261176.074 ops/s
# Warmup Iteration   9: 2257224.656 ops/s
# Warmup Iteration  10: 2259271.959 ops/s
# Warmup Iteration  11: 2263438.528 ops/s
# Warmup Iteration  12: 2260349.058 ops/s
# Warmup Iteration  13: 2258809.011 ops/s
# Warmup Iteration  14: 2272657.477 ops/s
# Warmup Iteration  15: 2247558.927 ops/s
# Warmup Iteration  16: 2246971.170 ops/s
# Warmup Iteration  17: 2284203.512 ops/s
# Warmup Iteration  18: 2265903.662 ops/s
# Warmup Iteration  19: 2268475.907 ops/s
# Warmup Iteration  20: 2269945.601 ops/s
# Warmup Iteration  21: 2255338.028 ops/s
# Warmup Iteration  22: 2254601.805 ops/s
# Warmup Iteration  23: 2266856.726 ops/s
# Warmup Iteration  24: 2264167.441 ops/s
# Warmup Iteration  25: 2268444.130 ops/s
# Warmup Iteration  26: 2279757.099 ops/s
# Warmup Iteration  27: 2268223.717 ops/s
# Warmup Iteration  28: 2270595.948 ops/s
# Warmup Iteration  29: 2248481.039 ops/s
# Warmup Iteration  30: 2258213.312 ops/s
Iteration   1: 2270953.372 ops/s
Iteration   2: 2249615.195 ops/s
Iteration   3: 2270557.802 ops/s
Iteration   4: 2264208.390 ops/s
Iteration   5: 2262727.171 ops/s
Iteration   6: 2263396.318 ops/s
Iteration   7: 2290058.765 ops/s
Iteration   8: 2262495.660 ops/s
Iteration   9: 2263893.607 ops/s
Iteration  10: 2265222.027 ops/s
Iteration  11: 2277246.077 ops/s
Iteration  12: 2270689.898 ops/s
Iteration  13: 2283492.054 ops/s
Iteration  14: 2269800.453 ops/s
Iteration  15: 2253715.711 ops/s
Iteration  16: 2245172.007 ops/s
Iteration  17: 2259350.991 ops/s
Iteration  18: 2274693.460 ops/s
Iteration  19: 2258963.894 ops/s
Iteration  20: 2258946.746 ops/s
Iteration  21: 2272752.807 ops/s
Iteration  22: 2254317.107 ops/s
Iteration  23: 2281295.400 ops/s
Iteration  24: 2276218.789 ops/s
Iteration  25: 2277830.252 ops/s
Iteration  26: 2258651.478 ops/s
Iteration  27: 2263450.645 ops/s
Iteration  28: 2278320.415 ops/s
Iteration  29: 2278790.312 ops/s
Iteration  30: 2268367.602 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_conditionalMoreWorkInRunAsync":
  2267506.480 ±(99.9%) 6993.019 ops/s [Average]
  (min, avg, max) = (2245172.007, 2267506.480, 2290058.765), stdev = 10466.823
  CI (99.9%): [2260513.461, 2274499.499] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
FlowableObserveOnTest._Benchmark.benchmark_conditionalMoreWorkInRunAsync  thrpt   30  2267506.480 ± 6993.019  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapMultipleRequests$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapMultipleRequests

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 94133.108 ops/s
# Warmup Iteration   2: 143799.122 ops/s
# Warmup Iteration   3: 172860.894 ops/s
# Warmup Iteration   4: 182451.374 ops/s
# Warmup Iteration   5: 181044.027 ops/s
# Warmup Iteration   6: 181771.842 ops/s
# Warmup Iteration   7: 179153.167 ops/s
# Warmup Iteration   8: 181295.158 ops/s
# Warmup Iteration   9: 181445.190 ops/s
# Warmup Iteration  10: 182178.729 ops/s
# Warmup Iteration  11: 182300.195 ops/s
# Warmup Iteration  12: 181872.191 ops/s
# Warmup Iteration  13: 183435.371 ops/s
# Warmup Iteration  14: 182148.168 ops/s
# Warmup Iteration  15: 181688.567 ops/s
# Warmup Iteration  16: 183232.989 ops/s
# Warmup Iteration  17: 181117.178 ops/s
# Warmup Iteration  18: 182118.949 ops/s
# Warmup Iteration  19: 179750.227 ops/s
# Warmup Iteration  20: 180291.344 ops/s
# Warmup Iteration  21: 180818.473 ops/s
# Warmup Iteration  22: 182557.766 ops/s
# Warmup Iteration  23: 179976.087 ops/s
# Warmup Iteration  24: 182340.160 ops/s
# Warmup Iteration  25: 181174.369 ops/s
# Warmup Iteration  26: 180577.148 ops/s
# Warmup Iteration  27: 182098.861 ops/s
# Warmup Iteration  28: 181357.538 ops/s
# Warmup Iteration  29: 181364.383 ops/s
# Warmup Iteration  30: 182013.753 ops/s
Iteration   1: 180863.385 ops/s
Iteration   2: 179499.472 ops/s
Iteration   3: 183508.754 ops/s
Iteration   4: 181655.039 ops/s
Iteration   5: 179469.062 ops/s
Iteration   6: 180734.022 ops/s
Iteration   7: 182802.031 ops/s
Iteration   8: 180166.739 ops/s
Iteration   9: 181030.456 ops/s
Iteration  10: 180303.839 ops/s
Iteration  11: 181277.895 ops/s
Iteration  12: 182429.594 ops/s
Iteration  13: 183424.677 ops/s
Iteration  14: 181681.174 ops/s
Iteration  15: 181457.382 ops/s
Iteration  16: 181230.752 ops/s
Iteration  17: 180563.851 ops/s
Iteration  18: 180453.885 ops/s
Iteration  19: 182758.604 ops/s
Iteration  20: 181925.898 ops/s
Iteration  21: 180319.764 ops/s
Iteration  22: 180123.655 ops/s
Iteration  23: 180747.382 ops/s
Iteration  24: 181503.878 ops/s
Iteration  25: 179864.025 ops/s
Iteration  26: 182242.546 ops/s
Iteration  27: 183356.294 ops/s
Iteration  28: 179953.591 ops/s
Iteration  29: 180622.904 ops/s
Iteration  30: 182098.083 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapMultipleRequests":
  181268.954 ±(99.9%) 776.848 ops/s [Average]
  (min, avg, max) = (179469.062, 181268.954, 183508.754), stdev = 1162.749
  CI (99.9%): [180492.107, 182045.802] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score     Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_overlapMultipleRequests  thrpt   30  181268.954 ± 776.848  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_backFusedConditionalMoreWork$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_backFusedConditionalMoreWork

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1052032.431 ops/s
# Warmup Iteration   2: 1934844.107 ops/s
# Warmup Iteration   3: 2282677.319 ops/s
# Warmup Iteration   4: 2273284.558 ops/s
# Warmup Iteration   5: 2282850.535 ops/s
# Warmup Iteration   6: 2285709.712 ops/s
# Warmup Iteration   7: 2255738.071 ops/s
# Warmup Iteration   8: 2277967.067 ops/s
# Warmup Iteration   9: 2272266.284 ops/s
# Warmup Iteration  10: 2279710.660 ops/s
# Warmup Iteration  11: 2303102.463 ops/s
# Warmup Iteration  12: 2269244.959 ops/s
# Warmup Iteration  13: 2280839.108 ops/s
# Warmup Iteration  14: 2281311.363 ops/s
# Warmup Iteration  15: 2307169.117 ops/s
# Warmup Iteration  16: 2285468.545 ops/s
# Warmup Iteration  17: 2284784.624 ops/s
# Warmup Iteration  18: 2288281.302 ops/s
# Warmup Iteration  19: 2284230.978 ops/s
# Warmup Iteration  20: 2298966.197 ops/s
# Warmup Iteration  21: 2291419.173 ops/s
# Warmup Iteration  22: 2291393.332 ops/s
# Warmup Iteration  23: 2279707.842 ops/s
# Warmup Iteration  24: 2266198.168 ops/s
# Warmup Iteration  25: 2290318.214 ops/s
# Warmup Iteration  26: 2297943.094 ops/s
# Warmup Iteration  27: 2280451.197 ops/s
# Warmup Iteration  28: 2275332.308 ops/s
# Warmup Iteration  29: 2286965.596 ops/s
# Warmup Iteration  30: 2276447.125 ops/s
Iteration   1: 2289465.816 ops/s
Iteration   2: 2284566.686 ops/s
Iteration   3: 2306386.648 ops/s
Iteration   4: 2288214.438 ops/s
Iteration   5: 2295137.786 ops/s
Iteration   6: 2288971.448 ops/s
Iteration   7: 2277548.726 ops/s
Iteration   8: 2282661.199 ops/s
Iteration   9: 2268011.126 ops/s
Iteration  10: 2262395.721 ops/s
Iteration  11: 2294552.971 ops/s
Iteration  12: 2295678.412 ops/s
Iteration  13: 2289028.111 ops/s
Iteration  14: 2287592.850 ops/s
Iteration  15: 2298690.388 ops/s
Iteration  16: 2294138.625 ops/s
Iteration  17: 2287445.849 ops/s
Iteration  18: 2302161.409 ops/s
Iteration  19: 2293318.106 ops/s
Iteration  20: 2287449.874 ops/s
Iteration  21: 2284465.313 ops/s
Iteration  22: 2280531.655 ops/s
Iteration  23: 2291161.959 ops/s
Iteration  24: 2288587.635 ops/s
Iteration  25: 2282620.650 ops/s
Iteration  26: 2248596.024 ops/s
Iteration  27: 2282090.632 ops/s
Iteration  28: 2272633.549 ops/s
Iteration  29: 2278769.328 ops/s
Iteration  30: 2232438.825 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_backFusedConditionalMoreWork":
  2283843.725 ±(99.9%) 10129.866 ops/s [Average]
  (min, avg, max) = (2232438.825, 2283843.725, 2306386.648), stdev = 15161.907
  CI (99.9%): [2273713.860, 2293973.591] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_backFusedConditionalMoreWork  thrpt   30  2283843.725 ± 10129.866  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1333554.626 ops/s
# Warmup Iteration   2: 2029385.956 ops/s
# Warmup Iteration   3: 2285120.606 ops/s
# Warmup Iteration   4: 2281033.846 ops/s
# Warmup Iteration   5: 2299400.564 ops/s
# Warmup Iteration   6: 2289030.420 ops/s
# Warmup Iteration   7: 2303232.245 ops/s
# Warmup Iteration   8: 2300644.110 ops/s
# Warmup Iteration   9: 2301197.014 ops/s
# Warmup Iteration  10: 2293099.924 ops/s
# Warmup Iteration  11: 2274323.499 ops/s
# Warmup Iteration  12: 2281430.111 ops/s
# Warmup Iteration  13: 2291108.881 ops/s
# Warmup Iteration  14: 2289457.565 ops/s
# Warmup Iteration  15: 2285019.201 ops/s
# Warmup Iteration  16: 2309391.733 ops/s
# Warmup Iteration  17: 2275623.234 ops/s
# Warmup Iteration  18: 2287155.307 ops/s
# Warmup Iteration  19: 2275823.800 ops/s
# Warmup Iteration  20: 2298873.935 ops/s
# Warmup Iteration  21: 2278840.939 ops/s
# Warmup Iteration  22: 2265686.449 ops/s
# Warmup Iteration  23: 2302697.167 ops/s
# Warmup Iteration  24: 2281950.851 ops/s
# Warmup Iteration  25: 2282651.673 ops/s
# Warmup Iteration  26: 2264991.540 ops/s
# Warmup Iteration  27: 2265711.865 ops/s
# Warmup Iteration  28: 2259540.552 ops/s
# Warmup Iteration  29: 2271109.305 ops/s
# Warmup Iteration  30: 2287050.102 ops/s
Iteration   1: 2291868.253 ops/s
Iteration   2: 2285754.636 ops/s
Iteration   3: 2273210.757 ops/s
Iteration   4: 2285680.994 ops/s
Iteration   5: 2284882.694 ops/s
Iteration   6: 2274364.694 ops/s
Iteration   7: 2281239.378 ops/s
Iteration   8: 2280280.921 ops/s
Iteration   9: 2286013.829 ops/s
Iteration  10: 2274795.393 ops/s
Iteration  11: 2261975.252 ops/s
Iteration  12: 2282460.683 ops/s
Iteration  13: 2285653.221 ops/s
Iteration  14: 2258680.798 ops/s
Iteration  15: 2280450.979 ops/s
Iteration  16: 2273575.324 ops/s
Iteration  17: 2282087.953 ops/s
Iteration  18: 2268037.007 ops/s
Iteration  19: 2289730.697 ops/s
Iteration  20: 2296612.323 ops/s
Iteration  21: 2292113.262 ops/s
Iteration  22: 2292090.022 ops/s
Iteration  23: 2279569.256 ops/s
Iteration  24: 2287919.374 ops/s
Iteration  25: 2293272.712 ops/s
Iteration  26: 2278600.803 ops/s
Iteration  27: 2262227.520 ops/s
Iteration  28: 2240611.900 ops/s
Iteration  29: 2190840.895 ops/s
Iteration  30: 2141272.144 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_dispose":
  2271862.456 ±(99.9%) 21258.031 ops/s [Average]
  (min, avg, max) = (2141272.144, 2271862.456, 2296612.323), stdev = 31818.023
  CI (99.9%): [2250604.425, 2293120.487] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
FlowableScanTest._Benchmark.benchmark_dispose  thrpt   30  2271862.456 ± 21258.031  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticastTest._Benchmark.benchmark_fusionRejectedInput$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticastTest._Benchmark.benchmark_fusionRejectedInput

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1555444.126 ops/s
# Warmup Iteration   2: 2234614.050 ops/s
# Warmup Iteration   3: 2499979.421 ops/s
# Warmup Iteration   4: 2512905.697 ops/s
# Warmup Iteration   5: 2508203.136 ops/s
# Warmup Iteration   6: 2506960.413 ops/s
# Warmup Iteration   7: 2501679.812 ops/s
# Warmup Iteration   8: 2521319.826 ops/s
# Warmup Iteration   9: 2518743.217 ops/s
# Warmup Iteration  10: 2495843.244 ops/s
# Warmup Iteration  11: 2510387.147 ops/s
# Warmup Iteration  12: 2505507.142 ops/s
# Warmup Iteration  13: 2507102.619 ops/s
# Warmup Iteration  14: 2507908.143 ops/s
# Warmup Iteration  15: 2484086.751 ops/s
# Warmup Iteration  16: 2491438.298 ops/s
# Warmup Iteration  17: 2527191.921 ops/s
# Warmup Iteration  18: 2525885.044 ops/s
# Warmup Iteration  19: 2517490.741 ops/s
# Warmup Iteration  20: 2515917.779 ops/s
# Warmup Iteration  21: 2533521.435 ops/s
# Warmup Iteration  22: 2533209.107 ops/s
# Warmup Iteration  23: 2516217.266 ops/s
# Warmup Iteration  24: 2521756.896 ops/s
# Warmup Iteration  25: 2537580.553 ops/s
# Warmup Iteration  26: 2533700.872 ops/s
# Warmup Iteration  27: 2535668.432 ops/s
# Warmup Iteration  28: 2498667.268 ops/s
# Warmup Iteration  29: 2541206.478 ops/s
# Warmup Iteration  30: 2523386.136 ops/s
Iteration   1: 2536699.819 ops/s
Iteration   2: 2518215.789 ops/s
Iteration   3: 2529163.693 ops/s
Iteration   4: 2543286.843 ops/s
Iteration   5: 2526499.686 ops/s
Iteration   6: 2524176.255 ops/s
Iteration   7: 2536103.492 ops/s
Iteration   8: 2528893.474 ops/s
Iteration   9: 2542685.131 ops/s
Iteration  10: 2530418.639 ops/s
Iteration  11: 2532169.321 ops/s
Iteration  12: 2526029.109 ops/s
Iteration  13: 2510351.617 ops/s
Iteration  14: 2499734.442 ops/s
Iteration  15: 2525896.056 ops/s
Iteration  16: 2537940.280 ops/s
Iteration  17: 2531072.391 ops/s
Iteration  18: 2500437.799 ops/s
Iteration  19: 2516501.821 ops/s
Iteration  20: 2527202.988 ops/s
Iteration  21: 2532815.766 ops/s
Iteration  22: 2536493.204 ops/s
Iteration  23: 2530846.278 ops/s
Iteration  24: 2530953.731 ops/s
Iteration  25: 2529808.422 ops/s
Iteration  26: 2503789.506 ops/s
Iteration  27: 2511618.364 ops/s
Iteration  28: 2479253.871 ops/s
Iteration  29: 2436362.647 ops/s
Iteration  30: 2490816.574 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticastTest._Benchmark.benchmark_fusionRejectedInput":
  2520207.900 ±(99.9%) 14759.507 ops/s [Average]
  (min, avg, max) = (2436362.647, 2520207.900, 2543286.843), stdev = 22091.337
  CI (99.9%): [2505448.393, 2534967.407] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowablePublishMulticastTest._Benchmark.benchmark_fusionRejectedInput  thrpt   30  2520207.900 ± 14759.507  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 235339.683 ops/s
# Warmup Iteration   2: 290697.504 ops/s
# Warmup Iteration   3: 290645.193 ops/s
# Warmup Iteration   4: 309842.271 ops/s
# Warmup Iteration   5: 314045.811 ops/s
# Warmup Iteration   6: 315238.949 ops/s
# Warmup Iteration   7: 316057.754 ops/s
# Warmup Iteration   8: 314018.536 ops/s
# Warmup Iteration   9: 313961.485 ops/s
# Warmup Iteration  10: 313561.856 ops/s
# Warmup Iteration  11: 313553.376 ops/s
# Warmup Iteration  12: 312716.787 ops/s
# Warmup Iteration  13: 313906.460 ops/s
# Warmup Iteration  14: 312234.045 ops/s
# Warmup Iteration  15: 312794.492 ops/s
# Warmup Iteration  16: 311583.760 ops/s
# Warmup Iteration  17: 323717.061 ops/s
# Warmup Iteration  18: 323593.489 ops/s
# Warmup Iteration  19: 323392.598 ops/s
# Warmup Iteration  20: 323283.918 ops/s
# Warmup Iteration  21: 324942.947 ops/s
# Warmup Iteration  22: 324302.097 ops/s
# Warmup Iteration  23: 325367.149 ops/s
# Warmup Iteration  24: 323992.158 ops/s
# Warmup Iteration  25: 323492.557 ops/s
# Warmup Iteration  26: 324776.056 ops/s
# Warmup Iteration  27: 324361.302 ops/s
# Warmup Iteration  28: 324047.317 ops/s
# Warmup Iteration  29: 323535.193 ops/s
# Warmup Iteration  30: 323552.852 ops/s
Iteration   1: 323517.898 ops/s
Iteration   2: 324657.939 ops/s
Iteration   3: 323407.393 ops/s
Iteration   4: 322695.187 ops/s
Iteration   5: 323294.224 ops/s
Iteration   6: 322652.585 ops/s
Iteration   7: 324092.074 ops/s
Iteration   8: 325255.488 ops/s
Iteration   9: 324147.987 ops/s
Iteration  10: 324366.831 ops/s
Iteration  11: 323767.789 ops/s
Iteration  12: 324075.526 ops/s
Iteration  13: 323577.702 ops/s
Iteration  14: 325200.723 ops/s
Iteration  15: 324858.542 ops/s
Iteration  16: 324299.797 ops/s
Iteration  17: 323752.965 ops/s
Iteration  18: 324593.377 ops/s
Iteration  19: 320239.444 ops/s
Iteration  20: 322337.261 ops/s
Iteration  21: 323417.129 ops/s
Iteration  22: 323258.110 ops/s
Iteration  23: 322741.550 ops/s
Iteration  24: 325268.340 ops/s
Iteration  25: 322480.323 ops/s
Iteration  26: 325627.621 ops/s
Iteration  27: 319414.976 ops/s
Iteration  28: 319579.234 ops/s
Iteration  29: 323736.291 ops/s
Iteration  30: 326212.178 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_doubleOnSubscribe":
  323550.883 ±(99.9%) 1075.290 ops/s [Average]
  (min, avg, max) = (319414.976, 323550.883, 326212.178), stdev = 1609.443
  CI (99.9%): [322475.593, 324626.173] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableScanTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  323550.883 ± 1075.290  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_publishCancelOneAsync2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_publishCancelOneAsync2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 923214.908 ops/s
# Warmup Iteration   2: 1549285.631 ops/s
# Warmup Iteration   3: 1678721.003 ops/s
# Warmup Iteration   4: 1677029.671 ops/s
# Warmup Iteration   5: 1673849.177 ops/s
# Warmup Iteration   6: 1676481.077 ops/s
# Warmup Iteration   7: 1661171.346 ops/s
# Warmup Iteration   8: 1649975.847 ops/s
# Warmup Iteration   9: 1695220.640 ops/s
# Warmup Iteration  10: 1677687.341 ops/s
# Warmup Iteration  11: 1689295.910 ops/s
# Warmup Iteration  12: 1673794.429 ops/s
# Warmup Iteration  13: 1657011.191 ops/s
# Warmup Iteration  14: 1664221.784 ops/s
# Warmup Iteration  15: 1667595.411 ops/s
# Warmup Iteration  16: 1665342.853 ops/s
# Warmup Iteration  17: 1673701.013 ops/s
# Warmup Iteration  18: 1666248.590 ops/s
# Warmup Iteration  19: 1676321.730 ops/s
# Warmup Iteration  20: 1663070.009 ops/s
# Warmup Iteration  21: 1661832.542 ops/s
# Warmup Iteration  22: 1677557.796 ops/s
# Warmup Iteration  23: 1656554.962 ops/s
# Warmup Iteration  24: 1646805.714 ops/s
# Warmup Iteration  25: 1680834.937 ops/s
# Warmup Iteration  26: 1672725.765 ops/s
# Warmup Iteration  27: 1674230.975 ops/s
# Warmup Iteration  28: 1669734.147 ops/s
# Warmup Iteration  29: 1676157.658 ops/s
# Warmup Iteration  30: 1689271.849 ops/s
Iteration   1: 1678150.307 ops/s
Iteration   2: 1663548.194 ops/s
Iteration   3: 1661961.225 ops/s
Iteration   4: 1667396.031 ops/s
Iteration   5: 1665676.080 ops/s
Iteration   6: 1667927.469 ops/s
Iteration   7: 1650435.506 ops/s
Iteration   8: 1667147.076 ops/s
Iteration   9: 1668179.750 ops/s
Iteration  10: 1659816.198 ops/s
Iteration  11: 1668257.264 ops/s
Iteration  12: 1666839.075 ops/s
Iteration  13: 1685133.131 ops/s
Iteration  14: 1664871.813 ops/s
Iteration  15: 1666214.806 ops/s
Iteration  16: 1677293.239 ops/s
Iteration  17: 1680289.804 ops/s
Iteration  18: 1677782.632 ops/s
Iteration  19: 1678976.509 ops/s
Iteration  20: 1678710.418 ops/s
Iteration  21: 1676327.251 ops/s
Iteration  22: 1677521.332 ops/s
Iteration  23: 1656957.458 ops/s
Iteration  24: 1654196.934 ops/s
Iteration  25: 1662900.137 ops/s
Iteration  26: 1613162.645 ops/s
Iteration  27: 1618994.728 ops/s
Iteration  28: 1629905.598 ops/s
Iteration  29: 1664225.958 ops/s
Iteration  30: 1660459.593 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_publishCancelOneAsync2":
  1663641.939 ±(99.9%) 11287.356 ops/s [Average]
  (min, avg, max) = (1613162.645, 1663641.939, 1685133.131), stdev = 16894.385
  CI (99.9%): [1652354.582, 1674929.295] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_publishCancelOneAsync2  thrpt   30  1663641.939 ± 11287.356  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_overflowReported$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_overflowReported

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 241577.704 ops/s
# Warmup Iteration   2: 317239.060 ops/s
# Warmup Iteration   3: 316940.425 ops/s
# Warmup Iteration   4: 343107.168 ops/s
# Warmup Iteration   5: 345457.344 ops/s
# Warmup Iteration   6: 346765.882 ops/s
# Warmup Iteration   7: 345931.119 ops/s
# Warmup Iteration   8: 346230.477 ops/s
# Warmup Iteration   9: 345951.550 ops/s
# Warmup Iteration  10: 345827.288 ops/s
# Warmup Iteration  11: 344223.771 ops/s
# Warmup Iteration  12: 343420.162 ops/s
# Warmup Iteration  13: 346793.298 ops/s
# Warmup Iteration  14: 344784.188 ops/s
# Warmup Iteration  15: 346472.230 ops/s
# Warmup Iteration  16: 345105.094 ops/s
# Warmup Iteration  17: 359829.621 ops/s
# Warmup Iteration  18: 359119.739 ops/s
# Warmup Iteration  19: 359185.635 ops/s
# Warmup Iteration  20: 359334.052 ops/s
# Warmup Iteration  21: 359739.864 ops/s
# Warmup Iteration  22: 360188.249 ops/s
# Warmup Iteration  23: 359724.757 ops/s
# Warmup Iteration  24: 358891.635 ops/s
# Warmup Iteration  25: 359849.281 ops/s
# Warmup Iteration  26: 358243.185 ops/s
# Warmup Iteration  27: 357116.875 ops/s
# Warmup Iteration  28: 358091.069 ops/s
# Warmup Iteration  29: 358931.242 ops/s
# Warmup Iteration  30: 357988.773 ops/s
Iteration   1: 360085.537 ops/s
Iteration   2: 360419.567 ops/s
Iteration   3: 358755.833 ops/s
Iteration   4: 358504.438 ops/s
Iteration   5: 359495.119 ops/s
Iteration   6: 357734.893 ops/s
Iteration   7: 359062.497 ops/s
Iteration   8: 359518.451 ops/s
Iteration   9: 359124.740 ops/s
Iteration  10: 360468.974 ops/s
Iteration  11: 359975.635 ops/s
Iteration  12: 357568.870 ops/s
Iteration  13: 355586.524 ops/s
Iteration  14: 356442.480 ops/s
Iteration  15: 358819.530 ops/s
Iteration  16: 358262.413 ops/s
Iteration  17: 360557.678 ops/s
Iteration  18: 360088.285 ops/s
Iteration  19: 359330.480 ops/s
Iteration  20: 358444.124 ops/s
Iteration  21: 358630.238 ops/s
Iteration  22: 359310.991 ops/s
Iteration  23: 357982.533 ops/s
Iteration  24: 358876.475 ops/s
Iteration  25: 353362.204 ops/s
Iteration  26: 352681.586 ops/s
Iteration  27: 351673.316 ops/s
Iteration  28: 361494.599 ops/s
Iteration  29: 359309.115 ops/s
Iteration  30: 358242.796 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_overflowReported":
  358326.997 ±(99.9%) 1537.431 ops/s [Average]
  (min, avg, max) = (351673.316, 358326.997, 361494.599), stdev = 2301.155
  CI (99.9%): [356789.566, 359864.429] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
CompletableConcatTest._Benchmark.benchmark_overflowReported  thrpt   30  358326.997 ± 1537.431  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1221423.917 ops/s
# Warmup Iteration   2: 1877508.216 ops/s
# Warmup Iteration   3: 2176979.189 ops/s
# Warmup Iteration   4: 2169655.196 ops/s
# Warmup Iteration   5: 2172085.993 ops/s
# Warmup Iteration   6: 2145456.271 ops/s
# Warmup Iteration   7: 2167758.048 ops/s
# Warmup Iteration   8: 2162423.122 ops/s
# Warmup Iteration   9: 2181342.763 ops/s
# Warmup Iteration  10: 2152953.913 ops/s
# Warmup Iteration  11: 2179839.088 ops/s
# Warmup Iteration  12: 2172219.474 ops/s
# Warmup Iteration  13: 2165568.096 ops/s
# Warmup Iteration  14: 2161622.049 ops/s
# Warmup Iteration  15: 2153225.490 ops/s
# Warmup Iteration  16: 2161492.577 ops/s
# Warmup Iteration  17: 2148183.922 ops/s
# Warmup Iteration  18: 2161601.905 ops/s
# Warmup Iteration  19: 2156376.255 ops/s
# Warmup Iteration  20: 2143259.688 ops/s
# Warmup Iteration  21: 2147464.179 ops/s
# Warmup Iteration  22: 2147024.364 ops/s
# Warmup Iteration  23: 2144982.168 ops/s
# Warmup Iteration  24: 2144751.898 ops/s
# Warmup Iteration  25: 2146410.428 ops/s
# Warmup Iteration  26: 2137591.648 ops/s
# Warmup Iteration  27: 2142835.129 ops/s
# Warmup Iteration  28: 2140615.154 ops/s
# Warmup Iteration  29: 2152162.783 ops/s
# Warmup Iteration  30: 2142918.661 ops/s
Iteration   1: 2134118.903 ops/s
Iteration   2: 2149897.881 ops/s
Iteration   3: 2152575.238 ops/s
Iteration   4: 2143580.750 ops/s
Iteration   5: 2148911.894 ops/s
Iteration   6: 2151720.977 ops/s
Iteration   7: 2145140.954 ops/s
Iteration   8: 2142081.212 ops/s
Iteration   9: 2166293.995 ops/s
Iteration  10: 2163025.824 ops/s
Iteration  11: 2134838.360 ops/s
Iteration  12: 2133910.610 ops/s
Iteration  13: 2145120.533 ops/s
Iteration  14: 2159554.090 ops/s
Iteration  15: 2143267.707 ops/s
Iteration  16: 2148403.575 ops/s
Iteration  17: 2142723.319 ops/s
Iteration  18: 2139673.538 ops/s
Iteration  19: 2153384.396 ops/s
Iteration  20: 2136201.390 ops/s
Iteration  21: 2154976.823 ops/s
Iteration  22: 2137942.489 ops/s
Iteration  23: 2130040.082 ops/s
Iteration  24: 2104532.716 ops/s
Iteration  25: 2091320.481 ops/s
Iteration  26: 2128380.961 ops/s
Iteration  27: 2166627.302 ops/s
Iteration  28: 2142914.935 ops/s
Iteration  29: 2140696.877 ops/s
Iteration  30: 2143562.482 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_just":
  2142514.010 ±(99.9%) 10497.127 ops/s [Average]
  (min, avg, max) = (2091320.481, 2142514.010, 2166627.302), stdev = 15711.606
  CI (99.9%): [2132016.883, 2153011.136] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_just  thrpt   30  2142514.010 ± 10497.127  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 168392.289 ops/s
# Warmup Iteration   2: 242284.313 ops/s
# Warmup Iteration   3: 253402.296 ops/s
# Warmup Iteration   4: 275490.297 ops/s
# Warmup Iteration   5: 277958.521 ops/s
# Warmup Iteration   6: 278049.870 ops/s
# Warmup Iteration   7: 277667.431 ops/s
# Warmup Iteration   8: 278388.581 ops/s
# Warmup Iteration   9: 277592.995 ops/s
# Warmup Iteration  10: 278248.413 ops/s
# Warmup Iteration  11: 274883.183 ops/s
# Warmup Iteration  12: 276163.414 ops/s
# Warmup Iteration  13: 275198.557 ops/s
# Warmup Iteration  14: 275634.482 ops/s
# Warmup Iteration  15: 277000.416 ops/s
# Warmup Iteration  16: 275188.322 ops/s
# Warmup Iteration  17: 284394.717 ops/s
# Warmup Iteration  18: 285594.054 ops/s
# Warmup Iteration  19: 281917.397 ops/s
# Warmup Iteration  20: 283425.571 ops/s
# Warmup Iteration  21: 284305.590 ops/s
# Warmup Iteration  22: 285996.682 ops/s
# Warmup Iteration  23: 285634.380 ops/s
# Warmup Iteration  24: 285422.159 ops/s
# Warmup Iteration  25: 285227.976 ops/s
# Warmup Iteration  26: 284585.271 ops/s
# Warmup Iteration  27: 285329.877 ops/s
# Warmup Iteration  28: 285813.779 ops/s
# Warmup Iteration  29: 285556.860 ops/s
# Warmup Iteration  30: 284589.848 ops/s
Iteration   1: 284082.189 ops/s
Iteration   2: 285291.661 ops/s
Iteration   3: 284102.384 ops/s
Iteration   4: 284454.130 ops/s
Iteration   5: 282670.627 ops/s
Iteration   6: 284874.645 ops/s
Iteration   7: 285768.000 ops/s
Iteration   8: 284269.724 ops/s
Iteration   9: 284612.192 ops/s
Iteration  10: 284026.631 ops/s
Iteration  11: 284724.864 ops/s
Iteration  12: 284773.756 ops/s
Iteration  13: 284154.390 ops/s
Iteration  14: 285927.880 ops/s
Iteration  15: 285155.716 ops/s
Iteration  16: 286629.286 ops/s
Iteration  17: 285692.873 ops/s
Iteration  18: 285849.665 ops/s
Iteration  19: 285373.572 ops/s
Iteration  20: 285416.122 ops/s
Iteration  21: 281699.780 ops/s
Iteration  22: 281770.293 ops/s
Iteration  23: 280370.487 ops/s
Iteration  24: 277989.807 ops/s
Iteration  25: 284498.017 ops/s
Iteration  26: 285251.327 ops/s
Iteration  27: 283717.693 ops/s
Iteration  28: 284480.234 ops/s
Iteration  29: 284669.769 ops/s
Iteration  30: 285113.275 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_badSource":
  284247.033 ±(99.9%) 1195.354 ops/s [Average]
  (min, avg, max) = (277989.807, 284247.033, 286629.286), stdev = 1789.149
  CI (99.9%): [283051.679, 285442.387] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_badSource  thrpt   30  284247.033 ± 1195.354  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticastTest._Benchmark.benchmark_cancelledWhileFindingRequests$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticastTest._Benchmark.benchmark_cancelledWhileFindingRequests

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2923428.951 ops/s
# Warmup Iteration   2: 4720978.483 ops/s
# Warmup Iteration   3: 4837672.570 ops/s
# Warmup Iteration   4: 4785350.914 ops/s
# Warmup Iteration   5: 4835826.388 ops/s
# Warmup Iteration   6: 4798681.491 ops/s
# Warmup Iteration   7: 4765598.404 ops/s
# Warmup Iteration   8: 4812288.397 ops/s
# Warmup Iteration   9: 4826996.492 ops/s
# Warmup Iteration  10: 4829734.643 ops/s
# Warmup Iteration  11: 4827286.081 ops/s
# Warmup Iteration  12: 4853170.450 ops/s
# Warmup Iteration  13: 4817384.817 ops/s
# Warmup Iteration  14: 4827871.667 ops/s
# Warmup Iteration  15: 4823273.214 ops/s
# Warmup Iteration  16: 4831074.009 ops/s
# Warmup Iteration  17: 4783907.706 ops/s
# Warmup Iteration  18: 4766248.095 ops/s
# Warmup Iteration  19: 4776198.300 ops/s
# Warmup Iteration  20: 4769534.455 ops/s
# Warmup Iteration  21: 4803351.468 ops/s
# Warmup Iteration  22: 4755693.544 ops/s
# Warmup Iteration  23: 4745865.220 ops/s
# Warmup Iteration  24: 4740835.330 ops/s
# Warmup Iteration  25: 4768161.092 ops/s
# Warmup Iteration  26: 4779164.045 ops/s
# Warmup Iteration  27: 4747589.263 ops/s
# Warmup Iteration  28: 4805853.241 ops/s
# Warmup Iteration  29: 4774685.299 ops/s
# Warmup Iteration  30: 4773102.428 ops/s
Iteration   1: 4772873.511 ops/s
Iteration   2: 4774136.367 ops/s
Iteration   3: 4808505.835 ops/s
Iteration   4: 4786464.812 ops/s
Iteration   5: 4820681.692 ops/s
Iteration   6: 4784551.421 ops/s
Iteration   7: 4796116.965 ops/s
Iteration   8: 4825025.657 ops/s
Iteration   9: 4720250.199 ops/s
Iteration  10: 4739107.548 ops/s
Iteration  11: 4779798.414 ops/s
Iteration  12: 4748892.773 ops/s
Iteration  13: 4813796.134 ops/s
Iteration  14: 4793282.829 ops/s
Iteration  15: 4809878.382 ops/s
Iteration  16: 4779460.062 ops/s
Iteration  17: 4790996.322 ops/s
Iteration  18: 4788445.732 ops/s
Iteration  19: 4776963.372 ops/s
Iteration  20: 4739710.100 ops/s
Iteration  21: 4744044.244 ops/s
Iteration  22: 4600717.335 ops/s
Iteration  23: 4563998.890 ops/s
Iteration  24: 4755629.956 ops/s
Iteration  25: 4820476.611 ops/s
Iteration  26: 4708095.531 ops/s
Iteration  27: 4795299.791 ops/s
Iteration  28: 4763314.035 ops/s
Iteration  29: 4780421.011 ops/s
Iteration  30: 4799343.894 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticastTest._Benchmark.benchmark_cancelledWhileFindingRequests":
  4766009.314 ±(99.9%) 38770.680 ops/s [Average]
  (min, avg, max) = (4563998.890, 4766009.314, 4825025.657), stdev = 58030.133
  CI (99.9%): [4727238.634, 4804779.994] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
FlowablePublishMulticastTest._Benchmark.benchmark_cancelledWhileFindingRequests  thrpt   30  4766009.314 ± 38770.680  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 182047.763 ops/s
# Warmup Iteration   2: 258717.604 ops/s
# Warmup Iteration   3: 248285.593 ops/s
# Warmup Iteration   4: 279058.905 ops/s
# Warmup Iteration   5: 281119.333 ops/s
# Warmup Iteration   6: 281334.917 ops/s
# Warmup Iteration   7: 278902.019 ops/s
# Warmup Iteration   8: 281490.696 ops/s
# Warmup Iteration   9: 279753.144 ops/s
# Warmup Iteration  10: 281114.249 ops/s
# Warmup Iteration  11: 277675.179 ops/s
# Warmup Iteration  12: 278527.822 ops/s
# Warmup Iteration  13: 279852.559 ops/s
# Warmup Iteration  14: 280154.800 ops/s
# Warmup Iteration  15: 277642.145 ops/s
# Warmup Iteration  16: 280221.636 ops/s
# Warmup Iteration  17: 288351.508 ops/s
# Warmup Iteration  18: 289908.433 ops/s
# Warmup Iteration  19: 287344.736 ops/s
# Warmup Iteration  20: 288642.338 ops/s
# Warmup Iteration  21: 287764.004 ops/s
# Warmup Iteration  22: 286766.636 ops/s
# Warmup Iteration  23: 287152.076 ops/s
# Warmup Iteration  24: 286979.130 ops/s
# Warmup Iteration  25: 287575.902 ops/s
# Warmup Iteration  26: 288975.846 ops/s
# Warmup Iteration  27: 287254.407 ops/s
# Warmup Iteration  28: 285980.661 ops/s
# Warmup Iteration  29: 288859.828 ops/s
# Warmup Iteration  30: 288457.207 ops/s
Iteration   1: 287908.992 ops/s
Iteration   2: 289040.037 ops/s
Iteration   3: 288468.665 ops/s
Iteration   4: 286813.611 ops/s
Iteration   5: 288521.307 ops/s
Iteration   6: 288745.348 ops/s
Iteration   7: 287990.204 ops/s
Iteration   8: 287517.412 ops/s
Iteration   9: 288675.557 ops/s
Iteration  10: 287099.395 ops/s
Iteration  11: 288317.520 ops/s
Iteration  12: 288368.805 ops/s
Iteration  13: 287444.863 ops/s
Iteration  14: 285881.848 ops/s
Iteration  15: 289305.640 ops/s
Iteration  16: 288374.969 ops/s
Iteration  17: 287822.220 ops/s
Iteration  18: 286866.396 ops/s
Iteration  19: 286767.454 ops/s
Iteration  20: 283027.255 ops/s
Iteration  21: 280107.534 ops/s
Iteration  22: 285544.583 ops/s
Iteration  23: 288107.977 ops/s
Iteration  24: 287890.885 ops/s
Iteration  25: 287804.890 ops/s
Iteration  26: 288396.632 ops/s
Iteration  27: 286272.478 ops/s
Iteration  28: 288682.139 ops/s
Iteration  29: 288200.316 ops/s
Iteration  30: 285193.889 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_badSource":
  287305.294 ±(99.9%) 1270.750 ops/s [Average]
  (min, avg, max) = (280107.534, 287305.294, 289305.640), stdev = 1901.999
  CI (99.9%): [286034.544, 288576.044] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_badSource  thrpt   30  287305.294 ± 1270.750  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_justTwoEmissionsObservableThrowsError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_justTwoEmissionsObservableThrowsError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 567649.824 ops/s
# Warmup Iteration   2: 719471.703 ops/s
# Warmup Iteration   3: 763261.623 ops/s
# Warmup Iteration   4: 794731.253 ops/s
# Warmup Iteration   5: 795563.717 ops/s
# Warmup Iteration   6: 794945.826 ops/s
# Warmup Iteration   7: 796154.238 ops/s
# Warmup Iteration   8: 794082.126 ops/s
# Warmup Iteration   9: 794795.711 ops/s
# Warmup Iteration  10: 789549.926 ops/s
# Warmup Iteration  11: 791906.230 ops/s
# Warmup Iteration  12: 789350.221 ops/s
# Warmup Iteration  13: 789626.971 ops/s
# Warmup Iteration  14: 790948.234 ops/s
# Warmup Iteration  15: 787021.861 ops/s
# Warmup Iteration  16: 784938.676 ops/s
# Warmup Iteration  17: 832719.073 ops/s
# Warmup Iteration  18: 826576.599 ops/s
# Warmup Iteration  19: 826930.121 ops/s
# Warmup Iteration  20: 830578.998 ops/s
# Warmup Iteration  21: 830746.739 ops/s
# Warmup Iteration  22: 828742.710 ops/s
# Warmup Iteration  23: 825609.199 ops/s
# Warmup Iteration  24: 830948.213 ops/s
# Warmup Iteration  25: 830813.070 ops/s
# Warmup Iteration  26: 830971.067 ops/s
# Warmup Iteration  27: 828710.837 ops/s
# Warmup Iteration  28: 831780.988 ops/s
# Warmup Iteration  29: 827220.971 ops/s
# Warmup Iteration  30: 826433.115 ops/s
Iteration   1: 827087.748 ops/s
Iteration   2: 824727.544 ops/s
Iteration   3: 828422.519 ops/s
Iteration   4: 827171.188 ops/s
Iteration   5: 831360.403 ops/s
Iteration   6: 832677.217 ops/s
Iteration   7: 828338.608 ops/s
Iteration   8: 826016.951 ops/s
Iteration   9: 826615.390 ops/s
Iteration  10: 830025.782 ops/s
Iteration  11: 832909.262 ops/s
Iteration  12: 834133.823 ops/s
Iteration  13: 829577.570 ops/s
Iteration  14: 826292.956 ops/s
Iteration  15: 826594.288 ops/s
Iteration  16: 831503.133 ops/s
Iteration  17: 823855.210 ops/s
Iteration  18: 825270.332 ops/s
Iteration  19: 828865.517 ops/s
Iteration  20: 819349.025 ops/s
Iteration  21: 822073.519 ops/s
Iteration  22: 827239.131 ops/s
Iteration  23: 823375.037 ops/s
Iteration  24: 830669.896 ops/s
Iteration  25: 829561.311 ops/s
Iteration  26: 833062.718 ops/s
Iteration  27: 833577.767 ops/s
Iteration  28: 831156.212 ops/s
Iteration  29: 829993.290 ops/s
Iteration  30: 832090.030 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_justTwoEmissionsObservableThrowsError":
  828453.112 ±(99.9%) 2434.790 ops/s [Average]
  (min, avg, max) = (819349.025, 828453.112, 834133.823), stdev = 3644.280
  CI (99.9%): [826018.322, 830887.903] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableToSingleTest._Benchmark.benchmark_justTwoEmissionsObservableThrowsError  thrpt   30  828453.112 ± 2434.790  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 430833.395 ops/s
# Warmup Iteration   2: 590100.222 ops/s
# Warmup Iteration   3: 557898.521 ops/s
# Warmup Iteration   4: 645684.372 ops/s
# Warmup Iteration   5: 663327.124 ops/s
# Warmup Iteration   6: 661936.966 ops/s
# Warmup Iteration   7: 663119.262 ops/s
# Warmup Iteration   8: 662146.925 ops/s
# Warmup Iteration   9: 658812.571 ops/s
# Warmup Iteration  10: 659137.171 ops/s
# Warmup Iteration  11: 658111.414 ops/s
# Warmup Iteration  12: 657991.530 ops/s
# Warmup Iteration  13: 657001.891 ops/s
# Warmup Iteration  14: 655038.297 ops/s
# Warmup Iteration  15: 660336.143 ops/s
# Warmup Iteration  16: 659576.213 ops/s
# Warmup Iteration  17: 683248.391 ops/s
# Warmup Iteration  18: 686107.538 ops/s
# Warmup Iteration  19: 684660.217 ops/s
# Warmup Iteration  20: 679255.694 ops/s
# Warmup Iteration  21: 682125.181 ops/s
# Warmup Iteration  22: 688880.565 ops/s
# Warmup Iteration  23: 684795.004 ops/s
# Warmup Iteration  24: 685483.790 ops/s
# Warmup Iteration  25: 684559.702 ops/s
# Warmup Iteration  26: 688499.526 ops/s
# Warmup Iteration  27: 686290.645 ops/s
# Warmup Iteration  28: 682580.971 ops/s
# Warmup Iteration  29: 688251.876 ops/s
# Warmup Iteration  30: 684658.772 ops/s
Iteration   1: 685061.533 ops/s
Iteration   2: 684255.056 ops/s
Iteration   3: 688304.015 ops/s
Iteration   4: 688837.797 ops/s
Iteration   5: 687090.459 ops/s
Iteration   6: 679808.903 ops/s
Iteration   7: 683938.947 ops/s
Iteration   8: 681980.769 ops/s
Iteration   9: 685447.690 ops/s
Iteration  10: 684658.666 ops/s
Iteration  11: 687613.665 ops/s
Iteration  12: 684565.333 ops/s
Iteration  13: 687412.715 ops/s
Iteration  14: 686024.332 ops/s
Iteration  15: 682140.946 ops/s
Iteration  16: 686035.913 ops/s
Iteration  17: 682527.576 ops/s
Iteration  18: 676614.461 ops/s
Iteration  19: 671130.704 ops/s
Iteration  20: 681065.989 ops/s
Iteration  21: 683884.994 ops/s
Iteration  22: 680782.902 ops/s
Iteration  23: 684768.667 ops/s
Iteration  24: 681227.800 ops/s
Iteration  25: 682726.315 ops/s
Iteration  26: 684683.968 ops/s
Iteration  27: 689929.997 ops/s
Iteration  28: 686095.814 ops/s
Iteration  29: 685885.267 ops/s
Iteration  30: 688905.878 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_badRequest":
  684113.569 ±(99.9%) 2578.753 ops/s [Average]
  (min, avg, max) = (671130.704, 684113.569, 689929.997), stdev = 3859.757
  CI (99.9%): [681534.816, 686692.322] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableMaterializeTest._Benchmark.benchmark_badRequest  thrpt   30  684113.569 ± 2578.753  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_fromPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_fromPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5994952.144 ops/s
# Warmup Iteration   2: 9303874.787 ops/s
# Warmup Iteration   3: 10016895.624 ops/s
# Warmup Iteration   4: 9993379.868 ops/s
# Warmup Iteration   5: 9993296.060 ops/s
# Warmup Iteration   6: 10041715.742 ops/s
# Warmup Iteration   7: 9991261.321 ops/s
# Warmup Iteration   8: 9989743.495 ops/s
# Warmup Iteration   9: 10044147.449 ops/s
# Warmup Iteration  10: 10013702.626 ops/s
# Warmup Iteration  11: 9949223.897 ops/s
# Warmup Iteration  12: 10066772.090 ops/s
# Warmup Iteration  13: 10026544.582 ops/s
# Warmup Iteration  14: 10022366.275 ops/s
# Warmup Iteration  15: 9970234.195 ops/s
# Warmup Iteration  16: 10066626.222 ops/s
# Warmup Iteration  17: 10095593.371 ops/s
# Warmup Iteration  18: 10084681.979 ops/s
# Warmup Iteration  19: 10096894.218 ops/s
# Warmup Iteration  20: 10037831.068 ops/s
# Warmup Iteration  21: 10169260.191 ops/s
# Warmup Iteration  22: 10113160.127 ops/s
# Warmup Iteration  23: 10079185.878 ops/s
# Warmup Iteration  24: 9994680.038 ops/s
# Warmup Iteration  25: 10078390.960 ops/s
# Warmup Iteration  26: 10089761.289 ops/s
# Warmup Iteration  27: 10078358.812 ops/s
# Warmup Iteration  28: 10102892.966 ops/s
# Warmup Iteration  29: 10079457.705 ops/s
# Warmup Iteration  30: 10111252.131 ops/s
Iteration   1: 10175103.481 ops/s
Iteration   2: 10049142.829 ops/s
Iteration   3: 10079337.768 ops/s
Iteration   4: 10103969.694 ops/s
Iteration   5: 10166388.676 ops/s
Iteration   6: 10008558.213 ops/s
Iteration   7: 10133564.015 ops/s
Iteration   8: 10139966.082 ops/s
Iteration   9: 10134640.950 ops/s
Iteration  10: 10003713.527 ops/s
Iteration  11: 10070647.407 ops/s
Iteration  12: 10148618.669 ops/s
Iteration  13: 10098044.656 ops/s
Iteration  14: 10131705.571 ops/s
Iteration  15: 10017300.623 ops/s
Iteration  16: 10046544.018 ops/s
Iteration  17: 9921004.404 ops/s
Iteration  18: 9863795.875 ops/s
Iteration  19: 10081540.140 ops/s
Iteration  20: 10032654.795 ops/s
Iteration  21: 10135422.688 ops/s
Iteration  22: 10160961.106 ops/s
Iteration  23: 10089048.597 ops/s
Iteration  24: 10028514.512 ops/s
Iteration  25: 10155208.516 ops/s
Iteration  26: 10042906.789 ops/s
Iteration  27: 10090163.244 ops/s
Iteration  28: 10094432.563 ops/s
Iteration  29: 10120391.897 ops/s
Iteration  30: 10115014.660 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_fromPublisher":
  10081276.865 ±(99.9%) 47734.388 ops/s [Average]
  (min, avg, max) = (9863795.875, 10081276.865, 10175103.481), stdev = 71446.590
  CI (99.9%): [10033542.478, 10129011.253] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
CompletableFromPublisherTest._Benchmark.benchmark_fromPublisher  thrpt   30  10081276.865 ± 47734.388  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromArrayOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromArrayOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 691005.472 ops/s
# Warmup Iteration   2: 791908.650 ops/s
# Warmup Iteration   3: 780427.596 ops/s
# Warmup Iteration   4: 842312.930 ops/s
# Warmup Iteration   5: 846968.108 ops/s
# Warmup Iteration   6: 846539.569 ops/s
# Warmup Iteration   7: 841198.748 ops/s
# Warmup Iteration   8: 845642.019 ops/s
# Warmup Iteration   9: 844212.672 ops/s
# Warmup Iteration  10: 846893.887 ops/s
# Warmup Iteration  11: 841502.244 ops/s
# Warmup Iteration  12: 837659.436 ops/s
# Warmup Iteration  13: 837490.449 ops/s
# Warmup Iteration  14: 839572.422 ops/s
# Warmup Iteration  15: 839501.049 ops/s
# Warmup Iteration  16: 840317.138 ops/s
# Warmup Iteration  17: 890742.701 ops/s
# Warmup Iteration  18: 891414.020 ops/s
# Warmup Iteration  19: 893073.175 ops/s
# Warmup Iteration  20: 889021.158 ops/s
# Warmup Iteration  21: 888200.478 ops/s
# Warmup Iteration  22: 894381.729 ops/s
# Warmup Iteration  23: 892710.166 ops/s
# Warmup Iteration  24: 889831.088 ops/s
# Warmup Iteration  25: 889129.060 ops/s
# Warmup Iteration  26: 891360.592 ops/s
# Warmup Iteration  27: 892627.529 ops/s
# Warmup Iteration  28: 888462.750 ops/s
# Warmup Iteration  29: 895487.128 ops/s
# Warmup Iteration  30: 887286.660 ops/s
Iteration   1: 888789.405 ops/s
Iteration   2: 893897.427 ops/s
Iteration   3: 889972.598 ops/s
Iteration   4: 890478.977 ops/s
Iteration   5: 887623.485 ops/s
Iteration   6: 891558.000 ops/s
Iteration   7: 891123.658 ops/s
Iteration   8: 890100.877 ops/s
Iteration   9: 887649.463 ops/s
Iteration  10: 892912.356 ops/s
Iteration  11: 889871.152 ops/s
Iteration  12: 887161.058 ops/s
Iteration  13: 893488.031 ops/s
Iteration  14: 890729.297 ops/s
Iteration  15: 887384.868 ops/s
Iteration  16: 882742.591 ops/s
Iteration  17: 880879.275 ops/s
Iteration  18: 883149.285 ops/s
Iteration  19: 889277.077 ops/s
Iteration  20: 890461.585 ops/s
Iteration  21: 889934.656 ops/s
Iteration  22: 888192.668 ops/s
Iteration  23: 885786.025 ops/s
Iteration  24: 891924.004 ops/s
Iteration  25: 889084.434 ops/s
Iteration  26: 885606.062 ops/s
Iteration  27: 895211.549 ops/s
Iteration  28: 890175.326 ops/s
Iteration  29: 891274.232 ops/s
Iteration  30: 891949.542 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromArrayOneIsNull":
  889279.632 ±(99.9%) 2196.000 ops/s [Average]
  (min, avg, max) = (880879.275, 889279.632, 895211.549), stdev = 3286.870
  CI (99.9%): [887083.632, 891475.632] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_fromArrayOneIsNull  thrpt   30  889279.632 ± 2196.000  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onSubscribeThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onSubscribeThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 551013.273 ops/s
# Warmup Iteration   2: 643712.109 ops/s
# Warmup Iteration   3: 682025.406 ops/s
# Warmup Iteration   4: 734325.008 ops/s
# Warmup Iteration   5: 739948.289 ops/s
# Warmup Iteration   6: 736111.016 ops/s
# Warmup Iteration   7: 738679.683 ops/s
# Warmup Iteration   8: 735387.034 ops/s
# Warmup Iteration   9: 737333.873 ops/s
# Warmup Iteration  10: 733724.581 ops/s
# Warmup Iteration  11: 733616.671 ops/s
# Warmup Iteration  12: 730926.529 ops/s
# Warmup Iteration  13: 729257.406 ops/s
# Warmup Iteration  14: 732975.007 ops/s
# Warmup Iteration  15: 730000.421 ops/s
# Warmup Iteration  16: 731522.704 ops/s
# Warmup Iteration  17: 764856.108 ops/s
# Warmup Iteration  18: 768723.322 ops/s
# Warmup Iteration  19: 765663.140 ops/s
# Warmup Iteration  20: 770341.838 ops/s
# Warmup Iteration  21: 770939.700 ops/s
# Warmup Iteration  22: 764254.031 ops/s
# Warmup Iteration  23: 764467.441 ops/s
# Warmup Iteration  24: 769938.786 ops/s
# Warmup Iteration  25: 768720.615 ops/s
# Warmup Iteration  26: 770992.272 ops/s
# Warmup Iteration  27: 765723.787 ops/s
# Warmup Iteration  28: 768682.192 ops/s
# Warmup Iteration  29: 765606.923 ops/s
# Warmup Iteration  30: 771715.015 ops/s
Iteration   1: 762713.120 ops/s
Iteration   2: 765357.803 ops/s
Iteration   3: 768216.526 ops/s
Iteration   4: 765683.454 ops/s
Iteration   5: 766355.442 ops/s
Iteration   6: 774734.955 ops/s
Iteration   7: 769457.828 ops/s
Iteration   8: 765826.679 ops/s
Iteration   9: 767843.193 ops/s
Iteration  10: 768919.586 ops/s
Iteration  11: 768174.038 ops/s
Iteration  12: 768632.536 ops/s
Iteration  13: 764524.147 ops/s
Iteration  14: 767114.980 ops/s
Iteration  15: 754440.109 ops/s
Iteration  16: 748635.065 ops/s
Iteration  17: 760915.931 ops/s
Iteration  18: 767230.065 ops/s
Iteration  19: 764718.158 ops/s
Iteration  20: 768869.620 ops/s
Iteration  21: 767556.443 ops/s
Iteration  22: 766258.522 ops/s
Iteration  23: 766905.118 ops/s
Iteration  24: 767765.177 ops/s
Iteration  25: 766583.663 ops/s
Iteration  26: 768165.197 ops/s
Iteration  27: 770017.864 ops/s
Iteration  28: 765740.646 ops/s
Iteration  29: 768895.620 ops/s
Iteration  30: 766822.417 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onSubscribeThrows":
  766102.463 ±(99.9%) 3139.766 ops/s [Average]
  (min, avg, max) = (748635.065, 766102.463, 774734.955), stdev = 4699.455
  CI (99.9%): [762962.697, 769242.230] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
BoundedSubscriberTest._Benchmark.benchmark_onSubscribeThrows  thrpt   30  766102.463 ± 3139.766  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_justSingleItemObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_justSingleItemObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4984648.301 ops/s
# Warmup Iteration   2: 6654225.713 ops/s
# Warmup Iteration   3: 7684249.711 ops/s
# Warmup Iteration   4: 7622995.562 ops/s
# Warmup Iteration   5: 7572281.106 ops/s
# Warmup Iteration   6: 7638570.609 ops/s
# Warmup Iteration   7: 7605514.095 ops/s
# Warmup Iteration   8: 7567658.361 ops/s
# Warmup Iteration   9: 7594545.266 ops/s
# Warmup Iteration  10: 7629697.703 ops/s
# Warmup Iteration  11: 7600291.987 ops/s
# Warmup Iteration  12: 7590600.123 ops/s
# Warmup Iteration  13: 7653499.632 ops/s
# Warmup Iteration  14: 7587323.342 ops/s
# Warmup Iteration  15: 7611422.977 ops/s
# Warmup Iteration  16: 7617146.430 ops/s
# Warmup Iteration  17: 7609170.559 ops/s
# Warmup Iteration  18: 7638923.597 ops/s
# Warmup Iteration  19: 7626414.852 ops/s
# Warmup Iteration  20: 7570244.942 ops/s
# Warmup Iteration  21: 7581916.091 ops/s
# Warmup Iteration  22: 7625492.415 ops/s
# Warmup Iteration  23: 7634588.763 ops/s
# Warmup Iteration  24: 7662203.212 ops/s
# Warmup Iteration  25: 7649555.330 ops/s
# Warmup Iteration  26: 7659152.954 ops/s
# Warmup Iteration  27: 7584022.494 ops/s
# Warmup Iteration  28: 7621977.556 ops/s
# Warmup Iteration  29: 7580991.293 ops/s
# Warmup Iteration  30: 7638061.486 ops/s
Iteration   1: 7592317.633 ops/s
Iteration   2: 7633795.864 ops/s
Iteration   3: 7650852.253 ops/s
Iteration   4: 7662049.015 ops/s
Iteration   5: 7642260.630 ops/s
Iteration   6: 7633259.710 ops/s
Iteration   7: 7620860.749 ops/s
Iteration   8: 7644802.368 ops/s
Iteration   9: 7635960.213 ops/s
Iteration  10: 7608692.273 ops/s
Iteration  11: 7655230.267 ops/s
Iteration  12: 7644248.096 ops/s
Iteration  13: 7592808.751 ops/s
Iteration  14: 7489806.862 ops/s
Iteration  15: 7435213.345 ops/s
Iteration  16: 7589620.085 ops/s
Iteration  17: 7672950.927 ops/s
Iteration  18: 7640109.155 ops/s
Iteration  19: 7615866.412 ops/s
Iteration  20: 7679180.468 ops/s
Iteration  21: 7639332.498 ops/s
Iteration  22: 7590756.156 ops/s
Iteration  23: 7583512.436 ops/s
Iteration  24: 7667422.630 ops/s
Iteration  25: 7621313.138 ops/s
Iteration  26: 7661012.177 ops/s
Iteration  27: 7660942.622 ops/s
Iteration  28: 7669740.231 ops/s
Iteration  29: 7640185.812 ops/s
Iteration  30: 7630302.364 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_justSingleItemObservable":
  7623480.171 ±(99.9%) 34528.427 ops/s [Average]
  (min, avg, max) = (7435213.345, 7623480.171, 7679180.468), stdev = 51680.528
  CI (99.9%): [7588951.744, 7658008.598] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableToCompletableTest._Benchmark.benchmark_justSingleItemObservable  thrpt   30  7623480.171 ± 34528.427  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnSubscribeTest._Benchmark.benchmark_doOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnSubscribeTest._Benchmark.benchmark_doOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3478457.270 ops/s
# Warmup Iteration   2: 5111574.706 ops/s
# Warmup Iteration   3: 5549619.367 ops/s
# Warmup Iteration   4: 5511828.878 ops/s
# Warmup Iteration   5: 5529314.777 ops/s
# Warmup Iteration   6: 5479609.234 ops/s
# Warmup Iteration   7: 5475588.215 ops/s
# Warmup Iteration   8: 5491650.510 ops/s
# Warmup Iteration   9: 5507425.524 ops/s
# Warmup Iteration  10: 5534979.887 ops/s
# Warmup Iteration  11: 5534508.269 ops/s
# Warmup Iteration  12: 5526432.898 ops/s
# Warmup Iteration  13: 5485236.620 ops/s
# Warmup Iteration  14: 5524676.577 ops/s
# Warmup Iteration  15: 5497189.394 ops/s
# Warmup Iteration  16: 5486509.455 ops/s
# Warmup Iteration  17: 5518062.962 ops/s
# Warmup Iteration  18: 5524602.204 ops/s
# Warmup Iteration  19: 5488695.854 ops/s
# Warmup Iteration  20: 5517260.246 ops/s
# Warmup Iteration  21: 5505988.247 ops/s
# Warmup Iteration  22: 5509704.633 ops/s
# Warmup Iteration  23: 5535645.068 ops/s
# Warmup Iteration  24: 5490569.721 ops/s
# Warmup Iteration  25: 5488264.755 ops/s
# Warmup Iteration  26: 5497093.721 ops/s
# Warmup Iteration  27: 5484534.165 ops/s
# Warmup Iteration  28: 5509455.228 ops/s
# Warmup Iteration  29: 5530476.368 ops/s
# Warmup Iteration  30: 5523110.711 ops/s
Iteration   1: 5479252.870 ops/s
Iteration   2: 5486043.389 ops/s
Iteration   3: 5517558.863 ops/s
Iteration   4: 5511437.542 ops/s
Iteration   5: 5520886.808 ops/s
Iteration   6: 5471647.932 ops/s
Iteration   7: 5491336.370 ops/s
Iteration   8: 5527493.119 ops/s
Iteration   9: 5490812.579 ops/s
Iteration  10: 5483494.402 ops/s
Iteration  11: 5468676.987 ops/s
Iteration  12: 5526400.802 ops/s
Iteration  13: 5433324.109 ops/s
Iteration  14: 5424720.835 ops/s
Iteration  15: 5521401.789 ops/s
Iteration  16: 5512476.218 ops/s
Iteration  17: 5498787.492 ops/s
Iteration  18: 5562031.346 ops/s
Iteration  19: 5515999.954 ops/s
Iteration  20: 5502410.548 ops/s
Iteration  21: 5516804.984 ops/s
Iteration  22: 5462801.574 ops/s
Iteration  23: 5529895.945 ops/s
Iteration  24: 5503844.525 ops/s
Iteration  25: 5493565.159 ops/s
Iteration  26: 5530003.102 ops/s
Iteration  27: 5468565.852 ops/s
Iteration  28: 5480972.267 ops/s
Iteration  29: 5521044.900 ops/s
Iteration  30: 5505562.571 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnSubscribeTest._Benchmark.benchmark_doOnSubscribe":
  5498641.828 ±(99.9%) 19731.001 ops/s [Average]
  (min, avg, max) = (5424720.835, 5498641.828, 5562031.346), stdev = 29532.435
  CI (99.9%): [5478910.827, 5518372.828] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableDoOnSubscribeTest._Benchmark.benchmark_doOnSubscribe  thrpt   30  5498641.828 ± 19731.001  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalSlowPathSkipCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalSlowPathSkipCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3009418.060 ops/s
# Warmup Iteration   2: 4573280.433 ops/s
# Warmup Iteration   3: 5206162.532 ops/s
# Warmup Iteration   4: 5188313.286 ops/s
# Warmup Iteration   5: 5207788.935 ops/s
# Warmup Iteration   6: 5222612.527 ops/s
# Warmup Iteration   7: 5183149.070 ops/s
# Warmup Iteration   8: 5192574.404 ops/s
# Warmup Iteration   9: 5206187.748 ops/s
# Warmup Iteration  10: 5183426.630 ops/s
# Warmup Iteration  11: 5191944.938 ops/s
# Warmup Iteration  12: 5161747.120 ops/s
# Warmup Iteration  13: 5167560.986 ops/s
# Warmup Iteration  14: 5164389.966 ops/s
# Warmup Iteration  15: 5226891.012 ops/s
# Warmup Iteration  16: 5173312.045 ops/s
# Warmup Iteration  17: 5256909.164 ops/s
# Warmup Iteration  18: 5197221.729 ops/s
# Warmup Iteration  19: 5252972.350 ops/s
# Warmup Iteration  20: 5201477.604 ops/s
# Warmup Iteration  21: 5202362.313 ops/s
# Warmup Iteration  22: 5206761.836 ops/s
# Warmup Iteration  23: 5216194.252 ops/s
# Warmup Iteration  24: 5215611.167 ops/s
# Warmup Iteration  25: 5226124.020 ops/s
# Warmup Iteration  26: 5200668.024 ops/s
# Warmup Iteration  27: 5203703.889 ops/s
# Warmup Iteration  28: 5211772.312 ops/s
# Warmup Iteration  29: 5216913.568 ops/s
# Warmup Iteration  30: 5208493.526 ops/s
Iteration   1: 5171398.620 ops/s
Iteration   2: 5227314.637 ops/s
Iteration   3: 5214817.080 ops/s
Iteration   4: 5205417.033 ops/s
Iteration   5: 5204310.443 ops/s
Iteration   6: 5238179.502 ops/s
Iteration   7: 5220312.651 ops/s
Iteration   8: 5212012.094 ops/s
Iteration   9: 5212140.864 ops/s
Iteration  10: 5184031.934 ops/s
Iteration  11: 5188641.818 ops/s
Iteration  12: 5107414.420 ops/s
Iteration  13: 5078928.732 ops/s
Iteration  14: 5217709.173 ops/s
Iteration  15: 5172499.743 ops/s
Iteration  16: 5215719.392 ops/s
Iteration  17: 5212908.330 ops/s
Iteration  18: 5211592.804 ops/s
Iteration  19: 5197240.013 ops/s
Iteration  20: 5206573.871 ops/s
Iteration  21: 5224001.131 ops/s
Iteration  22: 5209249.011 ops/s
Iteration  23: 5203732.734 ops/s
Iteration  24: 5193128.070 ops/s
Iteration  25: 5219867.092 ops/s
Iteration  26: 5212135.536 ops/s
Iteration  27: 5203818.358 ops/s
Iteration  28: 5210828.930 ops/s
Iteration  29: 5207282.105 ops/s
Iteration  30: 5208444.557 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalSlowPathSkipCancel":
  5199721.689 ±(99.9%) 21771.742 ops/s [Average]
  (min, avg, max) = (5078928.732, 5199721.689, 5238179.502), stdev = 32586.921
  CI (99.9%): [5177949.947, 5221493.431] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableFromArrayTest._Benchmark.benchmark_conditionalSlowPathSkipCancel  thrpt   30  5199721.689 ± 21771.742  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableStartWithTests._Benchmark.benchmark_startWithEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableStartWithTests._Benchmark.benchmark_startWithEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4981180.742 ops/s
# Warmup Iteration   2: 6974921.777 ops/s
# Warmup Iteration   3: 7873247.453 ops/s
# Warmup Iteration   4: 7778320.477 ops/s
# Warmup Iteration   5: 7809012.583 ops/s
# Warmup Iteration   6: 7832081.719 ops/s
# Warmup Iteration   7: 7777099.902 ops/s
# Warmup Iteration   8: 7783220.693 ops/s
# Warmup Iteration   9: 7815426.492 ops/s
# Warmup Iteration  10: 7783466.053 ops/s
# Warmup Iteration  11: 7803200.099 ops/s
# Warmup Iteration  12: 7879358.542 ops/s
# Warmup Iteration  13: 7857246.113 ops/s
# Warmup Iteration  14: 7780951.604 ops/s
# Warmup Iteration  15: 7825362.325 ops/s
# Warmup Iteration  16: 7801295.093 ops/s
# Warmup Iteration  17: 7809801.844 ops/s
# Warmup Iteration  18: 7909807.317 ops/s
# Warmup Iteration  19: 7884335.789 ops/s
# Warmup Iteration  20: 7877016.869 ops/s
# Warmup Iteration  21: 7932127.907 ops/s
# Warmup Iteration  22: 7876358.065 ops/s
# Warmup Iteration  23: 7882063.427 ops/s
# Warmup Iteration  24: 7897454.654 ops/s
# Warmup Iteration  25: 7903893.499 ops/s
# Warmup Iteration  26: 7891876.762 ops/s
# Warmup Iteration  27: 7835628.257 ops/s
# Warmup Iteration  28: 7868306.552 ops/s
# Warmup Iteration  29: 7798155.005 ops/s
# Warmup Iteration  30: 7831449.303 ops/s
Iteration   1: 7846355.629 ops/s
Iteration   2: 7854281.676 ops/s
Iteration   3: 7809891.568 ops/s
Iteration   4: 7882619.897 ops/s
Iteration   5: 7864747.590 ops/s
Iteration   6: 7892405.591 ops/s
Iteration   7: 7836636.157 ops/s
Iteration   8: 7894808.286 ops/s
Iteration   9: 7842409.139 ops/s
Iteration  10: 7805397.918 ops/s
Iteration  11: 7733840.902 ops/s
Iteration  12: 7760937.064 ops/s
Iteration  13: 7797694.389 ops/s
Iteration  14: 7842940.877 ops/s
Iteration  15: 7813919.099 ops/s
Iteration  16: 7802582.602 ops/s
Iteration  17: 7904804.407 ops/s
Iteration  18: 7828258.606 ops/s
Iteration  19: 7789136.896 ops/s
Iteration  20: 7806025.710 ops/s
Iteration  21: 7901863.239 ops/s
Iteration  22: 7861292.319 ops/s
Iteration  23: 7855101.846 ops/s
Iteration  24: 7908475.798 ops/s
Iteration  25: 7886865.766 ops/s
Iteration  26: 7829231.175 ops/s
Iteration  27: 7888814.259 ops/s
Iteration  28: 7870886.679 ops/s
Iteration  29: 7909204.949 ops/s
Iteration  30: 7909853.477 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableStartWithTests._Benchmark.benchmark_startWithEmpty":
  7847709.450 ±(99.9%) 31079.581 ops/s [Average]
  (min, avg, max) = (7733840.902, 7847709.450, 7909853.477), stdev = 46518.457
  CI (99.9%): [7816629.869, 7878789.031] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableStartWithTests._Benchmark.benchmark_startWithEmpty  thrpt   30  7847709.450 ± 31079.581  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromOptionalTest._Benchmark.benchmark_hasValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromOptionalTest._Benchmark.benchmark_hasValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4786134.874 ops/s
# Warmup Iteration   2: 6686707.051 ops/s
# Warmup Iteration   3: 7671574.696 ops/s
# Warmup Iteration   4: 7646683.391 ops/s
# Warmup Iteration   5: 7484709.222 ops/s
# Warmup Iteration   6: 7645161.113 ops/s
# Warmup Iteration   7: 7640478.821 ops/s
# Warmup Iteration   8: 7628464.809 ops/s
# Warmup Iteration   9: 7574184.753 ops/s
# Warmup Iteration  10: 7571461.011 ops/s
# Warmup Iteration  11: 7544447.285 ops/s
# Warmup Iteration  12: 7696961.845 ops/s
# Warmup Iteration  13: 7597690.378 ops/s
# Warmup Iteration  14: 7619262.543 ops/s
# Warmup Iteration  15: 7606023.321 ops/s
# Warmup Iteration  16: 7580969.930 ops/s
# Warmup Iteration  17: 7712383.207 ops/s
# Warmup Iteration  18: 7621225.244 ops/s
# Warmup Iteration  19: 7709583.625 ops/s
# Warmup Iteration  20: 7611303.259 ops/s
# Warmup Iteration  21: 7591349.032 ops/s
# Warmup Iteration  22: 7698510.370 ops/s
# Warmup Iteration  23: 7703919.014 ops/s
# Warmup Iteration  24: 7647117.600 ops/s
# Warmup Iteration  25: 7613135.095 ops/s
# Warmup Iteration  26: 7607605.871 ops/s
# Warmup Iteration  27: 7740421.208 ops/s
# Warmup Iteration  28: 7651426.748 ops/s
# Warmup Iteration  29: 7600887.013 ops/s
# Warmup Iteration  30: 7703823.265 ops/s
Iteration   1: 7670853.608 ops/s
Iteration   2: 7645350.664 ops/s
Iteration   3: 7647491.823 ops/s
Iteration   4: 7619851.760 ops/s
Iteration   5: 7684434.255 ops/s
Iteration   6: 7636510.319 ops/s
Iteration   7: 7637776.210 ops/s
Iteration   8: 7628333.519 ops/s
Iteration   9: 7695069.555 ops/s
Iteration  10: 7560448.986 ops/s
Iteration  11: 7465172.075 ops/s
Iteration  12: 7719721.844 ops/s
Iteration  13: 7713873.981 ops/s
Iteration  14: 7658134.799 ops/s
Iteration  15: 7602969.444 ops/s
Iteration  16: 7694485.323 ops/s
Iteration  17: 7646236.230 ops/s
Iteration  18: 7649726.841 ops/s
Iteration  19: 7697495.245 ops/s
Iteration  20: 7614995.159 ops/s
Iteration  21: 7709392.916 ops/s
Iteration  22: 7681694.596 ops/s
Iteration  23: 7632841.317 ops/s
Iteration  24: 7572574.005 ops/s
Iteration  25: 7674767.641 ops/s
Iteration  26: 7658551.178 ops/s
Iteration  27: 7686096.010 ops/s
Iteration  28: 7690597.165 ops/s
Iteration  29: 7649569.762 ops/s
Iteration  30: 7640732.080 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromOptionalTest._Benchmark.benchmark_hasValue":
  7649524.944 ±(99.9%) 34827.237 ops/s [Average]
  (min, avg, max) = (7465172.075, 7649524.944, 7719721.844), stdev = 52127.773
  CI (99.9%): [7614697.707, 7684352.180] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableFromOptionalTest._Benchmark.benchmark_hasValue  thrpt   30  7649524.944 ± 34827.237  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_requestOverflowDoesNotStallStream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_requestOverflowDoesNotStallStream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3007782.478 ops/s
# Warmup Iteration   2: 3739408.114 ops/s
# Warmup Iteration   3: 4349067.525 ops/s
# Warmup Iteration   4: 4306746.279 ops/s
# Warmup Iteration   5: 4332048.249 ops/s
# Warmup Iteration   6: 4333914.829 ops/s
# Warmup Iteration   7: 4320351.471 ops/s
# Warmup Iteration   8: 4303400.003 ops/s
# Warmup Iteration   9: 4283678.236 ops/s
# Warmup Iteration  10: 4299885.596 ops/s
# Warmup Iteration  11: 4298559.922 ops/s
# Warmup Iteration  12: 4300933.594 ops/s
# Warmup Iteration  13: 4304440.575 ops/s
# Warmup Iteration  14: 4273238.825 ops/s
# Warmup Iteration  15: 4312847.470 ops/s
# Warmup Iteration  16: 4287427.597 ops/s
# Warmup Iteration  17: 4296179.061 ops/s
# Warmup Iteration  18: 4345268.811 ops/s
# Warmup Iteration  19: 4337991.222 ops/s
# Warmup Iteration  20: 4276436.134 ops/s
# Warmup Iteration  21: 4313479.036 ops/s
# Warmup Iteration  22: 4344499.603 ops/s
# Warmup Iteration  23: 4286494.690 ops/s
# Warmup Iteration  24: 4298228.850 ops/s
# Warmup Iteration  25: 4351813.583 ops/s
# Warmup Iteration  26: 4309990.744 ops/s
# Warmup Iteration  27: 4344762.849 ops/s
# Warmup Iteration  28: 4326252.814 ops/s
# Warmup Iteration  29: 4363927.207 ops/s
# Warmup Iteration  30: 4374991.172 ops/s
Iteration   1: 4321893.991 ops/s
Iteration   2: 4315045.874 ops/s
Iteration   3: 4318742.301 ops/s
Iteration   4: 4288811.264 ops/s
Iteration   5: 4333897.903 ops/s
Iteration   6: 4319133.238 ops/s
Iteration   7: 4314497.829 ops/s
Iteration   8: 4325014.490 ops/s
Iteration   9: 4272408.002 ops/s
Iteration  10: 4283016.854 ops/s
Iteration  11: 4299393.260 ops/s
Iteration  12: 4287005.343 ops/s
Iteration  13: 4314417.809 ops/s
Iteration  14: 4292137.904 ops/s
Iteration  15: 4362909.510 ops/s
Iteration  16: 4323911.946 ops/s
Iteration  17: 4317924.179 ops/s
Iteration  18: 4350575.826 ops/s
Iteration  19: 4364586.467 ops/s
Iteration  20: 4336909.207 ops/s
Iteration  21: 4305322.469 ops/s
Iteration  22: 4335791.740 ops/s
Iteration  23: 4357304.663 ops/s
Iteration  24: 4306172.356 ops/s
Iteration  25: 4311672.881 ops/s
Iteration  26: 4299038.574 ops/s
Iteration  27: 4318787.361 ops/s
Iteration  28: 4306767.491 ops/s
Iteration  29: 4328818.420 ops/s
Iteration  30: 4295462.400 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_requestOverflowDoesNotStallStream":
  4316912.385 ±(99.9%) 15396.947 ops/s [Average]
  (min, avg, max) = (4272408.002, 4316912.385, 4364586.467), stdev = 23045.427
  CI (99.9%): [4301515.438, 4332309.332] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_requestOverflowDoesNotStallStream  thrpt   30  4316912.385 ± 15396.947  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5836098.254 ops/s
# Warmup Iteration   2: 8491098.973 ops/s
# Warmup Iteration   3: 9652330.928 ops/s
# Warmup Iteration   4: 9654320.641 ops/s
# Warmup Iteration   5: 9491289.022 ops/s
# Warmup Iteration   6: 9617674.210 ops/s
# Warmup Iteration   7: 9646523.630 ops/s
# Warmup Iteration   8: 9586597.108 ops/s
# Warmup Iteration   9: 9597229.559 ops/s
# Warmup Iteration  10: 9544988.025 ops/s
# Warmup Iteration  11: 9591310.465 ops/s
# Warmup Iteration  12: 9589714.144 ops/s
# Warmup Iteration  13: 9581873.361 ops/s
# Warmup Iteration  14: 9543640.565 ops/s
# Warmup Iteration  15: 9655389.703 ops/s
# Warmup Iteration  16: 9692335.031 ops/s
# Warmup Iteration  17: 9570847.566 ops/s
# Warmup Iteration  18: 9612864.762 ops/s
# Warmup Iteration  19: 9680477.701 ops/s
# Warmup Iteration  20: 9662944.669 ops/s
# Warmup Iteration  21: 9571439.753 ops/s
# Warmup Iteration  22: 9614352.032 ops/s
# Warmup Iteration  23: 9671957.421 ops/s
# Warmup Iteration  24: 9620901.824 ops/s
# Warmup Iteration  25: 9622817.093 ops/s
# Warmup Iteration  26: 9599023.006 ops/s
# Warmup Iteration  27: 9535640.748 ops/s
# Warmup Iteration  28: 9572612.771 ops/s
# Warmup Iteration  29: 9546217.572 ops/s
# Warmup Iteration  30: 9552950.649 ops/s
Iteration   1: 9573706.255 ops/s
Iteration   2: 9617786.207 ops/s
Iteration   3: 9639074.074 ops/s
Iteration   4: 9566067.020 ops/s
Iteration   5: 9636711.111 ops/s
Iteration   6: 9678330.938 ops/s
Iteration   7: 9569523.768 ops/s
Iteration   8: 9384297.920 ops/s
Iteration   9: 9550351.420 ops/s
Iteration  10: 9641175.888 ops/s
Iteration  11: 9576408.017 ops/s
Iteration  12: 9596066.281 ops/s
Iteration  13: 9541374.297 ops/s
Iteration  14: 9534577.074 ops/s
Iteration  15: 9597213.080 ops/s
Iteration  16: 9623821.868 ops/s
Iteration  17: 9589603.384 ops/s
Iteration  18: 9618275.769 ops/s
Iteration  19: 9579512.279 ops/s
Iteration  20: 9659545.430 ops/s
Iteration  21: 9553964.240 ops/s
Iteration  22: 9622665.846 ops/s
Iteration  23: 9563769.960 ops/s
Iteration  24: 9582616.032 ops/s
Iteration  25: 9617036.844 ops/s
Iteration  26: 9620277.882 ops/s
Iteration  27: 9556478.875 ops/s
Iteration  28: 9630539.780 ops/s
Iteration  29: 9628489.454 ops/s
Iteration  30: 9563578.389 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustSource":
  9590427.979 ±(99.9%) 35790.996 ops/s [Average]
  (min, avg, max) = (9384297.920, 9590427.979, 9678330.938), stdev = 53570.282
  CI (99.9%): [9554636.983, 9626218.976] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustSource  thrpt   30  9590427.979 ± 35790.996  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_disposeOnNextAfterFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_disposeOnNextAfterFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1971449.734 ops/s
# Warmup Iteration   2: 2947553.002 ops/s
# Warmup Iteration   3: 3381249.922 ops/s
# Warmup Iteration   4: 3395166.995 ops/s
# Warmup Iteration   5: 3384722.004 ops/s
# Warmup Iteration   6: 3398668.877 ops/s
# Warmup Iteration   7: 3400385.979 ops/s
# Warmup Iteration   8: 3391380.574 ops/s
# Warmup Iteration   9: 3395658.381 ops/s
# Warmup Iteration  10: 3384468.862 ops/s
# Warmup Iteration  11: 3348336.699 ops/s
# Warmup Iteration  12: 3413489.070 ops/s
# Warmup Iteration  13: 3401399.405 ops/s
# Warmup Iteration  14: 3382266.946 ops/s
# Warmup Iteration  15: 3355021.827 ops/s
# Warmup Iteration  16: 3413101.464 ops/s
# Warmup Iteration  17: 3364139.929 ops/s
# Warmup Iteration  18: 3361737.700 ops/s
# Warmup Iteration  19: 3362546.732 ops/s
# Warmup Iteration  20: 3386505.073 ops/s
# Warmup Iteration  21: 3390007.843 ops/s
# Warmup Iteration  22: 3351820.154 ops/s
# Warmup Iteration  23: 3380518.842 ops/s
# Warmup Iteration  24: 3355670.580 ops/s
# Warmup Iteration  25: 3347571.782 ops/s
# Warmup Iteration  26: 3394020.794 ops/s
# Warmup Iteration  27: 3383467.630 ops/s
# Warmup Iteration  28: 3378846.427 ops/s
# Warmup Iteration  29: 3371932.129 ops/s
# Warmup Iteration  30: 3364409.026 ops/s
Iteration   1: 3355728.619 ops/s
Iteration   2: 3381363.347 ops/s
Iteration   3: 3387361.821 ops/s
Iteration   4: 3327949.090 ops/s
Iteration   5: 3371859.766 ops/s
Iteration   6: 3384488.025 ops/s
Iteration   7: 3337709.702 ops/s
Iteration   8: 3385144.407 ops/s
Iteration   9: 3384754.877 ops/s
Iteration  10: 3411638.710 ops/s
Iteration  11: 3384524.923 ops/s
Iteration  12: 3393161.529 ops/s
Iteration  13: 3332006.740 ops/s
Iteration  14: 3367795.015 ops/s
Iteration  15: 3383313.575 ops/s
Iteration  16: 3408241.179 ops/s
Iteration  17: 3392029.170 ops/s
Iteration  18: 3346833.784 ops/s
Iteration  19: 3352525.176 ops/s
Iteration  20: 3343623.528 ops/s
Iteration  21: 3331775.697 ops/s
Iteration  22: 3374980.653 ops/s
Iteration  23: 3379498.085 ops/s
Iteration  24: 3403648.311 ops/s
Iteration  25: 3380191.229 ops/s
Iteration  26: 3355830.824 ops/s
Iteration  27: 3328145.440 ops/s
Iteration  28: 3384002.349 ops/s
Iteration  29: 3350893.012 ops/s
Iteration  30: 3407840.070 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_disposeOnNextAfterFirst":
  3370961.955 ±(99.9%) 16841.788 ops/s [Average]
  (min, avg, max) = (3327949.090, 3370961.955, 3411638.710), stdev = 25207.998
  CI (99.9%): [3354120.167, 3387803.743] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_disposeOnNextAfterFirst  thrpt   30  3370961.955 ± 16841.788  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncArray$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncArray

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2775837.138 ops/s
# Warmup Iteration   2: 4375392.315 ops/s
# Warmup Iteration   3: 4804867.315 ops/s
# Warmup Iteration   4: 4815619.401 ops/s
# Warmup Iteration   5: 4798959.602 ops/s
# Warmup Iteration   6: 4791705.047 ops/s
# Warmup Iteration   7: 4818433.894 ops/s
# Warmup Iteration   8: 4801508.884 ops/s
# Warmup Iteration   9: 4803678.078 ops/s
# Warmup Iteration  10: 4797237.430 ops/s
# Warmup Iteration  11: 4820469.238 ops/s
# Warmup Iteration  12: 4787275.122 ops/s
# Warmup Iteration  13: 4792304.665 ops/s
# Warmup Iteration  14: 4794611.613 ops/s
# Warmup Iteration  15: 4813759.608 ops/s
# Warmup Iteration  16: 4796526.921 ops/s
# Warmup Iteration  17: 4756761.739 ops/s
# Warmup Iteration  18: 4766440.794 ops/s
# Warmup Iteration  19: 4772826.679 ops/s
# Warmup Iteration  20: 4791918.184 ops/s
# Warmup Iteration  21: 4772033.089 ops/s
# Warmup Iteration  22: 4718355.525 ops/s
# Warmup Iteration  23: 4786982.270 ops/s
# Warmup Iteration  24: 4777514.209 ops/s
# Warmup Iteration  25: 4761665.030 ops/s
# Warmup Iteration  26: 4759589.967 ops/s
# Warmup Iteration  27: 4781689.223 ops/s
# Warmup Iteration  28: 4798774.316 ops/s
# Warmup Iteration  29: 4759183.448 ops/s
# Warmup Iteration  30: 4760227.711 ops/s
Iteration   1: 4771387.830 ops/s
Iteration   2: 4773856.337 ops/s
Iteration   3: 4790657.591 ops/s
Iteration   4: 4763594.250 ops/s
Iteration   5: 4712408.535 ops/s
Iteration   6: 4681063.595 ops/s
Iteration   7: 4745671.715 ops/s
Iteration   8: 4749123.576 ops/s
Iteration   9: 4759341.306 ops/s
Iteration  10: 4754052.844 ops/s
Iteration  11: 4778665.130 ops/s
Iteration  12: 4771223.075 ops/s
Iteration  13: 4767377.203 ops/s
Iteration  14: 4782941.870 ops/s
Iteration  15: 4779748.914 ops/s
Iteration  16: 4782660.724 ops/s
Iteration  17: 4777012.754 ops/s
Iteration  18: 4781853.147 ops/s
Iteration  19: 4791830.531 ops/s
Iteration  20: 4766070.048 ops/s
Iteration  21: 4763778.032 ops/s
Iteration  22: 4749713.127 ops/s
Iteration  23: 4747807.573 ops/s
Iteration  24: 4771204.172 ops/s
Iteration  25: 4738811.111 ops/s
Iteration  26: 4771338.973 ops/s
Iteration  27: 4784406.890 ops/s
Iteration  28: 4795140.037 ops/s
Iteration  29: 4772476.571 ops/s
Iteration  30: 4760409.951 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncArray":
  4764520.914 ±(99.9%) 15815.523 ops/s [Average]
  (min, avg, max) = (4681063.595, 4764520.914, 4795140.037), stdev = 23671.933
  CI (99.9%): [4748705.390, 4780336.437] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableFuseableTest._Benchmark.benchmark_syncArray  thrpt   30  4764520.914 ± 15815.523  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3347701.543 ops/s
# Warmup Iteration   2: 4785400.057 ops/s
# Warmup Iteration   3: 5498939.761 ops/s
# Warmup Iteration   4: 5422740.785 ops/s
# Warmup Iteration   5: 5479752.168 ops/s
# Warmup Iteration   6: 5411525.233 ops/s
# Warmup Iteration   7: 5436111.514 ops/s
# Warmup Iteration   8: 5436079.003 ops/s
# Warmup Iteration   9: 5410489.503 ops/s
# Warmup Iteration  10: 5441475.564 ops/s
# Warmup Iteration  11: 5467091.599 ops/s
# Warmup Iteration  12: 5449777.960 ops/s
# Warmup Iteration  13: 5480124.736 ops/s
# Warmup Iteration  14: 5440429.043 ops/s
# Warmup Iteration  15: 5428668.462 ops/s
# Warmup Iteration  16: 5478382.273 ops/s
# Warmup Iteration  17: 5426764.423 ops/s
# Warmup Iteration  18: 5397860.195 ops/s
# Warmup Iteration  19: 5430115.842 ops/s
# Warmup Iteration  20: 5457667.147 ops/s
# Warmup Iteration  21: 5420890.041 ops/s
# Warmup Iteration  22: 5419275.241 ops/s
# Warmup Iteration  23: 5444678.425 ops/s
# Warmup Iteration  24: 5393326.747 ops/s
# Warmup Iteration  25: 5416491.616 ops/s
# Warmup Iteration  26: 5399619.256 ops/s
# Warmup Iteration  27: 5426384.586 ops/s
# Warmup Iteration  28: 5435973.386 ops/s
# Warmup Iteration  29: 5426915.649 ops/s
# Warmup Iteration  30: 5462751.755 ops/s
Iteration   1: 5453738.566 ops/s
Iteration   2: 5420970.760 ops/s
Iteration   3: 5382707.996 ops/s
Iteration   4: 5391898.854 ops/s
Iteration   5: 5338920.974 ops/s
Iteration   6: 5422128.824 ops/s
Iteration   7: 5408604.635 ops/s
Iteration   8: 5463059.976 ops/s
Iteration   9: 5490736.489 ops/s
Iteration  10: 5420324.262 ops/s
Iteration  11: 5452147.317 ops/s
Iteration  12: 5413425.544 ops/s
Iteration  13: 5418665.142 ops/s
Iteration  14: 5424762.395 ops/s
Iteration  15: 5469705.888 ops/s
Iteration  16: 5443750.230 ops/s
Iteration  17: 5429170.474 ops/s
Iteration  18: 5422511.546 ops/s
Iteration  19: 5447799.574 ops/s
Iteration  20: 5486616.564 ops/s
Iteration  21: 5447100.275 ops/s
Iteration  22: 5428860.536 ops/s
Iteration  23: 5396337.218 ops/s
Iteration  24: 5430022.207 ops/s
Iteration  25: 5420324.912 ops/s
Iteration  26: 5412927.185 ops/s
Iteration  27: 5430457.035 ops/s
Iteration  28: 5463998.528 ops/s
Iteration  29: 5410759.296 ops/s
Iteration  30: 5443837.738 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext":
  5429542.365 ±(99.9%) 20690.743 ops/s [Average]
  (min, avg, max) = (5338920.974, 5429542.365, 5490736.489), stdev = 30968.933
  CI (99.9%): [5408851.621, 5450233.108] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext  thrpt   30  5429542.365 ± 20690.743  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_strictMode$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_strictMode

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4772385.607 ops/s
# Warmup Iteration   2: 6389300.874 ops/s
# Warmup Iteration   3: 7395602.235 ops/s
# Warmup Iteration   4: 7310560.508 ops/s
# Warmup Iteration   5: 7326747.618 ops/s
# Warmup Iteration   6: 7349488.946 ops/s
# Warmup Iteration   7: 7340719.400 ops/s
# Warmup Iteration   8: 7322310.218 ops/s
# Warmup Iteration   9: 7367397.051 ops/s
# Warmup Iteration  10: 7352910.776 ops/s
# Warmup Iteration  11: 7350302.921 ops/s
# Warmup Iteration  12: 7330070.852 ops/s
# Warmup Iteration  13: 7325561.078 ops/s
# Warmup Iteration  14: 7317295.967 ops/s
# Warmup Iteration  15: 7376648.517 ops/s
# Warmup Iteration  16: 7361093.570 ops/s
# Warmup Iteration  17: 7316885.604 ops/s
# Warmup Iteration  18: 7338136.258 ops/s
# Warmup Iteration  19: 7324531.066 ops/s
# Warmup Iteration  20: 7324968.544 ops/s
# Warmup Iteration  21: 7341341.893 ops/s
# Warmup Iteration  22: 7301752.046 ops/s
# Warmup Iteration  23: 7342351.763 ops/s
# Warmup Iteration  24: 7313366.499 ops/s
# Warmup Iteration  25: 7316821.768 ops/s
# Warmup Iteration  26: 7319914.893 ops/s
# Warmup Iteration  27: 7295168.255 ops/s
# Warmup Iteration  28: 7310060.087 ops/s
# Warmup Iteration  29: 7317994.188 ops/s
# Warmup Iteration  30: 7317415.944 ops/s
Iteration   1: 7304173.270 ops/s
Iteration   2: 7315587.448 ops/s
Iteration   3: 7316859.052 ops/s
Iteration   4: 7168425.449 ops/s
Iteration   5: 7309777.441 ops/s
Iteration   6: 7355788.814 ops/s
Iteration   7: 7330363.821 ops/s
Iteration   8: 7289909.713 ops/s
Iteration   9: 7351137.888 ops/s
Iteration  10: 7373523.324 ops/s
Iteration  11: 7359124.061 ops/s
Iteration  12: 7331140.287 ops/s
Iteration  13: 7333855.161 ops/s
Iteration  14: 7347849.216 ops/s
Iteration  15: 7312288.807 ops/s
Iteration  16: 7282054.043 ops/s
Iteration  17: 7290620.959 ops/s
Iteration  18: 7345359.433 ops/s
Iteration  19: 7359131.735 ops/s
Iteration  20: 7339120.626 ops/s
Iteration  21: 7374902.683 ops/s
Iteration  22: 7391193.707 ops/s
Iteration  23: 7326959.821 ops/s
Iteration  24: 7332567.438 ops/s
Iteration  25: 7347449.621 ops/s
Iteration  26: 7320018.830 ops/s
Iteration  27: 7324910.354 ops/s
Iteration  28: 7340803.390 ops/s
Iteration  29: 7288529.719 ops/s
Iteration  30: 7353159.560 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_strictMode":
  7327219.522 ±(99.9%) 26907.582 ops/s [Average]
  (min, avg, max) = (7168425.449, 7327219.522, 7391193.707), stdev = 40274.004
  CI (99.9%): [7300311.941, 7354127.104] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
StrictSubscriberTest._Benchmark.benchmark_strictMode  thrpt   30  7327219.522 ± 26907.582  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambIterableOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambIterableOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 545155.154 ops/s
# Warmup Iteration   2: 737113.523 ops/s
# Warmup Iteration   3: 713363.307 ops/s
# Warmup Iteration   4: 810010.388 ops/s
# Warmup Iteration   5: 811136.351 ops/s
# Warmup Iteration   6: 810222.806 ops/s
# Warmup Iteration   7: 810617.946 ops/s
# Warmup Iteration   8: 808291.967 ops/s
# Warmup Iteration   9: 808935.937 ops/s
# Warmup Iteration  10: 808263.480 ops/s
# Warmup Iteration  11: 806481.579 ops/s
# Warmup Iteration  12: 801850.189 ops/s
# Warmup Iteration  13: 803251.248 ops/s
# Warmup Iteration  14: 799444.923 ops/s
# Warmup Iteration  15: 806774.388 ops/s
# Warmup Iteration  16: 805594.918 ops/s
# Warmup Iteration  17: 832004.129 ops/s
# Warmup Iteration  18: 836602.953 ops/s
# Warmup Iteration  19: 838494.845 ops/s
# Warmup Iteration  20: 840507.931 ops/s
# Warmup Iteration  21: 838875.193 ops/s
# Warmup Iteration  22: 839559.544 ops/s
# Warmup Iteration  23: 844307.170 ops/s
# Warmup Iteration  24: 838433.170 ops/s
# Warmup Iteration  25: 843531.938 ops/s
# Warmup Iteration  26: 841766.418 ops/s
# Warmup Iteration  27: 839996.912 ops/s
# Warmup Iteration  28: 839673.489 ops/s
# Warmup Iteration  29: 839494.815 ops/s
# Warmup Iteration  30: 835824.478 ops/s
Iteration   1: 836082.009 ops/s
Iteration   2: 827017.367 ops/s
Iteration   3: 815331.912 ops/s
Iteration   4: 833465.428 ops/s
Iteration   5: 833991.747 ops/s
Iteration   6: 837696.793 ops/s
Iteration   7: 842300.123 ops/s
Iteration   8: 838048.009 ops/s
Iteration   9: 838661.263 ops/s
Iteration  10: 842199.165 ops/s
Iteration  11: 841861.020 ops/s
Iteration  12: 839962.156 ops/s
Iteration  13: 839752.916 ops/s
Iteration  14: 843608.602 ops/s
Iteration  15: 840745.960 ops/s
Iteration  16: 840951.800 ops/s
Iteration  17: 838150.081 ops/s
Iteration  18: 843989.279 ops/s
Iteration  19: 838258.963 ops/s
Iteration  20: 838092.489 ops/s
Iteration  21: 835331.110 ops/s
Iteration  22: 840781.229 ops/s
Iteration  23: 840461.533 ops/s
Iteration  24: 842633.594 ops/s
Iteration  25: 841551.947 ops/s
Iteration  26: 845545.782 ops/s
Iteration  27: 842136.799 ops/s
Iteration  28: 844629.425 ops/s
Iteration  29: 836556.209 ops/s
Iteration  30: 842161.985 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambIterableOrder":
  838731.890 ±(99.9%) 3910.079 ops/s [Average]
  (min, avg, max) = (815331.912, 838731.890, 845545.782), stdev = 5852.423
  CI (99.9%): [834821.811, 842641.969] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
FlowableAmbTest._Benchmark.benchmark_ambIterableOrder  thrpt   30  838731.890 ± 3910.079  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 505438.671 ops/s
# Warmup Iteration   2: 669109.524 ops/s
# Warmup Iteration   3: 647998.056 ops/s
# Warmup Iteration   4: 719366.459 ops/s
# Warmup Iteration   5: 720524.139 ops/s
# Warmup Iteration   6: 719874.553 ops/s
# Warmup Iteration   7: 716985.016 ops/s
# Warmup Iteration   8: 716417.297 ops/s
# Warmup Iteration   9: 718710.453 ops/s
# Warmup Iteration  10: 720483.198 ops/s
# Warmup Iteration  11: 716975.318 ops/s
# Warmup Iteration  12: 720093.147 ops/s
# Warmup Iteration  13: 708616.195 ops/s
# Warmup Iteration  14: 715608.033 ops/s
# Warmup Iteration  15: 718020.999 ops/s
# Warmup Iteration  16: 713751.672 ops/s
# Warmup Iteration  17: 746183.135 ops/s
# Warmup Iteration  18: 746158.441 ops/s
# Warmup Iteration  19: 744332.897 ops/s
# Warmup Iteration  20: 746826.994 ops/s
# Warmup Iteration  21: 751210.382 ops/s
# Warmup Iteration  22: 743208.899 ops/s
# Warmup Iteration  23: 743133.522 ops/s
# Warmup Iteration  24: 751587.943 ops/s
# Warmup Iteration  25: 747731.641 ops/s
# Warmup Iteration  26: 744727.615 ops/s
# Warmup Iteration  27: 749962.360 ops/s
# Warmup Iteration  28: 746271.341 ops/s
# Warmup Iteration  29: 750774.013 ops/s
# Warmup Iteration  30: 744463.545 ops/s
Iteration   1: 737980.655 ops/s
Iteration   2: 735605.980 ops/s
Iteration   3: 741834.334 ops/s
Iteration   4: 745742.877 ops/s
Iteration   5: 746765.913 ops/s
Iteration   6: 749087.048 ops/s
Iteration   7: 747681.145 ops/s
Iteration   8: 743169.669 ops/s
Iteration   9: 740837.967 ops/s
Iteration  10: 744464.588 ops/s
Iteration  11: 750341.393 ops/s
Iteration  12: 749782.963 ops/s
Iteration  13: 748153.328 ops/s
Iteration  14: 747559.952 ops/s
Iteration  15: 747780.798 ops/s
Iteration  16: 744762.800 ops/s
Iteration  17: 747349.050 ops/s
Iteration  18: 743569.700 ops/s
Iteration  19: 747166.946 ops/s
Iteration  20: 746736.867 ops/s
Iteration  21: 743500.462 ops/s
Iteration  22: 749824.671 ops/s
Iteration  23: 751120.343 ops/s
Iteration  24: 744977.116 ops/s
Iteration  25: 746072.625 ops/s
Iteration  26: 745738.581 ops/s
Iteration  27: 749344.107 ops/s
Iteration  28: 745992.647 ops/s
Iteration  29: 748279.799 ops/s
Iteration  30: 745732.963 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_error":
  745898.576 ±(99.9%) 2349.528 ops/s [Average]
  (min, avg, max) = (735605.980, 745898.576, 751120.343), stdev = 3516.663
  CI (99.9%): [743549.048, 748248.104] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
FlowableBlockingStreamTest._Benchmark.benchmark_error  thrpt   30  745898.576 ± 2349.528  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_justConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_justConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2082404.903 ops/s
# Warmup Iteration   2: 4166571.706 ops/s
# Warmup Iteration   3: 4503493.643 ops/s
# Warmup Iteration   4: 4507196.980 ops/s
# Warmup Iteration   5: 4498406.454 ops/s
# Warmup Iteration   6: 4501624.734 ops/s
# Warmup Iteration   7: 4474961.009 ops/s
# Warmup Iteration   8: 4502152.112 ops/s
# Warmup Iteration   9: 4493179.627 ops/s
# Warmup Iteration  10: 4456416.157 ops/s
# Warmup Iteration  11: 4470706.652 ops/s
# Warmup Iteration  12: 4469888.134 ops/s
# Warmup Iteration  13: 4504708.526 ops/s
# Warmup Iteration  14: 4474665.475 ops/s
# Warmup Iteration  15: 4485679.722 ops/s
# Warmup Iteration  16: 4514665.673 ops/s
# Warmup Iteration  17: 4504806.435 ops/s
# Warmup Iteration  18: 4501730.229 ops/s
# Warmup Iteration  19: 4481071.842 ops/s
# Warmup Iteration  20: 4486518.014 ops/s
# Warmup Iteration  21: 4523841.452 ops/s
# Warmup Iteration  22: 4505219.001 ops/s
# Warmup Iteration  23: 4485582.539 ops/s
# Warmup Iteration  24: 4481908.170 ops/s
# Warmup Iteration  25: 4495413.397 ops/s
# Warmup Iteration  26: 4465994.055 ops/s
# Warmup Iteration  27: 4474401.352 ops/s
# Warmup Iteration  28: 4481833.424 ops/s
# Warmup Iteration  29: 4479251.251 ops/s
# Warmup Iteration  30: 4462714.977 ops/s
Iteration   1: 4397665.041 ops/s
Iteration   2: 4448389.068 ops/s
Iteration   3: 4488377.510 ops/s
Iteration   4: 4491411.276 ops/s
Iteration   5: 4498291.191 ops/s
Iteration   6: 4520967.157 ops/s
Iteration   7: 4504861.886 ops/s
Iteration   8: 4487143.249 ops/s
Iteration   9: 4498820.873 ops/s
Iteration  10: 4499786.332 ops/s
Iteration  11: 4489915.956 ops/s
Iteration  12: 4487737.909 ops/s
Iteration  13: 4485051.970 ops/s
Iteration  14: 4486425.891 ops/s
Iteration  15: 4506921.296 ops/s
Iteration  16: 4491634.049 ops/s
Iteration  17: 4500057.494 ops/s
Iteration  18: 4472761.051 ops/s
Iteration  19: 4461568.967 ops/s
Iteration  20: 4520302.037 ops/s
Iteration  21: 4492710.647 ops/s
Iteration  22: 4506940.948 ops/s
Iteration  23: 4513573.426 ops/s
Iteration  24: 4507759.097 ops/s
Iteration  25: 4505374.582 ops/s
Iteration  26: 4497418.678 ops/s
Iteration  27: 4501009.859 ops/s
Iteration  28: 4498641.130 ops/s
Iteration  29: 4479001.366 ops/s
Iteration  30: 4488441.223 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_justConditional":
  4490965.372 ±(99.9%) 15642.383 ops/s [Average]
  (min, avg, max) = (4397665.041, 4490965.372, 4520967.157), stdev = 23412.784
  CI (99.9%): [4475322.989, 4506607.755] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_justConditional  thrpt   30  4490965.372 ± 15642.383  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 431712.617 ops/s
# Warmup Iteration   2: 574710.904 ops/s
# Warmup Iteration   3: 557976.410 ops/s
# Warmup Iteration   4: 639300.481 ops/s
# Warmup Iteration   5: 661617.593 ops/s
# Warmup Iteration   6: 659088.906 ops/s
# Warmup Iteration   7: 657248.964 ops/s
# Warmup Iteration   8: 658466.633 ops/s
# Warmup Iteration   9: 655720.592 ops/s
# Warmup Iteration  10: 657092.742 ops/s
# Warmup Iteration  11: 651204.720 ops/s
# Warmup Iteration  12: 653718.219 ops/s
# Warmup Iteration  13: 656922.542 ops/s
# Warmup Iteration  14: 647947.588 ops/s
# Warmup Iteration  15: 649926.679 ops/s
# Warmup Iteration  16: 653803.051 ops/s
# Warmup Iteration  17: 677166.072 ops/s
# Warmup Iteration  18: 678079.445 ops/s
# Warmup Iteration  19: 677549.406 ops/s
# Warmup Iteration  20: 677185.923 ops/s
# Warmup Iteration  21: 678619.991 ops/s
# Warmup Iteration  22: 678972.321 ops/s
# Warmup Iteration  23: 681039.689 ops/s
# Warmup Iteration  24: 681276.308 ops/s
# Warmup Iteration  25: 678026.162 ops/s
# Warmup Iteration  26: 680734.919 ops/s
# Warmup Iteration  27: 677248.653 ops/s
# Warmup Iteration  28: 674305.461 ops/s
# Warmup Iteration  29: 671630.252 ops/s
# Warmup Iteration  30: 666019.737 ops/s
Iteration   1: 672933.032 ops/s
Iteration   2: 680253.375 ops/s
Iteration   3: 677582.263 ops/s
Iteration   4: 681952.209 ops/s
Iteration   5: 680407.112 ops/s
Iteration   6: 678621.265 ops/s
Iteration   7: 674896.274 ops/s
Iteration   8: 681286.841 ops/s
Iteration   9: 677766.019 ops/s
Iteration  10: 675063.334 ops/s
Iteration  11: 676050.615 ops/s
Iteration  12: 679595.654 ops/s
Iteration  13: 678551.078 ops/s
Iteration  14: 674353.111 ops/s
Iteration  15: 678552.260 ops/s
Iteration  16: 677676.431 ops/s
Iteration  17: 681105.305 ops/s
Iteration  18: 677471.095 ops/s
Iteration  19: 679012.182 ops/s
Iteration  20: 678407.966 ops/s
Iteration  21: 681608.475 ops/s
Iteration  22: 675640.038 ops/s
Iteration  23: 678920.301 ops/s
Iteration  24: 674382.556 ops/s
Iteration  25: 681350.699 ops/s
Iteration  26: 681063.443 ops/s
Iteration  27: 674986.448 ops/s
Iteration  28: 680962.461 ops/s
Iteration  29: 677964.211 ops/s
Iteration  30: 675157.757 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_badRequest":
  678119.127 ±(99.9%) 1718.929 ops/s [Average]
  (min, avg, max) = (672933.032, 678119.127, 681952.209), stdev = 2572.812
  CI (99.9%): [676400.198, 679838.056] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowableTakeLastTest._Benchmark.benchmark_badRequest  thrpt   30  678119.127 ± 1718.929  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_overflowQueue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_overflowQueue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 706411.593 ops/s
# Warmup Iteration   2: 825540.563 ops/s
# Warmup Iteration   3: 840230.821 ops/s
# Warmup Iteration   4: 900629.804 ops/s
# Warmup Iteration   5: 908696.895 ops/s
# Warmup Iteration   6: 906066.701 ops/s
# Warmup Iteration   7: 901102.217 ops/s
# Warmup Iteration   8: 902006.209 ops/s
# Warmup Iteration   9: 908366.851 ops/s
# Warmup Iteration  10: 903160.743 ops/s
# Warmup Iteration  11: 901460.229 ops/s
# Warmup Iteration  12: 900155.166 ops/s
# Warmup Iteration  13: 898711.768 ops/s
# Warmup Iteration  14: 898537.175 ops/s
# Warmup Iteration  15: 896649.346 ops/s
# Warmup Iteration  16: 897792.478 ops/s
# Warmup Iteration  17: 947515.684 ops/s
# Warmup Iteration  18: 945186.215 ops/s
# Warmup Iteration  19: 944803.652 ops/s
# Warmup Iteration  20: 951348.367 ops/s
# Warmup Iteration  21: 951339.614 ops/s
# Warmup Iteration  22: 942258.051 ops/s
# Warmup Iteration  23: 944293.014 ops/s
# Warmup Iteration  24: 951057.781 ops/s
# Warmup Iteration  25: 942486.788 ops/s
# Warmup Iteration  26: 944126.394 ops/s
# Warmup Iteration  27: 940482.937 ops/s
# Warmup Iteration  28: 936878.737 ops/s
# Warmup Iteration  29: 944639.584 ops/s
# Warmup Iteration  30: 946300.916 ops/s
Iteration   1: 946582.886 ops/s
Iteration   2: 945387.035 ops/s
Iteration   3: 949555.037 ops/s
Iteration   4: 946566.450 ops/s
Iteration   5: 944524.887 ops/s
Iteration   6: 948372.209 ops/s
Iteration   7: 948643.495 ops/s
Iteration   8: 947387.732 ops/s
Iteration   9: 954778.495 ops/s
Iteration  10: 946456.996 ops/s
Iteration  11: 949540.033 ops/s
Iteration  12: 950982.080 ops/s
Iteration  13: 945066.293 ops/s
Iteration  14: 943732.404 ops/s
Iteration  15: 946518.047 ops/s
Iteration  16: 945137.006 ops/s
Iteration  17: 944250.144 ops/s
Iteration  18: 946395.842 ops/s
Iteration  19: 948825.957 ops/s
Iteration  20: 947579.989 ops/s
Iteration  21: 944197.645 ops/s
Iteration  22: 948002.413 ops/s
Iteration  23: 951727.674 ops/s
Iteration  24: 949656.398 ops/s
Iteration  25: 951987.432 ops/s
Iteration  26: 948725.892 ops/s
Iteration  27: 951464.761 ops/s
Iteration  28: 943101.078 ops/s
Iteration  29: 942184.224 ops/s
Iteration  30: 944527.846 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_overflowQueue":
  947395.279 ±(99.9%) 1996.828 ops/s [Average]
  (min, avg, max) = (942184.224, 947395.279, 954778.495), stdev = 2988.759
  CI (99.9%): [945398.451, 949392.108] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
BlockingFlowableToIteratorTest._Benchmark.benchmark_overflowQueue  thrpt   30  947395.279 ± 1996.828  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_hasNextThrowsLater$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_hasNextThrowsLater

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 307441.560 ops/s
# Warmup Iteration   2: 434688.792 ops/s
# Warmup Iteration   3: 421738.248 ops/s
# Warmup Iteration   4: 474048.352 ops/s
# Warmup Iteration   5: 473835.767 ops/s
# Warmup Iteration   6: 471801.578 ops/s
# Warmup Iteration   7: 476165.973 ops/s
# Warmup Iteration   8: 473891.074 ops/s
# Warmup Iteration   9: 473519.921 ops/s
# Warmup Iteration  10: 473954.266 ops/s
# Warmup Iteration  11: 476533.532 ops/s
# Warmup Iteration  12: 473615.616 ops/s
# Warmup Iteration  13: 472197.978 ops/s
# Warmup Iteration  14: 472425.590 ops/s
# Warmup Iteration  15: 470396.239 ops/s
# Warmup Iteration  16: 473034.256 ops/s
# Warmup Iteration  17: 488128.592 ops/s
# Warmup Iteration  18: 489462.816 ops/s
# Warmup Iteration  19: 488156.237 ops/s
# Warmup Iteration  20: 487552.663 ops/s
# Warmup Iteration  21: 485272.814 ops/s
# Warmup Iteration  22: 487635.769 ops/s
# Warmup Iteration  23: 490401.880 ops/s
# Warmup Iteration  24: 489745.528 ops/s
# Warmup Iteration  25: 487429.759 ops/s
# Warmup Iteration  26: 486792.242 ops/s
# Warmup Iteration  27: 478263.766 ops/s
# Warmup Iteration  28: 478238.625 ops/s
# Warmup Iteration  29: 486576.963 ops/s
# Warmup Iteration  30: 488424.100 ops/s
Iteration   1: 490434.633 ops/s
Iteration   2: 488057.511 ops/s
Iteration   3: 489652.357 ops/s
Iteration   4: 485746.014 ops/s
Iteration   5: 490358.998 ops/s
Iteration   6: 492056.232 ops/s
Iteration   7: 489745.156 ops/s
Iteration   8: 486931.669 ops/s
Iteration   9: 488552.222 ops/s
Iteration  10: 490533.724 ops/s
Iteration  11: 490297.084 ops/s
Iteration  12: 490441.433 ops/s
Iteration  13: 490212.652 ops/s
Iteration  14: 487907.739 ops/s
Iteration  15: 489679.417 ops/s
Iteration  16: 489678.343 ops/s
Iteration  17: 489807.986 ops/s
Iteration  18: 489092.926 ops/s
Iteration  19: 487728.671 ops/s
Iteration  20: 488063.452 ops/s
Iteration  21: 486679.701 ops/s
Iteration  22: 488500.353 ops/s
Iteration  23: 487123.758 ops/s
Iteration  24: 482903.068 ops/s
Iteration  25: 486340.883 ops/s
Iteration  26: 489558.620 ops/s
Iteration  27: 487462.880 ops/s
Iteration  28: 488428.163 ops/s
Iteration  29: 490721.650 ops/s
Iteration  30: 491049.173 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_hasNextThrowsLater":
  488791.549 ±(99.9%) 1273.065 ops/s [Average]
  (min, avg, max) = (482903.068, 488791.549, 492056.232), stdev = 1905.463
  CI (99.9%): [487518.484, 490064.613] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_hasNextThrowsLater  thrpt   30  488791.549 ± 1273.065  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_cancelWhileSubscribing$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_cancelWhileSubscribing

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1320552.563 ops/s
# Warmup Iteration   2: 1973345.292 ops/s
# Warmup Iteration   3: 2188740.047 ops/s
# Warmup Iteration   4: 2209803.974 ops/s
# Warmup Iteration   5: 2219734.148 ops/s
# Warmup Iteration   6: 2229150.069 ops/s
# Warmup Iteration   7: 2229261.212 ops/s
# Warmup Iteration   8: 2232963.719 ops/s
# Warmup Iteration   9: 2215877.168 ops/s
# Warmup Iteration  10: 2190072.122 ops/s
# Warmup Iteration  11: 2241561.496 ops/s
# Warmup Iteration  12: 2212106.449 ops/s
# Warmup Iteration  13: 2228769.848 ops/s
# Warmup Iteration  14: 2246745.452 ops/s
# Warmup Iteration  15: 2236798.701 ops/s
# Warmup Iteration  16: 2221643.518 ops/s
# Warmup Iteration  17: 2256385.179 ops/s
# Warmup Iteration  18: 2262730.988 ops/s
# Warmup Iteration  19: 2234838.812 ops/s
# Warmup Iteration  20: 2243587.320 ops/s
# Warmup Iteration  21: 2234080.247 ops/s
# Warmup Iteration  22: 2250696.025 ops/s
# Warmup Iteration  23: 2251690.301 ops/s
# Warmup Iteration  24: 2216594.044 ops/s
# Warmup Iteration  25: 2221137.919 ops/s
# Warmup Iteration  26: 2131709.381 ops/s
# Warmup Iteration  27: 2184240.595 ops/s
# Warmup Iteration  28: 2253946.136 ops/s
# Warmup Iteration  29: 2247879.277 ops/s
# Warmup Iteration  30: 2251225.929 ops/s
Iteration   1: 2241152.104 ops/s
Iteration   2: 2231554.670 ops/s
Iteration   3: 2233711.396 ops/s
Iteration   4: 2255141.531 ops/s
Iteration   5: 2243084.110 ops/s
Iteration   6: 2260054.612 ops/s
Iteration   7: 2252893.024 ops/s
Iteration   8: 2239595.883 ops/s
Iteration   9: 2228960.828 ops/s
Iteration  10: 2241790.351 ops/s
Iteration  11: 2245676.810 ops/s
Iteration  12: 2240308.857 ops/s
Iteration  13: 2209611.420 ops/s
Iteration  14: 2249011.141 ops/s
Iteration  15: 2252585.700 ops/s
Iteration  16: 2232651.504 ops/s
Iteration  17: 2255625.513 ops/s
Iteration  18: 2247715.953 ops/s
Iteration  19: 2248099.388 ops/s
Iteration  20: 2237190.872 ops/s
Iteration  21: 2239922.802 ops/s
Iteration  22: 2257260.557 ops/s
Iteration  23: 2245347.665 ops/s
Iteration  24: 2220607.399 ops/s
Iteration  25: 2237252.869 ops/s
Iteration  26: 2241978.269 ops/s
Iteration  27: 2236380.584 ops/s
Iteration  28: 2246388.756 ops/s
Iteration  29: 2213909.895 ops/s
Iteration  30: 2247057.599 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_cancelWhileSubscribing":
  2241084.069 ±(99.9%) 7977.345 ops/s [Average]
  (min, avg, max) = (2209611.420, 2241084.069, 2260054.612), stdev = 11940.115
  CI (99.9%): [2233106.724, 2249061.413] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_cancelWhileSubscribing  thrpt   30  2241084.069 ± 7977.345  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_windowOpenCloseCloseReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_windowOpenCloseCloseReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 391451.075 ops/s
# Warmup Iteration   2: 470673.951 ops/s
# Warmup Iteration   3: 517781.417 ops/s
# Warmup Iteration   4: 469229.358 ops/s
# Warmup Iteration   5: 531562.211 ops/s
# Warmup Iteration   6: 532696.513 ops/s
# Warmup Iteration   7: 532279.116 ops/s
# Warmup Iteration   8: 532000.910 ops/s
# Warmup Iteration   9: 532554.904 ops/s
# Warmup Iteration  10: 529710.783 ops/s
# Warmup Iteration  11: 531402.539 ops/s
# Warmup Iteration  12: 530838.993 ops/s
# Warmup Iteration  13: 532274.333 ops/s
# Warmup Iteration  14: 529409.310 ops/s
# Warmup Iteration  15: 532150.197 ops/s
# Warmup Iteration  16: 529523.969 ops/s
# Warmup Iteration  17: 543427.974 ops/s
# Warmup Iteration  18: 544003.819 ops/s
# Warmup Iteration  19: 542751.014 ops/s
# Warmup Iteration  20: 541102.029 ops/s
# Warmup Iteration  21: 537267.436 ops/s
# Warmup Iteration  22: 545410.723 ops/s
# Warmup Iteration  23: 542267.896 ops/s
# Warmup Iteration  24: 537136.464 ops/s
# Warmup Iteration  25: 534541.991 ops/s
# Warmup Iteration  26: 537900.231 ops/s
# Warmup Iteration  27: 543641.769 ops/s
# Warmup Iteration  28: 543370.368 ops/s
# Warmup Iteration  29: 542662.963 ops/s
# Warmup Iteration  30: 536820.555 ops/s
Iteration   1: 542319.202 ops/s
Iteration   2: 541263.839 ops/s
Iteration   3: 545531.775 ops/s
Iteration   4: 541111.184 ops/s
Iteration   5: 543183.709 ops/s
Iteration   6: 541722.389 ops/s
Iteration   7: 546179.149 ops/s
Iteration   8: 543726.079 ops/s
Iteration   9: 542804.785 ops/s
Iteration  10: 545310.864 ops/s
Iteration  11: 542037.908 ops/s
Iteration  12: 539784.650 ops/s
Iteration  13: 542890.449 ops/s
Iteration  14: 543433.652 ops/s
Iteration  15: 544941.461 ops/s
Iteration  16: 540047.800 ops/s
Iteration  17: 541989.860 ops/s
Iteration  18: 543095.943 ops/s
Iteration  19: 542546.680 ops/s
Iteration  20: 543053.157 ops/s
Iteration  21: 543875.111 ops/s
Iteration  22: 544174.249 ops/s
Iteration  23: 542828.512 ops/s
Iteration  24: 541604.726 ops/s
Iteration  25: 539123.117 ops/s
Iteration  26: 545055.343 ops/s
Iteration  27: 542397.106 ops/s
Iteration  28: 542209.901 ops/s
Iteration  29: 541835.240 ops/s
Iteration  30: 542080.739 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_windowOpenCloseCloseReturnsNull":
  542738.619 ±(99.9%) 1115.457 ops/s [Average]
  (min, avg, max) = (539123.117, 542738.619, 546179.149), stdev = 1669.564
  CI (99.9%): [541623.162, 543854.077] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_windowOpenCloseCloseReturnsNull  thrpt   30  542738.619 ± 1115.457  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_delayedUpstreamOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_delayedUpstreamOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7727644.705 ops/s
# Warmup Iteration   2: 11008747.461 ops/s
# Warmup Iteration   3: 12129807.179 ops/s
# Warmup Iteration   4: 12003323.802 ops/s
# Warmup Iteration   5: 11833849.557 ops/s
# Warmup Iteration   6: 11947368.029 ops/s
# Warmup Iteration   7: 11999253.650 ops/s
# Warmup Iteration   8: 11940001.578 ops/s
# Warmup Iteration   9: 12068573.956 ops/s
# Warmup Iteration  10: 11933382.694 ops/s
# Warmup Iteration  11: 11932874.655 ops/s
# Warmup Iteration  12: 12046514.941 ops/s
# Warmup Iteration  13: 11977181.361 ops/s
# Warmup Iteration  14: 12012125.094 ops/s
# Warmup Iteration  15: 12050516.143 ops/s
# Warmup Iteration  16: 12024866.535 ops/s
# Warmup Iteration  17: 11941858.905 ops/s
# Warmup Iteration  18: 11957599.321 ops/s
# Warmup Iteration  19: 11972237.491 ops/s
# Warmup Iteration  20: 12107791.137 ops/s
# Warmup Iteration  21: 11925905.708 ops/s
# Warmup Iteration  22: 11965841.288 ops/s
# Warmup Iteration  23: 12058151.955 ops/s
# Warmup Iteration  24: 11720535.847 ops/s
# Warmup Iteration  25: 11937429.008 ops/s
# Warmup Iteration  26: 11999553.024 ops/s
# Warmup Iteration  27: 12071158.424 ops/s
# Warmup Iteration  28: 12053806.022 ops/s
# Warmup Iteration  29: 12155016.535 ops/s
# Warmup Iteration  30: 12116544.019 ops/s
Iteration   1: 12082240.915 ops/s
Iteration   2: 11900792.690 ops/s
Iteration   3: 11937998.623 ops/s
Iteration   4: 11979358.813 ops/s
Iteration   5: 12051972.174 ops/s
Iteration   6: 11886782.970 ops/s
Iteration   7: 12126157.634 ops/s
Iteration   8: 11902100.216 ops/s
Iteration   9: 11825290.282 ops/s
Iteration  10: 12172068.894 ops/s
Iteration  11: 12054120.753 ops/s
Iteration  12: 12023431.548 ops/s
Iteration  13: 11841867.953 ops/s
Iteration  14: 11981687.020 ops/s
Iteration  15: 12094145.154 ops/s
Iteration  16: 11989817.612 ops/s
Iteration  17: 12040056.550 ops/s
Iteration  18: 12144044.078 ops/s
Iteration  19: 12037406.982 ops/s
Iteration  20: 12084634.492 ops/s
Iteration  21: 12085236.384 ops/s
Iteration  22: 11980923.095 ops/s
Iteration  23: 11993854.810 ops/s
Iteration  24: 11939858.956 ops/s
Iteration  25: 12006153.588 ops/s
Iteration  26: 12085991.284 ops/s
Iteration  27: 12011482.064 ops/s
Iteration  28: 12056042.223 ops/s
Iteration  29: 12150069.112 ops/s
Iteration  30: 11991061.840 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_delayedUpstreamOnSubscribe":
  12015221.624 ±(99.9%) 59288.048 ops/s [Average]
  (min, avg, max) = (11825290.282, 12015221.624, 12172068.894), stdev = 88739.565
  CI (99.9%): [11955933.576, 12074509.671] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_delayedUpstreamOnSubscribe  thrpt   30  12015221.624 ± 59288.048  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCombineLatestTests._Benchmark.benchmark_covarianceOfCombineLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCombineLatestTests._Benchmark.benchmark_covarianceOfCombineLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161218.271 ops/s
# Warmup Iteration   2: 269171.649 ops/s
# Warmup Iteration   3: 301020.811 ops/s
# Warmup Iteration   4: 311173.102 ops/s
# Warmup Iteration   5: 335544.327 ops/s
# Warmup Iteration   6: 326748.441 ops/s
# Warmup Iteration   7: 330488.343 ops/s
# Warmup Iteration   8: 336331.565 ops/s
# Warmup Iteration   9: 333055.719 ops/s
# Warmup Iteration  10: 333653.871 ops/s
# Warmup Iteration  11: 335218.364 ops/s
# Warmup Iteration  12: 333728.616 ops/s
# Warmup Iteration  13: 334090.824 ops/s
# Warmup Iteration  14: 334706.999 ops/s
# Warmup Iteration  15: 333305.788 ops/s
# Warmup Iteration  16: 334120.852 ops/s
# Warmup Iteration  17: 334543.838 ops/s
# Warmup Iteration  18: 333813.576 ops/s
# Warmup Iteration  19: 332953.766 ops/s
# Warmup Iteration  20: 330877.212 ops/s
# Warmup Iteration  21: 330621.741 ops/s
# Warmup Iteration  22: 321888.584 ops/s
# Warmup Iteration  23: 309211.338 ops/s
# Warmup Iteration  24: 323773.961 ops/s
# Warmup Iteration  25: 332509.533 ops/s
# Warmup Iteration  26: 334407.393 ops/s
# Warmup Iteration  27: 332597.674 ops/s
# Warmup Iteration  28: 331742.144 ops/s
# Warmup Iteration  29: 329578.497 ops/s
# Warmup Iteration  30: 333044.252 ops/s
Iteration   1: 331519.521 ops/s
Iteration   2: 332069.448 ops/s
Iteration   3: 333094.495 ops/s
Iteration   4: 334880.717 ops/s
Iteration   5: 334388.219 ops/s
Iteration   6: 328188.984 ops/s
Iteration   7: 328283.665 ops/s
Iteration   8: 329021.582 ops/s
Iteration   9: 329878.489 ops/s
Iteration  10: 328304.055 ops/s
Iteration  11: 332478.423 ops/s
Iteration  12: 335261.823 ops/s
Iteration  13: 332713.461 ops/s
Iteration  14: 331161.585 ops/s
Iteration  15: 334813.089 ops/s
Iteration  16: 331956.328 ops/s
Iteration  17: 334579.464 ops/s
Iteration  18: 335084.527 ops/s
Iteration  19: 331030.414 ops/s
Iteration  20: 333135.865 ops/s
Iteration  21: 331987.771 ops/s
Iteration  22: 331055.493 ops/s
Iteration  23: 331882.380 ops/s
Iteration  24: 333733.531 ops/s
Iteration  25: 333390.793 ops/s
Iteration  26: 328409.276 ops/s
Iteration  27: 335002.998 ops/s
Iteration  28: 335442.587 ops/s
Iteration  29: 332563.230 ops/s
Iteration  30: 332254.464 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCombineLatestTests._Benchmark.benchmark_covarianceOfCombineLatest":
  332252.223 ±(99.9%) 1505.636 ops/s [Average]
  (min, avg, max) = (328188.984, 332252.223, 335442.587), stdev = 2253.565
  CI (99.9%): [330746.586, 333757.859] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
FlowableCombineLatestTests._Benchmark.benchmark_covarianceOfCombineLatest  thrpt   30  332252.223 ± 1505.636  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInAsyncOut$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInAsyncOut

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1478925.260 ops/s
# Warmup Iteration   2: 2278899.187 ops/s
# Warmup Iteration   3: 2557738.955 ops/s
# Warmup Iteration   4: 2545700.456 ops/s
# Warmup Iteration   5: 2539803.531 ops/s
# Warmup Iteration   6: 2563597.696 ops/s
# Warmup Iteration   7: 2556272.423 ops/s
# Warmup Iteration   8: 2539622.118 ops/s
# Warmup Iteration   9: 2564253.986 ops/s
# Warmup Iteration  10: 2543840.214 ops/s
# Warmup Iteration  11: 2522200.214 ops/s
# Warmup Iteration  12: 2563343.030 ops/s
# Warmup Iteration  13: 2545479.014 ops/s
# Warmup Iteration  14: 2557549.671 ops/s
# Warmup Iteration  15: 2543483.448 ops/s
# Warmup Iteration  16: 2548351.113 ops/s
# Warmup Iteration  17: 2567750.817 ops/s
# Warmup Iteration  18: 2566931.689 ops/s
# Warmup Iteration  19: 2565860.272 ops/s
# Warmup Iteration  20: 2566905.417 ops/s
# Warmup Iteration  21: 2507462.702 ops/s
# Warmup Iteration  22: 2474011.838 ops/s
# Warmup Iteration  23: 2543310.028 ops/s
# Warmup Iteration  24: 2544458.484 ops/s
# Warmup Iteration  25: 2569356.105 ops/s
# Warmup Iteration  26: 2576832.022 ops/s
# Warmup Iteration  27: 2544039.481 ops/s
# Warmup Iteration  28: 2555220.237 ops/s
# Warmup Iteration  29: 2549922.892 ops/s
# Warmup Iteration  30: 2580516.091 ops/s
Iteration   1: 2583740.082 ops/s
Iteration   2: 2562392.338 ops/s
Iteration   3: 2567243.505 ops/s
Iteration   4: 2577512.885 ops/s
Iteration   5: 2577378.470 ops/s
Iteration   6: 2549895.011 ops/s
Iteration   7: 2553587.960 ops/s
Iteration   8: 2572222.361 ops/s
Iteration   9: 2569637.569 ops/s
Iteration  10: 2578420.533 ops/s
Iteration  11: 2560796.431 ops/s
Iteration  12: 2568910.069 ops/s
Iteration  13: 2550663.379 ops/s
Iteration  14: 2555119.255 ops/s
Iteration  15: 2565271.739 ops/s
Iteration  16: 2564549.327 ops/s
Iteration  17: 2573804.648 ops/s
Iteration  18: 2567877.599 ops/s
Iteration  19: 2585654.028 ops/s
Iteration  20: 2579962.250 ops/s
Iteration  21: 2559305.600 ops/s
Iteration  22: 2574078.632 ops/s
Iteration  23: 2580217.584 ops/s
Iteration  24: 2575132.761 ops/s
Iteration  25: 2584068.670 ops/s
Iteration  26: 2554208.821 ops/s
Iteration  27: 2553748.769 ops/s
Iteration  28: 2553207.780 ops/s
Iteration  29: 2552721.391 ops/s
Iteration  30: 2542685.541 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInAsyncOut":
  2566467.166 ±(99.9%) 7979.434 ops/s [Average]
  (min, avg, max) = (2542685.541, 2566467.166, 2585654.028), stdev = 11943.242
  CI (99.9%): [2558487.733, 2574446.600] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score      Error  Units
FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInAsyncOut  thrpt   30  2566467.166 ± 7979.434  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_requestAfterCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_requestAfterCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4821468.317 ops/s
# Warmup Iteration   2: 8697360.986 ops/s
# Warmup Iteration   3: 8725159.715 ops/s
# Warmup Iteration   4: 8661173.189 ops/s
# Warmup Iteration   5: 8687208.026 ops/s
# Warmup Iteration   6: 8692573.777 ops/s
# Warmup Iteration   7: 8698244.572 ops/s
# Warmup Iteration   8: 8650135.104 ops/s
# Warmup Iteration   9: 8662814.499 ops/s
# Warmup Iteration  10: 8708093.387 ops/s
# Warmup Iteration  11: 8706062.012 ops/s
# Warmup Iteration  12: 8661818.786 ops/s
# Warmup Iteration  13: 8668604.519 ops/s
# Warmup Iteration  14: 8716344.734 ops/s
# Warmup Iteration  15: 8559961.469 ops/s
# Warmup Iteration  16: 8613778.093 ops/s
# Warmup Iteration  17: 8713411.005 ops/s
# Warmup Iteration  18: 8664036.020 ops/s
# Warmup Iteration  19: 8697044.709 ops/s
# Warmup Iteration  20: 8475127.975 ops/s
# Warmup Iteration  21: 8220754.235 ops/s
# Warmup Iteration  22: 8364478.737 ops/s
# Warmup Iteration  23: 8705025.625 ops/s
# Warmup Iteration  24: 8689849.446 ops/s
# Warmup Iteration  25: 8660098.540 ops/s
# Warmup Iteration  26: 8725787.174 ops/s
# Warmup Iteration  27: 8716924.204 ops/s
# Warmup Iteration  28: 8695994.826 ops/s
# Warmup Iteration  29: 8711049.184 ops/s
# Warmup Iteration  30: 8660196.140 ops/s
Iteration   1: 8655270.566 ops/s
Iteration   2: 8504758.142 ops/s
Iteration   3: 8701019.275 ops/s
Iteration   4: 8706207.361 ops/s
Iteration   5: 8713297.858 ops/s
Iteration   6: 8723203.236 ops/s
Iteration   7: 8658593.656 ops/s
Iteration   8: 8714055.413 ops/s
Iteration   9: 8696976.388 ops/s
Iteration  10: 8608179.518 ops/s
Iteration  11: 8623470.182 ops/s
Iteration  12: 8650638.933 ops/s
Iteration  13: 8626564.342 ops/s
Iteration  14: 8654935.700 ops/s
Iteration  15: 8685342.823 ops/s
Iteration  16: 8690406.247 ops/s
Iteration  17: 8667855.584 ops/s
Iteration  18: 8514054.596 ops/s
Iteration  19: 8679139.774 ops/s
Iteration  20: 8659310.933 ops/s
Iteration  21: 8674424.800 ops/s
Iteration  22: 8719555.904 ops/s
Iteration  23: 8698047.312 ops/s
Iteration  24: 8714006.761 ops/s
Iteration  25: 8726815.507 ops/s
Iteration  26: 8664810.309 ops/s
Iteration  27: 8690933.982 ops/s
Iteration  28: 8704807.043 ops/s
Iteration  29: 8696935.178 ops/s
Iteration  30: 8621290.331 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_requestAfterCancel":
  8668163.588 ±(99.9%) 35967.787 ops/s [Average]
  (min, avg, max) = (8504758.142, 8668163.588, 8726815.507), stdev = 53834.895
  CI (99.9%): [8632195.801, 8704131.376] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableAmbTest._Benchmark.benchmark_requestAfterCancel  thrpt   30  8668163.588 ± 35967.787  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 155315.649 ops/s
# Warmup Iteration   2: 221146.271 ops/s
# Warmup Iteration   3: 212546.542 ops/s
# Warmup Iteration   4: 237692.896 ops/s
# Warmup Iteration   5: 240813.925 ops/s
# Warmup Iteration   6: 240943.341 ops/s
# Warmup Iteration   7: 242675.688 ops/s
# Warmup Iteration   8: 242116.905 ops/s
# Warmup Iteration   9: 241878.990 ops/s
# Warmup Iteration  10: 242302.459 ops/s
# Warmup Iteration  11: 241851.180 ops/s
# Warmup Iteration  12: 241485.322 ops/s
# Warmup Iteration  13: 240909.362 ops/s
# Warmup Iteration  14: 240221.589 ops/s
# Warmup Iteration  15: 241341.775 ops/s
# Warmup Iteration  16: 241175.556 ops/s
# Warmup Iteration  17: 260420.570 ops/s
# Warmup Iteration  18: 261391.132 ops/s
# Warmup Iteration  19: 255780.535 ops/s
# Warmup Iteration  20: 251552.298 ops/s
# Warmup Iteration  21: 259919.113 ops/s
# Warmup Iteration  22: 262627.003 ops/s
# Warmup Iteration  23: 260946.805 ops/s
# Warmup Iteration  24: 261093.471 ops/s
# Warmup Iteration  25: 261327.125 ops/s
# Warmup Iteration  26: 260854.393 ops/s
# Warmup Iteration  27: 260343.455 ops/s
# Warmup Iteration  28: 261014.472 ops/s
# Warmup Iteration  29: 260047.722 ops/s
# Warmup Iteration  30: 262141.202 ops/s
Iteration   1: 261505.916 ops/s
Iteration   2: 260854.666 ops/s
Iteration   3: 259905.860 ops/s
Iteration   4: 261843.962 ops/s
Iteration   5: 261237.170 ops/s
Iteration   6: 259694.695 ops/s
Iteration   7: 260848.784 ops/s
Iteration   8: 261691.082 ops/s
Iteration   9: 260872.905 ops/s
Iteration  10: 260763.393 ops/s
Iteration  11: 261338.096 ops/s
Iteration  12: 260873.625 ops/s
Iteration  13: 260942.014 ops/s
Iteration  14: 261138.632 ops/s
Iteration  15: 260708.244 ops/s
Iteration  16: 260551.120 ops/s
Iteration  17: 259856.943 ops/s
Iteration  18: 261366.808 ops/s
Iteration  19: 262763.184 ops/s
Iteration  20: 259560.126 ops/s
Iteration  21: 261559.796 ops/s
Iteration  22: 261163.066 ops/s
Iteration  23: 258896.334 ops/s
Iteration  24: 261522.018 ops/s
Iteration  25: 261161.357 ops/s
Iteration  26: 260460.516 ops/s
Iteration  27: 261980.926 ops/s
Iteration  28: 262414.153 ops/s
Iteration  29: 261269.824 ops/s
Iteration  30: 260073.480 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancel":
  260960.623 ±(99.9%) 565.602 ops/s [Average]
  (min, avg, max) = (258896.334, 260960.623, 262763.184), stdev = 846.566
  CI (99.9%): [260395.022, 261526.225] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  260960.623 ± 565.602  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 349439.080 ops/s
# Warmup Iteration   2: 508159.261 ops/s
# Warmup Iteration   3: 532075.688 ops/s
# Warmup Iteration   4: 579918.696 ops/s
# Warmup Iteration   5: 592995.498 ops/s
# Warmup Iteration   6: 594317.115 ops/s
# Warmup Iteration   7: 591107.758 ops/s
# Warmup Iteration   8: 591613.771 ops/s
# Warmup Iteration   9: 593494.087 ops/s
# Warmup Iteration  10: 587420.807 ops/s
# Warmup Iteration  11: 592122.687 ops/s
# Warmup Iteration  12: 588698.208 ops/s
# Warmup Iteration  13: 589313.376 ops/s
# Warmup Iteration  14: 589776.769 ops/s
# Warmup Iteration  15: 591148.484 ops/s
# Warmup Iteration  16: 586781.477 ops/s
# Warmup Iteration  17: 609963.116 ops/s
# Warmup Iteration  18: 603236.517 ops/s
# Warmup Iteration  19: 599866.611 ops/s
# Warmup Iteration  20: 611265.227 ops/s
# Warmup Iteration  21: 616321.208 ops/s
# Warmup Iteration  22: 612582.657 ops/s
# Warmup Iteration  23: 611396.833 ops/s
# Warmup Iteration  24: 610063.667 ops/s
# Warmup Iteration  25: 610261.904 ops/s
# Warmup Iteration  26: 616383.796 ops/s
# Warmup Iteration  27: 617037.387 ops/s
# Warmup Iteration  28: 614639.609 ops/s
# Warmup Iteration  29: 613351.709 ops/s
# Warmup Iteration  30: 613871.842 ops/s
Iteration   1: 614686.652 ops/s
Iteration   2: 614484.513 ops/s
Iteration   3: 615139.997 ops/s
Iteration   4: 612403.411 ops/s
Iteration   5: 614833.534 ops/s
Iteration   6: 615640.360 ops/s
Iteration   7: 614797.442 ops/s
Iteration   8: 614024.341 ops/s
Iteration   9: 617921.767 ops/s
Iteration  10: 610125.778 ops/s
Iteration  11: 614992.315 ops/s
Iteration  12: 613023.345 ops/s
Iteration  13: 613161.685 ops/s
Iteration  14: 614938.589 ops/s
Iteration  15: 614494.002 ops/s
Iteration  16: 612236.866 ops/s
Iteration  17: 614416.215 ops/s
Iteration  18: 611678.224 ops/s
Iteration  19: 614007.879 ops/s
Iteration  20: 612951.918 ops/s
Iteration  21: 613852.433 ops/s
Iteration  22: 618219.859 ops/s
Iteration  23: 615244.980 ops/s
Iteration  24: 614955.914 ops/s
Iteration  25: 615594.805 ops/s
Iteration  26: 608729.589 ops/s
Iteration  27: 612712.843 ops/s
Iteration  28: 611543.272 ops/s
Iteration  29: 614219.458 ops/s
Iteration  30: 615600.027 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_badRequest":
  614021.067 ±(99.9%) 1321.194 ops/s [Average]
  (min, avg, max) = (608729.589, 614021.067, 618219.859), stdev = 1977.501
  CI (99.9%): [612699.873, 615342.261] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
FlowableAmbTest._Benchmark.benchmark_badRequest  thrpt   30  614021.067 ± 1321.194  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_subscribeAfterDisconnectThenConnect$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_subscribeAfterDisconnectThenConnect

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1196728.951 ops/s
# Warmup Iteration   2: 1640952.115 ops/s
# Warmup Iteration   3: 1910033.879 ops/s
# Warmup Iteration   4: 1933290.661 ops/s
# Warmup Iteration   5: 1939312.713 ops/s
# Warmup Iteration   6: 1914770.162 ops/s
# Warmup Iteration   7: 1910158.040 ops/s
# Warmup Iteration   8: 1915475.468 ops/s
# Warmup Iteration   9: 1922525.103 ops/s
# Warmup Iteration  10: 1922021.546 ops/s
# Warmup Iteration  11: 1913880.825 ops/s
# Warmup Iteration  12: 1893116.537 ops/s
# Warmup Iteration  13: 1897600.393 ops/s
# Warmup Iteration  14: 1905885.875 ops/s
# Warmup Iteration  15: 1941062.520 ops/s
# Warmup Iteration  16: 1928057.557 ops/s
# Warmup Iteration  17: 1876950.164 ops/s
# Warmup Iteration  18: 1876589.914 ops/s
# Warmup Iteration  19: 1901622.875 ops/s
# Warmup Iteration  20: 1915666.178 ops/s
# Warmup Iteration  21: 1913033.737 ops/s
# Warmup Iteration  22: 1899294.054 ops/s
# Warmup Iteration  23: 1894917.980 ops/s
# Warmup Iteration  24: 1914054.874 ops/s
# Warmup Iteration  25: 1893936.730 ops/s
# Warmup Iteration  26: 1880492.151 ops/s
# Warmup Iteration  27: 1887662.974 ops/s
# Warmup Iteration  28: 1892356.359 ops/s
# Warmup Iteration  29: 1892603.773 ops/s
# Warmup Iteration  30: 1919095.202 ops/s
Iteration   1: 1883914.259 ops/s
Iteration   2: 1892734.320 ops/s
Iteration   3: 1906436.214 ops/s
Iteration   4: 1902661.555 ops/s
Iteration   5: 1897889.151 ops/s
Iteration   6: 1872915.512 ops/s
Iteration   7: 1889808.660 ops/s
Iteration   8: 1878794.437 ops/s
Iteration   9: 1910219.940 ops/s
Iteration  10: 1908323.466 ops/s
Iteration  11: 1902310.937 ops/s
Iteration  12: 1886045.435 ops/s
Iteration  13: 1900051.586 ops/s
Iteration  14: 1888372.006 ops/s
Iteration  15: 1897191.168 ops/s
Iteration  16: 1894530.019 ops/s
Iteration  17: 1892777.771 ops/s
Iteration  18: 1915187.406 ops/s
Iteration  19: 1898729.817 ops/s
Iteration  20: 1898609.018 ops/s
Iteration  21: 1900189.006 ops/s
Iteration  22: 1905272.241 ops/s
Iteration  23: 1898054.588 ops/s
Iteration  24: 1898718.080 ops/s
Iteration  25: 1899903.129 ops/s
Iteration  26: 1886773.557 ops/s
Iteration  27: 1894766.175 ops/s
Iteration  28: 1898446.051 ops/s
Iteration  29: 1910457.161 ops/s
Iteration  30: 1900804.082 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_subscribeAfterDisconnectThenConnect":
  1897029.558 ±(99.9%) 6287.206 ops/s [Average]
  (min, avg, max) = (1872915.512, 1897029.558, 1915187.406), stdev = 9410.395
  CI (99.9%): [1890742.352, 1903316.764] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_subscribeAfterDisconnectThenConnect  thrpt   30  1897029.558 ± 6287.206  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 112284.031 ops/s
# Warmup Iteration   2: 159649.330 ops/s
# Warmup Iteration   3: 158012.162 ops/s
# Warmup Iteration   4: 172318.883 ops/s
# Warmup Iteration   5: 176990.974 ops/s
# Warmup Iteration   6: 176945.069 ops/s
# Warmup Iteration   7: 176696.559 ops/s
# Warmup Iteration   8: 176379.488 ops/s
# Warmup Iteration   9: 176474.507 ops/s
# Warmup Iteration  10: 176577.135 ops/s
# Warmup Iteration  11: 176353.027 ops/s
# Warmup Iteration  12: 175940.548 ops/s
# Warmup Iteration  13: 175972.701 ops/s
# Warmup Iteration  14: 175154.219 ops/s
# Warmup Iteration  15: 175158.401 ops/s
# Warmup Iteration  16: 170652.940 ops/s
# Warmup Iteration  17: 179354.484 ops/s
# Warmup Iteration  18: 182215.075 ops/s
# Warmup Iteration  19: 182739.533 ops/s
# Warmup Iteration  20: 181867.866 ops/s
# Warmup Iteration  21: 182110.782 ops/s
# Warmup Iteration  22: 182113.623 ops/s
# Warmup Iteration  23: 182505.145 ops/s
# Warmup Iteration  24: 181993.956 ops/s
# Warmup Iteration  25: 181195.847 ops/s
# Warmup Iteration  26: 182767.522 ops/s
# Warmup Iteration  27: 182119.259 ops/s
# Warmup Iteration  28: 182487.413 ops/s
# Warmup Iteration  29: 181949.264 ops/s
# Warmup Iteration  30: 182460.989 ops/s
Iteration   1: 182413.984 ops/s
Iteration   2: 180417.046 ops/s
Iteration   3: 181666.375 ops/s
Iteration   4: 181223.779 ops/s
Iteration   5: 182904.108 ops/s
Iteration   6: 182544.696 ops/s
Iteration   7: 182595.463 ops/s
Iteration   8: 182384.871 ops/s
Iteration   9: 182706.600 ops/s
Iteration  10: 181422.229 ops/s
Iteration  11: 182345.504 ops/s
Iteration  12: 182540.691 ops/s
Iteration  13: 181465.551 ops/s
Iteration  14: 181933.193 ops/s
Iteration  15: 182900.400 ops/s
Iteration  16: 182731.667 ops/s
Iteration  17: 181775.308 ops/s
Iteration  18: 182105.034 ops/s
Iteration  19: 181531.220 ops/s
Iteration  20: 183159.352 ops/s
Iteration  21: 183035.441 ops/s
Iteration  22: 182479.307 ops/s
Iteration  23: 183009.145 ops/s
Iteration  24: 182288.895 ops/s
Iteration  25: 181690.163 ops/s
Iteration  26: 182794.470 ops/s
Iteration  27: 182253.463 ops/s
Iteration  28: 182168.785 ops/s
Iteration  29: 182899.539 ops/s
Iteration  30: 182360.010 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen":
  182258.210 ±(99.9%) 423.940 ops/s [Average]
  (min, avg, max) = (180417.046, 182258.210, 183159.352), stdev = 634.533
  CI (99.9%): [181834.270, 182682.149] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen  thrpt   30  182258.210 ± 423.940  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_delayedUpstreamOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_delayedUpstreamOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6025924.943 ops/s
# Warmup Iteration   2: 8383548.469 ops/s
# Warmup Iteration   3: 9403823.883 ops/s
# Warmup Iteration   4: 9152831.898 ops/s
# Warmup Iteration   5: 9301046.275 ops/s
# Warmup Iteration   6: 9278563.534 ops/s
# Warmup Iteration   7: 9360837.946 ops/s
# Warmup Iteration   8: 9392602.951 ops/s
# Warmup Iteration   9: 9262526.985 ops/s
# Warmup Iteration  10: 9245084.921 ops/s
# Warmup Iteration  11: 9419394.204 ops/s
# Warmup Iteration  12: 9206418.932 ops/s
# Warmup Iteration  13: 9316773.546 ops/s
# Warmup Iteration  14: 9358602.959 ops/s
# Warmup Iteration  15: 9186025.474 ops/s
# Warmup Iteration  16: 9173937.814 ops/s
# Warmup Iteration  17: 9321064.473 ops/s
# Warmup Iteration  18: 9246474.530 ops/s
# Warmup Iteration  19: 9308952.996 ops/s
# Warmup Iteration  20: 9218956.304 ops/s
# Warmup Iteration  21: 9392894.840 ops/s
# Warmup Iteration  22: 9390412.101 ops/s
# Warmup Iteration  23: 9306544.901 ops/s
# Warmup Iteration  24: 9358770.613 ops/s
# Warmup Iteration  25: 9265508.752 ops/s
# Warmup Iteration  26: 9394084.936 ops/s
# Warmup Iteration  27: 9188753.596 ops/s
# Warmup Iteration  28: 9365207.581 ops/s
# Warmup Iteration  29: 9410444.201 ops/s
# Warmup Iteration  30: 9384310.247 ops/s
Iteration   1: 9288274.610 ops/s
Iteration   2: 9340103.183 ops/s
Iteration   3: 9375088.286 ops/s
Iteration   4: 9261492.190 ops/s
Iteration   5: 9307393.585 ops/s
Iteration   6: 9379984.192 ops/s
Iteration   7: 9221043.431 ops/s
Iteration   8: 9307786.044 ops/s
Iteration   9: 9285943.882 ops/s
Iteration  10: 9351072.553 ops/s
Iteration  11: 9323161.848 ops/s
Iteration  12: 9095247.662 ops/s
Iteration  13: 9483097.720 ops/s
Iteration  14: 9329781.437 ops/s
Iteration  15: 9431786.504 ops/s
Iteration  16: 9338957.016 ops/s
Iteration  17: 9292928.537 ops/s
Iteration  18: 9365075.306 ops/s
Iteration  19: 9398808.280 ops/s
Iteration  20: 9366723.160 ops/s
Iteration  21: 9321645.808 ops/s
Iteration  22: 9287734.955 ops/s
Iteration  23: 9303265.910 ops/s
Iteration  24: 9291779.784 ops/s
Iteration  25: 9194136.330 ops/s
Iteration  26: 9310449.497 ops/s
Iteration  27: 9341248.959 ops/s
Iteration  28: 9263620.419 ops/s
Iteration  29: 9251713.045 ops/s
Iteration  30: 9340443.088 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_delayedUpstreamOnSubscribe":
  9314992.907 ±(99.9%) 48200.464 ops/s [Average]
  (min, avg, max) = (9095247.662, 9314992.907, 9483097.720), stdev = 72144.191
  CI (99.9%): [9266792.443, 9363193.372] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_delayedUpstreamOnSubscribe  thrpt   30  9314992.907 ± 48200.464  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_delayedUpstreamOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_delayedUpstreamOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6325547.068 ops/s
# Warmup Iteration   2: 8933893.649 ops/s
# Warmup Iteration   3: 10250799.964 ops/s
# Warmup Iteration   4: 10276006.468 ops/s
# Warmup Iteration   5: 10377123.789 ops/s
# Warmup Iteration   6: 10200630.837 ops/s
# Warmup Iteration   7: 10125589.754 ops/s
# Warmup Iteration   8: 10178029.864 ops/s
# Warmup Iteration   9: 10315769.783 ops/s
# Warmup Iteration  10: 10142941.025 ops/s
# Warmup Iteration  11: 10266753.601 ops/s
# Warmup Iteration  12: 10268940.667 ops/s
# Warmup Iteration  13: 10215241.658 ops/s
# Warmup Iteration  14: 10123946.387 ops/s
# Warmup Iteration  15: 10102234.934 ops/s
# Warmup Iteration  16: 10282680.251 ops/s
# Warmup Iteration  17: 10241754.332 ops/s
# Warmup Iteration  18: 10195505.797 ops/s
# Warmup Iteration  19: 10250330.840 ops/s
# Warmup Iteration  20: 10087058.440 ops/s
# Warmup Iteration  21: 10276379.870 ops/s
# Warmup Iteration  22: 10174589.960 ops/s
# Warmup Iteration  23: 10236248.757 ops/s
# Warmup Iteration  24: 10253145.292 ops/s
# Warmup Iteration  25: 10205575.180 ops/s
# Warmup Iteration  26: 10298244.141 ops/s
# Warmup Iteration  27: 10126499.799 ops/s
# Warmup Iteration  28: 10268616.131 ops/s
# Warmup Iteration  29: 10368299.948 ops/s
# Warmup Iteration  30: 10193879.430 ops/s
Iteration   1: 10244825.240 ops/s
Iteration   2: 10155893.225 ops/s
Iteration   3: 10070079.933 ops/s
Iteration   4: 10338224.080 ops/s
Iteration   5: 10158286.646 ops/s
Iteration   6: 10099593.474 ops/s
Iteration   7: 10103281.660 ops/s
Iteration   8: 10205405.073 ops/s
Iteration   9: 10183635.518 ops/s
Iteration  10: 10227396.801 ops/s
Iteration  11: 10101610.401 ops/s
Iteration  12: 10251546.826 ops/s
Iteration  13: 10120207.171 ops/s
Iteration  14: 10200471.065 ops/s
Iteration  15: 10165594.755 ops/s
Iteration  16: 10229118.524 ops/s
Iteration  17: 10144978.662 ops/s
Iteration  18: 10240550.677 ops/s
Iteration  19: 10225360.720 ops/s
Iteration  20: 10273073.872 ops/s
Iteration  21: 10348645.754 ops/s
Iteration  22: 10114479.021 ops/s
Iteration  23: 10345597.294 ops/s
Iteration  24: 10159746.126 ops/s
Iteration  25: 10242778.971 ops/s
Iteration  26: 10092369.391 ops/s
Iteration  27: 10144571.664 ops/s
Iteration  28: 10157691.361 ops/s
Iteration  29: 10184096.472 ops/s
Iteration  30: 10233323.465 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_delayedUpstreamOnSubscribe":
  10192081.128 ±(99.9%) 50172.394 ops/s [Average]
  (min, avg, max) = (10070079.933, 10192081.128, 10348645.754), stdev = 75095.683
  CI (99.9%): [10141908.734, 10242253.522] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_delayedUpstreamOnSubscribe  thrpt   30  10192081.128 ± 50172.394  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorHasNextThrowsImmediately$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorHasNextThrowsImmediately

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 532635.879 ops/s
# Warmup Iteration   2: 653872.796 ops/s
# Warmup Iteration   3: 702267.012 ops/s
# Warmup Iteration   4: 685670.669 ops/s
# Warmup Iteration   5: 743671.335 ops/s
# Warmup Iteration   6: 743987.080 ops/s
# Warmup Iteration   7: 743726.836 ops/s
# Warmup Iteration   8: 743105.895 ops/s
# Warmup Iteration   9: 741832.973 ops/s
# Warmup Iteration  10: 742694.776 ops/s
# Warmup Iteration  11: 741596.392 ops/s
# Warmup Iteration  12: 735923.045 ops/s
# Warmup Iteration  13: 728079.111 ops/s
# Warmup Iteration  14: 733407.626 ops/s
# Warmup Iteration  15: 741687.094 ops/s
# Warmup Iteration  16: 743865.269 ops/s
# Warmup Iteration  17: 773804.560 ops/s
# Warmup Iteration  18: 774571.503 ops/s
# Warmup Iteration  19: 770315.412 ops/s
# Warmup Iteration  20: 773982.589 ops/s
# Warmup Iteration  21: 772830.562 ops/s
# Warmup Iteration  22: 770215.746 ops/s
# Warmup Iteration  23: 772041.393 ops/s
# Warmup Iteration  24: 773567.412 ops/s
# Warmup Iteration  25: 768906.283 ops/s
# Warmup Iteration  26: 770167.773 ops/s
# Warmup Iteration  27: 771559.617 ops/s
# Warmup Iteration  28: 771960.627 ops/s
# Warmup Iteration  29: 768514.340 ops/s
# Warmup Iteration  30: 771541.263 ops/s
Iteration   1: 773671.171 ops/s
Iteration   2: 771699.644 ops/s
Iteration   3: 774200.265 ops/s
Iteration   4: 769420.112 ops/s
Iteration   5: 772689.756 ops/s
Iteration   6: 772321.549 ops/s
Iteration   7: 771926.766 ops/s
Iteration   8: 770224.615 ops/s
Iteration   9: 770430.623 ops/s
Iteration  10: 771250.502 ops/s
Iteration  11: 767807.319 ops/s
Iteration  12: 774833.950 ops/s
Iteration  13: 773607.125 ops/s
Iteration  14: 770651.362 ops/s
Iteration  15: 771605.197 ops/s
Iteration  16: 771352.850 ops/s
Iteration  17: 772669.993 ops/s
Iteration  18: 773353.256 ops/s
Iteration  19: 772808.814 ops/s
Iteration  20: 771993.916 ops/s
Iteration  21: 771644.881 ops/s
Iteration  22: 772924.285 ops/s
Iteration  23: 772777.769 ops/s
Iteration  24: 774918.650 ops/s
Iteration  25: 773022.421 ops/s
Iteration  26: 772590.708 ops/s
Iteration  27: 773490.150 ops/s
Iteration  28: 769448.424 ops/s
Iteration  29: 771594.868 ops/s
Iteration  30: 773790.096 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_iteratorHasNextThrowsImmediately":
  772157.368 ±(99.9%) 1092.316 ops/s [Average]
  (min, avg, max) = (767807.319, 772157.368, 774918.650), stdev = 1634.928
  CI (99.9%): [771065.052, 773249.684] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_iteratorHasNextThrowsImmediately  thrpt   30  772157.368 ± 1092.316  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapIterableMapperIterableOneNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapIterableMapperIterableOneNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 526405.405 ops/s
# Warmup Iteration   2: 640375.567 ops/s
# Warmup Iteration   3: 641957.381 ops/s
# Warmup Iteration   4: 694361.909 ops/s
# Warmup Iteration   5: 695616.647 ops/s
# Warmup Iteration   6: 697569.168 ops/s
# Warmup Iteration   7: 697288.902 ops/s
# Warmup Iteration   8: 694900.417 ops/s
# Warmup Iteration   9: 695738.739 ops/s
# Warmup Iteration  10: 692175.921 ops/s
# Warmup Iteration  11: 690273.672 ops/s
# Warmup Iteration  12: 681582.207 ops/s
# Warmup Iteration  13: 690717.541 ops/s
# Warmup Iteration  14: 691580.269 ops/s
# Warmup Iteration  15: 686957.016 ops/s
# Warmup Iteration  16: 687185.047 ops/s
# Warmup Iteration  17: 718460.902 ops/s
# Warmup Iteration  18: 716446.318 ops/s
# Warmup Iteration  19: 717823.531 ops/s
# Warmup Iteration  20: 719712.035 ops/s
# Warmup Iteration  21: 719486.394 ops/s
# Warmup Iteration  22: 719486.340 ops/s
# Warmup Iteration  23: 719523.466 ops/s
# Warmup Iteration  24: 721740.042 ops/s
# Warmup Iteration  25: 719196.911 ops/s
# Warmup Iteration  26: 723482.919 ops/s
# Warmup Iteration  27: 720153.105 ops/s
# Warmup Iteration  28: 719596.488 ops/s
# Warmup Iteration  29: 718080.275 ops/s
# Warmup Iteration  30: 721264.541 ops/s
Iteration   1: 721749.225 ops/s
Iteration   2: 716924.936 ops/s
Iteration   3: 717665.869 ops/s
Iteration   4: 720126.275 ops/s
Iteration   5: 719831.117 ops/s
Iteration   6: 720914.712 ops/s
Iteration   7: 720067.086 ops/s
Iteration   8: 716078.046 ops/s
Iteration   9: 719084.276 ops/s
Iteration  10: 717208.866 ops/s
Iteration  11: 720360.195 ops/s
Iteration  12: 720627.014 ops/s
Iteration  13: 719266.896 ops/s
Iteration  14: 712049.983 ops/s
Iteration  15: 718600.298 ops/s
Iteration  16: 720692.723 ops/s
Iteration  17: 718070.185 ops/s
Iteration  18: 718846.675 ops/s
Iteration  19: 715282.884 ops/s
Iteration  20: 718684.048 ops/s
Iteration  21: 719104.588 ops/s
Iteration  22: 717929.584 ops/s
Iteration  23: 719854.157 ops/s
Iteration  24: 721118.866 ops/s
Iteration  25: 718095.921 ops/s
Iteration  26: 717224.984 ops/s
Iteration  27: 721647.959 ops/s
Iteration  28: 717193.966 ops/s
Iteration  29: 716382.667 ops/s
Iteration  30: 720286.657 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapIterableMapperIterableOneNull":
  718699.022 ±(99.9%) 1410.576 ops/s [Average]
  (min, avg, max) = (712049.983, 718699.022, 721749.225), stdev = 2111.284
  CI (99.9%): [717288.446, 720109.598] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_flatMapIterableMapperIterableOneNull  thrpt   30  718699.022 ± 1410.576  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_subscribeMultipleTimes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_subscribeMultipleTimes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 420645.913 ops/s
# Warmup Iteration   2: 567997.867 ops/s
# Warmup Iteration   3: 647461.340 ops/s
# Warmup Iteration   4: 647406.686 ops/s
# Warmup Iteration   5: 646977.808 ops/s
# Warmup Iteration   6: 645588.266 ops/s
# Warmup Iteration   7: 648558.826 ops/s
# Warmup Iteration   8: 647051.044 ops/s
# Warmup Iteration   9: 646968.937 ops/s
# Warmup Iteration  10: 645064.542 ops/s
# Warmup Iteration  11: 633190.887 ops/s
# Warmup Iteration  12: 637319.343 ops/s
# Warmup Iteration  13: 646138.486 ops/s
# Warmup Iteration  14: 648426.067 ops/s
# Warmup Iteration  15: 644523.771 ops/s
# Warmup Iteration  16: 645476.970 ops/s
# Warmup Iteration  17: 644002.427 ops/s
# Warmup Iteration  18: 648074.889 ops/s
# Warmup Iteration  19: 648333.640 ops/s
# Warmup Iteration  20: 640807.558 ops/s
# Warmup Iteration  21: 646279.493 ops/s
# Warmup Iteration  22: 646737.366 ops/s
# Warmup Iteration  23: 644577.993 ops/s
# Warmup Iteration  24: 647529.645 ops/s
# Warmup Iteration  25: 647312.415 ops/s
# Warmup Iteration  26: 644762.695 ops/s
# Warmup Iteration  27: 646802.741 ops/s
# Warmup Iteration  28: 645810.180 ops/s
# Warmup Iteration  29: 645620.746 ops/s
# Warmup Iteration  30: 649456.524 ops/s
Iteration   1: 646959.896 ops/s
Iteration   2: 644442.722 ops/s
Iteration   3: 645970.162 ops/s
Iteration   4: 643860.361 ops/s
Iteration   5: 644746.444 ops/s
Iteration   6: 645920.569 ops/s
Iteration   7: 639961.999 ops/s
Iteration   8: 644198.273 ops/s
Iteration   9: 647817.420 ops/s
Iteration  10: 647168.716 ops/s
Iteration  11: 647007.053 ops/s
Iteration  12: 645004.760 ops/s
Iteration  13: 650969.311 ops/s
Iteration  14: 647738.041 ops/s
Iteration  15: 646459.468 ops/s
Iteration  16: 646984.305 ops/s
Iteration  17: 646180.618 ops/s
Iteration  18: 646516.400 ops/s
Iteration  19: 644227.914 ops/s
Iteration  20: 649844.681 ops/s
Iteration  21: 647452.706 ops/s
Iteration  22: 644505.438 ops/s
Iteration  23: 643519.335 ops/s
Iteration  24: 642463.203 ops/s
Iteration  25: 645137.259 ops/s
Iteration  26: 648212.874 ops/s
Iteration  27: 648385.470 ops/s
Iteration  28: 644763.821 ops/s
Iteration  29: 648557.867 ops/s
Iteration  30: 644995.972 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_subscribeMultipleTimes":
  645999.102 ±(99.9%) 1501.210 ops/s [Average]
  (min, avg, max) = (639961.999, 645999.102, 650969.311), stdev = 2246.941
  CI (99.9%): [644497.892, 647500.312] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableFromIterableTest._Benchmark.benchmark_subscribeMultipleTimes  thrpt   30  645999.102 ± 1501.210  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_cancelAfterHasNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_cancelAfterHasNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1458090.250 ops/s
# Warmup Iteration   2: 2165990.430 ops/s
# Warmup Iteration   3: 2457519.445 ops/s
# Warmup Iteration   4: 2434772.630 ops/s
# Warmup Iteration   5: 2439791.790 ops/s
# Warmup Iteration   6: 2444748.140 ops/s
# Warmup Iteration   7: 2433709.163 ops/s
# Warmup Iteration   8: 2441753.723 ops/s
# Warmup Iteration   9: 2403724.495 ops/s
# Warmup Iteration  10: 2364649.146 ops/s
# Warmup Iteration  11: 2407649.137 ops/s
# Warmup Iteration  12: 2465828.173 ops/s
# Warmup Iteration  13: 2455809.741 ops/s
# Warmup Iteration  14: 2450741.276 ops/s
# Warmup Iteration  15: 2429243.146 ops/s
# Warmup Iteration  16: 2466749.338 ops/s
# Warmup Iteration  17: 2440738.045 ops/s
# Warmup Iteration  18: 2443283.792 ops/s
# Warmup Iteration  19: 2439638.503 ops/s
# Warmup Iteration  20: 2440707.791 ops/s
# Warmup Iteration  21: 2433645.358 ops/s
# Warmup Iteration  22: 2439733.874 ops/s
# Warmup Iteration  23: 2459516.679 ops/s
# Warmup Iteration  24: 2417402.843 ops/s
# Warmup Iteration  25: 2437363.517 ops/s
# Warmup Iteration  26: 2459228.423 ops/s
# Warmup Iteration  27: 2436800.005 ops/s
# Warmup Iteration  28: 2434380.960 ops/s
# Warmup Iteration  29: 2454431.664 ops/s
# Warmup Iteration  30: 2426241.922 ops/s
Iteration   1: 2459539.663 ops/s
Iteration   2: 2461271.820 ops/s
Iteration   3: 2454201.603 ops/s
Iteration   4: 2431085.819 ops/s
Iteration   5: 2443641.803 ops/s
Iteration   6: 2409747.804 ops/s
Iteration   7: 2439129.978 ops/s
Iteration   8: 2435267.454 ops/s
Iteration   9: 2457152.040 ops/s
Iteration  10: 2442307.579 ops/s
Iteration  11: 2414269.848 ops/s
Iteration  12: 2452946.276 ops/s
Iteration  13: 2438816.226 ops/s
Iteration  14: 2442617.760 ops/s
Iteration  15: 2420444.156 ops/s
Iteration  16: 2424961.686 ops/s
Iteration  17: 2439303.339 ops/s
Iteration  18: 2461389.851 ops/s
Iteration  19: 2456450.486 ops/s
Iteration  20: 2458668.153 ops/s
Iteration  21: 2443218.945 ops/s
Iteration  22: 2427586.986 ops/s
Iteration  23: 2413738.383 ops/s
Iteration  24: 2432936.690 ops/s
Iteration  25: 2443221.111 ops/s
Iteration  26: 2434923.842 ops/s
Iteration  27: 2438721.919 ops/s
Iteration  28: 2445510.828 ops/s
Iteration  29: 2445001.949 ops/s
Iteration  30: 2465651.541 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_cancelAfterHasNext":
  2441124.185 ±(99.9%) 10008.198 ops/s [Average]
  (min, avg, max) = (2409747.804, 2441124.185, 2465651.541), stdev = 14979.801
  CI (99.9%): [2431115.986, 2451132.383] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_cancelAfterHasNext  thrpt   30  2441124.185 ± 10008.198  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_failingInnerCancelsSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_failingInnerCancelsSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 470506.819 ops/s
# Warmup Iteration   2: 585989.213 ops/s
# Warmup Iteration   3: 605932.153 ops/s
# Warmup Iteration   4: 643423.694 ops/s
# Warmup Iteration   5: 642764.703 ops/s
# Warmup Iteration   6: 643650.625 ops/s
# Warmup Iteration   7: 641279.353 ops/s
# Warmup Iteration   8: 637459.719 ops/s
# Warmup Iteration   9: 629793.777 ops/s
# Warmup Iteration  10: 635424.450 ops/s
# Warmup Iteration  11: 640791.663 ops/s
# Warmup Iteration  12: 636525.775 ops/s
# Warmup Iteration  13: 634422.616 ops/s
# Warmup Iteration  14: 640400.554 ops/s
# Warmup Iteration  15: 639278.593 ops/s
# Warmup Iteration  16: 637565.386 ops/s
# Warmup Iteration  17: 662063.308 ops/s
# Warmup Iteration  18: 663536.549 ops/s
# Warmup Iteration  19: 660118.688 ops/s
# Warmup Iteration  20: 659925.016 ops/s
# Warmup Iteration  21: 664755.677 ops/s
# Warmup Iteration  22: 660960.083 ops/s
# Warmup Iteration  23: 658646.672 ops/s
# Warmup Iteration  24: 659195.779 ops/s
# Warmup Iteration  25: 662599.438 ops/s
# Warmup Iteration  26: 663981.003 ops/s
# Warmup Iteration  27: 661082.217 ops/s
# Warmup Iteration  28: 661374.331 ops/s
# Warmup Iteration  29: 658302.103 ops/s
# Warmup Iteration  30: 665245.562 ops/s
Iteration   1: 664182.317 ops/s
Iteration   2: 664112.433 ops/s
Iteration   3: 660852.000 ops/s
Iteration   4: 664147.267 ops/s
Iteration   5: 660329.667 ops/s
Iteration   6: 662851.868 ops/s
Iteration   7: 660500.364 ops/s
Iteration   8: 659288.221 ops/s
Iteration   9: 661962.254 ops/s
Iteration  10: 663399.419 ops/s
Iteration  11: 663720.859 ops/s
Iteration  12: 660124.587 ops/s
Iteration  13: 660324.296 ops/s
Iteration  14: 661755.242 ops/s
Iteration  15: 662354.541 ops/s
Iteration  16: 660147.925 ops/s
Iteration  17: 663374.324 ops/s
Iteration  18: 663543.647 ops/s
Iteration  19: 663594.099 ops/s
Iteration  20: 666209.527 ops/s
Iteration  21: 661064.806 ops/s
Iteration  22: 660929.282 ops/s
Iteration  23: 662107.682 ops/s
Iteration  24: 660465.479 ops/s
Iteration  25: 661303.043 ops/s
Iteration  26: 664500.355 ops/s
Iteration  27: 658882.688 ops/s
Iteration  28: 660601.328 ops/s
Iteration  29: 666187.955 ops/s
Iteration  30: 664752.161 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_failingInnerCancelsSource":
  662252.321 ±(99.9%) 1322.732 ops/s [Average]
  (min, avg, max) = (658882.688, 662252.321, 666209.527), stdev = 1979.804
  CI (99.9%): [660929.589, 663575.054] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_failingInnerCancelsSource  thrpt   30  662252.321 ± 1322.732  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesFastPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesFastPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3829111.744 ops/s
# Warmup Iteration   2: 5290899.841 ops/s
# Warmup Iteration   3: 6088663.350 ops/s
# Warmup Iteration   4: 6046316.496 ops/s
# Warmup Iteration   5: 6024406.857 ops/s
# Warmup Iteration   6: 6054820.601 ops/s
# Warmup Iteration   7: 5998689.248 ops/s
# Warmup Iteration   8: 5921996.902 ops/s
# Warmup Iteration   9: 5978451.169 ops/s
# Warmup Iteration  10: 6080343.507 ops/s
# Warmup Iteration  11: 6081597.263 ops/s
# Warmup Iteration  12: 6037453.668 ops/s
# Warmup Iteration  13: 6044881.463 ops/s
# Warmup Iteration  14: 6069404.887 ops/s
# Warmup Iteration  15: 6040136.417 ops/s
# Warmup Iteration  16: 6050458.529 ops/s
# Warmup Iteration  17: 5975505.580 ops/s
# Warmup Iteration  18: 6059567.009 ops/s
# Warmup Iteration  19: 6087551.226 ops/s
# Warmup Iteration  20: 6053338.686 ops/s
# Warmup Iteration  21: 6041440.177 ops/s
# Warmup Iteration  22: 6067523.198 ops/s
# Warmup Iteration  23: 6047980.820 ops/s
# Warmup Iteration  24: 6017107.402 ops/s
# Warmup Iteration  25: 6032295.170 ops/s
# Warmup Iteration  26: 6019741.085 ops/s
# Warmup Iteration  27: 6053112.637 ops/s
# Warmup Iteration  28: 6013257.911 ops/s
# Warmup Iteration  29: 6067950.795 ops/s
# Warmup Iteration  30: 6060182.119 ops/s
Iteration   1: 6037364.890 ops/s
Iteration   2: 6051491.505 ops/s
Iteration   3: 6032241.506 ops/s
Iteration   4: 6010925.206 ops/s
Iteration   5: 6054700.269 ops/s
Iteration   6: 6066909.224 ops/s
Iteration   7: 6016331.407 ops/s
Iteration   8: 6065282.608 ops/s
Iteration   9: 6003035.063 ops/s
Iteration  10: 6032335.994 ops/s
Iteration  11: 6041045.054 ops/s
Iteration  12: 6027624.537 ops/s
Iteration  13: 6048096.981 ops/s
Iteration  14: 6009950.225 ops/s
Iteration  15: 6024601.451 ops/s
Iteration  16: 6028737.518 ops/s
Iteration  17: 6042536.090 ops/s
Iteration  18: 6040722.382 ops/s
Iteration  19: 5993911.852 ops/s
Iteration  20: 6006304.535 ops/s
Iteration  21: 6010710.495 ops/s
Iteration  22: 6034373.151 ops/s
Iteration  23: 6054755.316 ops/s
Iteration  24: 6048777.447 ops/s
Iteration  25: 6051268.931 ops/s
Iteration  26: 6070011.707 ops/s
Iteration  27: 6053902.106 ops/s
Iteration  28: 6006528.411 ops/s
Iteration  29: 6073766.677 ops/s
Iteration  30: 6035238.270 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesFastPath":
  6035782.694 ±(99.9%) 14424.392 ops/s [Average]
  (min, avg, max) = (5993911.852, 6035782.694, 6073766.677), stdev = 21589.752
  CI (99.9%): [6021358.302, 6050207.085] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_hasNextCancelsAndCompletesFastPath  thrpt   30  6035782.694 ± 14424.392  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_noBackpressureSupport$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_noBackpressureSupport

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105266.592 ops/s
# Warmup Iteration   2: 135027.072 ops/s
# Warmup Iteration   3: 149179.459 ops/s
# Warmup Iteration   4: 148788.413 ops/s
# Warmup Iteration   5: 147304.760 ops/s
# Warmup Iteration   6: 145764.664 ops/s
# Warmup Iteration   7: 144179.199 ops/s
# Warmup Iteration   8: 148283.756 ops/s
# Warmup Iteration   9: 148879.196 ops/s
# Warmup Iteration  10: 149387.039 ops/s
# Warmup Iteration  11: 149304.808 ops/s
# Warmup Iteration  12: 149724.709 ops/s
# Warmup Iteration  13: 149786.937 ops/s
# Warmup Iteration  14: 149096.985 ops/s
# Warmup Iteration  15: 149896.226 ops/s
# Warmup Iteration  16: 149416.752 ops/s
# Warmup Iteration  17: 148802.051 ops/s
# Warmup Iteration  18: 149110.785 ops/s
# Warmup Iteration  19: 148783.820 ops/s
# Warmup Iteration  20: 148745.533 ops/s
# Warmup Iteration  21: 148584.713 ops/s
# Warmup Iteration  22: 148934.394 ops/s
# Warmup Iteration  23: 148459.393 ops/s
# Warmup Iteration  24: 148399.349 ops/s
# Warmup Iteration  25: 149813.118 ops/s
# Warmup Iteration  26: 148821.323 ops/s
# Warmup Iteration  27: 149069.498 ops/s
# Warmup Iteration  28: 149200.192 ops/s
# Warmup Iteration  29: 149378.847 ops/s
# Warmup Iteration  30: 149641.594 ops/s
Iteration   1: 149011.641 ops/s
Iteration   2: 148853.064 ops/s
Iteration   3: 148618.120 ops/s
Iteration   4: 147915.901 ops/s
Iteration   5: 149016.669 ops/s
Iteration   6: 148888.871 ops/s
Iteration   7: 149135.708 ops/s
Iteration   8: 146379.549 ops/s
Iteration   9: 148868.597 ops/s
Iteration  10: 149270.567 ops/s
Iteration  11: 149168.074 ops/s
Iteration  12: 149572.001 ops/s
Iteration  13: 149031.523 ops/s
Iteration  14: 149705.363 ops/s
Iteration  15: 149034.953 ops/s
Iteration  16: 150290.790 ops/s
Iteration  17: 149516.654 ops/s
Iteration  18: 149113.569 ops/s
Iteration  19: 149798.134 ops/s
Iteration  20: 148855.921 ops/s
Iteration  21: 149265.405 ops/s
Iteration  22: 149056.930 ops/s
Iteration  23: 149427.923 ops/s
Iteration  24: 148743.911 ops/s
Iteration  25: 149235.762 ops/s
Iteration  26: 149442.499 ops/s
Iteration  27: 148855.405 ops/s
Iteration  28: 149318.912 ops/s
Iteration  29: 149408.929 ops/s
Iteration  30: 149018.387 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_noBackpressureSupport":
  149060.658 ±(99.9%) 439.402 ops/s [Average]
  (min, avg, max) = (146379.549, 149060.658, 150290.790), stdev = 657.676
  CI (99.9%): [148621.256, 149500.060] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
FlowableOnBackpressureDropTest._Benchmark.benchmark_noBackpressureSupport  thrpt   30  149060.658 ± 439.402  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_startWithIterableOneNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_startWithIterableOneNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 426509.130 ops/s
# Warmup Iteration   2: 520739.879 ops/s
# Warmup Iteration   3: 590101.031 ops/s
# Warmup Iteration   4: 547155.322 ops/s
# Warmup Iteration   5: 587169.833 ops/s
# Warmup Iteration   6: 586556.194 ops/s
# Warmup Iteration   7: 597677.098 ops/s
# Warmup Iteration   8: 598247.778 ops/s
# Warmup Iteration   9: 595023.147 ops/s
# Warmup Iteration  10: 595393.348 ops/s
# Warmup Iteration  11: 599672.585 ops/s
# Warmup Iteration  12: 599114.874 ops/s
# Warmup Iteration  13: 597961.096 ops/s
# Warmup Iteration  14: 599739.471 ops/s
# Warmup Iteration  15: 600016.711 ops/s
# Warmup Iteration  16: 597066.255 ops/s
# Warmup Iteration  17: 720463.437 ops/s
# Warmup Iteration  18: 721684.416 ops/s
# Warmup Iteration  19: 719264.133 ops/s
# Warmup Iteration  20: 719774.269 ops/s
# Warmup Iteration  21: 722931.877 ops/s
# Warmup Iteration  22: 718950.749 ops/s
# Warmup Iteration  23: 722873.073 ops/s
# Warmup Iteration  24: 722248.438 ops/s
# Warmup Iteration  25: 721834.650 ops/s
# Warmup Iteration  26: 722758.283 ops/s
# Warmup Iteration  27: 721087.690 ops/s
# Warmup Iteration  28: 719408.784 ops/s
# Warmup Iteration  29: 720424.280 ops/s
# Warmup Iteration  30: 722247.288 ops/s
Iteration   1: 721170.479 ops/s
Iteration   2: 726814.586 ops/s
Iteration   3: 724020.752 ops/s
Iteration   4: 725031.478 ops/s
Iteration   5: 720387.856 ops/s
Iteration   6: 720930.407 ops/s
Iteration   7: 721556.640 ops/s
Iteration   8: 717881.680 ops/s
Iteration   9: 724285.365 ops/s
Iteration  10: 720689.706 ops/s
Iteration  11: 720867.709 ops/s
Iteration  12: 718815.977 ops/s
Iteration  13: 728404.838 ops/s
Iteration  14: 723435.358 ops/s
Iteration  15: 720715.311 ops/s
Iteration  16: 720255.976 ops/s
Iteration  17: 723991.623 ops/s
Iteration  18: 724220.120 ops/s
Iteration  19: 720739.077 ops/s
Iteration  20: 723842.562 ops/s
Iteration  21: 723048.074 ops/s
Iteration  22: 720922.451 ops/s
Iteration  23: 721598.195 ops/s
Iteration  24: 722616.203 ops/s
Iteration  25: 719254.465 ops/s
Iteration  26: 718701.166 ops/s
Iteration  27: 720882.682 ops/s
Iteration  28: 718817.393 ops/s
Iteration  29: 721995.807 ops/s
Iteration  30: 722604.068 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_startWithIterableOneNull":
  721949.934 ±(99.9%) 1622.103 ops/s [Average]
  (min, avg, max) = (717881.680, 721949.934, 728404.838), stdev = 2427.887
  CI (99.9%): [720327.831, 723572.036] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_startWithIterableOneNull  thrpt   30  721949.934 ± 1622.103  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_requestOneByOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_requestOneByOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 930252.895 ops/s
# Warmup Iteration   2: 1336731.170 ops/s
# Warmup Iteration   3: 1407102.247 ops/s
# Warmup Iteration   4: 1509952.666 ops/s
# Warmup Iteration   5: 1506119.578 ops/s
# Warmup Iteration   6: 1520083.254 ops/s
# Warmup Iteration   7: 1525155.986 ops/s
# Warmup Iteration   8: 1525572.743 ops/s
# Warmup Iteration   9: 1523023.198 ops/s
# Warmup Iteration  10: 1523792.249 ops/s
# Warmup Iteration  11: 1515713.904 ops/s
# Warmup Iteration  12: 1346483.654 ops/s
# Warmup Iteration  13: 1159649.213 ops/s
# Warmup Iteration  14: 1083525.339 ops/s
# Warmup Iteration  15: 1121534.006 ops/s
# Warmup Iteration  16: 1109249.299 ops/s
# Warmup Iteration  17: 1113512.099 ops/s
# Warmup Iteration  18: 1156393.360 ops/s
# Warmup Iteration  19: 1133568.310 ops/s
# Warmup Iteration  20: 1127796.125 ops/s
# Warmup Iteration  21: 1159250.937 ops/s
# Warmup Iteration  22: 1087464.837 ops/s
# Warmup Iteration  23: 1137949.010 ops/s
# Warmup Iteration  24: 1100562.384 ops/s
# Warmup Iteration  25: 1124672.559 ops/s
# Warmup Iteration  26: 1114504.114 ops/s
# Warmup Iteration  27: 1117895.358 ops/s
# Warmup Iteration  28: 1127699.446 ops/s
# Warmup Iteration  29: 1133565.452 ops/s
# Warmup Iteration  30: 1153515.002 ops/s
Iteration   1: 1098435.432 ops/s
Iteration   2: 1149872.504 ops/s
Iteration   3: 1099687.839 ops/s
Iteration   4: 1092851.057 ops/s
Iteration   5: 1095950.384 ops/s
Iteration   6: 1124085.402 ops/s
Iteration   7: 1157215.887 ops/s
Iteration   8: 1101277.891 ops/s
Iteration   9: 1099709.471 ops/s
Iteration  10: 1142641.819 ops/s
Iteration  11: 1101546.152 ops/s
Iteration  12: 1136493.676 ops/s
Iteration  13: 1111527.851 ops/s
Iteration  14: 1124796.297 ops/s
Iteration  15: 1086800.381 ops/s
Iteration  16: 1098329.224 ops/s
Iteration  17: 1124262.532 ops/s
Iteration  18: 1074156.504 ops/s
Iteration  19: 1151662.075 ops/s
Iteration  20: 1056076.435 ops/s
Iteration  21: 1121018.886 ops/s
Iteration  22: 1098985.098 ops/s
Iteration  23: 1118345.321 ops/s
Iteration  24: 1149729.000 ops/s
Iteration  25: 1110057.785 ops/s
Iteration  26: 1132972.920 ops/s
Iteration  27: 1119602.482 ops/s
Iteration  28: 1096452.950 ops/s
Iteration  29: 1160928.947 ops/s
Iteration  30: 1081545.690 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_requestOneByOne":
  1113900.596 ±(99.9%) 17297.473 ops/s [Average]
  (min, avg, max) = (1056076.435, 1113900.596, 1160928.947), stdev = 25890.046
  CI (99.9%): [1096603.123, 1131198.070] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_requestOneByOne  thrpt   30  1113900.596 ± 17297.473  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_requestOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_requestOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2210186.887 ops/s
# Warmup Iteration   2: 4250815.754 ops/s
# Warmup Iteration   3: 4298063.605 ops/s
# Warmup Iteration   4: 4540935.976 ops/s
# Warmup Iteration   5: 5049721.492 ops/s
# Warmup Iteration   6: 4786322.049 ops/s
# Warmup Iteration   7: 5100226.961 ops/s
# Warmup Iteration   8: 5145065.267 ops/s
# Warmup Iteration   9: 5263600.643 ops/s
# Warmup Iteration  10: 4987004.179 ops/s
# Warmup Iteration  11: 5090221.003 ops/s
# Warmup Iteration  12: 5039614.890 ops/s
# Warmup Iteration  13: 5139695.430 ops/s
# Warmup Iteration  14: 5159097.414 ops/s
# Warmup Iteration  15: 5127446.360 ops/s
# Warmup Iteration  16: 5085750.352 ops/s
# Warmup Iteration  17: 5165486.254 ops/s
# Warmup Iteration  18: 5221049.912 ops/s
# Warmup Iteration  19: 5036106.806 ops/s
# Warmup Iteration  20: 4946411.743 ops/s
# Warmup Iteration  21: 5101327.880 ops/s
# Warmup Iteration  22: 4708521.244 ops/s
# Warmup Iteration  23: 5126111.167 ops/s
# Warmup Iteration  24: 4926676.844 ops/s
# Warmup Iteration  25: 4764934.012 ops/s
# Warmup Iteration  26: 5062771.206 ops/s
# Warmup Iteration  27: 4932842.750 ops/s
# Warmup Iteration  28: 5128024.537 ops/s
# Warmup Iteration  29: 5034695.332 ops/s
# Warmup Iteration  30: 4926976.435 ops/s
Iteration   1: 5131014.308 ops/s
Iteration   2: 5092208.067 ops/s
Iteration   3: 4921995.998 ops/s
Iteration   4: 5165851.614 ops/s
Iteration   5: 4791904.694 ops/s
Iteration   6: 5168959.148 ops/s
Iteration   7: 5132334.707 ops/s
Iteration   8: 5336715.145 ops/s
Iteration   9: 4886657.275 ops/s
Iteration  10: 5044786.219 ops/s
Iteration  11: 5160235.720 ops/s
Iteration  12: 5080748.647 ops/s
Iteration  13: 4750909.428 ops/s
Iteration  14: 4836118.622 ops/s
Iteration  15: 5097302.927 ops/s
Iteration  16: 4956759.670 ops/s
Iteration  17: 4316857.421 ops/s
Iteration  18: 4934561.050 ops/s
Iteration  19: 4607403.743 ops/s
Iteration  20: 4985298.328 ops/s
Iteration  21: 5181513.706 ops/s
Iteration  22: 4934836.604 ops/s
Iteration  23: 5192979.305 ops/s
Iteration  24: 5035435.427 ops/s
Iteration  25: 5181577.746 ops/s
Iteration  26: 5165327.497 ops/s
Iteration  27: 4934610.252 ops/s
Iteration  28: 5331393.010 ops/s
Iteration  29: 5206787.077 ops/s
Iteration  30: 4766415.910 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_requestOverflow":
  5010983.309 ±(99.9%) 145659.194 ops/s [Average]
  (min, avg, max) = (4316857.421, 5010983.309, 5336715.145), stdev = 218015.841
  CI (99.9%): [4865324.115, 5156642.503] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
FlowableRangeLongTest._Benchmark.benchmark_requestOverflow  thrpt   30  5010983.309 ± 145659.194  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 512607.667 ops/s
# Warmup Iteration   2: 2127652.017 ops/s
# Warmup Iteration   3: 3258739.279 ops/s
# Warmup Iteration   4: 3395133.621 ops/s
# Warmup Iteration   5: 3298696.031 ops/s
# Warmup Iteration   6: 3230256.446 ops/s
# Warmup Iteration   7: 3211039.420 ops/s
# Warmup Iteration   8: 3385297.011 ops/s
# Warmup Iteration   9: 3182399.703 ops/s
# Warmup Iteration  10: 3291516.349 ops/s
# Warmup Iteration  11: 3229074.326 ops/s
# Warmup Iteration  12: 2854111.853 ops/s
# Warmup Iteration  13: 3184733.614 ops/s
# Warmup Iteration  14: 3319717.930 ops/s
# Warmup Iteration  15: 3288014.729 ops/s
# Warmup Iteration  16: 3416299.284 ops/s
# Warmup Iteration  17: 3365611.097 ops/s
# Warmup Iteration  18: 3203965.612 ops/s
# Warmup Iteration  19: 3359118.343 ops/s
# Warmup Iteration  20: 3285975.607 ops/s
# Warmup Iteration  21: 3212984.972 ops/s
# Warmup Iteration  22: 3397625.482 ops/s
# Warmup Iteration  23: 3317361.324 ops/s
# Warmup Iteration  24: 3251236.392 ops/s
# Warmup Iteration  25: 3374653.461 ops/s
# Warmup Iteration  26: 3246445.878 ops/s
# Warmup Iteration  27: 3326515.924 ops/s
# Warmup Iteration  28: 3400277.159 ops/s
# Warmup Iteration  29: 3246342.123 ops/s
# Warmup Iteration  30: 3443749.718 ops/s
Iteration   1: 3229909.509 ops/s
Iteration   2: 3420017.586 ops/s
Iteration   3: 3245584.067 ops/s
Iteration   4: 3253454.111 ops/s
Iteration   5: 3392623.641 ops/s
Iteration   6: 3199963.588 ops/s
Iteration   7: 3311175.865 ops/s
Iteration   8: 3344586.558 ops/s
Iteration   9: 3261035.852 ops/s
Iteration  10: 3356536.233 ops/s
Iteration  11: 3338239.500 ops/s
Iteration  12: 3208504.863 ops/s
Iteration  13: 3436472.214 ops/s
Iteration  14: 3317844.453 ops/s
Iteration  15: 3387778.880 ops/s
Iteration  16: 3253679.390 ops/s
Iteration  17: 3392350.214 ops/s
Iteration  18: 3274905.953 ops/s
Iteration  19: 3271487.318 ops/s
Iteration  20: 3332647.461 ops/s
Iteration  21: 3228781.076 ops/s
Iteration  22: 3364591.871 ops/s
Iteration  23: 3248615.542 ops/s
Iteration  24: 3403698.696 ops/s
Iteration  25: 3443658.606 ops/s
Iteration  26: 3300075.019 ops/s
Iteration  27: 3360874.893 ops/s
Iteration  28: 3167290.896 ops/s
Iteration  29: 3433424.343 ops/s
Iteration  30: 3244604.228 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_normalConditional":
  3314147.081 ±(99.9%) 52487.563 ops/s [Average]
  (min, avg, max) = (3167290.896, 3314147.081, 3443658.606), stdev = 78560.920
  CI (99.9%): [3261659.518, 3366634.644] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableFromIterableTest._Benchmark.benchmark_normalConditional  thrpt   30  3314147.081 ± 52487.563  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledAfterItemsConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledAfterItemsConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 479075.111 ops/s
# Warmup Iteration   2: 1989401.559 ops/s
# Warmup Iteration   3: 2371357.396 ops/s
# Warmup Iteration   4: 2746002.928 ops/s
# Warmup Iteration   5: 2796633.362 ops/s
# Warmup Iteration   6: 2852084.180 ops/s
# Warmup Iteration   7: 2754480.774 ops/s
# Warmup Iteration   8: 2861585.731 ops/s
# Warmup Iteration   9: 2722522.887 ops/s
# Warmup Iteration  10: 2858622.737 ops/s
# Warmup Iteration  11: 2778919.588 ops/s
# Warmup Iteration  12: 2766870.948 ops/s
# Warmup Iteration  13: 2885255.732 ops/s
# Warmup Iteration  14: 2662678.726 ops/s
# Warmup Iteration  15: 2924652.812 ops/s
# Warmup Iteration  16: 2749304.436 ops/s
# Warmup Iteration  17: 2721840.102 ops/s
# Warmup Iteration  18: 2850039.626 ops/s
# Warmup Iteration  19: 2729530.432 ops/s
# Warmup Iteration  20: 2849080.464 ops/s
# Warmup Iteration  21: 2728896.735 ops/s
# Warmup Iteration  22: 2835950.882 ops/s
# Warmup Iteration  23: 2850646.929 ops/s
# Warmup Iteration  24: 2627783.637 ops/s
# Warmup Iteration  25: 2835087.262 ops/s
# Warmup Iteration  26: 2671316.186 ops/s
# Warmup Iteration  27: 2848198.085 ops/s
# Warmup Iteration  28: 2804608.125 ops/s
# Warmup Iteration  29: 2793218.133 ops/s
# Warmup Iteration  30: 2760805.638 ops/s
Iteration   1: 2854180.451 ops/s
Iteration   2: 2782421.729 ops/s
Iteration   3: 2838023.736 ops/s
Iteration   4: 2785170.289 ops/s
Iteration   5: 2790863.438 ops/s
Iteration   6: 2844353.915 ops/s
Iteration   7: 2748982.934 ops/s
Iteration   8: 2870790.733 ops/s
Iteration   9: 2752762.973 ops/s
Iteration  10: 2861418.395 ops/s
Iteration  11: 2826625.641 ops/s
Iteration  12: 2216823.170 ops/s
Iteration  13: 2895392.674 ops/s
Iteration  14: 2803042.591 ops/s
Iteration  15: 2693882.041 ops/s
Iteration  16: 2775235.035 ops/s
Iteration  17: 2879778.523 ops/s
Iteration  18: 2762857.447 ops/s
Iteration  19: 2826137.137 ops/s
Iteration  20: 2911825.415 ops/s
Iteration  21: 2718368.720 ops/s
Iteration  22: 2814330.701 ops/s
Iteration  23: 2901049.337 ops/s
Iteration  24: 2762246.899 ops/s
Iteration  25: 2781467.271 ops/s
Iteration  26: 2663633.710 ops/s
Iteration  27: 2849448.790 ops/s
Iteration  28: 2747477.757 ops/s
Iteration  29: 2772203.269 ops/s
Iteration  30: 2794932.861 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledAfterItemsConditional":
  2784190.919 ±(99.9%) 82225.276 ops/s [Average]
  (min, avg, max) = (2216823.170, 2784190.919, 2911825.415), stdev = 123070.932
  CI (99.9%): [2701965.643, 2866416.195] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_closeCalledAfterItemsConditional  thrpt   30  2784190.919 ± 82225.276  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 274730.354 ops/s
# Warmup Iteration   2: 522170.954 ops/s
# Warmup Iteration   3: 597348.354 ops/s
# Warmup Iteration   4: 531693.431 ops/s
# Warmup Iteration   5: 607871.536 ops/s
# Warmup Iteration   6: 613564.911 ops/s
# Warmup Iteration   7: 605033.855 ops/s
# Warmup Iteration   8: 644495.792 ops/s
# Warmup Iteration   9: 609760.462 ops/s
# Warmup Iteration  10: 603120.824 ops/s
# Warmup Iteration  11: 632408.158 ops/s
# Warmup Iteration  12: 599583.662 ops/s
# Warmup Iteration  13: 642123.478 ops/s
# Warmup Iteration  14: 603180.468 ops/s
# Warmup Iteration  15: 619887.909 ops/s
# Warmup Iteration  16: 639277.872 ops/s
# Warmup Iteration  17: 662992.614 ops/s
# Warmup Iteration  18: 614866.076 ops/s
# Warmup Iteration  19: 664072.925 ops/s
# Warmup Iteration  20: 641784.091 ops/s
# Warmup Iteration  21: 670658.856 ops/s
# Warmup Iteration  22: 638505.469 ops/s
# Warmup Iteration  23: 656546.616 ops/s
# Warmup Iteration  24: 661229.690 ops/s
# Warmup Iteration  25: 653754.465 ops/s
# Warmup Iteration  26: 634382.765 ops/s
# Warmup Iteration  27: 659986.502 ops/s
# Warmup Iteration  28: 640142.169 ops/s
# Warmup Iteration  29: 656244.039 ops/s
# Warmup Iteration  30: 647657.361 ops/s
Iteration   1: 667379.197 ops/s
Iteration   2: 644208.366 ops/s
Iteration   3: 658415.840 ops/s
Iteration   4: 655890.459 ops/s
Iteration   5: 642367.923 ops/s
Iteration   6: 664583.379 ops/s
Iteration   7: 647530.443 ops/s
Iteration   8: 630832.298 ops/s
Iteration   9: 676937.996 ops/s
Iteration  10: 642432.205 ops/s
Iteration  11: 656192.780 ops/s
Iteration  12: 665625.094 ops/s
Iteration  13: 633471.504 ops/s
Iteration  14: 670792.693 ops/s
Iteration  15: 670213.978 ops/s
Iteration  16: 644501.695 ops/s
Iteration  17: 645281.465 ops/s
Iteration  18: 658498.570 ops/s
Iteration  19: 640836.416 ops/s
Iteration  20: 663195.835 ops/s
Iteration  21: 648204.435 ops/s
Iteration  22: 653423.378 ops/s
Iteration  23: 674962.338 ops/s
Iteration  24: 629370.691 ops/s
Iteration  25: 673607.504 ops/s
Iteration  26: 648513.466 ops/s
Iteration  27: 655077.634 ops/s
Iteration  28: 624545.361 ops/s
Iteration  29: 644518.899 ops/s
Iteration  30: 671961.017 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_error":
  653445.762 ±(99.9%) 9690.543 ops/s [Average]
  (min, avg, max) = (624545.361, 653445.762, 676937.996), stdev = 14504.350
  CI (99.9%): [643755.219, 663136.305] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
BlockingFlowableLatestTest._Benchmark.benchmark_error  thrpt   30  653445.762 ± 9690.543  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 114540.687 ops/s
# Warmup Iteration   2: 327036.171 ops/s
# Warmup Iteration   3: 525803.061 ops/s
# Warmup Iteration   4: 502452.659 ops/s
# Warmup Iteration   5: 499118.969 ops/s
# Warmup Iteration   6: 515099.809 ops/s
# Warmup Iteration   7: 516153.642 ops/s
# Warmup Iteration   8: 485360.977 ops/s
# Warmup Iteration   9: 533463.971 ops/s
# Warmup Iteration  10: 501554.716 ops/s
# Warmup Iteration  11: 512848.287 ops/s
# Warmup Iteration  12: 517366.085 ops/s
# Warmup Iteration  13: 505886.826 ops/s
# Warmup Iteration  14: 522161.818 ops/s
# Warmup Iteration  15: 482864.369 ops/s
# Warmup Iteration  16: 529038.473 ops/s
# Warmup Iteration  17: 531409.831 ops/s
# Warmup Iteration  18: 514435.741 ops/s
# Warmup Iteration  19: 549496.724 ops/s
# Warmup Iteration  20: 533419.029 ops/s
# Warmup Iteration  21: 565219.547 ops/s
# Warmup Iteration  22: 526141.474 ops/s
# Warmup Iteration  23: 545229.683 ops/s
# Warmup Iteration  24: 556719.673 ops/s
# Warmup Iteration  25: 523200.700 ops/s
# Warmup Iteration  26: 528585.644 ops/s
# Warmup Iteration  27: 513105.254 ops/s
# Warmup Iteration  28: 528026.825 ops/s
# Warmup Iteration  29: 514060.096 ops/s
# Warmup Iteration  30: 561064.907 ops/s
Iteration   1: 536404.379 ops/s
Iteration   2: 536162.528 ops/s
Iteration   3: 566922.623 ops/s
Iteration   4: 526685.443 ops/s
Iteration   5: 546784.012 ops/s
Iteration   6: 525284.541 ops/s
Iteration   7: 393000.809 ops/s
Iteration   8: 550924.320 ops/s
Iteration   9: 529537.300 ops/s
Iteration  10: 540759.808 ops/s
Iteration  11: 525503.352 ops/s
Iteration  12: 528404.575 ops/s
Iteration  13: 521727.064 ops/s
Iteration  14: 557298.275 ops/s
Iteration  15: 545003.383 ops/s
Iteration  16: 546350.467 ops/s
Iteration  17: 533604.968 ops/s
Iteration  18: 563252.252 ops/s
Iteration  19: 518934.572 ops/s
Iteration  20: 548549.628 ops/s
Iteration  21: 529894.984 ops/s
Iteration  22: 547115.548 ops/s
Iteration  23: 532777.113 ops/s
Iteration  24: 538572.048 ops/s
Iteration  25: 562437.405 ops/s
Iteration  26: 532337.436 ops/s
Iteration  27: 538146.288 ops/s
Iteration  28: 553885.372 ops/s
Iteration  29: 534562.856 ops/s
Iteration  30: 552920.532 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorOverlap":
  535458.129 ±(99.9%) 19894.999 ops/s [Average]
  (min, avg, max) = (393000.809, 535458.129, 566922.623), stdev = 29777.899
  CI (99.9%): [515563.131, 555353.128] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_errorOverlap  thrpt   30  535458.129 ± 19894.999  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_fromAction$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_fromAction

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2080102.224 ops/s
# Warmup Iteration   2: 5781080.695 ops/s
# Warmup Iteration   3: 7473968.927 ops/s
# Warmup Iteration   4: 8148709.394 ops/s
# Warmup Iteration   5: 7622454.131 ops/s
# Warmup Iteration   6: 8014612.361 ops/s
# Warmup Iteration   7: 7935797.993 ops/s
# Warmup Iteration   8: 7830279.736 ops/s
# Warmup Iteration   9: 7952700.063 ops/s
# Warmup Iteration  10: 7613950.820 ops/s
# Warmup Iteration  11: 7901338.370 ops/s
# Warmup Iteration  12: 7709507.699 ops/s
# Warmup Iteration  13: 7733702.108 ops/s
# Warmup Iteration  14: 7837515.742 ops/s
# Warmup Iteration  15: 7565187.149 ops/s
# Warmup Iteration  16: 7936463.023 ops/s
# Warmup Iteration  17: 7476124.119 ops/s
# Warmup Iteration  18: 8301401.608 ops/s
# Warmup Iteration  19: 7859571.911 ops/s
# Warmup Iteration  20: 7498779.940 ops/s
# Warmup Iteration  21: 8023996.064 ops/s
# Warmup Iteration  22: 8139371.822 ops/s
# Warmup Iteration  23: 7843280.973 ops/s
# Warmup Iteration  24: 8171756.212 ops/s
# Warmup Iteration  25: 7836408.268 ops/s
# Warmup Iteration  26: 7727668.747 ops/s
# Warmup Iteration  27: 7993692.845 ops/s
# Warmup Iteration  28: 7750217.005 ops/s
# Warmup Iteration  29: 7958112.167 ops/s
# Warmup Iteration  30: 8192732.843 ops/s
Iteration   1: 7555211.821 ops/s
Iteration   2: 7845135.965 ops/s
Iteration   3: 7607356.046 ops/s
Iteration   4: 7937045.283 ops/s
Iteration   5: 7775900.080 ops/s
Iteration   6: 8092801.130 ops/s
Iteration   7: 7914088.749 ops/s
Iteration   8: 7825932.998 ops/s
Iteration   9: 7876188.233 ops/s
Iteration  10: 7722626.163 ops/s
Iteration  11: 8196758.425 ops/s
Iteration  12: 7885903.042 ops/s
Iteration  13: 7819404.574 ops/s
Iteration  14: 8126482.731 ops/s
Iteration  15: 8202257.487 ops/s
Iteration  16: 7670349.994 ops/s
Iteration  17: 8169255.898 ops/s
Iteration  18: 7659688.710 ops/s
Iteration  19: 7803134.391 ops/s
Iteration  20: 8027921.644 ops/s
Iteration  21: 7657175.320 ops/s
Iteration  22: 7864207.599 ops/s
Iteration  23: 8114168.659 ops/s
Iteration  24: 7849745.112 ops/s
Iteration  25: 7689406.739 ops/s
Iteration  26: 8098923.195 ops/s
Iteration  27: 7771175.152 ops/s
Iteration  28: 8117210.833 ops/s
Iteration  29: 7675665.254 ops/s
Iteration  30: 7768432.869 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_fromAction":
  7877318.470 ±(99.9%) 127363.527 ops/s [Average]
  (min, avg, max) = (7555211.821, 7877318.470, 8202257.487), stdev = 190631.746
  CI (99.9%): [7749954.943, 8004681.997] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
FlowableFromActionTest._Benchmark.benchmark_fromAction  thrpt   30  7877318.470 ± 127363.527  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_fromRunnable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_fromRunnable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1741832.131 ops/s
# Warmup Iteration   2: 5701647.461 ops/s
# Warmup Iteration   3: 7301409.884 ops/s
# Warmup Iteration   4: 7752302.164 ops/s
# Warmup Iteration   5: 7950029.703 ops/s
# Warmup Iteration   6: 7762803.547 ops/s
# Warmup Iteration   7: 7849048.973 ops/s
# Warmup Iteration   8: 8093739.018 ops/s
# Warmup Iteration   9: 7780893.108 ops/s
# Warmup Iteration  10: 8113585.267 ops/s
# Warmup Iteration  11: 7970074.327 ops/s
# Warmup Iteration  12: 7739911.465 ops/s
# Warmup Iteration  13: 7882141.722 ops/s
# Warmup Iteration  14: 7774864.110 ops/s
# Warmup Iteration  15: 7981544.376 ops/s
# Warmup Iteration  16: 8105246.659 ops/s
# Warmup Iteration  17: 7787970.626 ops/s
# Warmup Iteration  18: 7773183.182 ops/s
# Warmup Iteration  19: 8019400.910 ops/s
# Warmup Iteration  20: 7945021.820 ops/s
# Warmup Iteration  21: 8228391.699 ops/s
# Warmup Iteration  22: 8061875.040 ops/s
# Warmup Iteration  23: 7691517.651 ops/s
# Warmup Iteration  24: 8018813.350 ops/s
# Warmup Iteration  25: 7887210.249 ops/s
# Warmup Iteration  26: 8003808.688 ops/s
# Warmup Iteration  27: 7776957.478 ops/s
# Warmup Iteration  28: 7865251.182 ops/s
# Warmup Iteration  29: 8071307.618 ops/s
# Warmup Iteration  30: 7752125.421 ops/s
Iteration   1: 6176237.974 ops/s
Iteration   2: 8178795.752 ops/s
Iteration   3: 7655791.961 ops/s
Iteration   4: 7855633.556 ops/s
Iteration   5: 7810507.049 ops/s
Iteration   6: 7803202.599 ops/s
Iteration   7: 8009072.930 ops/s
Iteration   8: 7630411.480 ops/s
Iteration   9: 7995197.317 ops/s
Iteration  10: 7977776.140 ops/s
Iteration  11: 7722955.506 ops/s
Iteration  12: 7890872.329 ops/s
Iteration  13: 7977070.810 ops/s
Iteration  14: 7830513.108 ops/s
Iteration  15: 8087307.583 ops/s
Iteration  16: 7605030.058 ops/s
Iteration  17: 7978262.163 ops/s
Iteration  18: 7785909.280 ops/s
Iteration  19: 8023931.779 ops/s
Iteration  20: 7973294.212 ops/s
Iteration  21: 7874368.768 ops/s
Iteration  22: 7932249.115 ops/s
Iteration  23: 7669856.321 ops/s
Iteration  24: 8021332.877 ops/s
Iteration  25: 8131483.360 ops/s
Iteration  26: 7599457.258 ops/s
Iteration  27: 8018954.716 ops/s
Iteration  28: 7717125.206 ops/s
Iteration  29: 8067739.679 ops/s
Iteration  30: 7645417.021 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_fromRunnable":
  7821525.264 ±(99.9%) 235430.449 ops/s [Average]
  (min, avg, max) = (6176237.974, 7821525.264, 8178795.752), stdev = 352381.239
  CI (99.9%): [7586094.815, 8056955.712] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
FlowableFromRunnableTest._Benchmark.benchmark_fromRunnable  thrpt   30  7821525.264 ± 235430.449  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_retryLongPredicateInvalid$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_retryLongPredicateInvalid

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 405198.972 ops/s
# Warmup Iteration   2: 636535.472 ops/s
# Warmup Iteration   3: 688869.800 ops/s
# Warmup Iteration   4: 736747.322 ops/s
# Warmup Iteration   5: 603013.380 ops/s
# Warmup Iteration   6: 757301.930 ops/s
# Warmup Iteration   7: 738767.177 ops/s
# Warmup Iteration   8: 751635.733 ops/s
# Warmup Iteration   9: 772743.439 ops/s
# Warmup Iteration  10: 719168.048 ops/s
# Warmup Iteration  11: 729489.345 ops/s
# Warmup Iteration  12: 736059.032 ops/s
# Warmup Iteration  13: 747480.577 ops/s
# Warmup Iteration  14: 766941.260 ops/s
# Warmup Iteration  15: 721766.913 ops/s
# Warmup Iteration  16: 751349.706 ops/s
# Warmup Iteration  17: 810837.794 ops/s
# Warmup Iteration  18: 766112.538 ops/s
# Warmup Iteration  19: 760560.802 ops/s
# Warmup Iteration  20: 812076.307 ops/s
# Warmup Iteration  21: 764681.419 ops/s
# Warmup Iteration  22: 783466.238 ops/s
# Warmup Iteration  23: 789396.997 ops/s
# Warmup Iteration  24: 768291.649 ops/s
# Warmup Iteration  25: 768479.820 ops/s
# Warmup Iteration  26: 758078.729 ops/s
# Warmup Iteration  27: 746426.293 ops/s
# Warmup Iteration  28: 786251.372 ops/s
# Warmup Iteration  29: 789515.346 ops/s
# Warmup Iteration  30: 768314.931 ops/s
Iteration   1: 774226.863 ops/s
Iteration   2: 819147.615 ops/s
Iteration   3: 750753.261 ops/s
Iteration   4: 796101.233 ops/s
Iteration   5: 795683.040 ops/s
Iteration   6: 773542.085 ops/s
Iteration   7: 803309.165 ops/s
Iteration   8: 772062.185 ops/s
Iteration   9: 785084.473 ops/s
Iteration  10: 773946.331 ops/s
Iteration  11: 790151.121 ops/s
Iteration  12: 788661.486 ops/s
Iteration  13: 775558.534 ops/s
Iteration  14: 773317.821 ops/s
Iteration  15: 785833.227 ops/s
Iteration  16: 781440.108 ops/s
Iteration  17: 812407.114 ops/s
Iteration  18: 777899.177 ops/s
Iteration  19: 767052.562 ops/s
Iteration  20: 785741.902 ops/s
Iteration  21: 783784.049 ops/s
Iteration  22: 750892.624 ops/s
Iteration  23: 780953.221 ops/s
Iteration  24: 825405.745 ops/s
Iteration  25: 761147.036 ops/s
Iteration  26: 780731.196 ops/s
Iteration  27: 789496.791 ops/s
Iteration  28: 779836.565 ops/s
Iteration  29: 782586.269 ops/s
Iteration  30: 765964.421 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_retryLongPredicateInvalid":
  782757.241 ±(99.9%) 11449.505 ops/s [Average]
  (min, avg, max) = (750753.261, 782757.241, 825405.745), stdev = 17137.081
  CI (99.9%): [771307.736, 794206.746] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableRetryTest._Benchmark.benchmark_retryLongPredicateInvalid  thrpt   30  782757.241 ± 11449.505  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_fromActionInvokesLazy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_fromActionInvokesLazy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2070197.769 ops/s
# Warmup Iteration   2: 5585332.706 ops/s
# Warmup Iteration   3: 7644364.022 ops/s
# Warmup Iteration   4: 7687512.416 ops/s
# Warmup Iteration   5: 8049267.516 ops/s
# Warmup Iteration   6: 7724099.320 ops/s
# Warmup Iteration   7: 7636474.453 ops/s
# Warmup Iteration   8: 7862767.728 ops/s
# Warmup Iteration   9: 7810385.354 ops/s
# Warmup Iteration  10: 7976143.327 ops/s
# Warmup Iteration  11: 7908691.310 ops/s
# Warmup Iteration  12: 7572782.121 ops/s
# Warmup Iteration  13: 7932783.751 ops/s
# Warmup Iteration  14: 7635781.831 ops/s
# Warmup Iteration  15: 7690671.376 ops/s
# Warmup Iteration  16: 8238305.398 ops/s
# Warmup Iteration  17: 8054243.589 ops/s
# Warmup Iteration  18: 7648816.693 ops/s
# Warmup Iteration  19: 7992833.981 ops/s
# Warmup Iteration  20: 7705228.647 ops/s
# Warmup Iteration  21: 7875497.707 ops/s
# Warmup Iteration  22: 7511055.485 ops/s
# Warmup Iteration  23: 7944933.059 ops/s
# Warmup Iteration  24: 7837966.512 ops/s
# Warmup Iteration  25: 7569938.695 ops/s
# Warmup Iteration  26: 6607777.987 ops/s
# Warmup Iteration  27: 8018086.137 ops/s
# Warmup Iteration  28: 7826113.289 ops/s
# Warmup Iteration  29: 8005576.607 ops/s
# Warmup Iteration  30: 7636833.645 ops/s
Iteration   1: 7806117.849 ops/s
Iteration   2: 7813152.672 ops/s
Iteration   3: 8036820.407 ops/s
Iteration   4: 7650911.778 ops/s
Iteration   5: 7794193.605 ops/s
Iteration   6: 7665093.778 ops/s
Iteration   7: 8007859.716 ops/s
Iteration   8: 7777850.810 ops/s
Iteration   9: 7754489.315 ops/s
Iteration  10: 7709942.624 ops/s
Iteration  11: 7867030.830 ops/s
Iteration  12: 7740278.166 ops/s
Iteration  13: 7962270.629 ops/s
Iteration  14: 7667337.151 ops/s
Iteration  15: 8188448.879 ops/s
Iteration  16: 8073243.031 ops/s
Iteration  17: 7592704.584 ops/s
Iteration  18: 8009211.482 ops/s
Iteration  19: 7916135.488 ops/s
Iteration  20: 7868720.612 ops/s
Iteration  21: 7870731.948 ops/s
Iteration  22: 7375993.881 ops/s
Iteration  23: 8025329.855 ops/s
Iteration  24: 7765915.347 ops/s
Iteration  25: 7435017.764 ops/s
Iteration  26: 8110442.072 ops/s
Iteration  27: 7631203.229 ops/s
Iteration  28: 8226949.836 ops/s
Iteration  29: 8150064.906 ops/s
Iteration  30: 7731874.128 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_fromActionInvokesLazy":
  7840844.546 ±(99.9%) 140766.538 ops/s [Average]
  (min, avg, max) = (7375993.881, 7840844.546, 8226949.836), stdev = 210692.744
  CI (99.9%): [7700078.007, 7981611.084] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
FlowableFromActionTest._Benchmark.benchmark_fromActionInvokesLazy  thrpt   30  7840844.546 ± 140766.538  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_fromRunnableInvokesLazy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_fromRunnableInvokesLazy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2023086.098 ops/s
# Warmup Iteration   2: 5598365.226 ops/s
# Warmup Iteration   3: 7717032.620 ops/s
# Warmup Iteration   4: 7477308.227 ops/s
# Warmup Iteration   5: 7943309.845 ops/s
# Warmup Iteration   6: 7490303.020 ops/s
# Warmup Iteration   7: 7634497.313 ops/s
# Warmup Iteration   8: 7906906.114 ops/s
# Warmup Iteration   9: 7820508.022 ops/s
# Warmup Iteration  10: 7733354.844 ops/s
# Warmup Iteration  11: 7673180.789 ops/s
# Warmup Iteration  12: 8203283.106 ops/s
# Warmup Iteration  13: 7779154.849 ops/s
# Warmup Iteration  14: 8046938.829 ops/s
# Warmup Iteration  15: 7750064.973 ops/s
# Warmup Iteration  16: 7867040.964 ops/s
# Warmup Iteration  17: 7681023.993 ops/s
# Warmup Iteration  18: 7720161.814 ops/s
# Warmup Iteration  19: 8312340.261 ops/s
# Warmup Iteration  20: 7784573.104 ops/s
# Warmup Iteration  21: 8055300.776 ops/s
# Warmup Iteration  22: 7838056.079 ops/s
# Warmup Iteration  23: 7959413.089 ops/s
# Warmup Iteration  24: 7702538.839 ops/s
# Warmup Iteration  25: 8081822.089 ops/s
# Warmup Iteration  26: 7687797.652 ops/s
# Warmup Iteration  27: 8002556.491 ops/s
# Warmup Iteration  28: 7863560.420 ops/s
# Warmup Iteration  29: 7885210.507 ops/s
# Warmup Iteration  30: 8113091.934 ops/s
Iteration   1: 7639306.855 ops/s
Iteration   2: 7822977.316 ops/s
Iteration   3: 8181118.657 ops/s
Iteration   4: 7750293.056 ops/s
Iteration   5: 7879630.508 ops/s
Iteration   6: 7726332.356 ops/s
Iteration   7: 7583445.353 ops/s
Iteration   8: 8107143.667 ops/s
Iteration   9: 7796500.330 ops/s
Iteration  10: 8126988.217 ops/s
Iteration  11: 7449924.650 ops/s
Iteration  12: 8061971.234 ops/s
Iteration  13: 8104080.691 ops/s
Iteration  14: 7764271.595 ops/s
Iteration  15: 7489767.806 ops/s
Iteration  16: 7836747.905 ops/s
Iteration  17: 8084327.651 ops/s
Iteration  18: 7612180.996 ops/s
Iteration  19: 7977343.793 ops/s
Iteration  20: 7640871.659 ops/s
Iteration  21: 8291219.205 ops/s
Iteration  22: 7804731.683 ops/s
Iteration  23: 7782422.502 ops/s
Iteration  24: 7952959.702 ops/s
Iteration  25: 7841852.954 ops/s
Iteration  26: 8109236.453 ops/s
Iteration  27: 7670149.032 ops/s
Iteration  28: 8193419.589 ops/s
Iteration  29: 7666357.600 ops/s
Iteration  30: 7784521.657 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_fromRunnableInvokesLazy":
  7857736.489 ±(99.9%) 148958.842 ops/s [Average]
  (min, avg, max) = (7449924.650, 7857736.489, 8291219.205), stdev = 222954.600
  CI (99.9%): [7708777.647, 8006695.332] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
FlowableFromRunnableTest._Benchmark.benchmark_fromRunnableInvokesLazy  thrpt   30  7857736.489 ± 148958.842  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusionRequestedState$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusionRequestedState

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 880320.469 ops/s
# Warmup Iteration   2: 2166624.942 ops/s
# Warmup Iteration   3: 2666230.871 ops/s
# Warmup Iteration   4: 2671104.350 ops/s
# Warmup Iteration   5: 2764525.198 ops/s
# Warmup Iteration   6: 2674690.167 ops/s
# Warmup Iteration   7: 2559466.841 ops/s
# Warmup Iteration   8: 2700443.684 ops/s
# Warmup Iteration   9: 2666351.129 ops/s
# Warmup Iteration  10: 2708400.519 ops/s
# Warmup Iteration  11: 2696686.642 ops/s
# Warmup Iteration  12: 2648715.312 ops/s
# Warmup Iteration  13: 2774551.652 ops/s
# Warmup Iteration  14: 2637847.120 ops/s
# Warmup Iteration  15: 2719584.753 ops/s
# Warmup Iteration  16: 2775723.025 ops/s
# Warmup Iteration  17: 2677616.373 ops/s
# Warmup Iteration  18: 2768654.263 ops/s
# Warmup Iteration  19: 2673944.938 ops/s
# Warmup Iteration  20: 2220654.609 ops/s
# Warmup Iteration  21: 2712950.462 ops/s
# Warmup Iteration  22: 2724686.030 ops/s
# Warmup Iteration  23: 2667780.569 ops/s
# Warmup Iteration  24: 2701533.161 ops/s
# Warmup Iteration  25: 2658328.783 ops/s
# Warmup Iteration  26: 2795830.972 ops/s
# Warmup Iteration  27: 2600908.214 ops/s
# Warmup Iteration  28: 2683656.292 ops/s
# Warmup Iteration  29: 2830941.296 ops/s
# Warmup Iteration  30: 2631812.589 ops/s
Iteration   1: 2717852.508 ops/s
Iteration   2: 2562529.444 ops/s
Iteration   3: 2761363.378 ops/s
Iteration   4: 2698860.752 ops/s
Iteration   5: 2629366.973 ops/s
Iteration   6: 2772050.006 ops/s
Iteration   7: 2674844.406 ops/s
Iteration   8: 2763301.095 ops/s
Iteration   9: 2631856.810 ops/s
Iteration  10: 2673389.044 ops/s
Iteration  11: 2759594.572 ops/s
Iteration  12: 2642941.156 ops/s
Iteration  13: 2825384.401 ops/s
Iteration  14: 2736878.597 ops/s
Iteration  15: 2730734.180 ops/s
Iteration  16: 2674848.370 ops/s
Iteration  17: 2708880.710 ops/s
Iteration  18: 2656004.729 ops/s
Iteration  19: 2763813.784 ops/s
Iteration  20: 2721427.956 ops/s
Iteration  21: 2685820.289 ops/s
Iteration  22: 2770291.666 ops/s
Iteration  23: 2659851.348 ops/s
Iteration  24: 2694290.291 ops/s
Iteration  25: 2751906.622 ops/s
Iteration  26: 2673694.385 ops/s
Iteration  27: 2725530.613 ops/s
Iteration  28: 2597794.333 ops/s
Iteration  29: 2787767.480 ops/s
Iteration  30: 2752762.068 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_fusionRequestedState":
  2706854.399 ±(99.9%) 40300.252 ops/s [Average]
  (min, avg, max) = (2562529.444, 2706854.399, 2825384.401), stdev = 60319.524
  CI (99.9%): [2666554.147, 2747154.650] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_fusionRequestedState  thrpt   30  2706854.399 ± 40300.252  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_onError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_onError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70961.417 ops/s
# Warmup Iteration   2: 212128.624 ops/s
# Warmup Iteration   3: 244556.317 ops/s
# Warmup Iteration   4: 254642.316 ops/s
# Warmup Iteration   5: 272053.338 ops/s
# Warmup Iteration   6: 263145.617 ops/s
# Warmup Iteration   7: 270518.760 ops/s
# Warmup Iteration   8: 254137.476 ops/s
# Warmup Iteration   9: 268054.408 ops/s
# Warmup Iteration  10: 254956.926 ops/s
# Warmup Iteration  11: 252872.788 ops/s
# Warmup Iteration  12: 267606.468 ops/s
# Warmup Iteration  13: 239215.731 ops/s
# Warmup Iteration  14: 266588.343 ops/s
# Warmup Iteration  15: 270796.992 ops/s
# Warmup Iteration  16: 263155.650 ops/s
# Warmup Iteration  17: 284106.468 ops/s
# Warmup Iteration  18: 284241.153 ops/s
# Warmup Iteration  19: 272549.832 ops/s
# Warmup Iteration  20: 275299.011 ops/s
# Warmup Iteration  21: 270464.844 ops/s
# Warmup Iteration  22: 271685.108 ops/s
# Warmup Iteration  23: 273558.988 ops/s
# Warmup Iteration  24: 267618.448 ops/s
# Warmup Iteration  25: 272640.175 ops/s
# Warmup Iteration  26: 282664.027 ops/s
# Warmup Iteration  27: 259101.162 ops/s
# Warmup Iteration  28: 273549.481 ops/s
# Warmup Iteration  29: 275836.089 ops/s
# Warmup Iteration  30: 266644.896 ops/s
Iteration   1: 281942.072 ops/s
Iteration   2: 243696.493 ops/s
Iteration   3: 266040.200 ops/s
Iteration   4: 285851.171 ops/s
Iteration   5: 276971.377 ops/s
Iteration   6: 270478.187 ops/s
Iteration   7: 290361.825 ops/s
Iteration   8: 271242.125 ops/s
Iteration   9: 284480.151 ops/s
Iteration  10: 273643.167 ops/s
Iteration  11: 273522.930 ops/s
Iteration  12: 269906.084 ops/s
Iteration  13: 263640.438 ops/s
Iteration  14: 284091.121 ops/s
Iteration  15: 289925.108 ops/s
Iteration  16: 273151.688 ops/s
Iteration  17: 269348.463 ops/s
Iteration  18: 286542.356 ops/s
Iteration  19: 278551.955 ops/s
Iteration  20: 271858.910 ops/s
Iteration  21: 278601.279 ops/s
Iteration  22: 269435.040 ops/s
Iteration  23: 286894.919 ops/s
Iteration  24: 263091.285 ops/s
Iteration  25: 280719.039 ops/s
Iteration  26: 275680.976 ops/s
Iteration  27: 274814.039 ops/s
Iteration  28: 279826.988 ops/s
Iteration  29: 271791.246 ops/s
Iteration  30: 282263.552 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_onError":
  275612.139 ±(99.9%) 6424.492 ops/s [Average]
  (min, avg, max) = (243696.493, 275612.139, 290361.825), stdev = 9615.878
  CI (99.9%): [269187.647, 282036.631] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
BlockingFlowableLatestTest._Benchmark.benchmark_onError  thrpt   30  275612.139 ± 6424.492  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_fromRunnableTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_fromRunnableTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1132752.101 ops/s
# Warmup Iteration   2: 2765174.502 ops/s
# Warmup Iteration   3: 3903526.085 ops/s
# Warmup Iteration   4: 3838528.274 ops/s
# Warmup Iteration   5: 3814697.170 ops/s
# Warmup Iteration   6: 3788917.934 ops/s
# Warmup Iteration   7: 3755518.004 ops/s
# Warmup Iteration   8: 3850972.863 ops/s
# Warmup Iteration   9: 3907126.673 ops/s
# Warmup Iteration  10: 3874080.700 ops/s
# Warmup Iteration  11: 4010598.556 ops/s
# Warmup Iteration  12: 3827805.685 ops/s
# Warmup Iteration  13: 3890740.045 ops/s
# Warmup Iteration  14: 3726197.589 ops/s
# Warmup Iteration  15: 3268242.127 ops/s
# Warmup Iteration  16: 3857288.949 ops/s
# Warmup Iteration  17: 3833489.427 ops/s
# Warmup Iteration  18: 3896451.895 ops/s
# Warmup Iteration  19: 3815975.173 ops/s
# Warmup Iteration  20: 3764950.067 ops/s
# Warmup Iteration  21: 3947182.414 ops/s
# Warmup Iteration  22: 3653211.119 ops/s
# Warmup Iteration  23: 3842547.140 ops/s
# Warmup Iteration  24: 3851804.580 ops/s
# Warmup Iteration  25: 3795888.793 ops/s
# Warmup Iteration  26: 3840432.053 ops/s
# Warmup Iteration  27: 3786201.807 ops/s
# Warmup Iteration  28: 3896370.437 ops/s
# Warmup Iteration  29: 3731012.858 ops/s
# Warmup Iteration  30: 3714693.908 ops/s
Iteration   1: 3880376.237 ops/s
Iteration   2: 3981167.351 ops/s
Iteration   3: 3700331.412 ops/s
Iteration   4: 3899518.225 ops/s
Iteration   5: 4001760.854 ops/s
Iteration   6: 3671446.662 ops/s
Iteration   7: 3923286.073 ops/s
Iteration   8: 3828193.484 ops/s
Iteration   9: 3991337.283 ops/s
Iteration  10: 3961523.658 ops/s
Iteration  11: 3741846.464 ops/s
Iteration  12: 4036407.143 ops/s
Iteration  13: 3891364.279 ops/s
Iteration  14: 3842061.832 ops/s
Iteration  15: 3838253.477 ops/s
Iteration  16: 3921553.662 ops/s
Iteration  17: 3756719.522 ops/s
Iteration  18: 3920942.426 ops/s
Iteration  19: 3825159.526 ops/s
Iteration  20: 3795128.898 ops/s
Iteration  21: 4013527.072 ops/s
Iteration  22: 3641227.491 ops/s
Iteration  23: 3836712.482 ops/s
Iteration  24: 3907539.223 ops/s
Iteration  25: 4010288.060 ops/s
Iteration  26: 3909398.107 ops/s
Iteration  27: 3688295.786 ops/s
Iteration  28: 3877475.682 ops/s
Iteration  29: 3947534.007 ops/s
Iteration  30: 3768841.510 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnableTest._Benchmark.benchmark_fromRunnableTwice":
  3866973.930 ±(99.9%) 72807.068 ops/s [Average]
  (min, avg, max) = (3641227.491, 3866973.930, 4036407.143), stdev = 108974.199
  CI (99.9%): [3794166.862, 3939780.997] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableFromRunnableTest._Benchmark.benchmark_fromRunnableTwice  thrpt   30  3866973.930 ± 72807.068  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_unsafeWithObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_unsafeWithObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 403766.455 ops/s
# Warmup Iteration   2: 685536.425 ops/s
# Warmup Iteration   3: 722137.410 ops/s
# Warmup Iteration   4: 650931.194 ops/s
# Warmup Iteration   5: 769351.720 ops/s
# Warmup Iteration   6: 716787.411 ops/s
# Warmup Iteration   7: 678794.513 ops/s
# Warmup Iteration   8: 721096.817 ops/s
# Warmup Iteration   9: 773233.347 ops/s
# Warmup Iteration  10: 756443.869 ops/s
# Warmup Iteration  11: 744332.594 ops/s
# Warmup Iteration  12: 756755.740 ops/s
# Warmup Iteration  13: 746591.735 ops/s
# Warmup Iteration  14: 778617.694 ops/s
# Warmup Iteration  15: 753525.038 ops/s
# Warmup Iteration  16: 781124.803 ops/s
# Warmup Iteration  17: 789794.294 ops/s
# Warmup Iteration  18: 799691.468 ops/s
# Warmup Iteration  19: 831711.400 ops/s
# Warmup Iteration  20: 764820.800 ops/s
# Warmup Iteration  21: 819238.544 ops/s
# Warmup Iteration  22: 812339.490 ops/s
# Warmup Iteration  23: 773830.380 ops/s
# Warmup Iteration  24: 796149.787 ops/s
# Warmup Iteration  25: 791793.135 ops/s
# Warmup Iteration  26: 801364.062 ops/s
# Warmup Iteration  27: 812927.613 ops/s
# Warmup Iteration  28: 800372.277 ops/s
# Warmup Iteration  29: 827091.521 ops/s
# Warmup Iteration  30: 774218.536 ops/s
Iteration   1: 841165.353 ops/s
Iteration   2: 818653.051 ops/s
Iteration   3: 776633.872 ops/s
Iteration   4: 826454.430 ops/s
Iteration   5: 771632.011 ops/s
Iteration   6: 811778.626 ops/s
Iteration   7: 828208.947 ops/s
Iteration   8: 779146.820 ops/s
Iteration   9: 835958.124 ops/s
Iteration  10: 816973.762 ops/s
Iteration  11: 784783.545 ops/s
Iteration  12: 830499.832 ops/s
Iteration  13: 793242.475 ops/s
Iteration  14: 784112.814 ops/s
Iteration  15: 798582.076 ops/s
Iteration  16: 794405.354 ops/s
Iteration  17: 831880.729 ops/s
Iteration  18: 806026.568 ops/s
Iteration  19: 798339.130 ops/s
Iteration  20: 829780.131 ops/s
Iteration  21: 786920.993 ops/s
Iteration  22: 813073.586 ops/s
Iteration  23: 803834.226 ops/s
Iteration  24: 831219.881 ops/s
Iteration  25: 805038.412 ops/s
Iteration  26: 801774.489 ops/s
Iteration  27: 834642.021 ops/s
Iteration  28: 766220.642 ops/s
Iteration  29: 814105.475 ops/s
Iteration  30: 770226.789 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_unsafeWithObservable":
  806177.139 ±(99.9%) 14742.760 ops/s [Average]
  (min, avg, max) = (766220.642, 806177.139, 841165.353), stdev = 22066.271
  CI (99.9%): [791434.378, 820919.899] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ObservableCreateTest._Benchmark.benchmark_unsafeWithObservable  thrpt   30  806177.139 ± 14742.760  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_fromActionTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_fromActionTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1114618.109 ops/s
# Warmup Iteration   2: 2890126.499 ops/s
# Warmup Iteration   3: 3701256.020 ops/s
# Warmup Iteration   4: 3962360.519 ops/s
# Warmup Iteration   5: 3872184.901 ops/s
# Warmup Iteration   6: 3817152.563 ops/s
# Warmup Iteration   7: 3853344.113 ops/s
# Warmup Iteration   8: 3795958.765 ops/s
# Warmup Iteration   9: 4129337.964 ops/s
# Warmup Iteration  10: 3057468.892 ops/s
# Warmup Iteration  11: 3780713.316 ops/s
# Warmup Iteration  12: 3883168.501 ops/s
# Warmup Iteration  13: 3995538.348 ops/s
# Warmup Iteration  14: 3754707.762 ops/s
# Warmup Iteration  15: 3994569.265 ops/s
# Warmup Iteration  16: 4037586.552 ops/s
# Warmup Iteration  17: 3765110.991 ops/s
# Warmup Iteration  18: 3962790.329 ops/s
# Warmup Iteration  19: 3860581.185 ops/s
# Warmup Iteration  20: 3871129.306 ops/s
# Warmup Iteration  21: 3931830.348 ops/s
# Warmup Iteration  22: 3724181.907 ops/s
# Warmup Iteration  23: 3891248.956 ops/s
# Warmup Iteration  24: 3784369.241 ops/s
# Warmup Iteration  25: 3902711.316 ops/s
# Warmup Iteration  26: 3829242.012 ops/s
# Warmup Iteration  27: 3828002.725 ops/s
# Warmup Iteration  28: 3921091.404 ops/s
# Warmup Iteration  29: 3764265.606 ops/s
# Warmup Iteration  30: 3830143.980 ops/s
Iteration   1: 3911144.562 ops/s
Iteration   2: 3786638.246 ops/s
Iteration   3: 3983800.349 ops/s
Iteration   4: 3748391.023 ops/s
Iteration   5: 3886068.601 ops/s
Iteration   6: 3921953.682 ops/s
Iteration   7: 3857747.245 ops/s
Iteration   8: 3833637.833 ops/s
Iteration   9: 3835269.575 ops/s
Iteration  10: 4081554.903 ops/s
Iteration  11: 3695081.114 ops/s
Iteration  12: 3962159.821 ops/s
Iteration  13: 3777666.338 ops/s
Iteration  14: 3893412.236 ops/s
Iteration  15: 3888389.235 ops/s
Iteration  16: 3948607.708 ops/s
Iteration  17: 3786046.120 ops/s
Iteration  18: 3898655.904 ops/s
Iteration  19: 4006211.983 ops/s
Iteration  20: 3814243.970 ops/s
Iteration  21: 3979265.473 ops/s
Iteration  22: 3807482.810 ops/s
Iteration  23: 3710870.490 ops/s
Iteration  24: 3907708.473 ops/s
Iteration  25: 3757209.998 ops/s
Iteration  26: 4018963.569 ops/s
Iteration  27: 3928543.508 ops/s
Iteration  28: 3792702.305 ops/s
Iteration  29: 3943218.450 ops/s
Iteration  30: 3723174.372 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromActionTest._Benchmark.benchmark_fromActionTwice":
  3869527.330 ±(99.9%) 66209.940 ops/s [Average]
  (min, avg, max) = (3695081.114, 3869527.330, 4081554.903), stdev = 99099.929
  CI (99.9%): [3803317.390, 3935737.270] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableFromActionTest._Benchmark.benchmark_fromActionTwice  thrpt   30  3869527.330 ± 66209.940  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_outputFusedCancelReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_outputFusedCancelReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16180.638 ops/s
# Warmup Iteration   2: 24332.771 ops/s
# Warmup Iteration   3: 20730.315 ops/s
# Warmup Iteration   4: 20205.298 ops/s
# Warmup Iteration   5: 23942.572 ops/s
# Warmup Iteration   6: 19580.245 ops/s
# Warmup Iteration   7: 30217.340 ops/s
# Warmup Iteration   8: 19412.425 ops/s
# Warmup Iteration   9: 20690.388 ops/s
# Warmup Iteration  10: 21510.053 ops/s
# Warmup Iteration  11: 20546.197 ops/s
# Warmup Iteration  12: 20742.985 ops/s
# Warmup Iteration  13: 21051.851 ops/s
# Warmup Iteration  14: 21162.052 ops/s
# Warmup Iteration  15: 20442.691 ops/s
# Warmup Iteration  16: 21029.036 ops/s
# Warmup Iteration  17: 21101.419 ops/s
# Warmup Iteration  18: 21424.038 ops/s
# Warmup Iteration  19: 20667.793 ops/s
# Warmup Iteration  20: 20866.123 ops/s
# Warmup Iteration  21: 20388.138 ops/s
# Warmup Iteration  22: 20782.306 ops/s
# Warmup Iteration  23: 20713.384 ops/s
# Warmup Iteration  24: 21274.315 ops/s
# Warmup Iteration  25: 22414.612 ops/s
# Warmup Iteration  26: 21006.681 ops/s
# Warmup Iteration  27: 21015.311 ops/s
# Warmup Iteration  28: 20694.197 ops/s
# Warmup Iteration  29: 21110.201 ops/s
# Warmup Iteration  30: 21479.162 ops/s
Iteration   1: 21522.807 ops/s
Iteration   2: 20846.873 ops/s
Iteration   3: 21119.540 ops/s
Iteration   4: 20799.209 ops/s
Iteration   5: 21086.048 ops/s
Iteration   6: 21636.893 ops/s
Iteration   7: 20698.530 ops/s
Iteration   8: 20956.981 ops/s
Iteration   9: 20793.115 ops/s
Iteration  10: 21150.769 ops/s
Iteration  11: 20699.793 ops/s
Iteration  12: 20955.954 ops/s
Iteration  13: 20717.094 ops/s
Iteration  14: 21280.315 ops/s
Iteration  15: 20894.986 ops/s
Iteration  16: 21633.112 ops/s
Iteration  17: 20482.507 ops/s
Iteration  18: 21009.935 ops/s
Iteration  19: 20747.951 ops/s
Iteration  20: 20908.279 ops/s
Iteration  21: 21635.621 ops/s
Iteration  22: 21005.810 ops/s
Iteration  23: 21067.999 ops/s
Iteration  24: 20709.119 ops/s
Iteration  25: 20950.529 ops/s
Iteration  26: 20798.863 ops/s
Iteration  27: 21232.540 ops/s
Iteration  28: 20394.531 ops/s
Iteration  29: 21333.019 ops/s
Iteration  30: 20976.846 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_outputFusedCancelReentrant":
  21001.519 ±(99.9%) 214.647 ops/s [Average]
  (min, avg, max) = (20394.531, 21001.519, 21636.893), stdev = 321.274
  CI (99.9%): [20786.872, 21216.166] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt      Score     Error  Units
ObservableObserveOnTest._Benchmark.benchmark_outputFusedCancelReentrant  thrpt   30  21001.519 ± 214.647  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2285753.196 ops/s
# Warmup Iteration   2: 4901390.186 ops/s
# Warmup Iteration   3: 6216215.930 ops/s
# Warmup Iteration   4: 6627062.741 ops/s
# Warmup Iteration   5: 5449013.560 ops/s
# Warmup Iteration   6: 5612764.564 ops/s
# Warmup Iteration   7: 6384371.220 ops/s
# Warmup Iteration   8: 6300022.870 ops/s
# Warmup Iteration   9: 6446257.284 ops/s
# Warmup Iteration  10: 6142948.586 ops/s
# Warmup Iteration  11: 6336635.637 ops/s
# Warmup Iteration  12: 6468889.507 ops/s
# Warmup Iteration  13: 6355066.947 ops/s
# Warmup Iteration  14: 6420679.154 ops/s
# Warmup Iteration  15: 6308786.199 ops/s
# Warmup Iteration  16: 6422333.929 ops/s
# Warmup Iteration  17: 6491639.725 ops/s
# Warmup Iteration  18: 6581514.387 ops/s
# Warmup Iteration  19: 6274652.612 ops/s
# Warmup Iteration  20: 6532521.143 ops/s
# Warmup Iteration  21: 6562855.763 ops/s
# Warmup Iteration  22: 6245727.223 ops/s
# Warmup Iteration  23: 6555188.420 ops/s
# Warmup Iteration  24: 6325181.067 ops/s
# Warmup Iteration  25: 6396336.815 ops/s
# Warmup Iteration  26: 6424484.227 ops/s
# Warmup Iteration  27: 6357594.504 ops/s
# Warmup Iteration  28: 6527158.282 ops/s
# Warmup Iteration  29: 6266274.672 ops/s
# Warmup Iteration  30: 6478433.266 ops/s
Iteration   1: 6520149.925 ops/s
Iteration   2: 6325028.158 ops/s
Iteration   3: 6545574.078 ops/s
Iteration   4: 6310711.651 ops/s
Iteration   5: 6415147.073 ops/s
Iteration   6: 6539685.909 ops/s
Iteration   7: 6490010.776 ops/s
Iteration   8: 6611813.870 ops/s
Iteration   9: 6531565.500 ops/s
Iteration  10: 6232746.988 ops/s
Iteration  11: 6569751.193 ops/s
Iteration  12: 6282630.395 ops/s
Iteration  13: 6610491.935 ops/s
Iteration  14: 6714143.130 ops/s
Iteration  15: 6619337.712 ops/s
Iteration  16: 6264234.759 ops/s
Iteration  17: 6428787.365 ops/s
Iteration  18: 6667315.003 ops/s
Iteration  19: 6319943.164 ops/s
Iteration  20: 6381984.408 ops/s
Iteration  21: 6524225.744 ops/s
Iteration  22: 6430864.825 ops/s
Iteration  23: 6637261.573 ops/s
Iteration  24: 6375866.233 ops/s
Iteration  25: 6534580.027 ops/s
Iteration  26: 6351810.356 ops/s
Iteration  27: 6493015.755 ops/s
Iteration  28: 6529908.489 ops/s
Iteration  29: 6261791.815 ops/s
Iteration  30: 6113621.686 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_just":
  6454466.650 ±(99.9%) 98450.086 ops/s [Average]
  (min, avg, max) = (6113621.686, 6454466.650, 6714143.130), stdev = 147355.465
  CI (99.9%): [6356016.564, 6552916.736] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
MaybeUnsubscribeOnTest._Benchmark.benchmark_just  thrpt   30  6454466.650 ± 98450.086  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOnTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOnTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1749567.711 ops/s
# Warmup Iteration   2: 4728071.245 ops/s
# Warmup Iteration   3: 6511008.554 ops/s
# Warmup Iteration   4: 6416286.818 ops/s
# Warmup Iteration   5: 6557682.477 ops/s
# Warmup Iteration   6: 6508053.190 ops/s
# Warmup Iteration   7: 6432756.148 ops/s
# Warmup Iteration   8: 6545452.305 ops/s
# Warmup Iteration   9: 6318948.071 ops/s
# Warmup Iteration  10: 6300578.703 ops/s
# Warmup Iteration  11: 6519607.519 ops/s
# Warmup Iteration  12: 6427487.166 ops/s
# Warmup Iteration  13: 6469866.871 ops/s
# Warmup Iteration  14: 6521457.258 ops/s
# Warmup Iteration  15: 6143819.924 ops/s
# Warmup Iteration  16: 6602191.865 ops/s
# Warmup Iteration  17: 6449500.415 ops/s
# Warmup Iteration  18: 6644296.299 ops/s
# Warmup Iteration  19: 6487020.889 ops/s
# Warmup Iteration  20: 6542457.347 ops/s
# Warmup Iteration  21: 6746030.447 ops/s
# Warmup Iteration  22: 6328602.172 ops/s
# Warmup Iteration  23: 6613581.090 ops/s
# Warmup Iteration  24: 6492642.513 ops/s
# Warmup Iteration  25: 6640725.917 ops/s
# Warmup Iteration  26: 6718648.413 ops/s
# Warmup Iteration  27: 6133412.386 ops/s
# Warmup Iteration  28: 6532572.468 ops/s
# Warmup Iteration  29: 6481493.229 ops/s
# Warmup Iteration  30: 6444481.705 ops/s
Iteration   1: 6600750.470 ops/s
Iteration   2: 6410119.250 ops/s
Iteration   3: 6742560.859 ops/s
Iteration   4: 6600869.980 ops/s
Iteration   5: 6369978.014 ops/s
Iteration   6: 6521721.871 ops/s
Iteration   7: 6846456.605 ops/s
Iteration   8: 6326802.931 ops/s
Iteration   9: 6577791.881 ops/s
Iteration  10: 6565078.787 ops/s
Iteration  11: 6563566.859 ops/s
Iteration  12: 6717172.363 ops/s
Iteration  13: 6383535.036 ops/s
Iteration  14: 6609897.554 ops/s
Iteration  15: 6516996.860 ops/s
Iteration  16: 6460398.322 ops/s
Iteration  17: 6682988.811 ops/s
Iteration  18: 6330091.762 ops/s
Iteration  19: 6776724.084 ops/s
Iteration  20: 6285594.656 ops/s
Iteration  21: 6781510.574 ops/s
Iteration  22: 6362757.023 ops/s
Iteration  23: 6768353.684 ops/s
Iteration  24: 6502625.381 ops/s
Iteration  25: 6483374.772 ops/s
Iteration  26: 6644977.817 ops/s
Iteration  27: 6335802.982 ops/s
Iteration  28: 6683168.699 ops/s
Iteration  29: 6220669.333 ops/s
Iteration  30: 6763698.290 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOnTest._Benchmark.benchmark_just":
  6547867.850 ±(99.9%) 115004.706 ops/s [Average]
  (min, avg, max) = (6220669.333, 6547867.850, 6846456.605), stdev = 172133.642
  CI (99.9%): [6432863.145, 6662872.556] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
SingleUnsubscribeOnTest._Benchmark.benchmark_just  thrpt   30  6547867.850 ± 115004.706  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_trampolineScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_trampolineScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 995289.281 ops/s
# Warmup Iteration   2: 4767567.288 ops/s
# Warmup Iteration   3: 6253926.684 ops/s
# Warmup Iteration   4: 6406376.030 ops/s
# Warmup Iteration   5: 6702139.768 ops/s
# Warmup Iteration   6: 6492950.941 ops/s
# Warmup Iteration   7: 6495082.361 ops/s
# Warmup Iteration   8: 6654450.933 ops/s
# Warmup Iteration   9: 6350486.324 ops/s
# Warmup Iteration  10: 6664033.526 ops/s
# Warmup Iteration  11: 6531130.516 ops/s
# Warmup Iteration  12: 6556761.416 ops/s
# Warmup Iteration  13: 6425998.020 ops/s
# Warmup Iteration  14: 6346304.196 ops/s
# Warmup Iteration  15: 6766104.432 ops/s
# Warmup Iteration  16: 6291585.502 ops/s
# Warmup Iteration  17: 6828221.816 ops/s
# Warmup Iteration  18: 6542613.615 ops/s
# Warmup Iteration  19: 6455137.267 ops/s
# Warmup Iteration  20: 6741254.344 ops/s
# Warmup Iteration  21: 6415060.730 ops/s
# Warmup Iteration  22: 6568176.343 ops/s
# Warmup Iteration  23: 6660125.898 ops/s
# Warmup Iteration  24: 6497638.679 ops/s
# Warmup Iteration  25: 6643152.270 ops/s
# Warmup Iteration  26: 6518386.928 ops/s
# Warmup Iteration  27: 6503950.104 ops/s
# Warmup Iteration  28: 6666900.091 ops/s
# Warmup Iteration  29: 6503597.170 ops/s
# Warmup Iteration  30: 6647463.922 ops/s
Iteration   1: 6585861.528 ops/s
Iteration   2: 6647984.956 ops/s
Iteration   3: 6724534.704 ops/s
Iteration   4: 6538576.512 ops/s
Iteration   5: 6853454.734 ops/s
Iteration   6: 6716620.085 ops/s
Iteration   7: 6577262.271 ops/s
Iteration   8: 6725212.774 ops/s
Iteration   9: 6685592.320 ops/s
Iteration  10: 6316848.603 ops/s
Iteration  11: 6869001.547 ops/s
Iteration  12: 6763863.336 ops/s
Iteration  13: 6591405.195 ops/s
Iteration  14: 6768816.789 ops/s
Iteration  15: 6483249.476 ops/s
Iteration  16: 6457671.137 ops/s
Iteration  17: 6126839.274 ops/s
Iteration  18: 5778358.460 ops/s
Iteration  19: 5705448.655 ops/s
Iteration  20: 5874328.275 ops/s
Iteration  21: 5832909.552 ops/s
Iteration  22: 5810385.667 ops/s
Iteration  23: 6093822.562 ops/s
Iteration  24: 5714255.032 ops/s
Iteration  25: 5763774.254 ops/s
Iteration  26: 5733111.181 ops/s
Iteration  27: 6053860.134 ops/s
Iteration  28: 5738250.264 ops/s
Iteration  29: 6165775.754 ops/s
Iteration  30: 5760462.456 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_trampolineScheduler":
  6281917.916 ±(99.9%) 282727.940 ops/s [Average]
  (min, avg, max) = (5705448.655, 6281917.916, 6869001.547), stdev = 423173.902
  CI (99.9%): [5999189.977, 6564645.856] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
ObservableObserveOnTest._Benchmark.benchmark_trampolineScheduler  thrpt   30  6281917.916 ± 282727.940  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_doubleOnSubscribeFallback$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_doubleOnSubscribeFallback

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24923.835 ops/s
# Warmup Iteration   2: 63536.033 ops/s
# Warmup Iteration   3: 462.045 ops/s
# Warmup Iteration   4: 46238.629 ops/s
# Warmup Iteration   5: 118899.996 ops/s
# Warmup Iteration   6: 109859.403 ops/s
# Warmup Iteration   7: 14315.129 ops/s
# Warmup Iteration   8: 87747.155 ops/s
# Warmup Iteration   9: 15622.588 ops/s
# Warmup Iteration  10: 91635.708 ops/s
# Warmup Iteration  11: 164452.524 ops/s
# Warmup Iteration  12: 113158.704 ops/s
# Warmup Iteration  13: 59447.896 ops/s
# Warmup Iteration  14: 7794.146 ops/s
# Warmup Iteration  15: 68700.393 ops/s
# Warmup Iteration  16: 13338.881 ops/s
# Warmup Iteration  17: 82643.595 ops/s
# Warmup Iteration  18: 120453.359 ops/s
# Warmup Iteration  19: 12735.327 ops/s
# Warmup Iteration  20: 19642.293 ops/s
# Warmup Iteration  21: 31084.074 ops/s
# Warmup Iteration  22: 10618.990 ops/s
# Warmup Iteration  23: 5542.939 ops/s
# Warmup Iteration  24: 107422.447 ops/s
# Warmup Iteration  25: 806.830 ops/s
# Warmup Iteration  26: 30089.413 ops/s
# Warmup Iteration  27: 85243.864 ops/s
# Warmup Iteration  28: 15651.113 ops/s
# Warmup Iteration  29: 137068.870 ops/s
# Warmup Iteration  30: 104140.076 ops/s
Iteration   1: 105037.612 ops/s
Iteration   2: 92014.779 ops/s
Iteration   3: 11479.912 ops/s
Iteration   4: 12801.084 ops/s
Iteration   5: 163062.170 ops/s
Iteration   6: 159600.218 ops/s
Iteration   7: 3990.116 ops/s
Iteration   8: 98812.152 ops/s
Iteration   9: 136018.189 ops/s
Iteration  10: 102352.904 ops/s
Iteration  11: 11252.931 ops/s
Iteration  12: 17115.958 ops/s
Iteration  13: 17675.976 ops/s
Iteration  14: 86253.262 ops/s
Iteration  15: 4949.201 ops/s
Iteration  16: 11126.276 ops/s
Iteration  17: 77840.706 ops/s
Iteration  18: 6202.608 ops/s
Iteration  19: 184291.773 ops/s
Iteration  20: 136509.835 ops/s
Iteration  21: 52313.308 ops/s
Iteration  22: 13150.681 ops/s
Iteration  23: 71131.153 ops/s
Iteration  24: 131389.955 ops/s
Iteration  25: 113847.371 ops/s
Iteration  26: 58336.709 ops/s
Iteration  27: 6884.710 ops/s
Iteration  28: 60198.945 ops/s
Iteration  29: 185466.837 ops/s
Iteration  30: 440.053 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_doubleOnSubscribeFallback":
  71051.579 ±(99.9%) 40363.471 ops/s [Average]
  (min, avg, max) = (440.053, 71051.579, 185466.837), stdev = 60414.147
  CI (99.9%): [30688.109, 111415.050] (assumes normal distribution)


# Run complete. Total time: 00:03:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt      Score       Error  Units
FlowableTimeoutTests._Benchmark.benchmark_doubleOnSubscribeFallback  thrpt   30  71051.579 ± 40363.471  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedErrorOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedErrorOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8793.930 ops/s
# Warmup Iteration   2: 31063.487 ops/s
# Warmup Iteration   3: 60166.922 ops/s
# Warmup Iteration   4: 96111.049 ops/s
# Warmup Iteration   5: 110730.018 ops/s
# Warmup Iteration   6: 108549.046 ops/s
# Warmup Iteration   7: 120536.998 ops/s
# Warmup Iteration   8: 110643.346 ops/s
# Warmup Iteration   9: 121820.252 ops/s
# Warmup Iteration  10: 122771.172 ops/s
# Warmup Iteration  11: 107577.180 ops/s
# Warmup Iteration  12: 123550.854 ops/s
# Warmup Iteration  13: 126928.528 ops/s
# Warmup Iteration  14: 113870.441 ops/s
# Warmup Iteration  15: 109751.584 ops/s
# Warmup Iteration  16: 119677.695 ops/s
# Warmup Iteration  17: 126043.065 ops/s
# Warmup Iteration  18: 119937.965 ops/s
# Warmup Iteration  19: 102738.326 ops/s
# Warmup Iteration  20: 114221.686 ops/s
# Warmup Iteration  21: 124340.549 ops/s
# Warmup Iteration  22: 127958.865 ops/s
# Warmup Iteration  23: 116108.740 ops/s
# Warmup Iteration  24: 123147.142 ops/s
# Warmup Iteration  25: 114924.741 ops/s
# Warmup Iteration  26: 119081.227 ops/s
# Warmup Iteration  27: 123121.747 ops/s
# Warmup Iteration  28: 116443.829 ops/s
# Warmup Iteration  29: 124241.342 ops/s
# Warmup Iteration  30: 103880.818 ops/s
Iteration   1: 123309.870 ops/s
Iteration   2: 116341.702 ops/s
Iteration   3: 111220.279 ops/s
Iteration   4: 93417.371 ops/s
Iteration   5: 112028.884 ops/s
Iteration   6: 133359.498 ops/s
Iteration   7: 115816.364 ops/s
Iteration   8: 126389.711 ops/s
Iteration   9: 115696.564 ops/s
Iteration  10: 124081.453 ops/s
Iteration  11: 109169.823 ops/s
Iteration  12: 118760.267 ops/s
Iteration  13: 115332.223 ops/s
Iteration  14: 113258.431 ops/s
Iteration  15: 128015.644 ops/s
Iteration  16: 117445.024 ops/s
Iteration  17: 113309.402 ops/s
Iteration  18: 118462.261 ops/s
Iteration  19: 120124.671 ops/s
Iteration  20: 122786.902 ops/s
Iteration  21: 109290.738 ops/s
Iteration  22: 117560.607 ops/s
Iteration  23: 97653.070 ops/s
Iteration  24: 124524.352 ops/s
Iteration  25: 115298.921 ops/s
Iteration  26: 111326.076 ops/s
Iteration  27: 119330.589 ops/s
Iteration  28: 114386.580 ops/s
Iteration  29: 117646.970 ops/s
Iteration  30: 114418.178 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedErrorOther":
  116325.414 ±(99.9%) 5345.974 ops/s [Average]
  (min, avg, max) = (93417.371, 116325.414, 133359.498), stdev = 8001.603
  CI (99.9%): [110979.440, 121671.388] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableTimeoutTests._Benchmark.benchmark_timedErrorOther  thrpt   30  116325.414 ± 5345.974  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSizedDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSizedDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.837 ops/s
# Warmup Iteration   2: 15761.106 ops/s
# Warmup Iteration   3: 38856.000 ops/s
# Warmup Iteration   4: 11751.216 ops/s
# Warmup Iteration   5: 26694.189 ops/s
# Warmup Iteration   6: 16555.658 ops/s
# Warmup Iteration   7: 13215.169 ops/s
# Warmup Iteration   8: 16104.174 ops/s
# Warmup Iteration   9: 10162.866 ops/s
# Warmup Iteration  10: 40514.410 ops/s
# Warmup Iteration  11: 49356.452 ops/s
# Warmup Iteration  12: 521.467 ops/s
# Warmup Iteration  13: 16350.254 ops/s
# Warmup Iteration  14: 16828.561 ops/s
# Warmup Iteration  15: 9054.431 ops/s
# Warmup Iteration  16: 14550.763 ops/s
# Warmup Iteration  17: 15027.270 ops/s
# Warmup Iteration  18: 7339.415 ops/s
# Warmup Iteration  19: 15525.396 ops/s
# Warmup Iteration  20: 10994.829 ops/s
# Warmup Iteration  21: 14521.244 ops/s
# Warmup Iteration  22: 587.765 ops/s
# Warmup Iteration  23: 12928.002 ops/s
# Warmup Iteration  24: 14299.216 ops/s
# Warmup Iteration  25: 16734.786 ops/s
# Warmup Iteration  26: 6977.907 ops/s
# Warmup Iteration  27: 16540.336 ops/s
# Warmup Iteration  28: 11624.396 ops/s
# Warmup Iteration  29: 10454.621 ops/s
# Warmup Iteration  30: 6999.190 ops/s
Iteration   1: 16802.634 ops/s
Iteration   2: 17044.346 ops/s
Iteration   3: 7795.201 ops/s
Iteration   4: 15135.258 ops/s
Iteration   5: 21904.718 ops/s
Iteration   6: 1980.365 ops/s
Iteration   7: 16956.555 ops/s
Iteration   8: 13767.985 ops/s
Iteration   9: 855.485 ops/s
Iteration  10: 21755.681 ops/s
Iteration  11: 13713.989 ops/s
Iteration  12: 4277.038 ops/s
Iteration  13: 13423.804 ops/s
Iteration  14: 16962.737 ops/s
Iteration  15: 5554.146 ops/s
Iteration  16: 18602.891 ops/s
Iteration  17: 14141.176 ops/s
Iteration  18: 4522.651 ops/s
Iteration  19: 14270.380 ops/s
Iteration  20: 11542.981 ops/s
Iteration  21: 1099.715 ops/s
Iteration  22: 13588.735 ops/s
Iteration  23: 12125.951 ops/s
Iteration  24: 9218.759 ops/s
Iteration  25: 17038.502 ops/s
Iteration  26: 15258.108 ops/s
Iteration  27: 4204.053 ops/s
Iteration  28: 12818.083 ops/s
Iteration  29: 15998.305 ops/s
Iteration  30: 5540.675 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSizedDoubleOnSubscribe":
  11930.030 ±(99.9%) 4012.381 ops/s [Average]
  (min, avg, max) = (855.485, 11930.030, 21904.718), stdev = 6005.543
  CI (99.9%): [7917.650, 15942.411] (assumes normal distribution)


# Run complete. Total time: 00:01:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt      Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_timedSizedDoubleOnSubscribe  thrpt   30  11930.030 ± 4012.381  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeAndSIzeBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeAndSIzeBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30010.593 ops/s
# Warmup Iteration   2: 72657.703 ops/s
# Warmup Iteration   3: 128150.270 ops/s
# Warmup Iteration   4: 160152.241 ops/s
# Warmup Iteration   5: 181202.364 ops/s
# Warmup Iteration   6: 180627.428 ops/s
# Warmup Iteration   7: 155740.874 ops/s
# Warmup Iteration   8: 179511.636 ops/s
# Warmup Iteration   9: 180476.317 ops/s
# Warmup Iteration  10: 177290.293 ops/s
# Warmup Iteration  11: 183218.469 ops/s
# Warmup Iteration  12: 180844.343 ops/s
# Warmup Iteration  13: 180572.091 ops/s
# Warmup Iteration  14: 184455.234 ops/s
# Warmup Iteration  15: 176905.707 ops/s
# Warmup Iteration  16: 186009.745 ops/s
# Warmup Iteration  17: 175985.177 ops/s
# Warmup Iteration  18: 187031.073 ops/s
# Warmup Iteration  19: 179759.457 ops/s
# Warmup Iteration  20: 178737.290 ops/s
# Warmup Iteration  21: 185558.723 ops/s
# Warmup Iteration  22: 176946.054 ops/s
# Warmup Iteration  23: 186321.095 ops/s
# Warmup Iteration  24: 177320.675 ops/s
# Warmup Iteration  25: 185807.262 ops/s
# Warmup Iteration  26: 179250.011 ops/s
# Warmup Iteration  27: 177599.856 ops/s
# Warmup Iteration  28: 187063.747 ops/s
# Warmup Iteration  29: 176281.473 ops/s
# Warmup Iteration  30: 179200.431 ops/s
Iteration   1: 186369.301 ops/s
Iteration   2: 176826.660 ops/s
Iteration   3: 181336.199 ops/s
Iteration   4: 176860.675 ops/s
Iteration   5: 189541.862 ops/s
Iteration   6: 178528.175 ops/s
Iteration   7: 181635.896 ops/s
Iteration   8: 182770.112 ops/s
Iteration   9: 177510.642 ops/s
Iteration  10: 185930.617 ops/s
Iteration  11: 175102.742 ops/s
Iteration  12: 186085.018 ops/s
Iteration  13: 177059.832 ops/s
Iteration  14: 176980.856 ops/s
Iteration  15: 185268.640 ops/s
Iteration  16: 178215.247 ops/s
Iteration  17: 177204.058 ops/s
Iteration  18: 187459.904 ops/s
Iteration  19: 174298.045 ops/s
Iteration  20: 188769.386 ops/s
Iteration  21: 175179.536 ops/s
Iteration  22: 185723.320 ops/s
Iteration  23: 177095.288 ops/s
Iteration  24: 183900.125 ops/s
Iteration  25: 176211.222 ops/s
Iteration  26: 177188.007 ops/s
Iteration  27: 189659.038 ops/s
Iteration  28: 177439.673 ops/s
Iteration  29: 183927.642 ops/s
Iteration  30: 179847.529 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeAndSIzeBound":
  180997.508 ±(99.9%) 3228.473 ops/s [Average]
  (min, avg, max) = (174298.045, 180997.508, 189659.038), stdev = 4832.227
  CI (99.9%): [177769.035, 184225.982] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeAndSIzeBound  thrpt   30  180997.508 ± 3228.473  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_cancel2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_cancel2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 869133.359 ops/s
# Warmup Iteration   2: 2926203.592 ops/s
# Warmup Iteration   3: 4015713.426 ops/s
# Warmup Iteration   4: 4306277.732 ops/s
# Warmup Iteration   5: 4254416.521 ops/s
# Warmup Iteration   6: 4152377.094 ops/s
# Warmup Iteration   7: 4194042.071 ops/s
# Warmup Iteration   8: 4311898.025 ops/s
# Warmup Iteration   9: 4196614.187 ops/s
# Warmup Iteration  10: 4079651.573 ops/s
# Warmup Iteration  11: 4250008.896 ops/s
# Warmup Iteration  12: 4292495.227 ops/s
# Warmup Iteration  13: 4231808.928 ops/s
# Warmup Iteration  14: 4035401.827 ops/s
# Warmup Iteration  15: 4358517.971 ops/s
# Warmup Iteration  16: 4365769.442 ops/s
# Warmup Iteration  17: 4131152.568 ops/s
# Warmup Iteration  18: 4286683.808 ops/s
# Warmup Iteration  19: 4309063.492 ops/s
# Warmup Iteration  20: 4338678.928 ops/s
# Warmup Iteration  21: 4331042.698 ops/s
# Warmup Iteration  22: 4124907.963 ops/s
# Warmup Iteration  23: 4208218.709 ops/s
# Warmup Iteration  24: 4088718.102 ops/s
# Warmup Iteration  25: 4254416.807 ops/s
# Warmup Iteration  26: 4115811.997 ops/s
# Warmup Iteration  27: 4316103.166 ops/s
# Warmup Iteration  28: 4363404.685 ops/s
# Warmup Iteration  29: 4413764.360 ops/s
# Warmup Iteration  30: 4105678.384 ops/s
Iteration   1: 4300477.202 ops/s
Iteration   2: 4400505.435 ops/s
Iteration   3: 4155336.998 ops/s
Iteration   4: 4347808.755 ops/s
Iteration   5: 4277605.962 ops/s
Iteration   6: 4150530.453 ops/s
Iteration   7: 4284097.704 ops/s
Iteration   8: 4307856.584 ops/s
Iteration   9: 4180555.437 ops/s
Iteration  10: 4299263.412 ops/s
Iteration  11: 4134893.219 ops/s
Iteration  12: 4198403.915 ops/s
Iteration  13: 4331357.070 ops/s
Iteration  14: 4225824.204 ops/s
Iteration  15: 4173235.940 ops/s
Iteration  16: 4358148.852 ops/s
Iteration  17: 4092842.762 ops/s
Iteration  18: 4215570.476 ops/s
Iteration  19: 4329104.504 ops/s
Iteration  20: 4271914.006 ops/s
Iteration  21: 4185128.516 ops/s
Iteration  22: 4312650.159 ops/s
Iteration  23: 4176401.694 ops/s
Iteration  24: 4161303.874 ops/s
Iteration  25: 4347092.755 ops/s
Iteration  26: 4143861.368 ops/s
Iteration  27: 4325158.369 ops/s
Iteration  28: 4198281.346 ops/s
Iteration  29: 4195301.927 ops/s
Iteration  30: 3704347.180 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_cancel2":
  4226162.003 ±(99.9%) 85378.600 ops/s [Average]
  (min, avg, max) = (3704347.180, 4226162.003, 4400505.435), stdev = 127790.679
  CI (99.9%): [4140783.403, 4311540.603] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
MaybeMergeArrayTest._Benchmark.benchmark_cancel2  thrpt   30  4226162.003 ± 85378.600  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_iterableUndeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_iterableUndeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18282.542 ops/s
# Warmup Iteration   2: 105184.040 ops/s
# Warmup Iteration   3: 161927.994 ops/s
# Warmup Iteration   4: 161543.226 ops/s
# Warmup Iteration   5: 167449.051 ops/s
# Warmup Iteration   6: 160101.522 ops/s
# Warmup Iteration   7: 175936.039 ops/s
# Warmup Iteration   8: 175494.043 ops/s
# Warmup Iteration   9: 164424.198 ops/s
# Warmup Iteration  10: 179040.849 ops/s
# Warmup Iteration  11: 164868.349 ops/s
# Warmup Iteration  12: 168217.767 ops/s
# Warmup Iteration  13: 177244.412 ops/s
# Warmup Iteration  14: 164437.438 ops/s
# Warmup Iteration  15: 177425.363 ops/s
# Warmup Iteration  16: 168798.454 ops/s
# Warmup Iteration  17: 180419.679 ops/s
# Warmup Iteration  18: 175387.596 ops/s
# Warmup Iteration  19: 168417.105 ops/s
# Warmup Iteration  20: 184107.757 ops/s
# Warmup Iteration  21: 172694.298 ops/s
# Warmup Iteration  22: 176469.771 ops/s
# Warmup Iteration  23: 177714.267 ops/s
# Warmup Iteration  24: 176658.380 ops/s
# Warmup Iteration  25: 187653.511 ops/s
# Warmup Iteration  26: 169472.217 ops/s
# Warmup Iteration  27: 181999.264 ops/s
# Warmup Iteration  28: 183568.382 ops/s
# Warmup Iteration  29: 167415.639 ops/s
# Warmup Iteration  30: 175374.877 ops/s
Iteration   1: 171390.635 ops/s
Iteration   2: 182327.600 ops/s
Iteration   3: 174114.110 ops/s
Iteration   4: 182708.507 ops/s
Iteration   5: 185018.595 ops/s
Iteration   6: 177061.355 ops/s
Iteration   7: 180310.381 ops/s
Iteration   8: 185880.917 ops/s
Iteration   9: 171794.927 ops/s
Iteration  10: 180125.712 ops/s
Iteration  11: 173798.751 ops/s
Iteration  12: 179421.609 ops/s
Iteration  13: 180587.580 ops/s
Iteration  14: 175030.868 ops/s
Iteration  15: 182563.694 ops/s
Iteration  16: 184386.537 ops/s
Iteration  17: 176260.021 ops/s
Iteration  18: 184379.799 ops/s
Iteration  19: 180296.507 ops/s
Iteration  20: 175825.041 ops/s
Iteration  21: 178330.906 ops/s
Iteration  22: 185992.488 ops/s
Iteration  23: 174066.430 ops/s
Iteration  24: 179811.416 ops/s
Iteration  25: 180602.409 ops/s
Iteration  26: 181430.827 ops/s
Iteration  27: 187285.147 ops/s
Iteration  28: 174361.570 ops/s
Iteration  29: 181850.668 ops/s
Iteration  30: 178044.620 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_iterableUndeliverableUponCancel":
  179501.988 ±(99.9%) 2932.549 ops/s [Average]
  (min, avg, max) = (171390.635, 179501.988, 187285.147), stdev = 4389.302
  CI (99.9%): [176569.438, 182434.537] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
CompletableMergeTest._Benchmark.benchmark_iterableUndeliverableUponCancel  thrpt   30  179501.988 ± 2932.549  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesDisabledReturnsDefaultDisabled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesDisabledReturnsDefaultDisabled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32382591.823 ops/s
# Warmup Iteration   2: 42859058.401 ops/s
# Warmup Iteration   3: 57979635.035 ops/s
# Warmup Iteration   4: 57797878.024 ops/s
# Warmup Iteration   5: 59399341.945 ops/s
# Warmup Iteration   6: 56372567.027 ops/s
# Warmup Iteration   7: 59322159.261 ops/s
# Warmup Iteration   8: 57048277.620 ops/s
# Warmup Iteration   9: 56019822.435 ops/s
# Warmup Iteration  10: 56956387.887 ops/s
# Warmup Iteration  11: 57020713.900 ops/s
# Warmup Iteration  12: 59820709.890 ops/s
# Warmup Iteration  13: 57161128.700 ops/s
# Warmup Iteration  14: 59019809.897 ops/s
# Warmup Iteration  15: 59900995.961 ops/s
# Warmup Iteration  16: 56944035.844 ops/s
# Warmup Iteration  17: 59739371.154 ops/s
# Warmup Iteration  18: 56779072.380 ops/s
# Warmup Iteration  19: 56647386.762 ops/s
# Warmup Iteration  20: 61211244.905 ops/s
# Warmup Iteration  21: 55985714.698 ops/s
# Warmup Iteration  22: 58625024.173 ops/s
# Warmup Iteration  23: 57397083.252 ops/s
# Warmup Iteration  24: 59626838.192 ops/s
# Warmup Iteration  25: 59167712.428 ops/s
# Warmup Iteration  26: 56263912.116 ops/s
# Warmup Iteration  27: 57804004.340 ops/s
# Warmup Iteration  28: 58587482.211 ops/s
# Warmup Iteration  29: 55995469.910 ops/s
# Warmup Iteration  30: 60128946.617 ops/s
Iteration   1: 57897142.996 ops/s
Iteration   2: 59414519.915 ops/s
Iteration   3: 59191763.685 ops/s
Iteration   4: 55713616.853 ops/s
Iteration   5: 60316220.183 ops/s
Iteration   6: 57011633.519 ops/s
Iteration   7: 59262774.780 ops/s
Iteration   8: 59117375.411 ops/s
Iteration   9: 57179898.925 ops/s
Iteration  10: 60249428.976 ops/s
Iteration  11: 56402685.860 ops/s
Iteration  12: 58170565.147 ops/s
Iteration  13: 58546978.520 ops/s
Iteration  14: 59104877.529 ops/s
Iteration  15: 56656111.977 ops/s
Iteration  16: 59644599.908 ops/s
Iteration  17: 56824485.316 ops/s
Iteration  18: 59465616.513 ops/s
Iteration  19: 57696279.174 ops/s
Iteration  20: 57221884.899 ops/s
Iteration  21: 59896239.184 ops/s
Iteration  22: 58159208.987 ops/s
Iteration  23: 60104204.524 ops/s
Iteration  24: 59669190.868 ops/s
Iteration  25: 44562524.055 ops/s
Iteration  26: 59762809.294 ops/s
Iteration  27: 57844019.571 ops/s
Iteration  28: 59037796.143 ops/s
Iteration  29: 55731966.431 ops/s
Iteration  30: 57713854.931 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesDisabledReturnsDefaultDisabled":
  57919009.136 ±(99.9%) 1910181.097 ops/s [Average]
  (min, avg, max) = (44562524.055, 57919009.136, 60316220.183), stdev = 2859069.358
  CI (99.9%): [56008828.038, 59829190.233] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt         Score         Error  Units
SchedulerPoolFactoryTest._Benchmark.benchmark_boolPropertiesDisabledReturnsDefaultDisabled  thrpt   30  57919009.136 ± 1910181.097  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambArrayEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambArrayEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5572988.796 ops/s
# Warmup Iteration   2: 10861889.783 ops/s
# Warmup Iteration   3: 13897728.152 ops/s
# Warmup Iteration   4: 13623976.118 ops/s
# Warmup Iteration   5: 13407732.606 ops/s
# Warmup Iteration   6: 13284882.145 ops/s
# Warmup Iteration   7: 13215494.356 ops/s
# Warmup Iteration   8: 13471423.758 ops/s
# Warmup Iteration   9: 13879840.867 ops/s
# Warmup Iteration  10: 14309823.387 ops/s
# Warmup Iteration  11: 13283804.873 ops/s
# Warmup Iteration  12: 14257134.343 ops/s
# Warmup Iteration  13: 13273573.010 ops/s
# Warmup Iteration  14: 13710331.463 ops/s
# Warmup Iteration  15: 13914036.216 ops/s
# Warmup Iteration  16: 13194064.741 ops/s
# Warmup Iteration  17: 13318690.767 ops/s
# Warmup Iteration  18: 13833376.962 ops/s
# Warmup Iteration  19: 13223206.034 ops/s
# Warmup Iteration  20: 13608213.404 ops/s
# Warmup Iteration  21: 13827747.768 ops/s
# Warmup Iteration  22: 13240461.586 ops/s
# Warmup Iteration  23: 14087021.165 ops/s
# Warmup Iteration  24: 12917338.734 ops/s
# Warmup Iteration  25: 13764990.296 ops/s
# Warmup Iteration  26: 13632906.696 ops/s
# Warmup Iteration  27: 13271893.432 ops/s
# Warmup Iteration  28: 13360370.451 ops/s
# Warmup Iteration  29: 13474987.725 ops/s
# Warmup Iteration  30: 12914693.048 ops/s
Iteration   1: 13320731.793 ops/s
Iteration   2: 13779042.923 ops/s
Iteration   3: 12854669.773 ops/s
Iteration   4: 13635446.809 ops/s
Iteration   5: 13232364.986 ops/s
Iteration   6: 13420961.959 ops/s
Iteration   7: 13487263.186 ops/s
Iteration   8: 13174486.180 ops/s
Iteration   9: 13952829.579 ops/s
Iteration  10: 14349039.717 ops/s
Iteration  11: 13257938.166 ops/s
Iteration  12: 14076561.974 ops/s
Iteration  13: 13270219.650 ops/s
Iteration  14: 13818078.307 ops/s
Iteration  15: 14030620.871 ops/s
Iteration  16: 13366569.788 ops/s
Iteration  17: 14054301.065 ops/s
Iteration  18: 13626416.443 ops/s
Iteration  19: 13568341.275 ops/s
Iteration  20: 14151384.414 ops/s
Iteration  21: 13448191.203 ops/s
Iteration  22: 13505126.093 ops/s
Iteration  23: 13978756.690 ops/s
Iteration  24: 13409210.504 ops/s
Iteration  25: 14202746.446 ops/s
Iteration  26: 13145498.310 ops/s
Iteration  27: 14026774.480 ops/s
Iteration  28: 13469103.973 ops/s
Iteration  29: 13962362.824 ops/s
Iteration  30: 13775394.283 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambArrayEmpty":
  13645014.455 ±(99.9%) 249619.909 ops/s [Average]
  (min, avg, max) = (12854669.773, 13645014.455, 14349039.717), stdev = 373619.357
  CI (99.9%): [13395394.547, 13894634.364] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
FlowableAmbTest._Benchmark.benchmark_ambArrayEmpty  thrpt   30  13645014.455 ± 249619.909  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_merge4Take2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_merge4Take2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 248197.780 ops/s
# Warmup Iteration   2: 1229221.396 ops/s
# Warmup Iteration   3: 1662415.258 ops/s
# Warmup Iteration   4: 2071132.415 ops/s
# Warmup Iteration   5: 2160150.056 ops/s
# Warmup Iteration   6: 2123319.833 ops/s
# Warmup Iteration   7: 2192328.653 ops/s
# Warmup Iteration   8: 2168096.589 ops/s
# Warmup Iteration   9: 2074865.349 ops/s
# Warmup Iteration  10: 2192103.591 ops/s
# Warmup Iteration  11: 2200625.942 ops/s
# Warmup Iteration  12: 2064945.008 ops/s
# Warmup Iteration  13: 2184323.445 ops/s
# Warmup Iteration  14: 2091261.226 ops/s
# Warmup Iteration  15: 2213903.733 ops/s
# Warmup Iteration  16: 2119883.409 ops/s
# Warmup Iteration  17: 2227702.968 ops/s
# Warmup Iteration  18: 2110069.654 ops/s
# Warmup Iteration  19: 2221510.119 ops/s
# Warmup Iteration  20: 2300623.267 ops/s
# Warmup Iteration  21: 2081031.577 ops/s
# Warmup Iteration  22: 2177028.631 ops/s
# Warmup Iteration  23: 2162074.202 ops/s
# Warmup Iteration  24: 2094379.484 ops/s
# Warmup Iteration  25: 2179880.227 ops/s
# Warmup Iteration  26: 2109759.485 ops/s
# Warmup Iteration  27: 2220356.016 ops/s
# Warmup Iteration  28: 2199691.180 ops/s
# Warmup Iteration  29: 2127545.881 ops/s
# Warmup Iteration  30: 2206532.069 ops/s
Iteration   1: 2177447.940 ops/s
Iteration   2: 2178806.986 ops/s
Iteration   3: 2243314.908 ops/s
Iteration   4: 2122920.665 ops/s
Iteration   5: 2225497.388 ops/s
Iteration   6: 2084933.073 ops/s
Iteration   7: 2209230.319 ops/s
Iteration   8: 2133491.015 ops/s
Iteration   9: 2259854.713 ops/s
Iteration  10: 2110964.498 ops/s
Iteration  11: 2151769.834 ops/s
Iteration  12: 2239784.426 ops/s
Iteration  13: 2103907.162 ops/s
Iteration  14: 2270301.015 ops/s
Iteration  15: 2182314.354 ops/s
Iteration  16: 2195170.198 ops/s
Iteration  17: 2096919.290 ops/s
Iteration  18: 2230272.223 ops/s
Iteration  19: 1740708.667 ops/s
Iteration  20: 2096751.268 ops/s
Iteration  21: 2220195.105 ops/s
Iteration  22: 2154030.291 ops/s
Iteration  23: 2215637.609 ops/s
Iteration  24: 2108816.490 ops/s
Iteration  25: 2212230.780 ops/s
Iteration  26: 2148680.200 ops/s
Iteration  27: 2186965.074 ops/s
Iteration  28: 2281225.877 ops/s
Iteration  29: 2101138.327 ops/s
Iteration  30: 2188388.038 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_merge4Take2":
  2162388.924 ±(99.9%) 65456.462 ops/s [Average]
  (min, avg, max) = (1740708.667, 2162388.924, 2281225.877), stdev = 97972.159
  CI (99.9%): [2096932.462, 2227845.387] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_merge4Take2  thrpt   30  2162388.924 ± 65456.462  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambArrayEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambArrayEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4207402.469 ops/s
# Warmup Iteration   2: 11374563.461 ops/s
# Warmup Iteration   3: 13240999.749 ops/s
# Warmup Iteration   4: 13968780.231 ops/s
# Warmup Iteration   5: 14434144.032 ops/s
# Warmup Iteration   6: 13383310.334 ops/s
# Warmup Iteration   7: 13510620.412 ops/s
# Warmup Iteration   8: 14506791.656 ops/s
# Warmup Iteration   9: 14170969.334 ops/s
# Warmup Iteration  10: 13217922.056 ops/s
# Warmup Iteration  11: 14050170.323 ops/s
# Warmup Iteration  12: 13876724.181 ops/s
# Warmup Iteration  13: 13101901.073 ops/s
# Warmup Iteration  14: 14034067.248 ops/s
# Warmup Iteration  15: 13659687.487 ops/s
# Warmup Iteration  16: 14103588.524 ops/s
# Warmup Iteration  17: 14019312.972 ops/s
# Warmup Iteration  18: 13553160.528 ops/s
# Warmup Iteration  19: 14112473.064 ops/s
# Warmup Iteration  20: 13515454.336 ops/s
# Warmup Iteration  21: 13926921.965 ops/s
# Warmup Iteration  22: 14051720.878 ops/s
# Warmup Iteration  23: 13279055.933 ops/s
# Warmup Iteration  24: 13525070.357 ops/s
# Warmup Iteration  25: 14403709.843 ops/s
# Warmup Iteration  26: 13498932.419 ops/s
# Warmup Iteration  27: 13675380.546 ops/s
# Warmup Iteration  28: 13421063.508 ops/s
# Warmup Iteration  29: 13680086.949 ops/s
# Warmup Iteration  30: 13545599.462 ops/s
Iteration   1: 13755257.694 ops/s
Iteration   2: 14229448.993 ops/s
Iteration   3: 13569861.647 ops/s
Iteration   4: 13375003.171 ops/s
Iteration   5: 14313700.944 ops/s
Iteration   6: 13342399.585 ops/s
Iteration   7: 14370917.144 ops/s
Iteration   8: 13740705.926 ops/s
Iteration   9: 13511073.033 ops/s
Iteration  10: 14280545.733 ops/s
Iteration  11: 13385905.988 ops/s
Iteration  12: 13769223.628 ops/s
Iteration  13: 13660885.409 ops/s
Iteration  14: 13389749.858 ops/s
Iteration  15: 13424433.708 ops/s
Iteration  16: 13799235.963 ops/s
Iteration  17: 13811362.775 ops/s
Iteration  18: 13589718.456 ops/s
Iteration  19: 13792291.387 ops/s
Iteration  20: 13594698.314 ops/s
Iteration  21: 13603146.847 ops/s
Iteration  22: 13995992.082 ops/s
Iteration  23: 13388369.329 ops/s
Iteration  24: 14598426.041 ops/s
Iteration  25: 13612135.516 ops/s
Iteration  26: 13593969.180 ops/s
Iteration  27: 11121249.770 ops/s
Iteration  28: 13842071.535 ops/s
Iteration  29: 13641690.722 ops/s
Iteration  30: 13782097.643 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_ambArrayEmpty":
  13662852.267 ±(99.9%) 386902.266 ops/s [Average]
  (min, avg, max) = (11121249.770, 13662852.267, 14598426.041), stdev = 579097.142
  CI (99.9%): [13275950.001, 14049754.533] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
ObservableAmbTest._Benchmark.benchmark_ambArrayEmpty  thrpt   30  13662852.267 ± 386902.266  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainIgnoresCancelBeforeOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainIgnoresCancelBeforeOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4397.755 ops/s
# Warmup Iteration   2: 32016.099 ops/s
# Warmup Iteration   3: 57872.053 ops/s
# Warmup Iteration   4: 99415.697 ops/s
# Warmup Iteration   5: 121928.391 ops/s
# Warmup Iteration   6: 116470.247 ops/s
# Warmup Iteration   7: 116291.432 ops/s
# Warmup Iteration   8: 121949.774 ops/s
# Warmup Iteration   9: 115493.728 ops/s
# Warmup Iteration  10: 122376.994 ops/s
# Warmup Iteration  11: 114509.504 ops/s
# Warmup Iteration  12: 106976.359 ops/s
# Warmup Iteration  13: 122581.345 ops/s
# Warmup Iteration  14: 116015.101 ops/s
# Warmup Iteration  15: 118537.559 ops/s
# Warmup Iteration  16: 122633.912 ops/s
# Warmup Iteration  17: 118024.642 ops/s
# Warmup Iteration  18: 121809.838 ops/s
# Warmup Iteration  19: 123493.713 ops/s
# Warmup Iteration  20: 122372.328 ops/s
# Warmup Iteration  21: 122743.545 ops/s
# Warmup Iteration  22: 120300.283 ops/s
# Warmup Iteration  23: 124282.268 ops/s
# Warmup Iteration  24: 124415.226 ops/s
# Warmup Iteration  25: 123089.640 ops/s
# Warmup Iteration  26: 118606.059 ops/s
# Warmup Iteration  27: 122707.377 ops/s
# Warmup Iteration  28: 123415.136 ops/s
# Warmup Iteration  29: 124849.756 ops/s
# Warmup Iteration  30: 122606.056 ops/s
Iteration   1: 123702.711 ops/s
Iteration   2: 122799.245 ops/s
Iteration   3: 121511.906 ops/s
Iteration   4: 124939.231 ops/s
Iteration   5: 121526.401 ops/s
Iteration   6: 121157.609 ops/s
Iteration   7: 128803.711 ops/s
Iteration   8: 121935.500 ops/s
Iteration   9: 124795.217 ops/s
Iteration  10: 119912.370 ops/s
Iteration  11: 125656.901 ops/s
Iteration  12: 121526.350 ops/s
Iteration  13: 122654.620 ops/s
Iteration  14: 122638.540 ops/s
Iteration  15: 123758.694 ops/s
Iteration  16: 123067.944 ops/s
Iteration  17: 125281.789 ops/s
Iteration  18: 123827.784 ops/s
Iteration  19: 128673.452 ops/s
Iteration  20: 127992.022 ops/s
Iteration  21: 119245.654 ops/s
Iteration  22: 129416.811 ops/s
Iteration  23: 119002.870 ops/s
Iteration  24: 127759.541 ops/s
Iteration  25: 118976.454 ops/s
Iteration  26: 123997.851 ops/s
Iteration  27: 125653.732 ops/s
Iteration  28: 120691.012 ops/s
Iteration  29: 125133.192 ops/s
Iteration  30: 119509.787 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainIgnoresCancelBeforeOnError":
  123518.297 ±(99.9%) 2019.033 ops/s [Average]
  (min, avg, max) = (118976.454, 123518.297, 129416.811), stdev = 3021.994
  CI (99.9%): [121499.264, 125537.330] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score      Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainIgnoresCancelBeforeOnError  thrpt   30  123518.297 ± 2019.033  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3624389.432 ops/s
# Warmup Iteration   2: 5932255.404 ops/s
# Warmup Iteration   3: 7823238.252 ops/s
# Warmup Iteration   4: 8482911.492 ops/s
# Warmup Iteration   5: 7771575.576 ops/s
# Warmup Iteration   6: 8347142.737 ops/s
# Warmup Iteration   7: 7954904.714 ops/s
# Warmup Iteration   8: 8446732.680 ops/s
# Warmup Iteration   9: 7900851.265 ops/s
# Warmup Iteration  10: 8125474.699 ops/s
# Warmup Iteration  11: 8115881.312 ops/s
# Warmup Iteration  12: 8055877.538 ops/s
# Warmup Iteration  13: 8415946.561 ops/s
# Warmup Iteration  14: 8316409.060 ops/s
# Warmup Iteration  15: 8001373.993 ops/s
# Warmup Iteration  16: 8335180.366 ops/s
# Warmup Iteration  17: 8142957.945 ops/s
# Warmup Iteration  18: 7870154.526 ops/s
# Warmup Iteration  19: 8401690.502 ops/s
# Warmup Iteration  20: 7864147.058 ops/s
# Warmup Iteration  21: 8306930.928 ops/s
# Warmup Iteration  22: 8090596.354 ops/s
# Warmup Iteration  23: 8194005.303 ops/s
# Warmup Iteration  24: 8224344.651 ops/s
# Warmup Iteration  25: 8036074.717 ops/s
# Warmup Iteration  26: 8213607.989 ops/s
# Warmup Iteration  27: 8150491.671 ops/s
# Warmup Iteration  28: 8040471.931 ops/s
# Warmup Iteration  29: 8424051.439 ops/s
# Warmup Iteration  30: 7947639.234 ops/s
Iteration   1: 8246899.166 ops/s
Iteration   2: 8118953.307 ops/s
Iteration   3: 8193348.408 ops/s
Iteration   4: 7995682.227 ops/s
Iteration   5: 7884664.367 ops/s
Iteration   6: 8267159.283 ops/s
Iteration   7: 8020254.299 ops/s
Iteration   8: 8233877.945 ops/s
Iteration   9: 8049380.742 ops/s
Iteration  10: 7986524.487 ops/s
Iteration  11: 6887434.951 ops/s
Iteration  12: 7794080.535 ops/s
Iteration  13: 7666905.997 ops/s
Iteration  14: 8399721.621 ops/s
Iteration  15: 8243386.539 ops/s
Iteration  16: 7680384.826 ops/s
Iteration  17: 8361163.837 ops/s
Iteration  18: 8421328.171 ops/s
Iteration  19: 7922437.532 ops/s
Iteration  20: 7985546.948 ops/s
Iteration  21: 8311806.892 ops/s
Iteration  22: 7939465.011 ops/s
Iteration  23: 8326365.039 ops/s
Iteration  24: 8126777.098 ops/s
Iteration  25: 7977368.627 ops/s
Iteration  26: 8238491.092 ops/s
Iteration  27: 7906181.412 ops/s
Iteration  28: 8119737.519 ops/s
Iteration  29: 8045234.786 ops/s
Iteration  30: 8008355.314 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerDisposed":
  8045297.266 ±(99.9%) 197181.597 ops/s [Average]
  (min, avg, max) = (6887434.951, 8045297.266, 8421328.171), stdev = 295132.153
  CI (99.9%): [7848115.669, 8242478.862] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
CompletableMergeTest._Benchmark.benchmark_innerDisposed  thrpt   30  8045297.266 ± 197181.597  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_subscribedDisposable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_subscribedDisposable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28633316.714 ops/s
# Warmup Iteration   2: 39391466.029 ops/s
# Warmup Iteration   3: 60275511.897 ops/s
# Warmup Iteration   4: 56285681.173 ops/s
# Warmup Iteration   5: 57211021.543 ops/s
# Warmup Iteration   6: 57809598.092 ops/s
# Warmup Iteration   7: 58470697.924 ops/s
# Warmup Iteration   8: 58749950.366 ops/s
# Warmup Iteration   9: 58402588.513 ops/s
# Warmup Iteration  10: 58781799.754 ops/s
# Warmup Iteration  11: 57508811.807 ops/s
# Warmup Iteration  12: 59639240.883 ops/s
# Warmup Iteration  13: 56602843.360 ops/s
# Warmup Iteration  14: 58856090.023 ops/s
# Warmup Iteration  15: 57427615.098 ops/s
# Warmup Iteration  16: 59988465.978 ops/s
# Warmup Iteration  17: 57479392.051 ops/s
# Warmup Iteration  18: 58161890.024 ops/s
# Warmup Iteration  19: 59429534.112 ops/s
# Warmup Iteration  20: 59688613.380 ops/s
# Warmup Iteration  21: 55814126.340 ops/s
# Warmup Iteration  22: 58683892.516 ops/s
# Warmup Iteration  23: 57894223.542 ops/s
# Warmup Iteration  24: 57154826.658 ops/s
# Warmup Iteration  25: 59254246.361 ops/s
# Warmup Iteration  26: 58638659.123 ops/s
# Warmup Iteration  27: 58993932.752 ops/s
# Warmup Iteration  28: 58492377.141 ops/s
# Warmup Iteration  29: 59098637.641 ops/s
# Warmup Iteration  30: 57864997.116 ops/s
Iteration   1: 58275540.704 ops/s
Iteration   2: 59821189.256 ops/s
Iteration   3: 57616554.304 ops/s
Iteration   4: 60228355.233 ops/s
Iteration   5: 58857939.122 ops/s
Iteration   6: 59734576.024 ops/s
Iteration   7: 57898187.851 ops/s
Iteration   8: 59507212.004 ops/s
Iteration   9: 59707829.639 ops/s
Iteration  10: 58358249.800 ops/s
Iteration  11: 58035669.775 ops/s
Iteration  12: 59629282.546 ops/s
Iteration  13: 56565058.647 ops/s
Iteration  14: 59758154.971 ops/s
Iteration  15: 58183003.533 ops/s
Iteration  16: 59182877.681 ops/s
Iteration  17: 59097833.118 ops/s
Iteration  18: 57823497.848 ops/s
Iteration  19: 57235432.587 ops/s
Iteration  20: 58836668.688 ops/s
Iteration  21: 57311749.701 ops/s
Iteration  22: 56440330.450 ops/s
Iteration  23: 58041681.441 ops/s
Iteration  24: 55813534.142 ops/s
Iteration  25: 60908790.375 ops/s
Iteration  26: 55737917.327 ops/s
Iteration  27: 58810992.363 ops/s
Iteration  28: 58982410.917 ops/s
Iteration  29: 57713982.706 ops/s
Iteration  30: 59925641.491 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_subscribedDisposable":
  58468004.808 ±(99.9%) 872396.217 ops/s [Average]
  (min, avg, max) = (55737917.327, 58468004.808, 60908790.375), stdev = 1305761.687
  CI (99.9%): [57595608.591, 59340401.025] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
SchedulerWhenTest._Benchmark.benchmark_subscribedDisposable  thrpt   30  58468004.808 ± 872396.217  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_getWithEmptyFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_getWithEmptyFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 191086.177 ops/s
# Warmup Iteration   2: 302783.488 ops/s
# Warmup Iteration   3: 323356.740 ops/s
# Warmup Iteration   4: 319202.277 ops/s
# Warmup Iteration   5: 338274.520 ops/s
# Warmup Iteration   6: 327935.232 ops/s
# Warmup Iteration   7: 346917.685 ops/s
# Warmup Iteration   8: 341965.186 ops/s
# Warmup Iteration   9: 351619.556 ops/s
# Warmup Iteration  10: 345488.598 ops/s
# Warmup Iteration  11: 345490.956 ops/s
# Warmup Iteration  12: 361666.979 ops/s
# Warmup Iteration  13: 333817.093 ops/s
# Warmup Iteration  14: 355213.325 ops/s
# Warmup Iteration  15: 346594.912 ops/s
# Warmup Iteration  16: 350860.593 ops/s
# Warmup Iteration  17: 373767.206 ops/s
# Warmup Iteration  18: 363316.240 ops/s
# Warmup Iteration  19: 373327.915 ops/s
# Warmup Iteration  20: 377438.107 ops/s
# Warmup Iteration  21: 360373.607 ops/s
# Warmup Iteration  22: 379861.990 ops/s
# Warmup Iteration  23: 361782.955 ops/s
# Warmup Iteration  24: 364124.153 ops/s
# Warmup Iteration  25: 376111.619 ops/s
# Warmup Iteration  26: 357999.739 ops/s
# Warmup Iteration  27: 383523.176 ops/s
# Warmup Iteration  28: 361706.580 ops/s
# Warmup Iteration  29: 365804.964 ops/s
# Warmup Iteration  30: 380952.880 ops/s
Iteration   1: 362966.549 ops/s
Iteration   2: 365390.306 ops/s
Iteration   3: 381879.847 ops/s
Iteration   4: 361461.291 ops/s
Iteration   5: 374552.691 ops/s
Iteration   6: 268970.271 ops/s
Iteration   7: 374183.870 ops/s
Iteration   8: 368466.766 ops/s
Iteration   9: 376130.744 ops/s
Iteration  10: 367538.309 ops/s
Iteration  11: 367849.470 ops/s
Iteration  12: 363772.309 ops/s
Iteration  13: 363508.868 ops/s
Iteration  14: 376981.710 ops/s
Iteration  15: 374753.079 ops/s
Iteration  16: 363033.821 ops/s
Iteration  17: 364123.425 ops/s
Iteration  18: 362258.943 ops/s
Iteration  19: 372297.584 ops/s
Iteration  20: 368160.019 ops/s
Iteration  21: 367988.660 ops/s
Iteration  22: 370154.997 ops/s
Iteration  23: 361044.380 ops/s
Iteration  24: 386569.868 ops/s
Iteration  25: 354680.813 ops/s
Iteration  26: 370943.398 ops/s
Iteration  27: 370702.862 ops/s
Iteration  28: 376686.080 ops/s
Iteration  29: 372679.389 ops/s
Iteration  30: 357825.988 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_getWithEmptyFlowable":
  365585.210 ±(99.9%) 13068.042 ops/s [Average]
  (min, avg, max) = (268970.271, 365585.210, 386569.868), stdev = 19559.632
  CI (99.9%): [352517.168, 378653.252] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
BlockingObservableToFutureTest._Benchmark.benchmark_getWithEmptyFlowable  thrpt   30  365585.210 ± 13068.042  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapNotificationOnNextReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapNotificationOnNextReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93722.387 ops/s
# Warmup Iteration   2: 492403.933 ops/s
# Warmup Iteration   3: 511411.906 ops/s
# Warmup Iteration   4: 532936.896 ops/s
# Warmup Iteration   5: 569111.314 ops/s
# Warmup Iteration   6: 499243.396 ops/s
# Warmup Iteration   7: 537783.517 ops/s
# Warmup Iteration   8: 466090.382 ops/s
# Warmup Iteration   9: 551027.545 ops/s
# Warmup Iteration  10: 574021.792 ops/s
# Warmup Iteration  11: 556239.752 ops/s
# Warmup Iteration  12: 543671.246 ops/s
# Warmup Iteration  13: 559504.580 ops/s
# Warmup Iteration  14: 543002.041 ops/s
# Warmup Iteration  15: 548752.177 ops/s
# Warmup Iteration  16: 558318.460 ops/s
# Warmup Iteration  17: 569979.974 ops/s
# Warmup Iteration  18: 586992.440 ops/s
# Warmup Iteration  19: 591522.704 ops/s
# Warmup Iteration  20: 557063.701 ops/s
# Warmup Iteration  21: 597755.637 ops/s
# Warmup Iteration  22: 552447.071 ops/s
# Warmup Iteration  23: 590796.627 ops/s
# Warmup Iteration  24: 564091.241 ops/s
# Warmup Iteration  25: 561585.349 ops/s
# Warmup Iteration  26: 589564.779 ops/s
# Warmup Iteration  27: 560929.719 ops/s
# Warmup Iteration  28: 561990.966 ops/s
# Warmup Iteration  29: 588254.207 ops/s
# Warmup Iteration  30: 568044.394 ops/s
Iteration   1: 587132.100 ops/s
Iteration   2: 575723.259 ops/s
Iteration   3: 566745.647 ops/s
Iteration   4: 583359.712 ops/s
Iteration   5: 589250.443 ops/s
Iteration   6: 560069.659 ops/s
Iteration   7: 583379.965 ops/s
Iteration   8: 557499.535 ops/s
Iteration   9: 589871.189 ops/s
Iteration  10: 567333.839 ops/s
Iteration  11: 584770.326 ops/s
Iteration  12: 578697.148 ops/s
Iteration  13: 557715.382 ops/s
Iteration  14: 578532.233 ops/s
Iteration  15: 562529.064 ops/s
Iteration  16: 551088.557 ops/s
Iteration  17: 566461.555 ops/s
Iteration  18: 561634.859 ops/s
Iteration  19: 590954.348 ops/s
Iteration  20: 578093.420 ops/s
Iteration  21: 564071.254 ops/s
Iteration  22: 568270.511 ops/s
Iteration  23: 557968.362 ops/s
Iteration  24: 569616.946 ops/s
Iteration  25: 571362.816 ops/s
Iteration  26: 589592.221 ops/s
Iteration  27: 570309.515 ops/s
Iteration  28: 570002.839 ops/s
Iteration  29: 555850.985 ops/s
Iteration  30: 584051.234 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapNotificationOnNextReturnsNull":
  572397.964 ±(99.9%) 7879.693 ops/s [Average]
  (min, avg, max) = (551088.557, 572397.964, 590954.348), stdev = 11793.954
  CI (99.9%): [564518.272, 580277.657] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_flatMapNotificationOnNextReturnsNull  thrpt   30  572397.964 ± 7879.693  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatCovariance4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatCovariance4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 175527.964 ops/s
# Warmup Iteration   2: 893955.025 ops/s
# Warmup Iteration   3: 2121894.578 ops/s
# Warmup Iteration   4: 2183511.846 ops/s
# Warmup Iteration   5: 2379155.718 ops/s
# Warmup Iteration   6: 2387264.386 ops/s
# Warmup Iteration   7: 2536629.297 ops/s
# Warmup Iteration   8: 2409251.973 ops/s
# Warmup Iteration   9: 2544730.026 ops/s
# Warmup Iteration  10: 2411201.344 ops/s
# Warmup Iteration  11: 2436469.689 ops/s
# Warmup Iteration  12: 2539263.891 ops/s
# Warmup Iteration  13: 2405809.781 ops/s
# Warmup Iteration  14: 2511272.374 ops/s
# Warmup Iteration  15: 2422773.973 ops/s
# Warmup Iteration  16: 2513034.326 ops/s
# Warmup Iteration  17: 2449833.702 ops/s
# Warmup Iteration  18: 2439961.157 ops/s
# Warmup Iteration  19: 2385637.817 ops/s
# Warmup Iteration  20: 2437064.806 ops/s
# Warmup Iteration  21: 2529662.262 ops/s
# Warmup Iteration  22: 2432183.244 ops/s
# Warmup Iteration  23: 2382320.777 ops/s
# Warmup Iteration  24: 2432081.426 ops/s
# Warmup Iteration  25: 2562666.582 ops/s
# Warmup Iteration  26: 2409309.399 ops/s
# Warmup Iteration  27: 2504824.559 ops/s
# Warmup Iteration  28: 2399711.552 ops/s
# Warmup Iteration  29: 2473048.841 ops/s
# Warmup Iteration  30: 2460562.730 ops/s
Iteration   1: 1921120.350 ops/s
Iteration   2: 2476176.503 ops/s
Iteration   3: 2461036.404 ops/s
Iteration   4: 2444231.565 ops/s
Iteration   5: 2431851.638 ops/s
Iteration   6: 2426032.641 ops/s
Iteration   7: 2539710.305 ops/s
Iteration   8: 2405347.710 ops/s
Iteration   9: 2524537.758 ops/s
Iteration  10: 2420434.218 ops/s
Iteration  11: 2459573.771 ops/s
Iteration  12: 2555516.813 ops/s
Iteration  13: 2514642.861 ops/s
Iteration  14: 2503959.581 ops/s
Iteration  15: 2355819.063 ops/s
Iteration  16: 2444377.814 ops/s
Iteration  17: 2483655.690 ops/s
Iteration  18: 2435209.149 ops/s
Iteration  19: 2472684.896 ops/s
Iteration  20: 2409541.055 ops/s
Iteration  21: 2393647.815 ops/s
Iteration  22: 2489818.771 ops/s
Iteration  23: 2373808.116 ops/s
Iteration  24: 2406216.753 ops/s
Iteration  25: 2381167.828 ops/s
Iteration  26: 2528564.511 ops/s
Iteration  27: 2409271.379 ops/s
Iteration  28: 2569458.951 ops/s
Iteration  29: 2435849.661 ops/s
Iteration  30: 2411234.386 ops/s


Result "io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatCovariance4":
  2436149.932 ±(99.9%) 74843.562 ops/s [Average]
  (min, avg, max) = (1921120.350, 2436149.932, 2569458.951), stdev = 112022.329
  CI (99.9%): [2361306.369, 2510993.494] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableConcatTests._Benchmark.benchmark_concatCovariance4  thrpt   30  2436149.932 ± 74843.562  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_debounceWithTimeBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_debounceWithTimeBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.694 ops/s
# Warmup Iteration   2: 10507.638 ops/s
# Warmup Iteration   3: 62842.640 ops/s
# Warmup Iteration   4: 95862.657 ops/s
# Warmup Iteration   5: 135042.949 ops/s
# Warmup Iteration   6: 131629.376 ops/s
# Warmup Iteration   7: 152521.858 ops/s
# Warmup Iteration   8: 173783.655 ops/s
# Warmup Iteration   9: 394345.270 ops/s
# Warmup Iteration  10: 395367.436 ops/s
# Warmup Iteration  11: 398928.183 ops/s
# Warmup Iteration  12: 391762.820 ops/s
# Warmup Iteration  13: 410855.829 ops/s
# Warmup Iteration  14: 405677.792 ops/s
# Warmup Iteration  15: 388946.660 ops/s
# Warmup Iteration  16: 407711.790 ops/s
# Warmup Iteration  17: 410481.102 ops/s
# Warmup Iteration  18: 394437.367 ops/s
# Warmup Iteration  19: 410636.578 ops/s
# Warmup Iteration  20: 394171.724 ops/s
# Warmup Iteration  21: 385904.225 ops/s
# Warmup Iteration  22: 396929.507 ops/s
# Warmup Iteration  23: 401192.374 ops/s
# Warmup Iteration  24: 407332.013 ops/s
# Warmup Iteration  25: 394711.492 ops/s
# Warmup Iteration  26: 390979.411 ops/s
# Warmup Iteration  27: 417461.571 ops/s
# Warmup Iteration  28: 394235.481 ops/s
# Warmup Iteration  29: 397846.955 ops/s
# Warmup Iteration  30: 418786.802 ops/s
Iteration   1: 388522.430 ops/s
Iteration   2: 412335.212 ops/s
Iteration   3: 403390.811 ops/s
Iteration   4: 415330.805 ops/s
Iteration   5: 410487.499 ops/s
Iteration   6: 397387.204 ops/s
Iteration   7: 415153.897 ops/s
Iteration   8: 394928.404 ops/s
Iteration   9: 409500.422 ops/s
Iteration  10: 399921.983 ops/s
Iteration  11: 407401.065 ops/s
Iteration  12: 403134.914 ops/s
Iteration  13: 399258.046 ops/s
Iteration  14: 427829.400 ops/s
Iteration  15: 413006.448 ops/s
Iteration  16: 393293.276 ops/s
Iteration  17: 411462.455 ops/s
Iteration  18: 402149.833 ops/s
Iteration  19: 400237.142 ops/s
Iteration  20: 411671.360 ops/s
Iteration  21: 409686.456 ops/s
Iteration  22: 405367.272 ops/s
Iteration  23: 386213.404 ops/s
Iteration  24: 421182.918 ops/s
Iteration  25: 416903.635 ops/s
Iteration  26: 392668.399 ops/s
Iteration  27: 412165.421 ops/s
Iteration  28: 400732.921 ops/s
Iteration  29: 413430.977 ops/s
Iteration  30: 409458.938 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_debounceWithTimeBackpressure":
  406140.432 ±(99.9%) 6455.081 ops/s [Average]
  (min, avg, max) = (386213.404, 406140.432, 427829.400), stdev = 9661.663
  CI (99.9%): [399685.350, 412595.513] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableDebounceTest._Benchmark.benchmark_debounceWithTimeBackpressure  thrpt   30  406140.432 ± 6455.081  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_justCompletableComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_justCompletableComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 314855.931 ops/s
# Warmup Iteration   2: 1955212.823 ops/s
# Warmup Iteration   3: 2102716.761 ops/s
# Warmup Iteration   4: 2266415.801 ops/s
# Warmup Iteration   5: 2359378.073 ops/s
# Warmup Iteration   6: 2456887.478 ops/s
# Warmup Iteration   7: 2549694.963 ops/s
# Warmup Iteration   8: 2416168.804 ops/s
# Warmup Iteration   9: 2535221.787 ops/s
# Warmup Iteration  10: 2418716.782 ops/s
# Warmup Iteration  11: 2500637.140 ops/s
# Warmup Iteration  12: 2597874.559 ops/s
# Warmup Iteration  13: 2413785.542 ops/s
# Warmup Iteration  14: 2505402.928 ops/s
# Warmup Iteration  15: 2446521.006 ops/s
# Warmup Iteration  16: 2547559.802 ops/s
# Warmup Iteration  17: 2543926.466 ops/s
# Warmup Iteration  18: 2443676.036 ops/s
# Warmup Iteration  19: 2482845.467 ops/s
# Warmup Iteration  20: 2491423.233 ops/s
# Warmup Iteration  21: 2483085.737 ops/s
# Warmup Iteration  22: 2577324.226 ops/s
# Warmup Iteration  23: 2433505.585 ops/s
# Warmup Iteration  24: 2525369.162 ops/s
# Warmup Iteration  25: 2132396.157 ops/s
# Warmup Iteration  26: 2408471.049 ops/s
# Warmup Iteration  27: 2597336.969 ops/s
# Warmup Iteration  28: 2387129.508 ops/s
# Warmup Iteration  29: 2533785.586 ops/s
# Warmup Iteration  30: 2424198.012 ops/s
Iteration   1: 2469940.112 ops/s
Iteration   2: 2560566.503 ops/s
Iteration   3: 2390857.979 ops/s
Iteration   4: 2614797.297 ops/s
Iteration   5: 2401279.725 ops/s
Iteration   6: 2532678.229 ops/s
Iteration   7: 2469488.623 ops/s
Iteration   8: 2440754.763 ops/s
Iteration   9: 2597387.269 ops/s
Iteration  10: 2431373.804 ops/s
Iteration  11: 2549733.712 ops/s
Iteration  12: 2420898.859 ops/s
Iteration  13: 2510858.137 ops/s
Iteration  14: 2556310.732 ops/s
Iteration  15: 2382782.542 ops/s
Iteration  16: 2518603.431 ops/s
Iteration  17: 2407192.084 ops/s
Iteration  18: 2541669.652 ops/s
Iteration  19: 2419885.064 ops/s
Iteration  20: 2479304.012 ops/s
Iteration  21: 2568242.039 ops/s
Iteration  22: 2468057.930 ops/s
Iteration  23: 2497387.578 ops/s
Iteration  24: 2493015.374 ops/s
Iteration  25: 2493830.873 ops/s
Iteration  26: 2492693.637 ops/s
Iteration  27: 2458462.381 ops/s
Iteration  28: 2520646.046 ops/s
Iteration  29: 2451786.816 ops/s
Iteration  30: 2554924.078 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_justCompletableComplete":
  2489846.976 ±(99.9%) 41638.125 ops/s [Average]
  (min, avg, max) = (2382782.542, 2489846.976, 2614797.297), stdev = 62321.991
  CI (99.9%): [2448208.850, 2531485.101] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObservableStartWithTest._Benchmark.benchmark_justCompletableComplete  thrpt   30  2489846.976 ± 41638.125  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_itemDelayReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_itemDelayReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.780 ops/s
# Warmup Iteration   2: 24392.712 ops/s
# Warmup Iteration   3: 54505.979 ops/s
# Warmup Iteration   4: 84537.833 ops/s
# Warmup Iteration   5: 172717.727 ops/s
# Warmup Iteration   6: 204240.554 ops/s
# Warmup Iteration   7: 251096.087 ops/s
# Warmup Iteration   8: 237833.316 ops/s
# Warmup Iteration   9: 250003.553 ops/s
# Warmup Iteration  10: 247861.336 ops/s
# Warmup Iteration  11: 237413.317 ops/s
# Warmup Iteration  12: 251179.893 ops/s
# Warmup Iteration  13: 248714.368 ops/s
# Warmup Iteration  14: 244668.136 ops/s
# Warmup Iteration  15: 246718.162 ops/s
# Warmup Iteration  16: 249643.254 ops/s
# Warmup Iteration  17: 253054.878 ops/s
# Warmup Iteration  18: 239535.213 ops/s
# Warmup Iteration  19: 252732.124 ops/s
# Warmup Iteration  20: 240701.433 ops/s
# Warmup Iteration  21: 254197.965 ops/s
# Warmup Iteration  22: 243702.209 ops/s
# Warmup Iteration  23: 246095.175 ops/s
# Warmup Iteration  24: 234952.493 ops/s
# Warmup Iteration  25: 239957.233 ops/s
# Warmup Iteration  26: 252557.943 ops/s
# Warmup Iteration  27: 237185.286 ops/s
# Warmup Iteration  28: 246125.706 ops/s
# Warmup Iteration  29: 255476.507 ops/s
# Warmup Iteration  30: 245877.059 ops/s
Iteration   1: 250737.723 ops/s
Iteration   2: 252570.303 ops/s
Iteration   3: 245043.340 ops/s
Iteration   4: 252505.020 ops/s
Iteration   5: 242459.894 ops/s
Iteration   6: 244038.029 ops/s
Iteration   7: 246211.954 ops/s
Iteration   8: 249304.299 ops/s
Iteration   9: 253688.907 ops/s
Iteration  10: 235994.836 ops/s
Iteration  11: 255854.337 ops/s
Iteration  12: 248130.142 ops/s
Iteration  13: 246036.875 ops/s
Iteration  14: 251464.426 ops/s
Iteration  15: 237345.076 ops/s
Iteration  16: 251792.966 ops/s
Iteration  17: 254769.132 ops/s
Iteration  18: 245692.351 ops/s
Iteration  19: 244168.993 ops/s
Iteration  20: 255660.503 ops/s
Iteration  21: 241228.706 ops/s
Iteration  22: 253260.261 ops/s
Iteration  23: 240539.768 ops/s
Iteration  24: 244924.715 ops/s
Iteration  25: 240833.699 ops/s
Iteration  26: 242409.209 ops/s
Iteration  27: 252426.501 ops/s
Iteration  28: 235220.330 ops/s
Iteration  29: 256136.495 ops/s
Iteration  30: 249578.275 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_itemDelayReturnsNull":
  247334.236 ±(99.9%) 4067.258 ops/s [Average]
  (min, avg, max) = (235220.330, 247334.236, 256136.495), stdev = 6087.681
  CI (99.9%): [243266.977, 251401.494] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableDelayTest._Benchmark.benchmark_itemDelayReturnsNull  thrpt   30  247334.236 ± 4067.258  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_timeoutFirstItemReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_timeoutFirstItemReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 175932.875 ops/s
# Warmup Iteration   2: 509466.225 ops/s
# Warmup Iteration   3: 536886.321 ops/s
# Warmup Iteration   4: 547763.334 ops/s
# Warmup Iteration   5: 580825.922 ops/s
# Warmup Iteration   6: 580675.239 ops/s
# Warmup Iteration   7: 567043.943 ops/s
# Warmup Iteration   8: 545181.279 ops/s
# Warmup Iteration   9: 572774.479 ops/s
# Warmup Iteration  10: 542962.434 ops/s
# Warmup Iteration  11: 574512.243 ops/s
# Warmup Iteration  12: 543689.505 ops/s
# Warmup Iteration  13: 545524.625 ops/s
# Warmup Iteration  14: 582185.808 ops/s
# Warmup Iteration  15: 537539.388 ops/s
# Warmup Iteration  16: 575623.134 ops/s
# Warmup Iteration  17: 564100.549 ops/s
# Warmup Iteration  18: 581712.211 ops/s
# Warmup Iteration  19: 541423.646 ops/s
# Warmup Iteration  20: 537773.789 ops/s
# Warmup Iteration  21: 571462.511 ops/s
# Warmup Iteration  22: 591680.158 ops/s
# Warmup Iteration  23: 579277.930 ops/s
# Warmup Iteration  24: 586673.733 ops/s
# Warmup Iteration  25: 596752.155 ops/s
# Warmup Iteration  26: 577018.911 ops/s
# Warmup Iteration  27: 605222.275 ops/s
# Warmup Iteration  28: 570598.542 ops/s
# Warmup Iteration  29: 586598.761 ops/s
# Warmup Iteration  30: 589799.903 ops/s
Iteration   1: 570674.587 ops/s
Iteration   2: 604920.498 ops/s
Iteration   3: 596239.060 ops/s
Iteration   4: 593912.670 ops/s
Iteration   5: 605622.394 ops/s
Iteration   6: 583627.518 ops/s
Iteration   7: 597881.671 ops/s
Iteration   8: 589808.864 ops/s
Iteration   9: 583773.513 ops/s
Iteration  10: 601755.908 ops/s
Iteration  11: 573375.997 ops/s
Iteration  12: 612548.337 ops/s
Iteration  13: 577218.121 ops/s
Iteration  14: 571651.878 ops/s
Iteration  15: 582951.683 ops/s
Iteration  16: 586092.192 ops/s
Iteration  17: 603705.269 ops/s
Iteration  18: 595767.890 ops/s
Iteration  19: 564497.937 ops/s
Iteration  20: 626414.594 ops/s
Iteration  21: 585625.684 ops/s
Iteration  22: 614269.076 ops/s
Iteration  23: 585861.174 ops/s
Iteration  24: 599968.291 ops/s
Iteration  25: 620480.646 ops/s
Iteration  26: 583262.880 ops/s
Iteration  27: 606161.556 ops/s
Iteration  28: 568571.449 ops/s
Iteration  29: 612105.367 ops/s
Iteration  30: 577720.409 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_timeoutFirstItemReturnsNull":
  592548.904 ±(99.9%) 10805.348 ops/s [Average]
  (min, avg, max) = (564497.937, 592548.904, 626414.594), stdev = 16172.938
  CI (99.9%): [581743.555, 603354.252] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_timeoutFirstItemReturnsNull  thrpt   30  592548.904 ± 10805.348  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_combinerMapperFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_combinerMapperFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 143451.968 ops/s
# Warmup Iteration   2: 523276.571 ops/s
# Warmup Iteration   3: 559017.339 ops/s
# Warmup Iteration   4: 596140.388 ops/s
# Warmup Iteration   5: 595710.032 ops/s
# Warmup Iteration   6: 592414.811 ops/s
# Warmup Iteration   7: 594245.428 ops/s
# Warmup Iteration   8: 587254.662 ops/s
# Warmup Iteration   9: 614873.171 ops/s
# Warmup Iteration  10: 582545.981 ops/s
# Warmup Iteration  11: 578681.994 ops/s
# Warmup Iteration  12: 573720.250 ops/s
# Warmup Iteration  13: 608356.208 ops/s
# Warmup Iteration  14: 596484.698 ops/s
# Warmup Iteration  15: 599356.495 ops/s
# Warmup Iteration  16: 594735.003 ops/s
# Warmup Iteration  17: 620260.682 ops/s
# Warmup Iteration  18: 631212.147 ops/s
# Warmup Iteration  19: 602043.290 ops/s
# Warmup Iteration  20: 639107.569 ops/s
# Warmup Iteration  21: 638736.573 ops/s
# Warmup Iteration  22: 616720.031 ops/s
# Warmup Iteration  23: 608513.896 ops/s
# Warmup Iteration  24: 605692.015 ops/s
# Warmup Iteration  25: 644034.053 ops/s
# Warmup Iteration  26: 616892.189 ops/s
# Warmup Iteration  27: 642495.404 ops/s
# Warmup Iteration  28: 605878.489 ops/s
# Warmup Iteration  29: 621739.515 ops/s
# Warmup Iteration  30: 623994.399 ops/s
Iteration   1: 610712.899 ops/s
Iteration   2: 616320.767 ops/s
Iteration   3: 634497.573 ops/s
Iteration   4: 617043.390 ops/s
Iteration   5: 632226.345 ops/s
Iteration   6: 626682.253 ops/s
Iteration   7: 636693.393 ops/s
Iteration   8: 605968.906 ops/s
Iteration   9: 640883.200 ops/s
Iteration  10: 642272.500 ops/s
Iteration  11: 586088.063 ops/s
Iteration  12: 639567.238 ops/s
Iteration  13: 599504.275 ops/s
Iteration  14: 634880.484 ops/s
Iteration  15: 599791.219 ops/s
Iteration  16: 620814.927 ops/s
Iteration  17: 648353.303 ops/s
Iteration  18: 604243.803 ops/s
Iteration  19: 638962.251 ops/s
Iteration  20: 609058.455 ops/s
Iteration  21: 638676.568 ops/s
Iteration  22: 641040.804 ops/s
Iteration  23: 601797.419 ops/s
Iteration  24: 645498.577 ops/s
Iteration  25: 629229.952 ops/s
Iteration  26: 641708.726 ops/s
Iteration  27: 616447.747 ops/s
Iteration  28: 620978.823 ops/s
Iteration  29: 639163.670 ops/s
Iteration  30: 617628.012 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_combinerMapperFunctionReturnsNull":
  624557.851 ±(99.9%) 11185.310 ops/s [Average]
  (min, avg, max) = (586088.063, 624557.851, 648353.303), stdev = 16741.646
  CI (99.9%): [613372.542, 635743.161] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
ObservableFlatMapTest._Benchmark.benchmark_combinerMapperFunctionReturnsNull  thrpt   30  624557.851 ± 11185.310  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2388175.754 ops/s
# Warmup Iteration   2: 5706794.905 ops/s
# Warmup Iteration   3: 7456955.073 ops/s
# Warmup Iteration   4: 7828260.332 ops/s
# Warmup Iteration   5: 7694822.510 ops/s
# Warmup Iteration   6: 7735876.368 ops/s
# Warmup Iteration   7: 7477874.274 ops/s
# Warmup Iteration   8: 7802653.300 ops/s
# Warmup Iteration   9: 7773149.013 ops/s
# Warmup Iteration  10: 7713288.413 ops/s
# Warmup Iteration  11: 7533353.059 ops/s
# Warmup Iteration  12: 7913857.796 ops/s
# Warmup Iteration  13: 7515594.528 ops/s
# Warmup Iteration  14: 5811781.900 ops/s
# Warmup Iteration  15: 7459576.597 ops/s
# Warmup Iteration  16: 7537467.532 ops/s
# Warmup Iteration  17: 7779773.148 ops/s
# Warmup Iteration  18: 7669971.006 ops/s
# Warmup Iteration  19: 7740608.015 ops/s
# Warmup Iteration  20: 7932254.438 ops/s
# Warmup Iteration  21: 7675233.834 ops/s
# Warmup Iteration  22: 7681354.459 ops/s
# Warmup Iteration  23: 7791515.118 ops/s
# Warmup Iteration  24: 7887456.199 ops/s
# Warmup Iteration  25: 7680103.141 ops/s
# Warmup Iteration  26: 7455428.502 ops/s
# Warmup Iteration  27: 7645676.991 ops/s
# Warmup Iteration  28: 7666976.107 ops/s
# Warmup Iteration  29: 7836962.023 ops/s
# Warmup Iteration  30: 7653665.701 ops/s
Iteration   1: 7698364.672 ops/s
Iteration   2: 7976028.357 ops/s
Iteration   3: 7757080.144 ops/s
Iteration   4: 7729788.613 ops/s
Iteration   5: 7608302.825 ops/s
Iteration   6: 7725284.538 ops/s
Iteration   7: 7680152.703 ops/s
Iteration   8: 7628399.072 ops/s
Iteration   9: 7928795.068 ops/s
Iteration  10: 7517795.282 ops/s
Iteration  11: 7793698.186 ops/s
Iteration  12: 7848047.003 ops/s
Iteration  13: 7474189.225 ops/s
Iteration  14: 7838795.225 ops/s
Iteration  15: 7803336.068 ops/s
Iteration  16: 7653814.060 ops/s
Iteration  17: 7985202.843 ops/s
Iteration  18: 7686343.784 ops/s
Iteration  19: 7770960.376 ops/s
Iteration  20: 7764417.449 ops/s
Iteration  21: 7455417.308 ops/s
Iteration  22: 7835347.356 ops/s
Iteration  23: 7655946.850 ops/s
Iteration  24: 7680594.317 ops/s
Iteration  25: 7634855.322 ops/s
Iteration  26: 7982720.585 ops/s
Iteration  27: 7659388.304 ops/s
Iteration  28: 7680380.219 ops/s
Iteration  29: 7697012.428 ops/s
Iteration  30: 7579676.959 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalEmpty":
  7724337.838 ±(99.9%) 91868.089 ops/s [Average]
  (min, avg, max) = (7455417.308, 7724337.838, 7985202.843), stdev = 137503.841
  CI (99.9%): [7632469.749, 7816205.927] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_normalEmpty  thrpt   30  7724337.838 ± 91868.089  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_collectionSupplierIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_collectionSupplierIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.734 ops/s
# Warmup Iteration   2: 34879.620 ops/s
# Warmup Iteration   3: 95467.743 ops/s
# Warmup Iteration   4: 114214.100 ops/s
# Warmup Iteration   5: 119866.343 ops/s
# Warmup Iteration   6: 237951.219 ops/s
# Warmup Iteration   7: 296713.596 ops/s
# Warmup Iteration   8: 297411.029 ops/s
# Warmup Iteration   9: 288984.090 ops/s
# Warmup Iteration  10: 280314.975 ops/s
# Warmup Iteration  11: 288644.709 ops/s
# Warmup Iteration  12: 295422.935 ops/s
# Warmup Iteration  13: 308355.069 ops/s
# Warmup Iteration  14: 307963.651 ops/s
# Warmup Iteration  15: 311210.388 ops/s
# Warmup Iteration  16: 288067.185 ops/s
# Warmup Iteration  17: 310827.065 ops/s
# Warmup Iteration  18: 331529.497 ops/s
# Warmup Iteration  19: 310126.106 ops/s
# Warmup Iteration  20: 312890.771 ops/s
# Warmup Iteration  21: 308692.327 ops/s
# Warmup Iteration  22: 315828.253 ops/s
# Warmup Iteration  23: 315134.174 ops/s
# Warmup Iteration  24: 315900.927 ops/s
# Warmup Iteration  25: 330008.738 ops/s
# Warmup Iteration  26: 306946.393 ops/s
# Warmup Iteration  27: 319170.712 ops/s
# Warmup Iteration  28: 320656.637 ops/s
# Warmup Iteration  29: 310088.421 ops/s
# Warmup Iteration  30: 315888.387 ops/s
Iteration   1: 315636.093 ops/s
Iteration   2: 320180.014 ops/s
Iteration   3: 317438.921 ops/s
Iteration   4: 306156.960 ops/s
Iteration   5: 333100.351 ops/s
Iteration   6: 307554.632 ops/s
Iteration   7: 322546.075 ops/s
Iteration   8: 317788.851 ops/s
Iteration   9: 322396.567 ops/s
Iteration  10: 320899.953 ops/s
Iteration  11: 311645.964 ops/s
Iteration  12: 331266.243 ops/s
Iteration  13: 309548.783 ops/s
Iteration  14: 321721.478 ops/s
Iteration  15: 306956.546 ops/s
Iteration  16: 304970.214 ops/s
Iteration  17: 323159.175 ops/s
Iteration  18: 324847.605 ops/s
Iteration  19: 316600.430 ops/s
Iteration  20: 325996.564 ops/s
Iteration  21: 304893.669 ops/s
Iteration  22: 326942.063 ops/s
Iteration  23: 313661.834 ops/s
Iteration  24: 317143.481 ops/s
Iteration  25: 332038.612 ops/s
Iteration  26: 325547.979 ops/s
Iteration  27: 306551.915 ops/s
Iteration  28: 323925.770 ops/s
Iteration  29: 311794.761 ops/s
Iteration  30: 323772.519 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_collectionSupplierIsNull":
  318222.801 ±(99.9%) 5591.388 ops/s [Average]
  (min, avg, max) = (304893.669, 318222.801, 333100.351), stdev = 8368.926
  CI (99.9%): [312631.413, 323814.188] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableDistinctTest._Benchmark.benchmark_collectionSupplierIsNull  thrpt   30  318222.801 ± 5591.388  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturnTest._Benchmark.benchmark_returnItem$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturnTest._Benchmark.benchmark_returnItem

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 260092.539 ops/s
# Warmup Iteration   2: 624535.784 ops/s
# Warmup Iteration   3: 684387.401 ops/s
# Warmup Iteration   4: 682452.935 ops/s
# Warmup Iteration   5: 694529.023 ops/s
# Warmup Iteration   6: 690665.936 ops/s
# Warmup Iteration   7: 682107.364 ops/s
# Warmup Iteration   8: 675098.670 ops/s
# Warmup Iteration   9: 567615.801 ops/s
# Warmup Iteration  10: 734645.982 ops/s
# Warmup Iteration  11: 694326.502 ops/s
# Warmup Iteration  12: 656331.131 ops/s
# Warmup Iteration  13: 700759.169 ops/s
# Warmup Iteration  14: 645808.629 ops/s
# Warmup Iteration  15: 708697.741 ops/s
# Warmup Iteration  16: 718925.122 ops/s
# Warmup Iteration  17: 732128.967 ops/s
# Warmup Iteration  18: 745136.890 ops/s
# Warmup Iteration  19: 777047.642 ops/s
# Warmup Iteration  20: 731602.377 ops/s
# Warmup Iteration  21: 741349.058 ops/s
# Warmup Iteration  22: 752826.469 ops/s
# Warmup Iteration  23: 734526.715 ops/s
# Warmup Iteration  24: 763087.489 ops/s
# Warmup Iteration  25: 737737.086 ops/s
# Warmup Iteration  26: 724331.358 ops/s
# Warmup Iteration  27: 753485.660 ops/s
# Warmup Iteration  28: 742281.303 ops/s
# Warmup Iteration  29: 750317.709 ops/s
# Warmup Iteration  30: 752919.928 ops/s
Iteration   1: 726086.573 ops/s
Iteration   2: 757970.603 ops/s
Iteration   3: 729693.009 ops/s
Iteration   4: 757649.618 ops/s
Iteration   5: 722506.730 ops/s
Iteration   6: 765954.540 ops/s
Iteration   7: 733485.969 ops/s
Iteration   8: 758569.599 ops/s
Iteration   9: 731184.030 ops/s
Iteration  10: 737942.464 ops/s
Iteration  11: 753763.114 ops/s
Iteration  12: 742400.689 ops/s
Iteration  13: 753052.635 ops/s
Iteration  14: 742596.788 ops/s
Iteration  15: 721615.733 ops/s
Iteration  16: 754699.418 ops/s
Iteration  17: 774736.431 ops/s
Iteration  18: 737189.534 ops/s
Iteration  19: 736911.172 ops/s
Iteration  20: 734194.300 ops/s
Iteration  21: 768768.375 ops/s
Iteration  22: 718513.329 ops/s
Iteration  23: 753824.775 ops/s
Iteration  24: 713589.743 ops/s
Iteration  25: 743720.692 ops/s
Iteration  26: 768831.208 ops/s
Iteration  27: 731004.836 ops/s
Iteration  28: 758695.260 ops/s
Iteration  29: 725863.027 ops/s
Iteration  30: 763923.695 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturnTest._Benchmark.benchmark_returnItem":
  743964.596 ±(99.9%) 11317.426 ops/s [Average]
  (min, avg, max) = (713589.743, 743964.596, 774736.431), stdev = 16939.392
  CI (99.9%): [732647.170, 755282.022] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableOnErrorReturnTest._Benchmark.benchmark_returnItem  thrpt   30  743964.596 ± 11317.426  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 319335.634 ops/s
# Warmup Iteration   2: 562177.535 ops/s
# Warmup Iteration   3: 673613.866 ops/s
# Warmup Iteration   4: 680497.628 ops/s
# Warmup Iteration   5: 714973.882 ops/s
# Warmup Iteration   6: 692365.329 ops/s
# Warmup Iteration   7: 728780.269 ops/s
# Warmup Iteration   8: 683868.388 ops/s
# Warmup Iteration   9: 697984.608 ops/s
# Warmup Iteration  10: 709634.192 ops/s
# Warmup Iteration  11: 687201.316 ops/s
# Warmup Iteration  12: 732033.608 ops/s
# Warmup Iteration  13: 692563.177 ops/s
# Warmup Iteration  14: 706381.721 ops/s
# Warmup Iteration  15: 727413.402 ops/s
# Warmup Iteration  16: 700973.073 ops/s
# Warmup Iteration  17: 820874.630 ops/s
# Warmup Iteration  18: 733310.380 ops/s
# Warmup Iteration  19: 748348.345 ops/s
# Warmup Iteration  20: 722907.771 ops/s
# Warmup Iteration  21: 763921.621 ops/s
# Warmup Iteration  22: 751430.866 ops/s
# Warmup Iteration  23: 720352.658 ops/s
# Warmup Iteration  24: 747478.752 ops/s
# Warmup Iteration  25: 717580.412 ops/s
# Warmup Iteration  26: 739965.531 ops/s
# Warmup Iteration  27: 746426.506 ops/s
# Warmup Iteration  28: 764536.849 ops/s
# Warmup Iteration  29: 732782.324 ops/s
# Warmup Iteration  30: 774718.136 ops/s
Iteration   1: 723048.354 ops/s
Iteration   2: 755673.350 ops/s
Iteration   3: 734581.652 ops/s
Iteration   4: 739381.204 ops/s
Iteration   5: 756374.318 ops/s
Iteration   6: 734902.973 ops/s
Iteration   7: 746868.200 ops/s
Iteration   8: 753817.523 ops/s
Iteration   9: 740258.428 ops/s
Iteration  10: 731055.950 ops/s
Iteration  11: 749851.288 ops/s
Iteration  12: 763128.938 ops/s
Iteration  13: 736187.474 ops/s
Iteration  14: 755336.687 ops/s
Iteration  15: 734058.791 ops/s
Iteration  16: 760499.018 ops/s
Iteration  17: 750719.015 ops/s
Iteration  18: 715852.583 ops/s
Iteration  19: 752922.667 ops/s
Iteration  20: 719459.040 ops/s
Iteration  21: 764184.309 ops/s
Iteration  22: 776258.954 ops/s
Iteration  23: 718081.315 ops/s
Iteration  24: 774792.041 ops/s
Iteration  25: 714440.353 ops/s
Iteration  26: 748308.124 ops/s
Iteration  27: 730393.765 ops/s
Iteration  28: 764435.091 ops/s
Iteration  29: 750279.135 ops/s
Iteration  30: 729314.006 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTest._Benchmark.benchmark_error":
  744148.818 ±(99.9%) 11441.523 ops/s [Average]
  (min, avg, max) = (714440.353, 744148.818, 776258.954), stdev = 17125.134
  CI (99.9%): [732707.295, 755590.341] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
ObservableSkipLastTest._Benchmark.benchmark_error  thrpt   30  744148.818 ± 11441.523  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 351372.583 ops/s
# Warmup Iteration   2: 604777.050 ops/s
# Warmup Iteration   3: 638507.748 ops/s
# Warmup Iteration   4: 519564.368 ops/s
# Warmup Iteration   5: 717379.790 ops/s
# Warmup Iteration   6: 667115.186 ops/s
# Warmup Iteration   7: 692828.164 ops/s
# Warmup Iteration   8: 673970.596 ops/s
# Warmup Iteration   9: 678266.182 ops/s
# Warmup Iteration  10: 698534.614 ops/s
# Warmup Iteration  11: 652463.295 ops/s
# Warmup Iteration  12: 699275.579 ops/s
# Warmup Iteration  13: 681821.104 ops/s
# Warmup Iteration  14: 701500.462 ops/s
# Warmup Iteration  15: 659826.438 ops/s
# Warmup Iteration  16: 669025.758 ops/s
# Warmup Iteration  17: 740115.223 ops/s
# Warmup Iteration  18: 731696.985 ops/s
# Warmup Iteration  19: 759754.042 ops/s
# Warmup Iteration  20: 691907.449 ops/s
# Warmup Iteration  21: 713779.474 ops/s
# Warmup Iteration  22: 749458.731 ops/s
# Warmup Iteration  23: 672109.851 ops/s
# Warmup Iteration  24: 732748.807 ops/s
# Warmup Iteration  25: 780998.893 ops/s
# Warmup Iteration  26: 715259.465 ops/s
# Warmup Iteration  27: 743499.288 ops/s
# Warmup Iteration  28: 721824.970 ops/s
# Warmup Iteration  29: 732268.616 ops/s
# Warmup Iteration  30: 738881.298 ops/s
Iteration   1: 725315.859 ops/s
Iteration   2: 757816.303 ops/s
Iteration   3: 734924.638 ops/s
Iteration   4: 714093.032 ops/s
Iteration   5: 738387.847 ops/s
Iteration   6: 772830.932 ops/s
Iteration   7: 713609.597 ops/s
Iteration   8: 752759.319 ops/s
Iteration   9: 736102.207 ops/s
Iteration  10: 737907.749 ops/s
Iteration  11: 718227.317 ops/s
Iteration  12: 717788.205 ops/s
Iteration  13: 746395.427 ops/s
Iteration  14: 722446.984 ops/s
Iteration  15: 721183.546 ops/s
Iteration  16: 704629.238 ops/s
Iteration  17: 739541.581 ops/s
Iteration  18: 727628.372 ops/s
Iteration  19: 744311.243 ops/s
Iteration  20: 727958.794 ops/s
Iteration  21: 743803.782 ops/s
Iteration  22: 716481.449 ops/s
Iteration  23: 722852.407 ops/s
Iteration  24: 741485.727 ops/s
Iteration  25: 725260.455 ops/s
Iteration  26: 751912.360 ops/s
Iteration  27: 728465.764 ops/s
Iteration  28: 719179.218 ops/s
Iteration  29: 739918.832 ops/s
Iteration  30: 710917.382 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_error":
  731804.519 ±(99.9%) 10415.628 ops/s [Average]
  (min, avg, max) = (704629.238, 731804.519, 772830.932), stdev = 15589.623
  CI (99.9%): [721388.891, 742220.147] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_error  thrpt   30  731804.519 ± 10415.628  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorErrorObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorErrorObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.695 ops/s
# Warmup Iteration   2: 25212.497 ops/s
# Warmup Iteration   3: 67685.336 ops/s
# Warmup Iteration   4: 71682.853 ops/s
# Warmup Iteration   5: 141905.346 ops/s
# Warmup Iteration   6: 190538.677 ops/s
# Warmup Iteration   7: 211870.914 ops/s
# Warmup Iteration   8: 207719.865 ops/s
# Warmup Iteration   9: 212983.399 ops/s
# Warmup Iteration  10: 203882.877 ops/s
# Warmup Iteration  11: 205868.750 ops/s
# Warmup Iteration  12: 211546.070 ops/s
# Warmup Iteration  13: 202324.525 ops/s
# Warmup Iteration  14: 214051.520 ops/s
# Warmup Iteration  15: 202951.859 ops/s
# Warmup Iteration  16: 207281.547 ops/s
# Warmup Iteration  17: 214235.067 ops/s
# Warmup Iteration  18: 207716.895 ops/s
# Warmup Iteration  19: 207985.962 ops/s
# Warmup Iteration  20: 207405.142 ops/s
# Warmup Iteration  21: 207196.171 ops/s
# Warmup Iteration  22: 205992.987 ops/s
# Warmup Iteration  23: 204463.325 ops/s
# Warmup Iteration  24: 210309.061 ops/s
# Warmup Iteration  25: 215317.111 ops/s
# Warmup Iteration  26: 209207.388 ops/s
# Warmup Iteration  27: 208415.496 ops/s
# Warmup Iteration  28: 218215.593 ops/s
# Warmup Iteration  29: 204133.042 ops/s
# Warmup Iteration  30: 214603.122 ops/s
Iteration   1: 206098.061 ops/s
Iteration   2: 213925.598 ops/s
Iteration   3: 215094.832 ops/s
Iteration   4: 210447.036 ops/s
Iteration   5: 206319.719 ops/s
Iteration   6: 216233.440 ops/s
Iteration   7: 208566.298 ops/s
Iteration   8: 216536.380 ops/s
Iteration   9: 217088.869 ops/s
Iteration  10: 207767.288 ops/s
Iteration  11: 212925.730 ops/s
Iteration  12: 202658.871 ops/s
Iteration  13: 220542.184 ops/s
Iteration  14: 205891.954 ops/s
Iteration  15: 204627.649 ops/s
Iteration  16: 215968.887 ops/s
Iteration  17: 213235.987 ops/s
Iteration  18: 207385.720 ops/s
Iteration  19: 215908.084 ops/s
Iteration  20: 205674.025 ops/s
Iteration  21: 214518.350 ops/s
Iteration  22: 210165.753 ops/s
Iteration  23: 207018.099 ops/s
Iteration  24: 210975.347 ops/s
Iteration  25: 206352.016 ops/s
Iteration  26: 204701.877 ops/s
Iteration  27: 211690.398 ops/s
Iteration  28: 205993.139 ops/s
Iteration  29: 213588.464 ops/s
Iteration  30: 178164.194 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorErrorObservable":
  209535.475 ±(99.9%) 5032.822 ops/s [Average]
  (min, avg, max) = (178164.194, 209535.475, 220542.184), stdev = 7532.892
  CI (99.9%): [204502.653, 214568.297] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableFirstTest._Benchmark.benchmark_firstOrErrorErrorObservable  thrpt   30  209535.475 ± 5032.822  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 171830.967 ops/s
# Warmup Iteration   2: 427489.917 ops/s
# Warmup Iteration   3: 460468.002 ops/s
# Warmup Iteration   4: 518748.693 ops/s
# Warmup Iteration   5: 503990.182 ops/s
# Warmup Iteration   6: 512401.750 ops/s
# Warmup Iteration   7: 526829.363 ops/s
# Warmup Iteration   8: 514732.135 ops/s
# Warmup Iteration   9: 504670.868 ops/s
# Warmup Iteration  10: 492449.774 ops/s
# Warmup Iteration  11: 530110.615 ops/s
# Warmup Iteration  12: 506490.641 ops/s
# Warmup Iteration  13: 524544.138 ops/s
# Warmup Iteration  14: 513131.833 ops/s
# Warmup Iteration  15: 522761.372 ops/s
# Warmup Iteration  16: 496851.958 ops/s
# Warmup Iteration  17: 530641.359 ops/s
# Warmup Iteration  18: 532802.844 ops/s
# Warmup Iteration  19: 521928.498 ops/s
# Warmup Iteration  20: 557708.328 ops/s
# Warmup Iteration  21: 523934.960 ops/s
# Warmup Iteration  22: 532373.351 ops/s
# Warmup Iteration  23: 546713.858 ops/s
# Warmup Iteration  24: 519553.511 ops/s
# Warmup Iteration  25: 539142.026 ops/s
# Warmup Iteration  26: 526103.256 ops/s
# Warmup Iteration  27: 541258.687 ops/s
# Warmup Iteration  28: 534577.474 ops/s
# Warmup Iteration  29: 516173.379 ops/s
# Warmup Iteration  30: 544590.686 ops/s
Iteration   1: 538914.901 ops/s
Iteration   2: 516589.826 ops/s
Iteration   3: 550108.192 ops/s
Iteration   4: 522054.165 ops/s
Iteration   5: 551699.846 ops/s
Iteration   6: 489026.418 ops/s
Iteration   7: 522828.036 ops/s
Iteration   8: 552426.728 ops/s
Iteration   9: 521788.129 ops/s
Iteration  10: 543581.544 ops/s
Iteration  11: 545684.177 ops/s
Iteration  12: 527920.295 ops/s
Iteration  13: 551683.694 ops/s
Iteration  14: 536717.864 ops/s
Iteration  15: 526132.262 ops/s
Iteration  16: 530774.993 ops/s
Iteration  17: 546637.049 ops/s
Iteration  18: 518584.054 ops/s
Iteration  19: 556066.177 ops/s
Iteration  20: 521966.188 ops/s
Iteration  21: 536254.740 ops/s
Iteration  22: 512197.888 ops/s
Iteration  23: 546320.475 ops/s
Iteration  24: 527427.607 ops/s
Iteration  25: 538029.899 ops/s
Iteration  26: 519755.249 ops/s
Iteration  27: 530577.642 ops/s
Iteration  28: 539056.530 ops/s
Iteration  29: 528483.913 ops/s
Iteration  30: 552570.922 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe":
  533395.313 ±(99.9%) 10126.192 ops/s [Average]
  (min, avg, max) = (489026.418, 533395.313, 556066.177), stdev = 15156.409
  CI (99.9%): [523269.121, 543521.505] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  533395.313 ± 10126.192  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapDelayErrorEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapDelayErrorEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23560208.014 ops/s
# Warmup Iteration   2: 39744739.066 ops/s
# Warmup Iteration   3: 55203711.461 ops/s
# Warmup Iteration   4: 54320438.944 ops/s
# Warmup Iteration   5: 58097464.746 ops/s
# Warmup Iteration   6: 56706701.735 ops/s
# Warmup Iteration   7: 54307731.202 ops/s
# Warmup Iteration   8: 53626247.272 ops/s
# Warmup Iteration   9: 54845493.331 ops/s
# Warmup Iteration  10: 52136111.704 ops/s
# Warmup Iteration  11: 52529697.997 ops/s
# Warmup Iteration  12: 57695651.090 ops/s
# Warmup Iteration  13: 54693156.437 ops/s
# Warmup Iteration  14: 56172431.251 ops/s
# Warmup Iteration  15: 54833335.309 ops/s
# Warmup Iteration  16: 55835509.693 ops/s
# Warmup Iteration  17: 55138642.177 ops/s
# Warmup Iteration  18: 54692278.877 ops/s
# Warmup Iteration  19: 55790679.202 ops/s
# Warmup Iteration  20: 54805342.167 ops/s
# Warmup Iteration  21: 58380446.525 ops/s
# Warmup Iteration  22: 56690221.820 ops/s
# Warmup Iteration  23: 54047236.602 ops/s
# Warmup Iteration  24: 55446819.709 ops/s
# Warmup Iteration  25: 55403730.280 ops/s
# Warmup Iteration  26: 54301141.822 ops/s
# Warmup Iteration  27: 55662495.033 ops/s
# Warmup Iteration  28: 55687365.652 ops/s
# Warmup Iteration  29: 55978283.251 ops/s
# Warmup Iteration  30: 53740347.663 ops/s
Iteration   1: 56788367.118 ops/s
Iteration   2: 55047023.643 ops/s
Iteration   3: 55467575.889 ops/s
Iteration   4: 55529522.181 ops/s
Iteration   5: 54089170.219 ops/s
Iteration   6: 56715347.303 ops/s
Iteration   7: 56494756.505 ops/s
Iteration   8: 53558853.876 ops/s
Iteration   9: 56824936.811 ops/s
Iteration  10: 53927874.555 ops/s
Iteration  11: 56426768.560 ops/s
Iteration  12: 56083319.053 ops/s
Iteration  13: 55988651.647 ops/s
Iteration  14: 54105781.164 ops/s
Iteration  15: 54422382.187 ops/s
Iteration  16: 57818842.789 ops/s
Iteration  17: 54269990.312 ops/s
Iteration  18: 57185275.835 ops/s
Iteration  19: 54156050.227 ops/s
Iteration  20: 56858300.904 ops/s
Iteration  21: 57048671.763 ops/s
Iteration  22: 54588197.316 ops/s
Iteration  23: 55606222.243 ops/s
Iteration  24: 54869125.656 ops/s
Iteration  25: 40715884.588 ops/s
Iteration  26: 56065824.564 ops/s
Iteration  27: 54382276.948 ops/s
Iteration  28: 55939815.572 ops/s
Iteration  29: 54504346.791 ops/s
Iteration  30: 54493846.606 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapDelayErrorEmptySource":
  54999100.094 ±(99.9%) 1964360.612 ops/s [Average]
  (min, avg, max) = (40715884.588, 54999100.094, 57818842.789), stdev = 2940162.711
  CI (99.9%): [53034739.482, 56963460.706] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score         Error  Units
ObservableConcatTest._Benchmark.benchmark_concatMapDelayErrorEmptySource  thrpt   30  54999100.094 ± 1964360.612  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_errorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_errorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 110517.890 ops/s
# Warmup Iteration   2: 406113.293 ops/s
# Warmup Iteration   3: 462362.521 ops/s
# Warmup Iteration   4: 467754.220 ops/s
# Warmup Iteration   5: 537205.666 ops/s
# Warmup Iteration   6: 507409.886 ops/s
# Warmup Iteration   7: 508803.196 ops/s
# Warmup Iteration   8: 532762.819 ops/s
# Warmup Iteration   9: 510789.301 ops/s
# Warmup Iteration  10: 538011.254 ops/s
# Warmup Iteration  11: 540107.312 ops/s
# Warmup Iteration  12: 520891.430 ops/s
# Warmup Iteration  13: 531389.435 ops/s
# Warmup Iteration  14: 526068.641 ops/s
# Warmup Iteration  15: 541202.557 ops/s
# Warmup Iteration  16: 529279.598 ops/s
# Warmup Iteration  17: 557272.701 ops/s
# Warmup Iteration  18: 555630.559 ops/s
# Warmup Iteration  19: 539489.276 ops/s
# Warmup Iteration  20: 567537.602 ops/s
# Warmup Iteration  21: 533704.248 ops/s
# Warmup Iteration  22: 551557.365 ops/s
# Warmup Iteration  23: 538500.347 ops/s
# Warmup Iteration  24: 551329.671 ops/s
# Warmup Iteration  25: 559210.735 ops/s
# Warmup Iteration  26: 540887.165 ops/s
# Warmup Iteration  27: 549563.061 ops/s
# Warmup Iteration  28: 532310.500 ops/s
# Warmup Iteration  29: 551090.560 ops/s
# Warmup Iteration  30: 519857.946 ops/s
Iteration   1: 547149.948 ops/s
Iteration   2: 544653.498 ops/s
Iteration   3: 537648.491 ops/s
Iteration   4: 563119.622 ops/s
Iteration   5: 547392.746 ops/s
Iteration   6: 536832.745 ops/s
Iteration   7: 558726.146 ops/s
Iteration   8: 548106.529 ops/s
Iteration   9: 538076.239 ops/s
Iteration  10: 570723.509 ops/s
Iteration  11: 549617.650 ops/s
Iteration  12: 558981.730 ops/s
Iteration  13: 561463.410 ops/s
Iteration  14: 576448.747 ops/s
Iteration  15: 532181.652 ops/s
Iteration  16: 542100.978 ops/s
Iteration  17: 564110.635 ops/s
Iteration  18: 541187.729 ops/s
Iteration  19: 551120.953 ops/s
Iteration  20: 580241.168 ops/s
Iteration  21: 528689.044 ops/s
Iteration  22: 560565.790 ops/s
Iteration  23: 536881.592 ops/s
Iteration  24: 576342.823 ops/s
Iteration  25: 543288.792 ops/s
Iteration  26: 525281.235 ops/s
Iteration  27: 558374.552 ops/s
Iteration  28: 540231.039 ops/s
Iteration  29: 555039.344 ops/s
Iteration  30: 548138.403 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_errorDelayed":
  550757.225 ±(99.9%) 9563.710 ops/s [Average]
  (min, avg, max) = (525281.235, 550757.225, 580241.168), stdev = 14314.511
  CI (99.9%): [541193.515, 560320.934] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_errorDelayed  thrpt   30  550757.225 ± 9563.710  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_fusedClearIsEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_fusedClearIsEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3534868.945 ops/s
# Warmup Iteration   2: 8209166.695 ops/s
# Warmup Iteration   3: 10771927.173 ops/s
# Warmup Iteration   4: 11174897.878 ops/s
# Warmup Iteration   5: 11676059.969 ops/s
# Warmup Iteration   6: 11762177.010 ops/s
# Warmup Iteration   7: 11092667.042 ops/s
# Warmup Iteration   8: 11576352.266 ops/s
# Warmup Iteration   9: 11037096.442 ops/s
# Warmup Iteration  10: 11592069.252 ops/s
# Warmup Iteration  11: 11520088.289 ops/s
# Warmup Iteration  12: 11133267.412 ops/s
# Warmup Iteration  13: 11216494.442 ops/s
# Warmup Iteration  14: 11432750.564 ops/s
# Warmup Iteration  15: 11218852.673 ops/s
# Warmup Iteration  16: 11573806.246 ops/s
# Warmup Iteration  17: 11340700.240 ops/s
# Warmup Iteration  18: 11015540.172 ops/s
# Warmup Iteration  19: 11612282.997 ops/s
# Warmup Iteration  20: 11023731.583 ops/s
# Warmup Iteration  21: 11574233.909 ops/s
# Warmup Iteration  22: 11667588.634 ops/s
# Warmup Iteration  23: 11534016.763 ops/s
# Warmup Iteration  24: 11008074.474 ops/s
# Warmup Iteration  25: 11477607.429 ops/s
# Warmup Iteration  26: 11147294.557 ops/s
# Warmup Iteration  27: 11497780.005 ops/s
# Warmup Iteration  28: 11493274.923 ops/s
# Warmup Iteration  29: 11115039.070 ops/s
# Warmup Iteration  30: 11611524.993 ops/s
Iteration   1: 11230130.486 ops/s
Iteration   2: 11271717.459 ops/s
Iteration   3: 11461113.235 ops/s
Iteration   4: 11031169.092 ops/s
Iteration   5: 11308097.869 ops/s
Iteration   6: 11373968.552 ops/s
Iteration   7: 11276957.536 ops/s
Iteration   8: 11926794.187 ops/s
Iteration   9: 10954241.859 ops/s
Iteration  10: 11478467.119 ops/s
Iteration  11: 11040593.444 ops/s
Iteration  12: 11774510.449 ops/s
Iteration  13: 10884288.090 ops/s
Iteration  14: 11240881.975 ops/s
Iteration  15: 11618008.241 ops/s
Iteration  16: 11526527.052 ops/s
Iteration  17: 10919888.463 ops/s
Iteration  18: 11520329.595 ops/s
Iteration  19: 11308576.941 ops/s
Iteration  20: 9525923.096 ops/s
Iteration  21: 11096070.917 ops/s
Iteration  22: 11233552.691 ops/s
Iteration  23: 11910015.872 ops/s
Iteration  24: 11035747.884 ops/s
Iteration  25: 11717088.769 ops/s
Iteration  26: 11196715.069 ops/s
Iteration  27: 11376215.622 ops/s
Iteration  28: 10994324.724 ops/s
Iteration  29: 11183463.417 ops/s
Iteration  30: 11689665.582 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_fusedClearIsEmpty":
  11270168.176 ±(99.9%) 291658.223 ops/s [Average]
  (min, avg, max) = (9525923.096, 11270168.176, 11926794.187), stdev = 436540.331
  CI (99.9%): [10978509.953, 11561826.399] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ObservableRangeLongTest._Benchmark.benchmark_fusedClearIsEmpty  thrpt   30  11270168.176 ± 291658.223  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedInnerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedInnerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27410.772 ops/s
# Warmup Iteration   2: 314762.083 ops/s
# Warmup Iteration   3: 358844.048 ops/s
# Warmup Iteration   4: 327433.236 ops/s
# Warmup Iteration   5: 328678.646 ops/s
# Warmup Iteration   6: 371139.978 ops/s
# Warmup Iteration   7: 374029.572 ops/s
# Warmup Iteration   8: 383311.555 ops/s
# Warmup Iteration   9: 368839.805 ops/s
# Warmup Iteration  10: 389781.811 ops/s
# Warmup Iteration  11: 382990.609 ops/s
# Warmup Iteration  12: 370254.226 ops/s
# Warmup Iteration  13: 388434.451 ops/s
# Warmup Iteration  14: 385270.553 ops/s
# Warmup Iteration  15: 374542.660 ops/s
# Warmup Iteration  16: 386937.122 ops/s
# Warmup Iteration  17: 377588.139 ops/s
# Warmup Iteration  18: 393307.849 ops/s
# Warmup Iteration  19: 383817.685 ops/s
# Warmup Iteration  20: 383856.492 ops/s
# Warmup Iteration  21: 382516.877 ops/s
# Warmup Iteration  22: 390695.615 ops/s
# Warmup Iteration  23: 405173.611 ops/s
# Warmup Iteration  24: 375011.126 ops/s
# Warmup Iteration  25: 401580.114 ops/s
# Warmup Iteration  26: 386250.164 ops/s
# Warmup Iteration  27: 382744.707 ops/s
# Warmup Iteration  28: 389526.073 ops/s
# Warmup Iteration  29: 384519.741 ops/s
# Warmup Iteration  30: 388678.849 ops/s
Iteration   1: 390615.375 ops/s
Iteration   2: 392742.121 ops/s
Iteration   3: 381220.938 ops/s
Iteration   4: 383695.568 ops/s
Iteration   5: 395980.114 ops/s
Iteration   6: 382758.896 ops/s
Iteration   7: 403513.625 ops/s
Iteration   8: 380494.703 ops/s
Iteration   9: 389768.018 ops/s
Iteration  10: 383763.625 ops/s
Iteration  11: 383634.114 ops/s
Iteration  12: 391000.125 ops/s
Iteration  13: 389686.552 ops/s
Iteration  14: 394156.316 ops/s
Iteration  15: 380482.614 ops/s
Iteration  16: 392569.888 ops/s
Iteration  17: 385303.506 ops/s
Iteration  18: 382557.397 ops/s
Iteration  19: 396878.557 ops/s
Iteration  20: 382396.065 ops/s
Iteration  21: 392071.998 ops/s
Iteration  22: 404739.170 ops/s
Iteration  23: 373374.369 ops/s
Iteration  24: 398471.977 ops/s
Iteration  25: 379043.865 ops/s
Iteration  26: 404954.781 ops/s
Iteration  27: 382026.378 ops/s
Iteration  28: 389209.750 ops/s
Iteration  29: 377138.164 ops/s
Iteration  30: 389632.597 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedInnerThrows":
  388462.706 ±(99.9%) 5458.547 ops/s [Average]
  (min, avg, max) = (373374.369, 388462.706, 404954.781), stdev = 8170.097
  CI (99.9%): [383004.158, 393921.253] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_fusedInnerThrows  thrpt   30  388462.706 ± 5458.547  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_delayErrorSimpleComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_delayErrorSimpleComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41701.210 ops/s
# Warmup Iteration   2: 232123.864 ops/s
# Warmup Iteration   3: 519298.307 ops/s
# Warmup Iteration   4: 869237.193 ops/s
# Warmup Iteration   5: 866746.777 ops/s
# Warmup Iteration   6: 847687.809 ops/s
# Warmup Iteration   7: 796452.724 ops/s
# Warmup Iteration   8: 839700.427 ops/s
# Warmup Iteration   9: 896601.366 ops/s
# Warmup Iteration  10: 911897.590 ops/s
# Warmup Iteration  11: 864229.772 ops/s
# Warmup Iteration  12: 932445.226 ops/s
# Warmup Iteration  13: 855075.243 ops/s
# Warmup Iteration  14: 933166.289 ops/s
# Warmup Iteration  15: 885573.964 ops/s
# Warmup Iteration  16: 890922.236 ops/s
# Warmup Iteration  17: 923403.306 ops/s
# Warmup Iteration  18: 858651.695 ops/s
# Warmup Iteration  19: 919662.212 ops/s
# Warmup Iteration  20: 874694.046 ops/s
# Warmup Iteration  21: 899309.849 ops/s
# Warmup Iteration  22: 888476.399 ops/s
# Warmup Iteration  23: 866788.822 ops/s
# Warmup Iteration  24: 908056.191 ops/s
# Warmup Iteration  25: 930431.106 ops/s
# Warmup Iteration  26: 856904.699 ops/s
# Warmup Iteration  27: 913832.623 ops/s
# Warmup Iteration  28: 889748.148 ops/s
# Warmup Iteration  29: 915902.405 ops/s
# Warmup Iteration  30: 907641.917 ops/s
Iteration   1: 863898.935 ops/s
Iteration   2: 923291.495 ops/s
Iteration   3: 869387.663 ops/s
Iteration   4: 880458.868 ops/s
Iteration   5: 902639.081 ops/s
Iteration   6: 873416.870 ops/s
Iteration   7: 930152.714 ops/s
Iteration   8: 875209.260 ops/s
Iteration   9: 899296.847 ops/s
Iteration  10: 890413.741 ops/s
Iteration  11: 883304.135 ops/s
Iteration  12: 925173.374 ops/s
Iteration  13: 871265.274 ops/s
Iteration  14: 871281.340 ops/s
Iteration  15: 708823.242 ops/s
Iteration  16: 864245.594 ops/s
Iteration  17: 912907.278 ops/s
Iteration  18: 861772.060 ops/s
Iteration  19: 920364.626 ops/s
Iteration  20: 856076.054 ops/s
Iteration  21: 873306.345 ops/s
Iteration  22: 939755.873 ops/s
Iteration  23: 917670.222 ops/s
Iteration  24: 881758.546 ops/s
Iteration  25: 926720.476 ops/s
Iteration  26: 877705.264 ops/s
Iteration  27: 905196.638 ops/s
Iteration  28: 885318.364 ops/s
Iteration  29: 882494.863 ops/s
Iteration  30: 883322.518 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_delayErrorSimpleComplete":
  885220.919 ±(99.9%) 27260.531 ops/s [Average]
  (min, avg, max) = (708823.242, 885220.919, 939755.873), stdev = 40802.283
  CI (99.9%): [857960.388, 912481.450] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableGroupByTest._Benchmark.benchmark_delayErrorSimpleComplete  thrpt   30  885220.919 ± 27260.531  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1171441.278 ops/s
# Warmup Iteration   2: 4577019.629 ops/s
# Warmup Iteration   3: 6333798.137 ops/s
# Warmup Iteration   4: 6745284.872 ops/s
# Warmup Iteration   5: 6987229.102 ops/s
# Warmup Iteration   6: 7016883.123 ops/s
# Warmup Iteration   7: 6874985.315 ops/s
# Warmup Iteration   8: 6752860.478 ops/s
# Warmup Iteration   9: 6742599.641 ops/s
# Warmup Iteration  10: 7057929.906 ops/s
# Warmup Iteration  11: 6865168.884 ops/s
# Warmup Iteration  12: 7113601.483 ops/s
# Warmup Iteration  13: 6756405.074 ops/s
# Warmup Iteration  14: 7016993.975 ops/s
# Warmup Iteration  15: 7051140.980 ops/s
# Warmup Iteration  16: 6885854.489 ops/s
# Warmup Iteration  17: 6795440.917 ops/s
# Warmup Iteration  18: 6964053.129 ops/s
# Warmup Iteration  19: 6783054.869 ops/s
# Warmup Iteration  20: 6940376.024 ops/s
# Warmup Iteration  21: 6885810.118 ops/s
# Warmup Iteration  22: 6890350.854 ops/s
# Warmup Iteration  23: 6899836.161 ops/s
# Warmup Iteration  24: 6639540.569 ops/s
# Warmup Iteration  25: 7308538.278 ops/s
# Warmup Iteration  26: 6784765.365 ops/s
# Warmup Iteration  27: 6947616.934 ops/s
# Warmup Iteration  28: 6813336.552 ops/s
# Warmup Iteration  29: 7065382.062 ops/s
# Warmup Iteration  30: 7032089.654 ops/s
Iteration   1: 6781883.077 ops/s
Iteration   2: 7026072.217 ops/s
Iteration   3: 6594459.567 ops/s
Iteration   4: 6891346.180 ops/s
Iteration   5: 7202813.395 ops/s
Iteration   6: 6797025.654 ops/s
Iteration   7: 6992072.627 ops/s
Iteration   8: 6931339.061 ops/s
Iteration   9: 6972818.170 ops/s
Iteration  10: 6777735.773 ops/s
Iteration  11: 7164408.303 ops/s
Iteration  12: 6620546.403 ops/s
Iteration  13: 7249981.837 ops/s
Iteration  14: 7135822.573 ops/s
Iteration  15: 6926320.399 ops/s
Iteration  16: 6831795.337 ops/s
Iteration  17: 7041722.204 ops/s
Iteration  18: 7086650.963 ops/s
Iteration  19: 7266190.146 ops/s
Iteration  20: 6896615.875 ops/s
Iteration  21: 6956898.408 ops/s
Iteration  22: 6994006.755 ops/s
Iteration  23: 7035692.071 ops/s
Iteration  24: 6874719.813 ops/s
Iteration  25: 7040728.076 ops/s
Iteration  26: 6857427.527 ops/s
Iteration  27: 6719523.099 ops/s
Iteration  28: 7130080.422 ops/s
Iteration  29: 6976565.303 ops/s
Iteration  30: 7015620.666 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustSource":
  6959629.397 ±(99.9%) 112795.818 ops/s [Average]
  (min, avg, max) = (6594459.567, 6959629.397, 7266190.146), stdev = 168827.483
  CI (99.9%): [6846833.579, 7072425.215] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
ObservableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustSource  thrpt   30  6959629.397 ± 112795.818  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_nullKeyDisposeGroup$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_nullKeyDisposeGroup

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 57337.570 ops/s
# Warmup Iteration   2: 304058.964 ops/s
# Warmup Iteration   3: 611560.124 ops/s
# Warmup Iteration   4: 941444.801 ops/s
# Warmup Iteration   5: 935381.694 ops/s
# Warmup Iteration   6: 908048.382 ops/s
# Warmup Iteration   7: 913379.326 ops/s
# Warmup Iteration   8: 1023565.526 ops/s
# Warmup Iteration   9: 967013.860 ops/s
# Warmup Iteration  10: 992320.678 ops/s
# Warmup Iteration  11: 987367.439 ops/s
# Warmup Iteration  12: 989132.845 ops/s
# Warmup Iteration  13: 997471.006 ops/s
# Warmup Iteration  14: 1030301.868 ops/s
# Warmup Iteration  15: 983605.267 ops/s
# Warmup Iteration  16: 997030.054 ops/s
# Warmup Iteration  17: 1039264.587 ops/s
# Warmup Iteration  18: 979665.263 ops/s
# Warmup Iteration  19: 1031969.259 ops/s
# Warmup Iteration  20: 994521.487 ops/s
# Warmup Iteration  21: 999293.706 ops/s
# Warmup Iteration  22: 1013548.547 ops/s
# Warmup Iteration  23: 1005531.035 ops/s
# Warmup Iteration  24: 997923.222 ops/s
# Warmup Iteration  25: 969379.211 ops/s
# Warmup Iteration  26: 1019656.266 ops/s
# Warmup Iteration  27: 985367.341 ops/s
# Warmup Iteration  28: 1022694.989 ops/s
# Warmup Iteration  29: 978517.956 ops/s
# Warmup Iteration  30: 1058814.861 ops/s
Iteration   1: 1035647.939 ops/s
Iteration   2: 994457.980 ops/s
Iteration   3: 996020.843 ops/s
Iteration   4: 992905.996 ops/s
Iteration   5: 955941.774 ops/s
Iteration   6: 997625.727 ops/s
Iteration   7: 994656.145 ops/s
Iteration   8: 956788.349 ops/s
Iteration   9: 822988.055 ops/s
Iteration  10: 947426.711 ops/s
Iteration  11: 957593.796 ops/s
Iteration  12: 1012046.324 ops/s
Iteration  13: 1011994.638 ops/s
Iteration  14: 984573.524 ops/s
Iteration  15: 1014019.297 ops/s
Iteration  16: 968267.916 ops/s
Iteration  17: 1030892.232 ops/s
Iteration  18: 950681.028 ops/s
Iteration  19: 992837.370 ops/s
Iteration  20: 993290.155 ops/s
Iteration  21: 972126.182 ops/s
Iteration  22: 1022130.059 ops/s
Iteration  23: 978784.460 ops/s
Iteration  24: 968202.133 ops/s
Iteration  25: 981014.915 ops/s
Iteration  26: 981894.587 ops/s
Iteration  27: 969122.113 ops/s
Iteration  28: 977065.685 ops/s
Iteration  29: 1008406.660 ops/s
Iteration  30: 1000777.682 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_nullKeyDisposeGroup":
  982339.342 ±(99.9%) 25404.350 ops/s [Average]
  (min, avg, max) = (822988.055, 982339.342, 1035647.939), stdev = 38024.038
  CI (99.9%): [956934.993, 1007743.692] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ObservableGroupByTest._Benchmark.benchmark_nullKeyDisposeGroup  thrpt   30  982339.342 ± 25404.350  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarQueueTerminate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarQueueTerminate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 119458.858 ops/s
# Warmup Iteration   2: 456456.408 ops/s
# Warmup Iteration   3: 1262727.716 ops/s
# Warmup Iteration   4: 1643026.204 ops/s
# Warmup Iteration   5: 1699973.227 ops/s
# Warmup Iteration   6: 1715963.950 ops/s
# Warmup Iteration   7: 1679120.315 ops/s
# Warmup Iteration   8: 1676350.003 ops/s
# Warmup Iteration   9: 1628902.545 ops/s
# Warmup Iteration  10: 1681052.890 ops/s
# Warmup Iteration  11: 1677697.641 ops/s
# Warmup Iteration  12: 1637295.765 ops/s
# Warmup Iteration  13: 1628809.710 ops/s
# Warmup Iteration  14: 1753126.987 ops/s
# Warmup Iteration  15: 1642374.512 ops/s
# Warmup Iteration  16: 1737673.367 ops/s
# Warmup Iteration  17: 1652950.136 ops/s
# Warmup Iteration  18: 1718038.156 ops/s
# Warmup Iteration  19: 1662160.200 ops/s
# Warmup Iteration  20: 1664268.754 ops/s
# Warmup Iteration  21: 1725714.226 ops/s
# Warmup Iteration  22: 1682589.605 ops/s
# Warmup Iteration  23: 1676562.298 ops/s
# Warmup Iteration  24: 1674707.049 ops/s
# Warmup Iteration  25: 1669516.648 ops/s
# Warmup Iteration  26: 1747710.551 ops/s
# Warmup Iteration  27: 1634931.499 ops/s
# Warmup Iteration  28: 1752194.309 ops/s
# Warmup Iteration  29: 1644801.040 ops/s
# Warmup Iteration  30: 1743167.315 ops/s
Iteration   1: 1725401.053 ops/s
Iteration   2: 1675787.075 ops/s
Iteration   3: 1667916.844 ops/s
Iteration   4: 1728424.375 ops/s
Iteration   5: 1622812.563 ops/s
Iteration   6: 1729130.426 ops/s
Iteration   7: 1694205.884 ops/s
Iteration   8: 1718701.891 ops/s
Iteration   9: 1729383.451 ops/s
Iteration  10: 1640714.084 ops/s
Iteration  11: 1707321.611 ops/s
Iteration  12: 1666788.315 ops/s
Iteration  13: 1685377.800 ops/s
Iteration  14: 1723272.348 ops/s
Iteration  15: 1653868.662 ops/s
Iteration  16: 1656113.505 ops/s
Iteration  17: 1711859.690 ops/s
Iteration  18: 1664096.155 ops/s
Iteration  19: 1674618.434 ops/s
Iteration  20: 1721703.762 ops/s
Iteration  21: 1602403.839 ops/s
Iteration  22: 1705412.934 ops/s
Iteration  23: 1690580.497 ops/s
Iteration  24: 1683527.843 ops/s
Iteration  25: 1670082.737 ops/s
Iteration  26: 1666243.962 ops/s
Iteration  27: 1711449.187 ops/s
Iteration  28: 1694425.044 ops/s
Iteration  29: 1669767.500 ops/s
Iteration  30: 1715668.796 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarQueueTerminate":
  1686902.009 ±(99.9%) 21939.525 ops/s [Average]
  (min, avg, max) = (1602403.839, 1686902.009, 1729383.451), stdev = 32838.050
  CI (99.9%): [1664962.484, 1708841.534] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableFlatMapTest._Benchmark.benchmark_scalarQueueTerminate  thrpt   30  1686902.009 ± 21939.525  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_dispose2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_dispose2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 495230.647 ops/s
# Warmup Iteration   2: 1751254.144 ops/s
# Warmup Iteration   3: 2573245.072 ops/s
# Warmup Iteration   4: 2477323.298 ops/s
# Warmup Iteration   5: 2520411.038 ops/s
# Warmup Iteration   6: 2524031.382 ops/s
# Warmup Iteration   7: 2438649.930 ops/s
# Warmup Iteration   8: 2623681.692 ops/s
# Warmup Iteration   9: 2513116.987 ops/s
# Warmup Iteration  10: 2592904.924 ops/s
# Warmup Iteration  11: 2418036.037 ops/s
# Warmup Iteration  12: 2538328.357 ops/s
# Warmup Iteration  13: 2535455.223 ops/s
# Warmup Iteration  14: 2529265.187 ops/s
# Warmup Iteration  15: 2484494.480 ops/s
# Warmup Iteration  16: 2489510.934 ops/s
# Warmup Iteration  17: 2516470.414 ops/s
# Warmup Iteration  18: 2457588.016 ops/s
# Warmup Iteration  19: 2612018.355 ops/s
# Warmup Iteration  20: 2523750.425 ops/s
# Warmup Iteration  21: 2470768.770 ops/s
# Warmup Iteration  22: 2560755.946 ops/s
# Warmup Iteration  23: 2497617.529 ops/s
# Warmup Iteration  24: 2480529.137 ops/s
# Warmup Iteration  25: 2578931.533 ops/s
# Warmup Iteration  26: 2595901.808 ops/s
# Warmup Iteration  27: 2432541.628 ops/s
# Warmup Iteration  28: 2584385.239 ops/s
# Warmup Iteration  29: 2527138.055 ops/s
# Warmup Iteration  30: 2575507.406 ops/s
Iteration   1: 2604709.841 ops/s
Iteration   2: 2460109.783 ops/s
Iteration   3: 2613896.731 ops/s
Iteration   4: 2001562.702 ops/s
Iteration   5: 2563725.443 ops/s
Iteration   6: 2445096.294 ops/s
Iteration   7: 2548466.803 ops/s
Iteration   8: 2501881.614 ops/s
Iteration   9: 2567069.409 ops/s
Iteration  10: 2533932.046 ops/s
Iteration  11: 2480527.436 ops/s
Iteration  12: 2521024.873 ops/s
Iteration  13: 2565794.770 ops/s
Iteration  14: 2533141.584 ops/s
Iteration  15: 2456900.649 ops/s
Iteration  16: 2559421.034 ops/s
Iteration  17: 2526948.485 ops/s
Iteration  18: 2392999.462 ops/s
Iteration  19: 2639491.982 ops/s
Iteration  20: 2475253.799 ops/s
Iteration  21: 2560949.177 ops/s
Iteration  22: 2486187.399 ops/s
Iteration  23: 2534049.728 ops/s
Iteration  24: 2609974.965 ops/s
Iteration  25: 2423974.865 ops/s
Iteration  26: 2595554.966 ops/s
Iteration  27: 2516644.639 ops/s
Iteration  28: 2463976.263 ops/s
Iteration  29: 2570640.107 ops/s
Iteration  30: 2437349.875 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_dispose2":
  2506375.224 ±(99.9%) 75900.118 ops/s [Average]
  (min, avg, max) = (2001562.702, 2506375.224, 2639491.982), stdev = 113603.731
  CI (99.9%): [2430475.107, 2582275.342] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_dispose2  thrpt   30  2506375.224 ± 75900.118  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_disposedObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_disposedObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1034559.701 ops/s
# Warmup Iteration   2: 4624648.888 ops/s
# Warmup Iteration   3: 4996486.629 ops/s
# Warmup Iteration   4: 6012195.029 ops/s
# Warmup Iteration   5: 6151822.142 ops/s
# Warmup Iteration   6: 6048022.035 ops/s
# Warmup Iteration   7: 5987089.030 ops/s
# Warmup Iteration   8: 6130965.205 ops/s
# Warmup Iteration   9: 6251115.799 ops/s
# Warmup Iteration  10: 6202545.670 ops/s
# Warmup Iteration  11: 6268849.930 ops/s
# Warmup Iteration  12: 5718922.547 ops/s
# Warmup Iteration  13: 6210996.133 ops/s
# Warmup Iteration  14: 5958817.516 ops/s
# Warmup Iteration  15: 6133562.325 ops/s
# Warmup Iteration  16: 5884113.668 ops/s
# Warmup Iteration  17: 6041524.987 ops/s
# Warmup Iteration  18: 6157016.154 ops/s
# Warmup Iteration  19: 5896272.863 ops/s
# Warmup Iteration  20: 6252845.774 ops/s
# Warmup Iteration  21: 5942577.371 ops/s
# Warmup Iteration  22: 6100579.507 ops/s
# Warmup Iteration  23: 6156805.701 ops/s
# Warmup Iteration  24: 5951024.662 ops/s
# Warmup Iteration  25: 6177817.518 ops/s
# Warmup Iteration  26: 6019039.446 ops/s
# Warmup Iteration  27: 5860606.207 ops/s
# Warmup Iteration  28: 6261148.673 ops/s
# Warmup Iteration  29: 5798054.952 ops/s
# Warmup Iteration  30: 5973473.618 ops/s
Iteration   1: 5903571.897 ops/s
Iteration   2: 6017113.613 ops/s
Iteration   3: 6186446.862 ops/s
Iteration   4: 5873401.792 ops/s
Iteration   5: 5974762.771 ops/s
Iteration   6: 6271284.058 ops/s
Iteration   7: 5788639.085 ops/s
Iteration   8: 5979627.196 ops/s
Iteration   9: 5856627.423 ops/s
Iteration  10: 5969412.387 ops/s
Iteration  11: 5968838.433 ops/s
Iteration  12: 6044146.239 ops/s
Iteration  13: 6066098.526 ops/s
Iteration  14: 5890907.033 ops/s
Iteration  15: 6098164.000 ops/s
Iteration  16: 5986879.510 ops/s
Iteration  17: 5960278.687 ops/s
Iteration  18: 5984882.362 ops/s
Iteration  19: 5987717.920 ops/s
Iteration  20: 6119421.021 ops/s
Iteration  21: 5766851.495 ops/s
Iteration  22: 6011120.979 ops/s
Iteration  23: 5941448.104 ops/s
Iteration  24: 6066220.837 ops/s
Iteration  25: 6062824.071 ops/s
Iteration  26: 5903745.837 ops/s
Iteration  27: 6186402.263 ops/s
Iteration  28: 5803792.785 ops/s
Iteration  29: 6184459.161 ops/s
Iteration  30: 5810061.519 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_disposedObservable":
  5988838.262 ±(99.9%) 84284.568 ops/s [Average]
  (min, avg, max) = (5766851.495, 5988838.262, 6271284.058), stdev = 126153.183
  CI (99.9%): [5904553.694, 6073122.830] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_disposedObservable  thrpt   30  5988838.262 ± 84284.568  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_issue1451Case1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_issue1451Case1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.837 ops/s
# Warmup Iteration   2: 16042.981 ops/s
# Warmup Iteration   3: 72048.020 ops/s
# Warmup Iteration   4: 173275.051 ops/s
# Warmup Iteration   5: 280087.426 ops/s
# Warmup Iteration   6: 419674.366 ops/s
# Warmup Iteration   7: 392663.346 ops/s
# Warmup Iteration   8: 491427.374 ops/s
# Warmup Iteration   9: 465130.411 ops/s
# Warmup Iteration  10: 496012.417 ops/s
# Warmup Iteration  11: 484618.028 ops/s
# Warmup Iteration  12: 463681.776 ops/s
# Warmup Iteration  13: 499778.903 ops/s
# Warmup Iteration  14: 460356.956 ops/s
# Warmup Iteration  15: 481250.230 ops/s
# Warmup Iteration  16: 470026.647 ops/s
# Warmup Iteration  17: 468788.584 ops/s
# Warmup Iteration  18: 493526.565 ops/s
# Warmup Iteration  19: 469958.332 ops/s
# Warmup Iteration  20: 478540.646 ops/s
# Warmup Iteration  21: 453257.767 ops/s
# Warmup Iteration  22: 472005.514 ops/s
# Warmup Iteration  23: 490949.512 ops/s
# Warmup Iteration  24: 472853.181 ops/s
# Warmup Iteration  25: 462458.330 ops/s
# Warmup Iteration  26: 484870.007 ops/s
# Warmup Iteration  27: 476259.361 ops/s
# Warmup Iteration  28: 466538.300 ops/s
# Warmup Iteration  29: 390418.208 ops/s
# Warmup Iteration  30: 462682.754 ops/s
Iteration   1: 488328.962 ops/s
Iteration   2: 479457.206 ops/s
Iteration   3: 484657.137 ops/s
Iteration   4: 470235.814 ops/s
Iteration   5: 475879.032 ops/s
Iteration   6: 492081.144 ops/s
Iteration   7: 468735.263 ops/s
Iteration   8: 488906.993 ops/s
Iteration   9: 464969.695 ops/s
Iteration  10: 474088.199 ops/s
Iteration  11: 482142.406 ops/s
Iteration  12: 466130.445 ops/s
Iteration  13: 469413.852 ops/s
Iteration  14: 463142.982 ops/s
Iteration  15: 484682.548 ops/s
Iteration  16: 475335.566 ops/s
Iteration  17: 474423.847 ops/s
Iteration  18: 488518.338 ops/s
Iteration  19: 470107.023 ops/s
Iteration  20: 483203.521 ops/s
Iteration  21: 477026.457 ops/s
Iteration  22: 490341.459 ops/s
Iteration  23: 476761.088 ops/s
Iteration  24: 492982.262 ops/s
Iteration  25: 457549.616 ops/s
Iteration  26: 492207.108 ops/s
Iteration  27: 481478.087 ops/s
Iteration  28: 469842.639 ops/s
Iteration  29: 488567.402 ops/s
Iteration  30: 470078.745 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_issue1451Case1":
  478042.495 ±(99.9%) 6536.090 ops/s [Average]
  (min, avg, max) = (457549.616, 478042.495, 492982.262), stdev = 9782.912
  CI (99.9%): [471506.405, 484578.584] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ObservableDoOnEachTest._Benchmark.benchmark_issue1451Case1  thrpt   30  478042.495 ± 6536.090  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarInnerJustDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarInnerJustDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 262131.415 ops/s
# Warmup Iteration   2: 1309595.521 ops/s
# Warmup Iteration   3: 1881888.491 ops/s
# Warmup Iteration   4: 2109561.415 ops/s
# Warmup Iteration   5: 2270723.749 ops/s
# Warmup Iteration   6: 2133468.395 ops/s
# Warmup Iteration   7: 2253998.939 ops/s
# Warmup Iteration   8: 2089425.172 ops/s
# Warmup Iteration   9: 2222829.175 ops/s
# Warmup Iteration  10: 2128167.203 ops/s
# Warmup Iteration  11: 2134938.259 ops/s
# Warmup Iteration  12: 2226157.355 ops/s
# Warmup Iteration  13: 2132920.606 ops/s
# Warmup Iteration  14: 2283320.638 ops/s
# Warmup Iteration  15: 2106158.479 ops/s
# Warmup Iteration  16: 2151830.885 ops/s
# Warmup Iteration  17: 2166408.816 ops/s
# Warmup Iteration  18: 2122896.645 ops/s
# Warmup Iteration  19: 2228067.799 ops/s
# Warmup Iteration  20: 2093970.772 ops/s
# Warmup Iteration  21: 2264950.041 ops/s
# Warmup Iteration  22: 2132755.218 ops/s
# Warmup Iteration  23: 2145128.823 ops/s
# Warmup Iteration  24: 2145009.096 ops/s
# Warmup Iteration  25: 2198155.233 ops/s
# Warmup Iteration  26: 2145688.176 ops/s
# Warmup Iteration  27: 2208609.243 ops/s
# Warmup Iteration  28: 2230024.961 ops/s
# Warmup Iteration  29: 2104384.575 ops/s
# Warmup Iteration  30: 2255354.780 ops/s
Iteration   1: 2151232.362 ops/s
Iteration   2: 2137040.158 ops/s
Iteration   3: 2149492.519 ops/s
Iteration   4: 2149278.124 ops/s
Iteration   5: 2100033.718 ops/s
Iteration   6: 2204995.534 ops/s
Iteration   7: 2207982.211 ops/s
Iteration   8: 2079541.635 ops/s
Iteration   9: 2193180.904 ops/s
Iteration  10: 2063937.300 ops/s
Iteration  11: 2216782.899 ops/s
Iteration  12: 2114717.543 ops/s
Iteration  13: 2170688.547 ops/s
Iteration  14: 2192131.021 ops/s
Iteration  15: 2155572.750 ops/s
Iteration  16: 2158800.002 ops/s
Iteration  17: 2227539.230 ops/s
Iteration  18: 2135195.935 ops/s
Iteration  19: 2203497.877 ops/s
Iteration  20: 2170812.749 ops/s
Iteration  21: 2180196.979 ops/s
Iteration  22: 2151498.423 ops/s
Iteration  23: 2220711.452 ops/s
Iteration  24: 2175018.881 ops/s
Iteration  25: 2216309.155 ops/s
Iteration  26: 2186826.366 ops/s
Iteration  27: 2213017.254 ops/s
Iteration  28: 2150537.858 ops/s
Iteration  29: 2167465.818 ops/s
Iteration  30: 2220618.147 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarInnerJustDelayError":
  2168821.778 ±(99.9%) 28226.190 ops/s [Average]
  (min, avg, max) = (2063937.300, 2168821.778, 2227539.230), stdev = 42247.636
  CI (99.9%): [2140595.588, 2197047.969] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_scalarInnerJustDelayError  thrpt   30  2168821.778 ± 28226.190  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 353020.343 ops/s
# Warmup Iteration   2: 1824364.496 ops/s
# Warmup Iteration   3: 2190330.540 ops/s
# Warmup Iteration   4: 2532251.221 ops/s
# Warmup Iteration   5: 2609407.633 ops/s
# Warmup Iteration   6: 2600580.763 ops/s
# Warmup Iteration   7: 2514118.753 ops/s
# Warmup Iteration   8: 2717348.251 ops/s
# Warmup Iteration   9: 2669039.091 ops/s
# Warmup Iteration  10: 2485935.431 ops/s
# Warmup Iteration  11: 2649231.383 ops/s
# Warmup Iteration  12: 2623259.925 ops/s
# Warmup Iteration  13: 2502159.904 ops/s
# Warmup Iteration  14: 2555569.842 ops/s
# Warmup Iteration  15: 2640777.023 ops/s
# Warmup Iteration  16: 2578956.961 ops/s
# Warmup Iteration  17: 2521204.737 ops/s
# Warmup Iteration  18: 2681205.865 ops/s
# Warmup Iteration  19: 2470132.391 ops/s
# Warmup Iteration  20: 2492855.829 ops/s
# Warmup Iteration  21: 2597752.953 ops/s
# Warmup Iteration  22: 2558433.539 ops/s
# Warmup Iteration  23: 2117757.841 ops/s
# Warmup Iteration  24: 2532454.383 ops/s
# Warmup Iteration  25: 2542180.119 ops/s
# Warmup Iteration  26: 2623893.523 ops/s
# Warmup Iteration  27: 2597369.116 ops/s
# Warmup Iteration  28: 2611542.946 ops/s
# Warmup Iteration  29: 2589040.064 ops/s
# Warmup Iteration  30: 2534152.628 ops/s
Iteration   1: 2628864.074 ops/s
Iteration   2: 2481527.917 ops/s
Iteration   3: 2692932.932 ops/s
Iteration   4: 2525636.216 ops/s
Iteration   5: 2607300.001 ops/s
Iteration   6: 2590774.635 ops/s
Iteration   7: 2531906.070 ops/s
Iteration   8: 2658317.431 ops/s
Iteration   9: 2500616.217 ops/s
Iteration  10: 2570573.020 ops/s
Iteration  11: 2610855.389 ops/s
Iteration  12: 2553034.424 ops/s
Iteration  13: 2525886.851 ops/s
Iteration  14: 2576915.504 ops/s
Iteration  15: 2553462.261 ops/s
Iteration  16: 2549523.395 ops/s
Iteration  17: 2603838.801 ops/s
Iteration  18: 2631580.737 ops/s
Iteration  19: 2532408.790 ops/s
Iteration  20: 2638429.425 ops/s
Iteration  21: 2546741.524 ops/s
Iteration  22: 2487776.533 ops/s
Iteration  23: 2644048.659 ops/s
Iteration  24: 2546292.919 ops/s
Iteration  25: 2568390.871 ops/s
Iteration  26: 2576916.841 ops/s
Iteration  27: 2584785.113 ops/s
Iteration  28: 2638922.834 ops/s
Iteration  29: 2645478.900 ops/s
Iteration  30: 2477809.645 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_dispose":
  2576051.598 ±(99.9%) 37508.337 ops/s [Average]
  (min, avg, max) = (2477809.645, 2576051.598, 2692932.932), stdev = 56140.718
  CI (99.9%): [2538543.260, 2613559.935] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_dispose  thrpt   30  2576051.598 ± 37508.337  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 262815.653 ops/s
# Warmup Iteration   2: 1483210.439 ops/s
# Warmup Iteration   3: 2523882.232 ops/s
# Warmup Iteration   4: 2462985.315 ops/s
# Warmup Iteration   5: 2552633.150 ops/s
# Warmup Iteration   6: 2562495.602 ops/s
# Warmup Iteration   7: 2523343.579 ops/s
# Warmup Iteration   8: 2652749.368 ops/s
# Warmup Iteration   9: 2585206.390 ops/s
# Warmup Iteration  10: 2457904.633 ops/s
# Warmup Iteration  11: 2547687.970 ops/s
# Warmup Iteration  12: 2517655.269 ops/s
# Warmup Iteration  13: 2633259.909 ops/s
# Warmup Iteration  14: 2526044.555 ops/s
# Warmup Iteration  15: 2538934.354 ops/s
# Warmup Iteration  16: 2524345.537 ops/s
# Warmup Iteration  17: 2560205.125 ops/s
# Warmup Iteration  18: 2711109.706 ops/s
# Warmup Iteration  19: 2500121.882 ops/s
# Warmup Iteration  20: 2712511.320 ops/s
# Warmup Iteration  21: 2484511.521 ops/s
# Warmup Iteration  22: 2602649.827 ops/s
# Warmup Iteration  23: 2587929.868 ops/s
# Warmup Iteration  24: 2560376.245 ops/s
# Warmup Iteration  25: 2504789.110 ops/s
# Warmup Iteration  26: 2582120.188 ops/s
# Warmup Iteration  27: 2499454.287 ops/s
# Warmup Iteration  28: 2686481.961 ops/s
# Warmup Iteration  29: 2610176.939 ops/s
# Warmup Iteration  30: 2535635.007 ops/s
Iteration   1: 2579707.221 ops/s
Iteration   2: 2546848.185 ops/s
Iteration   3: 2588928.946 ops/s
Iteration   4: 2492461.420 ops/s
Iteration   5: 2467700.511 ops/s
Iteration   6: 2609121.586 ops/s
Iteration   7: 2563879.479 ops/s
Iteration   8: 2611006.568 ops/s
Iteration   9: 2546479.793 ops/s
Iteration  10: 2583440.421 ops/s
Iteration  11: 2538599.328 ops/s
Iteration  12: 2610517.545 ops/s
Iteration  13: 2583980.892 ops/s
Iteration  14: 2468321.602 ops/s
Iteration  15: 2617476.474 ops/s
Iteration  16: 2614932.226 ops/s
Iteration  17: 2505359.524 ops/s
Iteration  18: 2615871.361 ops/s
Iteration  19: 2604580.985 ops/s
Iteration  20: 2599315.677 ops/s
Iteration  21: 2511022.753 ops/s
Iteration  22: 2651072.576 ops/s
Iteration  23: 2642669.537 ops/s
Iteration  24: 2480133.272 ops/s
Iteration  25: 2574061.466 ops/s
Iteration  26: 2417072.087 ops/s
Iteration  27: 2630966.265 ops/s
Iteration  28: 2552019.031 ops/s
Iteration  29: 2545967.035 ops/s
Iteration  30: 2627139.674 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_dispose":
  2566021.781 ±(99.9%) 39514.609 ops/s [Average]
  (min, avg, max) = (2417072.087, 2566021.781, 2651072.576), stdev = 59143.611
  CI (99.9%): [2526507.172, 2605536.390] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_dispose  thrpt   30  2566021.781 ± 39514.609  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarInnerEmptyDisposeDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarInnerEmptyDisposeDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 304515.643 ops/s
# Warmup Iteration   2: 1409461.070 ops/s
# Warmup Iteration   3: 2008265.846 ops/s
# Warmup Iteration   4: 2184736.511 ops/s
# Warmup Iteration   5: 2313377.414 ops/s
# Warmup Iteration   6: 2148089.025 ops/s
# Warmup Iteration   7: 2250618.773 ops/s
# Warmup Iteration   8: 2221635.236 ops/s
# Warmup Iteration   9: 2170412.456 ops/s
# Warmup Iteration  10: 2269627.403 ops/s
# Warmup Iteration  11: 2093873.729 ops/s
# Warmup Iteration  12: 2354133.772 ops/s
# Warmup Iteration  13: 2214511.022 ops/s
# Warmup Iteration  14: 2291354.193 ops/s
# Warmup Iteration  15: 2144502.497 ops/s
# Warmup Iteration  16: 2332855.635 ops/s
# Warmup Iteration  17: 2296134.075 ops/s
# Warmup Iteration  18: 1986631.775 ops/s
# Warmup Iteration  19: 2075314.971 ops/s
# Warmup Iteration  20: 2241552.525 ops/s
# Warmup Iteration  21: 2229806.380 ops/s
# Warmup Iteration  22: 2291844.977 ops/s
# Warmup Iteration  23: 2157095.081 ops/s
# Warmup Iteration  24: 2195733.091 ops/s
# Warmup Iteration  25: 2312066.010 ops/s
# Warmup Iteration  26: 2183112.440 ops/s
# Warmup Iteration  27: 2200386.544 ops/s
# Warmup Iteration  28: 2345114.753 ops/s
# Warmup Iteration  29: 2170014.559 ops/s
# Warmup Iteration  30: 2285628.628 ops/s
Iteration   1: 2253162.487 ops/s
Iteration   2: 2197503.291 ops/s
Iteration   3: 2267513.365 ops/s
Iteration   4: 2145334.977 ops/s
Iteration   5: 2226786.789 ops/s
Iteration   6: 2337139.225 ops/s
Iteration   7: 2200280.624 ops/s
Iteration   8: 2302480.336 ops/s
Iteration   9: 2224629.467 ops/s
Iteration  10: 2171377.598 ops/s
Iteration  11: 2320848.662 ops/s
Iteration  12: 2204130.336 ops/s
Iteration  13: 2336573.021 ops/s
Iteration  14: 2196453.651 ops/s
Iteration  15: 2256569.618 ops/s
Iteration  16: 2224445.650 ops/s
Iteration  17: 2181287.074 ops/s
Iteration  18: 2309626.052 ops/s
Iteration  19: 2190422.209 ops/s
Iteration  20: 2266289.373 ops/s
Iteration  21: 2342036.825 ops/s
Iteration  22: 2192683.826 ops/s
Iteration  23: 2327630.287 ops/s
Iteration  24: 2220760.099 ops/s
Iteration  25: 2304202.175 ops/s
Iteration  26: 2183954.090 ops/s
Iteration  27: 2257485.019 ops/s
Iteration  28: 2228048.556 ops/s
Iteration  29: 2261069.480 ops/s
Iteration  30: 2330939.410 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarInnerEmptyDisposeDelayError":
  2248722.119 ±(99.9%) 38756.145 ops/s [Average]
  (min, avg, max) = (2145334.977, 2248722.119, 2342036.825), stdev = 58008.378
  CI (99.9%): [2209965.974, 2287478.264] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_scalarInnerEmptyDisposeDelayError  thrpt   30  2248722.119 ± 38756.145  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1440290.008 ops/s
# Warmup Iteration   2: 3843089.491 ops/s
# Warmup Iteration   3: 5553896.883 ops/s
# Warmup Iteration   4: 5790785.795 ops/s
# Warmup Iteration   5: 5605399.585 ops/s
# Warmup Iteration   6: 5630545.803 ops/s
# Warmup Iteration   7: 5645256.669 ops/s
# Warmup Iteration   8: 5849387.745 ops/s
# Warmup Iteration   9: 5770711.035 ops/s
# Warmup Iteration  10: 5757147.484 ops/s
# Warmup Iteration  11: 5777156.908 ops/s
# Warmup Iteration  12: 5802386.958 ops/s
# Warmup Iteration  13: 5834332.347 ops/s
# Warmup Iteration  14: 5560005.279 ops/s
# Warmup Iteration  15: 5898427.726 ops/s
# Warmup Iteration  16: 5649610.155 ops/s
# Warmup Iteration  17: 5552532.290 ops/s
# Warmup Iteration  18: 5688789.978 ops/s
# Warmup Iteration  19: 5672213.500 ops/s
# Warmup Iteration  20: 5997858.036 ops/s
# Warmup Iteration  21: 5942930.048 ops/s
# Warmup Iteration  22: 5531905.497 ops/s
# Warmup Iteration  23: 5775179.502 ops/s
# Warmup Iteration  24: 5513878.373 ops/s
# Warmup Iteration  25: 5800084.791 ops/s
# Warmup Iteration  26: 5761127.076 ops/s
# Warmup Iteration  27: 5614883.284 ops/s
# Warmup Iteration  28: 5788854.621 ops/s
# Warmup Iteration  29: 5748343.853 ops/s
# Warmup Iteration  30: 5667273.865 ops/s
Iteration   1: 5790236.103 ops/s
Iteration   2: 5679675.149 ops/s
Iteration   3: 5771782.532 ops/s
Iteration   4: 5618051.010 ops/s
Iteration   5: 5765719.852 ops/s
Iteration   6: 5654842.933 ops/s
Iteration   7: 5687162.188 ops/s
Iteration   8: 5957044.755 ops/s
Iteration   9: 5553361.928 ops/s
Iteration  10: 5805955.882 ops/s
Iteration  11: 5655697.012 ops/s
Iteration  12: 5918102.743 ops/s
Iteration  13: 5777293.708 ops/s
Iteration  14: 5738915.222 ops/s
Iteration  15: 5707378.800 ops/s
Iteration  16: 5854501.264 ops/s
Iteration  17: 5895149.233 ops/s
Iteration  18: 5603664.326 ops/s
Iteration  19: 5847427.528 ops/s
Iteration  20: 5669679.063 ops/s
Iteration  21: 5632172.243 ops/s
Iteration  22: 5697669.754 ops/s
Iteration  23: 5778561.272 ops/s
Iteration  24: 5845372.240 ops/s
Iteration  25: 5582211.259 ops/s
Iteration  26: 5887496.102 ops/s
Iteration  27: 5728487.875 ops/s
Iteration  28: 5795896.455 ops/s
Iteration  29: 5639064.717 ops/s
Iteration  30: 5635706.345 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustJust":
  5739142.650 ±(99.9%) 71220.688 ops/s [Average]
  (min, avg, max) = (5553361.928, 5739142.650, 5957044.755), stdev = 106599.781
  CI (99.9%): [5667921.962, 5810363.337] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustJust  thrpt   30  5739142.650 ± 71220.688  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noCancelPreviousIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noCancelPreviousIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 117843.913 ops/s
# Warmup Iteration   2: 710959.719 ops/s
# Warmup Iteration   3: 1007692.899 ops/s
# Warmup Iteration   4: 1169946.500 ops/s
# Warmup Iteration   5: 1130683.669 ops/s
# Warmup Iteration   6: 1105193.831 ops/s
# Warmup Iteration   7: 1142996.173 ops/s
# Warmup Iteration   8: 1130577.136 ops/s
# Warmup Iteration   9: 1163605.127 ops/s
# Warmup Iteration  10: 1153175.944 ops/s
# Warmup Iteration  11: 1110731.385 ops/s
# Warmup Iteration  12: 1088597.693 ops/s
# Warmup Iteration  13: 918122.525 ops/s
# Warmup Iteration  14: 1070705.972 ops/s
# Warmup Iteration  15: 1203485.604 ops/s
# Warmup Iteration  16: 1134999.794 ops/s
# Warmup Iteration  17: 1109784.006 ops/s
# Warmup Iteration  18: 1161604.790 ops/s
# Warmup Iteration  19: 1127911.489 ops/s
# Warmup Iteration  20: 1187582.897 ops/s
# Warmup Iteration  21: 1174832.128 ops/s
# Warmup Iteration  22: 1082396.522 ops/s
# Warmup Iteration  23: 1172372.114 ops/s
# Warmup Iteration  24: 1063694.375 ops/s
# Warmup Iteration  25: 1134248.640 ops/s
# Warmup Iteration  26: 1155910.016 ops/s
# Warmup Iteration  27: 1133270.213 ops/s
# Warmup Iteration  28: 1204858.577 ops/s
# Warmup Iteration  29: 1138822.598 ops/s
# Warmup Iteration  30: 1170188.204 ops/s
Iteration   1: 1117741.404 ops/s
Iteration   2: 1149237.307 ops/s
Iteration   3: 1131425.755 ops/s
Iteration   4: 1122290.268 ops/s
Iteration   5: 1144520.430 ops/s
Iteration   6: 1150155.100 ops/s
Iteration   7: 1123831.363 ops/s
Iteration   8: 1145339.966 ops/s
Iteration   9: 1131392.483 ops/s
Iteration  10: 1192000.790 ops/s
Iteration  11: 1131017.981 ops/s
Iteration  12: 1201536.106 ops/s
Iteration  13: 1111234.315 ops/s
Iteration  14: 1174956.913 ops/s
Iteration  15: 1151870.772 ops/s
Iteration  16: 1112321.982 ops/s
Iteration  17: 1175357.981 ops/s
Iteration  18: 1132394.945 ops/s
Iteration  19: 1145429.426 ops/s
Iteration  20: 1176893.493 ops/s
Iteration  21: 1117510.788 ops/s
Iteration  22: 1193161.779 ops/s
Iteration  23: 1170465.864 ops/s
Iteration  24: 1121842.315 ops/s
Iteration  25: 1184756.551 ops/s
Iteration  26: 1151267.789 ops/s
Iteration  27: 1154085.180 ops/s
Iteration  28: 1197984.969 ops/s
Iteration  29: 1123439.588 ops/s
Iteration  30: 1181134.029 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noCancelPreviousIterable":
  1150553.254 ±(99.9%) 18646.062 ops/s [Average]
  (min, avg, max) = (1111234.315, 1150553.254, 1201536.106), stdev = 27908.550
  CI (99.9%): [1131907.192, 1169199.316] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_noCancelPreviousIterable  thrpt   30  1150553.254 ± 18646.062  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_fusedPollThrowsDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_fusedPollThrowsDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 89086.995 ops/s
# Warmup Iteration   2: 461839.452 ops/s
# Warmup Iteration   3: 502014.298 ops/s
# Warmup Iteration   4: 512899.232 ops/s
# Warmup Iteration   5: 518626.867 ops/s
# Warmup Iteration   6: 525947.546 ops/s
# Warmup Iteration   7: 447531.677 ops/s
# Warmup Iteration   8: 530919.513 ops/s
# Warmup Iteration   9: 516453.342 ops/s
# Warmup Iteration  10: 546401.416 ops/s
# Warmup Iteration  11: 543371.861 ops/s
# Warmup Iteration  12: 516184.072 ops/s
# Warmup Iteration  13: 521419.736 ops/s
# Warmup Iteration  14: 546119.303 ops/s
# Warmup Iteration  15: 524060.773 ops/s
# Warmup Iteration  16: 552700.830 ops/s
# Warmup Iteration  17: 562211.472 ops/s
# Warmup Iteration  18: 540968.944 ops/s
# Warmup Iteration  19: 570732.086 ops/s
# Warmup Iteration  20: 543940.758 ops/s
# Warmup Iteration  21: 561225.661 ops/s
# Warmup Iteration  22: 550155.023 ops/s
# Warmup Iteration  23: 551215.136 ops/s
# Warmup Iteration  24: 549705.565 ops/s
# Warmup Iteration  25: 525965.703 ops/s
# Warmup Iteration  26: 566826.040 ops/s
# Warmup Iteration  27: 540904.318 ops/s
# Warmup Iteration  28: 558380.716 ops/s
# Warmup Iteration  29: 549816.803 ops/s
# Warmup Iteration  30: 551329.285 ops/s
Iteration   1: 567460.652 ops/s
Iteration   2: 570103.986 ops/s
Iteration   3: 531153.229 ops/s
Iteration   4: 553124.694 ops/s
Iteration   5: 550241.482 ops/s
Iteration   6: 570905.803 ops/s
Iteration   7: 546032.374 ops/s
Iteration   8: 552738.583 ops/s
Iteration   9: 544510.567 ops/s
Iteration  10: 547216.012 ops/s
Iteration  11: 549070.568 ops/s
Iteration  12: 543056.814 ops/s
Iteration  13: 538274.627 ops/s
Iteration  14: 557568.051 ops/s
Iteration  15: 545350.717 ops/s
Iteration  16: 531641.274 ops/s
Iteration  17: 553157.593 ops/s
Iteration  18: 540512.152 ops/s
Iteration  19: 576685.450 ops/s
Iteration  20: 561887.210 ops/s
Iteration  21: 544465.187 ops/s
Iteration  22: 562961.248 ops/s
Iteration  23: 544354.691 ops/s
Iteration  24: 568218.123 ops/s
Iteration  25: 573034.067 ops/s
Iteration  26: 538244.896 ops/s
Iteration  27: 555971.809 ops/s
Iteration  28: 554403.140 ops/s
Iteration  29: 562112.833 ops/s
Iteration  30: 544826.203 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_fusedPollThrowsDelayError":
  552642.801 ±(99.9%) 8209.253 ops/s [Average]
  (min, avg, max) = (531153.229, 552642.801, 576685.450), stdev = 12287.224
  CI (99.9%): [544433.548, 560852.054] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_fusedPollThrowsDelayError  thrpt   30  552642.801 ± 8209.253  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarInnerJustDisposeDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarInnerJustDisposeDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 196400.642 ops/s
# Warmup Iteration   2: 1063388.760 ops/s
# Warmup Iteration   3: 1889159.590 ops/s
# Warmup Iteration   4: 2113306.114 ops/s
# Warmup Iteration   5: 2158030.867 ops/s
# Warmup Iteration   6: 2137067.715 ops/s
# Warmup Iteration   7: 2102927.896 ops/s
# Warmup Iteration   8: 1844590.588 ops/s
# Warmup Iteration   9: 2106333.561 ops/s
# Warmup Iteration  10: 2115896.815 ops/s
# Warmup Iteration  11: 2228472.454 ops/s
# Warmup Iteration  12: 2133461.486 ops/s
# Warmup Iteration  13: 2147847.060 ops/s
# Warmup Iteration  14: 2180307.633 ops/s
# Warmup Iteration  15: 2049115.965 ops/s
# Warmup Iteration  16: 2190096.209 ops/s
# Warmup Iteration  17: 2123625.344 ops/s
# Warmup Iteration  18: 2180092.704 ops/s
# Warmup Iteration  19: 2134896.801 ops/s
# Warmup Iteration  20: 2175000.179 ops/s
# Warmup Iteration  21: 2229046.250 ops/s
# Warmup Iteration  22: 2136607.675 ops/s
# Warmup Iteration  23: 2086509.307 ops/s
# Warmup Iteration  24: 2246674.250 ops/s
# Warmup Iteration  25: 2240522.807 ops/s
# Warmup Iteration  26: 2107697.608 ops/s
# Warmup Iteration  27: 2181065.039 ops/s
# Warmup Iteration  28: 2076350.190 ops/s
# Warmup Iteration  29: 2179540.973 ops/s
# Warmup Iteration  30: 2221689.932 ops/s
Iteration   1: 2121873.428 ops/s
Iteration   2: 2165462.737 ops/s
Iteration   3: 2214211.507 ops/s
Iteration   4: 2109569.260 ops/s
Iteration   5: 2184098.906 ops/s
Iteration   6: 2141956.407 ops/s
Iteration   7: 2167704.480 ops/s
Iteration   8: 2095632.330 ops/s
Iteration   9: 2179620.294 ops/s
Iteration  10: 2198407.278 ops/s
Iteration  11: 2098686.274 ops/s
Iteration  12: 2167502.069 ops/s
Iteration  13: 2096909.578 ops/s
Iteration  14: 2119482.330 ops/s
Iteration  15: 2168517.987 ops/s
Iteration  16: 2075517.353 ops/s
Iteration  17: 2188964.426 ops/s
Iteration  18: 2173322.768 ops/s
Iteration  19: 2248420.386 ops/s
Iteration  20: 2186245.714 ops/s
Iteration  21: 2084993.105 ops/s
Iteration  22: 2262509.984 ops/s
Iteration  23: 2215228.959 ops/s
Iteration  24: 2114644.244 ops/s
Iteration  25: 2173438.021 ops/s
Iteration  26: 2112226.476 ops/s
Iteration  27: 2172851.746 ops/s
Iteration  28: 2206261.578 ops/s
Iteration  29: 2058027.429 ops/s
Iteration  30: 2116224.189 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_scalarInnerJustDisposeDelayError":
  2153950.375 ±(99.9%) 34500.976 ops/s [Average]
  (min, avg, max) = (2058027.429, 2153950.375, 2262509.984), stdev = 51639.441
  CI (99.9%): [2119449.399, 2188451.351] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_scalarInnerJustDisposeDelayError  thrpt   30  2153950.375 ± 34500.976  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1301522.848 ops/s
# Warmup Iteration   2: 3777034.760 ops/s
# Warmup Iteration   3: 4941067.383 ops/s
# Warmup Iteration   4: 5281921.153 ops/s
# Warmup Iteration   5: 5299276.451 ops/s
# Warmup Iteration   6: 5184923.769 ops/s
# Warmup Iteration   7: 5219313.707 ops/s
# Warmup Iteration   8: 5325702.892 ops/s
# Warmup Iteration   9: 5217416.141 ops/s
# Warmup Iteration  10: 5435973.626 ops/s
# Warmup Iteration  11: 5307601.637 ops/s
# Warmup Iteration  12: 5149563.209 ops/s
# Warmup Iteration  13: 5549983.019 ops/s
# Warmup Iteration  14: 5450914.933 ops/s
# Warmup Iteration  15: 5281254.017 ops/s
# Warmup Iteration  16: 5300608.521 ops/s
# Warmup Iteration  17: 5457691.718 ops/s
# Warmup Iteration  18: 5370303.552 ops/s
# Warmup Iteration  19: 5245409.064 ops/s
# Warmup Iteration  20: 5207252.767 ops/s
# Warmup Iteration  21: 5280358.222 ops/s
# Warmup Iteration  22: 5403221.837 ops/s
# Warmup Iteration  23: 5209647.972 ops/s
# Warmup Iteration  24: 5286952.218 ops/s
# Warmup Iteration  25: 5127917.100 ops/s
# Warmup Iteration  26: 5418848.175 ops/s
# Warmup Iteration  27: 5207551.347 ops/s
# Warmup Iteration  28: 5458937.736 ops/s
# Warmup Iteration  29: 5182257.240 ops/s
# Warmup Iteration  30: 5177912.283 ops/s
Iteration   1: 5367542.822 ops/s
Iteration   2: 5228006.717 ops/s
Iteration   3: 5449998.004 ops/s
Iteration   4: 5493362.980 ops/s
Iteration   5: 5293313.526 ops/s
Iteration   6: 5145991.408 ops/s
Iteration   7: 5259516.287 ops/s
Iteration   8: 5309565.556 ops/s
Iteration   9: 5563178.883 ops/s
Iteration  10: 5372429.048 ops/s
Iteration  11: 5191795.320 ops/s
Iteration  12: 5369096.871 ops/s
Iteration  13: 5215604.702 ops/s
Iteration  14: 5157918.151 ops/s
Iteration  15: 5151848.450 ops/s
Iteration  16: 5275207.114 ops/s
Iteration  17: 5264300.720 ops/s
Iteration  18: 5464956.414 ops/s
Iteration  19: 5495659.356 ops/s
Iteration  20: 5070867.621 ops/s
Iteration  21: 5504189.709 ops/s
Iteration  22: 5346314.577 ops/s
Iteration  23: 5121632.701 ops/s
Iteration  24: 5389241.272 ops/s
Iteration  25: 5144162.264 ops/s
Iteration  26: 5534090.458 ops/s
Iteration  27: 5177207.069 ops/s
Iteration  28: 5142273.323 ops/s
Iteration  29: 5399416.781 ops/s
Iteration  30: 5143299.932 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustSource":
  5301399.601 ±(99.9%) 95481.939 ops/s [Average]
  (min, avg, max) = (5070867.621, 5301399.601, 5563178.883), stdev = 142912.881
  CI (99.9%): [5205917.663, 5396881.540] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustSource  thrpt   30  5301399.601 ± 95481.939  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109244.943 ops/s
# Warmup Iteration   2: 460200.760 ops/s
# Warmup Iteration   3: 455581.816 ops/s
# Warmup Iteration   4: 557109.363 ops/s
# Warmup Iteration   5: 603554.289 ops/s
# Warmup Iteration   6: 580153.023 ops/s
# Warmup Iteration   7: 563013.754 ops/s
# Warmup Iteration   8: 588633.825 ops/s
# Warmup Iteration   9: 552982.485 ops/s
# Warmup Iteration  10: 580063.578 ops/s
# Warmup Iteration  11: 555843.861 ops/s
# Warmup Iteration  12: 567069.150 ops/s
# Warmup Iteration  13: 588677.167 ops/s
# Warmup Iteration  14: 600424.730 ops/s
# Warmup Iteration  15: 576208.456 ops/s
# Warmup Iteration  16: 583071.588 ops/s
# Warmup Iteration  17: 609714.571 ops/s
# Warmup Iteration  18: 624038.671 ops/s
# Warmup Iteration  19: 608792.011 ops/s
# Warmup Iteration  20: 610969.022 ops/s
# Warmup Iteration  21: 631869.655 ops/s
# Warmup Iteration  22: 586973.210 ops/s
# Warmup Iteration  23: 622010.675 ops/s
# Warmup Iteration  24: 600615.073 ops/s
# Warmup Iteration  25: 607828.724 ops/s
# Warmup Iteration  26: 631031.668 ops/s
# Warmup Iteration  27: 570635.040 ops/s
# Warmup Iteration  28: 583129.283 ops/s
# Warmup Iteration  29: 634269.242 ops/s
# Warmup Iteration  30: 595705.613 ops/s
Iteration   1: 651121.003 ops/s
Iteration   2: 599378.573 ops/s
Iteration   3: 612637.353 ops/s
Iteration   4: 625848.350 ops/s
Iteration   5: 613095.524 ops/s
Iteration   6: 634762.557 ops/s
Iteration   7: 603043.177 ops/s
Iteration   8: 635544.589 ops/s
Iteration   9: 631892.161 ops/s
Iteration  10: 600995.345 ops/s
Iteration  11: 625061.671 ops/s
Iteration  12: 608749.830 ops/s
Iteration  13: 630476.395 ops/s
Iteration  14: 595415.190 ops/s
Iteration  15: 598613.134 ops/s
Iteration  16: 633625.988 ops/s
Iteration  17: 610300.250 ops/s
Iteration  18: 587248.404 ops/s
Iteration  19: 629924.350 ops/s
Iteration  20: 593256.802 ops/s
Iteration  21: 624277.934 ops/s
Iteration  22: 622195.364 ops/s
Iteration  23: 608354.121 ops/s
Iteration  24: 631737.166 ops/s
Iteration  25: 613787.172 ops/s
Iteration  26: 596233.157 ops/s
Iteration  27: 604401.278 ops/s
Iteration  28: 607104.724 ops/s
Iteration  29: 603474.968 ops/s
Iteration  30: 630021.109 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mapperThrows":
  615419.255 ±(99.9%) 10616.835 ops/s [Average]
  (min, avg, max) = (587248.404, 615419.255, 651121.003), stdev = 15890.780
  CI (99.9%): [604802.420, 626036.089] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_mapperThrows  thrpt   30  615419.255 ± 10616.835  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_combineToNull2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_combineToNull2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78859.313 ops/s
# Warmup Iteration   2: 227688.760 ops/s
# Warmup Iteration   3: 486634.150 ops/s
# Warmup Iteration   4: 498958.671 ops/s
# Warmup Iteration   5: 472969.307 ops/s
# Warmup Iteration   6: 481204.694 ops/s
# Warmup Iteration   7: 488145.104 ops/s
# Warmup Iteration   8: 497323.968 ops/s
# Warmup Iteration   9: 500150.806 ops/s
# Warmup Iteration  10: 487938.154 ops/s
# Warmup Iteration  11: 482746.328 ops/s
# Warmup Iteration  12: 497915.405 ops/s
# Warmup Iteration  13: 497541.376 ops/s
# Warmup Iteration  14: 468700.738 ops/s
# Warmup Iteration  15: 511539.571 ops/s
# Warmup Iteration  16: 488281.961 ops/s
# Warmup Iteration  17: 516421.817 ops/s
# Warmup Iteration  18: 502159.688 ops/s
# Warmup Iteration  19: 517823.336 ops/s
# Warmup Iteration  20: 503356.418 ops/s
# Warmup Iteration  21: 511903.375 ops/s
# Warmup Iteration  22: 514242.676 ops/s
# Warmup Iteration  23: 537573.645 ops/s
# Warmup Iteration  24: 493975.665 ops/s
# Warmup Iteration  25: 520872.978 ops/s
# Warmup Iteration  26: 501904.458 ops/s
# Warmup Iteration  27: 500736.652 ops/s
# Warmup Iteration  28: 535938.878 ops/s
# Warmup Iteration  29: 485480.022 ops/s
# Warmup Iteration  30: 507097.197 ops/s
Iteration   1: 497744.728 ops/s
Iteration   2: 524102.774 ops/s
Iteration   3: 505265.504 ops/s
Iteration   4: 502722.496 ops/s
Iteration   5: 526270.330 ops/s
Iteration   6: 515365.589 ops/s
Iteration   7: 521902.901 ops/s
Iteration   8: 537123.626 ops/s
Iteration   9: 479744.100 ops/s
Iteration  10: 533527.958 ops/s
Iteration  11: 503281.961 ops/s
Iteration  12: 511528.894 ops/s
Iteration  13: 498848.603 ops/s
Iteration  14: 532397.985 ops/s
Iteration  15: 510789.754 ops/s
Iteration  16: 505953.632 ops/s
Iteration  17: 520909.697 ops/s
Iteration  18: 491392.316 ops/s
Iteration  19: 523892.634 ops/s
Iteration  20: 530741.271 ops/s
Iteration  21: 511653.622 ops/s
Iteration  22: 530466.375 ops/s
Iteration  23: 514442.973 ops/s
Iteration  24: 510988.702 ops/s
Iteration  25: 528976.312 ops/s
Iteration  26: 503708.135 ops/s
Iteration  27: 525437.311 ops/s
Iteration  28: 498196.604 ops/s
Iteration  29: 459722.274 ops/s
Iteration  30: 481889.487 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_combineToNull2":
  511299.618 ±(99.9%) 11983.921 ops/s [Average]
  (min, avg, max) = (459722.274, 511299.618, 537123.626), stdev = 17936.970
  CI (99.9%): [499315.698, 523283.539] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_combineToNull2  thrpt   30  511299.618 ± 11983.921  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSources$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSources

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 160510.862 ops/s
# Warmup Iteration   2: 635625.741 ops/s
# Warmup Iteration   3: 1035744.835 ops/s
# Warmup Iteration   4: 1217587.618 ops/s
# Warmup Iteration   5: 1348861.979 ops/s
# Warmup Iteration   6: 1292894.474 ops/s
# Warmup Iteration   7: 1288984.707 ops/s
# Warmup Iteration   8: 1332783.803 ops/s
# Warmup Iteration   9: 1339230.513 ops/s
# Warmup Iteration  10: 1276690.842 ops/s
# Warmup Iteration  11: 1277789.631 ops/s
# Warmup Iteration  12: 1234593.296 ops/s
# Warmup Iteration  13: 1273151.843 ops/s
# Warmup Iteration  14: 1270687.850 ops/s
# Warmup Iteration  15: 1323125.167 ops/s
# Warmup Iteration  16: 1297700.444 ops/s
# Warmup Iteration  17: 1275732.566 ops/s
# Warmup Iteration  18: 1339847.588 ops/s
# Warmup Iteration  19: 1265386.847 ops/s
# Warmup Iteration  20: 1366999.006 ops/s
# Warmup Iteration  21: 1260036.996 ops/s
# Warmup Iteration  22: 1345454.132 ops/s
# Warmup Iteration  23: 1276473.402 ops/s
# Warmup Iteration  24: 1288893.601 ops/s
# Warmup Iteration  25: 1348727.862 ops/s
# Warmup Iteration  26: 1310957.520 ops/s
# Warmup Iteration  27: 1347320.592 ops/s
# Warmup Iteration  28: 1365038.807 ops/s
# Warmup Iteration  29: 1269437.214 ops/s
# Warmup Iteration  30: 1327961.869 ops/s
Iteration   1: 1361187.995 ops/s
Iteration   2: 1362606.025 ops/s
Iteration   3: 1247611.789 ops/s
Iteration   4: 1327129.115 ops/s
Iteration   5: 1284107.400 ops/s
Iteration   6: 1352733.034 ops/s
Iteration   7: 1285560.567 ops/s
Iteration   8: 1322031.544 ops/s
Iteration   9: 1356017.014 ops/s
Iteration  10: 1255209.415 ops/s
Iteration  11: 1364912.995 ops/s
Iteration  12: 1333531.106 ops/s
Iteration  13: 1290635.262 ops/s
Iteration  14: 1373320.520 ops/s
Iteration  15: 1292145.882 ops/s
Iteration  16: 1294189.375 ops/s
Iteration  17: 1326747.761 ops/s
Iteration  18: 1302495.850 ops/s
Iteration  19: 1310600.721 ops/s
Iteration  20: 1313579.708 ops/s
Iteration  21: 1301798.160 ops/s
Iteration  22: 1346208.231 ops/s
Iteration  23: 1261814.828 ops/s
Iteration  24: 1357407.338 ops/s
Iteration  25: 1290609.373 ops/s
Iteration  26: 1292454.817 ops/s
Iteration  27: 1320582.151 ops/s
Iteration  28: 1343400.722 ops/s
Iteration  29: 1328245.100 ops/s
Iteration  30: 1292508.367 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSources":
  1316379.406 ±(99.9%) 22903.684 ops/s [Average]
  (min, avg, max) = (1247611.789, 1316379.406, 1373320.520), stdev = 34281.159
  CI (99.9%): [1293475.721, 1339283.090] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSources  thrpt   30  1316379.406 ± 22903.684  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestArrayOfSources$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestArrayOfSources

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 160581.746 ops/s
# Warmup Iteration   2: 667732.542 ops/s
# Warmup Iteration   3: 1049961.894 ops/s
# Warmup Iteration   4: 1247814.841 ops/s
# Warmup Iteration   5: 1334759.934 ops/s
# Warmup Iteration   6: 1323100.892 ops/s
# Warmup Iteration   7: 1320423.685 ops/s
# Warmup Iteration   8: 1305947.029 ops/s
# Warmup Iteration   9: 1295444.831 ops/s
# Warmup Iteration  10: 1300907.279 ops/s
# Warmup Iteration  11: 1314237.988 ops/s
# Warmup Iteration  12: 1299720.366 ops/s
# Warmup Iteration  13: 1358311.330 ops/s
# Warmup Iteration  14: 1361588.322 ops/s
# Warmup Iteration  15: 1269396.910 ops/s
# Warmup Iteration  16: 1363638.028 ops/s
# Warmup Iteration  17: 1285348.668 ops/s
# Warmup Iteration  18: 1312785.568 ops/s
# Warmup Iteration  19: 1413775.560 ops/s
# Warmup Iteration  20: 1320447.158 ops/s
# Warmup Iteration  21: 1377490.517 ops/s
# Warmup Iteration  22: 1303050.030 ops/s
# Warmup Iteration  23: 1391588.213 ops/s
# Warmup Iteration  24: 1299505.401 ops/s
# Warmup Iteration  25: 1287568.553 ops/s
# Warmup Iteration  26: 1373396.327 ops/s
# Warmup Iteration  27: 1334639.379 ops/s
# Warmup Iteration  28: 1320829.535 ops/s
# Warmup Iteration  29: 1321750.973 ops/s
# Warmup Iteration  30: 1340820.468 ops/s
Iteration   1: 1349989.650 ops/s
Iteration   2: 1272461.298 ops/s
Iteration   3: 1377261.312 ops/s
Iteration   4: 1328883.395 ops/s
Iteration   5: 1359608.277 ops/s
Iteration   6: 1324174.907 ops/s
Iteration   7: 1343570.857 ops/s
Iteration   8: 1374636.892 ops/s
Iteration   9: 1324976.597 ops/s
Iteration  10: 1369090.987 ops/s
Iteration  11: 1284079.765 ops/s
Iteration  12: 1377292.683 ops/s
Iteration  13: 1365849.652 ops/s
Iteration  14: 1309894.954 ops/s
Iteration  15: 1360040.468 ops/s
Iteration  16: 1394892.736 ops/s
Iteration  17: 1329852.567 ops/s
Iteration  18: 1363194.667 ops/s
Iteration  19: 1301800.034 ops/s
Iteration  20: 1351490.352 ops/s
Iteration  21: 1390905.732 ops/s
Iteration  22: 1329139.035 ops/s
Iteration  23: 1361115.307 ops/s
Iteration  24: 1019081.540 ops/s
Iteration  25: 1272191.031 ops/s
Iteration  26: 1367400.810 ops/s
Iteration  27: 1290034.038 ops/s
Iteration  28: 1348723.908 ops/s
Iteration  29: 1331437.044 ops/s
Iteration  30: 1283322.171 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestArrayOfSources":
  1328546.422 ±(99.9%) 45457.354 ops/s [Average]
  (min, avg, max) = (1019081.540, 1328546.422, 1394892.736), stdev = 68038.433
  CI (99.9%): [1283089.068, 1374003.776] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_combineLatestArrayOfSources  thrpt   30  1328546.422 ± 45457.354  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSources$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSources

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 84075.362 ops/s
# Warmup Iteration   2: 489710.788 ops/s
# Warmup Iteration   3: 884792.328 ops/s
# Warmup Iteration   4: 1086905.848 ops/s
# Warmup Iteration   5: 1268287.068 ops/s
# Warmup Iteration   6: 1177000.131 ops/s
# Warmup Iteration   7: 1159513.594 ops/s
# Warmup Iteration   8: 1195460.427 ops/s
# Warmup Iteration   9: 1196607.460 ops/s
# Warmup Iteration  10: 1298774.991 ops/s
# Warmup Iteration  11: 1210618.478 ops/s
# Warmup Iteration  12: 1268613.308 ops/s
# Warmup Iteration  13: 1158937.233 ops/s
# Warmup Iteration  14: 1220447.737 ops/s
# Warmup Iteration  15: 1218277.429 ops/s
# Warmup Iteration  16: 1225966.545 ops/s
# Warmup Iteration  17: 1273579.992 ops/s
# Warmup Iteration  18: 1158836.521 ops/s
# Warmup Iteration  19: 1255783.195 ops/s
# Warmup Iteration  20: 1210517.499 ops/s
# Warmup Iteration  21: 1253862.407 ops/s
# Warmup Iteration  22: 1256705.555 ops/s
# Warmup Iteration  23: 1190053.466 ops/s
# Warmup Iteration  24: 1224863.570 ops/s
# Warmup Iteration  25: 1248575.631 ops/s
# Warmup Iteration  26: 1242608.233 ops/s
# Warmup Iteration  27: 1255422.556 ops/s
# Warmup Iteration  28: 1173466.050 ops/s
# Warmup Iteration  29: 1272537.439 ops/s
# Warmup Iteration  30: 1185368.772 ops/s
Iteration   1: 1220715.412 ops/s
Iteration   2: 1240475.498 ops/s
Iteration   3: 1235429.099 ops/s
Iteration   4: 1238081.288 ops/s
Iteration   5: 1195183.305 ops/s
Iteration   6: 1238883.086 ops/s
Iteration   7: 1228653.810 ops/s
Iteration   8: 1186469.537 ops/s
Iteration   9: 1249172.326 ops/s
Iteration  10: 1199607.097 ops/s
Iteration  11: 1239987.982 ops/s
Iteration  12: 1198732.807 ops/s
Iteration  13: 1240627.043 ops/s
Iteration  14: 1284030.029 ops/s
Iteration  15: 1255191.258 ops/s
Iteration  16: 1262924.600 ops/s
Iteration  17: 1191444.800 ops/s
Iteration  18: 1246410.500 ops/s
Iteration  19: 1201011.665 ops/s
Iteration  20: 1245055.462 ops/s
Iteration  21: 1224293.011 ops/s
Iteration  22: 1214903.449 ops/s
Iteration  23: 1263172.278 ops/s
Iteration  24: 1211839.142 ops/s
Iteration  25: 1256765.356 ops/s
Iteration  26: 1176999.622 ops/s
Iteration  27: 1229386.687 ops/s
Iteration  28: 1203171.574 ops/s
Iteration  29: 1197337.132 ops/s
Iteration  30: 1206611.525 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSources":
  1226085.546 ±(99.9%) 17768.368 ops/s [Average]
  (min, avg, max) = (1176999.622, 1226085.546, 1284030.029), stdev = 26594.859
  CI (99.9%): [1208317.178, 1243853.914] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSources  thrpt   30  1226085.546 ± 17768.368  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manyCombinerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manyCombinerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60510.278 ops/s
# Warmup Iteration   2: 380969.562 ops/s
# Warmup Iteration   3: 377751.751 ops/s
# Warmup Iteration   4: 438840.298 ops/s
# Warmup Iteration   5: 427245.172 ops/s
# Warmup Iteration   6: 425131.994 ops/s
# Warmup Iteration   7: 432883.180 ops/s
# Warmup Iteration   8: 412303.288 ops/s
# Warmup Iteration   9: 444567.171 ops/s
# Warmup Iteration  10: 392860.779 ops/s
# Warmup Iteration  11: 416841.771 ops/s
# Warmup Iteration  12: 444374.460 ops/s
# Warmup Iteration  13: 413436.843 ops/s
# Warmup Iteration  14: 440141.151 ops/s
# Warmup Iteration  15: 419931.204 ops/s
# Warmup Iteration  16: 431252.115 ops/s
# Warmup Iteration  17: 434456.125 ops/s
# Warmup Iteration  18: 444137.523 ops/s
# Warmup Iteration  19: 447125.666 ops/s
# Warmup Iteration  20: 434158.878 ops/s
# Warmup Iteration  21: 459258.504 ops/s
# Warmup Iteration  22: 431974.296 ops/s
# Warmup Iteration  23: 440523.046 ops/s
# Warmup Iteration  24: 444930.003 ops/s
# Warmup Iteration  25: 425547.814 ops/s
# Warmup Iteration  26: 453649.212 ops/s
# Warmup Iteration  27: 459180.094 ops/s
# Warmup Iteration  28: 421815.050 ops/s
# Warmup Iteration  29: 440768.562 ops/s
# Warmup Iteration  30: 439943.180 ops/s
Iteration   1: 455592.494 ops/s
Iteration   2: 437181.253 ops/s
Iteration   3: 432124.362 ops/s
Iteration   4: 442241.991 ops/s
Iteration   5: 448620.377 ops/s
Iteration   6: 413466.549 ops/s
Iteration   7: 432981.629 ops/s
Iteration   8: 463323.252 ops/s
Iteration   9: 430646.110 ops/s
Iteration  10: 451267.535 ops/s
Iteration  11: 446996.960 ops/s
Iteration  12: 433723.523 ops/s
Iteration  13: 447953.501 ops/s
Iteration  14: 442819.240 ops/s
Iteration  15: 426724.678 ops/s
Iteration  16: 441549.102 ops/s
Iteration  17: 442632.885 ops/s
Iteration  18: 443945.406 ops/s
Iteration  19: 352491.077 ops/s
Iteration  20: 459108.573 ops/s
Iteration  21: 433596.203 ops/s
Iteration  22: 442455.427 ops/s
Iteration  23: 456267.545 ops/s
Iteration  24: 445226.464 ops/s
Iteration  25: 430730.854 ops/s
Iteration  26: 459520.572 ops/s
Iteration  27: 433722.785 ops/s
Iteration  28: 431537.212 ops/s
Iteration  29: 430492.115 ops/s
Iteration  30: 455148.055 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manyCombinerThrows":
  438802.924 ±(99.9%) 13293.909 ops/s [Average]
  (min, avg, max) = (352491.077, 438802.924, 463323.252), stdev = 19897.699
  CI (99.9%): [425509.015, 452096.833] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_manyCombinerThrows  thrpt   30  438802.924 ± 13293.909  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_observableSourcesInIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_observableSourcesInIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85304.575 ops/s
# Warmup Iteration   2: 241180.769 ops/s
# Warmup Iteration   3: 874523.167 ops/s
# Warmup Iteration   4: 1203792.309 ops/s
# Warmup Iteration   5: 1414561.833 ops/s
# Warmup Iteration   6: 1396516.698 ops/s
# Warmup Iteration   7: 1381630.556 ops/s
# Warmup Iteration   8: 1442133.904 ops/s
# Warmup Iteration   9: 1344708.140 ops/s
# Warmup Iteration  10: 1458675.124 ops/s
# Warmup Iteration  11: 1393601.640 ops/s
# Warmup Iteration  12: 1432438.795 ops/s
# Warmup Iteration  13: 1432769.777 ops/s
# Warmup Iteration  14: 1401675.259 ops/s
# Warmup Iteration  15: 1422288.768 ops/s
# Warmup Iteration  16: 1421364.357 ops/s
# Warmup Iteration  17: 1436487.474 ops/s
# Warmup Iteration  18: 1471901.366 ops/s
# Warmup Iteration  19: 1362994.667 ops/s
# Warmup Iteration  20: 1469233.895 ops/s
# Warmup Iteration  21: 1390634.524 ops/s
# Warmup Iteration  22: 1403771.071 ops/s
# Warmup Iteration  23: 1422327.956 ops/s
# Warmup Iteration  24: 1336118.217 ops/s
# Warmup Iteration  25: 1476920.946 ops/s
# Warmup Iteration  26: 1384864.908 ops/s
# Warmup Iteration  27: 1377797.433 ops/s
# Warmup Iteration  28: 1459341.234 ops/s
# Warmup Iteration  29: 1377690.463 ops/s
# Warmup Iteration  30: 1417812.551 ops/s
Iteration   1: 1446815.442 ops/s
Iteration   2: 1397746.627 ops/s
Iteration   3: 1429853.222 ops/s
Iteration   4: 1417806.817 ops/s
Iteration   5: 1317195.111 ops/s
Iteration   6: 1430776.051 ops/s
Iteration   7: 1384186.231 ops/s
Iteration   8: 1409886.550 ops/s
Iteration   9: 1430304.163 ops/s
Iteration  10: 1374919.143 ops/s
Iteration  11: 1452922.112 ops/s
Iteration  12: 1464528.874 ops/s
Iteration  13: 1355129.305 ops/s
Iteration  14: 1421555.627 ops/s
Iteration  15: 1393570.440 ops/s
Iteration  16: 1443506.026 ops/s
Iteration  17: 1350590.044 ops/s
Iteration  18: 1469328.567 ops/s
Iteration  19: 1367251.137 ops/s
Iteration  20: 1432049.305 ops/s
Iteration  21: 1449889.958 ops/s
Iteration  22: 1355416.800 ops/s
Iteration  23: 1450828.262 ops/s
Iteration  24: 1367897.284 ops/s
Iteration  25: 1356880.857 ops/s
Iteration  26: 1420874.832 ops/s
Iteration  27: 1395160.166 ops/s
Iteration  28: 1407444.143 ops/s
Iteration  29: 1386044.322 ops/s
Iteration  30: 1381151.981 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_observableSourcesInIterable":
  1405383.647 ±(99.9%) 26016.354 ops/s [Average]
  (min, avg, max) = (1317195.111, 1405383.647, 1469328.567), stdev = 38940.057
  CI (99.9%): [1379367.292, 1431400.001] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_observableSourcesInIterable  thrpt   30  1405383.647 ± 26016.354  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58828.365 ops/s
# Warmup Iteration   2: 344179.672 ops/s
# Warmup Iteration   3: 450493.985 ops/s
# Warmup Iteration   4: 478301.662 ops/s
# Warmup Iteration   5: 468147.635 ops/s
# Warmup Iteration   6: 488119.646 ops/s
# Warmup Iteration   7: 476531.775 ops/s
# Warmup Iteration   8: 490751.242 ops/s
# Warmup Iteration   9: 469538.687 ops/s
# Warmup Iteration  10: 475649.214 ops/s
# Warmup Iteration  11: 474504.668 ops/s
# Warmup Iteration  12: 487097.741 ops/s
# Warmup Iteration  13: 489095.609 ops/s
# Warmup Iteration  14: 470791.604 ops/s
# Warmup Iteration  15: 491593.687 ops/s
# Warmup Iteration  16: 490877.071 ops/s
# Warmup Iteration  17: 489127.568 ops/s
# Warmup Iteration  18: 496412.069 ops/s
# Warmup Iteration  19: 495868.794 ops/s
# Warmup Iteration  20: 461361.463 ops/s
# Warmup Iteration  21: 486469.649 ops/s
# Warmup Iteration  22: 483653.530 ops/s
# Warmup Iteration  23: 513745.616 ops/s
# Warmup Iteration  24: 513231.608 ops/s
# Warmup Iteration  25: 481745.526 ops/s
# Warmup Iteration  26: 518818.874 ops/s
# Warmup Iteration  27: 489776.393 ops/s
# Warmup Iteration  28: 513678.169 ops/s
# Warmup Iteration  29: 523768.203 ops/s
# Warmup Iteration  30: 492551.490 ops/s
Iteration   1: 515373.732 ops/s
Iteration   2: 490683.151 ops/s
Iteration   3: 512577.008 ops/s
Iteration   4: 494567.550 ops/s
Iteration   5: 503254.864 ops/s
Iteration   6: 498261.551 ops/s
Iteration   7: 491930.186 ops/s
Iteration   8: 519791.253 ops/s
Iteration   9: 492264.861 ops/s
Iteration  10: 522206.822 ops/s
Iteration  11: 518200.397 ops/s
Iteration  12: 485876.778 ops/s
Iteration  13: 494572.149 ops/s
Iteration  14: 423434.761 ops/s
Iteration  15: 488988.159 ops/s
Iteration  16: 493377.536 ops/s
Iteration  17: 501164.980 ops/s
Iteration  18: 509564.654 ops/s
Iteration  19: 498134.577 ops/s
Iteration  20: 512210.306 ops/s
Iteration  21: 489108.247 ops/s
Iteration  22: 503851.503 ops/s
Iteration  23: 482358.279 ops/s
Iteration  24: 504294.319 ops/s
Iteration  25: 498207.913 ops/s
Iteration  26: 487728.689 ops/s
Iteration  27: 506533.674 ops/s
Iteration  28: 498508.190 ops/s
Iteration  29: 486865.930 ops/s
Iteration  30: 501607.238 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerError":
  497516.642 ±(99.9%) 11782.380 ops/s [Average]
  (min, avg, max) = (423434.761, 497516.642, 522206.822), stdev = 17635.312
  CI (99.9%): [485734.262, 509299.021] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_innerError  thrpt   30  497516.642 ± 11782.380  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30206.018 ops/s
# Warmup Iteration   2: 111748.406 ops/s
# Warmup Iteration   3: 124469.511 ops/s
# Warmup Iteration   4: 134264.839 ops/s
# Warmup Iteration   5: 132791.641 ops/s
# Warmup Iteration   6: 141902.862 ops/s
# Warmup Iteration   7: 111920.339 ops/s
# Warmup Iteration   8: 140359.957 ops/s
# Warmup Iteration   9: 147826.551 ops/s
# Warmup Iteration  10: 137670.391 ops/s
# Warmup Iteration  11: 136477.060 ops/s
# Warmup Iteration  12: 138525.929 ops/s
# Warmup Iteration  13: 137131.570 ops/s
# Warmup Iteration  14: 146637.481 ops/s
# Warmup Iteration  15: 134469.711 ops/s
# Warmup Iteration  16: 142089.836 ops/s
# Warmup Iteration  17: 144710.867 ops/s
# Warmup Iteration  18: 147858.815 ops/s
# Warmup Iteration  19: 148129.912 ops/s
# Warmup Iteration  20: 142261.964 ops/s
# Warmup Iteration  21: 150126.191 ops/s
# Warmup Iteration  22: 140913.462 ops/s
# Warmup Iteration  23: 154413.144 ops/s
# Warmup Iteration  24: 147841.632 ops/s
# Warmup Iteration  25: 141043.015 ops/s
# Warmup Iteration  26: 149511.664 ops/s
# Warmup Iteration  27: 149306.318 ops/s
# Warmup Iteration  28: 145297.296 ops/s
# Warmup Iteration  29: 150812.735 ops/s
# Warmup Iteration  30: 146235.183 ops/s
Iteration   1: 140987.456 ops/s
Iteration   2: 151274.979 ops/s
Iteration   3: 142951.052 ops/s
Iteration   4: 141775.098 ops/s
Iteration   5: 152914.891 ops/s
Iteration   6: 142876.188 ops/s
Iteration   7: 144691.041 ops/s
Iteration   8: 143401.793 ops/s
Iteration   9: 143588.526 ops/s
Iteration  10: 153874.534 ops/s
Iteration  11: 138958.922 ops/s
Iteration  12: 148141.799 ops/s
Iteration  13: 152518.223 ops/s
Iteration  14: 141486.763 ops/s
Iteration  15: 151623.614 ops/s
Iteration  16: 148493.354 ops/s
Iteration  17: 145660.260 ops/s
Iteration  18: 143385.466 ops/s
Iteration  19: 147921.695 ops/s
Iteration  20: 152574.585 ops/s
Iteration  21: 141721.214 ops/s
Iteration  22: 150866.352 ops/s
Iteration  23: 142502.870 ops/s
Iteration  24: 147278.960 ops/s
Iteration  25: 145963.729 ops/s
Iteration  26: 149163.236 ops/s
Iteration  27: 149436.256 ops/s
Iteration  28: 145177.307 ops/s
Iteration  29: 149382.597 ops/s
Iteration  30: 139169.538 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen":
  146325.410 ±(99.9%) 2925.309 ops/s [Average]
  (min, avg, max) = (138958.922, 146325.410, 153874.534), stdev = 4378.465
  CI (99.9%): [143400.101, 149250.719] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen  thrpt   30  146325.410 ± 2925.309  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_connectDisconnectConnectAndSubjectState$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_connectDisconnectConnectAndSubjectState

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30820.019 ops/s
# Warmup Iteration   2: 207240.991 ops/s
# Warmup Iteration   3: 393578.301 ops/s
# Warmup Iteration   4: 558871.991 ops/s
# Warmup Iteration   5: 586181.127 ops/s
# Warmup Iteration   6: 567092.529 ops/s
# Warmup Iteration   7: 600927.097 ops/s
# Warmup Iteration   8: 556863.278 ops/s
# Warmup Iteration   9: 612293.175 ops/s
# Warmup Iteration  10: 599049.619 ops/s
# Warmup Iteration  11: 555134.026 ops/s
# Warmup Iteration  12: 597077.734 ops/s
# Warmup Iteration  13: 580958.983 ops/s
# Warmup Iteration  14: 571282.387 ops/s
# Warmup Iteration  15: 592375.891 ops/s
# Warmup Iteration  16: 564297.762 ops/s
# Warmup Iteration  17: 569515.107 ops/s
# Warmup Iteration  18: 589245.358 ops/s
# Warmup Iteration  19: 601205.801 ops/s
# Warmup Iteration  20: 577683.892 ops/s
# Warmup Iteration  21: 607893.326 ops/s
# Warmup Iteration  22: 605542.672 ops/s
# Warmup Iteration  23: 572148.738 ops/s
# Warmup Iteration  24: 582759.469 ops/s
# Warmup Iteration  25: 574458.087 ops/s
# Warmup Iteration  26: 608176.117 ops/s
# Warmup Iteration  27: 590771.040 ops/s
# Warmup Iteration  28: 571630.307 ops/s
# Warmup Iteration  29: 572322.319 ops/s
# Warmup Iteration  30: 594723.153 ops/s
Iteration   1: 571091.258 ops/s
Iteration   2: 590067.370 ops/s
Iteration   3: 583291.682 ops/s
Iteration   4: 592138.935 ops/s
Iteration   5: 594788.397 ops/s
Iteration   6: 572191.177 ops/s
Iteration   7: 597815.953 ops/s
Iteration   8: 487745.697 ops/s
Iteration   9: 616723.505 ops/s
Iteration  10: 567422.435 ops/s
Iteration  11: 577999.361 ops/s
Iteration  12: 603705.719 ops/s
Iteration  13: 579051.061 ops/s
Iteration  14: 607328.839 ops/s
Iteration  15: 591810.688 ops/s
Iteration  16: 574515.381 ops/s
Iteration  17: 559159.025 ops/s
Iteration  18: 588375.397 ops/s
Iteration  19: 567923.910 ops/s
Iteration  20: 600617.029 ops/s
Iteration  21: 558588.039 ops/s
Iteration  22: 578645.969 ops/s
Iteration  23: 579474.859 ops/s
Iteration  24: 581567.880 ops/s
Iteration  25: 613093.238 ops/s
Iteration  26: 573183.319 ops/s
Iteration  27: 603011.326 ops/s
Iteration  28: 598136.335 ops/s
Iteration  29: 557147.168 ops/s
Iteration  30: 580127.878 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_connectDisconnectConnectAndSubjectState":
  581557.961 ±(99.9%) 15900.194 ops/s [Average]
  (min, avg, max) = (487745.697, 581557.961, 616723.505), stdev = 23798.663
  CI (99.9%): [565657.767, 597458.155] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score       Error  Units
ObservableRefCountTest._Benchmark.benchmark_connectDisconnectConnectAndSubjectState  thrpt   30  581557.961 ± 15900.194  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 492831.696 ops/s
# Warmup Iteration   2: 2097538.108 ops/s
# Warmup Iteration   3: 2705561.871 ops/s
# Warmup Iteration   4: 3027633.979 ops/s
# Warmup Iteration   5: 3126208.820 ops/s
# Warmup Iteration   6: 3060343.014 ops/s
# Warmup Iteration   7: 3185188.469 ops/s
# Warmup Iteration   8: 3182305.757 ops/s
# Warmup Iteration   9: 3098339.391 ops/s
# Warmup Iteration  10: 3179634.832 ops/s
# Warmup Iteration  11: 3081754.050 ops/s
# Warmup Iteration  12: 3036378.372 ops/s
# Warmup Iteration  13: 3176725.768 ops/s
# Warmup Iteration  14: 3090222.783 ops/s
# Warmup Iteration  15: 3064951.295 ops/s
# Warmup Iteration  16: 3134853.152 ops/s
# Warmup Iteration  17: 3139152.139 ops/s
# Warmup Iteration  18: 3099184.287 ops/s
# Warmup Iteration  19: 3146889.416 ops/s
# Warmup Iteration  20: 3130275.238 ops/s
# Warmup Iteration  21: 3070134.449 ops/s
# Warmup Iteration  22: 3192454.468 ops/s
# Warmup Iteration  23: 3036354.221 ops/s
# Warmup Iteration  24: 3174114.338 ops/s
# Warmup Iteration  25: 3088227.521 ops/s
# Warmup Iteration  26: 3066837.671 ops/s
# Warmup Iteration  27: 3124528.187 ops/s
# Warmup Iteration  28: 3026265.883 ops/s
# Warmup Iteration  29: 3212576.856 ops/s
# Warmup Iteration  30: 3054945.156 ops/s
Iteration   1: 3252552.980 ops/s
Iteration   2: 3136024.613 ops/s
Iteration   3: 3090837.030 ops/s
Iteration   4: 3139659.389 ops/s
Iteration   5: 3068391.250 ops/s
Iteration   6: 2990465.437 ops/s
Iteration   7: 3153898.668 ops/s
Iteration   8: 3055929.908 ops/s
Iteration   9: 3034420.827 ops/s
Iteration  10: 3166100.878 ops/s
Iteration  11: 3097178.309 ops/s
Iteration  12: 3190100.343 ops/s
Iteration  13: 3041451.375 ops/s
Iteration  14: 3191777.975 ops/s
Iteration  15: 3168196.698 ops/s
Iteration  16: 3067231.876 ops/s
Iteration  17: 3157334.603 ops/s
Iteration  18: 3071909.988 ops/s
Iteration  19: 3179483.208 ops/s
Iteration  20: 3108452.500 ops/s
Iteration  21: 3128875.470 ops/s
Iteration  22: 3118364.271 ops/s
Iteration  23: 3125627.859 ops/s
Iteration  24: 3193226.303 ops/s
Iteration  25: 3101860.143 ops/s
Iteration  26: 3134132.250 ops/s
Iteration  27: 3188639.923 ops/s
Iteration  28: 3055758.202 ops/s
Iteration  29: 3178923.297 ops/s
Iteration  30: 3041589.347 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisher":
  3120946.497 ±(99.9%) 40561.626 ops/s [Average]
  (min, avg, max) = (2990465.437, 3120946.497, 3252552.980), stdev = 60710.737
  CI (99.9%): [3080384.872, 3161508.123] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SingleFlatMapTest._Benchmark.benchmark_flatMapPublisher  thrpt   30  3120946.497 ± 40561.626  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherMapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherMapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 286960.888 ops/s
# Warmup Iteration   2: 513460.876 ops/s
# Warmup Iteration   3: 585013.718 ops/s
# Warmup Iteration   4: 582309.746 ops/s
# Warmup Iteration   5: 530547.477 ops/s
# Warmup Iteration   6: 589257.741 ops/s
# Warmup Iteration   7: 614593.090 ops/s
# Warmup Iteration   8: 610110.332 ops/s
# Warmup Iteration   9: 602158.208 ops/s
# Warmup Iteration  10: 624224.475 ops/s
# Warmup Iteration  11: 592678.145 ops/s
# Warmup Iteration  12: 619662.047 ops/s
# Warmup Iteration  13: 615467.664 ops/s
# Warmup Iteration  14: 616969.404 ops/s
# Warmup Iteration  15: 630094.262 ops/s
# Warmup Iteration  16: 600688.409 ops/s
# Warmup Iteration  17: 636683.163 ops/s
# Warmup Iteration  18: 665142.272 ops/s
# Warmup Iteration  19: 634315.862 ops/s
# Warmup Iteration  20: 653805.214 ops/s
# Warmup Iteration  21: 634051.535 ops/s
# Warmup Iteration  22: 641634.123 ops/s
# Warmup Iteration  23: 649796.025 ops/s
# Warmup Iteration  24: 632921.756 ops/s
# Warmup Iteration  25: 628786.824 ops/s
# Warmup Iteration  26: 667523.577 ops/s
# Warmup Iteration  27: 619188.169 ops/s
# Warmup Iteration  28: 642721.173 ops/s
# Warmup Iteration  29: 642042.258 ops/s
# Warmup Iteration  30: 648641.209 ops/s
Iteration   1: 631316.202 ops/s
Iteration   2: 623900.118 ops/s
Iteration   3: 563627.583 ops/s
Iteration   4: 630328.264 ops/s
Iteration   5: 641672.005 ops/s
Iteration   6: 654838.786 ops/s
Iteration   7: 650351.203 ops/s
Iteration   8: 643601.137 ops/s
Iteration   9: 654781.109 ops/s
Iteration  10: 659868.552 ops/s
Iteration  11: 608334.642 ops/s
Iteration  12: 647786.725 ops/s
Iteration  13: 639749.252 ops/s
Iteration  14: 653395.565 ops/s
Iteration  15: 669632.325 ops/s
Iteration  16: 619285.018 ops/s
Iteration  17: 658412.436 ops/s
Iteration  18: 641068.590 ops/s
Iteration  19: 648156.549 ops/s
Iteration  20: 664726.374 ops/s
Iteration  21: 624676.745 ops/s
Iteration  22: 663290.575 ops/s
Iteration  23: 646471.785 ops/s
Iteration  24: 649585.620 ops/s
Iteration  25: 644178.728 ops/s
Iteration  26: 632942.646 ops/s
Iteration  27: 668162.094 ops/s
Iteration  28: 672704.115 ops/s
Iteration  29: 634550.456 ops/s
Iteration  30: 679058.727 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherMapperThrows":
  644015.131 ±(99.9%) 15041.082 ops/s [Average]
  (min, avg, max) = (563627.583, 644015.131, 679058.727), stdev = 22512.785
  CI (99.9%): [628974.049, 659056.213] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherMapperThrows  thrpt   30  644015.131 ± 15041.082  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherCancelDuringFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherCancelDuringFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 663056.733 ops/s
# Warmup Iteration   2: 3261342.608 ops/s
# Warmup Iteration   3: 3696096.732 ops/s
# Warmup Iteration   4: 4116236.995 ops/s
# Warmup Iteration   5: 4341212.213 ops/s
# Warmup Iteration   6: 4039954.482 ops/s
# Warmup Iteration   7: 4225392.715 ops/s
# Warmup Iteration   8: 4310120.148 ops/s
# Warmup Iteration   9: 4086742.090 ops/s
# Warmup Iteration  10: 4272652.869 ops/s
# Warmup Iteration  11: 4276508.955 ops/s
# Warmup Iteration  12: 4091547.357 ops/s
# Warmup Iteration  13: 4056139.416 ops/s
# Warmup Iteration  14: 4367248.181 ops/s
# Warmup Iteration  15: 3985395.922 ops/s
# Warmup Iteration  16: 4217195.236 ops/s
# Warmup Iteration  17: 4099277.740 ops/s
# Warmup Iteration  18: 4380986.903 ops/s
# Warmup Iteration  19: 4279944.153 ops/s
# Warmup Iteration  20: 4172500.572 ops/s
# Warmup Iteration  21: 4325434.429 ops/s
# Warmup Iteration  22: 4196496.695 ops/s
# Warmup Iteration  23: 4119778.617 ops/s
# Warmup Iteration  24: 4281786.010 ops/s
# Warmup Iteration  25: 4322947.197 ops/s
# Warmup Iteration  26: 4069046.748 ops/s
# Warmup Iteration  27: 4185496.141 ops/s
# Warmup Iteration  28: 4215679.328 ops/s
# Warmup Iteration  29: 4077102.123 ops/s
# Warmup Iteration  30: 4288194.503 ops/s
Iteration   1: 4047412.075 ops/s
Iteration   2: 4228707.612 ops/s
Iteration   3: 4273316.896 ops/s
Iteration   4: 4227959.823 ops/s
Iteration   5: 4054764.457 ops/s
Iteration   6: 4184649.474 ops/s
Iteration   7: 4279681.534 ops/s
Iteration   8: 4038961.466 ops/s
Iteration   9: 4274817.752 ops/s
Iteration  10: 4017949.381 ops/s
Iteration  11: 4185822.129 ops/s
Iteration  12: 4322607.078 ops/s
Iteration  13: 4102886.093 ops/s
Iteration  14: 4071750.294 ops/s
Iteration  15: 4280612.528 ops/s
Iteration  16: 4093606.333 ops/s
Iteration  17: 4213640.004 ops/s
Iteration  18: 4071334.503 ops/s
Iteration  19: 4309268.638 ops/s
Iteration  20: 4172815.564 ops/s
Iteration  21: 4258424.635 ops/s
Iteration  22: 4164399.125 ops/s
Iteration  23: 4179590.514 ops/s
Iteration  24: 4254361.232 ops/s
Iteration  25: 4239855.429 ops/s
Iteration  26: 4170755.948 ops/s
Iteration  27: 4276517.762 ops/s
Iteration  28: 4137526.042 ops/s
Iteration  29: 4210275.052 ops/s
Iteration  30: 4154893.906 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherCancelDuringFlowable":
  4183305.443 ±(99.9%) 58849.300 ops/s [Average]
  (min, avg, max) = (4017949.381, 4183305.443, 4322607.078), stdev = 88082.869
  CI (99.9%): [4124456.142, 4242154.743] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherCancelDuringFlowable  thrpt   30  4183305.443 ± 58849.300  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherCancelDuringSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherCancelDuringSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 777468.147 ops/s
# Warmup Iteration   2: 3502820.085 ops/s
# Warmup Iteration   3: 4291696.394 ops/s
# Warmup Iteration   4: 4645257.179 ops/s
# Warmup Iteration   5: 4849035.586 ops/s
# Warmup Iteration   6: 4910245.665 ops/s
# Warmup Iteration   7: 4412029.615 ops/s
# Warmup Iteration   8: 4674769.707 ops/s
# Warmup Iteration   9: 4642609.182 ops/s
# Warmup Iteration  10: 4631985.140 ops/s
# Warmup Iteration  11: 4567023.441 ops/s
# Warmup Iteration  12: 4777907.795 ops/s
# Warmup Iteration  13: 4517641.495 ops/s
# Warmup Iteration  14: 4729042.293 ops/s
# Warmup Iteration  15: 4644277.626 ops/s
# Warmup Iteration  16: 4671636.144 ops/s
# Warmup Iteration  17: 4534004.235 ops/s
# Warmup Iteration  18: 4729912.481 ops/s
# Warmup Iteration  19: 4668711.682 ops/s
# Warmup Iteration  20: 4592654.235 ops/s
# Warmup Iteration  21: 4812030.443 ops/s
# Warmup Iteration  22: 4563248.791 ops/s
# Warmup Iteration  23: 4623279.891 ops/s
# Warmup Iteration  24: 4694572.919 ops/s
# Warmup Iteration  25: 4591023.471 ops/s
# Warmup Iteration  26: 4564441.416 ops/s
# Warmup Iteration  27: 4733365.655 ops/s
# Warmup Iteration  28: 3862429.479 ops/s
# Warmup Iteration  29: 4818334.290 ops/s
# Warmup Iteration  30: 4659906.808 ops/s
Iteration   1: 4712860.246 ops/s
Iteration   2: 4415845.325 ops/s
Iteration   3: 4681898.135 ops/s
Iteration   4: 4639538.553 ops/s
Iteration   5: 4722170.311 ops/s
Iteration   6: 4671730.916 ops/s
Iteration   7: 4701410.658 ops/s
Iteration   8: 4872189.501 ops/s
Iteration   9: 4522877.751 ops/s
Iteration  10: 4822144.015 ops/s
Iteration  11: 4738057.839 ops/s
Iteration  12: 4520410.844 ops/s
Iteration  13: 4852269.577 ops/s
Iteration  14: 4463796.648 ops/s
Iteration  15: 4763659.869 ops/s
Iteration  16: 4660447.778 ops/s
Iteration  17: 4571385.312 ops/s
Iteration  18: 4818420.003 ops/s
Iteration  19: 4684523.614 ops/s
Iteration  20: 4740700.086 ops/s
Iteration  21: 4581960.637 ops/s
Iteration  22: 4843030.010 ops/s
Iteration  23: 4664269.213 ops/s
Iteration  24: 4639849.693 ops/s
Iteration  25: 4838413.943 ops/s
Iteration  26: 4670089.381 ops/s
Iteration  27: 4716656.153 ops/s
Iteration  28: 4719132.253 ops/s
Iteration  29: 4600772.015 ops/s
Iteration  30: 4658789.148 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherCancelDuringSingle":
  4683643.314 ±(99.9%) 76114.232 ops/s [Average]
  (min, avg, max) = (4415845.325, 4683643.314, 4872189.501), stdev = 113924.208
  CI (99.9%): [4607529.082, 4759757.546] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherCancelDuringSingle  thrpt   30  4683643.314 ± 76114.232  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justFlowableJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justFlowableJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 344241.673 ops/s
# Warmup Iteration   2: 1275242.419 ops/s
# Warmup Iteration   3: 1844884.964 ops/s
# Warmup Iteration   4: 2029517.453 ops/s
# Warmup Iteration   5: 2267444.636 ops/s
# Warmup Iteration   6: 2261541.059 ops/s
# Warmup Iteration   7: 2273954.402 ops/s
# Warmup Iteration   8: 2207679.866 ops/s
# Warmup Iteration   9: 2322310.385 ops/s
# Warmup Iteration  10: 2194033.726 ops/s
# Warmup Iteration  11: 2254171.155 ops/s
# Warmup Iteration  12: 2184784.660 ops/s
# Warmup Iteration  13: 2355680.633 ops/s
# Warmup Iteration  14: 2297875.475 ops/s
# Warmup Iteration  15: 2181275.418 ops/s
# Warmup Iteration  16: 2313524.574 ops/s
# Warmup Iteration  17: 2229855.753 ops/s
# Warmup Iteration  18: 2249133.040 ops/s
# Warmup Iteration  19: 2265653.705 ops/s
# Warmup Iteration  20: 2194314.467 ops/s
# Warmup Iteration  21: 2304961.846 ops/s
# Warmup Iteration  22: 2181338.936 ops/s
# Warmup Iteration  23: 2254457.020 ops/s
# Warmup Iteration  24: 2206465.118 ops/s
# Warmup Iteration  25: 2233143.440 ops/s
# Warmup Iteration  26: 2284135.941 ops/s
# Warmup Iteration  27: 2133008.147 ops/s
# Warmup Iteration  28: 2289050.980 ops/s
# Warmup Iteration  29: 2249929.787 ops/s
# Warmup Iteration  30: 2288465.124 ops/s
Iteration   1: 2280583.587 ops/s
Iteration   2: 2243635.360 ops/s
Iteration   3: 2304036.343 ops/s
Iteration   4: 2222463.386 ops/s
Iteration   5: 2267198.690 ops/s
Iteration   6: 2260726.491 ops/s
Iteration   7: 2166179.572 ops/s
Iteration   8: 2262163.227 ops/s
Iteration   9: 2259783.685 ops/s
Iteration  10: 2313916.314 ops/s
Iteration  11: 2215721.208 ops/s
Iteration  12: 2323828.805 ops/s
Iteration  13: 2327898.494 ops/s
Iteration  14: 2288220.198 ops/s
Iteration  15: 2214778.841 ops/s
Iteration  16: 2271879.311 ops/s
Iteration  17: 2258003.480 ops/s
Iteration  18: 2203509.411 ops/s
Iteration  19: 2321075.560 ops/s
Iteration  20: 2225007.628 ops/s
Iteration  21: 2250990.950 ops/s
Iteration  22: 2283472.483 ops/s
Iteration  23: 2186463.807 ops/s
Iteration  24: 2267552.174 ops/s
Iteration  25: 2254511.438 ops/s
Iteration  26: 2326765.147 ops/s
Iteration  27: 2331634.564 ops/s
Iteration  28: 2233080.805 ops/s
Iteration  29: 2316205.370 ops/s
Iteration  30: 2318438.664 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justFlowableJust":
  2266657.500 ±(99.9%) 30203.832 ops/s [Average]
  (min, avg, max) = (2166179.572, 2266657.500, 2331634.564), stdev = 45207.677
  CI (99.9%): [2236453.668, 2296861.332] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SingleStartWithTest._Benchmark.benchmark_justFlowableJust  thrpt   30  2266657.500 ± 30203.832  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherSingleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherSingleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 158901.470 ops/s
# Warmup Iteration   2: 538979.604 ops/s
# Warmup Iteration   3: 637617.500 ops/s
# Warmup Iteration   4: 661944.362 ops/s
# Warmup Iteration   5: 571211.693 ops/s
# Warmup Iteration   6: 692680.013 ops/s
# Warmup Iteration   7: 691405.013 ops/s
# Warmup Iteration   8: 713171.697 ops/s
# Warmup Iteration   9: 692715.068 ops/s
# Warmup Iteration  10: 662794.720 ops/s
# Warmup Iteration  11: 699646.593 ops/s
# Warmup Iteration  12: 721736.456 ops/s
# Warmup Iteration  13: 692996.040 ops/s
# Warmup Iteration  14: 701797.554 ops/s
# Warmup Iteration  15: 684287.378 ops/s
# Warmup Iteration  16: 708915.378 ops/s
# Warmup Iteration  17: 735313.240 ops/s
# Warmup Iteration  18: 742962.817 ops/s
# Warmup Iteration  19: 747068.009 ops/s
# Warmup Iteration  20: 727071.442 ops/s
# Warmup Iteration  21: 750580.191 ops/s
# Warmup Iteration  22: 754985.070 ops/s
# Warmup Iteration  23: 627049.504 ops/s
# Warmup Iteration  24: 706493.907 ops/s
# Warmup Iteration  25: 736439.672 ops/s
# Warmup Iteration  26: 713977.384 ops/s
# Warmup Iteration  27: 739330.266 ops/s
# Warmup Iteration  28: 760366.361 ops/s
# Warmup Iteration  29: 726223.348 ops/s
# Warmup Iteration  30: 776134.652 ops/s
Iteration   1: 720890.878 ops/s
Iteration   2: 714774.971 ops/s
Iteration   3: 779692.368 ops/s
Iteration   4: 716164.397 ops/s
Iteration   5: 750325.671 ops/s
Iteration   6: 752503.218 ops/s
Iteration   7: 746568.342 ops/s
Iteration   8: 749716.484 ops/s
Iteration   9: 721104.116 ops/s
Iteration  10: 742396.166 ops/s
Iteration  11: 767781.467 ops/s
Iteration  12: 741630.668 ops/s
Iteration  13: 725665.471 ops/s
Iteration  14: 750164.772 ops/s
Iteration  15: 741664.310 ops/s
Iteration  16: 735653.513 ops/s
Iteration  17: 755931.521 ops/s
Iteration  18: 763132.122 ops/s
Iteration  19: 712324.858 ops/s
Iteration  20: 760651.734 ops/s
Iteration  21: 719493.572 ops/s
Iteration  22: 748544.923 ops/s
Iteration  23: 736062.847 ops/s
Iteration  24: 738969.443 ops/s
Iteration  25: 762268.797 ops/s
Iteration  26: 715038.404 ops/s
Iteration  27: 759855.540 ops/s
Iteration  28: 735078.641 ops/s
Iteration  29: 734651.729 ops/s
Iteration  30: 761022.096 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherSingleError":
  741990.768 ±(99.9%) 12024.625 ops/s [Average]
  (min, avg, max) = (712324.858, 741990.768, 779692.368), stdev = 17997.894
  CI (99.9%): [729966.143, 754015.393] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
SingleFlatMapTest._Benchmark.benchmark_flatMapPublisherSingleError  thrpt   30  741990.768 ± 12024.625  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsToEmitErrorFromMoreThanOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsToEmitErrorFromMoreThanOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 140431.061 ops/s
# Warmup Iteration   2: 402797.981 ops/s
# Warmup Iteration   3: 449715.044 ops/s
# Warmup Iteration   4: 449129.228 ops/s
# Warmup Iteration   5: 413049.606 ops/s
# Warmup Iteration   6: 488532.146 ops/s
# Warmup Iteration   7: 455245.891 ops/s
# Warmup Iteration   8: 475631.031 ops/s
# Warmup Iteration   9: 469096.761 ops/s
# Warmup Iteration  10: 463650.898 ops/s
# Warmup Iteration  11: 471026.706 ops/s
# Warmup Iteration  12: 466626.099 ops/s
# Warmup Iteration  13: 484913.707 ops/s
# Warmup Iteration  14: 485242.607 ops/s
# Warmup Iteration  15: 459537.111 ops/s
# Warmup Iteration  16: 476475.185 ops/s
# Warmup Iteration  17: 562214.186 ops/s
# Warmup Iteration  18: 560216.935 ops/s
# Warmup Iteration  19: 574654.390 ops/s
# Warmup Iteration  20: 548681.632 ops/s
# Warmup Iteration  21: 587746.778 ops/s
# Warmup Iteration  22: 552149.234 ops/s
# Warmup Iteration  23: 554499.005 ops/s
# Warmup Iteration  24: 566987.493 ops/s
# Warmup Iteration  25: 544929.265 ops/s
# Warmup Iteration  26: 567984.344 ops/s
# Warmup Iteration  27: 554631.055 ops/s
# Warmup Iteration  28: 571394.709 ops/s
# Warmup Iteration  29: 552927.636 ops/s
# Warmup Iteration  30: 559408.328 ops/s
Iteration   1: 589887.523 ops/s
Iteration   2: 547856.780 ops/s
Iteration   3: 557875.215 ops/s
Iteration   4: 546701.645 ops/s
Iteration   5: 558500.815 ops/s
Iteration   6: 544566.067 ops/s
Iteration   7: 570163.994 ops/s
Iteration   8: 550390.529 ops/s
Iteration   9: 576163.895 ops/s
Iteration  10: 548857.657 ops/s
Iteration  11: 574236.478 ops/s
Iteration  12: 544464.844 ops/s
Iteration  13: 579134.079 ops/s
Iteration  14: 570825.788 ops/s
Iteration  15: 569336.931 ops/s
Iteration  16: 555359.659 ops/s
Iteration  17: 580218.553 ops/s
Iteration  18: 540275.624 ops/s
Iteration  19: 584769.103 ops/s
Iteration  20: 568629.078 ops/s
Iteration  21: 548576.237 ops/s
Iteration  22: 564979.939 ops/s
Iteration  23: 557506.090 ops/s
Iteration  24: 563028.181 ops/s
Iteration  25: 562867.859 ops/s
Iteration  26: 572543.838 ops/s
Iteration  27: 553850.153 ops/s
Iteration  28: 569075.324 ops/s
Iteration  29: 566657.756 ops/s
Iteration  30: 553340.977 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsToEmitErrorFromMoreThanOne":
  562354.687 ±(99.9%) 8723.695 ops/s [Average]
  (min, avg, max) = (540275.624, 562354.687, 589887.523), stdev = 13057.218
  CI (99.9%): [553630.992, 571078.382] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                               Mode  Cnt       Score      Error  Units
FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsToEmitErrorFromMoreThanOne  thrpt   30  562354.687 ± 8723.695  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacity$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacity

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 290027.180 ops/s
# Warmup Iteration   2: 1401176.031 ops/s
# Warmup Iteration   3: 1744025.125 ops/s
# Warmup Iteration   4: 2141461.198 ops/s
# Warmup Iteration   5: 2067685.195 ops/s
# Warmup Iteration   6: 2158219.648 ops/s
# Warmup Iteration   7: 2116764.949 ops/s
# Warmup Iteration   8: 2151075.109 ops/s
# Warmup Iteration   9: 2118550.204 ops/s
# Warmup Iteration  10: 2143958.377 ops/s
# Warmup Iteration  11: 2138812.756 ops/s
# Warmup Iteration  12: 2185682.312 ops/s
# Warmup Iteration  13: 2065064.128 ops/s
# Warmup Iteration  14: 2151460.327 ops/s
# Warmup Iteration  15: 2215466.938 ops/s
# Warmup Iteration  16: 2091692.807 ops/s
# Warmup Iteration  17: 1833680.631 ops/s
# Warmup Iteration  18: 2112872.541 ops/s
# Warmup Iteration  19: 2067614.558 ops/s
# Warmup Iteration  20: 2204181.837 ops/s
# Warmup Iteration  21: 2059213.816 ops/s
# Warmup Iteration  22: 2196146.737 ops/s
# Warmup Iteration  23: 2170891.562 ops/s
# Warmup Iteration  24: 2074250.690 ops/s
# Warmup Iteration  25: 2209182.183 ops/s
# Warmup Iteration  26: 2075643.942 ops/s
# Warmup Iteration  27: 2116027.247 ops/s
# Warmup Iteration  28: 2200550.562 ops/s
# Warmup Iteration  29: 2090317.383 ops/s
# Warmup Iteration  30: 2173338.323 ops/s
Iteration   1: 2113115.418 ops/s
Iteration   2: 2164146.101 ops/s
Iteration   3: 2186139.646 ops/s
Iteration   4: 2141831.481 ops/s
Iteration   5: 2183894.472 ops/s
Iteration   6: 2106009.531 ops/s
Iteration   7: 2156817.444 ops/s
Iteration   8: 2135881.072 ops/s
Iteration   9: 2097358.840 ops/s
Iteration  10: 2171571.560 ops/s
Iteration  11: 2128716.765 ops/s
Iteration  12: 2170938.729 ops/s
Iteration  13: 2111683.602 ops/s
Iteration  14: 2103459.039 ops/s
Iteration  15: 2131185.579 ops/s
Iteration  16: 2217618.311 ops/s
Iteration  17: 2030150.050 ops/s
Iteration  18: 2191535.825 ops/s
Iteration  19: 2105416.600 ops/s
Iteration  20: 2210784.883 ops/s
Iteration  21: 2071820.746 ops/s
Iteration  22: 2148788.670 ops/s
Iteration  23: 2068277.028 ops/s
Iteration  24: 2100537.863 ops/s
Iteration  25: 2153042.236 ops/s
Iteration  26: 2081593.744 ops/s
Iteration  27: 2148222.207 ops/s
Iteration  28: 2149013.262 ops/s
Iteration  29: 2022662.463 ops/s
Iteration  30: 2164199.739 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacity":
  2132213.764 ±(99.9%) 32252.380 ops/s [Average]
  (min, avg, max) = (2022662.463, 2132213.764, 2217618.311), stdev = 48273.847
  CI (99.9%): [2099961.384, 2164466.143] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
FlowableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacity  thrpt   30  2132213.764 ± 32252.380  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_withFollowingFirstFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_withFollowingFirstFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 268172.713 ops/s
# Warmup Iteration   2: 1391829.589 ops/s
# Warmup Iteration   3: 2499757.618 ops/s
# Warmup Iteration   4: 2227137.510 ops/s
# Warmup Iteration   5: 2473794.189 ops/s
# Warmup Iteration   6: 2722366.793 ops/s
# Warmup Iteration   7: 2578985.133 ops/s
# Warmup Iteration   8: 2737051.383 ops/s
# Warmup Iteration   9: 2632463.154 ops/s
# Warmup Iteration  10: 2575217.885 ops/s
# Warmup Iteration  11: 2629622.872 ops/s
# Warmup Iteration  12: 2658121.784 ops/s
# Warmup Iteration  13: 2682708.471 ops/s
# Warmup Iteration  14: 2585552.341 ops/s
# Warmup Iteration  15: 2658425.941 ops/s
# Warmup Iteration  16: 2731176.596 ops/s
# Warmup Iteration  17: 2575393.574 ops/s
# Warmup Iteration  18: 2636973.235 ops/s
# Warmup Iteration  19: 2687451.273 ops/s
# Warmup Iteration  20: 2601161.496 ops/s
# Warmup Iteration  21: 2698517.710 ops/s
# Warmup Iteration  22: 2608546.135 ops/s
# Warmup Iteration  23: 2604378.414 ops/s
# Warmup Iteration  24: 2706024.831 ops/s
# Warmup Iteration  25: 2747139.227 ops/s
# Warmup Iteration  26: 2603932.645 ops/s
# Warmup Iteration  27: 2716529.734 ops/s
# Warmup Iteration  28: 2568642.524 ops/s
# Warmup Iteration  29: 2643814.225 ops/s
# Warmup Iteration  30: 2697133.248 ops/s
Iteration   1: 2616393.324 ops/s
Iteration   2: 2667198.114 ops/s
Iteration   3: 2644535.060 ops/s
Iteration   4: 2632944.004 ops/s
Iteration   5: 2637148.966 ops/s
Iteration   6: 2700738.420 ops/s
Iteration   7: 2697041.774 ops/s
Iteration   8: 2630671.820 ops/s
Iteration   9: 2680851.036 ops/s
Iteration  10: 2508867.211 ops/s
Iteration  11: 2737755.069 ops/s
Iteration  12: 2654959.472 ops/s
Iteration  13: 2586345.876 ops/s
Iteration  14: 2655934.192 ops/s
Iteration  15: 2655425.135 ops/s
Iteration  16: 2634243.485 ops/s
Iteration  17: 2708332.762 ops/s
Iteration  18: 2650955.680 ops/s
Iteration  19: 2599561.059 ops/s
Iteration  20: 2715246.119 ops/s
Iteration  21: 2604464.433 ops/s
Iteration  22: 2736768.570 ops/s
Iteration  23: 2598647.568 ops/s
Iteration  24: 2673921.713 ops/s
Iteration  25: 2656663.046 ops/s
Iteration  26: 2641542.264 ops/s
Iteration  27: 2650787.437 ops/s
Iteration  28: 2581960.042 ops/s
Iteration  29: 2733244.723 ops/s
Iteration  30: 2571928.801 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_withFollowingFirstFlowable":
  2648835.906 ±(99.9%) 35261.454 ops/s [Average]
  (min, avg, max) = (2508867.211, 2648835.906, 2737755.069), stdev = 52777.689
  CI (99.9%): [2613574.451, 2684097.360] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableToSortedListTest._Benchmark.benchmark_withFollowingFirstFlowable  thrpt   30  2648835.906 ± 35261.454  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_toSortedListCapacity$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_toSortedListCapacity

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 278466.406 ops/s
# Warmup Iteration   2: 1413496.988 ops/s
# Warmup Iteration   3: 1921198.034 ops/s
# Warmup Iteration   4: 2214726.687 ops/s
# Warmup Iteration   5: 2274943.110 ops/s
# Warmup Iteration   6: 2110624.792 ops/s
# Warmup Iteration   7: 2008695.692 ops/s
# Warmup Iteration   8: 2096899.535 ops/s
# Warmup Iteration   9: 2137373.886 ops/s
# Warmup Iteration  10: 2193903.014 ops/s
# Warmup Iteration  11: 2210159.756 ops/s
# Warmup Iteration  12: 1717378.462 ops/s
# Warmup Iteration  13: 2262027.660 ops/s
# Warmup Iteration  14: 2187356.592 ops/s
# Warmup Iteration  15: 2213977.879 ops/s
# Warmup Iteration  16: 2291339.216 ops/s
# Warmup Iteration  17: 2130630.863 ops/s
# Warmup Iteration  18: 2224566.185 ops/s
# Warmup Iteration  19: 2185656.262 ops/s
# Warmup Iteration  20: 2235960.855 ops/s
# Warmup Iteration  21: 2302349.539 ops/s
# Warmup Iteration  22: 2163565.008 ops/s
# Warmup Iteration  23: 2237414.399 ops/s
# Warmup Iteration  24: 2142350.107 ops/s
# Warmup Iteration  25: 2228820.523 ops/s
# Warmup Iteration  26: 2266662.025 ops/s
# Warmup Iteration  27: 2231699.435 ops/s
# Warmup Iteration  28: 2264399.289 ops/s
# Warmup Iteration  29: 2203286.750 ops/s
# Warmup Iteration  30: 2182620.750 ops/s
Iteration   1: 2291138.859 ops/s
Iteration   2: 2150719.297 ops/s
Iteration   3: 2185740.398 ops/s
Iteration   4: 2263713.661 ops/s
Iteration   5: 2265428.059 ops/s
Iteration   6: 2184558.044 ops/s
Iteration   7: 2216464.047 ops/s
Iteration   8: 2240979.151 ops/s
Iteration   9: 2205494.262 ops/s
Iteration  10: 2263040.837 ops/s
Iteration  11: 2160736.426 ops/s
Iteration  12: 2157605.789 ops/s
Iteration  13: 2258586.355 ops/s
Iteration  14: 2294910.119 ops/s
Iteration  15: 2263917.721 ops/s
Iteration  16: 2159031.383 ops/s
Iteration  17: 2240387.848 ops/s
Iteration  18: 2124524.460 ops/s
Iteration  19: 2222984.701 ops/s
Iteration  20: 2241417.979 ops/s
Iteration  21: 2161298.043 ops/s
Iteration  22: 2205494.161 ops/s
Iteration  23: 2294815.902 ops/s
Iteration  24: 2152732.508 ops/s
Iteration  25: 2251044.049 ops/s
Iteration  26: 2273492.013 ops/s
Iteration  27: 2198128.686 ops/s
Iteration  28: 2200700.833 ops/s
Iteration  29: 2267110.588 ops/s
Iteration  30: 2204767.491 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_toSortedListCapacity":
  2220032.122 ±(99.9%) 32786.402 ops/s [Average]
  (min, avg, max) = (2124524.460, 2220032.122, 2294910.119), stdev = 49073.147
  CI (99.9%): [2187245.720, 2252818.524] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableToSortedListTest._Benchmark.benchmark_toSortedListCapacity  thrpt   30  2220032.122 ± 32786.402  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestThroughTakeThatReducesRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestThroughTakeThatReducesRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2520629.659 ops/s
# Warmup Iteration   2: 5412904.144 ops/s
# Warmup Iteration   3: 7133058.354 ops/s
# Warmup Iteration   4: 7158225.821 ops/s
# Warmup Iteration   5: 7038962.088 ops/s
# Warmup Iteration   6: 7243726.081 ops/s
# Warmup Iteration   7: 7206513.324 ops/s
# Warmup Iteration   8: 7088819.752 ops/s
# Warmup Iteration   9: 7179209.077 ops/s
# Warmup Iteration  10: 6884852.592 ops/s
# Warmup Iteration  11: 7135781.721 ops/s
# Warmup Iteration  12: 7053133.017 ops/s
# Warmup Iteration  13: 6938602.721 ops/s
# Warmup Iteration  14: 7155935.346 ops/s
# Warmup Iteration  15: 6921540.859 ops/s
# Warmup Iteration  16: 7069596.516 ops/s
# Warmup Iteration  17: 7330598.726 ops/s
# Warmup Iteration  18: 6802516.061 ops/s
# Warmup Iteration  19: 7119779.591 ops/s
# Warmup Iteration  20: 7256796.676 ops/s
# Warmup Iteration  21: 6892871.379 ops/s
# Warmup Iteration  22: 7169162.071 ops/s
# Warmup Iteration  23: 7039570.768 ops/s
# Warmup Iteration  24: 7224719.143 ops/s
# Warmup Iteration  25: 7350189.535 ops/s
# Warmup Iteration  26: 7236713.701 ops/s
# Warmup Iteration  27: 7074585.278 ops/s
# Warmup Iteration  28: 7053981.523 ops/s
# Warmup Iteration  29: 7370842.721 ops/s
# Warmup Iteration  30: 7206152.107 ops/s
Iteration   1: 6991573.024 ops/s
Iteration   2: 7369905.690 ops/s
Iteration   3: 7073465.498 ops/s
Iteration   4: 7256527.545 ops/s
Iteration   5: 6828617.749 ops/s
Iteration   6: 7164932.380 ops/s
Iteration   7: 7368910.776 ops/s
Iteration   8: 6869571.938 ops/s
Iteration   9: 7244385.973 ops/s
Iteration  10: 7144042.177 ops/s
Iteration  11: 7356817.258 ops/s
Iteration  12: 7448754.719 ops/s
Iteration  13: 6914464.491 ops/s
Iteration  14: 7090262.091 ops/s
Iteration  15: 7005542.627 ops/s
Iteration  16: 7002454.783 ops/s
Iteration  17: 7398064.503 ops/s
Iteration  18: 7084258.240 ops/s
Iteration  19: 7367704.966 ops/s
Iteration  20: 7049912.558 ops/s
Iteration  21: 7305872.121 ops/s
Iteration  22: 7098533.653 ops/s
Iteration  23: 7276464.176 ops/s
Iteration  24: 7355053.337 ops/s
Iteration  25: 6998506.189 ops/s
Iteration  26: 7530411.166 ops/s
Iteration  27: 7398517.493 ops/s
Iteration  28: 7139172.410 ops/s
Iteration  29: 7404235.704 ops/s
Iteration  30: 6970158.478 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestThroughTakeThatReducesRequest":
  7183569.790 ±(99.9%) 127995.483 ops/s [Average]
  (min, avg, max) = (6828617.749, 7183569.790, 7530411.166), stdev = 191577.628
  CI (99.9%): [7055574.307, 7311565.274] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score        Error  Units
FlowableSubscriberTest._Benchmark.benchmark_requestThroughTakeThatReducesRequest  thrpt   30  7183569.790 ± 127995.483  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestThroughTakeWhereRequestIsSmallerThanTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestThroughTakeWhereRequestIsSmallerThanTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1838167.548 ops/s
# Warmup Iteration   2: 5169103.759 ops/s
# Warmup Iteration   3: 7220910.011 ops/s
# Warmup Iteration   4: 7093818.155 ops/s
# Warmup Iteration   5: 7262161.137 ops/s
# Warmup Iteration   6: 6932011.401 ops/s
# Warmup Iteration   7: 6411857.129 ops/s
# Warmup Iteration   8: 6927609.308 ops/s
# Warmup Iteration   9: 7063349.181 ops/s
# Warmup Iteration  10: 6976102.078 ops/s
# Warmup Iteration  11: 7177351.948 ops/s
# Warmup Iteration  12: 7393706.013 ops/s
# Warmup Iteration  13: 6984319.914 ops/s
# Warmup Iteration  14: 7388765.525 ops/s
# Warmup Iteration  15: 6846567.702 ops/s
# Warmup Iteration  16: 7397850.277 ops/s
# Warmup Iteration  17: 7041058.672 ops/s
# Warmup Iteration  18: 6924122.180 ops/s
# Warmup Iteration  19: 7284003.911 ops/s
# Warmup Iteration  20: 7134911.577 ops/s
# Warmup Iteration  21: 7341906.238 ops/s
# Warmup Iteration  22: 7023652.393 ops/s
# Warmup Iteration  23: 7195376.016 ops/s
# Warmup Iteration  24: 7231658.369 ops/s
# Warmup Iteration  25: 7207538.172 ops/s
# Warmup Iteration  26: 7221943.904 ops/s
# Warmup Iteration  27: 7147688.268 ops/s
# Warmup Iteration  28: 7134042.761 ops/s
# Warmup Iteration  29: 7403767.455 ops/s
# Warmup Iteration  30: 7272579.157 ops/s
Iteration   1: 6923370.288 ops/s
Iteration   2: 7365463.117 ops/s
Iteration   3: 7107877.260 ops/s
Iteration   4: 6748918.452 ops/s
Iteration   5: 7121841.648 ops/s
Iteration   6: 7127608.052 ops/s
Iteration   7: 7152384.526 ops/s
Iteration   8: 7120341.773 ops/s
Iteration   9: 7094684.807 ops/s
Iteration  10: 7245123.828 ops/s
Iteration  11: 7050911.588 ops/s
Iteration  12: 7122500.534 ops/s
Iteration  13: 7094174.002 ops/s
Iteration  14: 6972227.743 ops/s
Iteration  15: 7338225.308 ops/s
Iteration  16: 6823456.409 ops/s
Iteration  17: 7062732.363 ops/s
Iteration  18: 7280561.809 ops/s
Iteration  19: 7210384.479 ops/s
Iteration  20: 6901671.173 ops/s
Iteration  21: 7689733.288 ops/s
Iteration  22: 7069462.639 ops/s
Iteration  23: 7232534.024 ops/s
Iteration  24: 7574052.919 ops/s
Iteration  25: 6874652.074 ops/s
Iteration  26: 7236210.166 ops/s
Iteration  27: 6864431.860 ops/s
Iteration  28: 7130024.976 ops/s
Iteration  29: 7434615.291 ops/s
Iteration  30: 7013996.530 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestThroughTakeWhereRequestIsSmallerThanTake":
  7132805.764 ±(99.9%) 141037.082 ops/s [Average]
  (min, avg, max) = (6748918.452, 7132805.764, 7689733.288), stdev = 211097.681
  CI (99.9%): [6991768.682, 7273842.846] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score        Error  Units
FlowableSubscriberTest._Benchmark.benchmark_requestThroughTakeWhereRequestIsSmallerThanTake  thrpt   30  7132805.764 ± 141037.082  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_withBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_withBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 736117.082 ops/s
# Warmup Iteration   2: 3223967.976 ops/s
# Warmup Iteration   3: 3643774.384 ops/s
# Warmup Iteration   4: 4115890.667 ops/s
# Warmup Iteration   5: 4179765.513 ops/s
# Warmup Iteration   6: 4094662.011 ops/s
# Warmup Iteration   7: 4315199.501 ops/s
# Warmup Iteration   8: 4156309.922 ops/s
# Warmup Iteration   9: 4020755.409 ops/s
# Warmup Iteration  10: 4320867.404 ops/s
# Warmup Iteration  11: 4051970.000 ops/s
# Warmup Iteration  12: 4170988.143 ops/s
# Warmup Iteration  13: 4294210.935 ops/s
# Warmup Iteration  14: 4228804.017 ops/s
# Warmup Iteration  15: 4292244.947 ops/s
# Warmup Iteration  16: 4160627.470 ops/s
# Warmup Iteration  17: 4098313.340 ops/s
# Warmup Iteration  18: 4249490.335 ops/s
# Warmup Iteration  19: 4232340.647 ops/s
# Warmup Iteration  20: 4237061.873 ops/s
# Warmup Iteration  21: 4019105.077 ops/s
# Warmup Iteration  22: 4220587.484 ops/s
# Warmup Iteration  23: 4503596.844 ops/s
# Warmup Iteration  24: 4122285.503 ops/s
# Warmup Iteration  25: 4086332.499 ops/s
# Warmup Iteration  26: 4255161.367 ops/s
# Warmup Iteration  27: 4079648.661 ops/s
# Warmup Iteration  28: 4164428.090 ops/s
# Warmup Iteration  29: 4221208.913 ops/s
# Warmup Iteration  30: 4110450.878 ops/s
Iteration   1: 4285615.462 ops/s
Iteration   2: 4066141.701 ops/s
Iteration   3: 4172721.032 ops/s
Iteration   4: 4278685.938 ops/s
Iteration   5: 4137857.414 ops/s
Iteration   6: 4288099.995 ops/s
Iteration   7: 4138293.022 ops/s
Iteration   8: 4288921.360 ops/s
Iteration   9: 4289553.951 ops/s
Iteration  10: 4155634.084 ops/s
Iteration  11: 4211759.211 ops/s
Iteration  12: 4176803.090 ops/s
Iteration  13: 4212555.095 ops/s
Iteration  14: 4311348.777 ops/s
Iteration  15: 4241502.162 ops/s
Iteration  16: 4203756.589 ops/s
Iteration  17: 4200079.240 ops/s
Iteration  18: 4362116.322 ops/s
Iteration  19: 4069620.824 ops/s
Iteration  20: 4162954.577 ops/s
Iteration  21: 4344645.417 ops/s
Iteration  22: 4169992.410 ops/s
Iteration  23: 4292306.412 ops/s
Iteration  24: 4099276.632 ops/s
Iteration  25: 4361991.611 ops/s
Iteration  26: 4140450.218 ops/s
Iteration  27: 4075814.027 ops/s
Iteration  28: 4226574.604 ops/s
Iteration  29: 4096039.336 ops/s
Iteration  30: 4200037.352 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_withBackpressure":
  4208704.929 ±(99.9%) 58201.201 ops/s [Average]
  (min, avg, max) = (4066141.701, 4208704.929, 4362116.322), stdev = 87112.824
  CI (99.9%): [4150503.728, 4266906.129] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_withBackpressure  thrpt   30  4208704.929 ± 58201.201  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 225011.042 ops/s
# Warmup Iteration   2: 1545559.320 ops/s
# Warmup Iteration   3: 2478277.047 ops/s
# Warmup Iteration   4: 2928877.396 ops/s
# Warmup Iteration   5: 2838520.869 ops/s
# Warmup Iteration   6: 2870237.443 ops/s
# Warmup Iteration   7: 2986218.373 ops/s
# Warmup Iteration   8: 2906863.665 ops/s
# Warmup Iteration   9: 2795764.375 ops/s
# Warmup Iteration  10: 2929226.910 ops/s
# Warmup Iteration  11: 2924447.761 ops/s
# Warmup Iteration  12: 2845028.067 ops/s
# Warmup Iteration  13: 2862398.757 ops/s
# Warmup Iteration  14: 2911462.946 ops/s
# Warmup Iteration  15: 2958147.547 ops/s
# Warmup Iteration  16: 2846838.365 ops/s
# Warmup Iteration  17: 2935560.314 ops/s
# Warmup Iteration  18: 2999843.004 ops/s
# Warmup Iteration  19: 2837469.502 ops/s
# Warmup Iteration  20: 2881394.314 ops/s
# Warmup Iteration  21: 2994664.140 ops/s
# Warmup Iteration  22: 2843721.611 ops/s
# Warmup Iteration  23: 2835559.619 ops/s
# Warmup Iteration  24: 2900956.142 ops/s
# Warmup Iteration  25: 2837055.147 ops/s
# Warmup Iteration  26: 2908190.458 ops/s
# Warmup Iteration  27: 2947090.900 ops/s
# Warmup Iteration  28: 2837405.961 ops/s
# Warmup Iteration  29: 2954741.875 ops/s
# Warmup Iteration  30: 2802172.890 ops/s
Iteration   1: 2903459.560 ops/s
Iteration   2: 2958716.229 ops/s
Iteration   3: 2854901.490 ops/s
Iteration   4: 2984530.158 ops/s
Iteration   5: 2814312.532 ops/s
Iteration   6: 2801116.906 ops/s
Iteration   7: 2882496.714 ops/s
Iteration   8: 2864005.035 ops/s
Iteration   9: 2978648.570 ops/s
Iteration  10: 3030107.284 ops/s
Iteration  11: 2835401.056 ops/s
Iteration  12: 2900509.246 ops/s
Iteration  13: 2968477.416 ops/s
Iteration  14: 2806892.844 ops/s
Iteration  15: 2851210.493 ops/s
Iteration  16: 2994534.159 ops/s
Iteration  17: 2819752.301 ops/s
Iteration  18: 2938101.103 ops/s
Iteration  19: 2793797.143 ops/s
Iteration  20: 2899177.970 ops/s
Iteration  21: 2942720.986 ops/s
Iteration  22: 2916193.480 ops/s
Iteration  23: 2734438.402 ops/s
Iteration  24: 3002962.632 ops/s
Iteration  25: 2977923.915 ops/s
Iteration  26: 2847486.963 ops/s
Iteration  27: 3006085.199 ops/s
Iteration  28: 2798411.675 ops/s
Iteration  29: 2857622.917 ops/s
Iteration  30: 2887439.972 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_dispose":
  2895047.812 ±(99.9%) 51783.800 ops/s [Average]
  (min, avg, max) = (2734438.402, 2895047.812, 3030107.284), stdev = 77507.560
  CI (99.9%): [2843264.012, 2946831.612] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FlowableCollectTest._Benchmark.benchmark_dispose  thrpt   30  2895047.812 ± 51783.800  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorMultipleElements$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorMultipleElements

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1241574.738 ops/s
# Warmup Iteration   2: 3823546.775 ops/s
# Warmup Iteration   3: 4766384.841 ops/s
# Warmup Iteration   4: 4920980.912 ops/s
# Warmup Iteration   5: 5145982.345 ops/s
# Warmup Iteration   6: 5155016.528 ops/s
# Warmup Iteration   7: 4919756.830 ops/s
# Warmup Iteration   8: 5193624.760 ops/s
# Warmup Iteration   9: 4853715.010 ops/s
# Warmup Iteration  10: 5148250.211 ops/s
# Warmup Iteration  11: 5127912.643 ops/s
# Warmup Iteration  12: 5027816.798 ops/s
# Warmup Iteration  13: 5121321.150 ops/s
# Warmup Iteration  14: 4956991.810 ops/s
# Warmup Iteration  15: 5222395.518 ops/s
# Warmup Iteration  16: 5040010.995 ops/s
# Warmup Iteration  17: 5007931.268 ops/s
# Warmup Iteration  18: 5197921.755 ops/s
# Warmup Iteration  19: 5081690.175 ops/s
# Warmup Iteration  20: 5137657.608 ops/s
# Warmup Iteration  21: 5000629.849 ops/s
# Warmup Iteration  22: 5087538.754 ops/s
# Warmup Iteration  23: 5265793.188 ops/s
# Warmup Iteration  24: 5080135.440 ops/s
# Warmup Iteration  25: 4695429.251 ops/s
# Warmup Iteration  26: 4944873.830 ops/s
# Warmup Iteration  27: 5192493.024 ops/s
# Warmup Iteration  28: 5136633.503 ops/s
# Warmup Iteration  29: 5002816.032 ops/s
# Warmup Iteration  30: 5231521.998 ops/s
Iteration   1: 4981660.642 ops/s
Iteration   2: 5067710.368 ops/s
Iteration   3: 5249381.091 ops/s
Iteration   4: 4967700.481 ops/s
Iteration   5: 5209772.304 ops/s
Iteration   6: 4962371.232 ops/s
Iteration   7: 5157170.701 ops/s
Iteration   8: 5014859.016 ops/s
Iteration   9: 5055666.822 ops/s
Iteration  10: 5100101.014 ops/s
Iteration  11: 4978569.799 ops/s
Iteration  12: 4955267.565 ops/s
Iteration  13: 5149696.833 ops/s
Iteration  14: 5264600.725 ops/s
Iteration  15: 4891789.220 ops/s
Iteration  16: 5288872.380 ops/s
Iteration  17: 5036597.378 ops/s
Iteration  18: 5254245.792 ops/s
Iteration  19: 5085107.648 ops/s
Iteration  20: 5118652.233 ops/s
Iteration  21: 5340256.642 ops/s
Iteration  22: 4948326.860 ops/s
Iteration  23: 5270180.390 ops/s
Iteration  24: 4958476.655 ops/s
Iteration  25: 5100648.925 ops/s
Iteration  26: 5165584.166 ops/s
Iteration  27: 4971560.733 ops/s
Iteration  28: 4191877.620 ops/s
Iteration  29: 4882618.421 ops/s
Iteration  30: 5097740.001 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorMultipleElements":
  5057235.455 ±(99.9%) 138075.400 ops/s [Average]
  (min, avg, max) = (4191877.620, 5057235.455, 5340256.642), stdev = 206664.774
  CI (99.9%): [4919160.055, 5195310.855] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorMultipleElements  thrpt   30  5057235.455 ± 138075.400  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_backpressureHonoredFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_backpressureHonoredFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 218724.836 ops/s
# Warmup Iteration   2: 704679.682 ops/s
# Warmup Iteration   3: 2211643.064 ops/s
# Warmup Iteration   4: 2220421.663 ops/s
# Warmup Iteration   5: 2709884.979 ops/s
# Warmup Iteration   6: 2495757.146 ops/s
# Warmup Iteration   7: 2645038.647 ops/s
# Warmup Iteration   8: 2611302.029 ops/s
# Warmup Iteration   9: 2512102.196 ops/s
# Warmup Iteration  10: 2660640.313 ops/s
# Warmup Iteration  11: 2572230.032 ops/s
# Warmup Iteration  12: 2571042.235 ops/s
# Warmup Iteration  13: 2621475.363 ops/s
# Warmup Iteration  14: 2594563.240 ops/s
# Warmup Iteration  15: 2590930.440 ops/s
# Warmup Iteration  16: 2565592.530 ops/s
# Warmup Iteration  17: 2653027.700 ops/s
# Warmup Iteration  18: 2504253.040 ops/s
# Warmup Iteration  19: 2710994.011 ops/s
# Warmup Iteration  20: 2633697.695 ops/s
# Warmup Iteration  21: 2679477.626 ops/s
# Warmup Iteration  22: 2571689.324 ops/s
# Warmup Iteration  23: 2535122.920 ops/s
# Warmup Iteration  24: 2571558.921 ops/s
# Warmup Iteration  25: 2703324.198 ops/s
# Warmup Iteration  26: 2530687.252 ops/s
# Warmup Iteration  27: 2587539.622 ops/s
# Warmup Iteration  28: 2678888.125 ops/s
# Warmup Iteration  29: 2550502.087 ops/s
# Warmup Iteration  30: 2651199.544 ops/s
Iteration   1: 2680667.204 ops/s
Iteration   2: 2517786.115 ops/s
Iteration   3: 2612096.735 ops/s
Iteration   4: 2674563.221 ops/s
Iteration   5: 2561334.441 ops/s
Iteration   6: 2615442.289 ops/s
Iteration   7: 2731621.011 ops/s
Iteration   8: 2500668.830 ops/s
Iteration   9: 2635454.054 ops/s
Iteration  10: 2641630.536 ops/s
Iteration  11: 2630557.118 ops/s
Iteration  12: 2692094.176 ops/s
Iteration  13: 2581791.683 ops/s
Iteration  14: 2599071.272 ops/s
Iteration  15: 2552857.414 ops/s
Iteration  16: 2597224.435 ops/s
Iteration  17: 2508169.960 ops/s
Iteration  18: 2556546.956 ops/s
Iteration  19: 2700170.111 ops/s
Iteration  20: 2541200.463 ops/s
Iteration  21: 2688043.008 ops/s
Iteration  22: 2571288.110 ops/s
Iteration  23: 2582256.700 ops/s
Iteration  24: 2610608.921 ops/s
Iteration  25: 2672731.508 ops/s
Iteration  26: 2573932.781 ops/s
Iteration  27: 2658244.709 ops/s
Iteration  28: 2636435.630 ops/s
Iteration  29: 2472969.582 ops/s
Iteration  30: 2676538.307 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_backpressureHonoredFlowable":
  2609133.243 ±(99.9%) 44014.689 ops/s [Average]
  (min, avg, max) = (2472969.582, 2609133.243, 2731621.011), stdev = 65879.120
  CI (99.9%): [2565118.554, 2653147.932] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableToListTest._Benchmark.benchmark_backpressureHonoredFlowable  thrpt   30  2609133.243 ± 44014.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_justSingleJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_justSingleJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 494316.376 ops/s
# Warmup Iteration   2: 1858834.926 ops/s
# Warmup Iteration   3: 2408780.642 ops/s
# Warmup Iteration   4: 2576304.946 ops/s
# Warmup Iteration   5: 2725763.290 ops/s
# Warmup Iteration   6: 2621072.690 ops/s
# Warmup Iteration   7: 2669359.407 ops/s
# Warmup Iteration   8: 2653012.673 ops/s
# Warmup Iteration   9: 2692292.365 ops/s
# Warmup Iteration  10: 2754480.630 ops/s
# Warmup Iteration  11: 2554848.338 ops/s
# Warmup Iteration  12: 2535459.650 ops/s
# Warmup Iteration  13: 2718306.449 ops/s
# Warmup Iteration  14: 2589424.530 ops/s
# Warmup Iteration  15: 2740796.810 ops/s
# Warmup Iteration  16: 2704954.432 ops/s
# Warmup Iteration  17: 2617328.945 ops/s
# Warmup Iteration  18: 2659880.870 ops/s
# Warmup Iteration  19: 2784183.905 ops/s
# Warmup Iteration  20: 2607268.767 ops/s
# Warmup Iteration  21: 2700042.331 ops/s
# Warmup Iteration  22: 2643994.386 ops/s
# Warmup Iteration  23: 2721469.529 ops/s
# Warmup Iteration  24: 2679622.528 ops/s
# Warmup Iteration  25: 2676585.661 ops/s
# Warmup Iteration  26: 2635958.305 ops/s
# Warmup Iteration  27: 2738528.587 ops/s
# Warmup Iteration  28: 2758933.147 ops/s
# Warmup Iteration  29: 2587204.800 ops/s
# Warmup Iteration  30: 2632780.772 ops/s
Iteration   1: 2735480.724 ops/s
Iteration   2: 2616351.756 ops/s
Iteration   3: 2654305.487 ops/s
Iteration   4: 2775948.731 ops/s
Iteration   5: 2618311.169 ops/s
Iteration   6: 2591790.448 ops/s
Iteration   7: 2729751.591 ops/s
Iteration   8: 2584524.308 ops/s
Iteration   9: 2726944.175 ops/s
Iteration  10: 2595246.060 ops/s
Iteration  11: 2636394.437 ops/s
Iteration  12: 2683007.642 ops/s
Iteration  13: 2645718.326 ops/s
Iteration  14: 2630425.396 ops/s
Iteration  15: 2730236.125 ops/s
Iteration  16: 2552882.793 ops/s
Iteration  17: 2748587.212 ops/s
Iteration  18: 2565282.096 ops/s
Iteration  19: 2598798.837 ops/s
Iteration  20: 2726707.348 ops/s
Iteration  21: 2617022.371 ops/s
Iteration  22: 2384109.101 ops/s
Iteration  23: 2461401.344 ops/s
Iteration  24: 2616145.191 ops/s
Iteration  25: 2653211.281 ops/s
Iteration  26: 2713934.773 ops/s
Iteration  27: 2678961.138 ops/s
Iteration  28: 2619890.226 ops/s
Iteration  29: 2776051.987 ops/s
Iteration  30: 2644440.929 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_justSingleJust":
  2643728.767 ±(99.9%) 58233.036 ops/s [Average]
  (min, avg, max) = (2384109.101, 2643728.767, 2776051.987), stdev = 87160.474
  CI (99.9%): [2585495.730, 2701961.803] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableStartWithTest._Benchmark.benchmark_justSingleJust  thrpt   30  2643728.767 ± 58233.036  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1341099.321 ops/s
# Warmup Iteration   2: 4514705.235 ops/s
# Warmup Iteration   3: 6716042.280 ops/s
# Warmup Iteration   4: 6330135.938 ops/s
# Warmup Iteration   5: 6342198.321 ops/s
# Warmup Iteration   6: 6444447.759 ops/s
# Warmup Iteration   7: 6663485.434 ops/s
# Warmup Iteration   8: 6304475.216 ops/s
# Warmup Iteration   9: 6626443.799 ops/s
# Warmup Iteration  10: 6767894.429 ops/s
# Warmup Iteration  11: 6147278.267 ops/s
# Warmup Iteration  12: 6640611.715 ops/s
# Warmup Iteration  13: 6350887.068 ops/s
# Warmup Iteration  14: 6552959.731 ops/s
# Warmup Iteration  15: 6411818.338 ops/s
# Warmup Iteration  16: 6556978.193 ops/s
# Warmup Iteration  17: 6469860.384 ops/s
# Warmup Iteration  18: 6462415.674 ops/s
# Warmup Iteration  19: 6679788.884 ops/s
# Warmup Iteration  20: 6155828.153 ops/s
# Warmup Iteration  21: 6777187.223 ops/s
# Warmup Iteration  22: 6705738.606 ops/s
# Warmup Iteration  23: 6770342.980 ops/s
# Warmup Iteration  24: 6276889.103 ops/s
# Warmup Iteration  25: 6547752.158 ops/s
# Warmup Iteration  26: 6857082.921 ops/s
# Warmup Iteration  27: 6449738.382 ops/s
# Warmup Iteration  28: 6776044.558 ops/s
# Warmup Iteration  29: 6587137.027 ops/s
# Warmup Iteration  30: 6276689.330 ops/s
Iteration   1: 6744159.956 ops/s
Iteration   2: 6405281.388 ops/s
Iteration   3: 6609380.306 ops/s
Iteration   4: 6534866.268 ops/s
Iteration   5: 6435596.857 ops/s
Iteration   6: 6565309.979 ops/s
Iteration   7: 6286931.746 ops/s
Iteration   8: 6582698.742 ops/s
Iteration   9: 6809665.701 ops/s
Iteration  10: 6239686.779 ops/s
Iteration  11: 6670101.866 ops/s
Iteration  12: 6270313.700 ops/s
Iteration  13: 6485265.865 ops/s
Iteration  14: 6506580.988 ops/s
Iteration  15: 6391352.794 ops/s
Iteration  16: 6446861.310 ops/s
Iteration  17: 6623496.852 ops/s
Iteration  18: 6410476.212 ops/s
Iteration  19: 6458854.789 ops/s
Iteration  20: 6551300.320 ops/s
Iteration  21: 6633123.631 ops/s
Iteration  22: 6400373.364 ops/s
Iteration  23: 6569480.280 ops/s
Iteration  24: 6595700.728 ops/s
Iteration  25: 6332630.068 ops/s
Iteration  26: 6745436.955 ops/s
Iteration  27: 6239935.051 ops/s
Iteration  28: 6386461.760 ops/s
Iteration  29: 6730334.416 ops/s
Iteration  30: 6234699.011 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromPublisher":
  6496545.256 ±(99.9%) 108422.959 ops/s [Average]
  (min, avg, max) = (6234699.011, 6496545.256, 6809665.701), stdev = 162282.392
  CI (99.9%): [6388122.298, 6604968.215] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
ObservableFromTest._Benchmark.benchmark_fromPublisher  thrpt   30  6496545.256 ± 108422.959  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCountTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCountTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 595752.241 ops/s
# Warmup Iteration   2: 2621355.860 ops/s
# Warmup Iteration   3: 4100352.941 ops/s
# Warmup Iteration   4: 4413182.365 ops/s
# Warmup Iteration   5: 4380730.523 ops/s
# Warmup Iteration   6: 4369081.558 ops/s
# Warmup Iteration   7: 4296442.721 ops/s
# Warmup Iteration   8: 4457600.221 ops/s
# Warmup Iteration   9: 4227805.449 ops/s
# Warmup Iteration  10: 4271452.292 ops/s
# Warmup Iteration  11: 4461090.024 ops/s
# Warmup Iteration  12: 4231453.185 ops/s
# Warmup Iteration  13: 4369857.047 ops/s
# Warmup Iteration  14: 4461959.210 ops/s
# Warmup Iteration  15: 4397025.480 ops/s
# Warmup Iteration  16: 4484866.797 ops/s
# Warmup Iteration  17: 4346823.388 ops/s
# Warmup Iteration  18: 4272948.468 ops/s
# Warmup Iteration  19: 4439834.765 ops/s
# Warmup Iteration  20: 4555940.600 ops/s
# Warmup Iteration  21: 4291929.075 ops/s
# Warmup Iteration  22: 4507518.339 ops/s
# Warmup Iteration  23: 4402060.275 ops/s
# Warmup Iteration  24: 4478415.776 ops/s
# Warmup Iteration  25: 4373977.464 ops/s
# Warmup Iteration  26: 4329890.168 ops/s
# Warmup Iteration  27: 4486669.720 ops/s
# Warmup Iteration  28: 4362051.348 ops/s
# Warmup Iteration  29: 4462870.990 ops/s
# Warmup Iteration  30: 4450218.603 ops/s
Iteration   1: 4266527.438 ops/s
Iteration   2: 4548667.756 ops/s
Iteration   3: 4302964.944 ops/s
Iteration   4: 4295567.698 ops/s
Iteration   5: 4544760.040 ops/s
Iteration   6: 4274369.115 ops/s
Iteration   7: 4447188.937 ops/s
Iteration   8: 4326010.008 ops/s
Iteration   9: 4439384.764 ops/s
Iteration  10: 4302407.430 ops/s
Iteration  11: 4343641.115 ops/s
Iteration  12: 4491247.280 ops/s
Iteration  13: 4413635.206 ops/s
Iteration  14: 4355782.976 ops/s
Iteration  15: 4483335.046 ops/s
Iteration  16: 4502776.997 ops/s
Iteration  17: 3545542.270 ops/s
Iteration  18: 4402757.264 ops/s
Iteration  19: 4370620.666 ops/s
Iteration  20: 4370897.981 ops/s
Iteration  21: 4530874.366 ops/s
Iteration  22: 4302856.464 ops/s
Iteration  23: 4533858.998 ops/s
Iteration  24: 4280000.103 ops/s
Iteration  25: 4523665.118 ops/s
Iteration  26: 4404579.131 ops/s
Iteration  27: 4328483.541 ops/s
Iteration  28: 4555183.392 ops/s
Iteration  29: 4317478.277 ops/s
Iteration  30: 4411222.635 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCountTest._Benchmark.benchmark_dispose":
  4373876.232 ±(99.9%) 122100.651 ops/s [Average]
  (min, avg, max) = (3545542.270, 4373876.232, 4555183.392), stdev = 182754.520
  CI (99.9%): [4251775.581, 4495976.883] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score        Error  Units
FlowableCountTest._Benchmark.benchmark_dispose  thrpt   30  4373876.232 ± 122100.651  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 365911.727 ops/s
# Warmup Iteration   2: 2555569.238 ops/s
# Warmup Iteration   3: 4949730.378 ops/s
# Warmup Iteration   4: 4489858.633 ops/s
# Warmup Iteration   5: 4245611.690 ops/s
# Warmup Iteration   6: 4828998.902 ops/s
# Warmup Iteration   7: 4922553.239 ops/s
# Warmup Iteration   8: 4797133.859 ops/s
# Warmup Iteration   9: 4768160.438 ops/s
# Warmup Iteration  10: 5066748.382 ops/s
# Warmup Iteration  11: 4716423.377 ops/s
# Warmup Iteration  12: 4903114.323 ops/s
# Warmup Iteration  13: 4625182.660 ops/s
# Warmup Iteration  14: 4860289.825 ops/s
# Warmup Iteration  15: 4933502.314 ops/s
# Warmup Iteration  16: 4686988.556 ops/s
# Warmup Iteration  17: 4890120.457 ops/s
# Warmup Iteration  18: 4950546.778 ops/s
# Warmup Iteration  19: 4826970.681 ops/s
# Warmup Iteration  20: 5044227.132 ops/s
# Warmup Iteration  21: 4668165.435 ops/s
# Warmup Iteration  22: 4933384.649 ops/s
# Warmup Iteration  23: 4825528.176 ops/s
# Warmup Iteration  24: 4910631.592 ops/s
# Warmup Iteration  25: 4850907.678 ops/s
# Warmup Iteration  26: 4979994.719 ops/s
# Warmup Iteration  27: 4976366.710 ops/s
# Warmup Iteration  28: 4746585.940 ops/s
# Warmup Iteration  29: 4975872.138 ops/s
# Warmup Iteration  30: 4777723.595 ops/s
Iteration   1: 5058323.540 ops/s
Iteration   2: 4821507.245 ops/s
Iteration   3: 4973135.226 ops/s
Iteration   4: 4813063.047 ops/s
Iteration   5: 4827280.332 ops/s
Iteration   6: 4948304.208 ops/s
Iteration   7: 4734616.212 ops/s
Iteration   8: 4977806.187 ops/s
Iteration   9: 4709861.269 ops/s
Iteration  10: 4986470.352 ops/s
Iteration  11: 4642915.236 ops/s
Iteration  12: 4829694.855 ops/s
Iteration  13: 5016710.530 ops/s
Iteration  14: 4723522.958 ops/s
Iteration  15: 4826998.142 ops/s
Iteration  16: 4881565.040 ops/s
Iteration  17: 5082208.933 ops/s
Iteration  18: 4784206.999 ops/s
Iteration  19: 4918600.530 ops/s
Iteration  20: 4695475.999 ops/s
Iteration  21: 5002053.864 ops/s
Iteration  22: 4843611.413 ops/s
Iteration  23: 4980773.259 ops/s
Iteration  24: 5059622.532 ops/s
Iteration  25: 4763767.960 ops/s
Iteration  26: 4933525.839 ops/s
Iteration  27: 4745818.473 ops/s
Iteration  28: 4722797.545 ops/s
Iteration  29: 4881728.331 ops/s
Iteration  30: 4786609.859 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successEmpty":
  4865752.531 ±(99.9%) 82061.953 ops/s [Average]
  (min, avg, max) = (4642915.236, 4865752.531, 5082208.933), stdev = 122826.477
  CI (99.9%): [4783690.578, 4947814.484] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successEmpty  thrpt   30  4865752.531 ± 82061.953  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithDefaultConstrainsUpstreamRequests$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithDefaultConstrainsUpstreamRequests

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 676937.318 ops/s
# Warmup Iteration   2: 2499773.939 ops/s
# Warmup Iteration   3: 4722592.661 ops/s
# Warmup Iteration   4: 4413622.256 ops/s
# Warmup Iteration   5: 4561385.618 ops/s
# Warmup Iteration   6: 4416169.469 ops/s
# Warmup Iteration   7: 4683189.382 ops/s
# Warmup Iteration   8: 4084216.957 ops/s
# Warmup Iteration   9: 4524378.812 ops/s
# Warmup Iteration  10: 4716168.346 ops/s
# Warmup Iteration  11: 4688261.912 ops/s
# Warmup Iteration  12: 4423387.766 ops/s
# Warmup Iteration  13: 4668899.222 ops/s
# Warmup Iteration  14: 4489878.389 ops/s
# Warmup Iteration  15: 4632420.510 ops/s
# Warmup Iteration  16: 4624955.041 ops/s
# Warmup Iteration  17: 4446766.876 ops/s
# Warmup Iteration  18: 4742694.051 ops/s
# Warmup Iteration  19: 4516178.218 ops/s
# Warmup Iteration  20: 4532449.866 ops/s
# Warmup Iteration  21: 4686615.665 ops/s
# Warmup Iteration  22: 4398528.120 ops/s
# Warmup Iteration  23: 4580674.232 ops/s
# Warmup Iteration  24: 4413897.512 ops/s
# Warmup Iteration  25: 4634553.616 ops/s
# Warmup Iteration  26: 4567783.076 ops/s
# Warmup Iteration  27: 4509409.235 ops/s
# Warmup Iteration  28: 4658852.193 ops/s
# Warmup Iteration  29: 4463793.869 ops/s
# Warmup Iteration  30: 4634961.975 ops/s
Iteration   1: 4503018.560 ops/s
Iteration   2: 4616461.064 ops/s
Iteration   3: 4676710.656 ops/s
Iteration   4: 4440211.497 ops/s
Iteration   5: 4672823.499 ops/s
Iteration   6: 4458942.383 ops/s
Iteration   7: 4675075.287 ops/s
Iteration   8: 4527133.121 ops/s
Iteration   9: 4744331.110 ops/s
Iteration  10: 4475956.671 ops/s
Iteration  11: 4132612.493 ops/s
Iteration  12: 4030575.818 ops/s
Iteration  13: 4737620.547 ops/s
Iteration  14: 4393290.026 ops/s
Iteration  15: 4514747.864 ops/s
Iteration  16: 4597649.869 ops/s
Iteration  17: 4539869.074 ops/s
Iteration  18: 4512500.340 ops/s
Iteration  19: 4680182.735 ops/s
Iteration  20: 4479558.595 ops/s
Iteration  21: 4725448.120 ops/s
Iteration  22: 4431325.555 ops/s
Iteration  23: 4540538.002 ops/s
Iteration  24: 4717842.734 ops/s
Iteration  25: 4476068.714 ops/s
Iteration  26: 4655381.029 ops/s
Iteration  27: 4390323.182 ops/s
Iteration  28: 4444714.857 ops/s
Iteration  29: 4768636.115 ops/s
Iteration  30: 4712945.304 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithDefaultConstrainsUpstreamRequests":
  4542416.494 ±(99.9%) 114189.817 ops/s [Average]
  (min, avg, max) = (4030575.818, 4542416.494, 4768636.115), stdev = 170913.956
  CI (99.9%): [4428226.677, 4656606.311] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtWithDefaultConstrainsUpstreamRequests  thrpt   30  4542416.494 ± 114189.817  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectIntoFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectIntoFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 171275.891 ops/s
# Warmup Iteration   2: 866720.908 ops/s
# Warmup Iteration   3: 1845644.973 ops/s
# Warmup Iteration   4: 1860364.580 ops/s
# Warmup Iteration   5: 2014927.637 ops/s
# Warmup Iteration   6: 1971740.512 ops/s
# Warmup Iteration   7: 1864087.582 ops/s
# Warmup Iteration   8: 1871410.929 ops/s
# Warmup Iteration   9: 1706395.893 ops/s
# Warmup Iteration  10: 1930356.843 ops/s
# Warmup Iteration  11: 1953470.770 ops/s
# Warmup Iteration  12: 1919454.569 ops/s
# Warmup Iteration  13: 2009654.528 ops/s
# Warmup Iteration  14: 1909955.609 ops/s
# Warmup Iteration  15: 1975273.648 ops/s
# Warmup Iteration  16: 2014308.546 ops/s
# Warmup Iteration  17: 1910157.538 ops/s
# Warmup Iteration  18: 1968276.284 ops/s
# Warmup Iteration  19: 1916735.019 ops/s
# Warmup Iteration  20: 2033467.428 ops/s
# Warmup Iteration  21: 1989688.427 ops/s
# Warmup Iteration  22: 1916411.957 ops/s
# Warmup Iteration  23: 2001883.186 ops/s
# Warmup Iteration  24: 1939879.634 ops/s
# Warmup Iteration  25: 1893296.989 ops/s
# Warmup Iteration  26: 1987622.970 ops/s
# Warmup Iteration  27: 1996338.234 ops/s
# Warmup Iteration  28: 1963242.761 ops/s
# Warmup Iteration  29: 1991584.553 ops/s
# Warmup Iteration  30: 1936123.869 ops/s
Iteration   1: 1915624.451 ops/s
Iteration   2: 2027809.748 ops/s
Iteration   3: 1924514.314 ops/s
Iteration   4: 1943531.007 ops/s
Iteration   5: 1902886.707 ops/s
Iteration   6: 2009272.538 ops/s
Iteration   7: 1925082.093 ops/s
Iteration   8: 1969744.281 ops/s
Iteration   9: 2002386.254 ops/s
Iteration  10: 1914202.720 ops/s
Iteration  11: 1999036.938 ops/s
Iteration  12: 1901768.033 ops/s
Iteration  13: 1955205.032 ops/s
Iteration  14: 2012070.586 ops/s
Iteration  15: 1996620.609 ops/s
Iteration  16: 1976864.341 ops/s
Iteration  17: 1957557.593 ops/s
Iteration  18: 1878881.090 ops/s
Iteration  19: 1981515.142 ops/s
Iteration  20: 1955687.358 ops/s
Iteration  21: 1944077.599 ops/s
Iteration  22: 2009417.602 ops/s
Iteration  23: 1900436.420 ops/s
Iteration  24: 1982676.059 ops/s
Iteration  25: 1913731.424 ops/s
Iteration  26: 1950010.745 ops/s
Iteration  27: 1887946.826 ops/s
Iteration  28: 1915862.948 ops/s
Iteration  29: 1926224.672 ops/s
Iteration  30: 1879882.194 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectIntoFlowable":
  1948684.244 ±(99.9%) 29147.280 ops/s [Average]
  (min, avg, max) = (1878881.090, 1948684.244, 2027809.748), stdev = 43626.281
  CI (99.9%): [1919536.964, 1977831.525] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableCollectTest._Benchmark.benchmark_collectIntoFlowable  thrpt   30  1948684.244 ± 29147.280  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorOneElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorOneElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1597428.262 ops/s
# Warmup Iteration   2: 4423314.514 ops/s
# Warmup Iteration   3: 6230839.147 ops/s
# Warmup Iteration   4: 6453447.760 ops/s
# Warmup Iteration   5: 6407157.541 ops/s
# Warmup Iteration   6: 6144127.384 ops/s
# Warmup Iteration   7: 6301464.859 ops/s
# Warmup Iteration   8: 6182451.441 ops/s
# Warmup Iteration   9: 6172705.992 ops/s
# Warmup Iteration  10: 6568191.974 ops/s
# Warmup Iteration  11: 6176547.045 ops/s
# Warmup Iteration  12: 6315886.002 ops/s
# Warmup Iteration  13: 6292367.328 ops/s
# Warmup Iteration  14: 6093465.554 ops/s
# Warmup Iteration  15: 6590348.488 ops/s
# Warmup Iteration  16: 6195749.614 ops/s
# Warmup Iteration  17: 6553630.598 ops/s
# Warmup Iteration  18: 6362425.631 ops/s
# Warmup Iteration  19: 6524544.639 ops/s
# Warmup Iteration  20: 6239446.795 ops/s
# Warmup Iteration  21: 6481559.058 ops/s
# Warmup Iteration  22: 6289596.433 ops/s
# Warmup Iteration  23: 6440265.194 ops/s
# Warmup Iteration  24: 6248165.149 ops/s
# Warmup Iteration  25: 6599833.484 ops/s
# Warmup Iteration  26: 6138759.866 ops/s
# Warmup Iteration  27: 6594591.081 ops/s
# Warmup Iteration  28: 6314116.796 ops/s
# Warmup Iteration  29: 6370718.156 ops/s
# Warmup Iteration  30: 6544802.583 ops/s
Iteration   1: 6143402.455 ops/s
Iteration   2: 6355762.489 ops/s
Iteration   3: 6403787.045 ops/s
Iteration   4: 6485873.667 ops/s
Iteration   5: 6358544.593 ops/s
Iteration   6: 5740330.237 ops/s
Iteration   7: 5930559.366 ops/s
Iteration   8: 6367442.127 ops/s
Iteration   9: 6470149.515 ops/s
Iteration  10: 6434592.094 ops/s
Iteration  11: 6394791.925 ops/s
Iteration  12: 6540544.040 ops/s
Iteration  13: 6208982.349 ops/s
Iteration  14: 6350531.621 ops/s
Iteration  15: 6318613.612 ops/s
Iteration  16: 6327672.792 ops/s
Iteration  17: 6397543.310 ops/s
Iteration  18: 6294942.904 ops/s
Iteration  19: 6639564.645 ops/s
Iteration  20: 6341524.116 ops/s
Iteration  21: 6187861.358 ops/s
Iteration  22: 6409694.604 ops/s
Iteration  23: 6465317.275 ops/s
Iteration  24: 6668196.313 ops/s
Iteration  25: 6448586.351 ops/s
Iteration  26: 6342506.570 ops/s
Iteration  27: 6405180.853 ops/s
Iteration  28: 6332438.902 ops/s
Iteration  29: 6592455.839 ops/s
Iteration  30: 6493422.012 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorOneElement":
  6361693.833 ±(99.9%) 125013.527 ops/s [Average]
  (min, avg, max) = (5740330.237, 6361693.833, 6668196.313), stdev = 187114.376
  CI (99.9%): [6236680.306, 6486707.360] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorOneElement  thrpt   30  6361693.833 ± 125013.527  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_iteratorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_iteratorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 126630.856 ops/s
# Warmup Iteration   2: 488428.621 ops/s
# Warmup Iteration   3: 522434.145 ops/s
# Warmup Iteration   4: 506463.407 ops/s
# Warmup Iteration   5: 581591.820 ops/s
# Warmup Iteration   6: 483433.401 ops/s
# Warmup Iteration   7: 551290.713 ops/s
# Warmup Iteration   8: 585985.818 ops/s
# Warmup Iteration   9: 567759.418 ops/s
# Warmup Iteration  10: 563471.252 ops/s
# Warmup Iteration  11: 588270.717 ops/s
# Warmup Iteration  12: 584856.391 ops/s
# Warmup Iteration  13: 554614.032 ops/s
# Warmup Iteration  14: 600769.750 ops/s
# Warmup Iteration  15: 564087.674 ops/s
# Warmup Iteration  16: 574725.984 ops/s
# Warmup Iteration  17: 595434.048 ops/s
# Warmup Iteration  18: 623937.631 ops/s
# Warmup Iteration  19: 590492.124 ops/s
# Warmup Iteration  20: 596191.334 ops/s
# Warmup Iteration  21: 592460.956 ops/s
# Warmup Iteration  22: 590094.569 ops/s
# Warmup Iteration  23: 630638.080 ops/s
# Warmup Iteration  24: 580779.329 ops/s
# Warmup Iteration  25: 610003.957 ops/s
# Warmup Iteration  26: 616459.336 ops/s
# Warmup Iteration  27: 581674.914 ops/s
# Warmup Iteration  28: 628707.321 ops/s
# Warmup Iteration  29: 578462.865 ops/s
# Warmup Iteration  30: 599398.099 ops/s
Iteration   1: 598294.299 ops/s
Iteration   2: 622255.786 ops/s
Iteration   3: 593561.205 ops/s
Iteration   4: 599893.155 ops/s
Iteration   5: 584209.505 ops/s
Iteration   6: 602438.468 ops/s
Iteration   7: 618332.703 ops/s
Iteration   8: 577151.914 ops/s
Iteration   9: 617137.547 ops/s
Iteration  10: 579282.104 ops/s
Iteration  11: 600503.628 ops/s
Iteration  12: 626357.820 ops/s
Iteration  13: 587654.906 ops/s
Iteration  14: 588032.254 ops/s
Iteration  15: 608160.713 ops/s
Iteration  16: 585796.032 ops/s
Iteration  17: 604100.957 ops/s
Iteration  18: 609878.513 ops/s
Iteration  19: 602280.457 ops/s
Iteration  20: 621710.384 ops/s
Iteration  21: 590557.002 ops/s
Iteration  22: 618410.953 ops/s
Iteration  23: 612521.100 ops/s
Iteration  24: 600045.414 ops/s
Iteration  25: 610718.952 ops/s
Iteration  26: 594106.279 ops/s
Iteration  27: 599430.057 ops/s
Iteration  28: 594834.693 ops/s
Iteration  29: 614296.029 ops/s
Iteration  30: 599787.357 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_iteratorCrash":
  602058.006 ±(99.9%) 8829.465 ops/s [Average]
  (min, avg, max) = (577151.914, 602058.006, 626357.820), stdev = 13215.529
  CI (99.9%): [593228.541, 610887.471] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_iteratorCrash  thrpt   30  602058.006 ± 8829.465  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successMany$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successMany

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 306055.722 ops/s
# Warmup Iteration   2: 1626245.939 ops/s
# Warmup Iteration   3: 2495938.284 ops/s
# Warmup Iteration   4: 2839441.382 ops/s
# Warmup Iteration   5: 2644195.487 ops/s
# Warmup Iteration   6: 2514601.779 ops/s
# Warmup Iteration   7: 2715114.959 ops/s
# Warmup Iteration   8: 2729380.444 ops/s
# Warmup Iteration   9: 2852252.444 ops/s
# Warmup Iteration  10: 2826671.446 ops/s
# Warmup Iteration  11: 2794404.066 ops/s
# Warmup Iteration  12: 2797461.123 ops/s
# Warmup Iteration  13: 2891049.188 ops/s
# Warmup Iteration  14: 2926198.027 ops/s
# Warmup Iteration  15: 2764179.753 ops/s
# Warmup Iteration  16: 2878669.197 ops/s
# Warmup Iteration  17: 2895063.045 ops/s
# Warmup Iteration  18: 2728626.508 ops/s
# Warmup Iteration  19: 2891521.236 ops/s
# Warmup Iteration  20: 2694369.524 ops/s
# Warmup Iteration  21: 2876518.016 ops/s
# Warmup Iteration  22: 2673217.640 ops/s
# Warmup Iteration  23: 2765180.262 ops/s
# Warmup Iteration  24: 2888799.729 ops/s
# Warmup Iteration  25: 2841892.306 ops/s
# Warmup Iteration  26: 2805094.793 ops/s
# Warmup Iteration  27: 2808349.674 ops/s
# Warmup Iteration  28: 2966567.086 ops/s
# Warmup Iteration  29: 2785934.552 ops/s
# Warmup Iteration  30: 2964983.670 ops/s
Iteration   1: 2639820.390 ops/s
Iteration   2: 2365148.473 ops/s
Iteration   3: 2913454.727 ops/s
Iteration   4: 2864814.486 ops/s
Iteration   5: 2800196.416 ops/s
Iteration   6: 2771936.090 ops/s
Iteration   7: 2908334.975 ops/s
Iteration   8: 2799975.599 ops/s
Iteration   9: 2735429.045 ops/s
Iteration  10: 2941527.319 ops/s
Iteration  11: 2756992.357 ops/s
Iteration  12: 2835277.650 ops/s
Iteration  13: 2917063.896 ops/s
Iteration  14: 2754656.376 ops/s
Iteration  15: 2776995.538 ops/s
Iteration  16: 2919120.130 ops/s
Iteration  17: 2805830.847 ops/s
Iteration  18: 2867272.421 ops/s
Iteration  19: 2746388.113 ops/s
Iteration  20: 2824984.038 ops/s
Iteration  21: 2772808.894 ops/s
Iteration  22: 2812452.198 ops/s
Iteration  23: 2869994.699 ops/s
Iteration  24: 2715659.261 ops/s
Iteration  25: 2962050.005 ops/s
Iteration  26: 2704017.853 ops/s
Iteration  27: 2804222.838 ops/s
Iteration  28: 2892917.844 ops/s
Iteration  29: 2888064.872 ops/s
Iteration  30: 2890686.476 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successMany":
  2808603.128 ±(99.9%) 76576.743 ops/s [Average]
  (min, avg, max) = (2365148.473, 2808603.128, 2962050.005), stdev = 114616.472
  CI (99.9%): [2732026.385, 2885179.870] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successMany  thrpt   30  2808603.128 ± 76576.743  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 392839.389 ops/s
# Warmup Iteration   2: 2267303.083 ops/s
# Warmup Iteration   3: 3155644.598 ops/s
# Warmup Iteration   4: 3475842.000 ops/s
# Warmup Iteration   5: 3572874.470 ops/s
# Warmup Iteration   6: 3475260.128 ops/s
# Warmup Iteration   7: 3558392.400 ops/s
# Warmup Iteration   8: 3631784.436 ops/s
# Warmup Iteration   9: 3422460.429 ops/s
# Warmup Iteration  10: 3576830.694 ops/s
# Warmup Iteration  11: 3639812.774 ops/s
# Warmup Iteration  12: 3446986.203 ops/s
# Warmup Iteration  13: 3702382.173 ops/s
# Warmup Iteration  14: 3704681.557 ops/s
# Warmup Iteration  15: 3533739.453 ops/s
# Warmup Iteration  16: 3666351.925 ops/s
# Warmup Iteration  17: 3341945.407 ops/s
# Warmup Iteration  18: 3620727.217 ops/s
# Warmup Iteration  19: 3696634.319 ops/s
# Warmup Iteration  20: 3540717.415 ops/s
# Warmup Iteration  21: 3648216.382 ops/s
# Warmup Iteration  22: 3587225.165 ops/s
# Warmup Iteration  23: 3555109.835 ops/s
# Warmup Iteration  24: 3569533.250 ops/s
# Warmup Iteration  25: 3658254.456 ops/s
# Warmup Iteration  26: 3464872.688 ops/s
# Warmup Iteration  27: 3691044.079 ops/s
# Warmup Iteration  28: 3540762.763 ops/s
# Warmup Iteration  29: 3552604.240 ops/s
# Warmup Iteration  30: 3646902.782 ops/s
Iteration   1: 3541113.312 ops/s
Iteration   2: 3567692.471 ops/s
Iteration   3: 3487429.576 ops/s
Iteration   4: 3587146.716 ops/s
Iteration   5: 3480211.106 ops/s
Iteration   6: 3593366.910 ops/s
Iteration   7: 3704450.579 ops/s
Iteration   8: 3447545.584 ops/s
Iteration   9: 3659248.260 ops/s
Iteration  10: 3442961.037 ops/s
Iteration  11: 3524641.804 ops/s
Iteration  12: 3475662.680 ops/s
Iteration  13: 3629661.424 ops/s
Iteration  14: 3615324.344 ops/s
Iteration  15: 3585495.040 ops/s
Iteration  16: 3512202.499 ops/s
Iteration  17: 3802337.181 ops/s
Iteration  18: 3465611.988 ops/s
Iteration  19: 3549185.369 ops/s
Iteration  20: 3504543.289 ops/s
Iteration  21: 3657334.776 ops/s
Iteration  22: 3395589.678 ops/s
Iteration  23: 3574926.679 ops/s
Iteration  24: 3626266.017 ops/s
Iteration  25: 3559266.834 ops/s
Iteration  26: 3580982.119 ops/s
Iteration  27: 3503233.696 ops/s
Iteration  28: 3646713.240 ops/s
Iteration  29: 3548644.284 ops/s
Iteration  30: 3508979.139 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successJust":
  3559258.921 ±(99.9%) 57662.532 ops/s [Average]
  (min, avg, max) = (3395589.678, 3559258.921, 3802337.181), stdev = 86306.570
  CI (99.9%): [3501596.389, 3616921.453] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_successJust  thrpt   30  3559258.921 ± 57662.532  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 110409.237 ops/s
# Warmup Iteration   2: 433322.869 ops/s
# Warmup Iteration   3: 514638.502 ops/s
# Warmup Iteration   4: 545796.795 ops/s
# Warmup Iteration   5: 514291.562 ops/s
# Warmup Iteration   6: 535669.320 ops/s
# Warmup Iteration   7: 507262.291 ops/s
# Warmup Iteration   8: 581146.106 ops/s
# Warmup Iteration   9: 501456.123 ops/s
# Warmup Iteration  10: 565419.702 ops/s
# Warmup Iteration  11: 569437.095 ops/s
# Warmup Iteration  12: 530145.509 ops/s
# Warmup Iteration  13: 579850.868 ops/s
# Warmup Iteration  14: 531591.165 ops/s
# Warmup Iteration  15: 569113.611 ops/s
# Warmup Iteration  16: 537883.723 ops/s
# Warmup Iteration  17: 587683.345 ops/s
# Warmup Iteration  18: 575904.879 ops/s
# Warmup Iteration  19: 578997.186 ops/s
# Warmup Iteration  20: 597984.115 ops/s
# Warmup Iteration  21: 560082.609 ops/s
# Warmup Iteration  22: 592102.379 ops/s
# Warmup Iteration  23: 564603.561 ops/s
# Warmup Iteration  24: 568410.228 ops/s
# Warmup Iteration  25: 591872.606 ops/s
# Warmup Iteration  26: 450315.894 ops/s
# Warmup Iteration  27: 525151.483 ops/s
# Warmup Iteration  28: 589158.232 ops/s
# Warmup Iteration  29: 561643.559 ops/s
# Warmup Iteration  30: 588261.990 ops/s
Iteration   1: 562904.804 ops/s
Iteration   2: 580633.893 ops/s
Iteration   3: 575445.214 ops/s
Iteration   4: 563558.481 ops/s
Iteration   5: 573480.851 ops/s
Iteration   6: 549875.299 ops/s
Iteration   7: 598137.449 ops/s
Iteration   8: 579499.208 ops/s
Iteration   9: 539540.296 ops/s
Iteration  10: 586411.726 ops/s
Iteration  11: 561003.571 ops/s
Iteration  12: 574845.141 ops/s
Iteration  13: 589351.249 ops/s
Iteration  14: 567518.962 ops/s
Iteration  15: 580948.126 ops/s
Iteration  16: 595689.384 ops/s
Iteration  17: 559365.513 ops/s
Iteration  18: 601793.588 ops/s
Iteration  19: 558684.105 ops/s
Iteration  20: 614245.122 ops/s
Iteration  21: 594032.172 ops/s
Iteration  22: 589851.708 ops/s
Iteration  23: 565753.540 ops/s
Iteration  24: 600302.610 ops/s
Iteration  25: 563530.334 ops/s
Iteration  26: 579260.168 ops/s
Iteration  27: 570982.772 ops/s
Iteration  28: 582256.265 ops/s
Iteration  29: 582082.422 ops/s
Iteration  30: 569477.137 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash":
  577015.370 ±(99.9%) 11139.477 ops/s [Average]
  (min, avg, max) = (539540.296, 577015.370, 614245.122), stdev = 16673.046
  CI (99.9%): [565875.893, 588154.847] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash  thrpt   30  577015.370 ± 11139.477  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 133309.253 ops/s
# Warmup Iteration   2: 536107.990 ops/s
# Warmup Iteration   3: 584311.846 ops/s
# Warmup Iteration   4: 576409.266 ops/s
# Warmup Iteration   5: 571482.757 ops/s
# Warmup Iteration   6: 590892.945 ops/s
# Warmup Iteration   7: 608678.581 ops/s
# Warmup Iteration   8: 623261.956 ops/s
# Warmup Iteration   9: 586278.360 ops/s
# Warmup Iteration  10: 624469.557 ops/s
# Warmup Iteration  11: 586658.481 ops/s
# Warmup Iteration  12: 602800.000 ops/s
# Warmup Iteration  13: 600507.782 ops/s
# Warmup Iteration  14: 608698.708 ops/s
# Warmup Iteration  15: 594947.005 ops/s
# Warmup Iteration  16: 604176.016 ops/s
# Warmup Iteration  17: 634137.832 ops/s
# Warmup Iteration  18: 623503.750 ops/s
# Warmup Iteration  19: 629994.034 ops/s
# Warmup Iteration  20: 616245.726 ops/s
# Warmup Iteration  21: 648140.638 ops/s
# Warmup Iteration  22: 627728.619 ops/s
# Warmup Iteration  23: 635180.903 ops/s
# Warmup Iteration  24: 621635.225 ops/s
# Warmup Iteration  25: 645783.824 ops/s
# Warmup Iteration  26: 622116.040 ops/s
# Warmup Iteration  27: 631100.040 ops/s
# Warmup Iteration  28: 635632.286 ops/s
# Warmup Iteration  29: 608444.424 ops/s
# Warmup Iteration  30: 634691.287 ops/s
Iteration   1: 609667.875 ops/s
Iteration   2: 650302.519 ops/s
Iteration   3: 620560.812 ops/s
Iteration   4: 643893.265 ops/s
Iteration   5: 644063.147 ops/s
Iteration   6: 578226.564 ops/s
Iteration   7: 655842.466 ops/s
Iteration   8: 621751.999 ops/s
Iteration   9: 642715.227 ops/s
Iteration  10: 626633.162 ops/s
Iteration  11: 624973.570 ops/s
Iteration  12: 630863.795 ops/s
Iteration  13: 632080.527 ops/s
Iteration  14: 655445.510 ops/s
Iteration  15: 619866.859 ops/s
Iteration  16: 654507.275 ops/s
Iteration  17: 610579.830 ops/s
Iteration  18: 663916.873 ops/s
Iteration  19: 614096.830 ops/s
Iteration  20: 650994.729 ops/s
Iteration  21: 654436.083 ops/s
Iteration  22: 577078.228 ops/s
Iteration  23: 653211.670 ops/s
Iteration  24: 621303.767 ops/s
Iteration  25: 643694.412 ops/s
Iteration  26: 648126.259 ops/s
Iteration  27: 619166.539 ops/s
Iteration  28: 668658.740 ops/s
Iteration  29: 630208.238 ops/s
Iteration  30: 629172.898 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_mapperCrash":
  633201.322 ±(99.9%) 14851.939 ops/s [Average]
  (min, avg, max) = (577078.228, 633201.322, 668658.740), stdev = 22229.685
  CI (99.9%): [618349.383, 648053.261] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_mapperCrash  thrpt   30  633201.322 ± 14851.939  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 115442.457 ops/s
# Warmup Iteration   2: 483285.200 ops/s
# Warmup Iteration   3: 1292781.224 ops/s
# Warmup Iteration   4: 1895517.438 ops/s
# Warmup Iteration   5: 1756767.250 ops/s
# Warmup Iteration   6: 1830974.719 ops/s
# Warmup Iteration   7: 1829330.011 ops/s
# Warmup Iteration   8: 1743090.770 ops/s
# Warmup Iteration   9: 1852447.782 ops/s
# Warmup Iteration  10: 1750907.358 ops/s
# Warmup Iteration  11: 1823982.914 ops/s
# Warmup Iteration  12: 1686708.119 ops/s
# Warmup Iteration  13: 1775564.720 ops/s
# Warmup Iteration  14: 1867008.697 ops/s
# Warmup Iteration  15: 1813310.259 ops/s
# Warmup Iteration  16: 1832402.261 ops/s
# Warmup Iteration  17: 1776440.148 ops/s
# Warmup Iteration  18: 1799401.030 ops/s
# Warmup Iteration  19: 1836205.904 ops/s
# Warmup Iteration  20: 1763879.616 ops/s
# Warmup Iteration  21: 1509746.962 ops/s
# Warmup Iteration  22: 1903025.194 ops/s
# Warmup Iteration  23: 1790107.957 ops/s
# Warmup Iteration  24: 1861741.468 ops/s
# Warmup Iteration  25: 1855321.045 ops/s
# Warmup Iteration  26: 1819816.514 ops/s
# Warmup Iteration  27: 1847266.410 ops/s
# Warmup Iteration  28: 1801437.073 ops/s
# Warmup Iteration  29: 1843324.151 ops/s
# Warmup Iteration  30: 1794750.522 ops/s
Iteration   1: 1773611.534 ops/s
Iteration   2: 1870301.343 ops/s
Iteration   3: 1821207.881 ops/s
Iteration   4: 1806813.121 ops/s
Iteration   5: 1845609.640 ops/s
Iteration   6: 1799095.207 ops/s
Iteration   7: 1837423.467 ops/s
Iteration   8: 1850831.008 ops/s
Iteration   9: 1821339.683 ops/s
Iteration  10: 1853598.519 ops/s
Iteration  11: 1789764.465 ops/s
Iteration  12: 1897784.243 ops/s
Iteration  13: 1796965.034 ops/s
Iteration  14: 1823867.209 ops/s
Iteration  15: 1857778.897 ops/s
Iteration  16: 1758696.668 ops/s
Iteration  17: 1880822.962 ops/s
Iteration  18: 1811211.965 ops/s
Iteration  19: 1795764.278 ops/s
Iteration  20: 1874449.855 ops/s
Iteration  21: 1803072.707 ops/s
Iteration  22: 1884015.683 ops/s
Iteration  23: 1759870.258 ops/s
Iteration  24: 1847974.220 ops/s
Iteration  25: 1882397.324 ops/s
Iteration  26: 1776110.294 ops/s
Iteration  27: 1838772.976 ops/s
Iteration  28: 1861616.098 ops/s
Iteration  29: 1780208.581 ops/s
Iteration  30: 1883471.806 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured":
  1829481.564 ±(99.9%) 27170.386 ops/s [Average]
  (min, avg, max) = (1758696.668, 1829481.564, 1897784.243), stdev = 40667.357
  CI (99.9%): [1802311.178, 1856651.950] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_manyBackpressured  thrpt   30  1829481.564 ± 27170.386  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_requestOneByOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_requestOneByOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 293596.733 ops/s
# Warmup Iteration   2: 1164388.135 ops/s
# Warmup Iteration   3: 1743117.367 ops/s
# Warmup Iteration   4: 1788891.239 ops/s
# Warmup Iteration   5: 1905546.634 ops/s
# Warmup Iteration   6: 2035746.218 ops/s
# Warmup Iteration   7: 2013440.595 ops/s
# Warmup Iteration   8: 1902810.439 ops/s
# Warmup Iteration   9: 1981979.664 ops/s
# Warmup Iteration  10: 2126766.011 ops/s
# Warmup Iteration  11: 1928095.255 ops/s
# Warmup Iteration  12: 1951396.949 ops/s
# Warmup Iteration  13: 1952953.484 ops/s
# Warmup Iteration  14: 2011156.704 ops/s
# Warmup Iteration  15: 1989331.645 ops/s
# Warmup Iteration  16: 1995250.848 ops/s
# Warmup Iteration  17: 1973377.454 ops/s
# Warmup Iteration  18: 1875487.823 ops/s
# Warmup Iteration  19: 1996155.937 ops/s
# Warmup Iteration  20: 1953720.759 ops/s
# Warmup Iteration  21: 2020611.744 ops/s
# Warmup Iteration  22: 1970014.552 ops/s
# Warmup Iteration  23: 1891472.143 ops/s
# Warmup Iteration  24: 1984444.505 ops/s
# Warmup Iteration  25: 1965774.722 ops/s
# Warmup Iteration  26: 1996637.649 ops/s
# Warmup Iteration  27: 2001490.545 ops/s
# Warmup Iteration  28: 1920705.883 ops/s
# Warmup Iteration  29: 2039983.153 ops/s
# Warmup Iteration  30: 1933350.216 ops/s
Iteration   1: 2020389.834 ops/s
Iteration   2: 1949308.445 ops/s
Iteration   3: 1979465.530 ops/s
Iteration   4: 1974512.502 ops/s
Iteration   5: 1948230.051 ops/s
Iteration   6: 2019876.112 ops/s
Iteration   7: 1996538.837 ops/s
Iteration   8: 2020708.703 ops/s
Iteration   9: 1989012.058 ops/s
Iteration  10: 2038307.852 ops/s
Iteration  11: 1967022.339 ops/s
Iteration  12: 1973162.284 ops/s
Iteration  13: 2013629.232 ops/s
Iteration  14: 1918724.949 ops/s
Iteration  15: 1940338.826 ops/s
Iteration  16: 2028169.486 ops/s
Iteration  17: 2025667.157 ops/s
Iteration  18: 1933400.016 ops/s
Iteration  19: 2065844.287 ops/s
Iteration  20: 1890927.298 ops/s
Iteration  21: 2040463.463 ops/s
Iteration  22: 2052653.652 ops/s
Iteration  23: 1920263.823 ops/s
Iteration  24: 2053746.747 ops/s
Iteration  25: 1931705.270 ops/s
Iteration  26: 2042244.991 ops/s
Iteration  27: 1929621.868 ops/s
Iteration  28: 1997683.397 ops/s
Iteration  29: 1997067.908 ops/s
Iteration  30: 1920206.119 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_requestOneByOne":
  1985963.101 ±(99.9%) 32581.744 ops/s [Average]
  (min, avg, max) = (1890927.298, 1985963.101, 2065844.287), stdev = 48766.824
  CI (99.9%): [1953381.357, 2018544.845] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_requestOneByOne  thrpt   30  1985963.101 ± 32581.744  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 556557.688 ops/s
# Warmup Iteration   2: 2352924.022 ops/s
# Warmup Iteration   3: 2897670.952 ops/s
# Warmup Iteration   4: 3273917.695 ops/s
# Warmup Iteration   5: 3514138.716 ops/s
# Warmup Iteration   6: 3461253.465 ops/s
# Warmup Iteration   7: 3291664.121 ops/s
# Warmup Iteration   8: 3416709.147 ops/s
# Warmup Iteration   9: 3370571.738 ops/s
# Warmup Iteration  10: 3283531.300 ops/s
# Warmup Iteration  11: 3350094.583 ops/s
# Warmup Iteration  12: 3340401.019 ops/s
# Warmup Iteration  13: 3353343.405 ops/s
# Warmup Iteration  14: 3441529.323 ops/s
# Warmup Iteration  15: 3459713.836 ops/s
# Warmup Iteration  16: 2714042.783 ops/s
# Warmup Iteration  17: 3465612.474 ops/s
# Warmup Iteration  18: 3309117.505 ops/s
# Warmup Iteration  19: 3288126.203 ops/s
# Warmup Iteration  20: 3321090.315 ops/s
# Warmup Iteration  21: 3419573.837 ops/s
# Warmup Iteration  22: 3197932.567 ops/s
# Warmup Iteration  23: 3423961.547 ops/s
# Warmup Iteration  24: 3387677.040 ops/s
# Warmup Iteration  25: 3401011.457 ops/s
# Warmup Iteration  26: 3463532.687 ops/s
# Warmup Iteration  27: 3311044.994 ops/s
# Warmup Iteration  28: 3322039.542 ops/s
# Warmup Iteration  29: 3423250.268 ops/s
# Warmup Iteration  30: 3187660.022 ops/s
Iteration   1: 3388233.215 ops/s
Iteration   2: 3287480.433 ops/s
Iteration   3: 3436323.541 ops/s
Iteration   4: 3321143.931 ops/s
Iteration   5: 3396721.702 ops/s
Iteration   6: 3447016.633 ops/s
Iteration   7: 3345954.026 ops/s
Iteration   8: 3386487.329 ops/s
Iteration   9: 3284871.996 ops/s
Iteration  10: 3331969.381 ops/s
Iteration  11: 3428865.206 ops/s
Iteration  12: 3348073.722 ops/s
Iteration  13: 3533823.848 ops/s
Iteration  14: 3355346.566 ops/s
Iteration  15: 3299757.046 ops/s
Iteration  16: 3419714.679 ops/s
Iteration  17: 3342147.487 ops/s
Iteration  18: 3347104.129 ops/s
Iteration  19: 3371996.983 ops/s
Iteration  20: 3331474.512 ops/s
Iteration  21: 3448698.623 ops/s
Iteration  22: 3338016.019 ops/s
Iteration  23: 3402843.172 ops/s
Iteration  24: 3313624.687 ops/s
Iteration  25: 3474632.628 ops/s
Iteration  26: 3270858.287 ops/s
Iteration  27: 3462765.745 ops/s
Iteration  28: 3400704.964 ops/s
Iteration  29: 3347252.009 ops/s
Iteration  30: 3435175.865 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedJust":
  3376635.945 ±(99.9%) 42355.589 ops/s [Average]
  (min, avg, max) = (3270858.287, 3376635.945, 3533823.848), stdev = 63395.857
  CI (99.9%): [3334280.356, 3418991.534] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedJust  thrpt   30  3376635.945 ± 42355.589  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedMany$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedMany

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 622112.065 ops/s
# Warmup Iteration   2: 2637731.180 ops/s
# Warmup Iteration   3: 3026939.607 ops/s
# Warmup Iteration   4: 3296219.941 ops/s
# Warmup Iteration   5: 3379155.949 ops/s
# Warmup Iteration   6: 3415997.381 ops/s
# Warmup Iteration   7: 3357290.808 ops/s
# Warmup Iteration   8: 3413202.556 ops/s
# Warmup Iteration   9: 3456576.672 ops/s
# Warmup Iteration  10: 3220061.731 ops/s
# Warmup Iteration  11: 3470256.901 ops/s
# Warmup Iteration  12: 3407040.036 ops/s
# Warmup Iteration  13: 3284038.748 ops/s
# Warmup Iteration  14: 3452319.792 ops/s
# Warmup Iteration  15: 3366945.748 ops/s
# Warmup Iteration  16: 3542063.547 ops/s
# Warmup Iteration  17: 3449444.007 ops/s
# Warmup Iteration  18: 3334389.394 ops/s
# Warmup Iteration  19: 3501605.169 ops/s
# Warmup Iteration  20: 3286860.474 ops/s
# Warmup Iteration  21: 3443796.052 ops/s
# Warmup Iteration  22: 3260989.797 ops/s
# Warmup Iteration  23: 3477435.838 ops/s
# Warmup Iteration  24: 3245703.650 ops/s
# Warmup Iteration  25: 3276705.986 ops/s
# Warmup Iteration  26: 3414579.248 ops/s
# Warmup Iteration  27: 3393745.598 ops/s
# Warmup Iteration  28: 3382457.346 ops/s
# Warmup Iteration  29: 3465101.686 ops/s
# Warmup Iteration  30: 3328085.495 ops/s
Iteration   1: 3468893.068 ops/s
Iteration   2: 3463042.688 ops/s
Iteration   3: 3290561.697 ops/s
Iteration   4: 3452401.751 ops/s
Iteration   5: 3389713.970 ops/s
Iteration   6: 3357009.970 ops/s
Iteration   7: 3416923.168 ops/s
Iteration   8: 3417881.143 ops/s
Iteration   9: 3461594.756 ops/s
Iteration  10: 3472266.378 ops/s
Iteration  11: 3340806.690 ops/s
Iteration  12: 3512922.751 ops/s
Iteration  13: 3258105.760 ops/s
Iteration  14: 3481693.785 ops/s
Iteration  15: 3376053.863 ops/s
Iteration  16: 3350180.144 ops/s
Iteration  17: 3426487.258 ops/s
Iteration  18: 3387847.839 ops/s
Iteration  19: 3469041.227 ops/s
Iteration  20: 3340660.858 ops/s
Iteration  21: 3560393.474 ops/s
Iteration  22: 3457958.716 ops/s
Iteration  23: 3333868.477 ops/s
Iteration  24: 3532126.036 ops/s
Iteration  25: 3515900.037 ops/s
Iteration  26: 3274610.119 ops/s
Iteration  27: 3450489.226 ops/s
Iteration  28: 3446566.463 ops/s
Iteration  29: 3440917.281 ops/s
Iteration  30: 3298126.902 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedMany":
  3414834.850 ±(99.9%) 52711.707 ops/s [Average]
  (min, avg, max) = (3258105.760, 3414834.850, 3560393.474), stdev = 78896.407
  CI (99.9%): [3362123.143, 3467546.556] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedMany  thrpt   30  3414834.850 ± 52711.707  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedManyRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedManyRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 485025.383 ops/s
# Warmup Iteration   2: 1753575.261 ops/s
# Warmup Iteration   3: 2423370.426 ops/s
# Warmup Iteration   4: 2663810.945 ops/s
# Warmup Iteration   5: 2828173.016 ops/s
# Warmup Iteration   6: 2755011.385 ops/s
# Warmup Iteration   7: 2606225.873 ops/s
# Warmup Iteration   8: 2758984.006 ops/s
# Warmup Iteration   9: 2620435.017 ops/s
# Warmup Iteration  10: 2749495.696 ops/s
# Warmup Iteration  11: 2116136.729 ops/s
# Warmup Iteration  12: 2812776.846 ops/s
# Warmup Iteration  13: 2682656.896 ops/s
# Warmup Iteration  14: 2851646.779 ops/s
# Warmup Iteration  15: 2701298.977 ops/s
# Warmup Iteration  16: 2757066.523 ops/s
# Warmup Iteration  17: 2728354.503 ops/s
# Warmup Iteration  18: 2683964.540 ops/s
# Warmup Iteration  19: 2768886.693 ops/s
# Warmup Iteration  20: 2649457.475 ops/s
# Warmup Iteration  21: 2798337.139 ops/s
# Warmup Iteration  22: 2748631.442 ops/s
# Warmup Iteration  23: 2729084.565 ops/s
# Warmup Iteration  24: 2737312.948 ops/s
# Warmup Iteration  25: 2651702.835 ops/s
# Warmup Iteration  26: 2866792.513 ops/s
# Warmup Iteration  27: 2601547.237 ops/s
# Warmup Iteration  28: 2748050.954 ops/s
# Warmup Iteration  29: 2784680.684 ops/s
# Warmup Iteration  30: 2641323.155 ops/s
Iteration   1: 2837973.274 ops/s
Iteration   2: 2686005.275 ops/s
Iteration   3: 2742052.630 ops/s
Iteration   4: 2602938.519 ops/s
Iteration   5: 2768148.586 ops/s
Iteration   6: 2810681.530 ops/s
Iteration   7: 2647984.093 ops/s
Iteration   8: 2715041.097 ops/s
Iteration   9: 2730117.254 ops/s
Iteration  10: 2696098.863 ops/s
Iteration  11: 2707414.178 ops/s
Iteration  12: 2700844.551 ops/s
Iteration  13: 2769398.816 ops/s
Iteration  14: 2785644.204 ops/s
Iteration  15: 2753048.431 ops/s
Iteration  16: 2646860.404 ops/s
Iteration  17: 2712712.790 ops/s
Iteration  18: 2830413.671 ops/s
Iteration  19: 2694855.320 ops/s
Iteration  20: 2723690.491 ops/s
Iteration  21: 2625370.326 ops/s
Iteration  22: 2850562.506 ops/s
Iteration  23: 2706300.215 ops/s
Iteration  24: 2589234.747 ops/s
Iteration  25: 2690741.448 ops/s
Iteration  26: 2842665.552 ops/s
Iteration  27: 2706457.424 ops/s
Iteration  28: 2755371.971 ops/s
Iteration  29: 2690772.347 ops/s
Iteration  30: 2814038.444 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedManyRejected":
  2727781.299 ±(99.9%) 46553.905 ops/s [Average]
  (min, avg, max) = (2589234.747, 2727781.299, 2850562.506), stdev = 69679.699
  CI (99.9%): [2681227.393, 2774335.204] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedManyRejected  thrpt   30  2727781.299 ± 46553.905  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_doubleOnSubscribeMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_doubleOnSubscribeMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 46063.661 ops/s
# Warmup Iteration   2: 424599.903 ops/s
# Warmup Iteration   3: 457479.472 ops/s
# Warmup Iteration   4: 498533.423 ops/s
# Warmup Iteration   5: 480368.957 ops/s
# Warmup Iteration   6: 493511.786 ops/s
# Warmup Iteration   7: 506640.342 ops/s
# Warmup Iteration   8: 479847.409 ops/s
# Warmup Iteration   9: 494514.987 ops/s
# Warmup Iteration  10: 473316.006 ops/s
# Warmup Iteration  11: 479624.500 ops/s
# Warmup Iteration  12: 500557.499 ops/s
# Warmup Iteration  13: 486430.387 ops/s
# Warmup Iteration  14: 482618.908 ops/s
# Warmup Iteration  15: 508992.595 ops/s
# Warmup Iteration  16: 477300.215 ops/s
# Warmup Iteration  17: 522232.745 ops/s
# Warmup Iteration  18: 506416.877 ops/s
# Warmup Iteration  19: 533025.341 ops/s
# Warmup Iteration  20: 504778.254 ops/s
# Warmup Iteration  21: 531299.163 ops/s
# Warmup Iteration  22: 501332.899 ops/s
# Warmup Iteration  23: 511437.169 ops/s
# Warmup Iteration  24: 510953.890 ops/s
# Warmup Iteration  25: 501993.582 ops/s
# Warmup Iteration  26: 530117.976 ops/s
# Warmup Iteration  27: 500642.807 ops/s
# Warmup Iteration  28: 503176.909 ops/s
# Warmup Iteration  29: 534768.290 ops/s
# Warmup Iteration  30: 506256.798 ops/s
Iteration   1: 520958.001 ops/s
Iteration   2: 509275.215 ops/s
Iteration   3: 532288.678 ops/s
Iteration   4: 521866.872 ops/s
Iteration   5: 505390.069 ops/s
Iteration   6: 518771.458 ops/s
Iteration   7: 493864.263 ops/s
Iteration   8: 537856.075 ops/s
Iteration   9: 500072.516 ops/s
Iteration  10: 509516.990 ops/s
Iteration  11: 512424.509 ops/s
Iteration  12: 506024.360 ops/s
Iteration  13: 547773.925 ops/s
Iteration  14: 524079.052 ops/s
Iteration  15: 509117.882 ops/s
Iteration  16: 526625.583 ops/s
Iteration  17: 513278.938 ops/s
Iteration  18: 522048.497 ops/s
Iteration  19: 512448.957 ops/s
Iteration  20: 526049.400 ops/s
Iteration  21: 523055.161 ops/s
Iteration  22: 484685.061 ops/s
Iteration  23: 524303.572 ops/s
Iteration  24: 490349.691 ops/s
Iteration  25: 538313.571 ops/s
Iteration  26: 526028.167 ops/s
Iteration  27: 524029.587 ops/s
Iteration  28: 522552.871 ops/s
Iteration  29: 517184.268 ops/s
Iteration  30: 516161.986 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_doubleOnSubscribeMain":
  517213.173 ±(99.9%) 9349.164 ops/s [Average]
  (min, avg, max) = (484685.061, 517213.173, 547773.925), stdev = 13993.390
  CI (99.9%): [507864.008, 526562.337] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_doubleOnSubscribeMain  thrpt   30  517213.173 ± 9349.164  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherSignalsAndCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherSignalsAndCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 49515.514 ops/s
# Warmup Iteration   2: 314970.696 ops/s
# Warmup Iteration   3: 351316.350 ops/s
# Warmup Iteration   4: 333880.139 ops/s
# Warmup Iteration   5: 402614.904 ops/s
# Warmup Iteration   6: 267518.797 ops/s
# Warmup Iteration   7: 396936.382 ops/s
# Warmup Iteration   8: 384905.021 ops/s
# Warmup Iteration   9: 406066.679 ops/s
# Warmup Iteration  10: 385337.826 ops/s
# Warmup Iteration  11: 385614.379 ops/s
# Warmup Iteration  12: 405579.274 ops/s
# Warmup Iteration  13: 383327.731 ops/s
# Warmup Iteration  14: 403616.976 ops/s
# Warmup Iteration  15: 388317.560 ops/s
# Warmup Iteration  16: 398148.787 ops/s
# Warmup Iteration  17: 446827.680 ops/s
# Warmup Iteration  18: 453785.906 ops/s
# Warmup Iteration  19: 473855.151 ops/s
# Warmup Iteration  20: 445136.807 ops/s
# Warmup Iteration  21: 478913.861 ops/s
# Warmup Iteration  22: 469575.606 ops/s
# Warmup Iteration  23: 446228.530 ops/s
# Warmup Iteration  24: 455302.693 ops/s
# Warmup Iteration  25: 472141.056 ops/s
# Warmup Iteration  26: 459329.306 ops/s
# Warmup Iteration  27: 467449.138 ops/s
# Warmup Iteration  28: 456223.357 ops/s
# Warmup Iteration  29: 457390.361 ops/s
# Warmup Iteration  30: 479590.999 ops/s
Iteration   1: 452819.881 ops/s
Iteration   2: 459211.529 ops/s
Iteration   3: 467363.351 ops/s
Iteration   4: 445890.466 ops/s
Iteration   5: 464357.369 ops/s
Iteration   6: 472708.335 ops/s
Iteration   7: 457267.433 ops/s
Iteration   8: 468069.848 ops/s
Iteration   9: 461230.475 ops/s
Iteration  10: 471443.613 ops/s
Iteration  11: 456494.171 ops/s
Iteration  12: 450201.927 ops/s
Iteration  13: 465672.700 ops/s
Iteration  14: 449940.297 ops/s
Iteration  15: 462974.251 ops/s
Iteration  16: 464122.052 ops/s
Iteration  17: 462651.564 ops/s
Iteration  18: 471872.331 ops/s
Iteration  19: 459120.009 ops/s
Iteration  20: 466083.718 ops/s
Iteration  21: 451549.519 ops/s
Iteration  22: 458622.394 ops/s
Iteration  23: 484294.016 ops/s
Iteration  24: 447113.166 ops/s
Iteration  25: 479227.107 ops/s
Iteration  26: 455969.966 ops/s
Iteration  27: 464974.577 ops/s
Iteration  28: 448546.480 ops/s
Iteration  29: 451259.285 ops/s
Iteration  30: 483570.199 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherSignalsAndCompletes":
  461820.734 ±(99.9%) 6849.751 ops/s [Average]
  (min, avg, max) = (445890.466, 461820.734, 484294.016), stdev = 10252.386
  CI (99.9%): [454970.983, 468670.486] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
SingleTakeUntilTest._Benchmark.benchmark_otherSignalsAndCompletes  thrpt   30  461820.734 ± 6849.751  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_badSourceOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_badSourceOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36544.275 ops/s
# Warmup Iteration   2: 168517.276 ops/s
# Warmup Iteration   3: 181769.070 ops/s
# Warmup Iteration   4: 220938.551 ops/s
# Warmup Iteration   5: 234392.852 ops/s
# Warmup Iteration   6: 217841.387 ops/s
# Warmup Iteration   7: 222692.409 ops/s
# Warmup Iteration   8: 228877.846 ops/s
# Warmup Iteration   9: 213792.311 ops/s
# Warmup Iteration  10: 230848.598 ops/s
# Warmup Iteration  11: 219939.845 ops/s
# Warmup Iteration  12: 219952.604 ops/s
# Warmup Iteration  13: 226592.605 ops/s
# Warmup Iteration  14: 220616.459 ops/s
# Warmup Iteration  15: 225774.656 ops/s
# Warmup Iteration  16: 223680.887 ops/s
# Warmup Iteration  17: 221213.294 ops/s
# Warmup Iteration  18: 231459.741 ops/s
# Warmup Iteration  19: 242994.003 ops/s
# Warmup Iteration  20: 227773.714 ops/s
# Warmup Iteration  21: 233190.665 ops/s
# Warmup Iteration  22: 240247.091 ops/s
# Warmup Iteration  23: 228940.576 ops/s
# Warmup Iteration  24: 232155.943 ops/s
# Warmup Iteration  25: 237883.252 ops/s
# Warmup Iteration  26: 228308.023 ops/s
# Warmup Iteration  27: 239051.928 ops/s
# Warmup Iteration  28: 225499.850 ops/s
# Warmup Iteration  29: 237113.792 ops/s
# Warmup Iteration  30: 226671.059 ops/s
Iteration   1: 233037.729 ops/s
Iteration   2: 236159.614 ops/s
Iteration   3: 226024.723 ops/s
Iteration   4: 239515.944 ops/s
Iteration   5: 229014.248 ops/s
Iteration   6: 241091.240 ops/s
Iteration   7: 227752.487 ops/s
Iteration   8: 230659.665 ops/s
Iteration   9: 237293.843 ops/s
Iteration  10: 224950.554 ops/s
Iteration  11: 243198.350 ops/s
Iteration  12: 228337.107 ops/s
Iteration  13: 231234.950 ops/s
Iteration  14: 240405.403 ops/s
Iteration  15: 223596.780 ops/s
Iteration  16: 232228.335 ops/s
Iteration  17: 238739.572 ops/s
Iteration  18: 229058.900 ops/s
Iteration  19: 237883.732 ops/s
Iteration  20: 225229.103 ops/s
Iteration  21: 240190.159 ops/s
Iteration  22: 235262.396 ops/s
Iteration  23: 225985.298 ops/s
Iteration  24: 240854.968 ops/s
Iteration  25: 226765.741 ops/s
Iteration  26: 237734.203 ops/s
Iteration  27: 229262.178 ops/s
Iteration  28: 231449.955 ops/s
Iteration  29: 235596.922 ops/s
Iteration  30: 233288.934 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_badSourceOther":
  233060.101 ±(99.9%) 3836.459 ops/s [Average]
  (min, avg, max) = (223596.780, 233060.101, 243198.350), stdev = 5742.231
  CI (99.9%): [229223.642, 236896.560] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_badSourceOther  thrpt   30  233060.101 ± 3836.459  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14718.390 ops/s
# Warmup Iteration   2: 99129.343 ops/s
# Warmup Iteration   3: 155196.832 ops/s
# Warmup Iteration   4: 169364.663 ops/s
# Warmup Iteration   5: 165296.010 ops/s
# Warmup Iteration   6: 173806.803 ops/s
# Warmup Iteration   7: 167388.607 ops/s
# Warmup Iteration   8: 161192.289 ops/s
# Warmup Iteration   9: 178123.262 ops/s
# Warmup Iteration  10: 175284.751 ops/s
# Warmup Iteration  11: 167547.626 ops/s
# Warmup Iteration  12: 176627.537 ops/s
# Warmup Iteration  13: 167075.769 ops/s
# Warmup Iteration  14: 172157.245 ops/s
# Warmup Iteration  15: 170654.382 ops/s
# Warmup Iteration  16: 173177.134 ops/s
# Warmup Iteration  17: 165319.528 ops/s
# Warmup Iteration  18: 181983.837 ops/s
# Warmup Iteration  19: 181423.774 ops/s
# Warmup Iteration  20: 172020.640 ops/s
# Warmup Iteration  21: 178104.990 ops/s
# Warmup Iteration  22: 171648.297 ops/s
# Warmup Iteration  23: 178960.762 ops/s
# Warmup Iteration  24: 178892.442 ops/s
# Warmup Iteration  25: 172053.699 ops/s
# Warmup Iteration  26: 180300.907 ops/s
# Warmup Iteration  27: 181682.212 ops/s
# Warmup Iteration  28: 173515.671 ops/s
# Warmup Iteration  29: 180010.239 ops/s
# Warmup Iteration  30: 172914.471 ops/s
Iteration   1: 177685.990 ops/s
Iteration   2: 175498.433 ops/s
Iteration   3: 178554.196 ops/s
Iteration   4: 180208.248 ops/s
Iteration   5: 180513.543 ops/s
Iteration   6: 176677.030 ops/s
Iteration   7: 182793.687 ops/s
Iteration   8: 174537.251 ops/s
Iteration   9: 180598.911 ops/s
Iteration  10: 175146.612 ops/s
Iteration  11: 180714.409 ops/s
Iteration  12: 180900.486 ops/s
Iteration  13: 177289.241 ops/s
Iteration  14: 178333.517 ops/s
Iteration  15: 182863.418 ops/s
Iteration  16: 170806.417 ops/s
Iteration  17: 179485.785 ops/s
Iteration  18: 174874.178 ops/s
Iteration  19: 175582.106 ops/s
Iteration  20: 172946.496 ops/s
Iteration  21: 184261.348 ops/s
Iteration  22: 178466.833 ops/s
Iteration  23: 177178.619 ops/s
Iteration  24: 184904.488 ops/s
Iteration  25: 177393.915 ops/s
Iteration  26: 170626.412 ops/s
Iteration  27: 169816.837 ops/s
Iteration  28: 180297.968 ops/s
Iteration  29: 182392.702 ops/s
Iteration  30: 171673.721 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_undeliverableUponCancel":
  177767.427 ±(99.9%) 2709.859 ops/s [Average]
  (min, avg, max) = (169816.837, 177767.427, 184904.488), stdev = 4055.989
  CI (99.9%): [175057.568, 180477.285] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  177767.427 ± 2709.859  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withPublisherError2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withPublisherError2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 73655.055 ops/s
# Warmup Iteration   2: 197864.755 ops/s
# Warmup Iteration   3: 218113.774 ops/s
# Warmup Iteration   4: 201572.257 ops/s
# Warmup Iteration   5: 245071.274 ops/s
# Warmup Iteration   6: 239653.242 ops/s
# Warmup Iteration   7: 243817.109 ops/s
# Warmup Iteration   8: 232980.264 ops/s
# Warmup Iteration   9: 234965.875 ops/s
# Warmup Iteration  10: 241479.798 ops/s
# Warmup Iteration  11: 232253.709 ops/s
# Warmup Iteration  12: 245829.225 ops/s
# Warmup Iteration  13: 248329.631 ops/s
# Warmup Iteration  14: 236970.972 ops/s
# Warmup Iteration  15: 233905.755 ops/s
# Warmup Iteration  16: 246838.483 ops/s
# Warmup Iteration  17: 237415.879 ops/s
# Warmup Iteration  18: 252581.803 ops/s
# Warmup Iteration  19: 255354.395 ops/s
# Warmup Iteration  20: 259064.872 ops/s
# Warmup Iteration  21: 246525.062 ops/s
# Warmup Iteration  22: 247759.383 ops/s
# Warmup Iteration  23: 241756.277 ops/s
# Warmup Iteration  24: 243686.785 ops/s
# Warmup Iteration  25: 247578.748 ops/s
# Warmup Iteration  26: 239356.240 ops/s
# Warmup Iteration  27: 247419.625 ops/s
# Warmup Iteration  28: 248120.760 ops/s
# Warmup Iteration  29: 251162.783 ops/s
# Warmup Iteration  30: 248918.058 ops/s
Iteration   1: 245000.112 ops/s
Iteration   2: 244203.471 ops/s
Iteration   3: 247015.190 ops/s
Iteration   4: 257337.150 ops/s
Iteration   5: 242465.096 ops/s
Iteration   6: 240322.299 ops/s
Iteration   7: 262680.082 ops/s
Iteration   8: 240774.770 ops/s
Iteration   9: 247178.847 ops/s
Iteration  10: 260827.489 ops/s
Iteration  11: 248851.526 ops/s
Iteration  12: 239042.126 ops/s
Iteration  13: 250664.812 ops/s
Iteration  14: 247298.259 ops/s
Iteration  15: 250378.879 ops/s
Iteration  16: 243379.377 ops/s
Iteration  17: 249278.123 ops/s
Iteration  18: 254595.074 ops/s
Iteration  19: 244218.227 ops/s
Iteration  20: 245022.615 ops/s
Iteration  21: 249655.586 ops/s
Iteration  22: 250692.226 ops/s
Iteration  23: 249470.777 ops/s
Iteration  24: 247359.840 ops/s
Iteration  25: 247505.724 ops/s
Iteration  26: 253495.764 ops/s
Iteration  27: 234110.825 ops/s
Iteration  28: 203238.161 ops/s
Iteration  29: 254548.048 ops/s
Iteration  30: 239832.814 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withPublisherError2":
  246348.110 ±(99.9%) 6891.163 ops/s [Average]
  (min, avg, max) = (203238.161, 246348.110, 262680.082), stdev = 10314.370
  CI (99.9%): [239456.946, 253239.273] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SingleDelayTest._Benchmark.benchmark_withPublisherError2  thrpt   30  246348.110 ± 6891.163  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_customComparator$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_customComparator

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.876 ops/s
# Warmup Iteration   2: 40178.879 ops/s
# Warmup Iteration   3: 88598.780 ops/s
# Warmup Iteration   4: 158713.749 ops/s
# Warmup Iteration   5: 315238.452 ops/s
# Warmup Iteration   6: 493160.093 ops/s
# Warmup Iteration   7: 497980.271 ops/s
# Warmup Iteration   8: 505764.274 ops/s
# Warmup Iteration   9: 470367.126 ops/s
# Warmup Iteration  10: 456459.836 ops/s
# Warmup Iteration  11: 451292.940 ops/s
# Warmup Iteration  12: 521404.905 ops/s
# Warmup Iteration  13: 486525.220 ops/s
# Warmup Iteration  14: 505314.878 ops/s
# Warmup Iteration  15: 501288.337 ops/s
# Warmup Iteration  16: 489836.883 ops/s
# Warmup Iteration  17: 506979.665 ops/s
# Warmup Iteration  18: 492465.253 ops/s
# Warmup Iteration  19: 493617.205 ops/s
# Warmup Iteration  20: 514520.110 ops/s
# Warmup Iteration  21: 481533.697 ops/s
# Warmup Iteration  22: 521333.372 ops/s
# Warmup Iteration  23: 483924.376 ops/s
# Warmup Iteration  24: 497191.871 ops/s
# Warmup Iteration  25: 523272.759 ops/s
# Warmup Iteration  26: 520318.505 ops/s
# Warmup Iteration  27: 479779.461 ops/s
# Warmup Iteration  28: 524429.974 ops/s
# Warmup Iteration  29: 494711.246 ops/s
# Warmup Iteration  30: 505403.342 ops/s
Iteration   1: 523538.091 ops/s
Iteration   2: 500019.048 ops/s
Iteration   3: 496304.448 ops/s
Iteration   4: 505790.144 ops/s
Iteration   5: 482154.566 ops/s
Iteration   6: 488788.499 ops/s
Iteration   7: 518660.861 ops/s
Iteration   8: 490025.710 ops/s
Iteration   9: 504861.303 ops/s
Iteration  10: 511760.450 ops/s
Iteration  11: 488560.122 ops/s
Iteration  12: 513301.181 ops/s
Iteration  13: 504466.317 ops/s
Iteration  14: 489184.215 ops/s
Iteration  15: 521931.473 ops/s
Iteration  16: 498574.099 ops/s
Iteration  17: 503218.990 ops/s
Iteration  18: 522455.235 ops/s
Iteration  19: 489968.004 ops/s
Iteration  20: 510942.852 ops/s
Iteration  21: 517004.671 ops/s
Iteration  22: 504997.487 ops/s
Iteration  23: 511294.766 ops/s
Iteration  24: 512045.460 ops/s
Iteration  25: 493717.213 ops/s
Iteration  26: 522268.337 ops/s
Iteration  27: 490296.926 ops/s
Iteration  28: 496920.963 ops/s
Iteration  29: 520180.194 ops/s
Iteration  30: 493376.289 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_customComparator":
  504220.264 ±(99.9%) 8285.811 ops/s [Average]
  (min, avg, max) = (482154.566, 504220.264, 523538.091), stdev = 12401.812
  CI (99.9%): [495934.453, 512506.074] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableDistinctUntilChangedTest._Benchmark.benchmark_customComparator  thrpt   30  504220.264 ± 8285.811  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 485965.658 ops/s
# Warmup Iteration   2: 2313158.650 ops/s
# Warmup Iteration   3: 4438387.094 ops/s
# Warmup Iteration   4: 4370813.542 ops/s
# Warmup Iteration   5: 4033432.048 ops/s
# Warmup Iteration   6: 4038679.388 ops/s
# Warmup Iteration   7: 4425843.280 ops/s
# Warmup Iteration   8: 4247610.026 ops/s
# Warmup Iteration   9: 4613696.771 ops/s
# Warmup Iteration  10: 4462690.348 ops/s
# Warmup Iteration  11: 4261463.226 ops/s
# Warmup Iteration  12: 4502561.000 ops/s
# Warmup Iteration  13: 4390612.862 ops/s
# Warmup Iteration  14: 4586864.282 ops/s
# Warmup Iteration  15: 4239947.862 ops/s
# Warmup Iteration  16: 4536976.891 ops/s
# Warmup Iteration  17: 4549359.422 ops/s
# Warmup Iteration  18: 4362373.433 ops/s
# Warmup Iteration  19: 4523433.420 ops/s
# Warmup Iteration  20: 4508430.118 ops/s
# Warmup Iteration  21: 4393532.719 ops/s
# Warmup Iteration  22: 4627877.640 ops/s
# Warmup Iteration  23: 4265510.438 ops/s
# Warmup Iteration  24: 4340137.308 ops/s
# Warmup Iteration  25: 4540811.014 ops/s
# Warmup Iteration  26: 4354528.517 ops/s
# Warmup Iteration  27: 4559792.170 ops/s
# Warmup Iteration  28: 4401801.888 ops/s
# Warmup Iteration  29: 4412100.603 ops/s
# Warmup Iteration  30: 4460192.010 ops/s
Iteration   1: 4399596.230 ops/s
Iteration   2: 4398014.552 ops/s
Iteration   3: 4564711.242 ops/s
Iteration   4: 4350983.492 ops/s
Iteration   5: 4429358.902 ops/s
Iteration   6: 4524869.292 ops/s
Iteration   7: 4525841.113 ops/s
Iteration   8: 4388520.578 ops/s
Iteration   9: 4547872.824 ops/s
Iteration  10: 4289242.803 ops/s
Iteration  11: 4604382.906 ops/s
Iteration  12: 4342242.348 ops/s
Iteration  13: 4369570.446 ops/s
Iteration  14: 4486046.331 ops/s
Iteration  15: 4372079.876 ops/s
Iteration  16: 4385230.559 ops/s
Iteration  17: 4535266.048 ops/s
Iteration  18: 4299238.838 ops/s
Iteration  19: 4591047.883 ops/s
Iteration  20: 4299973.967 ops/s
Iteration  21: 4532040.807 ops/s
Iteration  22: 3477183.804 ops/s
Iteration  23: 4432016.336 ops/s
Iteration  24: 4581003.734 ops/s
Iteration  25: 4276835.000 ops/s
Iteration  26: 4559402.223 ops/s
Iteration  27: 4391396.400 ops/s
Iteration  28: 4510011.185 ops/s
Iteration  29: 4396786.615 ops/s
Iteration  30: 4455821.782 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_just":
  4410552.937 ±(99.9%) 134817.236 ops/s [Average]
  (min, avg, max) = (3477183.804, 4410552.937, 4604382.906), stdev = 201788.107
  CI (99.9%): [4275735.702, 4545370.173] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_just  thrpt   30  4410552.937 ± 134817.236  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectIntoObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectIntoObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 254625.569 ops/s
# Warmup Iteration   2: 1203798.154 ops/s
# Warmup Iteration   3: 1879942.313 ops/s
# Warmup Iteration   4: 2295797.852 ops/s
# Warmup Iteration   5: 2341050.120 ops/s
# Warmup Iteration   6: 2301443.326 ops/s
# Warmup Iteration   7: 2240908.689 ops/s
# Warmup Iteration   8: 2310256.410 ops/s
# Warmup Iteration   9: 2355592.621 ops/s
# Warmup Iteration  10: 2351200.571 ops/s
# Warmup Iteration  11: 2314917.961 ops/s
# Warmup Iteration  12: 2246614.320 ops/s
# Warmup Iteration  13: 2369542.046 ops/s
# Warmup Iteration  14: 2209960.680 ops/s
# Warmup Iteration  15: 2308886.391 ops/s
# Warmup Iteration  16: 2326918.082 ops/s
# Warmup Iteration  17: 2256541.932 ops/s
# Warmup Iteration  18: 2310951.826 ops/s
# Warmup Iteration  19: 2257820.031 ops/s
# Warmup Iteration  20: 2340766.042 ops/s
# Warmup Iteration  21: 2362204.587 ops/s
# Warmup Iteration  22: 2269537.049 ops/s
# Warmup Iteration  23: 2319959.845 ops/s
# Warmup Iteration  24: 2247814.581 ops/s
# Warmup Iteration  25: 2280423.548 ops/s
# Warmup Iteration  26: 2300981.375 ops/s
# Warmup Iteration  27: 2238496.291 ops/s
# Warmup Iteration  28: 2408116.544 ops/s
# Warmup Iteration  29: 2283670.781 ops/s
# Warmup Iteration  30: 2288072.694 ops/s
Iteration   1: 2378770.438 ops/s
Iteration   2: 2325848.264 ops/s
Iteration   3: 2257048.132 ops/s
Iteration   4: 2396626.920 ops/s
Iteration   5: 2284607.044 ops/s
Iteration   6: 2305030.951 ops/s
Iteration   7: 2355632.376 ops/s
Iteration   8: 2293814.551 ops/s
Iteration   9: 2372839.331 ops/s
Iteration  10: 2238697.517 ops/s
Iteration  11: 2393659.750 ops/s
Iteration  12: 2250541.550 ops/s
Iteration  13: 2341795.659 ops/s
Iteration  14: 2289145.539 ops/s
Iteration  15: 2292925.065 ops/s
Iteration  16: 2372210.949 ops/s
Iteration  17: 2238895.444 ops/s
Iteration  18: 2338287.630 ops/s
Iteration  19: 2262653.190 ops/s
Iteration  20: 2368388.591 ops/s
Iteration  21: 2314657.607 ops/s
Iteration  22: 2354393.689 ops/s
Iteration  23: 2386244.580 ops/s
Iteration  24: 2288219.398 ops/s
Iteration  25: 2370399.873 ops/s
Iteration  26: 2263038.521 ops/s
Iteration  27: 2264669.723 ops/s
Iteration  28: 2379298.289 ops/s
Iteration  29: 2375116.765 ops/s
Iteration  30: 2316743.975 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectIntoObservable":
  2322340.044 ±(99.9%) 34133.167 ops/s [Average]
  (min, avg, max) = (2238697.517, 2322340.044, 2396626.920), stdev = 51088.922
  CI (99.9%): [2288206.876, 2356473.211] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableCollectTest._Benchmark.benchmark_collectIntoObservable  thrpt   30  2322340.044 ± 34133.167  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_issue1451Case2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_issue1451Case2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.733 ops/s
# Warmup Iteration   2: 35296.930 ops/s
# Warmup Iteration   3: 69307.045 ops/s
# Warmup Iteration   4: 92750.445 ops/s
# Warmup Iteration   5: 132035.681 ops/s
# Warmup Iteration   6: 277542.783 ops/s
# Warmup Iteration   7: 464611.315 ops/s
# Warmup Iteration   8: 469222.415 ops/s
# Warmup Iteration   9: 459652.595 ops/s
# Warmup Iteration  10: 438868.236 ops/s
# Warmup Iteration  11: 469708.104 ops/s
# Warmup Iteration  12: 443627.634 ops/s
# Warmup Iteration  13: 475070.547 ops/s
# Warmup Iteration  14: 454149.047 ops/s
# Warmup Iteration  15: 468281.083 ops/s
# Warmup Iteration  16: 471208.475 ops/s
# Warmup Iteration  17: 463274.373 ops/s
# Warmup Iteration  18: 450027.349 ops/s
# Warmup Iteration  19: 472048.338 ops/s
# Warmup Iteration  20: 487182.606 ops/s
# Warmup Iteration  21: 455856.107 ops/s
# Warmup Iteration  22: 469137.849 ops/s
# Warmup Iteration  23: 456749.439 ops/s
# Warmup Iteration  24: 451004.106 ops/s
# Warmup Iteration  25: 473809.954 ops/s
# Warmup Iteration  26: 455212.659 ops/s
# Warmup Iteration  27: 463239.042 ops/s
# Warmup Iteration  28: 475470.558 ops/s
# Warmup Iteration  29: 458369.460 ops/s
# Warmup Iteration  30: 461402.997 ops/s
Iteration   1: 474715.924 ops/s
Iteration   2: 457289.465 ops/s
Iteration   3: 453051.684 ops/s
Iteration   4: 470480.966 ops/s
Iteration   5: 477212.464 ops/s
Iteration   6: 446226.419 ops/s
Iteration   7: 478262.093 ops/s
Iteration   8: 477374.880 ops/s
Iteration   9: 453854.032 ops/s
Iteration  10: 459666.660 ops/s
Iteration  11: 458984.032 ops/s
Iteration  12: 467004.445 ops/s
Iteration  13: 459680.487 ops/s
Iteration  14: 456292.939 ops/s
Iteration  15: 469679.770 ops/s
Iteration  16: 378635.028 ops/s
Iteration  17: 450541.091 ops/s
Iteration  18: 456774.883 ops/s
Iteration  19: 477440.486 ops/s
Iteration  20: 464297.089 ops/s
Iteration  21: 461337.212 ops/s
Iteration  22: 465824.671 ops/s
Iteration  23: 452400.088 ops/s
Iteration  24: 489048.318 ops/s
Iteration  25: 460283.315 ops/s
Iteration  26: 450769.902 ops/s
Iteration  27: 484559.878 ops/s
Iteration  28: 468200.170 ops/s
Iteration  29: 464769.867 ops/s
Iteration  30: 452238.495 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_issue1451Case2":
  461229.892 ±(99.9%) 12696.140 ops/s [Average]
  (min, avg, max) = (378635.028, 461229.892, 489048.318), stdev = 19002.986
  CI (99.9%): [448533.752, 473926.032] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
ObservableDoOnEachTest._Benchmark.benchmark_issue1451Case2  thrpt   30  461229.892 ± 12696.140  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_selectorNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_selectorNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 163003.928 ops/s
# Warmup Iteration   2: 458298.719 ops/s
# Warmup Iteration   3: 526585.456 ops/s
# Warmup Iteration   4: 475807.860 ops/s
# Warmup Iteration   5: 560977.441 ops/s
# Warmup Iteration   6: 478927.412 ops/s
# Warmup Iteration   7: 527837.325 ops/s
# Warmup Iteration   8: 564355.516 ops/s
# Warmup Iteration   9: 579921.980 ops/s
# Warmup Iteration  10: 536956.617 ops/s
# Warmup Iteration  11: 539108.910 ops/s
# Warmup Iteration  12: 594823.730 ops/s
# Warmup Iteration  13: 543558.282 ops/s
# Warmup Iteration  14: 567506.331 ops/s
# Warmup Iteration  15: 531844.344 ops/s
# Warmup Iteration  16: 570475.435 ops/s
# Warmup Iteration  17: 574994.549 ops/s
# Warmup Iteration  18: 591974.286 ops/s
# Warmup Iteration  19: 587216.312 ops/s
# Warmup Iteration  20: 576790.710 ops/s
# Warmup Iteration  21: 585396.135 ops/s
# Warmup Iteration  22: 578301.352 ops/s
# Warmup Iteration  23: 573698.792 ops/s
# Warmup Iteration  24: 592383.355 ops/s
# Warmup Iteration  25: 585309.602 ops/s
# Warmup Iteration  26: 577528.706 ops/s
# Warmup Iteration  27: 594477.975 ops/s
# Warmup Iteration  28: 559609.365 ops/s
# Warmup Iteration  29: 577592.470 ops/s
# Warmup Iteration  30: 613609.526 ops/s
Iteration   1: 594568.947 ops/s
Iteration   2: 555481.525 ops/s
Iteration   3: 598816.698 ops/s
Iteration   4: 578916.524 ops/s
Iteration   5: 567803.793 ops/s
Iteration   6: 591649.795 ops/s
Iteration   7: 569095.895 ops/s
Iteration   8: 585627.631 ops/s
Iteration   9: 584623.043 ops/s
Iteration  10: 579771.705 ops/s
Iteration  11: 583412.153 ops/s
Iteration  12: 579147.499 ops/s
Iteration  13: 609975.151 ops/s
Iteration  14: 572532.187 ops/s
Iteration  15: 574632.082 ops/s
Iteration  16: 597538.691 ops/s
Iteration  17: 561234.208 ops/s
Iteration  18: 600736.174 ops/s
Iteration  19: 558650.610 ops/s
Iteration  20: 589056.732 ops/s
Iteration  21: 599811.808 ops/s
Iteration  22: 568427.715 ops/s
Iteration  23: 610744.458 ops/s
Iteration  24: 555716.889 ops/s
Iteration  25: 598683.398 ops/s
Iteration  26: 579393.096 ops/s
Iteration  27: 583848.727 ops/s
Iteration  28: 601032.967 ops/s
Iteration  29: 582505.048 ops/s
Iteration  30: 596782.174 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_selectorNull":
  583673.911 ±(99.9%) 10379.382 ops/s [Average]
  (min, avg, max) = (555481.525, 583673.911, 610744.458), stdev = 15535.371
  CI (99.9%): [573294.529, 594053.292] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableDematerializeTest._Benchmark.benchmark_selectorNull  thrpt   30  583673.911 ± 10379.382  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalJustConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalJustConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 786608.793 ops/s
# Warmup Iteration   2: 3892576.603 ops/s
# Warmup Iteration   3: 5363359.298 ops/s
# Warmup Iteration   4: 5667629.138 ops/s
# Warmup Iteration   5: 5909884.057 ops/s
# Warmup Iteration   6: 5636756.459 ops/s
# Warmup Iteration   7: 5956617.445 ops/s
# Warmup Iteration   8: 5785323.733 ops/s
# Warmup Iteration   9: 5645735.834 ops/s
# Warmup Iteration  10: 5875045.734 ops/s
# Warmup Iteration  11: 5799642.375 ops/s
# Warmup Iteration  12: 6019764.889 ops/s
# Warmup Iteration  13: 5727940.603 ops/s
# Warmup Iteration  14: 5722913.640 ops/s
# Warmup Iteration  15: 5887507.989 ops/s
# Warmup Iteration  16: 5604975.907 ops/s
# Warmup Iteration  17: 5807948.500 ops/s
# Warmup Iteration  18: 5693523.976 ops/s
# Warmup Iteration  19: 5966915.991 ops/s
# Warmup Iteration  20: 5869263.519 ops/s
# Warmup Iteration  21: 5713132.449 ops/s
# Warmup Iteration  22: 5834080.782 ops/s
# Warmup Iteration  23: 5804656.379 ops/s
# Warmup Iteration  24: 5778733.388 ops/s
# Warmup Iteration  25: 5760731.433 ops/s
# Warmup Iteration  26: 5957064.230 ops/s
# Warmup Iteration  27: 5842678.851 ops/s
# Warmup Iteration  28: 6145700.339 ops/s
# Warmup Iteration  29: 5591779.609 ops/s
# Warmup Iteration  30: 5839905.334 ops/s
Iteration   1: 5673390.735 ops/s
Iteration   2: 5736993.988 ops/s
Iteration   3: 5905316.163 ops/s
Iteration   4: 5818217.555 ops/s
Iteration   5: 5704968.917 ops/s
Iteration   6: 5761364.922 ops/s
Iteration   7: 5898239.900 ops/s
Iteration   8: 5622031.349 ops/s
Iteration   9: 5979174.576 ops/s
Iteration  10: 5680233.762 ops/s
Iteration  11: 4858026.999 ops/s
Iteration  12: 5912246.876 ops/s
Iteration  13: 5787213.122 ops/s
Iteration  14: 6000155.278 ops/s
Iteration  15: 5691020.916 ops/s
Iteration  16: 5822350.337 ops/s
Iteration  17: 5623165.195 ops/s
Iteration  18: 5726023.567 ops/s
Iteration  19: 5961484.628 ops/s
Iteration  20: 5786281.095 ops/s
Iteration  21: 5983417.873 ops/s
Iteration  22: 5701860.690 ops/s
Iteration  23: 5860316.136 ops/s
Iteration  24: 5827091.574 ops/s
Iteration  25: 5706194.110 ops/s
Iteration  26: 5949772.958 ops/s
Iteration  27: 5795195.585 ops/s
Iteration  28: 5902264.183 ops/s
Iteration  29: 5975382.379 ops/s
Iteration  30: 5664593.423 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalJustConditional":
  5777132.960 ±(99.9%) 139704.831 ops/s [Average]
  (min, avg, max) = (4858026.999, 5777132.960, 6000155.278), stdev = 209103.630
  CI (99.9%): [5637428.129, 5916837.791] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score        Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_normalJustConditional  thrpt   30  5777132.960 ± 139704.831  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatUntil$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatUntil

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 313137.628 ops/s
# Warmup Iteration   2: 1160117.222 ops/s
# Warmup Iteration   3: 1910143.387 ops/s
# Warmup Iteration   4: 2112190.857 ops/s
# Warmup Iteration   5: 1902333.104 ops/s
# Warmup Iteration   6: 1807527.701 ops/s
# Warmup Iteration   7: 1848318.450 ops/s
# Warmup Iteration   8: 2075623.325 ops/s
# Warmup Iteration   9: 1987051.779 ops/s
# Warmup Iteration  10: 1970171.133 ops/s
# Warmup Iteration  11: 2066600.585 ops/s
# Warmup Iteration  12: 1999801.480 ops/s
# Warmup Iteration  13: 2028336.223 ops/s
# Warmup Iteration  14: 1968790.588 ops/s
# Warmup Iteration  15: 2064650.987 ops/s
# Warmup Iteration  16: 1930055.556 ops/s
# Warmup Iteration  17: 1999675.436 ops/s
# Warmup Iteration  18: 2024587.014 ops/s
# Warmup Iteration  19: 2059059.187 ops/s
# Warmup Iteration  20: 1954957.558 ops/s
# Warmup Iteration  21: 2080359.064 ops/s
# Warmup Iteration  22: 2103473.284 ops/s
# Warmup Iteration  23: 1900648.906 ops/s
# Warmup Iteration  24: 1976611.429 ops/s
# Warmup Iteration  25: 2021550.775 ops/s
# Warmup Iteration  26: 1971038.089 ops/s
# Warmup Iteration  27: 2062866.772 ops/s
# Warmup Iteration  28: 1993986.326 ops/s
# Warmup Iteration  29: 2088229.935 ops/s
# Warmup Iteration  30: 2057937.849 ops/s
Iteration   1: 1987823.409 ops/s
Iteration   2: 2034708.017 ops/s
Iteration   3: 2015881.692 ops/s
Iteration   4: 1990907.065 ops/s
Iteration   5: 2027502.870 ops/s
Iteration   6: 1979751.497 ops/s
Iteration   7: 2013117.184 ops/s
Iteration   8: 1926372.566 ops/s
Iteration   9: 1947105.188 ops/s
Iteration  10: 2086716.346 ops/s
Iteration  11: 1974583.684 ops/s
Iteration  12: 2024621.003 ops/s
Iteration  13: 2048851.930 ops/s
Iteration  14: 1980626.345 ops/s
Iteration  15: 2037670.304 ops/s
Iteration  16: 2071773.305 ops/s
Iteration  17: 2044555.184 ops/s
Iteration  18: 1933044.494 ops/s
Iteration  19: 2045722.740 ops/s
Iteration  20: 2009286.345 ops/s
Iteration  21: 2044064.297 ops/s
Iteration  22: 2061604.845 ops/s
Iteration  23: 1959841.921 ops/s
Iteration  24: 2030044.473 ops/s
Iteration  25: 1934591.193 ops/s
Iteration  26: 2048159.793 ops/s
Iteration  27: 1948433.305 ops/s
Iteration  28: 1992323.855 ops/s
Iteration  29: 2097694.211 ops/s
Iteration  30: 1980937.540 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatUntil":
  2009277.220 ±(99.9%) 31112.438 ops/s [Average]
  (min, avg, max) = (1926372.566, 2009277.220, 2097694.211), stdev = 46567.637
  CI (99.9%): [1978164.781, 2040389.658] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatUntil  thrpt   30  2009277.220 ± 31112.438  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeat$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeat

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 415229.921 ops/s
# Warmup Iteration   2: 1610243.701 ops/s
# Warmup Iteration   3: 1924740.259 ops/s
# Warmup Iteration   4: 2120873.013 ops/s
# Warmup Iteration   5: 2224597.020 ops/s
# Warmup Iteration   6: 2123666.095 ops/s
# Warmup Iteration   7: 2202064.688 ops/s
# Warmup Iteration   8: 2243634.832 ops/s
# Warmup Iteration   9: 2157205.150 ops/s
# Warmup Iteration  10: 2098124.865 ops/s
# Warmup Iteration  11: 2129251.345 ops/s
# Warmup Iteration  12: 2142913.953 ops/s
# Warmup Iteration  13: 2170065.583 ops/s
# Warmup Iteration  14: 2147206.248 ops/s
# Warmup Iteration  15: 2139152.223 ops/s
# Warmup Iteration  16: 2208639.441 ops/s
# Warmup Iteration  17: 2110646.309 ops/s
# Warmup Iteration  18: 2183180.155 ops/s
# Warmup Iteration  19: 2205201.109 ops/s
# Warmup Iteration  20: 2139251.442 ops/s
# Warmup Iteration  21: 2186862.326 ops/s
# Warmup Iteration  22: 2098062.994 ops/s
# Warmup Iteration  23: 2214015.881 ops/s
# Warmup Iteration  24: 2251818.094 ops/s
# Warmup Iteration  25: 2171260.486 ops/s
# Warmup Iteration  26: 2149320.764 ops/s
# Warmup Iteration  27: 2176007.582 ops/s
# Warmup Iteration  28: 2272433.659 ops/s
# Warmup Iteration  29: 2087526.596 ops/s
# Warmup Iteration  30: 2279606.136 ops/s
Iteration   1: 2290015.781 ops/s
Iteration   2: 2112777.657 ops/s
Iteration   3: 2211719.082 ops/s
Iteration   4: 2146398.172 ops/s
Iteration   5: 2229694.118 ops/s
Iteration   6: 1780853.654 ops/s
Iteration   7: 2160713.186 ops/s
Iteration   8: 2217048.152 ops/s
Iteration   9: 2131187.878 ops/s
Iteration  10: 2137572.653 ops/s
Iteration  11: 2202500.986 ops/s
Iteration  12: 2113197.630 ops/s
Iteration  13: 2218467.423 ops/s
Iteration  14: 2091965.892 ops/s
Iteration  15: 2221780.032 ops/s
Iteration  16: 2188933.165 ops/s
Iteration  17: 2149665.269 ops/s
Iteration  18: 2168341.827 ops/s
Iteration  19: 2205162.455 ops/s
Iteration  20: 2107653.738 ops/s
Iteration  21: 2219385.684 ops/s
Iteration  22: 2095439.321 ops/s
Iteration  23: 2192870.181 ops/s
Iteration  24: 2111562.344 ops/s
Iteration  25: 2167915.950 ops/s
Iteration  26: 2196532.436 ops/s
Iteration  27: 2084272.015 ops/s
Iteration  28: 2230850.241 ops/s
Iteration  29: 2112488.181 ops/s
Iteration  30: 2180474.546 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeat":
  2155914.655 ±(99.9%) 58494.492 ops/s [Average]
  (min, avg, max) = (1780853.654, 2155914.655, 2290015.781), stdev = 87551.809
  CI (99.9%): [2097420.163, 2214409.147] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeat  thrpt   30  2155914.655 ± 58494.492  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatUntilSupplierCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatUntilSupplierCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 203689.182 ops/s
# Warmup Iteration   2: 478640.811 ops/s
# Warmup Iteration   3: 577253.199 ops/s
# Warmup Iteration   4: 558564.693 ops/s
# Warmup Iteration   5: 576683.250 ops/s
# Warmup Iteration   6: 576006.100 ops/s
# Warmup Iteration   7: 562429.958 ops/s
# Warmup Iteration   8: 602002.489 ops/s
# Warmup Iteration   9: 554618.526 ops/s
# Warmup Iteration  10: 552589.391 ops/s
# Warmup Iteration  11: 589280.115 ops/s
# Warmup Iteration  12: 573051.785 ops/s
# Warmup Iteration  13: 545632.622 ops/s
# Warmup Iteration  14: 560064.222 ops/s
# Warmup Iteration  15: 533626.772 ops/s
# Warmup Iteration  16: 604765.334 ops/s
# Warmup Iteration  17: 590407.169 ops/s
# Warmup Iteration  18: 600810.031 ops/s
# Warmup Iteration  19: 627817.574 ops/s
# Warmup Iteration  20: 588051.291 ops/s
# Warmup Iteration  21: 606304.975 ops/s
# Warmup Iteration  22: 597654.568 ops/s
# Warmup Iteration  23: 604313.910 ops/s
# Warmup Iteration  24: 582099.980 ops/s
# Warmup Iteration  25: 604524.259 ops/s
# Warmup Iteration  26: 604280.956 ops/s
# Warmup Iteration  27: 606525.061 ops/s
# Warmup Iteration  28: 579001.935 ops/s
# Warmup Iteration  29: 632939.111 ops/s
# Warmup Iteration  30: 589601.780 ops/s
Iteration   1: 597594.483 ops/s
Iteration   2: 611173.018 ops/s
Iteration   3: 605736.342 ops/s
Iteration   4: 591727.484 ops/s
Iteration   5: 621305.369 ops/s
Iteration   6: 612677.858 ops/s
Iteration   7: 568027.628 ops/s
Iteration   8: 613426.069 ops/s
Iteration   9: 597380.959 ops/s
Iteration  10: 579034.556 ops/s
Iteration  11: 609889.065 ops/s
Iteration  12: 581754.547 ops/s
Iteration  13: 589865.404 ops/s
Iteration  14: 595072.764 ops/s
Iteration  15: 586928.414 ops/s
Iteration  16: 598863.236 ops/s
Iteration  17: 596967.300 ops/s
Iteration  18: 617449.008 ops/s
Iteration  19: 593964.686 ops/s
Iteration  20: 613622.475 ops/s
Iteration  21: 601651.997 ops/s
Iteration  22: 604904.845 ops/s
Iteration  23: 596575.999 ops/s
Iteration  24: 603022.152 ops/s
Iteration  25: 614268.792 ops/s
Iteration  26: 590564.809 ops/s
Iteration  27: 624091.453 ops/s
Iteration  28: 588344.253 ops/s
Iteration  29: 616015.057 ops/s
Iteration  30: 585832.004 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatUntilSupplierCrash":
  600257.734 ±(99.9%) 9008.852 ops/s [Average]
  (min, avg, max) = (568027.628, 600257.734, 624091.453), stdev = 13484.027
  CI (99.9%): [591248.882, 609266.586] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableRepeatTest._Benchmark.benchmark_repeatUntilSupplierCrash  thrpt   30  600257.734 ± 9008.852  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_Observable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_Observable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 229529.957 ops/s
# Warmup Iteration   2: 1101278.439 ops/s
# Warmup Iteration   3: 1755151.267 ops/s
# Warmup Iteration   4: 2002284.509 ops/s
# Warmup Iteration   5: 2037071.422 ops/s
# Warmup Iteration   6: 1931889.209 ops/s
# Warmup Iteration   7: 2029185.676 ops/s
# Warmup Iteration   8: 1992139.647 ops/s
# Warmup Iteration   9: 2021141.974 ops/s
# Warmup Iteration  10: 2001300.975 ops/s
# Warmup Iteration  11: 1976322.444 ops/s
# Warmup Iteration  12: 2096851.685 ops/s
# Warmup Iteration  13: 2025381.927 ops/s
# Warmup Iteration  14: 1950894.776 ops/s
# Warmup Iteration  15: 2013778.257 ops/s
# Warmup Iteration  16: 2088097.916 ops/s
# Warmup Iteration  17: 1906083.053 ops/s
# Warmup Iteration  18: 1979560.707 ops/s
# Warmup Iteration  19: 2031937.828 ops/s
# Warmup Iteration  20: 1948156.497 ops/s
# Warmup Iteration  21: 2017996.831 ops/s
# Warmup Iteration  22: 1947030.223 ops/s
# Warmup Iteration  23: 2037019.307 ops/s
# Warmup Iteration  24: 1937625.582 ops/s
# Warmup Iteration  25: 1949355.265 ops/s
# Warmup Iteration  26: 2033031.092 ops/s
# Warmup Iteration  27: 1992620.479 ops/s
# Warmup Iteration  28: 1936663.850 ops/s
# Warmup Iteration  29: 2048322.420 ops/s
# Warmup Iteration  30: 1806991.795 ops/s
Iteration   1: 1790967.011 ops/s
Iteration   2: 1932323.767 ops/s
Iteration   3: 2020813.848 ops/s
Iteration   4: 2007901.843 ops/s
Iteration   5: 1952292.836 ops/s
Iteration   6: 2012871.340 ops/s
Iteration   7: 1900425.560 ops/s
Iteration   8: 2023128.890 ops/s
Iteration   9: 2021163.421 ops/s
Iteration  10: 2097865.810 ops/s
Iteration  11: 1901363.895 ops/s
Iteration  12: 2022464.530 ops/s
Iteration  13: 1949284.913 ops/s
Iteration  14: 2011666.825 ops/s
Iteration  15: 1989886.004 ops/s
Iteration  16: 1951574.140 ops/s
Iteration  17: 2011805.446 ops/s
Iteration  18: 2040141.339 ops/s
Iteration  19: 1921416.827 ops/s
Iteration  20: 2043172.315 ops/s
Iteration  21: 1979571.262 ops/s
Iteration  22: 1978804.125 ops/s
Iteration  23: 2049223.171 ops/s
Iteration  24: 1896961.619 ops/s
Iteration  25: 2029747.834 ops/s
Iteration  26: 1953389.305 ops/s
Iteration  27: 2010544.045 ops/s
Iteration  28: 1936704.927 ops/s
Iteration  29: 1997769.344 ops/s
Iteration  30: 2009904.339 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_Observable":
  1981505.018 ±(99.9%) 40732.290 ops/s [Average]
  (min, avg, max) = (1790967.011, 1981505.018, 2097865.810), stdev = 60966.179
  CI (99.9%): [1940772.728, 2022237.308] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_Observable  thrpt   30  1981505.018 ± 40732.290  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_takeFinalValueThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_takeFinalValueThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 170339.145 ops/s
# Warmup Iteration   2: 513999.865 ops/s
# Warmup Iteration   3: 543083.251 ops/s
# Warmup Iteration   4: 587620.986 ops/s
# Warmup Iteration   5: 595258.386 ops/s
# Warmup Iteration   6: 567435.847 ops/s
# Warmup Iteration   7: 601097.475 ops/s
# Warmup Iteration   8: 594605.814 ops/s
# Warmup Iteration   9: 573529.920 ops/s
# Warmup Iteration  10: 568592.058 ops/s
# Warmup Iteration  11: 566525.991 ops/s
# Warmup Iteration  12: 575163.158 ops/s
# Warmup Iteration  13: 596014.262 ops/s
# Warmup Iteration  14: 554404.782 ops/s
# Warmup Iteration  15: 599406.747 ops/s
# Warmup Iteration  16: 554351.709 ops/s
# Warmup Iteration  17: 609237.419 ops/s
# Warmup Iteration  18: 622899.202 ops/s
# Warmup Iteration  19: 590020.358 ops/s
# Warmup Iteration  20: 594281.712 ops/s
# Warmup Iteration  21: 605177.005 ops/s
# Warmup Iteration  22: 610450.468 ops/s
# Warmup Iteration  23: 596007.723 ops/s
# Warmup Iteration  24: 592431.983 ops/s
# Warmup Iteration  25: 624187.342 ops/s
# Warmup Iteration  26: 590115.038 ops/s
# Warmup Iteration  27: 621361.394 ops/s
# Warmup Iteration  28: 609250.068 ops/s
# Warmup Iteration  29: 593432.615 ops/s
# Warmup Iteration  30: 617169.275 ops/s
Iteration   1: 583995.064 ops/s
Iteration   2: 616498.492 ops/s
Iteration   3: 591207.867 ops/s
Iteration   4: 599474.815 ops/s
Iteration   5: 598067.467 ops/s
Iteration   6: 583498.942 ops/s
Iteration   7: 603793.635 ops/s
Iteration   8: 618315.512 ops/s
Iteration   9: 600106.284 ops/s
Iteration  10: 605878.591 ops/s
Iteration  11: 604346.666 ops/s
Iteration  12: 618904.545 ops/s
Iteration  13: 602712.950 ops/s
Iteration  14: 582704.944 ops/s
Iteration  15: 600197.905 ops/s
Iteration  16: 628878.439 ops/s
Iteration  17: 575189.814 ops/s
Iteration  18: 619522.962 ops/s
Iteration  19: 607518.481 ops/s
Iteration  20: 605398.110 ops/s
Iteration  21: 596172.586 ops/s
Iteration  22: 614897.262 ops/s
Iteration  23: 590908.188 ops/s
Iteration  24: 627392.370 ops/s
Iteration  25: 602537.580 ops/s
Iteration  26: 620151.088 ops/s
Iteration  27: 593540.190 ops/s
Iteration  28: 602885.630 ops/s
Iteration  29: 617308.084 ops/s
Iteration  30: 599656.276 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_takeFinalValueThrows":
  603722.025 ±(99.9%) 9016.508 ops/s [Average]
  (min, avg, max) = (575189.814, 603722.025, 628878.439), stdev = 13495.486
  CI (99.9%): [594705.516, 612738.533] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableTakeTest._Benchmark.benchmark_takeFinalValueThrows  thrpt   30  603722.025 ± 9016.508  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_scalarMapDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_scalarMapDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.880 ops/s
# Warmup Iteration   2: 48868.825 ops/s
# Warmup Iteration   3: 210185.855 ops/s
# Warmup Iteration   4: 359909.936 ops/s
# Warmup Iteration   5: 740830.329 ops/s
# Warmup Iteration   6: 1029529.970 ops/s
# Warmup Iteration   7: 1071198.611 ops/s
# Warmup Iteration   8: 1013042.624 ops/s
# Warmup Iteration   9: 981130.695 ops/s
# Warmup Iteration  10: 1040245.339 ops/s
# Warmup Iteration  11: 1028091.929 ops/s
# Warmup Iteration  12: 1006374.747 ops/s
# Warmup Iteration  13: 1031789.924 ops/s
# Warmup Iteration  14: 1034592.916 ops/s
# Warmup Iteration  15: 1046979.951 ops/s
# Warmup Iteration  16: 1073073.451 ops/s
# Warmup Iteration  17: 1010702.445 ops/s
# Warmup Iteration  18: 1004306.234 ops/s
# Warmup Iteration  19: 1061348.454 ops/s
# Warmup Iteration  20: 971582.514 ops/s
# Warmup Iteration  21: 1061624.442 ops/s
# Warmup Iteration  22: 1002692.659 ops/s
# Warmup Iteration  23: 1016632.695 ops/s
# Warmup Iteration  24: 1057784.527 ops/s
# Warmup Iteration  25: 804652.382 ops/s
# Warmup Iteration  26: 1044472.692 ops/s
# Warmup Iteration  27: 1038595.724 ops/s
# Warmup Iteration  28: 1031970.611 ops/s
# Warmup Iteration  29: 1041500.608 ops/s
# Warmup Iteration  30: 996604.150 ops/s
Iteration   1: 1033441.390 ops/s
Iteration   2: 1024949.078 ops/s
Iteration   3: 1047794.635 ops/s
Iteration   4: 1030138.211 ops/s
Iteration   5: 998925.038 ops/s
Iteration   6: 1046206.454 ops/s
Iteration   7: 1034836.907 ops/s
Iteration   8: 992570.452 ops/s
Iteration   9: 993869.579 ops/s
Iteration  10: 1008570.814 ops/s
Iteration  11: 1046841.687 ops/s
Iteration  12: 1003497.406 ops/s
Iteration  13: 1051753.110 ops/s
Iteration  14: 1032073.981 ops/s
Iteration  15: 1047720.603 ops/s
Iteration  16: 1027839.263 ops/s
Iteration  17: 1007043.437 ops/s
Iteration  18: 998577.454 ops/s
Iteration  19: 1020030.792 ops/s
Iteration  20: 992838.818 ops/s
Iteration  21: 1066830.095 ops/s
Iteration  22: 1009884.638 ops/s
Iteration  23: 1012873.757 ops/s
Iteration  24: 1030786.249 ops/s
Iteration  25: 1005743.078 ops/s
Iteration  26: 1055104.041 ops/s
Iteration  27: 1055090.559 ops/s
Iteration  28: 1015864.960 ops/s
Iteration  29: 1056383.780 ops/s
Iteration  30: 1009345.534 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_scalarMapDelayError":
  1025247.527 ±(99.9%) 14730.040 ops/s [Average]
  (min, avg, max) = (992570.452, 1025247.527, 1066830.095), stdev = 22047.232
  CI (99.9%): [1010517.486, 1039977.567] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_scalarMapDelayError  thrpt   30  1025247.527 ± 14730.040  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_scalarMap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_scalarMap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.891 ops/s
# Warmup Iteration   2: 52699.131 ops/s
# Warmup Iteration   3: 182500.975 ops/s
# Warmup Iteration   4: 230549.772 ops/s
# Warmup Iteration   5: 271918.919 ops/s
# Warmup Iteration   6: 433540.601 ops/s
# Warmup Iteration   7: 822332.355 ops/s
# Warmup Iteration   8: 943741.392 ops/s
# Warmup Iteration   9: 890664.594 ops/s
# Warmup Iteration  10: 948154.094 ops/s
# Warmup Iteration  11: 905077.852 ops/s
# Warmup Iteration  12: 910633.211 ops/s
# Warmup Iteration  13: 905947.641 ops/s
# Warmup Iteration  14: 925340.959 ops/s
# Warmup Iteration  15: 913490.496 ops/s
# Warmup Iteration  16: 936413.661 ops/s
# Warmup Iteration  17: 925957.049 ops/s
# Warmup Iteration  18: 892252.862 ops/s
# Warmup Iteration  19: 941187.095 ops/s
# Warmup Iteration  20: 883568.426 ops/s
# Warmup Iteration  21: 945112.909 ops/s
# Warmup Iteration  22: 927753.844 ops/s
# Warmup Iteration  23: 901963.525 ops/s
# Warmup Iteration  24: 937199.984 ops/s
# Warmup Iteration  25: 906997.914 ops/s
# Warmup Iteration  26: 941453.984 ops/s
# Warmup Iteration  27: 926186.782 ops/s
# Warmup Iteration  28: 930274.401 ops/s
# Warmup Iteration  29: 923205.958 ops/s
# Warmup Iteration  30: 895166.279 ops/s
Iteration   1: 936902.845 ops/s
Iteration   2: 905568.613 ops/s
Iteration   3: 922686.935 ops/s
Iteration   4: 938644.032 ops/s
Iteration   5: 894939.970 ops/s
Iteration   6: 937411.005 ops/s
Iteration   7: 869345.558 ops/s
Iteration   8: 936838.705 ops/s
Iteration   9: 958474.374 ops/s
Iteration  10: 880983.404 ops/s
Iteration  11: 948343.340 ops/s
Iteration  12: 910122.870 ops/s
Iteration  13: 924625.763 ops/s
Iteration  14: 918165.614 ops/s
Iteration  15: 896455.701 ops/s
Iteration  16: 936737.589 ops/s
Iteration  17: 894112.678 ops/s
Iteration  18: 926768.509 ops/s
Iteration  19: 947453.666 ops/s
Iteration  20: 900222.481 ops/s
Iteration  21: 947162.569 ops/s
Iteration  22: 882619.966 ops/s
Iteration  23: 931190.804 ops/s
Iteration  24: 895259.602 ops/s
Iteration  25: 947031.499 ops/s
Iteration  26: 896580.677 ops/s
Iteration  27: 909468.765 ops/s
Iteration  28: 952156.206 ops/s
Iteration  29: 886067.340 ops/s
Iteration  30: 925610.821 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_scalarMap":
  918598.397 ±(99.9%) 16493.405 ops/s [Average]
  (min, avg, max) = (869345.558, 918598.397, 958474.374), stdev = 24686.554
  CI (99.9%): [902104.992, 935091.802] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_scalarMap  thrpt   30  918598.397 ± 16493.405  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupByWithNullKey$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupByWithNullKey

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 56070.130 ops/s
# Warmup Iteration   2: 354599.613 ops/s
# Warmup Iteration   3: 951651.321 ops/s
# Warmup Iteration   4: 1119123.741 ops/s
# Warmup Iteration   5: 1328140.088 ops/s
# Warmup Iteration   6: 1308381.903 ops/s
# Warmup Iteration   7: 1290253.330 ops/s
# Warmup Iteration   8: 1366290.067 ops/s
# Warmup Iteration   9: 1324244.349 ops/s
# Warmup Iteration  10: 1333267.816 ops/s
# Warmup Iteration  11: 1265070.519 ops/s
# Warmup Iteration  12: 1336406.635 ops/s
# Warmup Iteration  13: 1313661.199 ops/s
# Warmup Iteration  14: 1340897.500 ops/s
# Warmup Iteration  15: 1297649.374 ops/s
# Warmup Iteration  16: 1252327.472 ops/s
# Warmup Iteration  17: 1345874.736 ops/s
# Warmup Iteration  18: 1323576.008 ops/s
# Warmup Iteration  19: 1229664.124 ops/s
# Warmup Iteration  20: 1162801.459 ops/s
# Warmup Iteration  21: 1282194.198 ops/s
# Warmup Iteration  22: 1271205.713 ops/s
# Warmup Iteration  23: 1378644.545 ops/s
# Warmup Iteration  24: 1270198.619 ops/s
# Warmup Iteration  25: 1353966.890 ops/s
# Warmup Iteration  26: 1366628.853 ops/s
# Warmup Iteration  27: 1281341.845 ops/s
# Warmup Iteration  28: 1329347.794 ops/s
# Warmup Iteration  29: 1287842.608 ops/s
# Warmup Iteration  30: 1339166.310 ops/s
Iteration   1: 1298669.302 ops/s
Iteration   2: 1298837.422 ops/s
Iteration   3: 1328461.187 ops/s
Iteration   4: 1237071.596 ops/s
Iteration   5: 1369368.546 ops/s
Iteration   6: 1270481.795 ops/s
Iteration   7: 1296707.685 ops/s
Iteration   8: 1293237.060 ops/s
Iteration   9: 1309404.268 ops/s
Iteration  10: 1292115.125 ops/s
Iteration  11: 1295162.213 ops/s
Iteration  12: 1319051.307 ops/s
Iteration  13: 1264050.908 ops/s
Iteration  14: 1330118.917 ops/s
Iteration  15: 1332692.151 ops/s
Iteration  16: 1281885.727 ops/s
Iteration  17: 1372566.064 ops/s
Iteration  18: 1341476.042 ops/s
Iteration  19: 1250897.253 ops/s
Iteration  20: 1348510.936 ops/s
Iteration  21: 1334355.599 ops/s
Iteration  22: 1259800.788 ops/s
Iteration  23: 1339441.756 ops/s
Iteration  24: 1304410.709 ops/s
Iteration  25: 1342852.546 ops/s
Iteration  26: 1292428.510 ops/s
Iteration  27: 1341492.414 ops/s
Iteration  28: 1301613.284 ops/s
Iteration  29: 1312909.735 ops/s
Iteration  30: 1287932.411 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupByWithNullKey":
  1308266.775 ±(99.9%) 22417.178 ops/s [Average]
  (min, avg, max) = (1237071.596, 1308266.775, 1372566.064), stdev = 33552.979
  CI (99.9%): [1285849.598, 1330683.953] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableGroupByTest._Benchmark.benchmark_groupByWithNullKey  thrpt   30  1308266.775 ± 22417.178  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_groupByValueReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_groupByValueReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 47299.684 ops/s
# Warmup Iteration   2: 140057.832 ops/s
# Warmup Iteration   3: 336162.737 ops/s
# Warmup Iteration   4: 375097.066 ops/s
# Warmup Iteration   5: 398832.469 ops/s
# Warmup Iteration   6: 413760.085 ops/s
# Warmup Iteration   7: 401185.777 ops/s
# Warmup Iteration   8: 433770.807 ops/s
# Warmup Iteration   9: 452932.001 ops/s
# Warmup Iteration  10: 428907.394 ops/s
# Warmup Iteration  11: 415656.757 ops/s
# Warmup Iteration  12: 443501.048 ops/s
# Warmup Iteration  13: 426999.174 ops/s
# Warmup Iteration  14: 449313.332 ops/s
# Warmup Iteration  15: 426602.420 ops/s
# Warmup Iteration  16: 431232.762 ops/s
# Warmup Iteration  17: 463412.768 ops/s
# Warmup Iteration  18: 423820.672 ops/s
# Warmup Iteration  19: 469477.042 ops/s
# Warmup Iteration  20: 433794.512 ops/s
# Warmup Iteration  21: 445493.296 ops/s
# Warmup Iteration  22: 444309.653 ops/s
# Warmup Iteration  23: 449519.206 ops/s
# Warmup Iteration  24: 448874.395 ops/s
# Warmup Iteration  25: 446102.582 ops/s
# Warmup Iteration  26: 447414.039 ops/s
# Warmup Iteration  27: 455431.060 ops/s
# Warmup Iteration  28: 441371.372 ops/s
# Warmup Iteration  29: 461331.245 ops/s
# Warmup Iteration  30: 439386.208 ops/s
Iteration   1: 442108.276 ops/s
Iteration   2: 447690.183 ops/s
Iteration   3: 451160.049 ops/s
Iteration   4: 455578.523 ops/s
Iteration   5: 469421.448 ops/s
Iteration   6: 433383.282 ops/s
Iteration   7: 461269.253 ops/s
Iteration   8: 446431.051 ops/s
Iteration   9: 450270.714 ops/s
Iteration  10: 444931.712 ops/s
Iteration  11: 453948.003 ops/s
Iteration  12: 450048.846 ops/s
Iteration  13: 436996.222 ops/s
Iteration  14: 461468.666 ops/s
Iteration  15: 444310.862 ops/s
Iteration  16: 445657.740 ops/s
Iteration  17: 468811.913 ops/s
Iteration  18: 457865.822 ops/s
Iteration  19: 443717.621 ops/s
Iteration  20: 450089.345 ops/s
Iteration  21: 458430.249 ops/s
Iteration  22: 426202.361 ops/s
Iteration  23: 447238.351 ops/s
Iteration  24: 454323.417 ops/s
Iteration  25: 444339.353 ops/s
Iteration  26: 466020.597 ops/s
Iteration  27: 435129.901 ops/s
Iteration  28: 449401.323 ops/s
Iteration  29: 452932.213 ops/s
Iteration  30: 432816.492 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_groupByValueReturnsNull":
  449399.793 ±(99.9%) 7027.535 ops/s [Average]
  (min, avg, max) = (426202.361, 449399.793, 469421.448), stdev = 10518.484
  CI (99.9%): [442372.258, 456427.328] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_groupByValueReturnsNull  thrpt   30  449399.793 ± 7027.535  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupByWithElementSelector$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupByWithElementSelector

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19195.385 ops/s
# Warmup Iteration   2: 100302.967 ops/s
# Warmup Iteration   3: 157604.220 ops/s
# Warmup Iteration   4: 173861.459 ops/s
# Warmup Iteration   5: 356718.301 ops/s
# Warmup Iteration   6: 423700.015 ops/s
# Warmup Iteration   7: 452818.938 ops/s
# Warmup Iteration   8: 443543.540 ops/s
# Warmup Iteration   9: 420510.408 ops/s
# Warmup Iteration  10: 444856.202 ops/s
# Warmup Iteration  11: 411046.923 ops/s
# Warmup Iteration  12: 427841.526 ops/s
# Warmup Iteration  13: 446738.570 ops/s
# Warmup Iteration  14: 340420.064 ops/s
# Warmup Iteration  15: 427760.995 ops/s
# Warmup Iteration  16: 445693.594 ops/s
# Warmup Iteration  17: 420466.353 ops/s
# Warmup Iteration  18: 444721.565 ops/s
# Warmup Iteration  19: 441368.229 ops/s
# Warmup Iteration  20: 406614.722 ops/s
# Warmup Iteration  21: 434236.653 ops/s
# Warmup Iteration  22: 417394.974 ops/s
# Warmup Iteration  23: 451520.848 ops/s
# Warmup Iteration  24: 431082.999 ops/s
# Warmup Iteration  25: 417302.678 ops/s
# Warmup Iteration  26: 440741.378 ops/s
# Warmup Iteration  27: 419192.393 ops/s
# Warmup Iteration  28: 430572.574 ops/s
# Warmup Iteration  29: 408713.253 ops/s
# Warmup Iteration  30: 441605.091 ops/s
Iteration   1: 424685.451 ops/s
Iteration   2: 437137.979 ops/s
Iteration   3: 437063.200 ops/s
Iteration   4: 423023.910 ops/s
Iteration   5: 428117.581 ops/s
Iteration   6: 436478.642 ops/s
Iteration   7: 444280.355 ops/s
Iteration   8: 415280.373 ops/s
Iteration   9: 447372.175 ops/s
Iteration  10: 409910.810 ops/s
Iteration  11: 435489.978 ops/s
Iteration  12: 416900.906 ops/s
Iteration  13: 434519.687 ops/s
Iteration  14: 416237.991 ops/s
Iteration  15: 404285.956 ops/s
Iteration  16: 430309.028 ops/s
Iteration  17: 453957.095 ops/s
Iteration  18: 425546.447 ops/s
Iteration  19: 439037.874 ops/s
Iteration  20: 429504.392 ops/s
Iteration  21: 436443.328 ops/s
Iteration  22: 432082.670 ops/s
Iteration  23: 427665.741 ops/s
Iteration  24: 441992.045 ops/s
Iteration  25: 429751.468 ops/s
Iteration  26: 443466.788 ops/s
Iteration  27: 452028.810 ops/s
Iteration  28: 433833.210 ops/s
Iteration  29: 427539.212 ops/s
Iteration  30: 433463.722 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupByWithElementSelector":
  431580.227 ±(99.9%) 7765.168 ops/s [Average]
  (min, avg, max) = (404285.956, 431580.227, 453957.095), stdev = 11622.539
  CI (99.9%): [423815.059, 439345.395] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableGroupByTest._Benchmark.benchmark_groupByWithElementSelector  thrpt   30  431580.227 ± 7765.168  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24823.234 ops/s
# Warmup Iteration   2: 91784.035 ops/s
# Warmup Iteration   3: 167001.319 ops/s
# Warmup Iteration   4: 259629.196 ops/s
# Warmup Iteration   5: 404729.941 ops/s
# Warmup Iteration   6: 354800.254 ops/s
# Warmup Iteration   7: 444916.256 ops/s
# Warmup Iteration   8: 458899.959 ops/s
# Warmup Iteration   9: 431445.902 ops/s
# Warmup Iteration  10: 439537.462 ops/s
# Warmup Iteration  11: 435978.727 ops/s
# Warmup Iteration  12: 432853.978 ops/s
# Warmup Iteration  13: 449187.592 ops/s
# Warmup Iteration  14: 429787.505 ops/s
# Warmup Iteration  15: 442545.196 ops/s
# Warmup Iteration  16: 445771.146 ops/s
# Warmup Iteration  17: 435512.788 ops/s
# Warmup Iteration  18: 459770.940 ops/s
# Warmup Iteration  19: 438228.181 ops/s
# Warmup Iteration  20: 432928.252 ops/s
# Warmup Iteration  21: 456538.245 ops/s
# Warmup Iteration  22: 423390.118 ops/s
# Warmup Iteration  23: 446102.562 ops/s
# Warmup Iteration  24: 455552.204 ops/s
# Warmup Iteration  25: 421934.834 ops/s
# Warmup Iteration  26: 433611.370 ops/s
# Warmup Iteration  27: 426377.414 ops/s
# Warmup Iteration  28: 427637.621 ops/s
# Warmup Iteration  29: 443954.705 ops/s
# Warmup Iteration  30: 429761.941 ops/s
Iteration   1: 439885.437 ops/s
Iteration   2: 434910.316 ops/s
Iteration   3: 450379.313 ops/s
Iteration   4: 437934.255 ops/s
Iteration   5: 436881.453 ops/s
Iteration   6: 457227.140 ops/s
Iteration   7: 435621.314 ops/s
Iteration   8: 442370.666 ops/s
Iteration   9: 435301.934 ops/s
Iteration  10: 441868.820 ops/s
Iteration  11: 448225.190 ops/s
Iteration  12: 446962.069 ops/s
Iteration  13: 441476.011 ops/s
Iteration  14: 442146.000 ops/s
Iteration  15: 456467.144 ops/s
Iteration  16: 451228.474 ops/s
Iteration  17: 428414.550 ops/s
Iteration  18: 455842.580 ops/s
Iteration  19: 443152.597 ops/s
Iteration  20: 441123.261 ops/s
Iteration  21: 435429.564 ops/s
Iteration  22: 445378.651 ops/s
Iteration  23: 445439.066 ops/s
Iteration  24: 421846.385 ops/s
Iteration  25: 449596.369 ops/s
Iteration  26: 448899.145 ops/s
Iteration  27: 437690.783 ops/s
Iteration  28: 455896.343 ops/s
Iteration  29: 440070.887 ops/s
Iteration  30: 437854.847 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupBy":
  442850.685 ±(99.9%) 5562.808 ops/s [Average]
  (min, avg, max) = (421846.385, 442850.685, 457227.140), stdev = 8326.150
  CI (99.9%): [437287.878, 448413.493] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ObservableGroupByTest._Benchmark.benchmark_groupBy  thrpt   30  442850.685 ± 5562.808  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_backpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_backpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 517248.819 ops/s
# Warmup Iteration   2: 2185243.936 ops/s
# Warmup Iteration   3: 2803217.615 ops/s
# Warmup Iteration   4: 2908408.542 ops/s
# Warmup Iteration   5: 3060963.571 ops/s
# Warmup Iteration   6: 2779130.402 ops/s
# Warmup Iteration   7: 2883085.515 ops/s
# Warmup Iteration   8: 2671830.010 ops/s
# Warmup Iteration   9: 2282951.925 ops/s
# Warmup Iteration  10: 3056492.381 ops/s
# Warmup Iteration  11: 2821330.893 ops/s
# Warmup Iteration  12: 2923644.854 ops/s
# Warmup Iteration  13: 3073141.423 ops/s
# Warmup Iteration  14: 2710066.696 ops/s
# Warmup Iteration  15: 2911423.149 ops/s
# Warmup Iteration  16: 2855415.618 ops/s
# Warmup Iteration  17: 2845605.368 ops/s
# Warmup Iteration  18: 2719477.424 ops/s
# Warmup Iteration  19: 2837556.178 ops/s
# Warmup Iteration  20: 2917842.837 ops/s
# Warmup Iteration  21: 2866145.733 ops/s
# Warmup Iteration  22: 2962824.857 ops/s
# Warmup Iteration  23: 2853295.706 ops/s
# Warmup Iteration  24: 2830818.638 ops/s
# Warmup Iteration  25: 2899427.614 ops/s
# Warmup Iteration  26: 2898346.819 ops/s
# Warmup Iteration  27: 2800141.103 ops/s
# Warmup Iteration  28: 2962985.258 ops/s
# Warmup Iteration  29: 2821449.235 ops/s
# Warmup Iteration  30: 2869624.483 ops/s
Iteration   1: 2871454.847 ops/s
Iteration   2: 2809803.060 ops/s
Iteration   3: 2930986.892 ops/s
Iteration   4: 2964308.407 ops/s
Iteration   5: 2849128.543 ops/s
Iteration   6: 2914389.359 ops/s
Iteration   7: 2850730.536 ops/s
Iteration   8: 3009801.691 ops/s
Iteration   9: 2892881.264 ops/s
Iteration  10: 2804596.484 ops/s
Iteration  11: 2951313.094 ops/s
Iteration  12: 2723574.423 ops/s
Iteration  13: 2813257.560 ops/s
Iteration  14: 2873582.928 ops/s
Iteration  15: 2960092.607 ops/s
Iteration  16: 2726639.571 ops/s
Iteration  17: 2885246.663 ops/s
Iteration  18: 2739670.808 ops/s
Iteration  19: 2905298.763 ops/s
Iteration  20: 2956036.426 ops/s
Iteration  21: 2742843.359 ops/s
Iteration  22: 2896461.555 ops/s
Iteration  23: 2950587.474 ops/s
Iteration  24: 2782810.486 ops/s
Iteration  25: 2777667.863 ops/s
Iteration  26: 2868929.397 ops/s
Iteration  27: 2882398.225 ops/s
Iteration  28: 2904212.138 ops/s
Iteration  29: 2840615.872 ops/s
Iteration  30: 2919184.036 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_backpressured":
  2866616.811 ±(99.9%) 51593.550 ops/s [Average]
  (min, avg, max) = (2723574.423, 2866616.811, 3009801.691), stdev = 77222.802
  CI (99.9%): [2815023.261, 2918210.361] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_backpressured  thrpt   30  2866616.811 ± 51593.550  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 338330.799 ops/s
# Warmup Iteration   2: 1194946.215 ops/s
# Warmup Iteration   3: 1193716.763 ops/s
# Warmup Iteration   4: 1124413.726 ops/s
# Warmup Iteration   5: 1414646.276 ops/s
# Warmup Iteration   6: 1325297.916 ops/s
# Warmup Iteration   7: 1333876.069 ops/s
# Warmup Iteration   8: 1377074.782 ops/s
# Warmup Iteration   9: 1367564.732 ops/s
# Warmup Iteration  10: 1384459.861 ops/s
# Warmup Iteration  11: 1301921.630 ops/s
# Warmup Iteration  12: 1369408.072 ops/s
# Warmup Iteration  13: 1304255.372 ops/s
# Warmup Iteration  14: 1419405.127 ops/s
# Warmup Iteration  15: 1400561.888 ops/s
# Warmup Iteration  16: 1331421.893 ops/s
# Warmup Iteration  17: 1375123.147 ops/s
# Warmup Iteration  18: 1474815.072 ops/s
# Warmup Iteration  19: 1458611.542 ops/s
# Warmup Iteration  20: 1386643.747 ops/s
# Warmup Iteration  21: 1410109.775 ops/s
# Warmup Iteration  22: 1403147.108 ops/s
# Warmup Iteration  23: 1351625.915 ops/s
# Warmup Iteration  24: 1378489.551 ops/s
# Warmup Iteration  25: 1406323.907 ops/s
# Warmup Iteration  26: 1381785.856 ops/s
# Warmup Iteration  27: 1374148.867 ops/s
# Warmup Iteration  28: 1404311.288 ops/s
# Warmup Iteration  29: 1367268.122 ops/s
# Warmup Iteration  30: 1440841.949 ops/s
Iteration   1: 1428264.257 ops/s
Iteration   2: 1361432.932 ops/s
Iteration   3: 1444254.232 ops/s
Iteration   4: 1385074.523 ops/s
Iteration   5: 1422985.252 ops/s
Iteration   6: 1349666.808 ops/s
Iteration   7: 1356588.486 ops/s
Iteration   8: 1399247.120 ops/s
Iteration   9: 1446933.758 ops/s
Iteration  10: 1362742.472 ops/s
Iteration  11: 1433376.196 ops/s
Iteration  12: 1420863.448 ops/s
Iteration  13: 1357358.491 ops/s
Iteration  14: 1405480.128 ops/s
Iteration  15: 1424859.839 ops/s
Iteration  16: 1370286.351 ops/s
Iteration  17: 1395359.012 ops/s
Iteration  18: 1395291.518 ops/s
Iteration  19: 1403725.391 ops/s
Iteration  20: 1448490.773 ops/s
Iteration  21: 1403392.341 ops/s
Iteration  22: 1429201.437 ops/s
Iteration  23: 1343070.837 ops/s
Iteration  24: 1431848.388 ops/s
Iteration  25: 1394471.920 ops/s
Iteration  26: 1388246.029 ops/s
Iteration  27: 1460924.479 ops/s
Iteration  28: 1368054.404 ops/s
Iteration  29: 1407022.387 ops/s
Iteration  30: 1443670.781 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_simple":
  1402739.466 ±(99.9%) 22215.869 ops/s [Average]
  (min, avg, max) = (1343070.837, 1402739.466, 1460924.479), stdev = 33251.670
  CI (99.9%): [1380523.597, 1424955.336] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_simple  thrpt   30  1402739.466 ± 22215.869  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_requestMoreOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_requestMoreOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 249043.137 ops/s
# Warmup Iteration   2: 882179.785 ops/s
# Warmup Iteration   3: 961597.531 ops/s
# Warmup Iteration   4: 823706.428 ops/s
# Warmup Iteration   5: 893386.351 ops/s
# Warmup Iteration   6: 1032618.067 ops/s
# Warmup Iteration   7: 1081764.738 ops/s
# Warmup Iteration   8: 1022681.424 ops/s
# Warmup Iteration   9: 1046492.561 ops/s
# Warmup Iteration  10: 1066474.772 ops/s
# Warmup Iteration  11: 1056119.973 ops/s
# Warmup Iteration  12: 1038534.534 ops/s
# Warmup Iteration  13: 1086714.806 ops/s
# Warmup Iteration  14: 1012104.168 ops/s
# Warmup Iteration  15: 1082151.122 ops/s
# Warmup Iteration  16: 1015482.656 ops/s
# Warmup Iteration  17: 1040221.781 ops/s
# Warmup Iteration  18: 1052675.688 ops/s
# Warmup Iteration  19: 1028745.468 ops/s
# Warmup Iteration  20: 1085618.512 ops/s
# Warmup Iteration  21: 1007509.763 ops/s
# Warmup Iteration  22: 1028401.503 ops/s
# Warmup Iteration  23: 1009729.730 ops/s
# Warmup Iteration  24: 1008213.622 ops/s
# Warmup Iteration  25: 1021913.564 ops/s
# Warmup Iteration  26: 987657.766 ops/s
# Warmup Iteration  27: 967680.288 ops/s
# Warmup Iteration  28: 1073047.430 ops/s
# Warmup Iteration  29: 990927.931 ops/s
# Warmup Iteration  30: 1035680.845 ops/s
Iteration   1: 999246.507 ops/s
Iteration   2: 1033112.864 ops/s
Iteration   3: 1055451.484 ops/s
Iteration   4: 1003570.480 ops/s
Iteration   5: 1032354.677 ops/s
Iteration   6: 1025040.124 ops/s
Iteration   7: 1033277.151 ops/s
Iteration   8: 1051910.625 ops/s
Iteration   9: 1003577.542 ops/s
Iteration  10: 1018719.623 ops/s
Iteration  11: 1013123.553 ops/s
Iteration  12: 972567.106 ops/s
Iteration  13: 1046404.751 ops/s
Iteration  14: 1021619.966 ops/s
Iteration  15: 1013818.973 ops/s
Iteration  16: 1037092.238 ops/s
Iteration  17: 1034877.638 ops/s
Iteration  18: 1057016.960 ops/s
Iteration  19: 1038800.877 ops/s
Iteration  20: 1020209.398 ops/s
Iteration  21: 1071732.807 ops/s
Iteration  22: 996881.542 ops/s
Iteration  23: 1019261.721 ops/s
Iteration  24: 1077292.481 ops/s
Iteration  25: 1014697.278 ops/s
Iteration  26: 1024168.527 ops/s
Iteration  27: 1039182.889 ops/s
Iteration  28: 1033695.058 ops/s
Iteration  29: 1059133.717 ops/s
Iteration  30: 998581.303 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_requestMoreOnNext":
  1028213.995 ±(99.9%) 15745.404 ops/s [Average]
  (min, avg, max) = (972567.106, 1028213.995, 1077292.481), stdev = 23566.981
  CI (99.9%): [1012468.591, 1043959.399] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_requestMoreOnNext  thrpt   30  1028213.995 ± 15745.404  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 113470.091 ops/s
# Warmup Iteration   2: 431851.263 ops/s
# Warmup Iteration   3: 574453.755 ops/s
# Warmup Iteration   4: 547678.366 ops/s
# Warmup Iteration   5: 638080.942 ops/s
# Warmup Iteration   6: 613963.601 ops/s
# Warmup Iteration   7: 627519.910 ops/s
# Warmup Iteration   8: 609058.967 ops/s
# Warmup Iteration   9: 627298.393 ops/s
# Warmup Iteration  10: 613109.648 ops/s
# Warmup Iteration  11: 629890.872 ops/s
# Warmup Iteration  12: 606000.762 ops/s
# Warmup Iteration  13: 628079.593 ops/s
# Warmup Iteration  14: 627507.098 ops/s
# Warmup Iteration  15: 622594.354 ops/s
# Warmup Iteration  16: 649956.066 ops/s
# Warmup Iteration  17: 641317.800 ops/s
# Warmup Iteration  18: 672432.831 ops/s
# Warmup Iteration  19: 641601.621 ops/s
# Warmup Iteration  20: 662496.502 ops/s
# Warmup Iteration  21: 672802.158 ops/s
# Warmup Iteration  22: 648724.477 ops/s
# Warmup Iteration  23: 628278.517 ops/s
# Warmup Iteration  24: 678344.724 ops/s
# Warmup Iteration  25: 643976.326 ops/s
# Warmup Iteration  26: 648949.582 ops/s
# Warmup Iteration  27: 651041.403 ops/s
# Warmup Iteration  28: 638781.845 ops/s
# Warmup Iteration  29: 658494.112 ops/s
# Warmup Iteration  30: 671773.230 ops/s
Iteration   1: 667016.099 ops/s
Iteration   2: 652257.526 ops/s
Iteration   3: 669635.427 ops/s
Iteration   4: 675292.581 ops/s
Iteration   5: 649624.819 ops/s
Iteration   6: 664719.232 ops/s
Iteration   7: 633045.498 ops/s
Iteration   8: 635081.282 ops/s
Iteration   9: 688246.116 ops/s
Iteration  10: 681249.349 ops/s
Iteration  11: 646689.980 ops/s
Iteration  12: 662677.840 ops/s
Iteration  13: 661433.924 ops/s
Iteration  14: 652335.055 ops/s
Iteration  15: 653718.466 ops/s
Iteration  16: 661837.598 ops/s
Iteration  17: 646877.452 ops/s
Iteration  18: 669049.761 ops/s
Iteration  19: 640390.119 ops/s
Iteration  20: 670028.470 ops/s
Iteration  21: 664301.613 ops/s
Iteration  22: 647128.598 ops/s
Iteration  23: 642021.648 ops/s
Iteration  24: 648460.560 ops/s
Iteration  25: 658613.961 ops/s
Iteration  26: 650324.143 ops/s
Iteration  27: 650176.023 ops/s
Iteration  28: 668953.293 ops/s
Iteration  29: 627707.219 ops/s
Iteration  30: 583239.846 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_innerError":
  654071.117 ±(99.9%) 13002.042 ops/s [Average]
  (min, avg, max) = (583239.846, 654071.117, 688246.116), stdev = 19460.846
  CI (99.9%): [641069.075, 667073.158] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_innerError  thrpt   30  654071.117 ± 13002.042  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_limit$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_limit

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 238884.061 ops/s
# Warmup Iteration   2: 1269562.224 ops/s
# Warmup Iteration   3: 1762664.416 ops/s
# Warmup Iteration   4: 1814697.373 ops/s
# Warmup Iteration   5: 1668573.902 ops/s
# Warmup Iteration   6: 1880574.511 ops/s
# Warmup Iteration   7: 1815336.805 ops/s
# Warmup Iteration   8: 1917493.589 ops/s
# Warmup Iteration   9: 1956776.438 ops/s
# Warmup Iteration  10: 1865802.089 ops/s
# Warmup Iteration  11: 1824759.218 ops/s
# Warmup Iteration  12: 1880187.524 ops/s
# Warmup Iteration  13: 1851447.236 ops/s
# Warmup Iteration  14: 1848321.203 ops/s
# Warmup Iteration  15: 1973052.213 ops/s
# Warmup Iteration  16: 1835201.202 ops/s
# Warmup Iteration  17: 1789814.832 ops/s
# Warmup Iteration  18: 1889402.562 ops/s
# Warmup Iteration  19: 1816373.509 ops/s
# Warmup Iteration  20: 1921676.064 ops/s
# Warmup Iteration  21: 1844555.050 ops/s
# Warmup Iteration  22: 1879051.065 ops/s
# Warmup Iteration  23: 1804447.422 ops/s
# Warmup Iteration  24: 1856935.790 ops/s
# Warmup Iteration  25: 1883571.576 ops/s
# Warmup Iteration  26: 1789993.839 ops/s
# Warmup Iteration  27: 1920962.701 ops/s
# Warmup Iteration  28: 1896903.967 ops/s
# Warmup Iteration  29: 1785461.938 ops/s
# Warmup Iteration  30: 1900486.211 ops/s
Iteration   1: 1845980.916 ops/s
Iteration   2: 1882882.481 ops/s
Iteration   3: 1950709.613 ops/s
Iteration   4: 1834750.025 ops/s
Iteration   5: 1847173.558 ops/s
Iteration   6: 1910953.147 ops/s
Iteration   7: 1808852.804 ops/s
Iteration   8: 1898716.677 ops/s
Iteration   9: 1859699.614 ops/s
Iteration  10: 1884287.793 ops/s
Iteration  11: 1847513.047 ops/s
Iteration  12: 1817674.344 ops/s
Iteration  13: 1937445.240 ops/s
Iteration  14: 1750759.132 ops/s
Iteration  15: 1845559.777 ops/s
Iteration  16: 1914255.816 ops/s
Iteration  17: 1941231.375 ops/s
Iteration  18: 1758513.628 ops/s
Iteration  19: 1914896.555 ops/s
Iteration  20: 1823934.112 ops/s
Iteration  21: 1843084.058 ops/s
Iteration  22: 1843121.309 ops/s
Iteration  23: 1841193.635 ops/s
Iteration  24: 1880224.409 ops/s
Iteration  25: 1901839.104 ops/s
Iteration  26: 1790975.833 ops/s
Iteration  27: 1916115.532 ops/s
Iteration  28: 1844849.209 ops/s
Iteration  29: 1829303.709 ops/s
Iteration  30: 1831149.856 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_limit":
  1859921.544 ±(99.9%) 33816.999 ops/s [Average]
  (min, avg, max) = (1750759.132, 1859921.544, 1950709.613), stdev = 50615.696
  CI (99.9%): [1826104.544, 1893738.543] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_limit  thrpt   30  1859921.544 ± 33816.999  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleSwitchOnNextTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleSwitchOnNextTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 369161.104 ops/s
# Warmup Iteration   2: 1017718.071 ops/s
# Warmup Iteration   3: 1132726.119 ops/s
# Warmup Iteration   4: 1033917.111 ops/s
# Warmup Iteration   5: 1259760.101 ops/s
# Warmup Iteration   6: 1218693.468 ops/s
# Warmup Iteration   7: 1219403.283 ops/s
# Warmup Iteration   8: 1265688.530 ops/s
# Warmup Iteration   9: 1228276.203 ops/s
# Warmup Iteration  10: 1256988.382 ops/s
# Warmup Iteration  11: 1213362.046 ops/s
# Warmup Iteration  12: 1191094.716 ops/s
# Warmup Iteration  13: 1293334.590 ops/s
# Warmup Iteration  14: 1174463.113 ops/s
# Warmup Iteration  15: 1219852.782 ops/s
# Warmup Iteration  16: 1258021.033 ops/s
# Warmup Iteration  17: 1224092.328 ops/s
# Warmup Iteration  18: 1274127.342 ops/s
# Warmup Iteration  19: 1219519.245 ops/s
# Warmup Iteration  20: 1267231.212 ops/s
# Warmup Iteration  21: 1267463.367 ops/s
# Warmup Iteration  22: 1212395.567 ops/s
# Warmup Iteration  23: 1252264.248 ops/s
# Warmup Iteration  24: 1222701.448 ops/s
# Warmup Iteration  25: 1264624.177 ops/s
# Warmup Iteration  26: 1226686.681 ops/s
# Warmup Iteration  27: 1276421.669 ops/s
# Warmup Iteration  28: 1212606.157 ops/s
# Warmup Iteration  29: 1269960.318 ops/s
# Warmup Iteration  30: 1273122.969 ops/s
Iteration   1: 1272647.346 ops/s
Iteration   2: 1209517.450 ops/s
Iteration   3: 1304235.740 ops/s
Iteration   4: 1247359.638 ops/s
Iteration   5: 1259078.143 ops/s
Iteration   6: 1284462.552 ops/s
Iteration   7: 1237521.191 ops/s
Iteration   8: 1232910.301 ops/s
Iteration   9: 1258340.175 ops/s
Iteration  10: 1243226.724 ops/s
Iteration  11: 1246710.061 ops/s
Iteration  12: 1237267.570 ops/s
Iteration  13: 1295701.149 ops/s
Iteration  14: 1227580.777 ops/s
Iteration  15: 1200773.491 ops/s
Iteration  16: 1256082.601 ops/s
Iteration  17: 1275363.939 ops/s
Iteration  18: 1203609.348 ops/s
Iteration  19: 1256272.111 ops/s
Iteration  20: 1276246.689 ops/s
Iteration  21: 1230834.468 ops/s
Iteration  22: 1224013.818 ops/s
Iteration  23: 1260717.914 ops/s
Iteration  24: 1174891.115 ops/s
Iteration  25: 1094440.892 ops/s
Iteration  26: 1250797.478 ops/s
Iteration  27: 1257063.531 ops/s
Iteration  28: 1226446.323 ops/s
Iteration  29: 1244638.982 ops/s
Iteration  30: 1255408.652 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleSwitchOnNextTest._Benchmark.benchmark_normal":
  1241472.006 ±(99.9%) 26365.156 ops/s [Average]
  (min, avg, max) = (1094440.892, 1241472.006, 1304235.740), stdev = 39462.127
  CI (99.9%): [1215106.850, 1267837.162] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
SingleSwitchOnNextTest._Benchmark.benchmark_normal  thrpt   30  1241472.006 ± 26365.156  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleSwitchOnNextTest._Benchmark.benchmark_normalDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleSwitchOnNextTest._Benchmark.benchmark_normalDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 187994.418 ops/s
# Warmup Iteration   2: 889596.117 ops/s
# Warmup Iteration   3: 1177059.346 ops/s
# Warmup Iteration   4: 1186972.227 ops/s
# Warmup Iteration   5: 1096993.489 ops/s
# Warmup Iteration   6: 1206000.031 ops/s
# Warmup Iteration   7: 1275707.663 ops/s
# Warmup Iteration   8: 1256655.188 ops/s
# Warmup Iteration   9: 1206671.648 ops/s
# Warmup Iteration  10: 1218683.197 ops/s
# Warmup Iteration  11: 1266133.254 ops/s
# Warmup Iteration  12: 1215336.959 ops/s
# Warmup Iteration  13: 1288074.522 ops/s
# Warmup Iteration  14: 1248843.954 ops/s
# Warmup Iteration  15: 1290582.108 ops/s
# Warmup Iteration  16: 1240173.771 ops/s
# Warmup Iteration  17: 1246592.229 ops/s
# Warmup Iteration  18: 1226863.952 ops/s
# Warmup Iteration  19: 1204605.060 ops/s
# Warmup Iteration  20: 1242739.052 ops/s
# Warmup Iteration  21: 1223901.724 ops/s
# Warmup Iteration  22: 1275187.025 ops/s
# Warmup Iteration  23: 1280691.398 ops/s
# Warmup Iteration  24: 1233950.270 ops/s
# Warmup Iteration  25: 1223584.066 ops/s
# Warmup Iteration  26: 1281895.927 ops/s
# Warmup Iteration  27: 1246695.082 ops/s
# Warmup Iteration  28: 1325076.416 ops/s
# Warmup Iteration  29: 1244862.192 ops/s
# Warmup Iteration  30: 1259712.226 ops/s
Iteration   1: 1292625.013 ops/s
Iteration   2: 1218893.765 ops/s
Iteration   3: 1265556.506 ops/s
Iteration   4: 1216633.502 ops/s
Iteration   5: 1221972.740 ops/s
Iteration   6: 1257862.136 ops/s
Iteration   7: 1258525.800 ops/s
Iteration   8: 1227774.728 ops/s
Iteration   9: 1259296.644 ops/s
Iteration  10: 1296924.900 ops/s
Iteration  11: 1211174.102 ops/s
Iteration  12: 1273368.857 ops/s
Iteration  13: 1221342.926 ops/s
Iteration  14: 1270297.602 ops/s
Iteration  15: 1202487.450 ops/s
Iteration  16: 1267328.230 ops/s
Iteration  17: 1253187.693 ops/s
Iteration  18: 1219671.172 ops/s
Iteration  19: 1189204.477 ops/s
Iteration  20: 1295226.293 ops/s
Iteration  21: 1225663.419 ops/s
Iteration  22: 1216347.656 ops/s
Iteration  23: 1316055.085 ops/s
Iteration  24: 1235370.160 ops/s
Iteration  25: 1249022.127 ops/s
Iteration  26: 1285301.572 ops/s
Iteration  27: 1232047.362 ops/s
Iteration  28: 1276446.403 ops/s
Iteration  29: 1158642.988 ops/s
Iteration  30: 1260651.563 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleSwitchOnNextTest._Benchmark.benchmark_normalDelayError":
  1245830.096 ±(99.9%) 23821.542 ops/s [Average]
  (min, avg, max) = (1158642.988, 1245830.096, 1316055.085), stdev = 35654.965
  CI (99.9%): [1222008.554, 1269651.637] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SingleSwitchOnNextTest._Benchmark.benchmark_normalDelayError  thrpt   30  1245830.096 ± 23821.542  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 112262.533 ops/s
# Warmup Iteration   2: 475864.943 ops/s
# Warmup Iteration   3: 513769.022 ops/s
# Warmup Iteration   4: 538745.446 ops/s
# Warmup Iteration   5: 539262.486 ops/s
# Warmup Iteration   6: 563358.736 ops/s
# Warmup Iteration   7: 560827.846 ops/s
# Warmup Iteration   8: 524857.107 ops/s
# Warmup Iteration   9: 550403.566 ops/s
# Warmup Iteration  10: 520742.182 ops/s
# Warmup Iteration  11: 525763.224 ops/s
# Warmup Iteration  12: 563332.346 ops/s
# Warmup Iteration  13: 536168.917 ops/s
# Warmup Iteration  14: 558258.184 ops/s
# Warmup Iteration  15: 538371.354 ops/s
# Warmup Iteration  16: 544991.650 ops/s
# Warmup Iteration  17: 562210.849 ops/s
# Warmup Iteration  18: 550520.264 ops/s
# Warmup Iteration  19: 579164.358 ops/s
# Warmup Iteration  20: 544102.218 ops/s
# Warmup Iteration  21: 549176.088 ops/s
# Warmup Iteration  22: 570068.655 ops/s
# Warmup Iteration  23: 568680.759 ops/s
# Warmup Iteration  24: 518119.752 ops/s
# Warmup Iteration  25: 564767.132 ops/s
# Warmup Iteration  26: 550441.197 ops/s
# Warmup Iteration  27: 586772.611 ops/s
# Warmup Iteration  28: 545716.777 ops/s
# Warmup Iteration  29: 595527.038 ops/s
# Warmup Iteration  30: 562827.209 ops/s
Iteration   1: 566404.665 ops/s
Iteration   2: 571833.297 ops/s
Iteration   3: 581132.162 ops/s
Iteration   4: 568360.663 ops/s
Iteration   5: 570862.100 ops/s
Iteration   6: 558678.372 ops/s
Iteration   7: 584132.672 ops/s
Iteration   8: 582580.715 ops/s
Iteration   9: 566744.871 ops/s
Iteration  10: 592776.882 ops/s
Iteration  11: 559899.665 ops/s
Iteration  12: 574686.336 ops/s
Iteration  13: 584807.505 ops/s
Iteration  14: 557800.164 ops/s
Iteration  15: 580126.558 ops/s
Iteration  16: 566308.044 ops/s
Iteration  17: 558505.552 ops/s
Iteration  18: 602517.417 ops/s
Iteration  19: 476428.068 ops/s
Iteration  20: 570093.594 ops/s
Iteration  21: 563325.404 ops/s
Iteration  22: 585146.779 ops/s
Iteration  23: 557280.423 ops/s
Iteration  24: 582099.400 ops/s
Iteration  25: 567828.932 ops/s
Iteration  26: 554376.077 ops/s
Iteration  27: 592351.495 ops/s
Iteration  28: 569503.496 ops/s
Iteration  29: 568101.503 ops/s
Iteration  30: 578153.673 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mapperCrash":
  569761.550 ±(99.9%) 14206.378 ops/s [Average]
  (min, avg, max) = (476428.068, 569761.550, 602517.417), stdev = 21263.439
  CI (99.9%): [555555.172, 583967.927] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_mapperCrash  thrpt   30  569761.550 ± 14206.378  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 73192.253 ops/s
# Warmup Iteration   2: 482388.367 ops/s
# Warmup Iteration   3: 612005.622 ops/s
# Warmup Iteration   4: 560979.191 ops/s
# Warmup Iteration   5: 555210.574 ops/s
# Warmup Iteration   6: 654615.094 ops/s
# Warmup Iteration   7: 628183.807 ops/s
# Warmup Iteration   8: 666188.072 ops/s
# Warmup Iteration   9: 636978.235 ops/s
# Warmup Iteration  10: 642654.838 ops/s
# Warmup Iteration  11: 658253.912 ops/s
# Warmup Iteration  12: 621156.328 ops/s
# Warmup Iteration  13: 660065.780 ops/s
# Warmup Iteration  14: 620698.177 ops/s
# Warmup Iteration  15: 669849.391 ops/s
# Warmup Iteration  16: 674486.473 ops/s
# Warmup Iteration  17: 692754.827 ops/s
# Warmup Iteration  18: 661628.209 ops/s
# Warmup Iteration  19: 703999.013 ops/s
# Warmup Iteration  20: 704304.220 ops/s
# Warmup Iteration  21: 647502.983 ops/s
# Warmup Iteration  22: 688429.493 ops/s
# Warmup Iteration  23: 657312.323 ops/s
# Warmup Iteration  24: 661492.802 ops/s
# Warmup Iteration  25: 690171.432 ops/s
# Warmup Iteration  26: 667924.323 ops/s
# Warmup Iteration  27: 674264.981 ops/s
# Warmup Iteration  28: 697400.536 ops/s
# Warmup Iteration  29: 662286.440 ops/s
# Warmup Iteration  30: 690433.866 ops/s
Iteration   1: 665497.747 ops/s
Iteration   2: 671916.461 ops/s
Iteration   3: 685636.681 ops/s
Iteration   4: 687213.557 ops/s
Iteration   5: 685179.019 ops/s
Iteration   6: 651787.520 ops/s
Iteration   7: 688874.480 ops/s
Iteration   8: 673751.550 ops/s
Iteration   9: 680754.349 ops/s
Iteration  10: 697567.733 ops/s
Iteration  11: 666780.216 ops/s
Iteration  12: 694845.523 ops/s
Iteration  13: 668728.806 ops/s
Iteration  14: 681453.817 ops/s
Iteration  15: 676917.738 ops/s
Iteration  16: 676851.050 ops/s
Iteration  17: 668303.364 ops/s
Iteration  18: 694355.366 ops/s
Iteration  19: 662276.210 ops/s
Iteration  20: 692338.138 ops/s
Iteration  21: 682031.660 ops/s
Iteration  22: 665534.103 ops/s
Iteration  23: 690274.030 ops/s
Iteration  24: 679985.205 ops/s
Iteration  25: 698969.658 ops/s
Iteration  26: 694736.473 ops/s
Iteration  27: 685971.502 ops/s
Iteration  28: 676183.569 ops/s
Iteration  29: 674049.691 ops/s
Iteration  30: 691620.263 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mainError":
  680346.183 ±(99.9%) 7920.023 ops/s [Average]
  (min, avg, max) = (651787.520, 680346.183, 698969.658), stdev = 11854.319
  CI (99.9%): [672426.159, 688266.206] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_mainError  thrpt   30  680346.183 ± 7920.023  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleSwitchOnNextTest._Benchmark.benchmark_noDelaySwitch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleSwitchOnNextTest._Benchmark.benchmark_noDelaySwitch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 249436.491 ops/s
# Warmup Iteration   2: 807762.207 ops/s
# Warmup Iteration   3: 1502502.417 ops/s
# Warmup Iteration   4: 1308336.281 ops/s
# Warmup Iteration   5: 1672296.618 ops/s
# Warmup Iteration   6: 1584038.260 ops/s
# Warmup Iteration   7: 1631612.495 ops/s
# Warmup Iteration   8: 1643683.396 ops/s
# Warmup Iteration   9: 1609066.157 ops/s
# Warmup Iteration  10: 1651916.757 ops/s
# Warmup Iteration  11: 1561220.206 ops/s
# Warmup Iteration  12: 1609668.562 ops/s
# Warmup Iteration  13: 1724607.975 ops/s
# Warmup Iteration  14: 1586497.226 ops/s
# Warmup Iteration  15: 1692408.220 ops/s
# Warmup Iteration  16: 1621213.237 ops/s
# Warmup Iteration  17: 1667587.807 ops/s
# Warmup Iteration  18: 1619194.403 ops/s
# Warmup Iteration  19: 1580088.749 ops/s
# Warmup Iteration  20: 1710903.145 ops/s
# Warmup Iteration  21: 1596026.163 ops/s
# Warmup Iteration  22: 1667318.238 ops/s
# Warmup Iteration  23: 1648715.931 ops/s
# Warmup Iteration  24: 1612759.264 ops/s
# Warmup Iteration  25: 1693977.808 ops/s
# Warmup Iteration  26: 1613268.015 ops/s
# Warmup Iteration  27: 1728147.901 ops/s
# Warmup Iteration  28: 1653997.981 ops/s
# Warmup Iteration  29: 1691027.039 ops/s
# Warmup Iteration  30: 1604843.025 ops/s
Iteration   1: 1654083.367 ops/s
Iteration   2: 1625538.867 ops/s
Iteration   3: 1636704.016 ops/s
Iteration   4: 1655237.854 ops/s
Iteration   5: 1642313.311 ops/s
Iteration   6: 1645373.367 ops/s
Iteration   7: 1611255.755 ops/s
Iteration   8: 1710200.314 ops/s
Iteration   9: 1614904.348 ops/s
Iteration  10: 1682939.272 ops/s
Iteration  11: 1585770.333 ops/s
Iteration  12: 1688574.811 ops/s
Iteration  13: 1625448.676 ops/s
Iteration  14: 1307388.323 ops/s
Iteration  15: 1684604.500 ops/s
Iteration  16: 1589015.358 ops/s
Iteration  17: 1730090.821 ops/s
Iteration  18: 1641663.682 ops/s
Iteration  19: 1637929.003 ops/s
Iteration  20: 1643393.662 ops/s
Iteration  21: 1664848.065 ops/s
Iteration  22: 1687170.105 ops/s
Iteration  23: 1685652.089 ops/s
Iteration  24: 1666972.444 ops/s
Iteration  25: 1679372.133 ops/s
Iteration  26: 1574672.319 ops/s
Iteration  27: 1669231.161 ops/s
Iteration  28: 1616594.289 ops/s
Iteration  29: 1652156.992 ops/s
Iteration  30: 1738503.825 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleSwitchOnNextTest._Benchmark.benchmark_noDelaySwitch":
  1641586.769 ±(99.9%) 49692.617 ops/s [Average]
  (min, avg, max) = (1307388.323, 1641586.769, 1738503.825), stdev = 74377.575
  CI (99.9%): [1591894.152, 1691279.386] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SingleSwitchOnNextTest._Benchmark.benchmark_noDelaySwitch  thrpt   30  1641586.769 ± 49692.617  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 335061.846 ops/s
# Warmup Iteration   2: 1498530.618 ops/s
# Warmup Iteration   3: 2038446.280 ops/s
# Warmup Iteration   4: 2029439.188 ops/s
# Warmup Iteration   5: 2134763.271 ops/s
# Warmup Iteration   6: 2190443.172 ops/s
# Warmup Iteration   7: 2231328.862 ops/s
# Warmup Iteration   8: 2282536.037 ops/s
# Warmup Iteration   9: 2283621.998 ops/s
# Warmup Iteration  10: 2280725.385 ops/s
# Warmup Iteration  11: 2162678.570 ops/s
# Warmup Iteration  12: 2248252.241 ops/s
# Warmup Iteration  13: 2302970.899 ops/s
# Warmup Iteration  14: 2167354.325 ops/s
# Warmup Iteration  15: 2320536.264 ops/s
# Warmup Iteration  16: 2157560.825 ops/s
# Warmup Iteration  17: 2321285.733 ops/s
# Warmup Iteration  18: 2312996.427 ops/s
# Warmup Iteration  19: 2135830.332 ops/s
# Warmup Iteration  20: 2243123.985 ops/s
# Warmup Iteration  21: 2273801.625 ops/s
# Warmup Iteration  22: 2178817.650 ops/s
# Warmup Iteration  23: 2281310.597 ops/s
# Warmup Iteration  24: 2254566.879 ops/s
# Warmup Iteration  25: 2190808.007 ops/s
# Warmup Iteration  26: 2266086.388 ops/s
# Warmup Iteration  27: 2192367.243 ops/s
# Warmup Iteration  28: 2282920.428 ops/s
# Warmup Iteration  29: 2249962.264 ops/s
# Warmup Iteration  30: 2330185.392 ops/s
Iteration   1: 2248383.961 ops/s
Iteration   2: 2162963.026 ops/s
Iteration   3: 2375134.280 ops/s
Iteration   4: 2174294.925 ops/s
Iteration   5: 2311388.199 ops/s
Iteration   6: 2192605.113 ops/s
Iteration   7: 2250702.597 ops/s
Iteration   8: 2249793.779 ops/s
Iteration   9: 2170903.919 ops/s
Iteration  10: 2248296.232 ops/s
Iteration  11: 2291355.890 ops/s
Iteration  12: 2325642.707 ops/s
Iteration  13: 2256086.107 ops/s
Iteration  14: 2219670.418 ops/s
Iteration  15: 2335693.230 ops/s
Iteration  16: 2202585.889 ops/s
Iteration  17: 2207383.132 ops/s
Iteration  18: 2300478.909 ops/s
Iteration  19: 2151953.403 ops/s
Iteration  20: 2329011.142 ops/s
Iteration  21: 2181804.775 ops/s
Iteration  22: 2240623.691 ops/s
Iteration  23: 2234197.559 ops/s
Iteration  24: 2269357.761 ops/s
Iteration  25: 2238275.397 ops/s
Iteration  26: 2270013.428 ops/s
Iteration  27: 2274675.259 ops/s
Iteration  28: 2272914.924 ops/s
Iteration  29: 2269962.036 ops/s
Iteration  30: 2198996.534 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_cancel":
  2248504.941 ±(99.9%) 37314.340 ops/s [Average]
  (min, avg, max) = (2151953.403, 2248504.941, 2375134.280), stdev = 55850.351
  CI (99.9%): [2211190.601, 2285819.280] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_cancel  thrpt   30  2248504.941 ± 37314.340  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76653.814 ops/s
# Warmup Iteration   2: 203205.577 ops/s
# Warmup Iteration   3: 532494.750 ops/s
# Warmup Iteration   4: 516753.102 ops/s
# Warmup Iteration   5: 538714.383 ops/s
# Warmup Iteration   6: 511768.492 ops/s
# Warmup Iteration   7: 519840.848 ops/s
# Warmup Iteration   8: 541755.858 ops/s
# Warmup Iteration   9: 531256.019 ops/s
# Warmup Iteration  10: 536348.507 ops/s
# Warmup Iteration  11: 527900.563 ops/s
# Warmup Iteration  12: 522346.234 ops/s
# Warmup Iteration  13: 522538.195 ops/s
# Warmup Iteration  14: 527838.800 ops/s
# Warmup Iteration  15: 524880.386 ops/s
# Warmup Iteration  16: 542234.845 ops/s
# Warmup Iteration  17: 564646.454 ops/s
# Warmup Iteration  18: 565866.277 ops/s
# Warmup Iteration  19: 547259.364 ops/s
# Warmup Iteration  20: 557744.293 ops/s
# Warmup Iteration  21: 583012.911 ops/s
# Warmup Iteration  22: 523855.509 ops/s
# Warmup Iteration  23: 591698.823 ops/s
# Warmup Iteration  24: 556638.352 ops/s
# Warmup Iteration  25: 550551.936 ops/s
# Warmup Iteration  26: 568775.776 ops/s
# Warmup Iteration  27: 550282.720 ops/s
# Warmup Iteration  28: 580776.190 ops/s
# Warmup Iteration  29: 540800.557 ops/s
# Warmup Iteration  30: 571529.168 ops/s
Iteration   1: 560672.917 ops/s
Iteration   2: 567573.013 ops/s
Iteration   3: 573722.818 ops/s
Iteration   4: 550536.781 ops/s
Iteration   5: 578255.278 ops/s
Iteration   6: 545672.576 ops/s
Iteration   7: 564228.101 ops/s
Iteration   8: 557287.018 ops/s
Iteration   9: 447558.474 ops/s
Iteration  10: 575896.055 ops/s
Iteration  11: 541965.563 ops/s
Iteration  12: 563752.520 ops/s
Iteration  13: 543689.572 ops/s
Iteration  14: 564638.723 ops/s
Iteration  15: 584975.444 ops/s
Iteration  16: 550830.670 ops/s
Iteration  17: 566628.894 ops/s
Iteration  18: 577162.796 ops/s
Iteration  19: 545637.509 ops/s
Iteration  20: 566908.264 ops/s
Iteration  21: 545481.099 ops/s
Iteration  22: 569791.204 ops/s
Iteration  23: 550610.032 ops/s
Iteration  24: 573998.065 ops/s
Iteration  25: 557006.890 ops/s
Iteration  26: 540784.120 ops/s
Iteration  27: 577339.943 ops/s
Iteration  28: 563309.414 ops/s
Iteration  29: 552222.860 ops/s
Iteration  30: 577514.153 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError":
  557855.026 ±(99.9%) 16286.287 ops/s [Average]
  (min, avg, max) = (447558.474, 557855.026, 584975.444), stdev = 24376.550
  CI (99.9%): [541568.738, 574141.313] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score       Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError  thrpt   30  557855.026 ± 16286.287  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54948.065 ops/s
# Warmup Iteration   2: 237192.937 ops/s
# Warmup Iteration   3: 515401.743 ops/s
# Warmup Iteration   4: 516925.004 ops/s
# Warmup Iteration   5: 540062.409 ops/s
# Warmup Iteration   6: 517980.772 ops/s
# Warmup Iteration   7: 531850.504 ops/s
# Warmup Iteration   8: 525395.845 ops/s
# Warmup Iteration   9: 536141.127 ops/s
# Warmup Iteration  10: 517767.929 ops/s
# Warmup Iteration  11: 512138.758 ops/s
# Warmup Iteration  12: 532022.601 ops/s
# Warmup Iteration  13: 536380.311 ops/s
# Warmup Iteration  14: 540530.167 ops/s
# Warmup Iteration  15: 542522.991 ops/s
# Warmup Iteration  16: 514123.185 ops/s
# Warmup Iteration  17: 582176.439 ops/s
# Warmup Iteration  18: 534219.266 ops/s
# Warmup Iteration  19: 575213.121 ops/s
# Warmup Iteration  20: 557833.246 ops/s
# Warmup Iteration  21: 562901.302 ops/s
# Warmup Iteration  22: 557919.759 ops/s
# Warmup Iteration  23: 570118.336 ops/s
# Warmup Iteration  24: 561485.468 ops/s
# Warmup Iteration  25: 583971.717 ops/s
# Warmup Iteration  26: 558092.385 ops/s
# Warmup Iteration  27: 553631.939 ops/s
# Warmup Iteration  28: 579793.431 ops/s
# Warmup Iteration  29: 550107.915 ops/s
# Warmup Iteration  30: 576831.674 ops/s
Iteration   1: 561630.793 ops/s
Iteration   2: 557889.574 ops/s
Iteration   3: 567820.926 ops/s
Iteration   4: 571842.678 ops/s
Iteration   5: 580888.598 ops/s
Iteration   6: 551865.834 ops/s
Iteration   7: 569304.419 ops/s
Iteration   8: 558604.727 ops/s
Iteration   9: 576860.732 ops/s
Iteration  10: 566782.676 ops/s
Iteration  11: 548251.584 ops/s
Iteration  12: 577151.469 ops/s
Iteration  13: 550948.162 ops/s
Iteration  14: 563680.255 ops/s
Iteration  15: 569354.434 ops/s
Iteration  16: 559698.089 ops/s
Iteration  17: 558215.773 ops/s
Iteration  18: 565908.567 ops/s
Iteration  19: 559307.275 ops/s
Iteration  20: 576247.213 ops/s
Iteration  21: 553619.481 ops/s
Iteration  22: 575940.182 ops/s
Iteration  23: 565830.013 ops/s
Iteration  24: 578922.830 ops/s
Iteration  25: 566481.962 ops/s
Iteration  26: 563359.250 ops/s
Iteration  27: 572529.230 ops/s
Iteration  28: 544087.613 ops/s
Iteration  29: 566021.994 ops/s
Iteration  30: 568585.051 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError":
  564921.046 ±(99.9%) 6303.541 ops/s [Average]
  (min, avg, max) = (544087.613, 564921.046, 580888.598), stdev = 9434.845
  CI (99.9%): [558617.505, 571224.587] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError  thrpt   30  564921.046 ± 6303.541  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleSwitchOnNextTest._Benchmark.benchmark_delaySwitch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleSwitchOnNextTest._Benchmark.benchmark_delaySwitch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 104009.256 ops/s
# Warmup Iteration   2: 322632.495 ops/s
# Warmup Iteration   3: 476608.644 ops/s
# Warmup Iteration   4: 479945.360 ops/s
# Warmup Iteration   5: 440071.276 ops/s
# Warmup Iteration   6: 518031.676 ops/s
# Warmup Iteration   7: 539246.428 ops/s
# Warmup Iteration   8: 529618.280 ops/s
# Warmup Iteration   9: 519426.538 ops/s
# Warmup Iteration  10: 544390.209 ops/s
# Warmup Iteration  11: 514901.564 ops/s
# Warmup Iteration  12: 546542.786 ops/s
# Warmup Iteration  13: 505561.957 ops/s
# Warmup Iteration  14: 534653.710 ops/s
# Warmup Iteration  15: 548187.990 ops/s
# Warmup Iteration  16: 524659.707 ops/s
# Warmup Iteration  17: 569509.576 ops/s
# Warmup Iteration  18: 542684.728 ops/s
# Warmup Iteration  19: 556757.306 ops/s
# Warmup Iteration  20: 561041.152 ops/s
# Warmup Iteration  21: 553028.321 ops/s
# Warmup Iteration  22: 544325.254 ops/s
# Warmup Iteration  23: 559454.727 ops/s
# Warmup Iteration  24: 533207.608 ops/s
# Warmup Iteration  25: 573751.684 ops/s
# Warmup Iteration  26: 563505.221 ops/s
# Warmup Iteration  27: 535438.118 ops/s
# Warmup Iteration  28: 562092.828 ops/s
# Warmup Iteration  29: 549151.987 ops/s
# Warmup Iteration  30: 566616.607 ops/s
Iteration   1: 559218.315 ops/s
Iteration   2: 542237.248 ops/s
Iteration   3: 565083.302 ops/s
Iteration   4: 436180.682 ops/s
Iteration   5: 539684.179 ops/s
Iteration   6: 559750.866 ops/s
Iteration   7: 527954.691 ops/s
Iteration   8: 557418.006 ops/s
Iteration   9: 528600.881 ops/s
Iteration  10: 551044.774 ops/s
Iteration  11: 538619.759 ops/s
Iteration  12: 538368.340 ops/s
Iteration  13: 549408.547 ops/s
Iteration  14: 555802.748 ops/s
Iteration  15: 527201.519 ops/s
Iteration  16: 567375.887 ops/s
Iteration  17: 543229.826 ops/s
Iteration  18: 548010.823 ops/s
Iteration  19: 568872.666 ops/s
Iteration  20: 541559.718 ops/s
Iteration  21: 567553.633 ops/s
Iteration  22: 540814.331 ops/s
Iteration  23: 549812.012 ops/s
Iteration  24: 556979.092 ops/s
Iteration  25: 547821.616 ops/s
Iteration  26: 554963.456 ops/s
Iteration  27: 545287.362 ops/s
Iteration  28: 566579.455 ops/s
Iteration  29: 534454.622 ops/s
Iteration  30: 551331.886 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleSwitchOnNextTest._Benchmark.benchmark_delaySwitch":
  545374.008 ±(99.9%) 15934.562 ops/s [Average]
  (min, avg, max) = (436180.682, 545374.008, 568872.666), stdev = 23850.104
  CI (99.9%): [529439.446, 561308.570] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
SingleSwitchOnNextTest._Benchmark.benchmark_delaySwitch  thrpt   30  545374.008 ± 15934.562  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_switchOverDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_switchOverDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61814.313 ops/s
# Warmup Iteration   2: 262374.173 ops/s
# Warmup Iteration   3: 530615.198 ops/s
# Warmup Iteration   4: 520196.205 ops/s
# Warmup Iteration   5: 487864.298 ops/s
# Warmup Iteration   6: 490964.788 ops/s
# Warmup Iteration   7: 488689.287 ops/s
# Warmup Iteration   8: 485360.565 ops/s
# Warmup Iteration   9: 490231.819 ops/s
# Warmup Iteration  10: 507102.358 ops/s
# Warmup Iteration  11: 513355.927 ops/s
# Warmup Iteration  12: 523342.255 ops/s
# Warmup Iteration  13: 505935.493 ops/s
# Warmup Iteration  14: 526179.661 ops/s
# Warmup Iteration  15: 511909.192 ops/s
# Warmup Iteration  16: 524630.890 ops/s
# Warmup Iteration  17: 543713.445 ops/s
# Warmup Iteration  18: 530658.452 ops/s
# Warmup Iteration  19: 559018.402 ops/s
# Warmup Iteration  20: 516455.857 ops/s
# Warmup Iteration  21: 543186.765 ops/s
# Warmup Iteration  22: 556492.392 ops/s
# Warmup Iteration  23: 530814.986 ops/s
# Warmup Iteration  24: 525982.756 ops/s
# Warmup Iteration  25: 531038.724 ops/s
# Warmup Iteration  26: 538757.223 ops/s
# Warmup Iteration  27: 520309.952 ops/s
# Warmup Iteration  28: 554046.601 ops/s
# Warmup Iteration  29: 521169.386 ops/s
# Warmup Iteration  30: 551618.630 ops/s
Iteration   1: 532808.758 ops/s
Iteration   2: 535148.175 ops/s
Iteration   3: 548925.199 ops/s
Iteration   4: 520436.675 ops/s
Iteration   5: 549594.210 ops/s
Iteration   6: 525273.253 ops/s
Iteration   7: 532484.824 ops/s
Iteration   8: 541277.748 ops/s
Iteration   9: 510368.975 ops/s
Iteration  10: 545715.531 ops/s
Iteration  11: 548625.414 ops/s
Iteration  12: 509826.112 ops/s
Iteration  13: 542285.429 ops/s
Iteration  14: 527268.640 ops/s
Iteration  15: 538270.450 ops/s
Iteration  16: 556061.800 ops/s
Iteration  17: 523586.505 ops/s
Iteration  18: 535205.242 ops/s
Iteration  19: 551962.355 ops/s
Iteration  20: 526685.936 ops/s
Iteration  21: 560633.397 ops/s
Iteration  22: 533002.604 ops/s
Iteration  23: 533361.917 ops/s
Iteration  24: 552483.576 ops/s
Iteration  25: 536669.748 ops/s
Iteration  26: 538940.390 ops/s
Iteration  27: 527023.721 ops/s
Iteration  28: 528844.682 ops/s
Iteration  29: 543141.962 ops/s
Iteration  30: 522992.735 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_switchOverDelayError":
  535963.532 ±(99.9%) 8443.023 ops/s [Average]
  (min, avg, max) = (509826.112, 535963.532, 560633.397), stdev = 12637.120
  CI (99.9%): [527520.509, 544406.555] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_switchOverDelayError  thrpt   30  535963.532 ± 8443.023  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_switchOver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_switchOver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87620.622 ops/s
# Warmup Iteration   2: 390589.011 ops/s
# Warmup Iteration   3: 509504.891 ops/s
# Warmup Iteration   4: 551191.667 ops/s
# Warmup Iteration   5: 537060.184 ops/s
# Warmup Iteration   6: 486557.132 ops/s
# Warmup Iteration   7: 489121.431 ops/s
# Warmup Iteration   8: 539971.805 ops/s
# Warmup Iteration   9: 523539.820 ops/s
# Warmup Iteration  10: 539007.750 ops/s
# Warmup Iteration  11: 520398.577 ops/s
# Warmup Iteration  12: 522208.262 ops/s
# Warmup Iteration  13: 529639.884 ops/s
# Warmup Iteration  14: 521130.488 ops/s
# Warmup Iteration  15: 527783.709 ops/s
# Warmup Iteration  16: 529264.668 ops/s
# Warmup Iteration  17: 549493.734 ops/s
# Warmup Iteration  18: 577313.508 ops/s
# Warmup Iteration  19: 544454.946 ops/s
# Warmup Iteration  20: 552324.061 ops/s
# Warmup Iteration  21: 565848.340 ops/s
# Warmup Iteration  22: 541938.567 ops/s
# Warmup Iteration  23: 570165.000 ops/s
# Warmup Iteration  24: 542826.559 ops/s
# Warmup Iteration  25: 545206.383 ops/s
# Warmup Iteration  26: 558841.921 ops/s
# Warmup Iteration  27: 553325.126 ops/s
# Warmup Iteration  28: 514322.290 ops/s
# Warmup Iteration  29: 467651.333 ops/s
# Warmup Iteration  30: 546262.821 ops/s
Iteration   1: 566380.108 ops/s
Iteration   2: 555932.195 ops/s
Iteration   3: 560003.593 ops/s
Iteration   4: 541734.307 ops/s
Iteration   5: 546465.409 ops/s
Iteration   6: 561266.592 ops/s
Iteration   7: 542554.675 ops/s
Iteration   8: 557404.822 ops/s
Iteration   9: 568969.887 ops/s
Iteration  10: 561742.146 ops/s
Iteration  11: 549724.909 ops/s
Iteration  12: 539233.558 ops/s
Iteration  13: 581519.350 ops/s
Iteration  14: 540861.651 ops/s
Iteration  15: 554382.732 ops/s
Iteration  16: 539361.617 ops/s
Iteration  17: 563605.899 ops/s
Iteration  18: 539367.646 ops/s
Iteration  19: 551434.411 ops/s
Iteration  20: 557102.590 ops/s
Iteration  21: 566780.622 ops/s
Iteration  22: 537768.878 ops/s
Iteration  23: 550002.460 ops/s
Iteration  24: 565249.109 ops/s
Iteration  25: 543281.681 ops/s
Iteration  26: 547888.303 ops/s
Iteration  27: 555397.412 ops/s
Iteration  28: 571347.903 ops/s
Iteration  29: 536794.106 ops/s
Iteration  30: 545727.762 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_switchOver":
  553309.544 ±(99.9%) 7804.877 ops/s [Average]
  (min, avg, max) = (536794.106, 553309.544, 581519.350), stdev = 11681.974
  CI (99.9%): [545504.667, 561114.422] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_switchOver  thrpt   30  553309.544 ± 7804.877  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mainErrorAfterTermination$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mainErrorAfterTermination

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21083.760 ops/s
# Warmup Iteration   2: 69960.393 ops/s
# Warmup Iteration   3: 134717.914 ops/s
# Warmup Iteration   4: 161008.584 ops/s
# Warmup Iteration   5: 165033.038 ops/s
# Warmup Iteration   6: 155712.844 ops/s
# Warmup Iteration   7: 160562.096 ops/s
# Warmup Iteration   8: 152909.539 ops/s
# Warmup Iteration   9: 160861.068 ops/s
# Warmup Iteration  10: 160679.040 ops/s
# Warmup Iteration  11: 167354.251 ops/s
# Warmup Iteration  12: 158530.436 ops/s
# Warmup Iteration  13: 165393.526 ops/s
# Warmup Iteration  14: 158977.340 ops/s
# Warmup Iteration  15: 168844.768 ops/s
# Warmup Iteration  16: 166154.573 ops/s
# Warmup Iteration  17: 167254.096 ops/s
# Warmup Iteration  18: 158847.868 ops/s
# Warmup Iteration  19: 168630.315 ops/s
# Warmup Iteration  20: 168493.869 ops/s
# Warmup Iteration  21: 166308.477 ops/s
# Warmup Iteration  22: 168691.092 ops/s
# Warmup Iteration  23: 173999.025 ops/s
# Warmup Iteration  24: 165302.963 ops/s
# Warmup Iteration  25: 167948.497 ops/s
# Warmup Iteration  26: 167085.252 ops/s
# Warmup Iteration  27: 174364.948 ops/s
# Warmup Iteration  28: 164699.153 ops/s
# Warmup Iteration  29: 174278.132 ops/s
# Warmup Iteration  30: 169689.760 ops/s
Iteration   1: 164011.724 ops/s
Iteration   2: 163757.056 ops/s
Iteration   3: 170600.984 ops/s
Iteration   4: 167577.442 ops/s
Iteration   5: 175361.949 ops/s
Iteration   6: 162305.087 ops/s
Iteration   7: 164906.397 ops/s
Iteration   8: 172909.545 ops/s
Iteration   9: 170076.687 ops/s
Iteration  10: 168966.598 ops/s
Iteration  11: 165990.711 ops/s
Iteration  12: 162788.554 ops/s
Iteration  13: 175991.753 ops/s
Iteration  14: 162328.560 ops/s
Iteration  15: 162595.718 ops/s
Iteration  16: 172330.683 ops/s
Iteration  17: 165924.535 ops/s
Iteration  18: 167957.187 ops/s
Iteration  19: 173717.411 ops/s
Iteration  20: 168339.149 ops/s
Iteration  21: 172154.624 ops/s
Iteration  22: 166989.814 ops/s
Iteration  23: 174990.065 ops/s
Iteration  24: 163871.887 ops/s
Iteration  25: 173152.053 ops/s
Iteration  26: 166880.793 ops/s
Iteration  27: 169362.061 ops/s
Iteration  28: 170316.144 ops/s
Iteration  29: 169862.754 ops/s
Iteration  30: 166585.547 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_mainErrorAfterTermination":
  168420.116 ±(99.9%) 2768.865 ops/s [Average]
  (min, avg, max) = (162305.087, 168420.116, 175991.753), stdev = 4144.307
  CI (99.9%): [165651.251, 171188.981] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_mainErrorAfterTermination  thrpt   30  168420.116 ± 2768.865  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_innerErrorAfterTermination$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_innerErrorAfterTermination

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27882.905 ops/s
# Warmup Iteration   2: 123214.554 ops/s
# Warmup Iteration   3: 174810.356 ops/s
# Warmup Iteration   4: 175839.429 ops/s
# Warmup Iteration   5: 186430.620 ops/s
# Warmup Iteration   6: 166937.668 ops/s
# Warmup Iteration   7: 177508.811 ops/s
# Warmup Iteration   8: 185508.764 ops/s
# Warmup Iteration   9: 173222.220 ops/s
# Warmup Iteration  10: 180343.444 ops/s
# Warmup Iteration  11: 171402.799 ops/s
# Warmup Iteration  12: 176897.998 ops/s
# Warmup Iteration  13: 187948.104 ops/s
# Warmup Iteration  14: 173723.988 ops/s
# Warmup Iteration  15: 187068.533 ops/s
# Warmup Iteration  16: 173763.331 ops/s
# Warmup Iteration  17: 183181.917 ops/s
# Warmup Iteration  18: 183459.597 ops/s
# Warmup Iteration  19: 180817.655 ops/s
# Warmup Iteration  20: 180217.328 ops/s
# Warmup Iteration  21: 183541.034 ops/s
# Warmup Iteration  22: 184713.937 ops/s
# Warmup Iteration  23: 190782.569 ops/s
# Warmup Iteration  24: 129016.105 ops/s
# Warmup Iteration  25: 191015.517 ops/s
# Warmup Iteration  26: 187776.978 ops/s
# Warmup Iteration  27: 190988.683 ops/s
# Warmup Iteration  28: 193900.551 ops/s
# Warmup Iteration  29: 182714.210 ops/s
# Warmup Iteration  30: 187223.394 ops/s
Iteration   1: 194941.247 ops/s
Iteration   2: 181140.598 ops/s
Iteration   3: 188095.210 ops/s
Iteration   4: 192996.680 ops/s
Iteration   5: 181914.618 ops/s
Iteration   6: 193646.783 ops/s
Iteration   7: 190958.765 ops/s
Iteration   8: 182930.221 ops/s
Iteration   9: 190767.222 ops/s
Iteration  10: 185544.366 ops/s
Iteration  11: 191475.375 ops/s
Iteration  12: 191006.903 ops/s
Iteration  13: 184740.278 ops/s
Iteration  14: 186511.339 ops/s
Iteration  15: 190383.879 ops/s
Iteration  16: 187066.665 ops/s
Iteration  17: 188060.273 ops/s
Iteration  18: 185472.920 ops/s
Iteration  19: 180255.183 ops/s
Iteration  20: 190320.395 ops/s
Iteration  21: 186686.156 ops/s
Iteration  22: 186563.400 ops/s
Iteration  23: 184004.313 ops/s
Iteration  24: 186482.710 ops/s
Iteration  25: 183030.178 ops/s
Iteration  26: 187823.257 ops/s
Iteration  27: 185736.596 ops/s
Iteration  28: 182854.462 ops/s
Iteration  29: 190818.162 ops/s
Iteration  30: 191200.263 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_innerErrorAfterTermination":
  187447.614 ±(99.9%) 2593.413 ops/s [Average]
  (min, avg, max) = (180255.183, 187447.614, 194941.247), stdev = 3881.699
  CI (99.9%): [184854.201, 190041.027] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_innerErrorAfterTermination  thrpt   30  187447.614 ± 2593.413  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 137835.412 ops/s
# Warmup Iteration   2: 447623.922 ops/s
# Warmup Iteration   3: 476797.914 ops/s
# Warmup Iteration   4: 445059.772 ops/s
# Warmup Iteration   5: 530669.480 ops/s
# Warmup Iteration   6: 467457.537 ops/s
# Warmup Iteration   7: 475435.023 ops/s
# Warmup Iteration   8: 528937.773 ops/s
# Warmup Iteration   9: 494368.844 ops/s
# Warmup Iteration  10: 519390.392 ops/s
# Warmup Iteration  11: 508733.153 ops/s
# Warmup Iteration  12: 514915.812 ops/s
# Warmup Iteration  13: 519204.421 ops/s
# Warmup Iteration  14: 510079.143 ops/s
# Warmup Iteration  15: 527508.114 ops/s
# Warmup Iteration  16: 506503.598 ops/s
# Warmup Iteration  17: 530995.986 ops/s
# Warmup Iteration  18: 554529.121 ops/s
# Warmup Iteration  19: 526744.608 ops/s
# Warmup Iteration  20: 561579.947 ops/s
# Warmup Iteration  21: 525558.917 ops/s
# Warmup Iteration  22: 552136.440 ops/s
# Warmup Iteration  23: 563326.024 ops/s
# Warmup Iteration  24: 516950.356 ops/s
# Warmup Iteration  25: 540825.781 ops/s
# Warmup Iteration  26: 542424.199 ops/s
# Warmup Iteration  27: 549808.344 ops/s
# Warmup Iteration  28: 551353.727 ops/s
# Warmup Iteration  29: 519426.233 ops/s
# Warmup Iteration  30: 538106.924 ops/s
Iteration   1: 542984.472 ops/s
Iteration   2: 547707.605 ops/s
Iteration   3: 534945.490 ops/s
Iteration   4: 522259.903 ops/s
Iteration   5: 544834.425 ops/s
Iteration   6: 537906.264 ops/s
Iteration   7: 542430.895 ops/s
Iteration   8: 534175.809 ops/s
Iteration   9: 538563.850 ops/s
Iteration  10: 538373.594 ops/s
Iteration  11: 515135.302 ops/s
Iteration  12: 549345.328 ops/s
Iteration  13: 539952.960 ops/s
Iteration  14: 544630.378 ops/s
Iteration  15: 545865.378 ops/s
Iteration  16: 526952.958 ops/s
Iteration  17: 558059.534 ops/s
Iteration  18: 543548.622 ops/s
Iteration  19: 538549.503 ops/s
Iteration  20: 537945.451 ops/s
Iteration  21: 524316.995 ops/s
Iteration  22: 562787.823 ops/s
Iteration  23: 532038.563 ops/s
Iteration  24: 548022.786 ops/s
Iteration  25: 529810.710 ops/s
Iteration  26: 550717.319 ops/s
Iteration  27: 556966.475 ops/s
Iteration  28: 529833.401 ops/s
Iteration  29: 562430.072 ops/s
Iteration  30: 523493.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingleTest._Benchmark.benchmark_doubleOnSubscribe":
  540152.850 ±(99.9%) 7881.186 ops/s [Average]
  (min, avg, max) = (515135.302, 540152.850, 562787.823), stdev = 11796.189
  CI (99.9%): [532271.665, 548034.036] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableSwitchMapSingleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  540152.850 ± 7881.186  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 49078.038 ops/s
# Warmup Iteration   2: 166685.114 ops/s
# Warmup Iteration   3: 249718.778 ops/s
# Warmup Iteration   4: 240751.768 ops/s
# Warmup Iteration   5: 247754.547 ops/s
# Warmup Iteration   6: 252809.916 ops/s
# Warmup Iteration   7: 243446.314 ops/s
# Warmup Iteration   8: 244280.943 ops/s
# Warmup Iteration   9: 247722.753 ops/s
# Warmup Iteration  10: 232995.728 ops/s
# Warmup Iteration  11: 242349.326 ops/s
# Warmup Iteration  12: 258554.469 ops/s
# Warmup Iteration  13: 246691.287 ops/s
# Warmup Iteration  14: 263121.721 ops/s
# Warmup Iteration  15: 239774.822 ops/s
# Warmup Iteration  16: 249501.816 ops/s
# Warmup Iteration  17: 262739.728 ops/s
# Warmup Iteration  18: 252516.112 ops/s
# Warmup Iteration  19: 206947.404 ops/s
# Warmup Iteration  20: 258221.327 ops/s
# Warmup Iteration  21: 259285.907 ops/s
# Warmup Iteration  22: 266619.003 ops/s
# Warmup Iteration  23: 254233.922 ops/s
# Warmup Iteration  24: 260190.283 ops/s
# Warmup Iteration  25: 269788.744 ops/s
# Warmup Iteration  26: 247651.684 ops/s
# Warmup Iteration  27: 261252.614 ops/s
# Warmup Iteration  28: 265932.940 ops/s
# Warmup Iteration  29: 249698.163 ops/s
# Warmup Iteration  30: 271155.662 ops/s
Iteration   1: 264867.827 ops/s
Iteration   2: 258024.441 ops/s
Iteration   3: 265861.173 ops/s
Iteration   4: 260185.036 ops/s
Iteration   5: 255773.426 ops/s
Iteration   6: 264179.226 ops/s
Iteration   7: 254071.921 ops/s
Iteration   8: 270724.822 ops/s
Iteration   9: 251999.646 ops/s
Iteration  10: 266313.860 ops/s
Iteration  11: 259555.343 ops/s
Iteration  12: 261038.879 ops/s
Iteration  13: 256009.727 ops/s
Iteration  14: 263277.496 ops/s
Iteration  15: 260852.852 ops/s
Iteration  16: 264258.071 ops/s
Iteration  17: 260242.146 ops/s
Iteration  18: 255121.426 ops/s
Iteration  19: 262224.257 ops/s
Iteration  20: 258502.203 ops/s
Iteration  21: 266119.523 ops/s
Iteration  22: 254977.602 ops/s
Iteration  23: 260140.881 ops/s
Iteration  24: 249928.298 ops/s
Iteration  25: 265807.309 ops/s
Iteration  26: 261628.816 ops/s
Iteration  27: 270407.687 ops/s
Iteration  28: 262593.928 ops/s
Iteration  29: 248185.267 ops/s
Iteration  30: 270470.229 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_doubleOnSubscribe":
  260778.111 ±(99.9%) 3875.548 ops/s [Average]
  (min, avg, max) = (248185.267, 260778.111, 270724.822), stdev = 5800.738
  CI (99.9%): [256902.563, 264653.659] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
FlowableAnyTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  260778.111 ± 3875.548  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancelAsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancelAsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15434.171 ops/s
# Warmup Iteration   2: 108089.219 ops/s
# Warmup Iteration   3: 149486.691 ops/s
# Warmup Iteration   4: 163566.098 ops/s
# Warmup Iteration   5: 171653.578 ops/s
# Warmup Iteration   6: 158816.227 ops/s
# Warmup Iteration   7: 165242.470 ops/s
# Warmup Iteration   8: 159085.130 ops/s
# Warmup Iteration   9: 156107.707 ops/s
# Warmup Iteration  10: 170977.941 ops/s
# Warmup Iteration  11: 173176.527 ops/s
# Warmup Iteration  12: 152807.681 ops/s
# Warmup Iteration  13: 170405.122 ops/s
# Warmup Iteration  14: 159297.432 ops/s
# Warmup Iteration  15: 172379.729 ops/s
# Warmup Iteration  16: 165043.372 ops/s
# Warmup Iteration  17: 183713.252 ops/s
# Warmup Iteration  18: 184172.023 ops/s
# Warmup Iteration  19: 180545.145 ops/s
# Warmup Iteration  20: 188788.953 ops/s
# Warmup Iteration  21: 183400.535 ops/s
# Warmup Iteration  22: 180937.709 ops/s
# Warmup Iteration  23: 184653.533 ops/s
# Warmup Iteration  24: 180440.171 ops/s
# Warmup Iteration  25: 182281.628 ops/s
# Warmup Iteration  26: 184165.770 ops/s
# Warmup Iteration  27: 185841.887 ops/s
# Warmup Iteration  28: 181829.727 ops/s
# Warmup Iteration  29: 186461.901 ops/s
# Warmup Iteration  30: 179112.775 ops/s
Iteration   1: 187548.193 ops/s
Iteration   2: 178639.824 ops/s
Iteration   3: 184784.171 ops/s
Iteration   4: 183226.769 ops/s
Iteration   5: 176445.925 ops/s
Iteration   6: 191357.612 ops/s
Iteration   7: 175519.618 ops/s
Iteration   8: 186738.799 ops/s
Iteration   9: 179277.544 ops/s
Iteration  10: 183758.552 ops/s
Iteration  11: 178711.648 ops/s
Iteration  12: 185594.875 ops/s
Iteration  13: 182255.776 ops/s
Iteration  14: 180898.463 ops/s
Iteration  15: 176823.276 ops/s
Iteration  16: 187589.458 ops/s
Iteration  17: 183372.401 ops/s
Iteration  18: 186461.843 ops/s
Iteration  19: 181695.835 ops/s
Iteration  20: 182984.018 ops/s
Iteration  21: 183846.171 ops/s
Iteration  22: 187270.406 ops/s
Iteration  23: 188558.155 ops/s
Iteration  24: 178667.613 ops/s
Iteration  25: 182674.528 ops/s
Iteration  26: 187018.947 ops/s
Iteration  27: 180247.283 ops/s
Iteration  28: 181804.408 ops/s
Iteration  29: 178880.368 ops/s
Iteration  30: 189511.527 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancelAsFlowable":
  183072.134 ±(99.9%) 2763.994 ops/s [Average]
  (min, avg, max) = (175519.618, 183072.134, 191357.612), stdev = 4137.016
  CI (99.9%): [180308.140, 185836.127] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancelAsFlowable  thrpt   30  183072.134 ± 2763.994  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRangeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRangeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 46691.371 ops/s
# Warmup Iteration   2: 118777.036 ops/s
# Warmup Iteration   3: 131734.577 ops/s
# Warmup Iteration   4: 120214.179 ops/s
# Warmup Iteration   5: 135922.917 ops/s
# Warmup Iteration   6: 160845.212 ops/s
# Warmup Iteration   7: 157358.346 ops/s
# Warmup Iteration   8: 127866.888 ops/s
# Warmup Iteration   9: 142221.273 ops/s
# Warmup Iteration  10: 174793.782 ops/s
# Warmup Iteration  11: 142096.630 ops/s
# Warmup Iteration  12: 170614.466 ops/s
# Warmup Iteration  13: 150269.060 ops/s
# Warmup Iteration  14: 130097.471 ops/s
# Warmup Iteration  15: 138934.179 ops/s
# Warmup Iteration  16: 136940.410 ops/s
# Warmup Iteration  17: 133707.580 ops/s
# Warmup Iteration  18: 133703.961 ops/s
# Warmup Iteration  19: 130108.020 ops/s
# Warmup Iteration  20: 146337.599 ops/s
# Warmup Iteration  21: 162190.152 ops/s
# Warmup Iteration  22: 148025.904 ops/s
# Warmup Iteration  23: 130004.111 ops/s
# Warmup Iteration  24: 159398.516 ops/s
# Warmup Iteration  25: 141970.383 ops/s
# Warmup Iteration  26: 157663.891 ops/s
# Warmup Iteration  27: 139284.903 ops/s
# Warmup Iteration  28: 137701.204 ops/s
# Warmup Iteration  29: 137460.414 ops/s
# Warmup Iteration  30: 157658.234 ops/s
Iteration   1: 152232.438 ops/s
Iteration   2: 119923.449 ops/s
Iteration   3: 146750.795 ops/s
Iteration   4: 128810.396 ops/s
Iteration   5: 140088.628 ops/s
Iteration   6: 173189.899 ops/s
Iteration   7: 148297.007 ops/s
Iteration   8: 146889.081 ops/s
Iteration   9: 131388.971 ops/s
Iteration  10: 139280.328 ops/s
Iteration  11: 161506.672 ops/s
Iteration  12: 147144.057 ops/s
Iteration  13: 137325.945 ops/s
Iteration  14: 115679.431 ops/s
Iteration  15: 162153.784 ops/s
Iteration  16: 158505.193 ops/s
Iteration  17: 152506.659 ops/s
Iteration  18: 133659.117 ops/s
Iteration  19: 139294.955 ops/s
Iteration  20: 150187.435 ops/s
Iteration  21: 129512.402 ops/s
Iteration  22: 130275.003 ops/s
Iteration  23: 133509.545 ops/s
Iteration  24: 136863.629 ops/s
Iteration  25: 157268.168 ops/s
Iteration  26: 153214.845 ops/s
Iteration  27: 149492.144 ops/s
Iteration  28: 137587.975 ops/s
Iteration  29: 137598.123 ops/s
Iteration  30: 123208.980 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRangeTest._Benchmark.benchmark_dispose":
  142444.835 ±(99.9%) 8943.077 ops/s [Average]
  (min, avg, max) = (115679.431, 142444.835, 173189.899), stdev = 13385.577
  CI (99.9%): [133501.758, 151387.912] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ObservableIntervalRangeTest._Benchmark.benchmark_dispose  thrpt   30  142444.835 ± 8943.077  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 333389.933 ops/s
# Warmup Iteration   2: 598429.583 ops/s
# Warmup Iteration   3: 680130.674 ops/s
# Warmup Iteration   4: 711101.903 ops/s
# Warmup Iteration   5: 647663.457 ops/s
# Warmup Iteration   6: 750995.026 ops/s
# Warmup Iteration   7: 736381.081 ops/s
# Warmup Iteration   8: 750545.106 ops/s
# Warmup Iteration   9: 763034.852 ops/s
# Warmup Iteration  10: 723769.853 ops/s
# Warmup Iteration  11: 741527.067 ops/s
# Warmup Iteration  12: 747855.790 ops/s
# Warmup Iteration  13: 726686.954 ops/s
# Warmup Iteration  14: 770092.682 ops/s
# Warmup Iteration  15: 718607.895 ops/s
# Warmup Iteration  16: 760211.075 ops/s
# Warmup Iteration  17: 784809.572 ops/s
# Warmup Iteration  18: 779279.886 ops/s
# Warmup Iteration  19: 813713.332 ops/s
# Warmup Iteration  20: 784406.377 ops/s
# Warmup Iteration  21: 802746.626 ops/s
# Warmup Iteration  22: 777938.199 ops/s
# Warmup Iteration  23: 811955.667 ops/s
# Warmup Iteration  24: 777981.377 ops/s
# Warmup Iteration  25: 793515.076 ops/s
# Warmup Iteration  26: 799484.763 ops/s
# Warmup Iteration  27: 786903.803 ops/s
# Warmup Iteration  28: 761355.430 ops/s
# Warmup Iteration  29: 831513.843 ops/s
# Warmup Iteration  30: 757464.388 ops/s
Iteration   1: 807650.597 ops/s
Iteration   2: 771819.372 ops/s
Iteration   3: 793999.710 ops/s
Iteration   4: 772759.912 ops/s
Iteration   5: 762054.362 ops/s
Iteration   6: 804546.280 ops/s
Iteration   7: 765716.420 ops/s
Iteration   8: 791435.395 ops/s
Iteration   9: 772159.066 ops/s
Iteration  10: 773314.220 ops/s
Iteration  11: 779122.497 ops/s
Iteration  12: 757207.995 ops/s
Iteration  13: 791172.439 ops/s
Iteration  14: 762541.644 ops/s
Iteration  15: 786055.886 ops/s
Iteration  16: 803719.667 ops/s
Iteration  17: 744100.443 ops/s
Iteration  18: 789183.668 ops/s
Iteration  19: 762435.554 ops/s
Iteration  20: 807582.420 ops/s
Iteration  21: 775779.140 ops/s
Iteration  22: 787901.038 ops/s
Iteration  23: 804711.351 ops/s
Iteration  24: 769856.093 ops/s
Iteration  25: 794195.193 ops/s
Iteration  26: 791138.656 ops/s
Iteration  27: 784376.790 ops/s
Iteration  28: 823755.007 ops/s
Iteration  29: 773479.934 ops/s
Iteration  30: 787379.924 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_error":
  783038.356 ±(99.9%) 11970.901 ops/s [Average]
  (min, avg, max) = (744100.443, 783038.356, 823755.007), stdev = 17917.482
  CI (99.9%): [771067.455, 795009.257] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score       Error  Units
MaybeTimestampTest._Benchmark.benchmark_error  thrpt   30  783038.356 ± 11970.901  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 356971.090 ops/s
# Warmup Iteration   2: 627755.058 ops/s
# Warmup Iteration   3: 773832.431 ops/s
# Warmup Iteration   4: 639567.402 ops/s
# Warmup Iteration   5: 679273.647 ops/s
# Warmup Iteration   6: 722977.836 ops/s
# Warmup Iteration   7: 601608.988 ops/s
# Warmup Iteration   8: 742313.256 ops/s
# Warmup Iteration   9: 741299.127 ops/s
# Warmup Iteration  10: 756969.191 ops/s
# Warmup Iteration  11: 734140.506 ops/s
# Warmup Iteration  12: 755926.251 ops/s
# Warmup Iteration  13: 752997.835 ops/s
# Warmup Iteration  14: 779662.689 ops/s
# Warmup Iteration  15: 739028.987 ops/s
# Warmup Iteration  16: 747015.102 ops/s
# Warmup Iteration  17: 816878.666 ops/s
# Warmup Iteration  18: 790447.154 ops/s
# Warmup Iteration  19: 766423.170 ops/s
# Warmup Iteration  20: 821397.314 ops/s
# Warmup Iteration  21: 780039.709 ops/s
# Warmup Iteration  22: 828036.570 ops/s
# Warmup Iteration  23: 771968.060 ops/s
# Warmup Iteration  24: 797002.293 ops/s
# Warmup Iteration  25: 784756.358 ops/s
# Warmup Iteration  26: 780192.878 ops/s
# Warmup Iteration  27: 812664.518 ops/s
# Warmup Iteration  28: 782340.422 ops/s
# Warmup Iteration  29: 787933.375 ops/s
# Warmup Iteration  30: 784085.719 ops/s
Iteration   1: 775630.513 ops/s
Iteration   2: 797539.268 ops/s
Iteration   3: 789368.427 ops/s
Iteration   4: 806131.316 ops/s
Iteration   5: 771783.850 ops/s
Iteration   6: 822884.823 ops/s
Iteration   7: 802056.593 ops/s
Iteration   8: 777941.609 ops/s
Iteration   9: 828116.721 ops/s
Iteration  10: 776069.036 ops/s
Iteration  11: 799406.161 ops/s
Iteration  12: 806674.580 ops/s
Iteration  13: 776971.714 ops/s
Iteration  14: 795638.990 ops/s
Iteration  15: 763347.899 ops/s
Iteration  16: 805569.250 ops/s
Iteration  17: 784036.375 ops/s
Iteration  18: 776631.937 ops/s
Iteration  19: 803219.316 ops/s
Iteration  20: 766468.057 ops/s
Iteration  21: 824685.657 ops/s
Iteration  22: 775198.563 ops/s
Iteration  23: 820102.387 ops/s
Iteration  24: 785318.501 ops/s
Iteration  25: 803130.607 ops/s
Iteration  26: 834628.393 ops/s
Iteration  27: 766470.386 ops/s
Iteration  28: 801111.930 ops/s
Iteration  29: 816468.674 ops/s
Iteration  30: 763069.223 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_error":
  793855.692 ±(99.9%) 13876.376 ops/s [Average]
  (min, avg, max) = (763069.223, 793855.692, 834628.393), stdev = 20769.508
  CI (99.9%): [779979.316, 807732.068] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
SingleTimeIntervalTest._Benchmark.benchmark_error  thrpt   30  793855.692 ± 13876.376  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 260780.823 ops/s
# Warmup Iteration   2: 429428.746 ops/s
# Warmup Iteration   3: 434192.273 ops/s
# Warmup Iteration   4: 405911.463 ops/s
# Warmup Iteration   5: 473489.954 ops/s
# Warmup Iteration   6: 459847.814 ops/s
# Warmup Iteration   7: 464967.260 ops/s
# Warmup Iteration   8: 485741.640 ops/s
# Warmup Iteration   9: 452739.865 ops/s
# Warmup Iteration  10: 478454.192 ops/s
# Warmup Iteration  11: 457779.968 ops/s
# Warmup Iteration  12: 461329.977 ops/s
# Warmup Iteration  13: 476348.997 ops/s
# Warmup Iteration  14: 461506.431 ops/s
# Warmup Iteration  15: 490572.483 ops/s
# Warmup Iteration  16: 468769.985 ops/s
# Warmup Iteration  17: 474333.265 ops/s
# Warmup Iteration  18: 493794.033 ops/s
# Warmup Iteration  19: 479860.594 ops/s
# Warmup Iteration  20: 484787.970 ops/s
# Warmup Iteration  21: 492232.248 ops/s
# Warmup Iteration  22: 472491.814 ops/s
# Warmup Iteration  23: 479325.522 ops/s
# Warmup Iteration  24: 492159.123 ops/s
# Warmup Iteration  25: 484381.526 ops/s
# Warmup Iteration  26: 485103.999 ops/s
# Warmup Iteration  27: 500306.954 ops/s
# Warmup Iteration  28: 457105.222 ops/s
# Warmup Iteration  29: 505325.155 ops/s
# Warmup Iteration  30: 474188.305 ops/s
Iteration   1: 488188.356 ops/s
Iteration   2: 483150.609 ops/s
Iteration   3: 500228.606 ops/s
Iteration   4: 482064.599 ops/s
Iteration   5: 469703.755 ops/s
Iteration   6: 493787.295 ops/s
Iteration   7: 473579.686 ops/s
Iteration   8: 490691.673 ops/s
Iteration   9: 500576.351 ops/s
Iteration  10: 467382.982 ops/s
Iteration  11: 491915.524 ops/s
Iteration  12: 472832.903 ops/s
Iteration  13: 478471.461 ops/s
Iteration  14: 495498.350 ops/s
Iteration  15: 476394.126 ops/s
Iteration  16: 478881.430 ops/s
Iteration  17: 495432.528 ops/s
Iteration  18: 474251.006 ops/s
Iteration  19: 482448.823 ops/s
Iteration  20: 472094.842 ops/s
Iteration  21: 480077.480 ops/s
Iteration  22: 489751.627 ops/s
Iteration  23: 470554.925 ops/s
Iteration  24: 489895.714 ops/s
Iteration  25: 482070.245 ops/s
Iteration  26: 498440.111 ops/s
Iteration  27: 471831.795 ops/s
Iteration  28: 481993.045 ops/s
Iteration  29: 493131.574 ops/s
Iteration  30: 472332.893 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_error":
  483255.144 ±(99.9%) 6709.953 ops/s [Average]
  (min, avg, max) = (467382.982, 483255.144, 500576.351), stdev = 10043.142
  CI (99.9%): [476545.191, 489965.097] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
SingleTimestampTest._Benchmark.benchmark_error  thrpt   30  483255.144 ± 6709.953  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 189499.215 ops/s
# Warmup Iteration   2: 339854.533 ops/s
# Warmup Iteration   3: 441335.998 ops/s
# Warmup Iteration   4: 464325.698 ops/s
# Warmup Iteration   5: 482216.007 ops/s
# Warmup Iteration   6: 458554.545 ops/s
# Warmup Iteration   7: 483355.452 ops/s
# Warmup Iteration   8: 480023.194 ops/s
# Warmup Iteration   9: 462017.929 ops/s
# Warmup Iteration  10: 482834.605 ops/s
# Warmup Iteration  11: 459406.222 ops/s
# Warmup Iteration  12: 472538.194 ops/s
# Warmup Iteration  13: 488215.877 ops/s
# Warmup Iteration  14: 456231.087 ops/s
# Warmup Iteration  15: 474779.835 ops/s
# Warmup Iteration  16: 461193.626 ops/s
# Warmup Iteration  17: 493825.772 ops/s
# Warmup Iteration  18: 501951.327 ops/s
# Warmup Iteration  19: 482057.024 ops/s
# Warmup Iteration  20: 479656.853 ops/s
# Warmup Iteration  21: 507377.824 ops/s
# Warmup Iteration  22: 508769.231 ops/s
# Warmup Iteration  23: 474243.544 ops/s
# Warmup Iteration  24: 472143.288 ops/s
# Warmup Iteration  25: 464241.717 ops/s
# Warmup Iteration  26: 487385.600 ops/s
# Warmup Iteration  27: 499899.045 ops/s
# Warmup Iteration  28: 483553.008 ops/s
# Warmup Iteration  29: 494704.261 ops/s
# Warmup Iteration  30: 488495.653 ops/s
Iteration   1: 494555.218 ops/s
Iteration   2: 501107.870 ops/s
Iteration   3: 480819.209 ops/s
Iteration   4: 499371.573 ops/s
Iteration   5: 481392.933 ops/s
Iteration   6: 504828.414 ops/s
Iteration   7: 480447.337 ops/s
Iteration   8: 504579.606 ops/s
Iteration   9: 506536.913 ops/s
Iteration  10: 496517.479 ops/s
Iteration  11: 506710.505 ops/s
Iteration  12: 482214.401 ops/s
Iteration  13: 497164.302 ops/s
Iteration  14: 492152.065 ops/s
Iteration  15: 501656.018 ops/s
Iteration  16: 480708.354 ops/s
Iteration  17: 504731.277 ops/s
Iteration  18: 480896.000 ops/s
Iteration  19: 506366.445 ops/s
Iteration  20: 475689.524 ops/s
Iteration  21: 502864.500 ops/s
Iteration  22: 505976.207 ops/s
Iteration  23: 484702.063 ops/s
Iteration  24: 498243.844 ops/s
Iteration  25: 508082.058 ops/s
Iteration  26: 511978.339 ops/s
Iteration  27: 470871.196 ops/s
Iteration  28: 508781.532 ops/s
Iteration  29: 486421.309 ops/s
Iteration  30: 487516.900 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_error":
  494796.113 ±(99.9%) 7841.539 ops/s [Average]
  (min, avg, max) = (470871.196, 494796.113, 511978.339), stdev = 11736.847
  CI (99.9%): [486954.574, 502637.652] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
MaybeTimeIntervalTest._Benchmark.benchmark_error  thrpt   30  494796.113 ± 7841.539  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 120199.056 ops/s
# Warmup Iteration   2: 405445.586 ops/s
# Warmup Iteration   3: 444363.316 ops/s
# Warmup Iteration   4: 436806.846 ops/s
# Warmup Iteration   5: 518422.026 ops/s
# Warmup Iteration   6: 424560.398 ops/s
# Warmup Iteration   7: 490164.486 ops/s
# Warmup Iteration   8: 512754.710 ops/s
# Warmup Iteration   9: 485415.614 ops/s
# Warmup Iteration  10: 495363.322 ops/s
# Warmup Iteration  11: 512406.961 ops/s
# Warmup Iteration  12: 486978.122 ops/s
# Warmup Iteration  13: 509765.646 ops/s
# Warmup Iteration  14: 499248.390 ops/s
# Warmup Iteration  15: 509746.310 ops/s
# Warmup Iteration  16: 515518.758 ops/s
# Warmup Iteration  17: 504106.546 ops/s
# Warmup Iteration  18: 531229.496 ops/s
# Warmup Iteration  19: 508940.463 ops/s
# Warmup Iteration  20: 507597.329 ops/s
# Warmup Iteration  21: 533712.744 ops/s
# Warmup Iteration  22: 502913.143 ops/s
# Warmup Iteration  23: 526246.279 ops/s
# Warmup Iteration  24: 502418.535 ops/s
# Warmup Iteration  25: 510883.137 ops/s
# Warmup Iteration  26: 515046.906 ops/s
# Warmup Iteration  27: 519593.858 ops/s
# Warmup Iteration  28: 511439.213 ops/s
# Warmup Iteration  29: 524188.888 ops/s
# Warmup Iteration  30: 505744.311 ops/s
Iteration   1: 530546.588 ops/s
Iteration   2: 514492.474 ops/s
Iteration   3: 532167.408 ops/s
Iteration   4: 506279.976 ops/s
Iteration   5: 526935.131 ops/s
Iteration   6: 512894.475 ops/s
Iteration   7: 530521.340 ops/s
Iteration   8: 508681.365 ops/s
Iteration   9: 528808.878 ops/s
Iteration  10: 500553.473 ops/s
Iteration  11: 519014.021 ops/s
Iteration  12: 512801.490 ops/s
Iteration  13: 530814.114 ops/s
Iteration  14: 525227.895 ops/s
Iteration  15: 508409.630 ops/s
Iteration  16: 504118.201 ops/s
Iteration  17: 514888.746 ops/s
Iteration  18: 516145.930 ops/s
Iteration  19: 514658.764 ops/s
Iteration  20: 532516.375 ops/s
Iteration  21: 506068.792 ops/s
Iteration  22: 534259.493 ops/s
Iteration  23: 504856.815 ops/s
Iteration  24: 534687.678 ops/s
Iteration  25: 525611.344 ops/s
Iteration  26: 505733.813 ops/s
Iteration  27: 528248.734 ops/s
Iteration  28: 502948.848 ops/s
Iteration  29: 431400.954 ops/s
Iteration  30: 510719.389 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_doubleOnSubscribe":
  515167.071 ±(99.9%) 12864.734 ops/s [Average]
  (min, avg, max) = (431400.954, 515167.071, 534687.678), stdev = 19255.330
  CI (99.9%): [502302.337, 528031.805] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableThrottleLatestTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  515167.071 ± 12864.734  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.791 ops/s
# Warmup Iteration   2: 19246.126 ops/s
# Warmup Iteration   3: 30256.827 ops/s
# Warmup Iteration   4: 27371.083 ops/s
# Warmup Iteration   5: 46033.091 ops/s
# Warmup Iteration   6: 12971.571 ops/s
# Warmup Iteration   7: 26947.490 ops/s
# Warmup Iteration   8: 75108.311 ops/s
# Warmup Iteration   9: 33630.744 ops/s
# Warmup Iteration  10: 52088.456 ops/s
# Warmup Iteration  11: 2927.602 ops/s
# Warmup Iteration  12: 3866.278 ops/s
# Warmup Iteration  13: 4480.198 ops/s
# Warmup Iteration  14: 3367.328 ops/s
# Warmup Iteration  15: 13820.692 ops/s
# Warmup Iteration  16: 44926.820 ops/s
# Warmup Iteration  17: 19309.199 ops/s
# Warmup Iteration  18: 12349.023 ops/s
# Warmup Iteration  19: 13986.941 ops/s
# Warmup Iteration  20: 6258.830 ops/s
# Warmup Iteration  21: 9903.632 ops/s
# Warmup Iteration  22: 7361.765 ops/s
# Warmup Iteration  23: 6593.835 ops/s
# Warmup Iteration  24: 3005.246 ops/s
# Warmup Iteration  25: 5092.876 ops/s
# Warmup Iteration  26: 2365.141 ops/s
# Warmup Iteration  27: 3348.830 ops/s
# Warmup Iteration  28: 3954.137 ops/s
# Warmup Iteration  29: 3809.861 ops/s
# Warmup Iteration  30: 10993.909 ops/s
Iteration   1: 3504.795 ops/s
Iteration   2: 13060.657 ops/s
Iteration   3: 5588.088 ops/s
Iteration   4: 3362.556 ops/s
Iteration   5: 3798.788 ops/s
Iteration   6: 4176.295 ops/s
Iteration   7: 4387.791 ops/s
Iteration   8: 3489.648 ops/s
Iteration   9: 4135.788 ops/s
Iteration  10: 5180.063 ops/s
Iteration  11: 4421.152 ops/s
Iteration  12: 4319.365 ops/s
Iteration  13: 3835.884 ops/s
Iteration  14: 2689.242 ops/s
Iteration  15: 3523.995 ops/s
Iteration  16: 3543.513 ops/s
Iteration  17: 3325.402 ops/s
Iteration  18: 5017.335 ops/s
Iteration  19: 3304.430 ops/s
Iteration  20: 2560.386 ops/s
Iteration  21: 3122.859 ops/s
Iteration  22: 2709.164 ops/s
Iteration  23: 3095.512 ops/s
Iteration  24: 4451.606 ops/s
Iteration  25: 2156.933 ops/s
Iteration  26: 2742.820 ops/s
Iteration  27: 2861.662 ops/s
Iteration  28: 5206.288 ops/s
Iteration  29: 2586.687 ops/s
Iteration  30: 3024.164 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_doubleOnSubscribe":
  3972.762 ±(99.9%) 1288.022 ops/s [Average]
  (min, avg, max) = (2156.933, 3972.762, 13060.657), stdev = 1927.851
  CI (99.9%): [2684.740, 5260.784] (assumes normal distribution)


# Run complete. Total time: 00:01:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt     Score      Error  Units
ObservableSampleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  3972.762 ± 1288.022  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_schedulePeriodic$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_schedulePeriodic

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 605233.121 ops/s
# Warmup Iteration   2: 670980.657 ops/s
# Warmup Iteration   3: 803345.165 ops/s
# Warmup Iteration   4: 747916.011 ops/s
# Warmup Iteration   5: 786791.577 ops/s
# Warmup Iteration   6: 781060.212 ops/s
# Warmup Iteration   7: 740290.067 ops/s
# Warmup Iteration   8: 798419.300 ops/s
# Warmup Iteration   9: 766273.299 ops/s
# Warmup Iteration  10: 769859.072 ops/s
# Warmup Iteration  11: 784527.250 ops/s
# Warmup Iteration  12: 759878.558 ops/s
# Warmup Iteration  13: 780886.326 ops/s
# Warmup Iteration  14: 751717.163 ops/s
# Warmup Iteration  15: 778426.098 ops/s
# Warmup Iteration  16: 763422.767 ops/s
# Warmup Iteration  17: 849375.561 ops/s
# Warmup Iteration  18: 802721.597 ops/s
# Warmup Iteration  19: 808964.512 ops/s
# Warmup Iteration  20: 869118.281 ops/s
# Warmup Iteration  21: 785998.065 ops/s
# Warmup Iteration  22: 801082.622 ops/s
# Warmup Iteration  23: 806873.887 ops/s
# Warmup Iteration  24: 800500.192 ops/s
# Warmup Iteration  25: 860564.071 ops/s
# Warmup Iteration  26: 805586.217 ops/s
# Warmup Iteration  27: 859188.982 ops/s
# Warmup Iteration  28: 815797.550 ops/s
# Warmup Iteration  29: 811142.630 ops/s
# Warmup Iteration  30: 856059.556 ops/s
Iteration   1: 790188.640 ops/s
Iteration   2: 821514.513 ops/s
Iteration   3: 834217.676 ops/s
Iteration   4: 836505.252 ops/s
Iteration   5: 781659.972 ops/s
Iteration   6: 812582.306 ops/s
Iteration   7: 801944.912 ops/s
Iteration   8: 807444.925 ops/s
Iteration   9: 826060.124 ops/s
Iteration  10: 791040.430 ops/s
Iteration  11: 828751.107 ops/s
Iteration  12: 785112.160 ops/s
Iteration  13: 821223.885 ops/s
Iteration  14: 842381.565 ops/s
Iteration  15: 815032.926 ops/s
Iteration  16: 808330.500 ops/s
Iteration  17: 817029.672 ops/s
Iteration  18: 823556.510 ops/s
Iteration  19: 853779.637 ops/s
Iteration  20: 776681.717 ops/s
Iteration  21: 778047.866 ops/s
Iteration  22: 861199.183 ops/s
Iteration  23: 803914.946 ops/s
Iteration  24: 840822.287 ops/s
Iteration  25: 788677.626 ops/s
Iteration  26: 835171.027 ops/s
Iteration  27: 813546.706 ops/s
Iteration  28: 831025.729 ops/s
Iteration  29: 827757.429 ops/s
Iteration  30: 809589.122 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_schedulePeriodic":
  815493.012 ±(99.9%) 14851.042 ops/s [Average]
  (min, avg, max) = (776681.717, 815493.012, 861199.183), stdev = 22228.343
  CI (99.9%): [800641.969, 830344.054] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ImmediateThinSchedulerTest._Benchmark.benchmark_schedulePeriodic  thrpt   30  815493.012 ± 14851.042  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleTimed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleTimed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 632981.066 ops/s
# Warmup Iteration   2: 713078.310 ops/s
# Warmup Iteration   3: 727581.340 ops/s
# Warmup Iteration   4: 770027.351 ops/s
# Warmup Iteration   5: 782895.391 ops/s
# Warmup Iteration   6: 758243.733 ops/s
# Warmup Iteration   7: 776857.127 ops/s
# Warmup Iteration   8: 755260.016 ops/s
# Warmup Iteration   9: 796956.315 ops/s
# Warmup Iteration  10: 760122.499 ops/s
# Warmup Iteration  11: 745901.652 ops/s
# Warmup Iteration  12: 752921.723 ops/s
# Warmup Iteration  13: 742774.695 ops/s
# Warmup Iteration  14: 783131.768 ops/s
# Warmup Iteration  15: 756565.532 ops/s
# Warmup Iteration  16: 791409.087 ops/s
# Warmup Iteration  17: 797642.400 ops/s
# Warmup Iteration  18: 821604.277 ops/s
# Warmup Iteration  19: 833713.524 ops/s
# Warmup Iteration  20: 833694.428 ops/s
# Warmup Iteration  21: 809159.879 ops/s
# Warmup Iteration  22: 862929.996 ops/s
# Warmup Iteration  23: 800778.057 ops/s
# Warmup Iteration  24: 817510.347 ops/s
# Warmup Iteration  25: 835626.928 ops/s
# Warmup Iteration  26: 813670.786 ops/s
# Warmup Iteration  27: 809847.583 ops/s
# Warmup Iteration  28: 844090.698 ops/s
# Warmup Iteration  29: 796521.727 ops/s
# Warmup Iteration  30: 842012.619 ops/s
Iteration   1: 846757.023 ops/s
Iteration   2: 808586.517 ops/s
Iteration   3: 782697.162 ops/s
Iteration   4: 839895.512 ops/s
Iteration   5: 810177.944 ops/s
Iteration   6: 824357.639 ops/s
Iteration   7: 842961.190 ops/s
Iteration   8: 805758.569 ops/s
Iteration   9: 827583.624 ops/s
Iteration  10: 853057.629 ops/s
Iteration  11: 807066.773 ops/s
Iteration  12: 813983.792 ops/s
Iteration  13: 791769.648 ops/s
Iteration  14: 821194.240 ops/s
Iteration  15: 816839.070 ops/s
Iteration  16: 803711.849 ops/s
Iteration  17: 832887.901 ops/s
Iteration  18: 797077.408 ops/s
Iteration  19: 849867.278 ops/s
Iteration  20: 828858.862 ops/s
Iteration  21: 812946.089 ops/s
Iteration  22: 841542.510 ops/s
Iteration  23: 802912.767 ops/s
Iteration  24: 831430.754 ops/s
Iteration  25: 809184.299 ops/s
Iteration  26: 818462.362 ops/s
Iteration  27: 777452.454 ops/s
Iteration  28: 832572.052 ops/s
Iteration  29: 832071.045 ops/s
Iteration  30: 797396.535 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleTimed":
  818702.017 ±(99.9%) 13129.161 ops/s [Average]
  (min, avg, max) = (777452.454, 818702.017, 853057.629), stdev = 19651.111
  CI (99.9%): [805572.856, 831831.177] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleTimed  thrpt   30  818702.017 ± 13129.161  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_sourceObservableRetry0$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_sourceObservableRetry0

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 229471.704 ops/s
# Warmup Iteration   2: 499978.373 ops/s
# Warmup Iteration   3: 615089.715 ops/s
# Warmup Iteration   4: 582936.829 ops/s
# Warmup Iteration   5: 591526.793 ops/s
# Warmup Iteration   6: 581391.758 ops/s
# Warmup Iteration   7: 585642.389 ops/s
# Warmup Iteration   8: 605427.746 ops/s
# Warmup Iteration   9: 557964.543 ops/s
# Warmup Iteration  10: 585670.709 ops/s
# Warmup Iteration  11: 570422.087 ops/s
# Warmup Iteration  12: 598142.663 ops/s
# Warmup Iteration  13: 578098.062 ops/s
# Warmup Iteration  14: 578418.876 ops/s
# Warmup Iteration  15: 560380.216 ops/s
# Warmup Iteration  16: 585748.874 ops/s
# Warmup Iteration  17: 628020.732 ops/s
# Warmup Iteration  18: 641124.706 ops/s
# Warmup Iteration  19: 613652.999 ops/s
# Warmup Iteration  20: 640103.450 ops/s
# Warmup Iteration  21: 602808.149 ops/s
# Warmup Iteration  22: 627155.199 ops/s
# Warmup Iteration  23: 606456.147 ops/s
# Warmup Iteration  24: 638940.626 ops/s
# Warmup Iteration  25: 593298.407 ops/s
# Warmup Iteration  26: 603129.674 ops/s
# Warmup Iteration  27: 625681.161 ops/s
# Warmup Iteration  28: 614890.578 ops/s
# Warmup Iteration  29: 615971.384 ops/s
# Warmup Iteration  30: 624005.014 ops/s
Iteration   1: 628312.684 ops/s
Iteration   2: 628455.092 ops/s
Iteration   3: 599031.298 ops/s
Iteration   4: 608330.258 ops/s
Iteration   5: 593740.668 ops/s
Iteration   6: 630685.959 ops/s
Iteration   7: 619617.943 ops/s
Iteration   8: 596289.238 ops/s
Iteration   9: 639700.331 ops/s
Iteration  10: 604073.491 ops/s
Iteration  11: 626915.793 ops/s
Iteration  12: 611701.514 ops/s
Iteration  13: 616724.669 ops/s
Iteration  14: 628643.221 ops/s
Iteration  15: 559546.732 ops/s
Iteration  16: 534804.114 ops/s
Iteration  17: 601804.381 ops/s
Iteration  18: 622802.491 ops/s
Iteration  19: 600020.098 ops/s
Iteration  20: 620919.023 ops/s
Iteration  21: 630791.736 ops/s
Iteration  22: 599689.050 ops/s
Iteration  23: 643072.745 ops/s
Iteration  24: 612890.655 ops/s
Iteration  25: 609439.233 ops/s
Iteration  26: 650281.037 ops/s
Iteration  27: 602903.474 ops/s
Iteration  28: 617454.847 ops/s
Iteration  29: 618118.896 ops/s
Iteration  30: 620118.816 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_sourceObservableRetry0":
  612562.650 ±(99.9%) 15376.910 ops/s [Average]
  (min, avg, max) = (534804.114, 612562.650, 650281.037), stdev = 23015.437
  CI (99.9%): [597185.739, 627939.560] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
ObservableRetryTest._Benchmark.benchmark_sourceObservableRetry0  thrpt   30  612562.650 ± 15376.910  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_onSuccessAfterDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_onSuccessAfterDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 636493.881 ops/s
# Warmup Iteration   2: 2665521.919 ops/s
# Warmup Iteration   3: 3029580.656 ops/s
# Warmup Iteration   4: 3470260.540 ops/s
# Warmup Iteration   5: 3588414.829 ops/s
# Warmup Iteration   6: 3393537.626 ops/s
# Warmup Iteration   7: 3440586.204 ops/s
# Warmup Iteration   8: 3565888.796 ops/s
# Warmup Iteration   9: 3403158.132 ops/s
# Warmup Iteration  10: 3559802.814 ops/s
# Warmup Iteration  11: 3566207.618 ops/s
# Warmup Iteration  12: 3384097.502 ops/s
# Warmup Iteration  13: 3508047.106 ops/s
# Warmup Iteration  14: 3456681.769 ops/s
# Warmup Iteration  15: 3473179.290 ops/s
# Warmup Iteration  16: 3542601.718 ops/s
# Warmup Iteration  17: 3401284.402 ops/s
# Warmup Iteration  18: 3626149.853 ops/s
# Warmup Iteration  19: 3525453.801 ops/s
# Warmup Iteration  20: 3431965.550 ops/s
# Warmup Iteration  21: 3639451.361 ops/s
# Warmup Iteration  22: 3611074.737 ops/s
# Warmup Iteration  23: 3423653.673 ops/s
# Warmup Iteration  24: 3499552.808 ops/s
# Warmup Iteration  25: 3540010.541 ops/s
# Warmup Iteration  26: 3453652.942 ops/s
# Warmup Iteration  27: 3564311.246 ops/s
# Warmup Iteration  28: 3398331.669 ops/s
# Warmup Iteration  29: 3482906.916 ops/s
# Warmup Iteration  30: 3520604.690 ops/s
Iteration   1: 3491594.097 ops/s
Iteration   2: 3554766.068 ops/s
Iteration   3: 3619291.196 ops/s
Iteration   4: 3446651.153 ops/s
Iteration   5: 3563752.152 ops/s
Iteration   6: 3474670.759 ops/s
Iteration   7: 3460560.859 ops/s
Iteration   8: 3690730.672 ops/s
Iteration   9: 3503761.845 ops/s
Iteration  10: 3454012.774 ops/s
Iteration  11: 3609193.433 ops/s
Iteration  12: 3458977.616 ops/s
Iteration  13: 3481700.216 ops/s
Iteration  14: 3470077.150 ops/s
Iteration  15: 3445281.179 ops/s
Iteration  16: 3662862.310 ops/s
Iteration  17: 3339425.310 ops/s
Iteration  18: 3749990.064 ops/s
Iteration  19: 3550126.142 ops/s
Iteration  20: 3416595.574 ops/s
Iteration  21: 3644392.556 ops/s
Iteration  22: 3427729.114 ops/s
Iteration  23: 3653884.671 ops/s
Iteration  24: 3473969.088 ops/s
Iteration  25: 3484597.380 ops/s
Iteration  26: 3607378.875 ops/s
Iteration  27: 3402505.412 ops/s
Iteration  28: 3581110.841 ops/s
Iteration  29: 3454273.350 ops/s
Iteration  30: 3561492.460 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_onSuccessAfterDispose":
  3524511.810 ±(99.9%) 64840.925 ops/s [Average]
  (min, avg, max) = (3339425.310, 3524511.810, 3749990.064), stdev = 97050.851
  CI (99.9%): [3459670.886, 3589352.735] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SingleZipArrayTest._Benchmark.benchmark_onSuccessAfterDispose  thrpt   30  3524511.810 ± 64840.925  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.HalfSerializerObserverTest._Benchmark.benchmark_reentrantOnNextOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.HalfSerializerObserverTest._Benchmark.benchmark_reentrantOnNextOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2574201.811 ops/s
# Warmup Iteration   2: 4380926.002 ops/s
# Warmup Iteration   3: 6283367.411 ops/s
# Warmup Iteration   4: 5944740.311 ops/s
# Warmup Iteration   5: 6258562.181 ops/s
# Warmup Iteration   6: 6028390.503 ops/s
# Warmup Iteration   7: 6079751.367 ops/s
# Warmup Iteration   8: 6110004.828 ops/s
# Warmup Iteration   9: 5938343.242 ops/s
# Warmup Iteration  10: 6309210.045 ops/s
# Warmup Iteration  11: 5856853.562 ops/s
# Warmup Iteration  12: 6055860.866 ops/s
# Warmup Iteration  13: 6297486.529 ops/s
# Warmup Iteration  14: 5998311.798 ops/s
# Warmup Iteration  15: 6161938.971 ops/s
# Warmup Iteration  16: 6175915.144 ops/s
# Warmup Iteration  17: 5960045.299 ops/s
# Warmup Iteration  18: 6151953.126 ops/s
# Warmup Iteration  19: 6050396.764 ops/s
# Warmup Iteration  20: 6139643.164 ops/s
# Warmup Iteration  21: 6025600.178 ops/s
# Warmup Iteration  22: 6196255.555 ops/s
# Warmup Iteration  23: 6222659.877 ops/s
# Warmup Iteration  24: 6183587.030 ops/s
# Warmup Iteration  25: 5877245.537 ops/s
# Warmup Iteration  26: 6182480.609 ops/s
# Warmup Iteration  27: 5908626.788 ops/s
# Warmup Iteration  28: 6127143.349 ops/s
# Warmup Iteration  29: 5907424.502 ops/s
# Warmup Iteration  30: 6078680.557 ops/s
Iteration   1: 6164916.194 ops/s
Iteration   2: 5952956.032 ops/s
Iteration   3: 6109263.589 ops/s
Iteration   4: 5966077.685 ops/s
Iteration   5: 5907221.929 ops/s
Iteration   6: 6188613.592 ops/s
Iteration   7: 5927425.467 ops/s
Iteration   8: 6213368.053 ops/s
Iteration   9: 5991815.650 ops/s
Iteration  10: 5702663.321 ops/s
Iteration  11: 5580265.604 ops/s
Iteration  12: 6015792.324 ops/s
Iteration  13: 6182783.218 ops/s
Iteration  14: 6058123.021 ops/s
Iteration  15: 5918404.663 ops/s
Iteration  16: 6381451.491 ops/s
Iteration  17: 6120787.365 ops/s
Iteration  18: 5893918.439 ops/s
Iteration  19: 6297809.050 ops/s
Iteration  20: 5990070.335 ops/s
Iteration  21: 6468549.368 ops/s
Iteration  22: 5906066.538 ops/s
Iteration  23: 6262345.367 ops/s
Iteration  24: 5923021.273 ops/s
Iteration  25: 6036466.958 ops/s
Iteration  26: 6246984.798 ops/s
Iteration  27: 6042176.185 ops/s
Iteration  28: 6224099.313 ops/s
Iteration  29: 5937323.669 ops/s
Iteration  30: 6150695.177 ops/s


Result "io.reactivex.rxjava3.internal.util.HalfSerializerObserverTest._Benchmark.benchmark_reentrantOnNextOnNext":
  6058715.189 ±(99.9%) 126924.316 ops/s [Average]
  (min, avg, max) = (5580265.604, 6058715.189, 6468549.368), stdev = 189974.355
  CI (99.9%): [5931790.873, 6185639.505] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
HalfSerializerObserverTest._Benchmark.benchmark_reentrantOnNextOnNext  thrpt   30  6058715.189 ± 126924.316  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_sourceObservableRetry1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_sourceObservableRetry1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 137682.939 ops/s
# Warmup Iteration   2: 252094.566 ops/s
# Warmup Iteration   3: 325442.061 ops/s
# Warmup Iteration   4: 324379.776 ops/s
# Warmup Iteration   5: 301542.385 ops/s
# Warmup Iteration   6: 308129.438 ops/s
# Warmup Iteration   7: 297307.409 ops/s
# Warmup Iteration   8: 323083.018 ops/s
# Warmup Iteration   9: 311295.500 ops/s
# Warmup Iteration  10: 333711.700 ops/s
# Warmup Iteration  11: 323426.315 ops/s
# Warmup Iteration  12: 309524.653 ops/s
# Warmup Iteration  13: 325006.350 ops/s
# Warmup Iteration  14: 308551.017 ops/s
# Warmup Iteration  15: 315012.278 ops/s
# Warmup Iteration  16: 315352.313 ops/s
# Warmup Iteration  17: 335300.157 ops/s
# Warmup Iteration  18: 318987.547 ops/s
# Warmup Iteration  19: 330532.535 ops/s
# Warmup Iteration  20: 346380.904 ops/s
# Warmup Iteration  21: 318491.776 ops/s
# Warmup Iteration  22: 328941.670 ops/s
# Warmup Iteration  23: 328322.710 ops/s
# Warmup Iteration  24: 322489.551 ops/s
# Warmup Iteration  25: 345907.829 ops/s
# Warmup Iteration  26: 317709.915 ops/s
# Warmup Iteration  27: 346785.993 ops/s
# Warmup Iteration  28: 319924.829 ops/s
# Warmup Iteration  29: 334694.414 ops/s
# Warmup Iteration  30: 326137.221 ops/s
Iteration   1: 333823.809 ops/s
Iteration   2: 331557.879 ops/s
Iteration   3: 320885.781 ops/s
Iteration   4: 334464.856 ops/s
Iteration   5: 324446.421 ops/s
Iteration   6: 325288.323 ops/s
Iteration   7: 318613.934 ops/s
Iteration   8: 322916.328 ops/s
Iteration   9: 331364.149 ops/s
Iteration  10: 333512.816 ops/s
Iteration  11: 336957.345 ops/s
Iteration  12: 320028.920 ops/s
Iteration  13: 335338.545 ops/s
Iteration  14: 332619.675 ops/s
Iteration  15: 319275.918 ops/s
Iteration  16: 327746.170 ops/s
Iteration  17: 326238.648 ops/s
Iteration  18: 325525.799 ops/s
Iteration  19: 343997.603 ops/s
Iteration  20: 323248.967 ops/s
Iteration  21: 337776.909 ops/s
Iteration  22: 323873.464 ops/s
Iteration  23: 343269.657 ops/s
Iteration  24: 319641.518 ops/s
Iteration  25: 345913.988 ops/s
Iteration  26: 331904.335 ops/s
Iteration  27: 323038.378 ops/s
Iteration  28: 341091.409 ops/s
Iteration  29: 321732.290 ops/s
Iteration  30: 328569.590 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_sourceObservableRetry1":
  329488.781 ±(99.9%) 5290.471 ops/s [Average]
  (min, avg, max) = (318613.934, 329488.781, 345913.988), stdev = 7918.529
  CI (99.9%): [324198.310, 334779.252] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableRetryTest._Benchmark.benchmark_sourceObservableRetry1  thrpt   30  329488.781 ± 5290.471  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStageTest._Benchmark.benchmark_syncNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStageTest._Benchmark.benchmark_syncNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 182171.668 ops/s
# Warmup Iteration   2: 514569.270 ops/s
# Warmup Iteration   3: 570439.427 ops/s
# Warmup Iteration   4: 514092.345 ops/s
# Warmup Iteration   5: 581416.579 ops/s
# Warmup Iteration   6: 480055.090 ops/s
# Warmup Iteration   7: 610599.221 ops/s
# Warmup Iteration   8: 565228.473 ops/s
# Warmup Iteration   9: 571464.757 ops/s
# Warmup Iteration  10: 608952.937 ops/s
# Warmup Iteration  11: 591529.784 ops/s
# Warmup Iteration  12: 559105.894 ops/s
# Warmup Iteration  13: 587353.113 ops/s
# Warmup Iteration  14: 580914.478 ops/s
# Warmup Iteration  15: 592135.151 ops/s
# Warmup Iteration  16: 602111.161 ops/s
# Warmup Iteration  17: 595950.377 ops/s
# Warmup Iteration  18: 634066.770 ops/s
# Warmup Iteration  19: 603785.354 ops/s
# Warmup Iteration  20: 619477.022 ops/s
# Warmup Iteration  21: 615165.159 ops/s
# Warmup Iteration  22: 604893.783 ops/s
# Warmup Iteration  23: 600299.158 ops/s
# Warmup Iteration  24: 621519.691 ops/s
# Warmup Iteration  25: 632311.535 ops/s
# Warmup Iteration  26: 599745.745 ops/s
# Warmup Iteration  27: 619785.989 ops/s
# Warmup Iteration  28: 606805.779 ops/s
# Warmup Iteration  29: 603228.363 ops/s
# Warmup Iteration  30: 618531.555 ops/s
Iteration   1: 604148.686 ops/s
Iteration   2: 628632.005 ops/s
Iteration   3: 603170.199 ops/s
Iteration   4: 620412.191 ops/s
Iteration   5: 532787.638 ops/s
Iteration   6: 615033.722 ops/s
Iteration   7: 592599.487 ops/s
Iteration   8: 616108.375 ops/s
Iteration   9: 618551.582 ops/s
Iteration  10: 592317.004 ops/s
Iteration  11: 627802.424 ops/s
Iteration  12: 610518.826 ops/s
Iteration  13: 608485.751 ops/s
Iteration  14: 629475.853 ops/s
Iteration  15: 614461.475 ops/s
Iteration  16: 601324.603 ops/s
Iteration  17: 619562.323 ops/s
Iteration  18: 595856.450 ops/s
Iteration  19: 619645.593 ops/s
Iteration  20: 597531.658 ops/s
Iteration  21: 595551.871 ops/s
Iteration  22: 647537.523 ops/s
Iteration  23: 592864.278 ops/s
Iteration  24: 610753.957 ops/s
Iteration  25: 598400.192 ops/s
Iteration  26: 657062.538 ops/s
Iteration  27: 593193.230 ops/s
Iteration  28: 621840.315 ops/s
Iteration  29: 603743.837 ops/s
Iteration  30: 603658.544 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStageTest._Benchmark.benchmark_syncNull":
  609101.071 ±(99.9%) 14320.082 ops/s [Average]
  (min, avg, max) = (532787.638, 609101.071, 657062.538), stdev = 21433.626
  CI (99.9%): [594780.989, 623421.153] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
SingleFromCompletionStageTest._Benchmark.benchmark_syncNull  thrpt   30  609101.071 ± 14320.082  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_delayOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_delayOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 129338.936 ops/s
# Warmup Iteration   2: 423625.542 ops/s
# Warmup Iteration   3: 606754.619 ops/s
# Warmup Iteration   4: 605174.181 ops/s
# Warmup Iteration   5: 604134.740 ops/s
# Warmup Iteration   6: 592987.611 ops/s
# Warmup Iteration   7: 566623.085 ops/s
# Warmup Iteration   8: 567442.632 ops/s
# Warmup Iteration   9: 633038.068 ops/s
# Warmup Iteration  10: 604134.930 ops/s
# Warmup Iteration  11: 614016.241 ops/s
# Warmup Iteration  12: 599419.108 ops/s
# Warmup Iteration  13: 632057.603 ops/s
# Warmup Iteration  14: 630584.995 ops/s
# Warmup Iteration  15: 588740.725 ops/s
# Warmup Iteration  16: 614329.570 ops/s
# Warmup Iteration  17: 621761.792 ops/s
# Warmup Iteration  18: 673585.393 ops/s
# Warmup Iteration  19: 630975.314 ops/s
# Warmup Iteration  20: 636520.977 ops/s
# Warmup Iteration  21: 646884.072 ops/s
# Warmup Iteration  22: 649310.996 ops/s
# Warmup Iteration  23: 647488.857 ops/s
# Warmup Iteration  24: 624290.550 ops/s
# Warmup Iteration  25: 655351.653 ops/s
# Warmup Iteration  26: 659887.232 ops/s
# Warmup Iteration  27: 642506.862 ops/s
# Warmup Iteration  28: 658390.840 ops/s
# Warmup Iteration  29: 604881.634 ops/s
# Warmup Iteration  30: 662911.834 ops/s
Iteration   1: 670714.530 ops/s
Iteration   2: 621289.602 ops/s
Iteration   3: 651632.532 ops/s
Iteration   4: 631659.070 ops/s
Iteration   5: 646299.719 ops/s
Iteration   6: 655198.648 ops/s
Iteration   7: 621820.749 ops/s
Iteration   8: 658488.442 ops/s
Iteration   9: 645148.405 ops/s
Iteration  10: 645976.806 ops/s
Iteration  11: 659681.849 ops/s
Iteration  12: 639369.777 ops/s
Iteration  13: 630010.226 ops/s
Iteration  14: 645963.035 ops/s
Iteration  15: 625264.515 ops/s
Iteration  16: 647154.030 ops/s
Iteration  17: 632145.506 ops/s
Iteration  18: 665755.350 ops/s
Iteration  19: 635820.152 ops/s
Iteration  20: 634176.074 ops/s
Iteration  21: 673375.765 ops/s
Iteration  22: 615240.229 ops/s
Iteration  23: 662281.306 ops/s
Iteration  24: 626384.643 ops/s
Iteration  25: 650134.639 ops/s
Iteration  26: 628578.808 ops/s
Iteration  27: 642714.077 ops/s
Iteration  28: 637237.943 ops/s
Iteration  29: 637139.283 ops/s
Iteration  30: 660897.424 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_delayOnError":
  643251.771 ±(99.9%) 10272.790 ops/s [Average]
  (min, avg, max) = (615240.229, 643251.771, 673375.765), stdev = 15375.830
  CI (99.9%): [632978.981, 653524.561] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
SingleDelayTest._Benchmark.benchmark_delayOnError  thrpt   30  643251.771 ± 10272.790  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_sourceIgnoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_sourceIgnoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76797.190 ops/s
# Warmup Iteration   2: 205719.049 ops/s
# Warmup Iteration   3: 224587.488 ops/s
# Warmup Iteration   4: 206387.836 ops/s
# Warmup Iteration   5: 239682.285 ops/s
# Warmup Iteration   6: 248032.761 ops/s
# Warmup Iteration   7: 235080.120 ops/s
# Warmup Iteration   8: 251150.230 ops/s
# Warmup Iteration   9: 233150.754 ops/s
# Warmup Iteration  10: 246026.359 ops/s
# Warmup Iteration  11: 244513.487 ops/s
# Warmup Iteration  12: 241465.596 ops/s
# Warmup Iteration  13: 248627.404 ops/s
# Warmup Iteration  14: 240828.161 ops/s
# Warmup Iteration  15: 244965.857 ops/s
# Warmup Iteration  16: 249225.859 ops/s
# Warmup Iteration  17: 249192.726 ops/s
# Warmup Iteration  18: 244742.644 ops/s
# Warmup Iteration  19: 250264.602 ops/s
# Warmup Iteration  20: 255974.979 ops/s
# Warmup Iteration  21: 253313.369 ops/s
# Warmup Iteration  22: 249750.067 ops/s
# Warmup Iteration  23: 255423.464 ops/s
# Warmup Iteration  24: 250265.728 ops/s
# Warmup Iteration  25: 258441.316 ops/s
# Warmup Iteration  26: 253462.831 ops/s
# Warmup Iteration  27: 250462.151 ops/s
# Warmup Iteration  28: 261963.485 ops/s
# Warmup Iteration  29: 248783.757 ops/s
# Warmup Iteration  30: 220314.951 ops/s
Iteration   1: 247564.844 ops/s
Iteration   2: 261322.470 ops/s
Iteration   3: 256337.417 ops/s
Iteration   4: 245380.167 ops/s
Iteration   5: 258536.473 ops/s
Iteration   6: 250017.646 ops/s
Iteration   7: 247182.701 ops/s
Iteration   8: 254715.403 ops/s
Iteration   9: 246090.237 ops/s
Iteration  10: 253827.885 ops/s
Iteration  11: 250361.629 ops/s
Iteration  12: 257167.653 ops/s
Iteration  13: 246759.665 ops/s
Iteration  14: 252823.124 ops/s
Iteration  15: 259966.311 ops/s
Iteration  16: 246217.358 ops/s
Iteration  17: 255211.636 ops/s
Iteration  18: 249054.621 ops/s
Iteration  19: 254063.552 ops/s
Iteration  20: 255289.786 ops/s
Iteration  21: 255392.307 ops/s
Iteration  22: 261156.934 ops/s
Iteration  23: 248633.404 ops/s
Iteration  24: 264034.713 ops/s
Iteration  25: 245089.696 ops/s
Iteration  26: 261338.931 ops/s
Iteration  27: 241631.961 ops/s
Iteration  28: 249797.910 ops/s
Iteration  29: 263546.303 ops/s
Iteration  30: 247727.713 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_sourceIgnoresCancel":
  252874.682 ±(99.9%) 4116.041 ops/s [Average]
  (min, avg, max) = (241631.961, 252874.682, 264034.713), stdev = 6160.698
  CI (99.9%): [248758.640, 256990.723] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SingleToCompletionStageTest._Benchmark.benchmark_sourceIgnoresCancel  thrpt   30  252874.682 ± 4116.041  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 235740.427 ops/s
# Warmup Iteration   2: 462731.392 ops/s
# Warmup Iteration   3: 484531.227 ops/s
# Warmup Iteration   4: 498479.846 ops/s
# Warmup Iteration   5: 512399.881 ops/s
# Warmup Iteration   6: 489862.690 ops/s
# Warmup Iteration   7: 501479.695 ops/s
# Warmup Iteration   8: 472747.428 ops/s
# Warmup Iteration   9: 529456.361 ops/s
# Warmup Iteration  10: 489114.990 ops/s
# Warmup Iteration  11: 487852.690 ops/s
# Warmup Iteration  12: 533418.084 ops/s
# Warmup Iteration  13: 482560.367 ops/s
# Warmup Iteration  14: 496720.596 ops/s
# Warmup Iteration  15: 506202.029 ops/s
# Warmup Iteration  16: 501514.292 ops/s
# Warmup Iteration  17: 525632.812 ops/s
# Warmup Iteration  18: 522358.779 ops/s
# Warmup Iteration  19: 551168.175 ops/s
# Warmup Iteration  20: 534242.950 ops/s
# Warmup Iteration  21: 530503.511 ops/s
# Warmup Iteration  22: 548632.777 ops/s
# Warmup Iteration  23: 514482.821 ops/s
# Warmup Iteration  24: 529382.596 ops/s
# Warmup Iteration  25: 524847.314 ops/s
# Warmup Iteration  26: 513544.065 ops/s
# Warmup Iteration  27: 544519.112 ops/s
# Warmup Iteration  28: 543679.696 ops/s
# Warmup Iteration  29: 514890.720 ops/s
# Warmup Iteration  30: 543203.388 ops/s
Iteration   1: 523169.889 ops/s
Iteration   2: 533619.054 ops/s
Iteration   3: 518131.704 ops/s
Iteration   4: 524270.294 ops/s
Iteration   5: 528274.485 ops/s
Iteration   6: 524383.738 ops/s
Iteration   7: 544856.186 ops/s
Iteration   8: 512245.307 ops/s
Iteration   9: 535043.973 ops/s
Iteration  10: 514922.157 ops/s
Iteration  11: 534970.850 ops/s
Iteration  12: 530214.882 ops/s
Iteration  13: 542211.860 ops/s
Iteration  14: 519299.443 ops/s
Iteration  15: 512841.808 ops/s
Iteration  16: 537509.248 ops/s
Iteration  17: 522350.770 ops/s
Iteration  18: 519721.221 ops/s
Iteration  19: 539947.579 ops/s
Iteration  20: 519301.293 ops/s
Iteration  21: 520097.070 ops/s
Iteration  22: 523119.081 ops/s
Iteration  23: 535468.964 ops/s
Iteration  24: 503636.154 ops/s
Iteration  25: 533165.331 ops/s
Iteration  26: 499744.634 ops/s
Iteration  27: 533908.989 ops/s
Iteration  28: 537945.629 ops/s
Iteration  29: 522873.136 ops/s
Iteration  30: 532599.883 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_doubleOnSubscribe":
  525994.820 ±(99.9%) 7364.867 ops/s [Average]
  (min, avg, max) = (499744.634, 525994.820, 544856.186), stdev = 11023.387
  CI (99.9%): [518629.954, 533359.687] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
SingleToCompletionStageTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  525994.820 ± 7364.867  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 144309.066 ops/s
# Warmup Iteration   2: 433480.424 ops/s
# Warmup Iteration   3: 464444.600 ops/s
# Warmup Iteration   4: 508157.994 ops/s
# Warmup Iteration   5: 481472.207 ops/s
# Warmup Iteration   6: 527377.841 ops/s
# Warmup Iteration   7: 548850.394 ops/s
# Warmup Iteration   8: 538600.336 ops/s
# Warmup Iteration   9: 514206.511 ops/s
# Warmup Iteration  10: 527838.031 ops/s
# Warmup Iteration  11: 518665.742 ops/s
# Warmup Iteration  12: 528626.165 ops/s
# Warmup Iteration  13: 537827.436 ops/s
# Warmup Iteration  14: 515404.518 ops/s
# Warmup Iteration  15: 522822.323 ops/s
# Warmup Iteration  16: 516866.897 ops/s
# Warmup Iteration  17: 560068.180 ops/s
# Warmup Iteration  18: 528576.384 ops/s
# Warmup Iteration  19: 561715.148 ops/s
# Warmup Iteration  20: 537987.529 ops/s
# Warmup Iteration  21: 544265.247 ops/s
# Warmup Iteration  22: 555052.851 ops/s
# Warmup Iteration  23: 530689.568 ops/s
# Warmup Iteration  24: 549292.990 ops/s
# Warmup Iteration  25: 448462.205 ops/s
# Warmup Iteration  26: 562377.520 ops/s
# Warmup Iteration  27: 548205.115 ops/s
# Warmup Iteration  28: 536003.895 ops/s
# Warmup Iteration  29: 532890.785 ops/s
# Warmup Iteration  30: 551523.260 ops/s
Iteration   1: 537618.227 ops/s
Iteration   2: 539992.419 ops/s
Iteration   3: 557537.976 ops/s
Iteration   4: 532578.811 ops/s
Iteration   5: 554179.245 ops/s
Iteration   6: 521818.806 ops/s
Iteration   7: 556133.556 ops/s
Iteration   8: 536271.137 ops/s
Iteration   9: 544247.662 ops/s
Iteration  10: 537077.346 ops/s
Iteration  11: 543112.811 ops/s
Iteration  12: 555666.926 ops/s
Iteration  13: 549359.144 ops/s
Iteration  14: 549566.689 ops/s
Iteration  15: 553891.441 ops/s
Iteration  16: 523871.170 ops/s
Iteration  17: 558498.289 ops/s
Iteration  18: 541751.453 ops/s
Iteration  19: 547868.462 ops/s
Iteration  20: 538268.587 ops/s
Iteration  21: 559935.754 ops/s
Iteration  22: 554025.120 ops/s
Iteration  23: 522613.580 ops/s
Iteration  24: 524799.988 ops/s
Iteration  25: 538910.931 ops/s
Iteration  26: 533163.621 ops/s
Iteration  27: 532615.536 ops/s
Iteration  28: 536750.264 ops/s
Iteration  29: 551675.992 ops/s
Iteration  30: 548999.038 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_doubleOnSubscribe":
  542759.999 ±(99.9%) 7574.611 ops/s [Average]
  (min, avg, max) = (521818.806, 542759.999, 559935.754), stdev = 11337.322
  CI (99.9%): [535185.388, 550334.610] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
MaybeMaterializeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  542759.999 ± 7574.611  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 134660.260 ops/s
# Warmup Iteration   2: 467050.920 ops/s
# Warmup Iteration   3: 496466.265 ops/s
# Warmup Iteration   4: 521103.374 ops/s
# Warmup Iteration   5: 511703.740 ops/s
# Warmup Iteration   6: 491244.111 ops/s
# Warmup Iteration   7: 537296.083 ops/s
# Warmup Iteration   8: 511436.354 ops/s
# Warmup Iteration   9: 522363.899 ops/s
# Warmup Iteration  10: 515984.568 ops/s
# Warmup Iteration  11: 519083.061 ops/s
# Warmup Iteration  12: 533363.142 ops/s
# Warmup Iteration  13: 547279.513 ops/s
# Warmup Iteration  14: 513238.073 ops/s
# Warmup Iteration  15: 535167.709 ops/s
# Warmup Iteration  16: 515559.055 ops/s
# Warmup Iteration  17: 562324.193 ops/s
# Warmup Iteration  18: 545330.215 ops/s
# Warmup Iteration  19: 547193.090 ops/s
# Warmup Iteration  20: 548618.524 ops/s
# Warmup Iteration  21: 540316.442 ops/s
# Warmup Iteration  22: 571185.574 ops/s
# Warmup Iteration  23: 528075.586 ops/s
# Warmup Iteration  24: 545852.533 ops/s
# Warmup Iteration  25: 561012.755 ops/s
# Warmup Iteration  26: 566712.014 ops/s
# Warmup Iteration  27: 547821.209 ops/s
# Warmup Iteration  28: 558378.962 ops/s
# Warmup Iteration  29: 535154.170 ops/s
# Warmup Iteration  30: 543222.131 ops/s
Iteration   1: 575528.473 ops/s
Iteration   2: 569942.006 ops/s
Iteration   3: 533228.660 ops/s
Iteration   4: 572493.882 ops/s
Iteration   5: 503683.081 ops/s
Iteration   6: 556707.999 ops/s
Iteration   7: 545466.389 ops/s
Iteration   8: 522411.689 ops/s
Iteration   9: 560770.277 ops/s
Iteration  10: 537628.677 ops/s
Iteration  11: 576685.029 ops/s
Iteration  12: 522849.186 ops/s
Iteration  13: 555715.672 ops/s
Iteration  14: 560436.278 ops/s
Iteration  15: 525613.416 ops/s
Iteration  16: 545003.071 ops/s
Iteration  17: 560637.249 ops/s
Iteration  18: 544620.700 ops/s
Iteration  19: 558140.544 ops/s
Iteration  20: 535727.720 ops/s
Iteration  21: 557961.714 ops/s
Iteration  22: 535095.791 ops/s
Iteration  23: 559257.638 ops/s
Iteration  24: 563102.469 ops/s
Iteration  25: 533230.621 ops/s
Iteration  26: 572043.203 ops/s
Iteration  27: 532860.592 ops/s
Iteration  28: 543487.371 ops/s
Iteration  29: 546406.339 ops/s
Iteration  30: 548835.732 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_doubleOnSubscribe":
  548519.049 ±(99.9%) 11961.123 ops/s [Average]
  (min, avg, max) = (503683.081, 548519.049, 576685.029), stdev = 17902.848
  CI (99.9%): [536557.926, 560480.172] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
MaybeCountTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  548519.049 ± 11961.123  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 128076.624 ops/s
# Warmup Iteration   2: 424979.754 ops/s
# Warmup Iteration   3: 498227.509 ops/s
# Warmup Iteration   4: 463024.666 ops/s
# Warmup Iteration   5: 531604.956 ops/s
# Warmup Iteration   6: 518691.596 ops/s
# Warmup Iteration   7: 508507.756 ops/s
# Warmup Iteration   8: 534621.304 ops/s
# Warmup Iteration   9: 518983.845 ops/s
# Warmup Iteration  10: 530384.610 ops/s
# Warmup Iteration  11: 509748.333 ops/s
# Warmup Iteration  12: 522547.755 ops/s
# Warmup Iteration  13: 516077.242 ops/s
# Warmup Iteration  14: 512910.565 ops/s
# Warmup Iteration  15: 545553.624 ops/s
# Warmup Iteration  16: 507668.927 ops/s
# Warmup Iteration  17: 538538.051 ops/s
# Warmup Iteration  18: 556003.464 ops/s
# Warmup Iteration  19: 532559.258 ops/s
# Warmup Iteration  20: 455109.520 ops/s
# Warmup Iteration  21: 534226.282 ops/s
# Warmup Iteration  22: 554746.638 ops/s
# Warmup Iteration  23: 533216.912 ops/s
# Warmup Iteration  24: 517894.894 ops/s
# Warmup Iteration  25: 534616.687 ops/s
# Warmup Iteration  26: 543917.892 ops/s
# Warmup Iteration  27: 556013.851 ops/s
# Warmup Iteration  28: 550360.823 ops/s
# Warmup Iteration  29: 558568.655 ops/s
# Warmup Iteration  30: 531268.588 ops/s
Iteration   1: 557698.968 ops/s
Iteration   2: 558225.769 ops/s
Iteration   3: 538935.229 ops/s
Iteration   4: 542433.535 ops/s
Iteration   5: 541619.867 ops/s
Iteration   6: 557504.640 ops/s
Iteration   7: 538721.809 ops/s
Iteration   8: 540184.697 ops/s
Iteration   9: 564775.966 ops/s
Iteration  10: 525520.615 ops/s
Iteration  11: 546107.992 ops/s
Iteration  12: 539734.390 ops/s
Iteration  13: 555627.756 ops/s
Iteration  14: 554151.909 ops/s
Iteration  15: 540073.057 ops/s
Iteration  16: 544800.464 ops/s
Iteration  17: 560296.800 ops/s
Iteration  18: 531409.654 ops/s
Iteration  19: 536561.594 ops/s
Iteration  20: 564428.831 ops/s
Iteration  21: 537198.633 ops/s
Iteration  22: 548560.428 ops/s
Iteration  23: 542970.064 ops/s
Iteration  24: 541958.636 ops/s
Iteration  25: 527441.267 ops/s
Iteration  26: 545515.700 ops/s
Iteration  27: 520842.590 ops/s
Iteration  28: 534859.471 ops/s
Iteration  29: 551367.469 ops/s
Iteration  30: 535170.619 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_doubleOnSubscribe":
  544156.614 ±(99.9%) 7542.068 ops/s [Average]
  (min, avg, max) = (520842.590, 544156.614, 564775.966), stdev = 11288.613
  CI (99.9%): [536614.546, 551698.682] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
SingleMapOptionalTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  544156.614 ± 7542.068  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withSingleDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withSingleDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 176080.856 ops/s
# Warmup Iteration   2: 442572.658 ops/s
# Warmup Iteration   3: 480507.532 ops/s
# Warmup Iteration   4: 461975.389 ops/s
# Warmup Iteration   5: 477154.311 ops/s
# Warmup Iteration   6: 489791.686 ops/s
# Warmup Iteration   7: 492099.328 ops/s
# Warmup Iteration   8: 516103.422 ops/s
# Warmup Iteration   9: 491484.915 ops/s
# Warmup Iteration  10: 508769.884 ops/s
# Warmup Iteration  11: 502086.839 ops/s
# Warmup Iteration  12: 504635.241 ops/s
# Warmup Iteration  13: 509124.214 ops/s
# Warmup Iteration  14: 496216.962 ops/s
# Warmup Iteration  15: 520075.716 ops/s
# Warmup Iteration  16: 485707.391 ops/s
# Warmup Iteration  17: 533282.558 ops/s
# Warmup Iteration  18: 537442.896 ops/s
# Warmup Iteration  19: 522744.421 ops/s
# Warmup Iteration  20: 529875.180 ops/s
# Warmup Iteration  21: 548772.612 ops/s
# Warmup Iteration  22: 528990.529 ops/s
# Warmup Iteration  23: 521198.189 ops/s
# Warmup Iteration  24: 540469.293 ops/s
# Warmup Iteration  25: 514259.394 ops/s
# Warmup Iteration  26: 527091.209 ops/s
# Warmup Iteration  27: 544298.136 ops/s
# Warmup Iteration  28: 520113.340 ops/s
# Warmup Iteration  29: 557839.381 ops/s
# Warmup Iteration  30: 520512.731 ops/s
Iteration   1: 531101.092 ops/s
Iteration   2: 548605.551 ops/s
Iteration   3: 517333.298 ops/s
Iteration   4: 556014.195 ops/s
Iteration   5: 521596.348 ops/s
Iteration   6: 546484.353 ops/s
Iteration   7: 541585.138 ops/s
Iteration   8: 518502.437 ops/s
Iteration   9: 523711.254 ops/s
Iteration  10: 524274.806 ops/s
Iteration  11: 545045.986 ops/s
Iteration  12: 547979.153 ops/s
Iteration  13: 530262.950 ops/s
Iteration  14: 545433.499 ops/s
Iteration  15: 543223.927 ops/s
Iteration  16: 544598.737 ops/s
Iteration  17: 515922.123 ops/s
Iteration  18: 568981.532 ops/s
Iteration  19: 520231.290 ops/s
Iteration  20: 527380.070 ops/s
Iteration  21: 535246.919 ops/s
Iteration  22: 543395.572 ops/s
Iteration  23: 539744.817 ops/s
Iteration  24: 538453.776 ops/s
Iteration  25: 518358.644 ops/s
Iteration  26: 540220.440 ops/s
Iteration  27: 522701.170 ops/s
Iteration  28: 541201.916 ops/s
Iteration  29: 505981.077 ops/s
Iteration  30: 526012.058 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withSingleDoubleOnSubscribe":
  534319.471 ±(99.9%) 9355.877 ops/s [Average]
  (min, avg, max) = (505981.077, 534319.471, 568981.532), stdev = 14003.438
  CI (99.9%): [524963.594, 543675.348] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SingleDelayTest._Benchmark.benchmark_withSingleDoubleOnSubscribe  thrpt   30  534319.471 ± 9355.877  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 123075.602 ops/s
# Warmup Iteration   2: 446877.262 ops/s
# Warmup Iteration   3: 491254.838 ops/s
# Warmup Iteration   4: 493967.492 ops/s
# Warmup Iteration   5: 478210.051 ops/s
# Warmup Iteration   6: 527175.012 ops/s
# Warmup Iteration   7: 481840.725 ops/s
# Warmup Iteration   8: 524065.840 ops/s
# Warmup Iteration   9: 547121.808 ops/s
# Warmup Iteration  10: 542383.249 ops/s
# Warmup Iteration  11: 512351.387 ops/s
# Warmup Iteration  12: 522889.347 ops/s
# Warmup Iteration  13: 550372.655 ops/s
# Warmup Iteration  14: 530360.663 ops/s
# Warmup Iteration  15: 442619.896 ops/s
# Warmup Iteration  16: 524366.104 ops/s
# Warmup Iteration  17: 561911.164 ops/s
# Warmup Iteration  18: 573900.798 ops/s
# Warmup Iteration  19: 547663.107 ops/s
# Warmup Iteration  20: 568078.300 ops/s
# Warmup Iteration  21: 540891.349 ops/s
# Warmup Iteration  22: 568458.695 ops/s
# Warmup Iteration  23: 556921.684 ops/s
# Warmup Iteration  24: 542199.834 ops/s
# Warmup Iteration  25: 569050.618 ops/s
# Warmup Iteration  26: 533351.296 ops/s
# Warmup Iteration  27: 561547.279 ops/s
# Warmup Iteration  28: 552787.142 ops/s
# Warmup Iteration  29: 557354.302 ops/s
# Warmup Iteration  30: 586364.929 ops/s
Iteration   1: 543434.261 ops/s
Iteration   2: 541318.482 ops/s
Iteration   3: 585697.266 ops/s
Iteration   4: 571309.728 ops/s
Iteration   5: 538404.379 ops/s
Iteration   6: 558808.556 ops/s
Iteration   7: 576482.713 ops/s
Iteration   8: 531527.545 ops/s
Iteration   9: 561341.995 ops/s
Iteration  10: 546634.906 ops/s
Iteration  11: 556496.429 ops/s
Iteration  12: 566023.223 ops/s
Iteration  13: 564981.598 ops/s
Iteration  14: 544425.983 ops/s
Iteration  15: 548722.752 ops/s
Iteration  16: 561950.551 ops/s
Iteration  17: 559832.482 ops/s
Iteration  18: 562508.284 ops/s
Iteration  19: 546177.740 ops/s
Iteration  20: 576483.541 ops/s
Iteration  21: 578432.865 ops/s
Iteration  22: 537702.496 ops/s
Iteration  23: 571359.781 ops/s
Iteration  24: 546867.150 ops/s
Iteration  25: 573646.763 ops/s
Iteration  26: 548311.525 ops/s
Iteration  27: 547727.753 ops/s
Iteration  28: 554194.122 ops/s
Iteration  29: 546862.103 ops/s
Iteration  30: 584116.787 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_doubleOnSubscribe":
  557726.125 ±(99.9%) 9849.725 ops/s [Average]
  (min, avg, max) = (531527.545, 557726.125, 585697.266), stdev = 14742.605
  CI (99.9%): [547876.401, 567575.850] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ObservableAllTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  557726.125 ± 9849.725  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85250.884 ops/s
# Warmup Iteration   2: 352180.742 ops/s
# Warmup Iteration   3: 484277.000 ops/s
# Warmup Iteration   4: 457469.815 ops/s
# Warmup Iteration   5: 471007.284 ops/s
# Warmup Iteration   6: 474895.549 ops/s
# Warmup Iteration   7: 485923.795 ops/s
# Warmup Iteration   8: 503725.167 ops/s
# Warmup Iteration   9: 509170.613 ops/s
# Warmup Iteration  10: 504483.912 ops/s
# Warmup Iteration  11: 496119.978 ops/s
# Warmup Iteration  12: 518731.769 ops/s
# Warmup Iteration  13: 502235.134 ops/s
# Warmup Iteration  14: 503310.973 ops/s
# Warmup Iteration  15: 511208.054 ops/s
# Warmup Iteration  16: 513903.376 ops/s
# Warmup Iteration  17: 541049.765 ops/s
# Warmup Iteration  18: 512406.298 ops/s
# Warmup Iteration  19: 543453.490 ops/s
# Warmup Iteration  20: 538913.654 ops/s
# Warmup Iteration  21: 536101.019 ops/s
# Warmup Iteration  22: 527929.965 ops/s
# Warmup Iteration  23: 531387.151 ops/s
# Warmup Iteration  24: 516239.186 ops/s
# Warmup Iteration  25: 550205.321 ops/s
# Warmup Iteration  26: 511531.480 ops/s
# Warmup Iteration  27: 546810.606 ops/s
# Warmup Iteration  28: 531917.801 ops/s
# Warmup Iteration  29: 540866.738 ops/s
# Warmup Iteration  30: 545760.494 ops/s
Iteration   1: 513559.897 ops/s
Iteration   2: 542798.812 ops/s
Iteration   3: 524231.165 ops/s
Iteration   4: 528975.724 ops/s
Iteration   5: 551492.426 ops/s
Iteration   6: 524123.725 ops/s
Iteration   7: 508930.811 ops/s
Iteration   8: 556276.469 ops/s
Iteration   9: 550414.628 ops/s
Iteration  10: 519266.483 ops/s
Iteration  11: 548096.670 ops/s
Iteration  12: 520425.373 ops/s
Iteration  13: 541850.233 ops/s
Iteration  14: 538000.363 ops/s
Iteration  15: 520528.209 ops/s
Iteration  16: 545478.325 ops/s
Iteration  17: 532244.683 ops/s
Iteration  18: 531503.687 ops/s
Iteration  19: 531945.406 ops/s
Iteration  20: 525229.465 ops/s
Iteration  21: 538445.563 ops/s
Iteration  22: 527211.453 ops/s
Iteration  23: 546301.843 ops/s
Iteration  24: 528541.293 ops/s
Iteration  25: 534150.012 ops/s
Iteration  26: 526081.218 ops/s
Iteration  27: 534540.230 ops/s
Iteration  28: 516433.671 ops/s
Iteration  29: 539774.641 ops/s
Iteration  30: 533744.136 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_doubleOnSubscribe":
  532686.554 ±(99.9%) 7939.400 ops/s [Average]
  (min, avg, max) = (508930.811, 532686.554, 556276.469), stdev = 11883.321
  CI (99.9%): [524747.154, 540625.954] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  532686.554 ± 7939.400  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 101355.310 ops/s
# Warmup Iteration   2: 335622.287 ops/s
# Warmup Iteration   3: 516680.714 ops/s
# Warmup Iteration   4: 474798.114 ops/s
# Warmup Iteration   5: 509301.731 ops/s
# Warmup Iteration   6: 504018.536 ops/s
# Warmup Iteration   7: 477368.044 ops/s
# Warmup Iteration   8: 508074.464 ops/s
# Warmup Iteration   9: 444388.401 ops/s
# Warmup Iteration  10: 433347.269 ops/s
# Warmup Iteration  11: 484003.457 ops/s
# Warmup Iteration  12: 484889.523 ops/s
# Warmup Iteration  13: 513653.167 ops/s
# Warmup Iteration  14: 486130.861 ops/s
# Warmup Iteration  15: 495508.009 ops/s
# Warmup Iteration  16: 494363.205 ops/s
# Warmup Iteration  17: 528756.002 ops/s
# Warmup Iteration  18: 523825.422 ops/s
# Warmup Iteration  19: 519274.533 ops/s
# Warmup Iteration  20: 548580.389 ops/s
# Warmup Iteration  21: 504085.815 ops/s
# Warmup Iteration  22: 536418.462 ops/s
# Warmup Iteration  23: 507528.804 ops/s
# Warmup Iteration  24: 514032.603 ops/s
# Warmup Iteration  25: 531317.027 ops/s
# Warmup Iteration  26: 519282.651 ops/s
# Warmup Iteration  27: 510646.473 ops/s
# Warmup Iteration  28: 542712.979 ops/s
# Warmup Iteration  29: 521830.438 ops/s
# Warmup Iteration  30: 521336.582 ops/s
Iteration   1: 517092.449 ops/s
Iteration   2: 516597.578 ops/s
Iteration   3: 532745.800 ops/s
Iteration   4: 520681.007 ops/s
Iteration   5: 533646.607 ops/s
Iteration   6: 513887.559 ops/s
Iteration   7: 529136.218 ops/s
Iteration   8: 531063.771 ops/s
Iteration   9: 523570.207 ops/s
Iteration  10: 528309.628 ops/s
Iteration  11: 517409.651 ops/s
Iteration  12: 531083.949 ops/s
Iteration  13: 527809.209 ops/s
Iteration  14: 522970.010 ops/s
Iteration  15: 499324.678 ops/s
Iteration  16: 521675.835 ops/s
Iteration  17: 539826.391 ops/s
Iteration  18: 513630.391 ops/s
Iteration  19: 518684.665 ops/s
Iteration  20: 501541.579 ops/s
Iteration  21: 527758.981 ops/s
Iteration  22: 527976.172 ops/s
Iteration  23: 508114.881 ops/s
Iteration  24: 531518.908 ops/s
Iteration  25: 512571.993 ops/s
Iteration  26: 536956.439 ops/s
Iteration  27: 520431.891 ops/s
Iteration  28: 520789.349 ops/s
Iteration  29: 527987.813 ops/s
Iteration  30: 516924.415 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_doubleOnSubscribe":
  522390.601 ±(99.9%) 6497.815 ops/s [Average]
  (min, avg, max) = (499324.678, 522390.601, 539826.391), stdev = 9725.625
  CI (99.9%): [515892.786, 528888.416] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
SingleDoAfterSuccessTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  522390.601 ± 6497.815  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 117994.729 ops/s
# Warmup Iteration   2: 361581.874 ops/s
# Warmup Iteration   3: 477713.948 ops/s
# Warmup Iteration   4: 446942.322 ops/s
# Warmup Iteration   5: 499325.086 ops/s
# Warmup Iteration   6: 483078.554 ops/s
# Warmup Iteration   7: 483654.324 ops/s
# Warmup Iteration   8: 508167.123 ops/s
# Warmup Iteration   9: 485631.485 ops/s
# Warmup Iteration  10: 500339.249 ops/s
# Warmup Iteration  11: 502326.331 ops/s
# Warmup Iteration  12: 470358.496 ops/s
# Warmup Iteration  13: 496871.270 ops/s
# Warmup Iteration  14: 480473.474 ops/s
# Warmup Iteration  15: 473975.875 ops/s
# Warmup Iteration  16: 487877.793 ops/s
# Warmup Iteration  17: 504734.758 ops/s
# Warmup Iteration  18: 517304.966 ops/s
# Warmup Iteration  19: 513905.301 ops/s
# Warmup Iteration  20: 497147.197 ops/s
# Warmup Iteration  21: 520551.201 ops/s
# Warmup Iteration  22: 512615.940 ops/s
# Warmup Iteration  23: 517890.029 ops/s
# Warmup Iteration  24: 507308.584 ops/s
# Warmup Iteration  25: 489581.116 ops/s
# Warmup Iteration  26: 530793.061 ops/s
# Warmup Iteration  27: 497031.907 ops/s
# Warmup Iteration  28: 504976.455 ops/s
# Warmup Iteration  29: 525626.722 ops/s
# Warmup Iteration  30: 497966.440 ops/s
Iteration   1: 522056.991 ops/s
Iteration   2: 512102.596 ops/s
Iteration   3: 519873.711 ops/s
Iteration   4: 507998.009 ops/s
Iteration   5: 492253.882 ops/s
Iteration   6: 514376.846 ops/s
Iteration   7: 524584.451 ops/s
Iteration   8: 505574.341 ops/s
Iteration   9: 515586.870 ops/s
Iteration  10: 505925.371 ops/s
Iteration  11: 507692.851 ops/s
Iteration  12: 521166.916 ops/s
Iteration  13: 498720.863 ops/s
Iteration  14: 513070.241 ops/s
Iteration  15: 503804.743 ops/s
Iteration  16: 509399.235 ops/s
Iteration  17: 517814.995 ops/s
Iteration  18: 503681.329 ops/s
Iteration  19: 508864.488 ops/s
Iteration  20: 525590.811 ops/s
Iteration  21: 526206.526 ops/s
Iteration  22: 500398.816 ops/s
Iteration  23: 520540.393 ops/s
Iteration  24: 519884.747 ops/s
Iteration  25: 491532.802 ops/s
Iteration  26: 527949.882 ops/s
Iteration  27: 505274.395 ops/s
Iteration  28: 516281.022 ops/s
Iteration  29: 507311.566 ops/s
Iteration  30: 509927.963 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_doubleOnSubscribe":
  511848.255 ±(99.9%) 6458.158 ops/s [Average]
  (min, avg, max) = (491532.802, 511848.255, 527949.882), stdev = 9666.267
  CI (99.9%): [505390.097, 518306.413] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
SingleDoAfterTerminateTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  511848.255 ± 6458.158  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 169321.134 ops/s
# Warmup Iteration   2: 447269.083 ops/s
# Warmup Iteration   3: 467545.219 ops/s
# Warmup Iteration   4: 465174.201 ops/s
# Warmup Iteration   5: 429600.190 ops/s
# Warmup Iteration   6: 513817.852 ops/s
# Warmup Iteration   7: 414072.426 ops/s
# Warmup Iteration   8: 534261.315 ops/s
# Warmup Iteration   9: 529099.674 ops/s
# Warmup Iteration  10: 502704.279 ops/s
# Warmup Iteration  11: 517480.869 ops/s
# Warmup Iteration  12: 517561.308 ops/s
# Warmup Iteration  13: 496637.086 ops/s
# Warmup Iteration  14: 523971.646 ops/s
# Warmup Iteration  15: 515259.813 ops/s
# Warmup Iteration  16: 510038.315 ops/s
# Warmup Iteration  17: 534166.803 ops/s
# Warmup Iteration  18: 556845.663 ops/s
# Warmup Iteration  19: 530580.982 ops/s
# Warmup Iteration  20: 548294.486 ops/s
# Warmup Iteration  21: 538935.866 ops/s
# Warmup Iteration  22: 532276.624 ops/s
# Warmup Iteration  23: 524860.417 ops/s
# Warmup Iteration  24: 528824.901 ops/s
# Warmup Iteration  25: 544574.505 ops/s
# Warmup Iteration  26: 528604.229 ops/s
# Warmup Iteration  27: 558471.510 ops/s
# Warmup Iteration  28: 539533.552 ops/s
# Warmup Iteration  29: 527110.987 ops/s
# Warmup Iteration  30: 546726.787 ops/s
Iteration   1: 536780.560 ops/s
Iteration   2: 542181.740 ops/s
Iteration   3: 545641.937 ops/s
Iteration   4: 523135.722 ops/s
Iteration   5: 544116.903 ops/s
Iteration   6: 544463.271 ops/s
Iteration   7: 522107.736 ops/s
Iteration   8: 536579.962 ops/s
Iteration   9: 545245.968 ops/s
Iteration  10: 557695.528 ops/s
Iteration  11: 535268.337 ops/s
Iteration  12: 529912.066 ops/s
Iteration  13: 544508.602 ops/s
Iteration  14: 517800.840 ops/s
Iteration  15: 532799.375 ops/s
Iteration  16: 542252.061 ops/s
Iteration  17: 533117.576 ops/s
Iteration  18: 543666.953 ops/s
Iteration  19: 529965.071 ops/s
Iteration  20: 549148.763 ops/s
Iteration  21: 532165.947 ops/s
Iteration  22: 540885.184 ops/s
Iteration  23: 542603.082 ops/s
Iteration  24: 525135.232 ops/s
Iteration  25: 535243.365 ops/s
Iteration  26: 551710.731 ops/s
Iteration  27: 526764.581 ops/s
Iteration  28: 542451.997 ops/s
Iteration  29: 554032.096 ops/s
Iteration  30: 529848.328 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhileTest._Benchmark.benchmark_doubleOnSubscribe":
  537907.650 ±(99.9%) 6540.966 ops/s [Average]
  (min, avg, max) = (517800.840, 537907.650, 557695.528), stdev = 9790.211
  CI (99.9%): [531366.685, 544448.616] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableTakeWhileTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  537907.650 ± 6540.966  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturnTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturnTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 121644.910 ops/s
# Warmup Iteration   2: 415093.093 ops/s
# Warmup Iteration   3: 513109.951 ops/s
# Warmup Iteration   4: 494466.749 ops/s
# Warmup Iteration   5: 528775.868 ops/s
# Warmup Iteration   6: 493028.955 ops/s
# Warmup Iteration   7: 519433.494 ops/s
# Warmup Iteration   8: 498997.464 ops/s
# Warmup Iteration   9: 507709.211 ops/s
# Warmup Iteration  10: 506241.628 ops/s
# Warmup Iteration  11: 521489.655 ops/s
# Warmup Iteration  12: 520214.989 ops/s
# Warmup Iteration  13: 508198.742 ops/s
# Warmup Iteration  14: 523838.112 ops/s
# Warmup Iteration  15: 504849.869 ops/s
# Warmup Iteration  16: 521402.414 ops/s
# Warmup Iteration  17: 530362.135 ops/s
# Warmup Iteration  18: 540066.998 ops/s
# Warmup Iteration  19: 552076.507 ops/s
# Warmup Iteration  20: 554720.380 ops/s
# Warmup Iteration  21: 538024.917 ops/s
# Warmup Iteration  22: 529526.305 ops/s
# Warmup Iteration  23: 567436.232 ops/s
# Warmup Iteration  24: 544169.503 ops/s
# Warmup Iteration  25: 518179.970 ops/s
# Warmup Iteration  26: 539199.241 ops/s
# Warmup Iteration  27: 557856.649 ops/s
# Warmup Iteration  28: 542215.520 ops/s
# Warmup Iteration  29: 530886.795 ops/s
# Warmup Iteration  30: 544684.890 ops/s
Iteration   1: 511357.213 ops/s
Iteration   2: 544808.101 ops/s
Iteration   3: 521381.267 ops/s
Iteration   4: 537632.270 ops/s
Iteration   5: 548436.154 ops/s
Iteration   6: 532952.209 ops/s
Iteration   7: 542475.456 ops/s
Iteration   8: 513344.516 ops/s
Iteration   9: 562565.590 ops/s
Iteration  10: 531419.547 ops/s
Iteration  11: 537758.881 ops/s
Iteration  12: 518330.805 ops/s
Iteration  13: 543613.724 ops/s
Iteration  14: 550863.819 ops/s
Iteration  15: 547349.313 ops/s
Iteration  16: 523238.439 ops/s
Iteration  17: 549238.573 ops/s
Iteration  18: 527571.311 ops/s
Iteration  19: 543398.689 ops/s
Iteration  20: 544485.401 ops/s
Iteration  21: 529905.513 ops/s
Iteration  22: 554565.622 ops/s
Iteration  23: 529722.267 ops/s
Iteration  24: 562545.733 ops/s
Iteration  25: 524493.869 ops/s
Iteration  26: 541529.845 ops/s
Iteration  27: 540446.653 ops/s
Iteration  28: 533468.621 ops/s
Iteration  29: 538937.784 ops/s
Iteration  30: 536262.199 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturnTest._Benchmark.benchmark_doubleOnSubscribe":
  537469.979 ±(99.9%) 8653.441 ops/s [Average]
  (min, avg, max) = (511357.213, 537469.979, 562565.590), stdev = 12952.065
  CI (99.9%): [528816.538, 546123.421] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableOnErrorReturnTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  537469.979 ± 8653.441  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.FutureObserverTest._Benchmark.benchmark_onSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.FutureObserverTest._Benchmark.benchmark_onSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 227114.599 ops/s
# Warmup Iteration   2: 487701.289 ops/s
# Warmup Iteration   3: 519203.241 ops/s
# Warmup Iteration   4: 510124.939 ops/s
# Warmup Iteration   5: 544785.154 ops/s
# Warmup Iteration   6: 530444.062 ops/s
# Warmup Iteration   7: 550256.285 ops/s
# Warmup Iteration   8: 569966.905 ops/s
# Warmup Iteration   9: 563979.367 ops/s
# Warmup Iteration  10: 558920.461 ops/s
# Warmup Iteration  11: 565909.332 ops/s
# Warmup Iteration  12: 546032.721 ops/s
# Warmup Iteration  13: 569483.945 ops/s
# Warmup Iteration  14: 592838.639 ops/s
# Warmup Iteration  15: 545560.085 ops/s
# Warmup Iteration  16: 569937.314 ops/s
# Warmup Iteration  17: 565119.562 ops/s
# Warmup Iteration  18: 596174.193 ops/s
# Warmup Iteration  19: 583049.789 ops/s
# Warmup Iteration  20: 575566.470 ops/s
# Warmup Iteration  21: 599566.103 ops/s
# Warmup Iteration  22: 579634.637 ops/s
# Warmup Iteration  23: 567042.341 ops/s
# Warmup Iteration  24: 572239.094 ops/s
# Warmup Iteration  25: 594437.432 ops/s
# Warmup Iteration  26: 559248.670 ops/s
# Warmup Iteration  27: 602087.716 ops/s
# Warmup Iteration  28: 575169.341 ops/s
# Warmup Iteration  29: 571410.886 ops/s
# Warmup Iteration  30: 609503.759 ops/s
Iteration   1: 576029.210 ops/s
Iteration   2: 595615.750 ops/s
Iteration   3: 575553.600 ops/s
Iteration   4: 583839.430 ops/s
Iteration   5: 595413.703 ops/s
Iteration   6: 584926.995 ops/s
Iteration   7: 571723.548 ops/s
Iteration   8: 596091.435 ops/s
Iteration   9: 583116.813 ops/s
Iteration  10: 586202.619 ops/s
Iteration  11: 574651.444 ops/s
Iteration  12: 591515.281 ops/s
Iteration  13: 595482.824 ops/s
Iteration  14: 578483.303 ops/s
Iteration  15: 578388.137 ops/s
Iteration  16: 612861.671 ops/s
Iteration  17: 570005.346 ops/s
Iteration  18: 592622.893 ops/s
Iteration  19: 606175.503 ops/s
Iteration  20: 569605.429 ops/s
Iteration  21: 594191.429 ops/s
Iteration  22: 574983.230 ops/s
Iteration  23: 582310.974 ops/s
Iteration  24: 599384.252 ops/s
Iteration  25: 565445.154 ops/s
Iteration  26: 607196.674 ops/s
Iteration  27: 568094.276 ops/s
Iteration  28: 582784.132 ops/s
Iteration  29: 566098.351 ops/s
Iteration  30: 587032.269 ops/s


Result "io.reactivex.rxjava3.internal.observers.FutureObserverTest._Benchmark.benchmark_onSubscribe":
  584860.856 ±(99.9%) 8516.606 ops/s [Average]
  (min, avg, max) = (565445.154, 584860.856, 612861.671), stdev = 12747.256
  CI (99.9%): [576344.249, 593377.462] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FutureObserverTest._Benchmark.benchmark_onSubscribe  thrpt   30  584860.856 ± 8516.606  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 185359.446 ops/s
# Warmup Iteration   2: 448300.192 ops/s
# Warmup Iteration   3: 473415.417 ops/s
# Warmup Iteration   4: 513373.171 ops/s
# Warmup Iteration   5: 532120.937 ops/s
# Warmup Iteration   6: 525989.826 ops/s
# Warmup Iteration   7: 505239.762 ops/s
# Warmup Iteration   8: 523856.913 ops/s
# Warmup Iteration   9: 517168.644 ops/s
# Warmup Iteration  10: 534506.099 ops/s
# Warmup Iteration  11: 526899.161 ops/s
# Warmup Iteration  12: 506269.830 ops/s
# Warmup Iteration  13: 525539.301 ops/s
# Warmup Iteration  14: 504484.512 ops/s
# Warmup Iteration  15: 516121.970 ops/s
# Warmup Iteration  16: 517705.913 ops/s
# Warmup Iteration  17: 538960.084 ops/s
# Warmup Iteration  18: 538783.540 ops/s
# Warmup Iteration  19: 555142.511 ops/s
# Warmup Iteration  20: 529570.266 ops/s
# Warmup Iteration  21: 554300.442 ops/s
# Warmup Iteration  22: 544802.234 ops/s
# Warmup Iteration  23: 551515.793 ops/s
# Warmup Iteration  24: 548566.682 ops/s
# Warmup Iteration  25: 552261.955 ops/s
# Warmup Iteration  26: 526191.842 ops/s
# Warmup Iteration  27: 521409.554 ops/s
# Warmup Iteration  28: 543867.633 ops/s
# Warmup Iteration  29: 528495.107 ops/s
# Warmup Iteration  30: 534925.099 ops/s
Iteration   1: 573535.793 ops/s
Iteration   2: 561200.862 ops/s
Iteration   3: 538853.079 ops/s
Iteration   4: 553980.532 ops/s
Iteration   5: 531250.998 ops/s
Iteration   6: 556710.064 ops/s
Iteration   7: 566959.706 ops/s
Iteration   8: 528946.333 ops/s
Iteration   9: 559253.969 ops/s
Iteration  10: 546583.674 ops/s
Iteration  11: 551106.420 ops/s
Iteration  12: 535583.006 ops/s
Iteration  13: 563515.595 ops/s
Iteration  14: 551729.017 ops/s
Iteration  15: 547362.878 ops/s
Iteration  16: 538721.485 ops/s
Iteration  17: 561873.620 ops/s
Iteration  18: 541656.616 ops/s
Iteration  19: 543333.786 ops/s
Iteration  20: 576891.440 ops/s
Iteration  21: 522956.685 ops/s
Iteration  22: 538495.118 ops/s
Iteration  23: 559756.143 ops/s
Iteration  24: 538973.195 ops/s
Iteration  25: 560176.249 ops/s
Iteration  26: 433207.619 ops/s
Iteration  27: 557768.289 ops/s
Iteration  28: 544980.315 ops/s
Iteration  29: 542282.914 ops/s
Iteration  30: 561960.470 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTest._Benchmark.benchmark_doubleOnSubscribe":
  546320.196 ±(99.9%) 16763.867 ops/s [Average]
  (min, avg, max) = (433207.619, 546320.196, 576891.440), stdev = 25091.369
  CI (99.9%): [529556.329, 563084.063] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableSkipLastTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  546320.196 ± 16763.867  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceSingleObserver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceSingleObserver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 86810.185 ops/s
# Warmup Iteration   2: 261133.081 ops/s
# Warmup Iteration   3: 276519.242 ops/s
# Warmup Iteration   4: 307852.563 ops/s
# Warmup Iteration   5: 332123.888 ops/s
# Warmup Iteration   6: 327420.151 ops/s
# Warmup Iteration   7: 310202.688 ops/s
# Warmup Iteration   8: 313155.158 ops/s
# Warmup Iteration   9: 305212.467 ops/s
# Warmup Iteration  10: 320352.654 ops/s
# Warmup Iteration  11: 323498.342 ops/s
# Warmup Iteration  12: 303778.752 ops/s
# Warmup Iteration  13: 334435.434 ops/s
# Warmup Iteration  14: 306522.052 ops/s
# Warmup Iteration  15: 322354.178 ops/s
# Warmup Iteration  16: 316303.265 ops/s
# Warmup Iteration  17: 333794.968 ops/s
# Warmup Iteration  18: 332372.422 ops/s
# Warmup Iteration  19: 316485.209 ops/s
# Warmup Iteration  20: 337072.614 ops/s
# Warmup Iteration  21: 327052.056 ops/s
# Warmup Iteration  22: 320817.476 ops/s
# Warmup Iteration  23: 334597.034 ops/s
# Warmup Iteration  24: 317110.706 ops/s
# Warmup Iteration  25: 332468.964 ops/s
# Warmup Iteration  26: 323852.465 ops/s
# Warmup Iteration  27: 329413.744 ops/s
# Warmup Iteration  28: 324868.247 ops/s
# Warmup Iteration  29: 328173.650 ops/s
# Warmup Iteration  30: 332193.195 ops/s
Iteration   1: 327105.864 ops/s
Iteration   2: 322468.511 ops/s
Iteration   3: 310319.022 ops/s
Iteration   4: 325742.433 ops/s
Iteration   5: 324920.742 ops/s
Iteration   6: 323220.525 ops/s
Iteration   7: 326835.029 ops/s
Iteration   8: 333379.582 ops/s
Iteration   9: 324699.922 ops/s
Iteration  10: 345740.954 ops/s
Iteration  11: 317249.200 ops/s
Iteration  12: 333107.179 ops/s
Iteration  13: 320898.321 ops/s
Iteration  14: 317532.361 ops/s
Iteration  15: 336398.470 ops/s
Iteration  16: 321113.290 ops/s
Iteration  17: 328348.374 ops/s
Iteration  18: 329802.930 ops/s
Iteration  19: 328454.214 ops/s
Iteration  20: 320002.301 ops/s
Iteration  21: 324709.887 ops/s
Iteration  22: 338334.107 ops/s
Iteration  23: 314994.087 ops/s
Iteration  24: 327131.803 ops/s
Iteration  25: 325417.152 ops/s
Iteration  26: 324951.407 ops/s
Iteration  27: 334409.723 ops/s
Iteration  28: 315048.758 ops/s
Iteration  29: 330132.298 ops/s
Iteration  30: 326859.909 ops/s


Result "io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceSingleObserver":
  325977.612 ±(99.9%) 4993.524 ops/s [Average]
  (min, avg, max) = (310319.022, 325977.612, 345740.954), stdev = 7474.072
  CI (99.9%): [320984.088, 330971.136] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceSingleObserver  thrpt   30  325977.612 ± 4993.524  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54034.487 ops/s
# Warmup Iteration   2: 182214.572 ops/s
# Warmup Iteration   3: 203425.838 ops/s
# Warmup Iteration   4: 206352.730 ops/s
# Warmup Iteration   5: 212732.700 ops/s
# Warmup Iteration   6: 234204.686 ops/s
# Warmup Iteration   7: 229651.759 ops/s
# Warmup Iteration   8: 234124.226 ops/s
# Warmup Iteration   9: 231312.528 ops/s
# Warmup Iteration  10: 231200.374 ops/s
# Warmup Iteration  11: 229536.925 ops/s
# Warmup Iteration  12: 229590.006 ops/s
# Warmup Iteration  13: 230617.143 ops/s
# Warmup Iteration  14: 228857.773 ops/s
# Warmup Iteration  15: 230003.356 ops/s
# Warmup Iteration  16: 225950.046 ops/s
# Warmup Iteration  17: 235071.796 ops/s
# Warmup Iteration  18: 230683.458 ops/s
# Warmup Iteration  19: 237562.315 ops/s
# Warmup Iteration  20: 226451.112 ops/s
# Warmup Iteration  21: 229100.303 ops/s
# Warmup Iteration  22: 240380.338 ops/s
# Warmup Iteration  23: 222353.042 ops/s
# Warmup Iteration  24: 233289.726 ops/s
# Warmup Iteration  25: 233727.107 ops/s
# Warmup Iteration  26: 224130.859 ops/s
# Warmup Iteration  27: 237184.323 ops/s
# Warmup Iteration  28: 228836.532 ops/s
# Warmup Iteration  29: 236217.773 ops/s
# Warmup Iteration  30: 238349.278 ops/s
Iteration   1: 239520.497 ops/s
Iteration   2: 239860.856 ops/s
Iteration   3: 232869.346 ops/s
Iteration   4: 237419.979 ops/s
Iteration   5: 243632.106 ops/s
Iteration   6: 226953.299 ops/s
Iteration   7: 240081.569 ops/s
Iteration   8: 241300.061 ops/s
Iteration   9: 221434.167 ops/s
Iteration  10: 234812.433 ops/s
Iteration  11: 226975.630 ops/s
Iteration  12: 238173.233 ops/s
Iteration  13: 232607.766 ops/s
Iteration  14: 231202.835 ops/s
Iteration  15: 242018.175 ops/s
Iteration  16: 236874.982 ops/s
Iteration  17: 239977.769 ops/s
Iteration  18: 237701.369 ops/s
Iteration  19: 231624.140 ops/s
Iteration  20: 237011.446 ops/s
Iteration  21: 194934.758 ops/s
Iteration  22: 244558.143 ops/s
Iteration  23: 231155.435 ops/s
Iteration  24: 241902.684 ops/s
Iteration  25: 234567.056 ops/s
Iteration  26: 238348.396 ops/s
Iteration  27: 236563.111 ops/s
Iteration  28: 231223.829 ops/s
Iteration  29: 239507.460 ops/s
Iteration  30: 235862.218 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_badSource":
  234689.158 ±(99.9%) 6132.730 ops/s [Average]
  (min, avg, max) = (194934.758, 234689.158, 244558.143), stdev = 9179.182
  CI (99.9%): [228556.428, 240821.888] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ObservableForEachTest._Benchmark.benchmark_badSource  thrpt   30  234689.158 ± 6132.730  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissions$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissions

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21513.676 ops/s
# Warmup Iteration   2: 110341.507 ops/s
# Warmup Iteration   3: 169396.555 ops/s
# Warmup Iteration   4: 173055.819 ops/s
# Warmup Iteration   5: 161465.207 ops/s
# Warmup Iteration   6: 185033.605 ops/s
# Warmup Iteration   7: 185535.807 ops/s
# Warmup Iteration   8: 193618.319 ops/s
# Warmup Iteration   9: 181933.547 ops/s
# Warmup Iteration  10: 185563.108 ops/s
# Warmup Iteration  11: 181573.658 ops/s
# Warmup Iteration  12: 185755.063 ops/s
# Warmup Iteration  13: 190893.253 ops/s
# Warmup Iteration  14: 181993.129 ops/s
# Warmup Iteration  15: 192263.577 ops/s
# Warmup Iteration  16: 186327.901 ops/s
# Warmup Iteration  17: 187777.051 ops/s
# Warmup Iteration  18: 198825.419 ops/s
# Warmup Iteration  19: 188004.602 ops/s
# Warmup Iteration  20: 196783.954 ops/s
# Warmup Iteration  21: 199778.618 ops/s
# Warmup Iteration  22: 189344.946 ops/s
# Warmup Iteration  23: 190143.984 ops/s
# Warmup Iteration  24: 191955.120 ops/s
# Warmup Iteration  25: 193006.334 ops/s
# Warmup Iteration  26: 190975.866 ops/s
# Warmup Iteration  27: 199076.680 ops/s
# Warmup Iteration  28: 186563.390 ops/s
# Warmup Iteration  29: 201437.929 ops/s
# Warmup Iteration  30: 189907.664 ops/s
Iteration   1: 197746.114 ops/s
Iteration   2: 199632.517 ops/s
Iteration   3: 198410.449 ops/s
Iteration   4: 192390.170 ops/s
Iteration   5: 192483.867 ops/s
Iteration   6: 194719.590 ops/s
Iteration   7: 191852.438 ops/s
Iteration   8: 196505.598 ops/s
Iteration   9: 197993.194 ops/s
Iteration  10: 190177.141 ops/s
Iteration  11: 194880.299 ops/s
Iteration  12: 191112.453 ops/s
Iteration  13: 187995.812 ops/s
Iteration  14: 187664.842 ops/s
Iteration  15: 187545.039 ops/s
Iteration  16: 196932.421 ops/s
Iteration  17: 186363.229 ops/s
Iteration  18: 195793.375 ops/s
Iteration  19: 190105.125 ops/s
Iteration  20: 198042.421 ops/s
Iteration  21: 186810.512 ops/s
Iteration  22: 198573.339 ops/s
Iteration  23: 203560.514 ops/s
Iteration  24: 189088.365 ops/s
Iteration  25: 199433.770 ops/s
Iteration  26: 191213.103 ops/s
Iteration  27: 198255.400 ops/s
Iteration  28: 189596.854 ops/s
Iteration  29: 195252.969 ops/s
Iteration  30: 194869.734 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissions":
  193833.355 ±(99.9%) 3051.841 ops/s [Average]
  (min, avg, max) = (186363.229, 193833.355, 203560.514), stdev = 4567.852
  CI (99.9%): [190781.514, 196885.196] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score      Error  Units
ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissions  thrpt   30  193833.355 ± 3051.841  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleSourceIgnoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleSourceIgnoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 84611.568 ops/s
# Warmup Iteration   2: 207894.652 ops/s
# Warmup Iteration   3: 222661.117 ops/s
# Warmup Iteration   4: 204921.236 ops/s
# Warmup Iteration   5: 256826.555 ops/s
# Warmup Iteration   6: 255387.465 ops/s
# Warmup Iteration   7: 236040.700 ops/s
# Warmup Iteration   8: 250744.707 ops/s
# Warmup Iteration   9: 251689.336 ops/s
# Warmup Iteration  10: 238859.387 ops/s
# Warmup Iteration  11: 249778.842 ops/s
# Warmup Iteration  12: 234118.747 ops/s
# Warmup Iteration  13: 255022.914 ops/s
# Warmup Iteration  14: 241007.688 ops/s
# Warmup Iteration  15: 242674.982 ops/s
# Warmup Iteration  16: 252594.649 ops/s
# Warmup Iteration  17: 249078.248 ops/s
# Warmup Iteration  18: 249647.345 ops/s
# Warmup Iteration  19: 261198.639 ops/s
# Warmup Iteration  20: 251342.570 ops/s
# Warmup Iteration  21: 259251.917 ops/s
# Warmup Iteration  22: 247642.992 ops/s
# Warmup Iteration  23: 251909.742 ops/s
# Warmup Iteration  24: 261596.057 ops/s
# Warmup Iteration  25: 248954.110 ops/s
# Warmup Iteration  26: 250126.070 ops/s
# Warmup Iteration  27: 259425.275 ops/s
# Warmup Iteration  28: 254035.472 ops/s
# Warmup Iteration  29: 246395.972 ops/s
# Warmup Iteration  30: 259409.049 ops/s
Iteration   1: 254198.060 ops/s
Iteration   2: 243886.767 ops/s
Iteration   3: 262852.798 ops/s
Iteration   4: 244108.018 ops/s
Iteration   5: 266002.623 ops/s
Iteration   6: 248708.638 ops/s
Iteration   7: 255763.404 ops/s
Iteration   8: 259020.041 ops/s
Iteration   9: 256047.868 ops/s
Iteration  10: 253827.575 ops/s
Iteration  11: 253002.207 ops/s
Iteration  12: 256650.199 ops/s
Iteration  13: 263202.017 ops/s
Iteration  14: 238348.616 ops/s
Iteration  15: 251334.408 ops/s
Iteration  16: 190217.268 ops/s
Iteration  17: 252832.928 ops/s
Iteration  18: 256358.202 ops/s
Iteration  19: 256596.879 ops/s
Iteration  20: 258539.931 ops/s
Iteration  21: 249509.597 ops/s
Iteration  22: 251946.427 ops/s
Iteration  23: 253468.551 ops/s
Iteration  24: 254938.894 ops/s
Iteration  25: 246443.198 ops/s
Iteration  26: 260311.034 ops/s
Iteration  27: 245812.763 ops/s
Iteration  28: 250774.751 ops/s
Iteration  29: 254901.262 ops/s
Iteration  30: 246684.732 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleSourceIgnoresCancel":
  251209.655 ±(99.9%) 8729.726 ops/s [Average]
  (min, avg, max) = (190217.268, 251209.655, 266002.623), stdev = 13066.243
  CI (99.9%): [242479.929, 259939.381] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleSourceIgnoresCancel  thrpt   30  251209.655 ± 8729.726  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_onErrorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_onErrorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24662.385 ops/s
# Warmup Iteration   2: 120529.536 ops/s
# Warmup Iteration   3: 158470.262 ops/s
# Warmup Iteration   4: 164937.294 ops/s
# Warmup Iteration   5: 162808.698 ops/s
# Warmup Iteration   6: 159124.882 ops/s
# Warmup Iteration   7: 164043.890 ops/s
# Warmup Iteration   8: 156504.759 ops/s
# Warmup Iteration   9: 171076.118 ops/s
# Warmup Iteration  10: 158911.048 ops/s
# Warmup Iteration  11: 162201.093 ops/s
# Warmup Iteration  12: 171698.365 ops/s
# Warmup Iteration  13: 154231.839 ops/s
# Warmup Iteration  14: 168436.684 ops/s
# Warmup Iteration  15: 163067.595 ops/s
# Warmup Iteration  16: 168015.710 ops/s
# Warmup Iteration  17: 189044.542 ops/s
# Warmup Iteration  18: 177849.761 ops/s
# Warmup Iteration  19: 181731.097 ops/s
# Warmup Iteration  20: 176253.508 ops/s
# Warmup Iteration  21: 183558.704 ops/s
# Warmup Iteration  22: 180260.554 ops/s
# Warmup Iteration  23: 174643.423 ops/s
# Warmup Iteration  24: 183119.375 ops/s
# Warmup Iteration  25: 183482.239 ops/s
# Warmup Iteration  26: 177475.416 ops/s
# Warmup Iteration  27: 180578.443 ops/s
# Warmup Iteration  28: 174985.727 ops/s
# Warmup Iteration  29: 179770.895 ops/s
# Warmup Iteration  30: 185461.087 ops/s
Iteration   1: 179293.265 ops/s
Iteration   2: 181584.541 ops/s
Iteration   3: 182729.178 ops/s
Iteration   4: 178863.423 ops/s
Iteration   5: 186742.441 ops/s
Iteration   6: 176246.508 ops/s
Iteration   7: 187535.690 ops/s
Iteration   8: 188550.913 ops/s
Iteration   9: 175568.692 ops/s
Iteration  10: 184564.094 ops/s
Iteration  11: 176195.798 ops/s
Iteration  12: 184010.852 ops/s
Iteration  13: 180924.167 ops/s
Iteration  14: 171913.577 ops/s
Iteration  15: 183421.260 ops/s
Iteration  16: 177795.568 ops/s
Iteration  17: 179050.029 ops/s
Iteration  18: 186319.482 ops/s
Iteration  19: 177528.799 ops/s
Iteration  20: 191421.457 ops/s
Iteration  21: 178153.661 ops/s
Iteration  22: 180913.411 ops/s
Iteration  23: 184269.932 ops/s
Iteration  24: 179935.357 ops/s
Iteration  25: 188569.567 ops/s
Iteration  26: 176926.439 ops/s
Iteration  27: 183447.260 ops/s
Iteration  28: 180317.450 ops/s
Iteration  29: 184032.568 ops/s
Iteration  30: 185907.215 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_onErrorCrash":
  181757.753 ±(99.9%) 3059.789 ops/s [Average]
  (min, avg, max) = (171913.577, 181757.753, 191421.457), stdev = 4579.748
  CI (99.9%): [178697.964, 184817.542] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableMapNotificationTest._Benchmark.benchmark_onErrorCrash  thrpt   30  181757.753 ± 3059.789  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtConstrainsUpstreamRequests$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtConstrainsUpstreamRequests

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 540331.380 ops/s
# Warmup Iteration   2: 2825066.743 ops/s
# Warmup Iteration   3: 3728533.185 ops/s
# Warmup Iteration   4: 4156373.129 ops/s
# Warmup Iteration   5: 4437518.719 ops/s
# Warmup Iteration   6: 4245895.957 ops/s
# Warmup Iteration   7: 4134523.928 ops/s
# Warmup Iteration   8: 4447473.569 ops/s
# Warmup Iteration   9: 4182530.264 ops/s
# Warmup Iteration  10: 4502457.831 ops/s
# Warmup Iteration  11: 4347804.669 ops/s
# Warmup Iteration  12: 4123503.643 ops/s
# Warmup Iteration  13: 4377194.798 ops/s
# Warmup Iteration  14: 4354485.250 ops/s
# Warmup Iteration  15: 4311425.234 ops/s
# Warmup Iteration  16: 4331977.563 ops/s
# Warmup Iteration  17: 4267267.927 ops/s
# Warmup Iteration  18: 4372119.574 ops/s
# Warmup Iteration  19: 4094892.414 ops/s
# Warmup Iteration  20: 4339989.300 ops/s
# Warmup Iteration  21: 4225039.209 ops/s
# Warmup Iteration  22: 4208340.528 ops/s
# Warmup Iteration  23: 4297901.041 ops/s
# Warmup Iteration  24: 4253598.449 ops/s
# Warmup Iteration  25: 4356447.659 ops/s
# Warmup Iteration  26: 4335957.813 ops/s
# Warmup Iteration  27: 4246236.817 ops/s
# Warmup Iteration  28: 4294248.019 ops/s
# Warmup Iteration  29: 4198715.863 ops/s
# Warmup Iteration  30: 4351423.672 ops/s
Iteration   1: 4290128.046 ops/s
Iteration   2: 4240712.092 ops/s
Iteration   3: 4487123.036 ops/s
Iteration   4: 4152717.478 ops/s
Iteration   5: 4451187.969 ops/s
Iteration   6: 4318034.779 ops/s
Iteration   7: 4202718.148 ops/s
Iteration   8: 4340675.932 ops/s
Iteration   9: 4280500.175 ops/s
Iteration  10: 4205083.373 ops/s
Iteration  11: 3623446.225 ops/s
Iteration  12: 4240249.931 ops/s
Iteration  13: 4365922.283 ops/s
Iteration  14: 4294955.881 ops/s
Iteration  15: 4205582.855 ops/s
Iteration  16: 4424858.558 ops/s
Iteration  17: 4250570.311 ops/s
Iteration  18: 4221826.623 ops/s
Iteration  19: 4498904.958 ops/s
Iteration  20: 4160957.258 ops/s
Iteration  21: 4472413.201 ops/s
Iteration  22: 4222172.752 ops/s
Iteration  23: 4362786.932 ops/s
Iteration  24: 4261470.950 ops/s
Iteration  25: 4338089.173 ops/s
Iteration  26: 4154995.346 ops/s
Iteration  27: 4243907.013 ops/s
Iteration  28: 4395874.873 ops/s
Iteration  29: 4196770.358 ops/s
Iteration  30: 4467512.878 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtConstrainsUpstreamRequests":
  4279071.646 ±(99.9%) 108387.632 ops/s [Average]
  (min, avg, max) = (3623446.225, 4279071.646, 4498904.958), stdev = 162229.518
  CI (99.9%): [4170684.014, 4387459.279] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtConstrainsUpstreamRequests  thrpt   30  4279071.646 ± 108387.632  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 79044.073 ops/s
# Warmup Iteration   2: 290070.377 ops/s
# Warmup Iteration   3: 652689.937 ops/s
# Warmup Iteration   4: 883343.343 ops/s
# Warmup Iteration   5: 831727.078 ops/s
# Warmup Iteration   6: 871464.771 ops/s
# Warmup Iteration   7: 885928.897 ops/s
# Warmup Iteration   8: 970017.530 ops/s
# Warmup Iteration   9: 928406.580 ops/s
# Warmup Iteration  10: 955945.048 ops/s
# Warmup Iteration  11: 893057.519 ops/s
# Warmup Iteration  12: 932853.827 ops/s
# Warmup Iteration  13: 916995.496 ops/s
# Warmup Iteration  14: 955506.369 ops/s
# Warmup Iteration  15: 933382.353 ops/s
# Warmup Iteration  16: 916324.030 ops/s
# Warmup Iteration  17: 958819.032 ops/s
# Warmup Iteration  18: 927816.705 ops/s
# Warmup Iteration  19: 952396.444 ops/s
# Warmup Iteration  20: 925245.353 ops/s
# Warmup Iteration  21: 929615.947 ops/s
# Warmup Iteration  22: 957956.142 ops/s
# Warmup Iteration  23: 930900.456 ops/s
# Warmup Iteration  24: 900343.113 ops/s
# Warmup Iteration  25: 966464.200 ops/s
# Warmup Iteration  26: 941564.641 ops/s
# Warmup Iteration  27: 934340.659 ops/s
# Warmup Iteration  28: 916945.752 ops/s
# Warmup Iteration  29: 910220.211 ops/s
# Warmup Iteration  30: 935910.093 ops/s
Iteration   1: 927338.951 ops/s
Iteration   2: 978156.511 ops/s
Iteration   3: 921849.659 ops/s
Iteration   4: 968110.109 ops/s
Iteration   5: 912907.811 ops/s
Iteration   6: 961853.559 ops/s
Iteration   7: 926429.711 ops/s
Iteration   8: 901157.993 ops/s
Iteration   9: 973178.928 ops/s
Iteration  10: 896687.230 ops/s
Iteration  11: 948598.136 ops/s
Iteration  12: 935216.398 ops/s
Iteration  13: 932312.258 ops/s
Iteration  14: 952384.909 ops/s
Iteration  15: 950118.774 ops/s
Iteration  16: 920526.765 ops/s
Iteration  17: 970311.435 ops/s
Iteration  18: 934277.909 ops/s
Iteration  19: 906940.369 ops/s
Iteration  20: 914955.745 ops/s
Iteration  21: 943973.537 ops/s
Iteration  22: 922217.711 ops/s
Iteration  23: 908588.096 ops/s
Iteration  24: 935920.779 ops/s
Iteration  25: 929710.455 ops/s
Iteration  26: 957646.004 ops/s
Iteration  27: 929154.234 ops/s
Iteration  28: 922557.359 ops/s
Iteration  29: 968401.426 ops/s
Iteration  30: 913962.397 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSize":
  935514.839 ±(99.9%) 15263.198 ops/s [Average]
  (min, avg, max) = (896687.230, 935514.839, 978156.511), stdev = 22845.238
  CI (99.9%): [920251.641, 950778.036] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSize  thrpt   30  935514.839 ± 15263.198  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_asyncDelaySubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_asyncDelaySubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7757.694 ops/s
# Warmup Iteration   2: 35953.428 ops/s
# Warmup Iteration   3: 49233.379 ops/s
# Warmup Iteration   4: 98128.017 ops/s
# Warmup Iteration   5: 101753.772 ops/s
# Warmup Iteration   6: 117172.714 ops/s
# Warmup Iteration   7: 116738.269 ops/s
# Warmup Iteration   8: 114761.401 ops/s
# Warmup Iteration   9: 107907.424 ops/s
# Warmup Iteration  10: 123066.324 ops/s
# Warmup Iteration  11: 119405.081 ops/s
# Warmup Iteration  12: 117502.426 ops/s
# Warmup Iteration  13: 121665.458 ops/s
# Warmup Iteration  14: 113001.742 ops/s
# Warmup Iteration  15: 120378.167 ops/s
# Warmup Iteration  16: 114389.309 ops/s
# Warmup Iteration  17: 117280.553 ops/s
# Warmup Iteration  18: 114233.006 ops/s
# Warmup Iteration  19: 116892.120 ops/s
# Warmup Iteration  20: 118144.487 ops/s
# Warmup Iteration  21: 117288.159 ops/s
# Warmup Iteration  22: 114876.406 ops/s
# Warmup Iteration  23: 116230.896 ops/s
# Warmup Iteration  24: 113742.014 ops/s
# Warmup Iteration  25: 116211.494 ops/s
# Warmup Iteration  26: 119086.336 ops/s
# Warmup Iteration  27: 115472.969 ops/s
# Warmup Iteration  28: 115604.492 ops/s
# Warmup Iteration  29: 120400.420 ops/s
# Warmup Iteration  30: 114321.183 ops/s
Iteration   1: 123083.458 ops/s
Iteration   2: 115129.107 ops/s
Iteration   3: 115103.224 ops/s
Iteration   4: 118481.553 ops/s
Iteration   5: 103926.857 ops/s
Iteration   6: 107919.850 ops/s
Iteration   7: 113792.825 ops/s
Iteration   8: 118782.298 ops/s
Iteration   9: 116045.629 ops/s
Iteration  10: 112737.300 ops/s
Iteration  11: 123320.928 ops/s
Iteration  12: 118474.880 ops/s
Iteration  13: 113636.561 ops/s
Iteration  14: 116975.823 ops/s
Iteration  15: 120782.750 ops/s
Iteration  16: 113394.555 ops/s
Iteration  17: 118016.629 ops/s
Iteration  18: 115755.067 ops/s
Iteration  19: 115650.105 ops/s
Iteration  20: 120204.340 ops/s
Iteration  21: 115100.106 ops/s
Iteration  22: 118278.576 ops/s
Iteration  23: 116643.950 ops/s
Iteration  24: 116355.181 ops/s
Iteration  25: 119221.799 ops/s
Iteration  26: 119611.090 ops/s
Iteration  27: 113549.203 ops/s
Iteration  28: 121512.763 ops/s
Iteration  29: 115372.380 ops/s
Iteration  30: 120575.339 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_asyncDelaySubscription":
  116581.137 ±(99.9%) 2739.598 ops/s [Average]
  (min, avg, max) = (103926.857, 116581.137, 123320.928), stdev = 4100.501
  CI (99.9%): [113841.540, 119320.735] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SchedulerWhenTest._Benchmark.benchmark_asyncDelaySubscription  thrpt   30  116581.137 ± 2739.598  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromMaybeTest._Benchmark.benchmark_fromMaybeEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromMaybeTest._Benchmark.benchmark_fromMaybeEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2429544.117 ops/s
# Warmup Iteration   2: 5838489.231 ops/s
# Warmup Iteration   3: 7920147.842 ops/s
# Warmup Iteration   4: 7463653.412 ops/s
# Warmup Iteration   5: 8000959.785 ops/s
# Warmup Iteration   6: 7618032.542 ops/s
# Warmup Iteration   7: 7715484.907 ops/s
# Warmup Iteration   8: 7830712.582 ops/s
# Warmup Iteration   9: 7753353.341 ops/s
# Warmup Iteration  10: 8258089.907 ops/s
# Warmup Iteration  11: 7523131.832 ops/s
# Warmup Iteration  12: 7908910.913 ops/s
# Warmup Iteration  13: 7650216.596 ops/s
# Warmup Iteration  14: 8133799.488 ops/s
# Warmup Iteration  15: 7652229.571 ops/s
# Warmup Iteration  16: 7944517.515 ops/s
# Warmup Iteration  17: 7755898.237 ops/s
# Warmup Iteration  18: 7769462.182 ops/s
# Warmup Iteration  19: 8011370.452 ops/s
# Warmup Iteration  20: 7825408.368 ops/s
# Warmup Iteration  21: 7872639.245 ops/s
# Warmup Iteration  22: 7825068.553 ops/s
# Warmup Iteration  23: 7761038.991 ops/s
# Warmup Iteration  24: 7954482.305 ops/s
# Warmup Iteration  25: 8291326.858 ops/s
# Warmup Iteration  26: 8050658.893 ops/s
# Warmup Iteration  27: 7729553.356 ops/s
# Warmup Iteration  28: 7726630.560 ops/s
# Warmup Iteration  29: 8135248.569 ops/s
# Warmup Iteration  30: 7838470.884 ops/s
Iteration   1: 8045438.982 ops/s
Iteration   2: 8050925.758 ops/s
Iteration   3: 7338874.664 ops/s
Iteration   4: 8207516.739 ops/s
Iteration   5: 7780429.297 ops/s
Iteration   6: 7423403.251 ops/s
Iteration   7: 8046260.539 ops/s
Iteration   8: 7540054.650 ops/s
Iteration   9: 8007085.718 ops/s
Iteration  10: 7880080.737 ops/s
Iteration  11: 8047428.362 ops/s
Iteration  12: 7715399.238 ops/s
Iteration  13: 7915238.457 ops/s
Iteration  14: 7628326.816 ops/s
Iteration  15: 7859076.783 ops/s
Iteration  16: 7990081.722 ops/s
Iteration  17: 7617373.308 ops/s
Iteration  18: 7857494.971 ops/s
Iteration  19: 7713942.041 ops/s
Iteration  20: 8004571.113 ops/s
Iteration  21: 7665984.865 ops/s
Iteration  22: 7658467.048 ops/s
Iteration  23: 8061706.546 ops/s
Iteration  24: 7524847.437 ops/s
Iteration  25: 7926631.993 ops/s
Iteration  26: 7694068.781 ops/s
Iteration  27: 7963021.651 ops/s
Iteration  28: 7795094.692 ops/s
Iteration  29: 7834974.350 ops/s
Iteration  30: 7755588.466 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromMaybeTest._Benchmark.benchmark_fromMaybeEmpty":
  7818312.966 ±(99.9%) 140773.502 ops/s [Average]
  (min, avg, max) = (7338874.664, 7818312.966, 8207516.739), stdev = 210703.166
  CI (99.9%): [7677539.464, 7959086.468] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
CompletableFromMaybeTest._Benchmark.benchmark_fromMaybeEmpty  thrpt   30  7818312.966 ± 140773.502  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22733.764 ops/s
# Warmup Iteration   2: 111328.996 ops/s
# Warmup Iteration   3: 206472.427 ops/s
# Warmup Iteration   4: 206630.202 ops/s
# Warmup Iteration   5: 217263.943 ops/s
# Warmup Iteration   6: 206058.333 ops/s
# Warmup Iteration   7: 209013.711 ops/s
# Warmup Iteration   8: 217212.139 ops/s
# Warmup Iteration   9: 218131.812 ops/s
# Warmup Iteration  10: 227906.913 ops/s
# Warmup Iteration  11: 231860.627 ops/s
# Warmup Iteration  12: 221816.801 ops/s
# Warmup Iteration  13: 223731.563 ops/s
# Warmup Iteration  14: 228956.180 ops/s
# Warmup Iteration  15: 228802.065 ops/s
# Warmup Iteration  16: 220417.121 ops/s
# Warmup Iteration  17: 234745.201 ops/s
# Warmup Iteration  18: 231837.493 ops/s
# Warmup Iteration  19: 234958.019 ops/s
# Warmup Iteration  20: 229085.178 ops/s
# Warmup Iteration  21: 235448.393 ops/s
# Warmup Iteration  22: 233362.114 ops/s
# Warmup Iteration  23: 224457.124 ops/s
# Warmup Iteration  24: 237730.674 ops/s
# Warmup Iteration  25: 233133.524 ops/s
# Warmup Iteration  26: 228337.776 ops/s
# Warmup Iteration  27: 234069.688 ops/s
# Warmup Iteration  28: 231086.554 ops/s
# Warmup Iteration  29: 233651.087 ops/s
# Warmup Iteration  30: 191636.873 ops/s
Iteration   1: 225018.394 ops/s
Iteration   2: 238509.440 ops/s
Iteration   3: 227693.287 ops/s
Iteration   4: 234924.908 ops/s
Iteration   5: 230762.210 ops/s
Iteration   6: 233910.277 ops/s
Iteration   7: 230270.017 ops/s
Iteration   8: 231904.469 ops/s
Iteration   9: 240869.848 ops/s
Iteration  10: 227378.164 ops/s
Iteration  11: 235602.015 ops/s
Iteration  12: 229797.309 ops/s
Iteration  13: 226818.927 ops/s
Iteration  14: 238077.491 ops/s
Iteration  15: 227735.985 ops/s
Iteration  16: 231078.508 ops/s
Iteration  17: 240229.180 ops/s
Iteration  18: 229285.192 ops/s
Iteration  19: 233045.682 ops/s
Iteration  20: 231685.527 ops/s
Iteration  21: 239871.718 ops/s
Iteration  22: 236348.616 ops/s
Iteration  23: 232350.682 ops/s
Iteration  24: 238298.597 ops/s
Iteration  25: 228990.983 ops/s
Iteration  26: 237304.384 ops/s
Iteration  27: 224675.803 ops/s
Iteration  28: 230138.616 ops/s
Iteration  29: 238928.170 ops/s
Iteration  30: 226940.517 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayDelayError":
  232614.831 ±(99.9%) 3236.616 ops/s [Average]
  (min, avg, max) = (224675.803, 232614.831, 240869.848), stdev = 4844.415
  CI (99.9%): [229378.214, 235851.447] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_mergeArrayDelayError  thrpt   30  232614.831 ± 3236.616  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_noRequestOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_noRequestOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 116047.197 ops/s
# Warmup Iteration   2: 512229.656 ops/s
# Warmup Iteration   3: 617257.410 ops/s
# Warmup Iteration   4: 613376.381 ops/s
# Warmup Iteration   5: 606433.562 ops/s
# Warmup Iteration   6: 637944.402 ops/s
# Warmup Iteration   7: 614845.992 ops/s
# Warmup Iteration   8: 625883.000 ops/s
# Warmup Iteration   9: 616093.875 ops/s
# Warmup Iteration  10: 626727.915 ops/s
# Warmup Iteration  11: 644285.174 ops/s
# Warmup Iteration  12: 581487.363 ops/s
# Warmup Iteration  13: 634556.763 ops/s
# Warmup Iteration  14: 610330.841 ops/s
# Warmup Iteration  15: 631134.106 ops/s
# Warmup Iteration  16: 648290.337 ops/s
# Warmup Iteration  17: 652491.203 ops/s
# Warmup Iteration  18: 647777.350 ops/s
# Warmup Iteration  19: 671240.969 ops/s
# Warmup Iteration  20: 648344.051 ops/s
# Warmup Iteration  21: 683049.282 ops/s
# Warmup Iteration  22: 655004.414 ops/s
# Warmup Iteration  23: 678227.253 ops/s
# Warmup Iteration  24: 648180.933 ops/s
# Warmup Iteration  25: 664577.568 ops/s
# Warmup Iteration  26: 693589.299 ops/s
# Warmup Iteration  27: 661881.401 ops/s
# Warmup Iteration  28: 642722.035 ops/s
# Warmup Iteration  29: 692229.373 ops/s
# Warmup Iteration  30: 659323.999 ops/s
Iteration   1: 645434.279 ops/s
Iteration   2: 650977.071 ops/s
Iteration   3: 627380.938 ops/s
Iteration   4: 683974.963 ops/s
Iteration   5: 626491.973 ops/s
Iteration   6: 669521.912 ops/s
Iteration   7: 662894.663 ops/s
Iteration   8: 669241.755 ops/s
Iteration   9: 688636.886 ops/s
Iteration  10: 647877.756 ops/s
Iteration  11: 680648.416 ops/s
Iteration  12: 658421.388 ops/s
Iteration  13: 673776.745 ops/s
Iteration  14: 692752.679 ops/s
Iteration  15: 656472.891 ops/s
Iteration  16: 677676.044 ops/s
Iteration  17: 684474.396 ops/s
Iteration  18: 648114.139 ops/s
Iteration  19: 670731.651 ops/s
Iteration  20: 695732.713 ops/s
Iteration  21: 638926.738 ops/s
Iteration  22: 663441.096 ops/s
Iteration  23: 688624.797 ops/s
Iteration  24: 652960.834 ops/s
Iteration  25: 691478.940 ops/s
Iteration  26: 685928.598 ops/s
Iteration  27: 657824.363 ops/s
Iteration  28: 677381.051 ops/s
Iteration  29: 674649.587 ops/s
Iteration  30: 667800.656 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_noRequestOnError":
  667008.331 ±(99.9%) 12683.856 ops/s [Average]
  (min, avg, max) = (626491.973, 667008.331, 695732.713), stdev = 18984.599
  CI (99.9%): [654324.475, 679692.186] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_noRequestOnError  thrpt   30  667008.331 ± 12683.856  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_errorObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_errorObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 192589.426 ops/s
# Warmup Iteration   2: 559510.409 ops/s
# Warmup Iteration   3: 641053.484 ops/s
# Warmup Iteration   4: 667655.420 ops/s
# Warmup Iteration   5: 560071.258 ops/s
# Warmup Iteration   6: 698917.677 ops/s
# Warmup Iteration   7: 665584.541 ops/s
# Warmup Iteration   8: 657197.999 ops/s
# Warmup Iteration   9: 692889.061 ops/s
# Warmup Iteration  10: 677923.498 ops/s
# Warmup Iteration  11: 644641.812 ops/s
# Warmup Iteration  12: 686160.340 ops/s
# Warmup Iteration  13: 657167.110 ops/s
# Warmup Iteration  14: 677161.577 ops/s
# Warmup Iteration  15: 682233.737 ops/s
# Warmup Iteration  16: 653391.385 ops/s
# Warmup Iteration  17: 730550.611 ops/s
# Warmup Iteration  18: 694285.212 ops/s
# Warmup Iteration  19: 714504.168 ops/s
# Warmup Iteration  20: 735621.939 ops/s
# Warmup Iteration  21: 695255.614 ops/s
# Warmup Iteration  22: 721067.509 ops/s
# Warmup Iteration  23: 717915.864 ops/s
# Warmup Iteration  24: 655761.779 ops/s
# Warmup Iteration  25: 624026.939 ops/s
# Warmup Iteration  26: 699395.022 ops/s
# Warmup Iteration  27: 713111.272 ops/s
# Warmup Iteration  28: 693477.542 ops/s
# Warmup Iteration  29: 717518.727 ops/s
# Warmup Iteration  30: 708131.251 ops/s
Iteration   1: 705250.742 ops/s
Iteration   2: 697551.553 ops/s
Iteration   3: 704127.495 ops/s
Iteration   4: 696235.639 ops/s
Iteration   5: 714282.171 ops/s
Iteration   6: 692038.585 ops/s
Iteration   7: 712501.304 ops/s
Iteration   8: 734343.771 ops/s
Iteration   9: 693076.151 ops/s
Iteration  10: 741380.578 ops/s
Iteration  11: 689192.135 ops/s
Iteration  12: 739143.094 ops/s
Iteration  13: 701022.275 ops/s
Iteration  14: 711725.829 ops/s
Iteration  15: 697589.151 ops/s
Iteration  16: 726163.330 ops/s
Iteration  17: 715476.222 ops/s
Iteration  18: 714567.425 ops/s
Iteration  19: 706526.977 ops/s
Iteration  20: 701299.456 ops/s
Iteration  21: 719195.782 ops/s
Iteration  22: 699951.018 ops/s
Iteration  23: 693425.159 ops/s
Iteration  24: 730571.835 ops/s
Iteration  25: 726600.304 ops/s
Iteration  26: 697551.006 ops/s
Iteration  27: 711495.777 ops/s
Iteration  28: 699399.031 ops/s
Iteration  29: 705489.458 ops/s
Iteration  30: 708654.434 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_errorObservable":
  709527.590 ±(99.9%) 9591.071 ops/s [Average]
  (min, avg, max) = (689192.135, 709527.590, 741380.578), stdev = 14355.464
  CI (99.9%): [699936.519, 719118.660] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableToSingleTest._Benchmark.benchmark_errorObservable  thrpt   30  709527.590 ± 9591.071  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onErrorMainOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onErrorMainOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22367.708 ops/s
# Warmup Iteration   2: 123043.018 ops/s
# Warmup Iteration   3: 156352.087 ops/s
# Warmup Iteration   4: 177116.942 ops/s
# Warmup Iteration   5: 164973.107 ops/s
# Warmup Iteration   6: 184985.689 ops/s
# Warmup Iteration   7: 188830.227 ops/s
# Warmup Iteration   8: 184587.771 ops/s
# Warmup Iteration   9: 181113.995 ops/s
# Warmup Iteration  10: 188618.592 ops/s
# Warmup Iteration  11: 183925.365 ops/s
# Warmup Iteration  12: 196035.057 ops/s
# Warmup Iteration  13: 193117.865 ops/s
# Warmup Iteration  14: 180637.894 ops/s
# Warmup Iteration  15: 194779.293 ops/s
# Warmup Iteration  16: 188499.268 ops/s
# Warmup Iteration  17: 193188.933 ops/s
# Warmup Iteration  18: 196897.340 ops/s
# Warmup Iteration  19: 192171.712 ops/s
# Warmup Iteration  20: 194701.727 ops/s
# Warmup Iteration  21: 200344.113 ops/s
# Warmup Iteration  22: 189627.437 ops/s
# Warmup Iteration  23: 194842.638 ops/s
# Warmup Iteration  24: 191282.946 ops/s
# Warmup Iteration  25: 193744.779 ops/s
# Warmup Iteration  26: 198989.962 ops/s
# Warmup Iteration  27: 193317.732 ops/s
# Warmup Iteration  28: 194660.341 ops/s
# Warmup Iteration  29: 203222.082 ops/s
# Warmup Iteration  30: 189427.203 ops/s
Iteration   1: 203335.111 ops/s
Iteration   2: 200100.978 ops/s
Iteration   3: 194017.478 ops/s
Iteration   4: 197840.427 ops/s
Iteration   5: 196053.634 ops/s
Iteration   6: 193432.901 ops/s
Iteration   7: 200566.725 ops/s
Iteration   8: 200638.768 ops/s
Iteration   9: 188861.077 ops/s
Iteration  10: 199924.681 ops/s
Iteration  11: 190847.794 ops/s
Iteration  12: 201148.110 ops/s
Iteration  13: 202607.656 ops/s
Iteration  14: 187116.333 ops/s
Iteration  15: 189172.515 ops/s
Iteration  16: 202382.562 ops/s
Iteration  17: 200184.625 ops/s
Iteration  18: 195021.594 ops/s
Iteration  19: 199666.200 ops/s
Iteration  20: 195020.147 ops/s
Iteration  21: 204718.771 ops/s
Iteration  22: 205698.667 ops/s
Iteration  23: 189708.171 ops/s
Iteration  24: 201119.993 ops/s
Iteration  25: 190664.171 ops/s
Iteration  26: 203949.885 ops/s
Iteration  27: 196234.460 ops/s
Iteration  28: 200032.045 ops/s
Iteration  29: 188599.531 ops/s
Iteration  30: 200766.222 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onErrorMainOverflow":
  197314.374 ±(99.9%) 3635.448 ops/s [Average]
  (min, avg, max) = (187116.333, 197314.374, 205698.667), stdev = 5441.368
  CI (99.9%): [193678.927, 200949.822] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_onErrorMainOverflow  thrpt   30  197314.374 ± 3635.448  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_drainExactRequestCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_drainExactRequestCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100124.140 ops/s
# Warmup Iteration   2: 435059.765 ops/s
# Warmup Iteration   3: 807881.063 ops/s
# Warmup Iteration   4: 1468863.105 ops/s
# Warmup Iteration   5: 1459365.355 ops/s
# Warmup Iteration   6: 1653602.285 ops/s
# Warmup Iteration   7: 1688837.935 ops/s
# Warmup Iteration   8: 1699454.324 ops/s
# Warmup Iteration   9: 1688485.245 ops/s
# Warmup Iteration  10: 1624848.579 ops/s
# Warmup Iteration  11: 1591202.810 ops/s
# Warmup Iteration  12: 1704503.331 ops/s
# Warmup Iteration  13: 1584211.931 ops/s
# Warmup Iteration  14: 1690892.960 ops/s
# Warmup Iteration  15: 1635348.987 ops/s
# Warmup Iteration  16: 1693165.037 ops/s
# Warmup Iteration  17: 1651316.779 ops/s
# Warmup Iteration  18: 1638289.921 ops/s
# Warmup Iteration  19: 1390709.014 ops/s
# Warmup Iteration  20: 1757729.924 ops/s
# Warmup Iteration  21: 1697606.453 ops/s
# Warmup Iteration  22: 1661469.887 ops/s
# Warmup Iteration  23: 1658268.693 ops/s
# Warmup Iteration  24: 1649003.480 ops/s
# Warmup Iteration  25: 1646238.165 ops/s
# Warmup Iteration  26: 1686875.036 ops/s
# Warmup Iteration  27: 1727736.723 ops/s
# Warmup Iteration  28: 1702114.496 ops/s
# Warmup Iteration  29: 1577469.351 ops/s
# Warmup Iteration  30: 1707584.997 ops/s
Iteration   1: 1649684.057 ops/s
Iteration   2: 1696913.980 ops/s
Iteration   3: 1640700.952 ops/s
Iteration   4: 1666326.381 ops/s
Iteration   5: 1655992.698 ops/s
Iteration   6: 1614432.403 ops/s
Iteration   7: 1710989.337 ops/s
Iteration   8: 1632045.584 ops/s
Iteration   9: 1665138.245 ops/s
Iteration  10: 1713791.533 ops/s
Iteration  11: 1656090.081 ops/s
Iteration  12: 1630401.873 ops/s
Iteration  13: 1654530.963 ops/s
Iteration  14: 1660654.506 ops/s
Iteration  15: 1594412.275 ops/s
Iteration  16: 1666471.309 ops/s
Iteration  17: 1611710.769 ops/s
Iteration  18: 1647389.597 ops/s
Iteration  19: 1612315.154 ops/s
Iteration  20: 1644808.466 ops/s
Iteration  21: 1663561.024 ops/s
Iteration  22: 1672622.980 ops/s
Iteration  23: 1718439.656 ops/s
Iteration  24: 1636598.261 ops/s
Iteration  25: 1735922.288 ops/s
Iteration  26: 1630906.455 ops/s
Iteration  27: 1651774.915 ops/s
Iteration  28: 1687255.772 ops/s
Iteration  29: 1656374.658 ops/s
Iteration  30: 1685162.392 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_drainExactRequestCancel":
  1658780.619 ±(99.9%) 22432.800 ops/s [Average]
  (min, avg, max) = (1594412.275, 1658780.619, 1735922.288), stdev = 33576.362
  CI (99.9%): [1636347.818, 1681213.419] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_drainExactRequestCancel  thrpt   30  1658780.619 ± 22432.800  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 72388.072 ops/s
# Warmup Iteration   2: 324037.706 ops/s
# Warmup Iteration   3: 350740.416 ops/s
# Warmup Iteration   4: 362558.257 ops/s
# Warmup Iteration   5: 355405.561 ops/s
# Warmup Iteration   6: 357618.146 ops/s
# Warmup Iteration   7: 366158.795 ops/s
# Warmup Iteration   8: 349512.930 ops/s
# Warmup Iteration   9: 352815.623 ops/s
# Warmup Iteration  10: 367407.658 ops/s
# Warmup Iteration  11: 364425.351 ops/s
# Warmup Iteration  12: 356566.241 ops/s
# Warmup Iteration  13: 375645.496 ops/s
# Warmup Iteration  14: 352441.332 ops/s
# Warmup Iteration  15: 366271.988 ops/s
# Warmup Iteration  16: 364575.602 ops/s
# Warmup Iteration  17: 373466.991 ops/s
# Warmup Iteration  18: 379973.655 ops/s
# Warmup Iteration  19: 367563.208 ops/s
# Warmup Iteration  20: 371479.282 ops/s
# Warmup Iteration  21: 375192.041 ops/s
# Warmup Iteration  22: 373707.586 ops/s
# Warmup Iteration  23: 397609.388 ops/s
# Warmup Iteration  24: 371653.878 ops/s
# Warmup Iteration  25: 368149.426 ops/s
# Warmup Iteration  26: 380561.188 ops/s
# Warmup Iteration  27: 368251.046 ops/s
# Warmup Iteration  28: 379006.291 ops/s
# Warmup Iteration  29: 396542.773 ops/s
# Warmup Iteration  30: 365996.795 ops/s
Iteration   1: 392423.032 ops/s
Iteration   2: 386955.224 ops/s
Iteration   3: 386827.016 ops/s
Iteration   4: 385622.863 ops/s
Iteration   5: 386209.499 ops/s
Iteration   6: 368032.950 ops/s
Iteration   7: 389724.208 ops/s
Iteration   8: 377446.165 ops/s
Iteration   9: 372006.911 ops/s
Iteration  10: 385064.705 ops/s
Iteration  11: 370637.398 ops/s
Iteration  12: 386749.980 ops/s
Iteration  13: 374158.506 ops/s
Iteration  14: 382415.654 ops/s
Iteration  15: 396859.520 ops/s
Iteration  16: 374841.239 ops/s
Iteration  17: 387746.780 ops/s
Iteration  18: 376195.361 ops/s
Iteration  19: 381470.993 ops/s
Iteration  20: 375337.824 ops/s
Iteration  21: 379041.337 ops/s
Iteration  22: 385737.251 ops/s
Iteration  23: 375140.392 ops/s
Iteration  24: 388655.294 ops/s
Iteration  25: 373105.859 ops/s
Iteration  26: 387339.186 ops/s
Iteration  27: 374855.945 ops/s
Iteration  28: 388670.516 ops/s
Iteration  29: 372502.808 ops/s
Iteration  30: 375246.817 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_error":
  381234.041 ±(99.9%) 4969.216 ops/s [Average]
  (min, avg, max) = (368032.950, 381234.041, 396859.520), stdev = 7437.689
  CI (99.9%): [376264.825, 386203.257] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ParallelCollectorTest._Benchmark.benchmark_error  thrpt   30  381234.041 ± 4969.216  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissionsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissionsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25679.204 ops/s
# Warmup Iteration   2: 77405.729 ops/s
# Warmup Iteration   3: 171181.708 ops/s
# Warmup Iteration   4: 166788.497 ops/s
# Warmup Iteration   5: 160238.102 ops/s
# Warmup Iteration   6: 182327.517 ops/s
# Warmup Iteration   7: 178971.483 ops/s
# Warmup Iteration   8: 183333.465 ops/s
# Warmup Iteration   9: 175077.332 ops/s
# Warmup Iteration  10: 179572.071 ops/s
# Warmup Iteration  11: 184491.732 ops/s
# Warmup Iteration  12: 185233.365 ops/s
# Warmup Iteration  13: 173578.418 ops/s
# Warmup Iteration  14: 150643.531 ops/s
# Warmup Iteration  15: 180011.766 ops/s
# Warmup Iteration  16: 186063.330 ops/s
# Warmup Iteration  17: 191031.929 ops/s
# Warmup Iteration  18: 173846.289 ops/s
# Warmup Iteration  19: 194111.035 ops/s
# Warmup Iteration  20: 196050.562 ops/s
# Warmup Iteration  21: 188044.279 ops/s
# Warmup Iteration  22: 182589.195 ops/s
# Warmup Iteration  23: 194790.280 ops/s
# Warmup Iteration  24: 194179.964 ops/s
# Warmup Iteration  25: 179278.574 ops/s
# Warmup Iteration  26: 189529.531 ops/s
# Warmup Iteration  27: 185060.268 ops/s
# Warmup Iteration  28: 185514.299 ops/s
# Warmup Iteration  29: 190341.954 ops/s
# Warmup Iteration  30: 181691.703 ops/s
Iteration   1: 192395.246 ops/s
Iteration   2: 180435.202 ops/s
Iteration   3: 180386.979 ops/s
Iteration   4: 187327.062 ops/s
Iteration   5: 189967.320 ops/s
Iteration   6: 178703.191 ops/s
Iteration   7: 196798.225 ops/s
Iteration   8: 181095.511 ops/s
Iteration   9: 192973.732 ops/s
Iteration  10: 184956.832 ops/s
Iteration  11: 184448.263 ops/s
Iteration  12: 191218.535 ops/s
Iteration  13: 181554.768 ops/s
Iteration  14: 179614.307 ops/s
Iteration  15: 180595.582 ops/s
Iteration  16: 192496.983 ops/s
Iteration  17: 174725.011 ops/s
Iteration  18: 187964.690 ops/s
Iteration  19: 181424.204 ops/s
Iteration  20: 185154.397 ops/s
Iteration  21: 189536.023 ops/s
Iteration  22: 183547.446 ops/s
Iteration  23: 192248.763 ops/s
Iteration  24: 172378.391 ops/s
Iteration  25: 193428.402 ops/s
Iteration  26: 184787.490 ops/s
Iteration  27: 183421.795 ops/s
Iteration  28: 190831.664 ops/s
Iteration  29: 194364.480 ops/s
Iteration  30: 183848.250 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissionsFlowable":
  185754.291 ±(99.9%) 4079.601 ops/s [Average]
  (min, avg, max) = (172378.391, 185754.291, 196798.225), stdev = 6106.155
  CI (99.9%): [181674.691, 189833.892] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt       Score      Error  Units
FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissionsFlowable  thrpt   30  185754.291 ± 4079.601  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 50451.973 ops/s
# Warmup Iteration   2: 100743.837 ops/s
# Warmup Iteration   3: 371206.940 ops/s
# Warmup Iteration   4: 393734.996 ops/s
# Warmup Iteration   5: 441382.574 ops/s
# Warmup Iteration   6: 444161.041 ops/s
# Warmup Iteration   7: 459165.171 ops/s
# Warmup Iteration   8: 449957.726 ops/s
# Warmup Iteration   9: 451205.582 ops/s
# Warmup Iteration  10: 459617.411 ops/s
# Warmup Iteration  11: 441939.580 ops/s
# Warmup Iteration  12: 471111.810 ops/s
# Warmup Iteration  13: 448087.526 ops/s
# Warmup Iteration  14: 448437.537 ops/s
# Warmup Iteration  15: 464166.200 ops/s
# Warmup Iteration  16: 438035.911 ops/s
# Warmup Iteration  17: 460790.419 ops/s
# Warmup Iteration  18: 482959.738 ops/s
# Warmup Iteration  19: 458908.330 ops/s
# Warmup Iteration  20: 487655.912 ops/s
# Warmup Iteration  21: 465160.144 ops/s
# Warmup Iteration  22: 458472.112 ops/s
# Warmup Iteration  23: 476190.248 ops/s
# Warmup Iteration  24: 452426.719 ops/s
# Warmup Iteration  25: 465962.687 ops/s
# Warmup Iteration  26: 470306.381 ops/s
# Warmup Iteration  27: 470696.044 ops/s
# Warmup Iteration  28: 480093.320 ops/s
# Warmup Iteration  29: 477934.555 ops/s
# Warmup Iteration  30: 462062.082 ops/s
Iteration   1: 479435.439 ops/s
Iteration   2: 454122.451 ops/s
Iteration   3: 457759.964 ops/s
Iteration   4: 486235.017 ops/s
Iteration   5: 454205.227 ops/s
Iteration   6: 469670.487 ops/s
Iteration   7: 463684.795 ops/s
Iteration   8: 472304.440 ops/s
Iteration   9: 489359.467 ops/s
Iteration  10: 461923.055 ops/s
Iteration  11: 480323.730 ops/s
Iteration  12: 466034.652 ops/s
Iteration  13: 471219.111 ops/s
Iteration  14: 479418.259 ops/s
Iteration  15: 465543.689 ops/s
Iteration  16: 469670.760 ops/s
Iteration  17: 475851.969 ops/s
Iteration  18: 449775.888 ops/s
Iteration  19: 464006.097 ops/s
Iteration  20: 488331.306 ops/s
Iteration  21: 459481.800 ops/s
Iteration  22: 479435.347 ops/s
Iteration  23: 462516.679 ops/s
Iteration  24: 491126.117 ops/s
Iteration  25: 459998.280 ops/s
Iteration  26: 467596.373 ops/s
Iteration  27: 482919.679 ops/s
Iteration  28: 456182.756 ops/s
Iteration  29: 469196.058 ops/s
Iteration  30: 467848.564 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_badRequest":
  469839.249 ±(99.9%) 7553.866 ops/s [Average]
  (min, avg, max) = (449775.888, 469839.249, 491126.117), stdev = 11306.271
  CI (99.9%): [462285.383, 477393.114] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
FlowableCreateTest._Benchmark.benchmark_badRequest  thrpt   30  469839.249 ± 7553.866  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_unsubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_unsubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.735 ops/s
# Warmup Iteration   2: 61438.377 ops/s
# Warmup Iteration   3: 180133.569 ops/s
# Warmup Iteration   4: 245863.175 ops/s
# Warmup Iteration   5: 301548.666 ops/s
# Warmup Iteration   6: 786678.742 ops/s
# Warmup Iteration   7: 830965.843 ops/s
# Warmup Iteration   8: 694899.211 ops/s
# Warmup Iteration   9: 864038.028 ops/s
# Warmup Iteration  10: 836934.779 ops/s
# Warmup Iteration  11: 810047.765 ops/s
# Warmup Iteration  12: 804796.801 ops/s
# Warmup Iteration  13: 846889.164 ops/s
# Warmup Iteration  14: 833777.746 ops/s
# Warmup Iteration  15: 849950.290 ops/s
# Warmup Iteration  16: 847778.627 ops/s
# Warmup Iteration  17: 856897.796 ops/s
# Warmup Iteration  18: 844537.633 ops/s
# Warmup Iteration  19: 854834.196 ops/s
# Warmup Iteration  20: 820894.152 ops/s
# Warmup Iteration  21: 876195.856 ops/s
# Warmup Iteration  22: 840161.509 ops/s
# Warmup Iteration  23: 805302.369 ops/s
# Warmup Iteration  24: 802329.597 ops/s
# Warmup Iteration  25: 870391.616 ops/s
# Warmup Iteration  26: 822925.112 ops/s
# Warmup Iteration  27: 857600.321 ops/s
# Warmup Iteration  28: 853019.266 ops/s
# Warmup Iteration  29: 843720.867 ops/s
# Warmup Iteration  30: 857070.159 ops/s
Iteration   1: 842078.329 ops/s
Iteration   2: 836598.343 ops/s
Iteration   3: 868457.664 ops/s
Iteration   4: 837426.192 ops/s
Iteration   5: 817262.174 ops/s
Iteration   6: 866014.596 ops/s
Iteration   7: 885302.763 ops/s
Iteration   8: 827407.692 ops/s
Iteration   9: 867349.568 ops/s
Iteration  10: 821451.826 ops/s
Iteration  11: 832010.233 ops/s
Iteration  12: 846037.836 ops/s
Iteration  13: 800844.619 ops/s
Iteration  14: 850961.433 ops/s
Iteration  15: 845535.595 ops/s
Iteration  16: 830044.826 ops/s
Iteration  17: 860951.203 ops/s
Iteration  18: 864861.958 ops/s
Iteration  19: 798776.972 ops/s
Iteration  20: 823266.593 ops/s
Iteration  21: 858873.757 ops/s
Iteration  22: 811743.564 ops/s
Iteration  23: 871202.695 ops/s
Iteration  24: 836063.486 ops/s
Iteration  25: 844654.981 ops/s
Iteration  26: 865025.196 ops/s
Iteration  27: 841449.222 ops/s
Iteration  28: 835015.198 ops/s
Iteration  29: 849122.840 ops/s
Iteration  30: 814136.178 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_unsubscribe":
  841664.251 ±(99.9%) 14540.826 ops/s [Average]
  (min, avg, max) = (798776.972, 841664.251, 885302.763), stdev = 21764.026
  CI (99.9%): [827123.425, 856205.078] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_unsubscribe  thrpt   30  841664.251 ± 14540.826  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchOnNextDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchOnNextDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.657 ops/s
# Warmup Iteration   2: 20124.316 ops/s
# Warmup Iteration   3: 81135.482 ops/s
# Warmup Iteration   4: 134855.946 ops/s
# Warmup Iteration   5: 200135.630 ops/s
# Warmup Iteration   6: 247627.584 ops/s
# Warmup Iteration   7: 175887.010 ops/s
# Warmup Iteration   8: 411585.834 ops/s
# Warmup Iteration   9: 658840.988 ops/s
# Warmup Iteration  10: 664098.640 ops/s
# Warmup Iteration  11: 640703.993 ops/s
# Warmup Iteration  12: 669254.374 ops/s
# Warmup Iteration  13: 689824.286 ops/s
# Warmup Iteration  14: 644576.003 ops/s
# Warmup Iteration  15: 691807.627 ops/s
# Warmup Iteration  16: 639942.675 ops/s
# Warmup Iteration  17: 652561.184 ops/s
# Warmup Iteration  18: 680246.186 ops/s
# Warmup Iteration  19: 636172.677 ops/s
# Warmup Iteration  20: 674344.224 ops/s
# Warmup Iteration  21: 666660.958 ops/s
# Warmup Iteration  22: 640248.341 ops/s
# Warmup Iteration  23: 680882.875 ops/s
# Warmup Iteration  24: 676632.492 ops/s
# Warmup Iteration  25: 661131.502 ops/s
# Warmup Iteration  26: 686244.702 ops/s
# Warmup Iteration  27: 642921.209 ops/s
# Warmup Iteration  28: 690632.275 ops/s
# Warmup Iteration  29: 685571.915 ops/s
# Warmup Iteration  30: 647137.912 ops/s
Iteration   1: 669732.408 ops/s
Iteration   2: 651130.078 ops/s
Iteration   3: 669248.368 ops/s
Iteration   4: 663474.453 ops/s
Iteration   5: 636548.943 ops/s
Iteration   6: 667082.470 ops/s
Iteration   7: 644091.487 ops/s
Iteration   8: 658205.043 ops/s
Iteration   9: 679020.486 ops/s
Iteration  10: 662220.514 ops/s
Iteration  11: 681260.634 ops/s
Iteration  12: 643768.495 ops/s
Iteration  13: 657215.682 ops/s
Iteration  14: 642835.705 ops/s
Iteration  15: 665175.782 ops/s
Iteration  16: 639510.849 ops/s
Iteration  17: 673196.091 ops/s
Iteration  18: 661832.948 ops/s
Iteration  19: 657176.136 ops/s
Iteration  20: 662866.553 ops/s
Iteration  21: 670981.145 ops/s
Iteration  22: 675183.218 ops/s
Iteration  23: 638027.220 ops/s
Iteration  24: 681178.815 ops/s
Iteration  25: 662537.070 ops/s
Iteration  26: 661527.897 ops/s
Iteration  27: 669202.443 ops/s
Iteration  28: 671602.735 ops/s
Iteration  29: 661689.258 ops/s
Iteration  30: 682548.033 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchOnNextDelayError":
  662002.365 ±(99.9%) 8819.799 ops/s [Average]
  (min, avg, max) = (636548.943, 662002.365, 682548.033), stdev = 13201.061
  CI (99.9%): [653182.566, 670822.165] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchOnNextDelayError  thrpt   30  662002.365 ± 8819.799  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchOnNextDelayErrorBufferSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchOnNextDelayErrorBufferSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.892 ops/s
# Warmup Iteration   2: 27820.722 ops/s
# Warmup Iteration   3: 114690.052 ops/s
# Warmup Iteration   4: 134647.055 ops/s
# Warmup Iteration   5: 246732.990 ops/s
# Warmup Iteration   6: 249252.585 ops/s
# Warmup Iteration   7: 273359.619 ops/s
# Warmup Iteration   8: 522488.601 ops/s
# Warmup Iteration   9: 615278.129 ops/s
# Warmup Iteration  10: 687582.051 ops/s
# Warmup Iteration  11: 638114.817 ops/s
# Warmup Iteration  12: 640546.167 ops/s
# Warmup Iteration  13: 666274.638 ops/s
# Warmup Iteration  14: 649740.585 ops/s
# Warmup Iteration  15: 661812.739 ops/s
# Warmup Iteration  16: 637483.574 ops/s
# Warmup Iteration  17: 633592.129 ops/s
# Warmup Iteration  18: 674655.205 ops/s
# Warmup Iteration  19: 636038.181 ops/s
# Warmup Iteration  20: 676514.330 ops/s
# Warmup Iteration  21: 647721.347 ops/s
# Warmup Iteration  22: 652856.726 ops/s
# Warmup Iteration  23: 656275.515 ops/s
# Warmup Iteration  24: 641745.596 ops/s
# Warmup Iteration  25: 661452.781 ops/s
# Warmup Iteration  26: 666094.567 ops/s
# Warmup Iteration  27: 654082.490 ops/s
# Warmup Iteration  28: 652794.808 ops/s
# Warmup Iteration  29: 633828.235 ops/s
# Warmup Iteration  30: 689145.912 ops/s
Iteration   1: 672571.428 ops/s
Iteration   2: 630193.837 ops/s
Iteration   3: 669153.569 ops/s
Iteration   4: 658125.226 ops/s
Iteration   5: 646064.984 ops/s
Iteration   6: 682446.605 ops/s
Iteration   7: 635325.050 ops/s
Iteration   8: 670883.956 ops/s
Iteration   9: 668571.854 ops/s
Iteration  10: 645532.882 ops/s
Iteration  11: 670876.139 ops/s
Iteration  12: 657638.152 ops/s
Iteration  13: 675895.184 ops/s
Iteration  14: 677808.382 ops/s
Iteration  15: 658744.149 ops/s
Iteration  16: 650039.384 ops/s
Iteration  17: 685994.027 ops/s
Iteration  18: 673965.304 ops/s
Iteration  19: 640720.072 ops/s
Iteration  20: 660298.151 ops/s
Iteration  21: 651221.233 ops/s
Iteration  22: 645104.836 ops/s
Iteration  23: 664307.182 ops/s
Iteration  24: 640260.348 ops/s
Iteration  25: 676980.405 ops/s
Iteration  26: 641433.831 ops/s
Iteration  27: 660107.455 ops/s
Iteration  28: 676895.696 ops/s
Iteration  29: 650365.943 ops/s
Iteration  30: 648245.696 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchOnNextDelayErrorBufferSize":
  659525.699 ±(99.9%) 10176.947 ops/s [Average]
  (min, avg, max) = (630193.837, 659525.699, 685994.027), stdev = 15232.376
  CI (99.9%): [649348.752, 669702.646] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchOnNextDelayErrorBufferSize  thrpt   30  659525.699 ± 10176.947  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerCompletesReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerCompletesReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.778 ops/s
# Warmup Iteration   2: 26358.241 ops/s
# Warmup Iteration   3: 110627.188 ops/s
# Warmup Iteration   4: 146462.542 ops/s
# Warmup Iteration   5: 145108.498 ops/s
# Warmup Iteration   6: 182936.488 ops/s
# Warmup Iteration   7: 417868.833 ops/s
# Warmup Iteration   8: 604610.694 ops/s
# Warmup Iteration   9: 631987.946 ops/s
# Warmup Iteration  10: 600435.135 ops/s
# Warmup Iteration  11: 625198.922 ops/s
# Warmup Iteration  12: 607210.184 ops/s
# Warmup Iteration  13: 604397.255 ops/s
# Warmup Iteration  14: 629669.947 ops/s
# Warmup Iteration  15: 596533.717 ops/s
# Warmup Iteration  16: 624042.109 ops/s
# Warmup Iteration  17: 609533.854 ops/s
# Warmup Iteration  18: 629402.536 ops/s
# Warmup Iteration  19: 617356.033 ops/s
# Warmup Iteration  20: 624409.137 ops/s
# Warmup Iteration  21: 611292.714 ops/s
# Warmup Iteration  22: 599249.308 ops/s
# Warmup Iteration  23: 626793.421 ops/s
# Warmup Iteration  24: 614112.798 ops/s
# Warmup Iteration  25: 619093.849 ops/s
# Warmup Iteration  26: 637983.295 ops/s
# Warmup Iteration  27: 620920.009 ops/s
# Warmup Iteration  28: 605997.765 ops/s
# Warmup Iteration  29: 634403.662 ops/s
# Warmup Iteration  30: 608166.255 ops/s
Iteration   1: 645158.576 ops/s
Iteration   2: 598897.140 ops/s
Iteration   3: 629875.696 ops/s
Iteration   4: 606054.181 ops/s
Iteration   5: 596224.813 ops/s
Iteration   6: 615824.767 ops/s
Iteration   7: 601598.573 ops/s
Iteration   8: 636034.608 ops/s
Iteration   9: 607562.642 ops/s
Iteration  10: 607071.376 ops/s
Iteration  11: 642767.922 ops/s
Iteration  12: 612403.392 ops/s
Iteration  13: 638504.115 ops/s
Iteration  14: 640405.588 ops/s
Iteration  15: 610776.828 ops/s
Iteration  16: 612346.761 ops/s
Iteration  17: 635171.464 ops/s
Iteration  18: 609136.145 ops/s
Iteration  19: 628935.639 ops/s
Iteration  20: 639963.679 ops/s
Iteration  21: 656017.551 ops/s
Iteration  22: 608098.101 ops/s
Iteration  23: 637408.290 ops/s
Iteration  24: 607219.551 ops/s
Iteration  25: 630927.325 ops/s
Iteration  26: 607904.917 ops/s
Iteration  27: 612683.352 ops/s
Iteration  28: 512389.318 ops/s
Iteration  29: 622172.803 ops/s
Iteration  30: 609946.573 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerCompletesReentrant":
  617316.056 ±(99.9%) 17042.610 ops/s [Average]
  (min, avg, max) = (512389.318, 617316.056, 656017.551), stdev = 25508.579
  CI (99.9%): [600273.446, 634358.667] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_innerCompletesReentrant  thrpt   30  617316.056 ± 17042.610  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_asyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_asyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.783 ops/s
# Warmup Iteration   2: 28681.388 ops/s
# Warmup Iteration   3: 134985.549 ops/s
# Warmup Iteration   4: 144439.279 ops/s
# Warmup Iteration   5: 197827.471 ops/s
# Warmup Iteration   6: 231088.231 ops/s
# Warmup Iteration   7: 176301.477 ops/s
# Warmup Iteration   8: 695621.048 ops/s
# Warmup Iteration   9: 650521.038 ops/s
# Warmup Iteration  10: 694782.472 ops/s
# Warmup Iteration  11: 672330.607 ops/s
# Warmup Iteration  12: 671542.126 ops/s
# Warmup Iteration  13: 671205.233 ops/s
# Warmup Iteration  14: 687452.714 ops/s
# Warmup Iteration  15: 674416.660 ops/s
# Warmup Iteration  16: 688081.714 ops/s
# Warmup Iteration  17: 671278.246 ops/s
# Warmup Iteration  18: 669001.226 ops/s
# Warmup Iteration  19: 720853.808 ops/s
# Warmup Iteration  20: 660792.522 ops/s
# Warmup Iteration  21: 699487.362 ops/s
# Warmup Iteration  22: 667778.266 ops/s
# Warmup Iteration  23: 694458.556 ops/s
# Warmup Iteration  24: 686209.191 ops/s
# Warmup Iteration  25: 662754.134 ops/s
# Warmup Iteration  26: 705119.657 ops/s
# Warmup Iteration  27: 668409.529 ops/s
# Warmup Iteration  28: 686447.085 ops/s
# Warmup Iteration  29: 671119.211 ops/s
# Warmup Iteration  30: 677524.080 ops/s
Iteration   1: 699967.942 ops/s
Iteration   2: 660916.134 ops/s
Iteration   3: 697133.601 ops/s
Iteration   4: 663674.331 ops/s
Iteration   5: 676733.692 ops/s
Iteration   6: 693360.474 ops/s
Iteration   7: 660924.659 ops/s
Iteration   8: 700625.636 ops/s
Iteration   9: 700240.636 ops/s
Iteration  10: 664348.274 ops/s
Iteration  11: 684229.115 ops/s
Iteration  12: 664658.028 ops/s
Iteration  13: 698550.741 ops/s
Iteration  14: 700673.601 ops/s
Iteration  15: 683359.300 ops/s
Iteration  16: 671885.630 ops/s
Iteration  17: 710716.796 ops/s
Iteration  18: 662084.490 ops/s
Iteration  19: 693767.392 ops/s
Iteration  20: 678286.923 ops/s
Iteration  21: 695583.892 ops/s
Iteration  22: 668798.452 ops/s
Iteration  23: 687762.204 ops/s
Iteration  24: 710126.771 ops/s
Iteration  25: 673450.851 ops/s
Iteration  26: 697419.245 ops/s
Iteration  27: 671915.234 ops/s
Iteration  28: 706343.318 ops/s
Iteration  29: 654961.495 ops/s
Iteration  30: 692532.770 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_asyncFused":
  684167.721 ±(99.9%) 11248.132 ops/s [Average]
  (min, avg, max) = (654961.495, 684167.721, 710716.796), stdev = 16835.675
  CI (99.9%): [672919.589, 695415.852] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_asyncFused  thrpt   30  684167.721 ± 11248.132  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.730 ops/s
# Warmup Iteration   2: 18354.860 ops/s
# Warmup Iteration   3: 54033.673 ops/s
# Warmup Iteration   4: 47497.184 ops/s
# Warmup Iteration   5: 64237.473 ops/s
# Warmup Iteration   6: 57792.808 ops/s
# Warmup Iteration   7: 96453.642 ops/s
# Warmup Iteration   8: 168063.900 ops/s
# Warmup Iteration   9: 156125.098 ops/s
# Warmup Iteration  10: 174336.931 ops/s
# Warmup Iteration  11: 163228.051 ops/s
# Warmup Iteration  12: 172033.606 ops/s
# Warmup Iteration  13: 162739.412 ops/s
# Warmup Iteration  14: 171210.416 ops/s
# Warmup Iteration  15: 172154.804 ops/s
# Warmup Iteration  16: 167262.584 ops/s
# Warmup Iteration  17: 166076.412 ops/s
# Warmup Iteration  18: 170848.119 ops/s
# Warmup Iteration  19: 167960.833 ops/s
# Warmup Iteration  20: 165586.198 ops/s
# Warmup Iteration  21: 175450.123 ops/s
# Warmup Iteration  22: 164618.594 ops/s
# Warmup Iteration  23: 173645.718 ops/s
# Warmup Iteration  24: 167995.049 ops/s
# Warmup Iteration  25: 164564.152 ops/s
# Warmup Iteration  26: 171730.428 ops/s
# Warmup Iteration  27: 166489.969 ops/s
# Warmup Iteration  28: 170393.537 ops/s
# Warmup Iteration  29: 173719.575 ops/s
# Warmup Iteration  30: 164007.353 ops/s
Iteration   1: 170288.052 ops/s
Iteration   2: 166524.396 ops/s
Iteration   3: 170814.691 ops/s
Iteration   4: 171573.720 ops/s
Iteration   5: 165110.556 ops/s
Iteration   6: 167979.021 ops/s
Iteration   7: 166954.544 ops/s
Iteration   8: 172897.791 ops/s
Iteration   9: 164717.662 ops/s
Iteration  10: 173382.349 ops/s
Iteration  11: 168611.243 ops/s
Iteration  12: 175132.037 ops/s
Iteration  13: 165495.382 ops/s
Iteration  14: 167285.837 ops/s
Iteration  15: 171956.486 ops/s
Iteration  16: 164569.789 ops/s
Iteration  17: 170735.392 ops/s
Iteration  18: 176304.459 ops/s
Iteration  19: 172602.537 ops/s
Iteration  20: 165414.413 ops/s
Iteration  21: 174921.570 ops/s
Iteration  22: 119849.595 ops/s
Iteration  23: 167162.945 ops/s
Iteration  24: 176348.213 ops/s
Iteration  25: 167773.317 ops/s
Iteration  26: 175985.793 ops/s
Iteration  27: 165213.560 ops/s
Iteration  28: 171183.361 ops/s
Iteration  29: 171596.406 ops/s
Iteration  30: 170811.207 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_undeliverableUponCancel":
  168306.544 ±(99.9%) 6597.135 ops/s [Average]
  (min, avg, max) = (119849.595, 168306.544, 176348.213), stdev = 9874.282
  CI (99.9%): [161709.409, 174903.679] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  168306.544 ± 6597.135  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapInnerCancelled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapInnerCancelled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.702 ops/s
# Warmup Iteration   2: 82917.396 ops/s
# Warmup Iteration   3: 135421.658 ops/s
# Warmup Iteration   4: 225771.585 ops/s
# Warmup Iteration   5: 300761.218 ops/s
# Warmup Iteration   6: 373243.363 ops/s
# Warmup Iteration   7: 543884.686 ops/s
# Warmup Iteration   8: 775243.614 ops/s
# Warmup Iteration   9: 789061.539 ops/s
# Warmup Iteration  10: 858637.610 ops/s
# Warmup Iteration  11: 847585.837 ops/s
# Warmup Iteration  12: 828153.022 ops/s
# Warmup Iteration  13: 867357.689 ops/s
# Warmup Iteration  14: 830052.510 ops/s
# Warmup Iteration  15: 894273.543 ops/s
# Warmup Iteration  16: 884121.324 ops/s
# Warmup Iteration  17: 808506.720 ops/s
# Warmup Iteration  18: 888917.028 ops/s
# Warmup Iteration  19: 818274.188 ops/s
# Warmup Iteration  20: 845245.076 ops/s
# Warmup Iteration  21: 864383.932 ops/s
# Warmup Iteration  22: 832277.412 ops/s
# Warmup Iteration  23: 798791.809 ops/s
# Warmup Iteration  24: 871105.436 ops/s
# Warmup Iteration  25: 873698.086 ops/s
# Warmup Iteration  26: 834351.978 ops/s
# Warmup Iteration  27: 846243.321 ops/s
# Warmup Iteration  28: 889487.248 ops/s
# Warmup Iteration  29: 819363.178 ops/s
# Warmup Iteration  30: 850648.112 ops/s
Iteration   1: 861002.824 ops/s
Iteration   2: 829121.704 ops/s
Iteration   3: 840976.429 ops/s
Iteration   4: 869886.677 ops/s
Iteration   5: 852732.277 ops/s
Iteration   6: 849961.723 ops/s
Iteration   7: 872796.738 ops/s
Iteration   8: 850655.305 ops/s
Iteration   9: 832607.161 ops/s
Iteration  10: 850898.286 ops/s
Iteration  11: 833462.558 ops/s
Iteration  12: 824347.993 ops/s
Iteration  13: 853402.685 ops/s
Iteration  14: 827811.181 ops/s
Iteration  15: 851115.351 ops/s
Iteration  16: 874511.706 ops/s
Iteration  17: 815462.553 ops/s
Iteration  18: 887561.418 ops/s
Iteration  19: 812433.935 ops/s
Iteration  20: 826484.150 ops/s
Iteration  21: 874833.987 ops/s
Iteration  22: 821533.081 ops/s
Iteration  23: 841745.844 ops/s
Iteration  24: 858855.639 ops/s
Iteration  25: 842097.630 ops/s
Iteration  26: 847039.718 ops/s
Iteration  27: 836349.192 ops/s
Iteration  28: 864605.996 ops/s
Iteration  29: 812784.739 ops/s
Iteration  30: 840321.437 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapInnerCancelled":
  845246.664 ±(99.9%) 13197.402 ops/s [Average]
  (min, avg, max) = (812433.935, 845246.664, 887561.418), stdev = 19753.252
  CI (99.9%): [832049.262, 858444.066] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchMapInnerCancelled  thrpt   30  845246.664 ± 13197.402  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16628.541 ops/s
# Warmup Iteration   2: 65081.472 ops/s
# Warmup Iteration   3: 90581.655 ops/s
# Warmup Iteration   4: 89816.440 ops/s
# Warmup Iteration   5: 93870.202 ops/s
# Warmup Iteration   6: 88334.312 ops/s
# Warmup Iteration   7: 85650.975 ops/s
# Warmup Iteration   8: 85710.776 ops/s
# Warmup Iteration   9: 89445.644 ops/s
# Warmup Iteration  10: 92857.321 ops/s
# Warmup Iteration  11: 88899.083 ops/s
# Warmup Iteration  12: 91590.102 ops/s
# Warmup Iteration  13: 91448.551 ops/s
# Warmup Iteration  14: 83280.167 ops/s
# Warmup Iteration  15: 95727.852 ops/s
# Warmup Iteration  16: 87329.236 ops/s
# Warmup Iteration  17: 92823.837 ops/s
# Warmup Iteration  18: 89722.932 ops/s
# Warmup Iteration  19: 92972.515 ops/s
# Warmup Iteration  20: 91794.245 ops/s
# Warmup Iteration  21: 89425.422 ops/s
# Warmup Iteration  22: 93626.384 ops/s
# Warmup Iteration  23: 91873.429 ops/s
# Warmup Iteration  24: 89331.986 ops/s
# Warmup Iteration  25: 87711.810 ops/s
# Warmup Iteration  26: 93060.340 ops/s
# Warmup Iteration  27: 88628.371 ops/s
# Warmup Iteration  28: 90212.635 ops/s
# Warmup Iteration  29: 89933.679 ops/s
# Warmup Iteration  30: 89782.872 ops/s
Iteration   1: 91251.023 ops/s
Iteration   2: 93508.164 ops/s
Iteration   3: 94332.161 ops/s
Iteration   4: 89928.255 ops/s
Iteration   5: 88785.801 ops/s
Iteration   6: 94525.964 ops/s
Iteration   7: 89802.465 ops/s
Iteration   8: 93201.683 ops/s
Iteration   9: 90127.175 ops/s
Iteration  10: 89909.157 ops/s
Iteration  11: 93356.295 ops/s
Iteration  12: 89204.198 ops/s
Iteration  13: 92206.583 ops/s
Iteration  14: 88946.705 ops/s
Iteration  15: 89972.147 ops/s
Iteration  16: 76492.820 ops/s
Iteration  17: 90281.668 ops/s
Iteration  18: 93986.918 ops/s
Iteration  19: 87812.286 ops/s
Iteration  20: 90423.106 ops/s
Iteration  21: 91961.724 ops/s
Iteration  22: 92059.874 ops/s
Iteration  23: 92158.507 ops/s
Iteration  24: 89005.475 ops/s
Iteration  25: 91725.409 ops/s
Iteration  26: 96714.351 ops/s
Iteration  27: 88855.631 ops/s
Iteration  28: 91287.351 ops/s
Iteration  29: 92090.086 ops/s
Iteration  30: 90252.202 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_simple":
  90805.506 ±(99.9%) 2273.859 ops/s [Average]
  (min, avg, max) = (76492.820, 90805.506, 96714.351), stdev = 3403.406
  CI (99.9%): [88531.647, 93079.365] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt      Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_simple  thrpt   30  90805.506 ± 2273.859  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 381276.649 ops/s
# Warmup Iteration   2: 1401596.535 ops/s
# Warmup Iteration   3: 2330726.070 ops/s
# Warmup Iteration   4: 2621817.080 ops/s
# Warmup Iteration   5: 3198186.199 ops/s
# Warmup Iteration   6: 3272262.114 ops/s
# Warmup Iteration   7: 3161785.380 ops/s
# Warmup Iteration   8: 3205773.347 ops/s
# Warmup Iteration   9: 2986043.430 ops/s
# Warmup Iteration  10: 3187519.744 ops/s
# Warmup Iteration  11: 3225692.297 ops/s
# Warmup Iteration  12: 3005376.462 ops/s
# Warmup Iteration  13: 3247879.117 ops/s
# Warmup Iteration  14: 3212671.782 ops/s
# Warmup Iteration  15: 3123048.795 ops/s
# Warmup Iteration  16: 3170894.388 ops/s
# Warmup Iteration  17: 3147113.444 ops/s
# Warmup Iteration  18: 3082336.082 ops/s
# Warmup Iteration  19: 3246091.829 ops/s
# Warmup Iteration  20: 3054110.579 ops/s
# Warmup Iteration  21: 3222730.220 ops/s
# Warmup Iteration  22: 3035599.432 ops/s
# Warmup Iteration  23: 3275533.681 ops/s
# Warmup Iteration  24: 3141520.573 ops/s
# Warmup Iteration  25: 3092342.777 ops/s
# Warmup Iteration  26: 3257272.248 ops/s
# Warmup Iteration  27: 3156570.452 ops/s
# Warmup Iteration  28: 3145861.501 ops/s
# Warmup Iteration  29: 3112807.280 ops/s
# Warmup Iteration  30: 3137012.734 ops/s
Iteration   1: 3186545.095 ops/s
Iteration   2: 3070249.019 ops/s
Iteration   3: 3149071.632 ops/s
Iteration   4: 3091195.349 ops/s
Iteration   5: 3046280.789 ops/s
Iteration   6: 3201836.167 ops/s
Iteration   7: 3160311.203 ops/s
Iteration   8: 3253558.725 ops/s
Iteration   9: 3223481.539 ops/s
Iteration  10: 3087663.376 ops/s
Iteration  11: 3247570.297 ops/s
Iteration  12: 3186868.154 ops/s
Iteration  13: 3119987.384 ops/s
Iteration  14: 3107437.901 ops/s
Iteration  15: 3082204.485 ops/s
Iteration  16: 3215203.269 ops/s
Iteration  17: 3216668.975 ops/s
Iteration  18: 3032874.657 ops/s
Iteration  19: 3186824.832 ops/s
Iteration  20: 3145156.530 ops/s
Iteration  21: 3138251.029 ops/s
Iteration  22: 3174586.381 ops/s
Iteration  23: 3089100.234 ops/s
Iteration  24: 3139060.817 ops/s
Iteration  25: 3127899.816 ops/s
Iteration  26: 3125782.032 ops/s
Iteration  27: 3270873.801 ops/s
Iteration  28: 3184996.391 ops/s
Iteration  29: 2981581.082 ops/s
Iteration  30: 3214354.782 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_disposed":
  3148582.525 ±(99.9%) 46524.470 ops/s [Average]
  (min, avg, max) = (2981581.082, 3148582.525, 3270873.801), stdev = 69635.641
  CI (99.9%): [3102058.055, 3195106.994] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableRefCountTest._Benchmark.benchmark_disposed  thrpt   30  3148582.525 ± 46524.470  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mapperCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mapperCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 218093.864 ops/s
# Warmup Iteration   2: 1208206.512 ops/s
# Warmup Iteration   3: 1791804.306 ops/s
# Warmup Iteration   4: 1963200.675 ops/s
# Warmup Iteration   5: 1951433.122 ops/s
# Warmup Iteration   6: 2027892.562 ops/s
# Warmup Iteration   7: 2032007.971 ops/s
# Warmup Iteration   8: 1888190.154 ops/s
# Warmup Iteration   9: 2097511.689 ops/s
# Warmup Iteration  10: 2056610.783 ops/s
# Warmup Iteration  11: 1986027.306 ops/s
# Warmup Iteration  12: 1998996.959 ops/s
# Warmup Iteration  13: 2050407.981 ops/s
# Warmup Iteration  14: 1989995.435 ops/s
# Warmup Iteration  15: 2048456.173 ops/s
# Warmup Iteration  16: 1969188.657 ops/s
# Warmup Iteration  17: 2030586.936 ops/s
# Warmup Iteration  18: 2034250.321 ops/s
# Warmup Iteration  19: 2003259.759 ops/s
# Warmup Iteration  20: 2022511.947 ops/s
# Warmup Iteration  21: 1927702.516 ops/s
# Warmup Iteration  22: 2016953.395 ops/s
# Warmup Iteration  23: 1953585.144 ops/s
# Warmup Iteration  24: 1995481.467 ops/s
# Warmup Iteration  25: 2063134.110 ops/s
# Warmup Iteration  26: 1973119.489 ops/s
# Warmup Iteration  27: 2004575.010 ops/s
# Warmup Iteration  28: 1985083.982 ops/s
# Warmup Iteration  29: 2052125.613 ops/s
# Warmup Iteration  30: 1965869.178 ops/s
Iteration   1: 2045036.490 ops/s
Iteration   2: 2078939.959 ops/s
Iteration   3: 1955459.393 ops/s
Iteration   4: 2097755.175 ops/s
Iteration   5: 2054577.960 ops/s
Iteration   6: 1982888.526 ops/s
Iteration   7: 2059091.533 ops/s
Iteration   8: 2006501.282 ops/s
Iteration   9: 2007078.299 ops/s
Iteration  10: 1854150.566 ops/s
Iteration  11: 1579028.203 ops/s
Iteration  12: 2101917.776 ops/s
Iteration  13: 1924601.891 ops/s
Iteration  14: 2047442.217 ops/s
Iteration  15: 2026371.134 ops/s
Iteration  16: 2027347.187 ops/s
Iteration  17: 1993012.441 ops/s
Iteration  18: 1983090.169 ops/s
Iteration  19: 2038152.957 ops/s
Iteration  20: 1967141.596 ops/s
Iteration  21: 2015480.249 ops/s
Iteration  22: 2081706.285 ops/s
Iteration  23: 1940855.563 ops/s
Iteration  24: 2004434.764 ops/s
Iteration  25: 1980654.770 ops/s
Iteration  26: 2064590.679 ops/s
Iteration  27: 1989207.681 ops/s
Iteration  28: 2001211.654 ops/s
Iteration  29: 2073876.667 ops/s
Iteration  30: 1941935.485 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_mapperCancels":
  1997451.285 ±(99.9%) 64646.653 ops/s [Average]
  (min, avg, max) = (1579028.203, 1997451.285, 2101917.776), stdev = 96760.075
  CI (99.9%): [1932804.632, 2062097.938] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_mapperCancels  thrpt   30  1997451.285 ± 64646.653  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipWithCombinerReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipWithCombinerReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70795.127 ops/s
# Warmup Iteration   2: 330767.867 ops/s
# Warmup Iteration   3: 363171.050 ops/s
# Warmup Iteration   4: 347146.519 ops/s
# Warmup Iteration   5: 373483.893 ops/s
# Warmup Iteration   6: 392023.180 ops/s
# Warmup Iteration   7: 386384.885 ops/s
# Warmup Iteration   8: 376444.366 ops/s
# Warmup Iteration   9: 393886.791 ops/s
# Warmup Iteration  10: 392363.753 ops/s
# Warmup Iteration  11: 375403.733 ops/s
# Warmup Iteration  12: 391010.051 ops/s
# Warmup Iteration  13: 371375.729 ops/s
# Warmup Iteration  14: 381002.159 ops/s
# Warmup Iteration  15: 391447.607 ops/s
# Warmup Iteration  16: 375086.884 ops/s
# Warmup Iteration  17: 404018.103 ops/s
# Warmup Iteration  18: 390976.127 ops/s
# Warmup Iteration  19: 386571.655 ops/s
# Warmup Iteration  20: 396896.703 ops/s
# Warmup Iteration  21: 392673.921 ops/s
# Warmup Iteration  22: 383019.377 ops/s
# Warmup Iteration  23: 399871.294 ops/s
# Warmup Iteration  24: 392490.506 ops/s
# Warmup Iteration  25: 379340.860 ops/s
# Warmup Iteration  26: 402668.941 ops/s
# Warmup Iteration  27: 403629.359 ops/s
# Warmup Iteration  28: 383561.723 ops/s
# Warmup Iteration  29: 391424.838 ops/s
# Warmup Iteration  30: 393382.153 ops/s
Iteration   1: 393967.384 ops/s
Iteration   2: 397509.774 ops/s
Iteration   3: 397604.308 ops/s
Iteration   4: 385802.850 ops/s
Iteration   5: 388888.787 ops/s
Iteration   6: 398943.174 ops/s
Iteration   7: 392723.649 ops/s
Iteration   8: 400592.919 ops/s
Iteration   9: 389617.585 ops/s
Iteration  10: 397667.020 ops/s
Iteration  11: 394831.760 ops/s
Iteration  12: 399417.923 ops/s
Iteration  13: 407509.882 ops/s
Iteration  14: 387179.009 ops/s
Iteration  15: 397692.128 ops/s
Iteration  16: 413428.280 ops/s
Iteration  17: 390571.994 ops/s
Iteration  18: 403755.991 ops/s
Iteration  19: 401236.455 ops/s
Iteration  20: 401838.297 ops/s
Iteration  21: 397668.877 ops/s
Iteration  22: 389119.250 ops/s
Iteration  23: 413549.210 ops/s
Iteration  24: 395454.216 ops/s
Iteration  25: 408365.885 ops/s
Iteration  26: 405923.255 ops/s
Iteration  27: 381224.053 ops/s
Iteration  28: 404418.942 ops/s
Iteration  29: 395293.782 ops/s
Iteration  30: 392170.639 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipWithCombinerReturnsNull":
  397465.576 ±(99.9%) 5231.872 ops/s [Average]
  (min, avg, max) = (381224.053, 397465.576, 413549.210), stdev = 7830.820
  CI (99.9%): [392233.704, 402697.447] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_zipWithCombinerReturnsNull  thrpt   30  397465.576 ± 5231.872  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33568.912 ops/s
# Warmup Iteration   2: 153760.241 ops/s
# Warmup Iteration   3: 196038.557 ops/s
# Warmup Iteration   4: 198950.856 ops/s
# Warmup Iteration   5: 208370.162 ops/s
# Warmup Iteration   6: 202846.235 ops/s
# Warmup Iteration   7: 203367.443 ops/s
# Warmup Iteration   8: 208202.213 ops/s
# Warmup Iteration   9: 204021.749 ops/s
# Warmup Iteration  10: 206543.566 ops/s
# Warmup Iteration  11: 197898.889 ops/s
# Warmup Iteration  12: 205387.235 ops/s
# Warmup Iteration  13: 202374.498 ops/s
# Warmup Iteration  14: 207627.202 ops/s
# Warmup Iteration  15: 201802.163 ops/s
# Warmup Iteration  16: 206327.142 ops/s
# Warmup Iteration  17: 207963.929 ops/s
# Warmup Iteration  18: 215629.874 ops/s
# Warmup Iteration  19: 205132.242 ops/s
# Warmup Iteration  20: 211918.779 ops/s
# Warmup Iteration  21: 220799.956 ops/s
# Warmup Iteration  22: 210612.999 ops/s
# Warmup Iteration  23: 211763.347 ops/s
# Warmup Iteration  24: 218181.941 ops/s
# Warmup Iteration  25: 201872.305 ops/s
# Warmup Iteration  26: 207193.444 ops/s
# Warmup Iteration  27: 199767.731 ops/s
# Warmup Iteration  28: 212361.907 ops/s
# Warmup Iteration  29: 218451.830 ops/s
# Warmup Iteration  30: 209931.350 ops/s
Iteration   1: 217202.197 ops/s
Iteration   2: 214398.642 ops/s
Iteration   3: 218370.467 ops/s
Iteration   4: 211859.865 ops/s
Iteration   5: 146664.122 ops/s
Iteration   6: 219360.511 ops/s
Iteration   7: 196573.852 ops/s
Iteration   8: 219557.022 ops/s
Iteration   9: 215376.587 ops/s
Iteration  10: 210867.493 ops/s
Iteration  11: 213783.664 ops/s
Iteration  12: 216156.230 ops/s
Iteration  13: 220376.369 ops/s
Iteration  14: 216009.377 ops/s
Iteration  15: 207765.701 ops/s
Iteration  16: 217976.832 ops/s
Iteration  17: 213762.688 ops/s
Iteration  18: 212993.813 ops/s
Iteration  19: 208114.415 ops/s
Iteration  20: 213575.651 ops/s
Iteration  21: 218217.249 ops/s
Iteration  22: 211213.958 ops/s
Iteration  23: 208737.611 ops/s
Iteration  24: 214895.964 ops/s
Iteration  25: 214484.837 ops/s
Iteration  26: 216391.295 ops/s
Iteration  27: 209039.730 ops/s
Iteration  28: 210808.195 ops/s
Iteration  29: 214083.813 ops/s
Iteration  30: 209850.175 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd":
  211282.278 ±(99.9%) 8749.567 ops/s [Average]
  (min, avg, max) = (146664.122, 211282.278, 220376.369), stdev = 13095.941
  CI (99.9%): [202532.711, 220031.844] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd  thrpt   30  211282.278 ± 8749.567  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_actionThrowsConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_actionThrowsConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39925.164 ops/s
# Warmup Iteration   2: 125348.365 ops/s
# Warmup Iteration   3: 209802.241 ops/s
# Warmup Iteration   4: 214600.408 ops/s
# Warmup Iteration   5: 217317.032 ops/s
# Warmup Iteration   6: 215761.881 ops/s
# Warmup Iteration   7: 211990.769 ops/s
# Warmup Iteration   8: 218234.037 ops/s
# Warmup Iteration   9: 214059.653 ops/s
# Warmup Iteration  10: 224099.562 ops/s
# Warmup Iteration  11: 213041.432 ops/s
# Warmup Iteration  12: 212827.167 ops/s
# Warmup Iteration  13: 216161.814 ops/s
# Warmup Iteration  14: 215210.060 ops/s
# Warmup Iteration  15: 217889.553 ops/s
# Warmup Iteration  16: 212861.581 ops/s
# Warmup Iteration  17: 229773.278 ops/s
# Warmup Iteration  18: 215982.176 ops/s
# Warmup Iteration  19: 228282.546 ops/s
# Warmup Iteration  20: 218621.163 ops/s
# Warmup Iteration  21: 226614.463 ops/s
# Warmup Iteration  22: 217118.936 ops/s
# Warmup Iteration  23: 224623.582 ops/s
# Warmup Iteration  24: 217755.037 ops/s
# Warmup Iteration  25: 223247.116 ops/s
# Warmup Iteration  26: 218130.615 ops/s
# Warmup Iteration  27: 232456.228 ops/s
# Warmup Iteration  28: 219014.202 ops/s
# Warmup Iteration  29: 216015.285 ops/s
# Warmup Iteration  30: 223732.122 ops/s
Iteration   1: 225350.986 ops/s
Iteration   2: 230052.888 ops/s
Iteration   3: 218468.228 ops/s
Iteration   4: 224101.063 ops/s
Iteration   5: 213325.764 ops/s
Iteration   6: 227501.469 ops/s
Iteration   7: 217145.986 ops/s
Iteration   8: 206651.838 ops/s
Iteration   9: 235365.031 ops/s
Iteration  10: 215665.679 ops/s
Iteration  11: 224781.165 ops/s
Iteration  12: 228690.914 ops/s
Iteration  13: 226248.909 ops/s
Iteration  14: 225539.588 ops/s
Iteration  15: 214989.611 ops/s
Iteration  16: 234245.686 ops/s
Iteration  17: 221269.470 ops/s
Iteration  18: 225366.164 ops/s
Iteration  19: 229145.318 ops/s
Iteration  20: 222345.788 ops/s
Iteration  21: 229554.259 ops/s
Iteration  22: 219139.104 ops/s
Iteration  23: 233472.038 ops/s
Iteration  24: 217044.220 ops/s
Iteration  25: 231470.116 ops/s
Iteration  26: 227702.106 ops/s
Iteration  27: 222951.023 ops/s
Iteration  28: 225492.198 ops/s
Iteration  29: 222709.354 ops/s
Iteration  30: 223935.931 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_actionThrowsConditional":
  223990.730 ±(99.9%) 4410.267 ops/s [Average]
  (min, avg, max) = (206651.838, 223990.730, 235365.031), stdev = 6601.081
  CI (99.9%): [219580.462, 228400.997] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_actionThrowsConditional  thrpt   30  223990.730 ± 4410.267  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_badSourceDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_badSourceDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 234465.967 ops/s
# Warmup Iteration   2: 465090.206 ops/s
# Warmup Iteration   3: 494770.843 ops/s
# Warmup Iteration   4: 455261.253 ops/s
# Warmup Iteration   5: 548338.403 ops/s
# Warmup Iteration   6: 443329.246 ops/s
# Warmup Iteration   7: 516630.686 ops/s
# Warmup Iteration   8: 534044.823 ops/s
# Warmup Iteration   9: 525908.107 ops/s
# Warmup Iteration  10: 523464.299 ops/s
# Warmup Iteration  11: 537487.275 ops/s
# Warmup Iteration  12: 509241.287 ops/s
# Warmup Iteration  13: 534316.676 ops/s
# Warmup Iteration  14: 517905.777 ops/s
# Warmup Iteration  15: 523406.008 ops/s
# Warmup Iteration  16: 540940.921 ops/s
# Warmup Iteration  17: 554625.883 ops/s
# Warmup Iteration  18: 530317.437 ops/s
# Warmup Iteration  19: 564308.112 ops/s
# Warmup Iteration  20: 535347.849 ops/s
# Warmup Iteration  21: 582456.194 ops/s
# Warmup Iteration  22: 567148.502 ops/s
# Warmup Iteration  23: 544754.399 ops/s
# Warmup Iteration  24: 543244.772 ops/s
# Warmup Iteration  25: 556319.981 ops/s
# Warmup Iteration  26: 558120.196 ops/s
# Warmup Iteration  27: 556521.195 ops/s
# Warmup Iteration  28: 576954.019 ops/s
# Warmup Iteration  29: 529867.118 ops/s
# Warmup Iteration  30: 475369.985 ops/s
Iteration   1: 533372.777 ops/s
Iteration   2: 548920.100 ops/s
Iteration   3: 549972.275 ops/s
Iteration   4: 556504.622 ops/s
Iteration   5: 550372.363 ops/s
Iteration   6: 539963.739 ops/s
Iteration   7: 562151.111 ops/s
Iteration   8: 552454.576 ops/s
Iteration   9: 568977.956 ops/s
Iteration  10: 561698.150 ops/s
Iteration  11: 539646.705 ops/s
Iteration  12: 548021.976 ops/s
Iteration  13: 555342.211 ops/s
Iteration  14: 551995.412 ops/s
Iteration  15: 543064.033 ops/s
Iteration  16: 556913.195 ops/s
Iteration  17: 537937.667 ops/s
Iteration  18: 571404.717 ops/s
Iteration  19: 543505.861 ops/s
Iteration  20: 549854.659 ops/s
Iteration  21: 558460.601 ops/s
Iteration  22: 541267.422 ops/s
Iteration  23: 567150.305 ops/s
Iteration  24: 538828.557 ops/s
Iteration  25: 568179.224 ops/s
Iteration  26: 551448.687 ops/s
Iteration  27: 564333.099 ops/s
Iteration  28: 554400.095 ops/s
Iteration  29: 546112.012 ops/s
Iteration  30: 539501.666 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_badSourceDispose":
  551725.192 ±(99.9%) 6926.664 ops/s [Average]
  (min, avg, max) = (533372.777, 551725.192, 571404.717), stdev = 10367.505
  CI (99.9%): [544798.529, 558651.856] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableRefCountTest._Benchmark.benchmark_badSourceDispose  thrpt   30  551725.192 ± 6926.664  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 196986.558 ops/s
# Warmup Iteration   2: 588090.332 ops/s
# Warmup Iteration   3: 670557.752 ops/s
# Warmup Iteration   4: 670759.563 ops/s
# Warmup Iteration   5: 595973.903 ops/s
# Warmup Iteration   6: 718435.721 ops/s
# Warmup Iteration   7: 695048.079 ops/s
# Warmup Iteration   8: 695713.286 ops/s
# Warmup Iteration   9: 706683.422 ops/s
# Warmup Iteration  10: 698801.482 ops/s
# Warmup Iteration  11: 709466.215 ops/s
# Warmup Iteration  12: 712212.507 ops/s
# Warmup Iteration  13: 725211.938 ops/s
# Warmup Iteration  14: 693126.106 ops/s
# Warmup Iteration  15: 719003.597 ops/s
# Warmup Iteration  16: 721342.535 ops/s
# Warmup Iteration  17: 755484.435 ops/s
# Warmup Iteration  18: 774801.574 ops/s
# Warmup Iteration  19: 730345.057 ops/s
# Warmup Iteration  20: 779242.799 ops/s
# Warmup Iteration  21: 754128.717 ops/s
# Warmup Iteration  22: 739179.358 ops/s
# Warmup Iteration  23: 739799.028 ops/s
# Warmup Iteration  24: 749030.569 ops/s
# Warmup Iteration  25: 761636.751 ops/s
# Warmup Iteration  26: 739020.831 ops/s
# Warmup Iteration  27: 738216.365 ops/s
# Warmup Iteration  28: 782220.613 ops/s
# Warmup Iteration  29: 732235.243 ops/s
# Warmup Iteration  30: 768589.764 ops/s
Iteration   1: 768052.642 ops/s
Iteration   2: 732713.746 ops/s
Iteration   3: 788714.030 ops/s
Iteration   4: 728291.688 ops/s
Iteration   5: 763064.747 ops/s
Iteration   6: 731267.164 ops/s
Iteration   7: 756876.113 ops/s
Iteration   8: 754064.293 ops/s
Iteration   9: 728748.967 ops/s
Iteration  10: 773452.285 ops/s
Iteration  11: 721594.103 ops/s
Iteration  12: 748916.209 ops/s
Iteration  13: 766859.568 ops/s
Iteration  14: 751096.826 ops/s
Iteration  15: 724688.329 ops/s
Iteration  16: 777326.125 ops/s
Iteration  17: 745086.624 ops/s
Iteration  18: 777298.979 ops/s
Iteration  19: 745807.200 ops/s
Iteration  20: 743495.112 ops/s
Iteration  21: 791260.097 ops/s
Iteration  22: 719359.144 ops/s
Iteration  23: 775212.076 ops/s
Iteration  24: 741038.758 ops/s
Iteration  25: 731665.509 ops/s
Iteration  26: 780492.314 ops/s
Iteration  27: 711265.327 ops/s
Iteration  28: 755671.864 ops/s
Iteration  29: 752059.090 ops/s
Iteration  30: 716671.941 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_error":
  750070.362 ±(99.9%) 15074.073 ops/s [Average]
  (min, avg, max) = (711265.327, 750070.362, 791260.097), stdev = 22562.164
  CI (99.9%): [734996.289, 765144.435] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
MaybeUnsubscribeOnTest._Benchmark.benchmark_error  thrpt   30  750070.362 ± 15074.073  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.738 ops/s
# Warmup Iteration   2: 14551.493 ops/s
# Warmup Iteration   3: 20751.816 ops/s
# Warmup Iteration   4: 35098.763 ops/s
# Warmup Iteration   5: 52102.341 ops/s
# Warmup Iteration   6: 50096.882 ops/s
# Warmup Iteration   7: 79323.339 ops/s
# Warmup Iteration   8: 110071.376 ops/s
# Warmup Iteration   9: 101639.617 ops/s
# Warmup Iteration  10: 110865.531 ops/s
# Warmup Iteration  11: 106331.502 ops/s
# Warmup Iteration  12: 114662.668 ops/s
# Warmup Iteration  13: 100926.330 ops/s
# Warmup Iteration  14: 102716.041 ops/s
# Warmup Iteration  15: 104118.596 ops/s
# Warmup Iteration  16: 116234.915 ops/s
# Warmup Iteration  17: 106473.875 ops/s
# Warmup Iteration  18: 123303.650 ops/s
# Warmup Iteration  19: 116134.450 ops/s
# Warmup Iteration  20: 106960.964 ops/s
# Warmup Iteration  21: 127807.748 ops/s
# Warmup Iteration  22: 109010.126 ops/s
# Warmup Iteration  23: 117232.432 ops/s
# Warmup Iteration  24: 88466.488 ops/s
# Warmup Iteration  25: 111310.268 ops/s
# Warmup Iteration  26: 115739.543 ops/s
# Warmup Iteration  27: 109802.682 ops/s
# Warmup Iteration  28: 113998.024 ops/s
# Warmup Iteration  29: 111094.012 ops/s
# Warmup Iteration  30: 121674.062 ops/s
Iteration   1: 117183.185 ops/s
Iteration   2: 115886.279 ops/s
Iteration   3: 110994.759 ops/s
Iteration   4: 109438.192 ops/s
Iteration   5: 117153.719 ops/s
Iteration   6: 122952.963 ops/s
Iteration   7: 126261.815 ops/s
Iteration   8: 103912.486 ops/s
Iteration   9: 115256.758 ops/s
Iteration  10: 108415.268 ops/s
Iteration  11: 114723.209 ops/s
Iteration  12: 114953.998 ops/s
Iteration  13: 121435.335 ops/s
Iteration  14: 120085.579 ops/s
Iteration  15: 116176.824 ops/s
Iteration  16: 111640.971 ops/s
Iteration  17: 110794.982 ops/s
Iteration  18: 122741.922 ops/s
Iteration  19: 109428.073 ops/s
Iteration  20: 98264.826 ops/s
Iteration  21: 126988.667 ops/s
Iteration  22: 115496.015 ops/s
Iteration  23: 104167.006 ops/s
Iteration  24: 114180.456 ops/s
Iteration  25: 113205.436 ops/s
Iteration  26: 117517.877 ops/s
Iteration  27: 120525.995 ops/s
Iteration  28: 122330.061 ops/s
Iteration  29: 122054.174 ops/s
Iteration  30: 112496.458 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_disposed":
  115222.110 ±(99.9%) 4460.722 ops/s [Average]
  (min, avg, max) = (98264.826, 115222.110, 126988.667), stdev = 6676.599
  CI (99.9%): [110761.388, 119682.832] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ObservableTimerTest._Benchmark.benchmark_disposed  thrpt   30  115222.110 ± 4460.722  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19688.326 ops/s
# Warmup Iteration   2: 25490.534 ops/s
# Warmup Iteration   3: 19467.343 ops/s
# Warmup Iteration   4: 19463.568 ops/s
# Warmup Iteration   5: 21399.887 ops/s
# Warmup Iteration   6: 19921.040 ops/s
# Warmup Iteration   7: 20491.085 ops/s
# Warmup Iteration   8: 19858.605 ops/s
# Warmup Iteration   9: 20295.138 ops/s
# Warmup Iteration  10: 19931.611 ops/s
# Warmup Iteration  11: 20265.454 ops/s
# Warmup Iteration  12: 19792.130 ops/s
# Warmup Iteration  13: 20237.785 ops/s
# Warmup Iteration  14: 20671.264 ops/s
# Warmup Iteration  15: 19698.526 ops/s
# Warmup Iteration  16: 20367.089 ops/s
# Warmup Iteration  17: 20127.879 ops/s
# Warmup Iteration  18: 20327.642 ops/s
# Warmup Iteration  19: 22563.754 ops/s
# Warmup Iteration  20: 20248.971 ops/s
# Warmup Iteration  21: 20296.901 ops/s
# Warmup Iteration  22: 20785.452 ops/s
# Warmup Iteration  23: 21344.046 ops/s
# Warmup Iteration  24: 20422.083 ops/s
# Warmup Iteration  25: 20650.926 ops/s
# Warmup Iteration  26: 19624.930 ops/s
# Warmup Iteration  27: 20772.972 ops/s
# Warmup Iteration  28: 20102.135 ops/s
# Warmup Iteration  29: 21469.702 ops/s
# Warmup Iteration  30: 20277.475 ops/s
Iteration   1: 19796.072 ops/s
Iteration   2: 20083.547 ops/s
Iteration   3: 20453.141 ops/s
Iteration   4: 19629.571 ops/s
Iteration   5: 20027.352 ops/s
Iteration   6: 20618.453 ops/s
Iteration   7: 20108.516 ops/s
Iteration   8: 20306.296 ops/s
Iteration   9: 19634.585 ops/s
Iteration  10: 20596.770 ops/s
Iteration  11: 20412.480 ops/s
Iteration  12: 20516.640 ops/s
Iteration  13: 20760.206 ops/s
Iteration  14: 20595.343 ops/s
Iteration  15: 20537.121 ops/s
Iteration  16: 19741.222 ops/s
Iteration  17: 20623.609 ops/s
Iteration  18: 19731.480 ops/s
Iteration  19: 20398.199 ops/s
Iteration  20: 20314.058 ops/s
Iteration  21: 20075.380 ops/s
Iteration  22: 20281.760 ops/s
Iteration  23: 20290.813 ops/s
Iteration  24: 20972.370 ops/s
Iteration  25: 20367.927 ops/s
Iteration  26: 20798.740 ops/s
Iteration  27: 19707.481 ops/s
Iteration  28: 20316.977 ops/s
Iteration  29: 20276.440 ops/s
Iteration  30: 20361.639 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeOnComplete":
  20277.806 ±(99.9%) 241.183 ops/s [Average]
  (min, avg, max) = (19629.571, 20277.806, 20972.370), stdev = 360.991
  CI (99.9%): [20036.624, 20518.989] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt      Score     Error  Units
MaybeTest._Benchmark.benchmark_subscribeOnComplete  thrpt   30  20277.806 ± 241.183  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstreamTest._Benchmark.benchmark_upstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstreamTest._Benchmark.benchmark_upstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22400993.806 ops/s
# Warmup Iteration   2: 33796362.471 ops/s
# Warmup Iteration   3: 43030855.117 ops/s
# Warmup Iteration   4: 45317695.245 ops/s
# Warmup Iteration   5: 42887324.957 ops/s
# Warmup Iteration   6: 44307462.531 ops/s
# Warmup Iteration   7: 43845853.677 ops/s
# Warmup Iteration   8: 42857307.052 ops/s
# Warmup Iteration   9: 45108600.433 ops/s
# Warmup Iteration  10: 43885803.516 ops/s
# Warmup Iteration  11: 44289228.621 ops/s
# Warmup Iteration  12: 45885204.806 ops/s
# Warmup Iteration  13: 42822062.635 ops/s
# Warmup Iteration  14: 45632238.772 ops/s
# Warmup Iteration  15: 43983894.755 ops/s
# Warmup Iteration  16: 42842719.821 ops/s
# Warmup Iteration  17: 44296565.275 ops/s
# Warmup Iteration  18: 34377816.991 ops/s
# Warmup Iteration  19: 44101282.964 ops/s
# Warmup Iteration  20: 46240237.312 ops/s
# Warmup Iteration  21: 42773841.261 ops/s
# Warmup Iteration  22: 44033946.844 ops/s
# Warmup Iteration  23: 43331246.798 ops/s
# Warmup Iteration  24: 43402437.508 ops/s
# Warmup Iteration  25: 45085933.626 ops/s
# Warmup Iteration  26: 43007967.615 ops/s
# Warmup Iteration  27: 44372074.588 ops/s
# Warmup Iteration  28: 43225919.346 ops/s
# Warmup Iteration  29: 44231139.524 ops/s
# Warmup Iteration  30: 44259710.462 ops/s
Iteration   1: 42495096.377 ops/s
Iteration   2: 42130369.561 ops/s
Iteration   3: 42282736.339 ops/s
Iteration   4: 43481097.229 ops/s
Iteration   5: 44900975.618 ops/s
Iteration   6: 43318834.426 ops/s
Iteration   7: 45452928.022 ops/s
Iteration   8: 44284212.033 ops/s
Iteration   9: 42681629.602 ops/s
Iteration  10: 44944437.233 ops/s
Iteration  11: 43111670.528 ops/s
Iteration  12: 44455964.535 ops/s
Iteration  13: 43083526.111 ops/s
Iteration  14: 43042820.149 ops/s
Iteration  15: 44799914.499 ops/s
Iteration  16: 43598323.204 ops/s
Iteration  17: 44992547.749 ops/s
Iteration  18: 42435225.618 ops/s
Iteration  19: 44076982.662 ops/s
Iteration  20: 45783875.337 ops/s
Iteration  21: 43745516.694 ops/s
Iteration  22: 45788388.733 ops/s
Iteration  23: 43842048.670 ops/s
Iteration  24: 44713162.114 ops/s
Iteration  25: 46014662.496 ops/s
Iteration  26: 43621865.594 ops/s
Iteration  27: 44308756.943 ops/s
Iteration  28: 45815223.734 ops/s
Iteration  29: 44449230.915 ops/s
Iteration  30: 44468613.274 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstreamTest._Benchmark.benchmark_upstream":
  44070687.867 ±(99.9%) 753769.050 ops/s [Average]
  (min, avg, max) = (42130369.561, 44070687.867, 46014662.496), stdev = 1128206.115
  CI (99.9%): [43316918.816, 44824456.917] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
AbstractMaybeWithUpstreamTest._Benchmark.benchmark_upstream  thrpt   30  44070687.867 ± 753769.050  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70825.239 ops/s
# Warmup Iteration   2: 371377.121 ops/s
# Warmup Iteration   3: 740313.140 ops/s
# Warmup Iteration   4: 954606.925 ops/s
# Warmup Iteration   5: 1021351.565 ops/s
# Warmup Iteration   6: 968601.919 ops/s
# Warmup Iteration   7: 977864.269 ops/s
# Warmup Iteration   8: 1000741.748 ops/s
# Warmup Iteration   9: 951450.369 ops/s
# Warmup Iteration  10: 995340.183 ops/s
# Warmup Iteration  11: 1001501.119 ops/s
# Warmup Iteration  12: 991267.428 ops/s
# Warmup Iteration  13: 1016710.183 ops/s
# Warmup Iteration  14: 993179.072 ops/s
# Warmup Iteration  15: 995531.381 ops/s
# Warmup Iteration  16: 972317.359 ops/s
# Warmup Iteration  17: 993943.530 ops/s
# Warmup Iteration  18: 997662.223 ops/s
# Warmup Iteration  19: 981357.485 ops/s
# Warmup Iteration  20: 1003524.496 ops/s
# Warmup Iteration  21: 957043.835 ops/s
# Warmup Iteration  22: 957599.023 ops/s
# Warmup Iteration  23: 1003355.183 ops/s
# Warmup Iteration  24: 979332.122 ops/s
# Warmup Iteration  25: 989901.595 ops/s
# Warmup Iteration  26: 938114.524 ops/s
# Warmup Iteration  27: 992026.140 ops/s
# Warmup Iteration  28: 932877.780 ops/s
# Warmup Iteration  29: 978856.942 ops/s
# Warmup Iteration  30: 969644.748 ops/s
Iteration   1: 1022229.508 ops/s
Iteration   2: 973003.293 ops/s
Iteration   3: 996917.459 ops/s
Iteration   4: 946692.950 ops/s
Iteration   5: 990059.797 ops/s
Iteration   6: 1035794.462 ops/s
Iteration   7: 952603.796 ops/s
Iteration   8: 973869.112 ops/s
Iteration   9: 1031153.897 ops/s
Iteration  10: 959206.639 ops/s
Iteration  11: 992945.095 ops/s
Iteration  12: 1005260.041 ops/s
Iteration  13: 948719.833 ops/s
Iteration  14: 1039925.989 ops/s
Iteration  15: 992078.921 ops/s
Iteration  16: 931925.761 ops/s
Iteration  17: 975352.625 ops/s
Iteration  18: 975707.923 ops/s
Iteration  19: 994370.506 ops/s
Iteration  20: 1016588.159 ops/s
Iteration  21: 966520.332 ops/s
Iteration  22: 1002460.067 ops/s
Iteration  23: 945939.166 ops/s
Iteration  24: 1021663.830 ops/s
Iteration  25: 940721.338 ops/s
Iteration  26: 1011910.105 ops/s
Iteration  27: 967310.966 ops/s
Iteration  28: 940670.609 ops/s
Iteration  29: 999541.355 ops/s
Iteration  30: 947562.151 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_dispose":
  983290.190 ±(99.9%) 21002.319 ops/s [Average]
  (min, avg, max) = (931925.761, 983290.190, 1039925.989), stdev = 31435.285
  CI (99.9%): [962287.870, 1004292.509] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_dispose  thrpt   30  983290.190 ± 21002.319  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferBoundaryHint$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferBoundaryHint

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.832 ops/s
# Warmup Iteration   2: 4489.546 ops/s
# Warmup Iteration   3: 27983.528 ops/s
# Warmup Iteration   4: 33212.422 ops/s
# Warmup Iteration   5: 39251.500 ops/s
# Warmup Iteration   6: 41294.193 ops/s
# Warmup Iteration   7: 39011.360 ops/s
# Warmup Iteration   8: 51728.850 ops/s
# Warmup Iteration   9: 78357.990 ops/s
# Warmup Iteration  10: 39306.695 ops/s
# Warmup Iteration  11: 84925.261 ops/s
# Warmup Iteration  12: 115240.922 ops/s
# Warmup Iteration  13: 126268.219 ops/s
# Warmup Iteration  14: 126234.058 ops/s
# Warmup Iteration  15: 104285.328 ops/s
# Warmup Iteration  16: 114309.044 ops/s
# Warmup Iteration  17: 115556.174 ops/s
# Warmup Iteration  18: 101361.154 ops/s
# Warmup Iteration  19: 118850.110 ops/s
# Warmup Iteration  20: 115669.736 ops/s
# Warmup Iteration  21: 108114.414 ops/s
# Warmup Iteration  22: 101810.905 ops/s
# Warmup Iteration  23: 94252.525 ops/s
# Warmup Iteration  24: 109471.877 ops/s
# Warmup Iteration  25: 109655.563 ops/s
# Warmup Iteration  26: 105893.595 ops/s
# Warmup Iteration  27: 110053.173 ops/s
# Warmup Iteration  28: 112710.470 ops/s
# Warmup Iteration  29: 119890.140 ops/s
# Warmup Iteration  30: 118881.702 ops/s
Iteration   1: 122458.501 ops/s
Iteration   2: 112448.425 ops/s
Iteration   3: 123125.179 ops/s
Iteration   4: 121671.069 ops/s
Iteration   5: 123242.514 ops/s
Iteration   6: 114650.313 ops/s
Iteration   7: 126796.292 ops/s
Iteration   8: 128355.160 ops/s
Iteration   9: 127468.363 ops/s
Iteration  10: 104883.158 ops/s
Iteration  11: 124489.592 ops/s
Iteration  12: 107508.633 ops/s
Iteration  13: 120240.331 ops/s
Iteration  14: 109139.036 ops/s
Iteration  15: 105239.823 ops/s
Iteration  16: 113988.679 ops/s
Iteration  17: 109475.792 ops/s
Iteration  18: 109827.063 ops/s
Iteration  19: 104100.130 ops/s
Iteration  20: 122495.866 ops/s
Iteration  21: 119085.941 ops/s
Iteration  22: 110958.005 ops/s
Iteration  23: 121306.865 ops/s
Iteration  24: 116774.105 ops/s
Iteration  25: 111029.663 ops/s
Iteration  26: 108978.248 ops/s
Iteration  27: 125713.244 ops/s
Iteration  28: 123891.513 ops/s
Iteration  29: 119653.239 ops/s
Iteration  30: 116599.074 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferBoundaryHint":
  116853.127 ±(99.9%) 4955.771 ops/s [Average]
  (min, avg, max) = (104100.130, 116853.127, 128355.160), stdev = 7417.565
  CI (99.9%): [111897.356, 121808.898] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferBoundaryHint  thrpt   30  116853.127 ± 4955.771  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70634.825 ops/s
# Warmup Iteration   2: 207865.165 ops/s
# Warmup Iteration   3: 265436.197 ops/s
# Warmup Iteration   4: 257781.759 ops/s
# Warmup Iteration   5: 285035.025 ops/s
# Warmup Iteration   6: 264035.600 ops/s
# Warmup Iteration   7: 277033.945 ops/s
# Warmup Iteration   8: 285803.875 ops/s
# Warmup Iteration   9: 282107.675 ops/s
# Warmup Iteration  10: 280254.724 ops/s
# Warmup Iteration  11: 284524.370 ops/s
# Warmup Iteration  12: 270264.378 ops/s
# Warmup Iteration  13: 285165.043 ops/s
# Warmup Iteration  14: 282370.893 ops/s
# Warmup Iteration  15: 279570.273 ops/s
# Warmup Iteration  16: 278634.384 ops/s
# Warmup Iteration  17: 280063.873 ops/s
# Warmup Iteration  18: 281397.156 ops/s
# Warmup Iteration  19: 275185.278 ops/s
# Warmup Iteration  20: 288835.992 ops/s
# Warmup Iteration  21: 275551.384 ops/s
# Warmup Iteration  22: 282433.824 ops/s
# Warmup Iteration  23: 291627.700 ops/s
# Warmup Iteration  24: 273826.632 ops/s
# Warmup Iteration  25: 274509.895 ops/s
# Warmup Iteration  26: 283804.772 ops/s
# Warmup Iteration  27: 271528.699 ops/s
# Warmup Iteration  28: 277615.980 ops/s
# Warmup Iteration  29: 281581.716 ops/s
# Warmup Iteration  30: 272957.739 ops/s
Iteration   1: 282833.481 ops/s
Iteration   2: 294811.018 ops/s
Iteration   3: 271376.109 ops/s
Iteration   4: 282423.152 ops/s
Iteration   5: 288692.269 ops/s
Iteration   6: 284027.578 ops/s
Iteration   7: 274909.123 ops/s
Iteration   8: 271702.597 ops/s
Iteration   9: 284433.143 ops/s
Iteration  10: 279852.650 ops/s
Iteration  11: 284082.113 ops/s
Iteration  12: 276542.556 ops/s
Iteration  13: 284432.601 ops/s
Iteration  14: 281100.446 ops/s
Iteration  15: 268115.967 ops/s
Iteration  16: 291843.638 ops/s
Iteration  17: 267290.798 ops/s
Iteration  18: 281669.686 ops/s
Iteration  19: 276432.242 ops/s
Iteration  20: 293310.956 ops/s
Iteration  21: 270162.726 ops/s
Iteration  22: 282024.081 ops/s
Iteration  23: 275701.392 ops/s
Iteration  24: 279851.292 ops/s
Iteration  25: 281579.923 ops/s
Iteration  26: 273351.296 ops/s
Iteration  27: 291918.605 ops/s
Iteration  28: 275169.466 ops/s
Iteration  29: 276921.463 ops/s
Iteration  30: 288016.157 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorTime":
  280485.951 ±(99.9%) 4958.217 ops/s [Average]
  (min, avg, max) = (267290.798, 280485.951, 294811.018), stdev = 7421.226
  CI (99.9%): [275527.734, 285444.168] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_replaySelectorTime  thrpt   30  280485.951 ± 4958.217  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDetachTest._Benchmark.benchmark_onError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDetachTest._Benchmark.benchmark_onError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 369914.278 ops/s
# Warmup Iteration   2: 615254.033 ops/s
# Warmup Iteration   3: 665451.171 ops/s
# Warmup Iteration   4: 748486.281 ops/s
# Warmup Iteration   5: 502477.124 ops/s
# Warmup Iteration   6: 702037.568 ops/s
# Warmup Iteration   7: 706910.742 ops/s
# Warmup Iteration   8: 726346.534 ops/s
# Warmup Iteration   9: 717105.427 ops/s
# Warmup Iteration  10: 721365.093 ops/s
# Warmup Iteration  11: 754212.842 ops/s
# Warmup Iteration  12: 707404.669 ops/s
# Warmup Iteration  13: 742180.518 ops/s
# Warmup Iteration  14: 753133.326 ops/s
# Warmup Iteration  15: 723173.221 ops/s
# Warmup Iteration  16: 739850.532 ops/s
# Warmup Iteration  17: 733180.783 ops/s
# Warmup Iteration  18: 788338.253 ops/s
# Warmup Iteration  19: 785701.513 ops/s
# Warmup Iteration  20: 764480.173 ops/s
# Warmup Iteration  21: 797602.749 ops/s
# Warmup Iteration  22: 743215.249 ops/s
# Warmup Iteration  23: 791765.202 ops/s
# Warmup Iteration  24: 757164.835 ops/s
# Warmup Iteration  25: 747948.189 ops/s
# Warmup Iteration  26: 782895.203 ops/s
# Warmup Iteration  27: 800101.095 ops/s
# Warmup Iteration  28: 754442.495 ops/s
# Warmup Iteration  29: 775183.168 ops/s
# Warmup Iteration  30: 766423.111 ops/s
Iteration   1: 763297.043 ops/s
Iteration   2: 812500.131 ops/s
Iteration   3: 747430.256 ops/s
Iteration   4: 781843.796 ops/s
Iteration   5: 761336.778 ops/s
Iteration   6: 769666.530 ops/s
Iteration   7: 751550.292 ops/s
Iteration   8: 765732.962 ops/s
Iteration   9: 790382.453 ops/s
Iteration  10: 754144.385 ops/s
Iteration  11: 782814.855 ops/s
Iteration  12: 763907.524 ops/s
Iteration  13: 768530.377 ops/s
Iteration  14: 764347.425 ops/s
Iteration  15: 743910.599 ops/s
Iteration  16: 801703.138 ops/s
Iteration  17: 800252.023 ops/s
Iteration  18: 745671.193 ops/s
Iteration  19: 749383.112 ops/s
Iteration  20: 797904.580 ops/s
Iteration  21: 763536.591 ops/s
Iteration  22: 804439.593 ops/s
Iteration  23: 764753.429 ops/s
Iteration  24: 777702.412 ops/s
Iteration  25: 782675.378 ops/s
Iteration  26: 766369.656 ops/s
Iteration  27: 779618.471 ops/s
Iteration  28: 766057.555 ops/s
Iteration  29: 794161.639 ops/s
Iteration  30: 764305.211 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDetachTest._Benchmark.benchmark_onError":
  772664.313 ±(99.9%) 12550.455 ops/s [Average]
  (min, avg, max) = (743910.599, 772664.313, 812500.131), stdev = 18784.931
  CI (99.9%): [760113.858, 785214.768] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score       Error  Units
MaybeDetachTest._Benchmark.benchmark_onError  thrpt   30  772664.313 ± 12550.455  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 360654.345 ops/s
# Warmup Iteration   2: 609587.500 ops/s
# Warmup Iteration   3: 675670.008 ops/s
# Warmup Iteration   4: 685362.492 ops/s
# Warmup Iteration   5: 628235.873 ops/s
# Warmup Iteration   6: 709922.287 ops/s
# Warmup Iteration   7: 679554.706 ops/s
# Warmup Iteration   8: 716128.523 ops/s
# Warmup Iteration   9: 718157.107 ops/s
# Warmup Iteration  10: 695972.141 ops/s
# Warmup Iteration  11: 725726.450 ops/s
# Warmup Iteration  12: 701853.469 ops/s
# Warmup Iteration  13: 706952.362 ops/s
# Warmup Iteration  14: 713872.513 ops/s
# Warmup Iteration  15: 711666.164 ops/s
# Warmup Iteration  16: 711901.678 ops/s
# Warmup Iteration  17: 738558.918 ops/s
# Warmup Iteration  18: 741819.445 ops/s
# Warmup Iteration  19: 788287.859 ops/s
# Warmup Iteration  20: 750652.473 ops/s
# Warmup Iteration  21: 735191.333 ops/s
# Warmup Iteration  22: 770205.452 ops/s
# Warmup Iteration  23: 739924.948 ops/s
# Warmup Iteration  24: 751032.641 ops/s
# Warmup Iteration  25: 744532.859 ops/s
# Warmup Iteration  26: 739613.478 ops/s
# Warmup Iteration  27: 776783.093 ops/s
# Warmup Iteration  28: 736363.509 ops/s
# Warmup Iteration  29: 761945.284 ops/s
# Warmup Iteration  30: 747943.449 ops/s
Iteration   1: 756998.634 ops/s
Iteration   2: 770016.401 ops/s
Iteration   3: 734819.452 ops/s
Iteration   4: 780479.522 ops/s
Iteration   5: 744088.706 ops/s
Iteration   6: 752780.322 ops/s
Iteration   7: 760178.095 ops/s
Iteration   8: 788626.171 ops/s
Iteration   9: 774468.849 ops/s
Iteration  10: 732009.735 ops/s
Iteration  11: 784018.887 ops/s
Iteration  12: 749110.795 ops/s
Iteration  13: 748638.422 ops/s
Iteration  14: 748761.972 ops/s
Iteration  15: 747780.533 ops/s
Iteration  16: 747731.110 ops/s
Iteration  17: 766326.147 ops/s
Iteration  18: 737001.660 ops/s
Iteration  19: 775883.694 ops/s
Iteration  20: 742427.309 ops/s
Iteration  21: 774029.958 ops/s
Iteration  22: 736380.576 ops/s
Iteration  23: 780385.753 ops/s
Iteration  24: 741174.634 ops/s
Iteration  25: 771808.870 ops/s
Iteration  26: 733748.720 ops/s
Iteration  27: 749235.090 ops/s
Iteration  28: 761039.637 ops/s
Iteration  29: 737597.135 ops/s
Iteration  30: 748293.967 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_error":
  755861.359 ±(99.9%) 11273.195 ops/s [Average]
  (min, avg, max) = (732009.735, 755861.359, 788626.171), stdev = 16873.189
  CI (99.9%): [744588.163, 767134.554] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
MaybeDematerializeTest._Benchmark.benchmark_error  thrpt   30  755861.359 ± 11273.195  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 135526.590 ops/s
# Warmup Iteration   2: 590602.219 ops/s
# Warmup Iteration   3: 677721.077 ops/s
# Warmup Iteration   4: 683376.538 ops/s
# Warmup Iteration   5: 732924.659 ops/s
# Warmup Iteration   6: 671422.551 ops/s
# Warmup Iteration   7: 724414.020 ops/s
# Warmup Iteration   8: 724177.650 ops/s
# Warmup Iteration   9: 687523.637 ops/s
# Warmup Iteration  10: 707042.603 ops/s
# Warmup Iteration  11: 666868.450 ops/s
# Warmup Iteration  12: 742258.480 ops/s
# Warmup Iteration  13: 698957.992 ops/s
# Warmup Iteration  14: 715578.468 ops/s
# Warmup Iteration  15: 706734.528 ops/s
# Warmup Iteration  16: 715710.716 ops/s
# Warmup Iteration  17: 769273.114 ops/s
# Warmup Iteration  18: 706766.530 ops/s
# Warmup Iteration  19: 750577.256 ops/s
# Warmup Iteration  20: 677845.307 ops/s
# Warmup Iteration  21: 779590.653 ops/s
# Warmup Iteration  22: 752555.217 ops/s
# Warmup Iteration  23: 745588.358 ops/s
# Warmup Iteration  24: 770521.856 ops/s
# Warmup Iteration  25: 760116.858 ops/s
# Warmup Iteration  26: 759520.943 ops/s
# Warmup Iteration  27: 724383.382 ops/s
# Warmup Iteration  28: 750337.765 ops/s
# Warmup Iteration  29: 755804.200 ops/s
# Warmup Iteration  30: 744077.971 ops/s
Iteration   1: 776793.354 ops/s
Iteration   2: 722722.214 ops/s
Iteration   3: 750846.021 ops/s
Iteration   4: 774064.095 ops/s
Iteration   5: 759184.675 ops/s
Iteration   6: 738674.962 ops/s
Iteration   7: 759525.370 ops/s
Iteration   8: 699778.602 ops/s
Iteration   9: 751657.245 ops/s
Iteration  10: 791768.073 ops/s
Iteration  11: 739781.057 ops/s
Iteration  12: 765465.183 ops/s
Iteration  13: 748092.628 ops/s
Iteration  14: 753147.513 ops/s
Iteration  15: 759580.425 ops/s
Iteration  16: 758694.646 ops/s
Iteration  17: 741291.596 ops/s
Iteration  18: 775863.127 ops/s
Iteration  19: 721997.712 ops/s
Iteration  20: 762225.407 ops/s
Iteration  21: 746393.825 ops/s
Iteration  22: 762933.782 ops/s
Iteration  23: 747921.717 ops/s
Iteration  24: 725359.681 ops/s
Iteration  25: 779244.285 ops/s
Iteration  26: 744238.497 ops/s
Iteration  27: 782692.454 ops/s
Iteration  28: 722227.191 ops/s
Iteration  29: 744190.119 ops/s
Iteration  30: 784882.225 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalError":
  753041.256 ±(99.9%) 14313.740 ops/s [Average]
  (min, avg, max) = (699778.602, 753041.256, 791768.073), stdev = 21424.134
  CI (99.9%): [738727.516, 767354.996] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
MaybeDoFinallyTest._Benchmark.benchmark_normalError  thrpt   30  753041.256 ± 14313.740  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorNextIsAlsoError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorNextIsAlsoError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 119525.294 ops/s
# Warmup Iteration   2: 316620.939 ops/s
# Warmup Iteration   3: 343316.313 ops/s
# Warmup Iteration   4: 332780.840 ops/s
# Warmup Iteration   5: 354226.350 ops/s
# Warmup Iteration   6: 309398.326 ops/s
# Warmup Iteration   7: 357954.158 ops/s
# Warmup Iteration   8: 377660.084 ops/s
# Warmup Iteration   9: 374376.528 ops/s
# Warmup Iteration  10: 352871.986 ops/s
# Warmup Iteration  11: 366997.512 ops/s
# Warmup Iteration  12: 368807.524 ops/s
# Warmup Iteration  13: 355162.483 ops/s
# Warmup Iteration  14: 354034.025 ops/s
# Warmup Iteration  15: 379512.059 ops/s
# Warmup Iteration  16: 350683.264 ops/s
# Warmup Iteration  17: 399091.115 ops/s
# Warmup Iteration  18: 386782.661 ops/s
# Warmup Iteration  19: 376862.411 ops/s
# Warmup Iteration  20: 394142.148 ops/s
# Warmup Iteration  21: 378140.674 ops/s
# Warmup Iteration  22: 390481.696 ops/s
# Warmup Iteration  23: 374130.764 ops/s
# Warmup Iteration  24: 380206.483 ops/s
# Warmup Iteration  25: 375872.141 ops/s
# Warmup Iteration  26: 380723.186 ops/s
# Warmup Iteration  27: 383396.015 ops/s
# Warmup Iteration  28: 376504.957 ops/s
# Warmup Iteration  29: 395914.791 ops/s
# Warmup Iteration  30: 365932.481 ops/s
Iteration   1: 390263.264 ops/s
Iteration   2: 363272.784 ops/s
Iteration   3: 383328.435 ops/s
Iteration   4: 385166.918 ops/s
Iteration   5: 373223.559 ops/s
Iteration   6: 355255.374 ops/s
Iteration   7: 391801.806 ops/s
Iteration   8: 371766.985 ops/s
Iteration   9: 391434.771 ops/s
Iteration  10: 369218.251 ops/s
Iteration  11: 385021.171 ops/s
Iteration  12: 398809.771 ops/s
Iteration  13: 380383.500 ops/s
Iteration  14: 383657.339 ops/s
Iteration  15: 392853.163 ops/s
Iteration  16: 374189.144 ops/s
Iteration  17: 389256.556 ops/s
Iteration  18: 371408.518 ops/s
Iteration  19: 387398.689 ops/s
Iteration  20: 386780.578 ops/s
Iteration  21: 389161.303 ops/s
Iteration  22: 370444.932 ops/s
Iteration  23: 391696.373 ops/s
Iteration  24: 392576.115 ops/s
Iteration  25: 374183.502 ops/s
Iteration  26: 382025.147 ops/s
Iteration  27: 279754.592 ops/s
Iteration  28: 387191.886 ops/s
Iteration  29: 377218.674 ops/s
Iteration  30: 396726.543 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorNextIsAlsoError":
  378848.988 ±(99.9%) 14277.598 ops/s [Average]
  (min, avg, max) = (279754.592, 378848.988, 398809.771), stdev = 21370.038
  CI (99.9%): [364571.390, 393126.586] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorNextIsAlsoError  thrpt   30  378848.988 ± 14277.598  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_errorConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_errorConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 279322.630 ops/s
# Warmup Iteration   2: 599146.621 ops/s
# Warmup Iteration   3: 649062.499 ops/s
# Warmup Iteration   4: 680919.635 ops/s
# Warmup Iteration   5: 599229.635 ops/s
# Warmup Iteration   6: 694884.200 ops/s
# Warmup Iteration   7: 695671.405 ops/s
# Warmup Iteration   8: 711666.655 ops/s
# Warmup Iteration   9: 677646.011 ops/s
# Warmup Iteration  10: 735669.508 ops/s
# Warmup Iteration  11: 703068.802 ops/s
# Warmup Iteration  12: 679228.102 ops/s
# Warmup Iteration  13: 722850.803 ops/s
# Warmup Iteration  14: 689798.547 ops/s
# Warmup Iteration  15: 693156.138 ops/s
# Warmup Iteration  16: 720748.714 ops/s
# Warmup Iteration  17: 734780.676 ops/s
# Warmup Iteration  18: 774824.131 ops/s
# Warmup Iteration  19: 713944.941 ops/s
# Warmup Iteration  20: 754149.852 ops/s
# Warmup Iteration  21: 758031.475 ops/s
# Warmup Iteration  22: 744682.865 ops/s
# Warmup Iteration  23: 747643.518 ops/s
# Warmup Iteration  24: 713090.099 ops/s
# Warmup Iteration  25: 743245.491 ops/s
# Warmup Iteration  26: 733554.555 ops/s
# Warmup Iteration  27: 730174.645 ops/s
# Warmup Iteration  28: 749899.223 ops/s
# Warmup Iteration  29: 731080.763 ops/s
# Warmup Iteration  30: 780715.689 ops/s
Iteration   1: 762469.780 ops/s
Iteration   2: 725507.439 ops/s
Iteration   3: 757220.182 ops/s
Iteration   4: 726102.537 ops/s
Iteration   5: 732038.490 ops/s
Iteration   6: 762787.995 ops/s
Iteration   7: 735745.358 ops/s
Iteration   8: 745458.819 ops/s
Iteration   9: 733637.141 ops/s
Iteration  10: 758226.018 ops/s
Iteration  11: 729314.636 ops/s
Iteration  12: 731479.531 ops/s
Iteration  13: 759345.211 ops/s
Iteration  14: 737133.182 ops/s
Iteration  15: 757511.560 ops/s
Iteration  16: 743234.664 ops/s
Iteration  17: 735133.381 ops/s
Iteration  18: 749207.359 ops/s
Iteration  19: 715867.162 ops/s
Iteration  20: 745113.118 ops/s
Iteration  21: 746434.372 ops/s
Iteration  22: 752624.582 ops/s
Iteration  23: 761689.557 ops/s
Iteration  24: 718508.607 ops/s
Iteration  25: 751805.676 ops/s
Iteration  26: 764956.812 ops/s
Iteration  27: 725839.728 ops/s
Iteration  28: 730964.696 ops/s
Iteration  29: 763166.927 ops/s
Iteration  30: 711470.208 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_errorConditional":
  742333.157 ±(99.9%) 10509.750 ops/s [Average]
  (min, avg, max) = (711470.208, 742333.157, 764956.812), stdev = 15730.500
  CI (99.9%): [731823.408, 752842.907] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
MaybeDoAfterSuccessTest._Benchmark.benchmark_errorConditional  thrpt   30  742333.157 ± 10509.750  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompletePredicateThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompletePredicateThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42613.558 ops/s
# Warmup Iteration   2: 180576.479 ops/s
# Warmup Iteration   3: 179208.456 ops/s
# Warmup Iteration   4: 168030.441 ops/s
# Warmup Iteration   5: 201641.709 ops/s
# Warmup Iteration   6: 187897.074 ops/s
# Warmup Iteration   7: 190023.934 ops/s
# Warmup Iteration   8: 211386.977 ops/s
# Warmup Iteration   9: 195605.437 ops/s
# Warmup Iteration  10: 207314.699 ops/s
# Warmup Iteration  11: 200817.757 ops/s
# Warmup Iteration  12: 197530.414 ops/s
# Warmup Iteration  13: 208517.916 ops/s
# Warmup Iteration  14: 196391.902 ops/s
# Warmup Iteration  15: 203645.514 ops/s
# Warmup Iteration  16: 205095.076 ops/s
# Warmup Iteration  17: 211855.266 ops/s
# Warmup Iteration  18: 215091.440 ops/s
# Warmup Iteration  19: 208879.992 ops/s
# Warmup Iteration  20: 209691.002 ops/s
# Warmup Iteration  21: 214739.786 ops/s
# Warmup Iteration  22: 214252.231 ops/s
# Warmup Iteration  23: 203836.887 ops/s
# Warmup Iteration  24: 210968.114 ops/s
# Warmup Iteration  25: 216232.439 ops/s
# Warmup Iteration  26: 206120.631 ops/s
# Warmup Iteration  27: 208100.955 ops/s
# Warmup Iteration  28: 218168.602 ops/s
# Warmup Iteration  29: 202110.375 ops/s
# Warmup Iteration  30: 216005.132 ops/s
Iteration   1: 217458.803 ops/s
Iteration   2: 210241.674 ops/s
Iteration   3: 210782.516 ops/s
Iteration   4: 212594.383 ops/s
Iteration   5: 209775.448 ops/s
Iteration   6: 215503.955 ops/s
Iteration   7: 204393.836 ops/s
Iteration   8: 217163.300 ops/s
Iteration   9: 206873.390 ops/s
Iteration  10: 214546.309 ops/s
Iteration  11: 204720.996 ops/s
Iteration  12: 206679.478 ops/s
Iteration  13: 213721.126 ops/s
Iteration  14: 208729.695 ops/s
Iteration  15: 207655.252 ops/s
Iteration  16: 217153.453 ops/s
Iteration  17: 208614.718 ops/s
Iteration  18: 215582.155 ops/s
Iteration  19: 211954.273 ops/s
Iteration  20: 218191.974 ops/s
Iteration  21: 208057.585 ops/s
Iteration  22: 166027.014 ops/s
Iteration  23: 214624.055 ops/s
Iteration  24: 202419.490 ops/s
Iteration  25: 214590.253 ops/s
Iteration  26: 205812.324 ops/s
Iteration  27: 212889.574 ops/s
Iteration  28: 211799.691 ops/s
Iteration  29: 199393.100 ops/s
Iteration  30: 215331.201 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompletePredicateThrows":
  209442.701 ±(99.9%) 6349.976 ops/s [Average]
  (min, avg, max) = (166027.014, 209442.701, 218191.974), stdev = 9504.346
  CI (99.9%): [203092.724, 215792.677] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompletePredicateThrows  thrpt   30  209442.701 ± 6349.976  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_iteratorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_iteratorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 258984.237 ops/s
# Warmup Iteration   2: 487916.550 ops/s
# Warmup Iteration   3: 620281.065 ops/s
# Warmup Iteration   4: 588265.650 ops/s
# Warmup Iteration   5: 537226.934 ops/s
# Warmup Iteration   6: 627269.374 ops/s
# Warmup Iteration   7: 647347.292 ops/s
# Warmup Iteration   8: 622360.863 ops/s
# Warmup Iteration   9: 643717.585 ops/s
# Warmup Iteration  10: 631760.681 ops/s
# Warmup Iteration  11: 626104.131 ops/s
# Warmup Iteration  12: 653586.051 ops/s
# Warmup Iteration  13: 618955.585 ops/s
# Warmup Iteration  14: 645634.004 ops/s
# Warmup Iteration  15: 622656.367 ops/s
# Warmup Iteration  16: 653881.098 ops/s
# Warmup Iteration  17: 683908.013 ops/s
# Warmup Iteration  18: 644478.962 ops/s
# Warmup Iteration  19: 677702.654 ops/s
# Warmup Iteration  20: 645661.045 ops/s
# Warmup Iteration  21: 673188.861 ops/s
# Warmup Iteration  22: 659398.128 ops/s
# Warmup Iteration  23: 667687.479 ops/s
# Warmup Iteration  24: 644374.924 ops/s
# Warmup Iteration  25: 678250.803 ops/s
# Warmup Iteration  26: 626507.055 ops/s
# Warmup Iteration  27: 664169.366 ops/s
# Warmup Iteration  28: 640719.247 ops/s
# Warmup Iteration  29: 691511.618 ops/s
# Warmup Iteration  30: 678961.588 ops/s
Iteration   1: 656440.325 ops/s
Iteration   2: 667133.227 ops/s
Iteration   3: 665224.484 ops/s
Iteration   4: 656936.762 ops/s
Iteration   5: 683298.163 ops/s
Iteration   6: 628631.565 ops/s
Iteration   7: 673496.887 ops/s
Iteration   8: 646150.411 ops/s
Iteration   9: 660813.369 ops/s
Iteration  10: 699902.146 ops/s
Iteration  11: 641135.989 ops/s
Iteration  12: 685604.228 ops/s
Iteration  13: 663613.120 ops/s
Iteration  14: 639661.300 ops/s
Iteration  15: 668593.576 ops/s
Iteration  16: 652008.733 ops/s
Iteration  17: 690230.302 ops/s
Iteration  18: 642842.135 ops/s
Iteration  19: 671585.200 ops/s
Iteration  20: 679053.588 ops/s
Iteration  21: 661062.927 ops/s
Iteration  22: 680115.749 ops/s
Iteration  23: 637933.909 ops/s
Iteration  24: 672878.038 ops/s
Iteration  25: 685959.946 ops/s
Iteration  26: 649345.316 ops/s
Iteration  27: 682785.730 ops/s
Iteration  28: 645156.846 ops/s
Iteration  29: 680086.526 ops/s
Iteration  30: 668080.637 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_iteratorThrows":
  664525.371 ±(99.9%) 11974.138 ops/s [Average]
  (min, avg, max) = (628631.565, 664525.371, 699902.146), stdev = 17922.328
  CI (99.9%): [652551.233, 676499.509] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
MaybeZipIterableTest._Benchmark.benchmark_iteratorThrows  thrpt   30  664525.371 ± 11974.138  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_errorEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_errorEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 249430.303 ops/s
# Warmup Iteration   2: 531460.780 ops/s
# Warmup Iteration   3: 640601.884 ops/s
# Warmup Iteration   4: 635801.686 ops/s
# Warmup Iteration   5: 665690.357 ops/s
# Warmup Iteration   6: 648185.971 ops/s
# Warmup Iteration   7: 627440.147 ops/s
# Warmup Iteration   8: 638185.246 ops/s
# Warmup Iteration   9: 660426.571 ops/s
# Warmup Iteration  10: 580197.884 ops/s
# Warmup Iteration  11: 623059.094 ops/s
# Warmup Iteration  12: 656598.888 ops/s
# Warmup Iteration  13: 647408.033 ops/s
# Warmup Iteration  14: 639811.000 ops/s
# Warmup Iteration  15: 644133.961 ops/s
# Warmup Iteration  16: 629695.613 ops/s
# Warmup Iteration  17: 705885.693 ops/s
# Warmup Iteration  18: 668002.750 ops/s
# Warmup Iteration  19: 698714.418 ops/s
# Warmup Iteration  20: 671936.603 ops/s
# Warmup Iteration  21: 682303.271 ops/s
# Warmup Iteration  22: 666515.872 ops/s
# Warmup Iteration  23: 706406.491 ops/s
# Warmup Iteration  24: 667873.277 ops/s
# Warmup Iteration  25: 661848.485 ops/s
# Warmup Iteration  26: 671257.951 ops/s
# Warmup Iteration  27: 714774.894 ops/s
# Warmup Iteration  28: 664806.024 ops/s
# Warmup Iteration  29: 666277.295 ops/s
# Warmup Iteration  30: 704832.351 ops/s
Iteration   1: 662157.136 ops/s
Iteration   2: 698339.745 ops/s
Iteration   3: 667958.131 ops/s
Iteration   4: 690495.489 ops/s
Iteration   5: 701274.736 ops/s
Iteration   6: 655718.374 ops/s
Iteration   7: 699523.559 ops/s
Iteration   8: 693179.713 ops/s
Iteration   9: 670930.889 ops/s
Iteration  10: 705264.893 ops/s
Iteration  11: 674445.432 ops/s
Iteration  12: 689272.504 ops/s
Iteration  13: 692858.428 ops/s
Iteration  14: 655093.191 ops/s
Iteration  15: 682613.383 ops/s
Iteration  16: 698428.832 ops/s
Iteration  17: 538290.825 ops/s
Iteration  18: 686634.293 ops/s
Iteration  19: 666350.959 ops/s
Iteration  20: 674486.700 ops/s
Iteration  21: 715456.772 ops/s
Iteration  22: 661046.751 ops/s
Iteration  23: 691901.851 ops/s
Iteration  24: 676625.815 ops/s
Iteration  25: 685389.439 ops/s
Iteration  26: 690393.843 ops/s
Iteration  27: 684863.524 ops/s
Iteration  28: 657279.442 ops/s
Iteration  29: 707889.620 ops/s
Iteration  30: 674566.746 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_errorEager":
  678291.034 ±(99.9%) 20754.497 ops/s [Average]
  (min, avg, max) = (538290.825, 678291.034, 715456.772), stdev = 31064.356
  CI (99.9%): [657536.537, 699045.531] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
MaybeUsingTest._Benchmark.benchmark_errorEager  thrpt   30  678291.034 ± 20754.497  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_doOnErrorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_doOnErrorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44394.504 ops/s
# Warmup Iteration   2: 173972.782 ops/s
# Warmup Iteration   3: 196348.056 ops/s
# Warmup Iteration   4: 180308.697 ops/s
# Warmup Iteration   5: 207681.782 ops/s
# Warmup Iteration   6: 193881.527 ops/s
# Warmup Iteration   7: 201788.805 ops/s
# Warmup Iteration   8: 196664.734 ops/s
# Warmup Iteration   9: 197885.098 ops/s
# Warmup Iteration  10: 202992.220 ops/s
# Warmup Iteration  11: 203236.988 ops/s
# Warmup Iteration  12: 197289.886 ops/s
# Warmup Iteration  13: 203154.118 ops/s
# Warmup Iteration  14: 202817.696 ops/s
# Warmup Iteration  15: 199076.466 ops/s
# Warmup Iteration  16: 202603.205 ops/s
# Warmup Iteration  17: 204043.553 ops/s
# Warmup Iteration  18: 214948.877 ops/s
# Warmup Iteration  19: 216623.607 ops/s
# Warmup Iteration  20: 202318.884 ops/s
# Warmup Iteration  21: 214172.917 ops/s
# Warmup Iteration  22: 206974.312 ops/s
# Warmup Iteration  23: 207968.453 ops/s
# Warmup Iteration  24: 209241.544 ops/s
# Warmup Iteration  25: 211254.689 ops/s
# Warmup Iteration  26: 201898.371 ops/s
# Warmup Iteration  27: 215165.543 ops/s
# Warmup Iteration  28: 203277.623 ops/s
# Warmup Iteration  29: 212099.798 ops/s
# Warmup Iteration  30: 204580.989 ops/s
Iteration   1: 211581.756 ops/s
Iteration   2: 212182.854 ops/s
Iteration   3: 203821.398 ops/s
Iteration   4: 219092.764 ops/s
Iteration   5: 214492.601 ops/s
Iteration   6: 201505.344 ops/s
Iteration   7: 213610.833 ops/s
Iteration   8: 211392.903 ops/s
Iteration   9: 204413.092 ops/s
Iteration  10: 214044.457 ops/s
Iteration  11: 204082.726 ops/s
Iteration  12: 214892.228 ops/s
Iteration  13: 205700.650 ops/s
Iteration  14: 213083.415 ops/s
Iteration  15: 205616.234 ops/s
Iteration  16: 215098.916 ops/s
Iteration  17: 200044.890 ops/s
Iteration  18: 213795.854 ops/s
Iteration  19: 203899.538 ops/s
Iteration  20: 215136.436 ops/s
Iteration  21: 214469.937 ops/s
Iteration  22: 191662.015 ops/s
Iteration  23: 205392.099 ops/s
Iteration  24: 207130.725 ops/s
Iteration  25: 211249.865 ops/s
Iteration  26: 214506.376 ops/s
Iteration  27: 201829.327 ops/s
Iteration  28: 210856.484 ops/s
Iteration  29: 204050.563 ops/s
Iteration  30: 203981.017 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_doOnErrorThrows":
  208753.910 ±(99.9%) 4100.569 ops/s [Average]
  (min, avg, max) = (191662.015, 208753.910, 219092.764), stdev = 6137.539
  CI (99.9%): [204653.341, 212854.479] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
MaybePeekTest._Benchmark.benchmark_doOnErrorThrows  thrpt   30  208753.910 ± 4100.569  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorNextDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorNextDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 97692.531 ops/s
# Warmup Iteration   2: 413394.026 ops/s
# Warmup Iteration   3: 497402.541 ops/s
# Warmup Iteration   4: 455191.983 ops/s
# Warmup Iteration   5: 524216.652 ops/s
# Warmup Iteration   6: 457255.400 ops/s
# Warmup Iteration   7: 524024.961 ops/s
# Warmup Iteration   8: 519578.363 ops/s
# Warmup Iteration   9: 509454.655 ops/s
# Warmup Iteration  10: 534306.399 ops/s
# Warmup Iteration  11: 491020.149 ops/s
# Warmup Iteration  12: 520154.904 ops/s
# Warmup Iteration  13: 523173.387 ops/s
# Warmup Iteration  14: 514555.006 ops/s
# Warmup Iteration  15: 522811.133 ops/s
# Warmup Iteration  16: 528079.858 ops/s
# Warmup Iteration  17: 541764.016 ops/s
# Warmup Iteration  18: 541946.979 ops/s
# Warmup Iteration  19: 552639.719 ops/s
# Warmup Iteration  20: 530257.517 ops/s
# Warmup Iteration  21: 543700.527 ops/s
# Warmup Iteration  22: 533810.114 ops/s
# Warmup Iteration  23: 559125.555 ops/s
# Warmup Iteration  24: 556577.133 ops/s
# Warmup Iteration  25: 529679.401 ops/s
# Warmup Iteration  26: 560593.663 ops/s
# Warmup Iteration  27: 526052.732 ops/s
# Warmup Iteration  28: 548405.316 ops/s
# Warmup Iteration  29: 562127.434 ops/s
# Warmup Iteration  30: 514122.960 ops/s
Iteration   1: 557770.649 ops/s
Iteration   2: 561979.748 ops/s
Iteration   3: 526756.768 ops/s
Iteration   4: 548743.470 ops/s
Iteration   5: 555187.137 ops/s
Iteration   6: 529885.922 ops/s
Iteration   7: 561350.835 ops/s
Iteration   8: 541878.716 ops/s
Iteration   9: 549956.441 ops/s
Iteration  10: 554916.508 ops/s
Iteration  11: 524602.506 ops/s
Iteration  12: 459310.071 ops/s
Iteration  13: 550652.308 ops/s
Iteration  14: 543484.994 ops/s
Iteration  15: 538371.069 ops/s
Iteration  16: 544341.166 ops/s
Iteration  17: 551242.148 ops/s
Iteration  18: 530297.601 ops/s
Iteration  19: 559953.709 ops/s
Iteration  20: 556173.531 ops/s
Iteration  21: 525834.710 ops/s
Iteration  22: 568645.144 ops/s
Iteration  23: 538837.562 ops/s
Iteration  24: 540389.571 ops/s
Iteration  25: 541881.465 ops/s
Iteration  26: 548026.836 ops/s
Iteration  27: 557316.198 ops/s
Iteration  28: 537374.310 ops/s
Iteration  29: 557908.187 ops/s
Iteration  30: 540448.775 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorNextDoubleOnSubscribe":
  543450.602 ±(99.9%) 13189.005 ops/s [Average]
  (min, avg, max) = (459310.071, 543450.602, 568645.144), stdev = 19740.684
  CI (99.9%): [530261.596, 556639.607] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorNextDoubleOnSubscribe  thrpt   30  543450.602 ± 13189.005  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeZero$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeZero

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10397366.920 ops/s
# Warmup Iteration   2: 18453339.944 ops/s
# Warmup Iteration   3: 25175219.774 ops/s
# Warmup Iteration   4: 24902099.046 ops/s
# Warmup Iteration   5: 25452585.311 ops/s
# Warmup Iteration   6: 24217307.526 ops/s
# Warmup Iteration   7: 25696174.468 ops/s
# Warmup Iteration   8: 25626938.510 ops/s
# Warmup Iteration   9: 24858447.672 ops/s
# Warmup Iteration  10: 25179965.604 ops/s
# Warmup Iteration  11: 24627184.649 ops/s
# Warmup Iteration  12: 24375552.093 ops/s
# Warmup Iteration  13: 25205615.228 ops/s
# Warmup Iteration  14: 24551332.959 ops/s
# Warmup Iteration  15: 25125559.405 ops/s
# Warmup Iteration  16: 25595710.753 ops/s
# Warmup Iteration  17: 24887240.402 ops/s
# Warmup Iteration  18: 25064810.620 ops/s
# Warmup Iteration  19: 25787283.126 ops/s
# Warmup Iteration  20: 23891867.138 ops/s
# Warmup Iteration  21: 25722791.966 ops/s
# Warmup Iteration  22: 24379520.876 ops/s
# Warmup Iteration  23: 25475188.297 ops/s
# Warmup Iteration  24: 25053387.956 ops/s
# Warmup Iteration  25: 25223487.032 ops/s
# Warmup Iteration  26: 25859892.760 ops/s
# Warmup Iteration  27: 23751714.355 ops/s
# Warmup Iteration  28: 24548486.041 ops/s
# Warmup Iteration  29: 26050139.827 ops/s
# Warmup Iteration  30: 24499979.180 ops/s
Iteration   1: 25404114.707 ops/s
Iteration   2: 24909541.001 ops/s
Iteration   3: 25388093.989 ops/s
Iteration   4: 24907563.498 ops/s
Iteration   5: 24649651.443 ops/s
Iteration   6: 25598800.749 ops/s
Iteration   7: 25452717.423 ops/s
Iteration   8: 24034580.448 ops/s
Iteration   9: 24920650.609 ops/s
Iteration  10: 26174699.200 ops/s
Iteration  11: 24328428.456 ops/s
Iteration  12: 25130571.340 ops/s
Iteration  13: 25723709.229 ops/s
Iteration  14: 24258940.166 ops/s
Iteration  15: 25513528.669 ops/s
Iteration  16: 24554486.930 ops/s
Iteration  17: 24869572.760 ops/s
Iteration  18: 25825729.068 ops/s
Iteration  19: 24585524.697 ops/s
Iteration  20: 25229714.010 ops/s
Iteration  21: 25099116.101 ops/s
Iteration  22: 25299282.794 ops/s
Iteration  23: 25258492.031 ops/s
Iteration  24: 24500430.409 ops/s
Iteration  25: 24654720.376 ops/s
Iteration  26: 25091215.324 ops/s
Iteration  27: 25385789.734 ops/s
Iteration  28: 26502915.062 ops/s
Iteration  29: 24378706.166 ops/s
Iteration  30: 24252235.607 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeZero":
  25062784.067 ±(99.9%) 393104.381 ops/s [Average]
  (min, avg, max) = (24034580.448, 25062784.067, 26502915.062), stdev = 588380.176
  CI (99.9%): [24669679.685, 25455888.448] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score        Error  Units
MaybeTest._Benchmark.benchmark_subscribeZero  thrpt   30  25062784.067 ± 393104.381  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_errorDisposerCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_errorDisposerCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35500.156 ops/s
# Warmup Iteration   2: 154768.154 ops/s
# Warmup Iteration   3: 175188.240 ops/s
# Warmup Iteration   4: 186210.405 ops/s
# Warmup Iteration   5: 193013.514 ops/s
# Warmup Iteration   6: 189311.871 ops/s
# Warmup Iteration   7: 187153.819 ops/s
# Warmup Iteration   8: 195904.727 ops/s
# Warmup Iteration   9: 184434.093 ops/s
# Warmup Iteration  10: 192948.649 ops/s
# Warmup Iteration  11: 193482.721 ops/s
# Warmup Iteration  12: 185303.182 ops/s
# Warmup Iteration  13: 191340.296 ops/s
# Warmup Iteration  14: 184444.650 ops/s
# Warmup Iteration  15: 192376.266 ops/s
# Warmup Iteration  16: 189255.686 ops/s
# Warmup Iteration  17: 198225.430 ops/s
# Warmup Iteration  18: 197792.090 ops/s
# Warmup Iteration  19: 203626.265 ops/s
# Warmup Iteration  20: 195649.180 ops/s
# Warmup Iteration  21: 202171.560 ops/s
# Warmup Iteration  22: 193213.647 ops/s
# Warmup Iteration  23: 194937.799 ops/s
# Warmup Iteration  24: 198939.868 ops/s
# Warmup Iteration  25: 199943.596 ops/s
# Warmup Iteration  26: 196401.325 ops/s
# Warmup Iteration  27: 189745.670 ops/s
# Warmup Iteration  28: 184482.431 ops/s
# Warmup Iteration  29: 202194.310 ops/s
# Warmup Iteration  30: 197398.292 ops/s
Iteration   1: 193942.289 ops/s
Iteration   2: 188514.555 ops/s
Iteration   3: 208140.457 ops/s
Iteration   4: 195264.263 ops/s
Iteration   5: 196139.612 ops/s
Iteration   6: 167836.451 ops/s
Iteration   7: 199925.240 ops/s
Iteration   8: 201446.140 ops/s
Iteration   9: 201624.503 ops/s
Iteration  10: 197822.782 ops/s
Iteration  11: 205056.447 ops/s
Iteration  12: 195299.125 ops/s
Iteration  13: 202271.812 ops/s
Iteration  14: 207286.719 ops/s
Iteration  15: 195496.547 ops/s
Iteration  16: 206850.398 ops/s
Iteration  17: 190766.111 ops/s
Iteration  18: 193089.807 ops/s
Iteration  19: 204343.158 ops/s
Iteration  20: 194066.194 ops/s
Iteration  21: 202897.053 ops/s
Iteration  22: 202708.175 ops/s
Iteration  23: 198804.372 ops/s
Iteration  24: 196683.773 ops/s
Iteration  25: 199422.790 ops/s
Iteration  26: 204059.907 ops/s
Iteration  27: 198784.708 ops/s
Iteration  28: 202572.988 ops/s
Iteration  29: 197066.540 ops/s
Iteration  30: 200672.628 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_errorDisposerCrash":
  198295.185 ±(99.9%) 5041.596 ops/s [Average]
  (min, avg, max) = (167836.451, 198295.185, 208140.457), stdev = 7546.025
  CI (99.9%): [193253.588, 203336.781] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
MaybeUsingTest._Benchmark.benchmark_errorDisposerCrash  thrpt   30  198295.185 ± 5041.596  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_noArgError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_noArgError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93182.284 ops/s
# Warmup Iteration   2: 224323.044 ops/s
# Warmup Iteration   3: 232647.732 ops/s
# Warmup Iteration   4: 250990.285 ops/s
# Warmup Iteration   5: 265018.600 ops/s
# Warmup Iteration   6: 256754.744 ops/s
# Warmup Iteration   7: 268628.786 ops/s
# Warmup Iteration   8: 266493.782 ops/s
# Warmup Iteration   9: 262524.369 ops/s
# Warmup Iteration  10: 253152.183 ops/s
# Warmup Iteration  11: 263863.389 ops/s
# Warmup Iteration  12: 247423.452 ops/s
# Warmup Iteration  13: 246663.587 ops/s
# Warmup Iteration  14: 265241.139 ops/s
# Warmup Iteration  15: 267754.240 ops/s
# Warmup Iteration  16: 255987.690 ops/s
# Warmup Iteration  17: 268274.212 ops/s
# Warmup Iteration  18: 276082.423 ops/s
# Warmup Iteration  19: 280975.872 ops/s
# Warmup Iteration  20: 264233.202 ops/s
# Warmup Iteration  21: 278377.272 ops/s
# Warmup Iteration  22: 277098.584 ops/s
# Warmup Iteration  23: 269451.484 ops/s
# Warmup Iteration  24: 273035.024 ops/s
# Warmup Iteration  25: 270947.372 ops/s
# Warmup Iteration  26: 272682.376 ops/s
# Warmup Iteration  27: 280222.224 ops/s
# Warmup Iteration  28: 271467.589 ops/s
# Warmup Iteration  29: 268685.842 ops/s
# Warmup Iteration  30: 284661.347 ops/s
Iteration   1: 274992.375 ops/s
Iteration   2: 259525.277 ops/s
Iteration   3: 276785.466 ops/s
Iteration   4: 266990.783 ops/s
Iteration   5: 272697.565 ops/s
Iteration   6: 271395.148 ops/s
Iteration   7: 266334.461 ops/s
Iteration   8: 283271.433 ops/s
Iteration   9: 266168.511 ops/s
Iteration  10: 271335.759 ops/s
Iteration  11: 281258.138 ops/s
Iteration  12: 263979.799 ops/s
Iteration  13: 280210.145 ops/s
Iteration  14: 271574.374 ops/s
Iteration  15: 262827.808 ops/s
Iteration  16: 281619.797 ops/s
Iteration  17: 265582.583 ops/s
Iteration  18: 268027.156 ops/s
Iteration  19: 268846.376 ops/s
Iteration  20: 276413.209 ops/s
Iteration  21: 260856.372 ops/s
Iteration  22: 278610.146 ops/s
Iteration  23: 279397.045 ops/s
Iteration  24: 261367.030 ops/s
Iteration  25: 266255.871 ops/s
Iteration  26: 282308.624 ops/s
Iteration  27: 263777.329 ops/s
Iteration  28: 280874.692 ops/s
Iteration  29: 262114.657 ops/s
Iteration  30: 281453.971 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_noArgError":
  271561.730 ±(99.9%) 5100.755 ops/s [Average]
  (min, avg, max) = (259525.277, 271561.730, 283271.433), stdev = 7634.570
  CI (99.9%): [266460.975, 276662.484] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MaybeBlockingSubscribeTest._Benchmark.benchmark_noArgError  thrpt   30  271561.730 ± 5100.755  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mapReturnNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mapReturnNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 297833.646 ops/s
# Warmup Iteration   2: 519012.703 ops/s
# Warmup Iteration   3: 591303.857 ops/s
# Warmup Iteration   4: 618276.156 ops/s
# Warmup Iteration   5: 570237.310 ops/s
# Warmup Iteration   6: 615726.417 ops/s
# Warmup Iteration   7: 530495.360 ops/s
# Warmup Iteration   8: 605866.259 ops/s
# Warmup Iteration   9: 625327.611 ops/s
# Warmup Iteration  10: 603865.197 ops/s
# Warmup Iteration  11: 600601.031 ops/s
# Warmup Iteration  12: 627545.721 ops/s
# Warmup Iteration  13: 600339.731 ops/s
# Warmup Iteration  14: 638807.385 ops/s
# Warmup Iteration  15: 594127.737 ops/s
# Warmup Iteration  16: 640602.238 ops/s
# Warmup Iteration  17: 632023.078 ops/s
# Warmup Iteration  18: 640580.956 ops/s
# Warmup Iteration  19: 654204.679 ops/s
# Warmup Iteration  20: 629511.960 ops/s
# Warmup Iteration  21: 657048.276 ops/s
# Warmup Iteration  22: 635828.407 ops/s
# Warmup Iteration  23: 628226.140 ops/s
# Warmup Iteration  24: 649003.888 ops/s
# Warmup Iteration  25: 663739.336 ops/s
# Warmup Iteration  26: 622814.611 ops/s
# Warmup Iteration  27: 642993.188 ops/s
# Warmup Iteration  28: 655443.092 ops/s
# Warmup Iteration  29: 624732.321 ops/s
# Warmup Iteration  30: 653252.915 ops/s
Iteration   1: 512957.661 ops/s
Iteration   2: 646889.852 ops/s
Iteration   3: 669840.332 ops/s
Iteration   4: 666292.154 ops/s
Iteration   5: 630754.857 ops/s
Iteration   6: 663953.531 ops/s
Iteration   7: 630023.265 ops/s
Iteration   8: 629174.538 ops/s
Iteration   9: 662902.466 ops/s
Iteration  10: 655341.400 ops/s
Iteration  11: 620478.429 ops/s
Iteration  12: 666253.949 ops/s
Iteration  13: 637232.617 ops/s
Iteration  14: 626915.551 ops/s
Iteration  15: 655314.579 ops/s
Iteration  16: 636711.164 ops/s
Iteration  17: 658780.756 ops/s
Iteration  18: 648001.387 ops/s
Iteration  19: 650494.651 ops/s
Iteration  20: 619371.948 ops/s
Iteration  21: 648050.988 ops/s
Iteration  22: 665461.461 ops/s
Iteration  23: 634732.521 ops/s
Iteration  24: 642807.609 ops/s
Iteration  25: 625589.369 ops/s
Iteration  26: 661142.821 ops/s
Iteration  27: 640523.841 ops/s
Iteration  28: 639228.080 ops/s
Iteration  29: 631734.888 ops/s
Iteration  30: 668747.534 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mapReturnNull":
  641523.473 ±(99.9%) 19252.608 ops/s [Average]
  (min, avg, max) = (512957.661, 641523.473, 669840.332), stdev = 28816.400
  CI (99.9%): [622270.865, 660776.081] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_mapReturnNull  thrpt   30  641523.473 ± 19252.608  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_cast$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_cast

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1490709.081 ops/s
# Warmup Iteration   2: 4657152.899 ops/s
# Warmup Iteration   3: 6450395.280 ops/s
# Warmup Iteration   4: 6867849.495 ops/s
# Warmup Iteration   5: 6520019.921 ops/s
# Warmup Iteration   6: 6755488.430 ops/s
# Warmup Iteration   7: 6596793.643 ops/s
# Warmup Iteration   8: 6474656.403 ops/s
# Warmup Iteration   9: 6669662.551 ops/s
# Warmup Iteration  10: 6620524.841 ops/s
# Warmup Iteration  11: 6788896.197 ops/s
# Warmup Iteration  12: 6570789.185 ops/s
# Warmup Iteration  13: 6941846.653 ops/s
# Warmup Iteration  14: 6638064.210 ops/s
# Warmup Iteration  15: 6621658.628 ops/s
# Warmup Iteration  16: 6850461.168 ops/s
# Warmup Iteration  17: 6731130.848 ops/s
# Warmup Iteration  18: 6999770.487 ops/s
# Warmup Iteration  19: 6685845.719 ops/s
# Warmup Iteration  20: 6860701.410 ops/s
# Warmup Iteration  21: 6780806.973 ops/s
# Warmup Iteration  22: 6668796.932 ops/s
# Warmup Iteration  23: 6718347.920 ops/s
# Warmup Iteration  24: 6727525.408 ops/s
# Warmup Iteration  25: 6815865.802 ops/s
# Warmup Iteration  26: 6681237.430 ops/s
# Warmup Iteration  27: 6793625.800 ops/s
# Warmup Iteration  28: 6568005.340 ops/s
# Warmup Iteration  29: 6860580.202 ops/s
# Warmup Iteration  30: 6685844.499 ops/s
Iteration   1: 6902619.370 ops/s
Iteration   2: 7025424.091 ops/s
Iteration   3: 6555793.174 ops/s
Iteration   4: 6962776.745 ops/s
Iteration   5: 6897445.263 ops/s
Iteration   6: 6462003.392 ops/s
Iteration   7: 6754261.327 ops/s
Iteration   8: 6717378.428 ops/s
Iteration   9: 6657887.158 ops/s
Iteration  10: 6548266.486 ops/s
Iteration  11: 6630534.157 ops/s
Iteration  12: 6877472.241 ops/s
Iteration  13: 6636554.722 ops/s
Iteration  14: 6698951.694 ops/s
Iteration  15: 6827527.800 ops/s
Iteration  16: 6909795.758 ops/s
Iteration  17: 6589199.794 ops/s
Iteration  18: 6801662.439 ops/s
Iteration  19: 6875359.798 ops/s
Iteration  20: 6433339.309 ops/s
Iteration  21: 6940053.302 ops/s
Iteration  22: 6687960.501 ops/s
Iteration  23: 6666597.081 ops/s
Iteration  24: 7054071.051 ops/s
Iteration  25: 6406658.424 ops/s
Iteration  26: 7046433.959 ops/s
Iteration  27: 6963970.687 ops/s
Iteration  28: 6998276.488 ops/s
Iteration  29: 6641828.519 ops/s
Iteration  30: 6965630.250 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_cast":
  6771191.114 ±(99.9%) 127518.235 ops/s [Average]
  (min, avg, max) = (6406658.424, 6771191.114, 7054071.051), stdev = 190863.305
  CI (99.9%): [6643672.879, 6898709.348] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_cast  thrpt   30  6771191.114 ± 127518.235  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnEventSuccessThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnEventSuccessThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 318392.952 ops/s
# Warmup Iteration   2: 507401.340 ops/s
# Warmup Iteration   3: 616311.137 ops/s
# Warmup Iteration   4: 617068.621 ops/s
# Warmup Iteration   5: 586104.740 ops/s
# Warmup Iteration   6: 612218.280 ops/s
# Warmup Iteration   7: 582118.713 ops/s
# Warmup Iteration   8: 605517.714 ops/s
# Warmup Iteration   9: 609235.375 ops/s
# Warmup Iteration  10: 577271.308 ops/s
# Warmup Iteration  11: 590984.115 ops/s
# Warmup Iteration  12: 591018.984 ops/s
# Warmup Iteration  13: 612027.907 ops/s
# Warmup Iteration  14: 585901.758 ops/s
# Warmup Iteration  15: 624809.724 ops/s
# Warmup Iteration  16: 605990.295 ops/s
# Warmup Iteration  17: 623529.532 ops/s
# Warmup Iteration  18: 639190.757 ops/s
# Warmup Iteration  19: 620248.786 ops/s
# Warmup Iteration  20: 634244.561 ops/s
# Warmup Iteration  21: 597629.659 ops/s
# Warmup Iteration  22: 640140.624 ops/s
# Warmup Iteration  23: 639832.584 ops/s
# Warmup Iteration  24: 585527.593 ops/s
# Warmup Iteration  25: 462246.299 ops/s
# Warmup Iteration  26: 644341.426 ops/s
# Warmup Iteration  27: 622972.104 ops/s
# Warmup Iteration  28: 646219.861 ops/s
# Warmup Iteration  29: 656261.285 ops/s
# Warmup Iteration  30: 609724.170 ops/s
Iteration   1: 649117.148 ops/s
Iteration   2: 620205.657 ops/s
Iteration   3: 618060.644 ops/s
Iteration   4: 634362.710 ops/s
Iteration   5: 651197.843 ops/s
Iteration   6: 627260.400 ops/s
Iteration   7: 617602.649 ops/s
Iteration   8: 665499.811 ops/s
Iteration   9: 616517.721 ops/s
Iteration  10: 646179.736 ops/s
Iteration  11: 612773.314 ops/s
Iteration  12: 613907.975 ops/s
Iteration  13: 645210.830 ops/s
Iteration  14: 622355.556 ops/s
Iteration  15: 646168.475 ops/s
Iteration  16: 633257.951 ops/s
Iteration  17: 613806.508 ops/s
Iteration  18: 641498.166 ops/s
Iteration  19: 626524.710 ops/s
Iteration  20: 627211.026 ops/s
Iteration  21: 666030.717 ops/s
Iteration  22: 628673.135 ops/s
Iteration  23: 644496.414 ops/s
Iteration  24: 643660.272 ops/s
Iteration  25: 619585.413 ops/s
Iteration  26: 656610.180 ops/s
Iteration  27: 657883.301 ops/s
Iteration  28: 616907.051 ops/s
Iteration  29: 649160.489 ops/s
Iteration  30: 619042.889 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnEventSuccessThrows":
  634358.956 ±(99.9%) 10991.191 ops/s [Average]
  (min, avg, max) = (612773.314, 634358.956, 666030.717), stdev = 16451.099
  CI (99.9%): [623367.765, 645350.148] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_doOnEventSuccessThrows  thrpt   30  634358.956 ± 10991.191  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_onErrorResumeWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_onErrorResumeWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 241023.929 ops/s
# Warmup Iteration   2: 595230.184 ops/s
# Warmup Iteration   3: 678030.516 ops/s
# Warmup Iteration   4: 663421.611 ops/s
# Warmup Iteration   5: 608932.303 ops/s
# Warmup Iteration   6: 717885.670 ops/s
# Warmup Iteration   7: 696080.561 ops/s
# Warmup Iteration   8: 718235.567 ops/s
# Warmup Iteration   9: 726957.679 ops/s
# Warmup Iteration  10: 704086.650 ops/s
# Warmup Iteration  11: 712225.411 ops/s
# Warmup Iteration  12: 695604.031 ops/s
# Warmup Iteration  13: 734851.165 ops/s
# Warmup Iteration  14: 727286.206 ops/s
# Warmup Iteration  15: 681000.757 ops/s
# Warmup Iteration  16: 731228.927 ops/s
# Warmup Iteration  17: 737341.256 ops/s
# Warmup Iteration  18: 767862.540 ops/s
# Warmup Iteration  19: 725540.512 ops/s
# Warmup Iteration  20: 761380.930 ops/s
# Warmup Iteration  21: 771030.781 ops/s
# Warmup Iteration  22: 736246.352 ops/s
# Warmup Iteration  23: 761257.872 ops/s
# Warmup Iteration  24: 741277.777 ops/s
# Warmup Iteration  25: 752413.030 ops/s
# Warmup Iteration  26: 738445.274 ops/s
# Warmup Iteration  27: 777104.889 ops/s
# Warmup Iteration  28: 757312.489 ops/s
# Warmup Iteration  29: 717220.412 ops/s
# Warmup Iteration  30: 764469.484 ops/s
Iteration   1: 756490.095 ops/s
Iteration   2: 748580.637 ops/s
Iteration   3: 738602.696 ops/s
Iteration   4: 743837.646 ops/s
Iteration   5: 758239.749 ops/s
Iteration   6: 731126.653 ops/s
Iteration   7: 781657.867 ops/s
Iteration   8: 796953.125 ops/s
Iteration   9: 767422.669 ops/s
Iteration  10: 731576.804 ops/s
Iteration  11: 752362.825 ops/s
Iteration  12: 739049.748 ops/s
Iteration  13: 752948.308 ops/s
Iteration  14: 735775.390 ops/s
Iteration  15: 732520.302 ops/s
Iteration  16: 777153.460 ops/s
Iteration  17: 726175.757 ops/s
Iteration  18: 750197.288 ops/s
Iteration  19: 741559.536 ops/s
Iteration  20: 727788.155 ops/s
Iteration  21: 762826.503 ops/s
Iteration  22: 735250.041 ops/s
Iteration  23: 745697.554 ops/s
Iteration  24: 767672.164 ops/s
Iteration  25: 737976.192 ops/s
Iteration  26: 771324.460 ops/s
Iteration  27: 726583.847 ops/s
Iteration  28: 753039.149 ops/s
Iteration  29: 738737.235 ops/s
Iteration  30: 743270.335 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_onErrorResumeWithError":
  749079.873 ±(99.9%) 11779.029 ops/s [Average]
  (min, avg, max) = (726175.757, 749079.873, 796953.125), stdev = 17630.297
  CI (99.9%): [737300.845, 760858.902] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_onErrorResumeWithError  thrpt   30  749079.873 ± 11779.029  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnSubscribeThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnSubscribeThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 142583.068 ops/s
# Warmup Iteration   2: 529400.856 ops/s
# Warmup Iteration   3: 591670.263 ops/s
# Warmup Iteration   4: 531886.643 ops/s
# Warmup Iteration   5: 604063.526 ops/s
# Warmup Iteration   6: 525064.036 ops/s
# Warmup Iteration   7: 622291.116 ops/s
# Warmup Iteration   8: 605038.064 ops/s
# Warmup Iteration   9: 603341.874 ops/s
# Warmup Iteration  10: 626132.866 ops/s
# Warmup Iteration  11: 582949.285 ops/s
# Warmup Iteration  12: 638292.459 ops/s
# Warmup Iteration  13: 596253.762 ops/s
# Warmup Iteration  14: 624141.187 ops/s
# Warmup Iteration  15: 599570.381 ops/s
# Warmup Iteration  16: 610985.007 ops/s
# Warmup Iteration  17: 638179.099 ops/s
# Warmup Iteration  18: 644338.514 ops/s
# Warmup Iteration  19: 576889.773 ops/s
# Warmup Iteration  20: 614050.062 ops/s
# Warmup Iteration  21: 644668.422 ops/s
# Warmup Iteration  22: 634492.367 ops/s
# Warmup Iteration  23: 633061.660 ops/s
# Warmup Iteration  24: 649271.937 ops/s
# Warmup Iteration  25: 661599.937 ops/s
# Warmup Iteration  26: 628733.610 ops/s
# Warmup Iteration  27: 643502.724 ops/s
# Warmup Iteration  28: 659583.908 ops/s
# Warmup Iteration  29: 618399.705 ops/s
# Warmup Iteration  30: 654807.368 ops/s
Iteration   1: 634755.467 ops/s
Iteration   2: 629506.967 ops/s
Iteration   3: 660300.321 ops/s
Iteration   4: 630046.114 ops/s
Iteration   5: 640946.160 ops/s
Iteration   6: 661836.034 ops/s
Iteration   7: 628226.835 ops/s
Iteration   8: 657038.550 ops/s
Iteration   9: 643329.804 ops/s
Iteration  10: 622276.230 ops/s
Iteration  11: 641447.968 ops/s
Iteration  12: 655773.789 ops/s
Iteration  13: 621562.906 ops/s
Iteration  14: 640559.005 ops/s
Iteration  15: 662731.854 ops/s
Iteration  16: 622477.534 ops/s
Iteration  17: 657514.429 ops/s
Iteration  18: 638129.872 ops/s
Iteration  19: 617292.657 ops/s
Iteration  20: 650039.743 ops/s
Iteration  21: 634529.620 ops/s
Iteration  22: 663658.842 ops/s
Iteration  23: 660517.666 ops/s
Iteration  24: 619588.768 ops/s
Iteration  25: 663614.331 ops/s
Iteration  26: 627488.139 ops/s
Iteration  27: 655383.086 ops/s
Iteration  28: 643726.981 ops/s
Iteration  29: 628672.437 ops/s
Iteration  30: 632213.792 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnSubscribeThrows":
  641506.197 ±(99.9%) 10181.749 ops/s [Average]
  (min, avg, max) = (617292.657, 641506.197, 663658.842), stdev = 15239.564
  CI (99.9%): [631324.448, 651687.946] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_doOnSubscribeThrows  thrpt   30  641506.197 ± 10181.749  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1497066.610 ops/s
# Warmup Iteration   2: 4496928.548 ops/s
# Warmup Iteration   3: 6527517.337 ops/s
# Warmup Iteration   4: 6523128.274 ops/s
# Warmup Iteration   5: 6222125.817 ops/s
# Warmup Iteration   6: 6519362.531 ops/s
# Warmup Iteration   7: 6117430.428 ops/s
# Warmup Iteration   8: 6416380.156 ops/s
# Warmup Iteration   9: 6440787.894 ops/s
# Warmup Iteration  10: 6529584.137 ops/s
# Warmup Iteration  11: 6215794.222 ops/s
# Warmup Iteration  12: 6648577.700 ops/s
# Warmup Iteration  13: 6494735.629 ops/s
# Warmup Iteration  14: 6404645.954 ops/s
# Warmup Iteration  15: 6200340.253 ops/s
# Warmup Iteration  16: 6645685.727 ops/s
# Warmup Iteration  17: 6263870.030 ops/s
# Warmup Iteration  18: 6434571.467 ops/s
# Warmup Iteration  19: 6396553.180 ops/s
# Warmup Iteration  20: 6343036.414 ops/s
# Warmup Iteration  21: 6438705.744 ops/s
# Warmup Iteration  22: 6517355.107 ops/s
# Warmup Iteration  23: 6467829.939 ops/s
# Warmup Iteration  24: 6203345.380 ops/s
# Warmup Iteration  25: 6466415.876 ops/s
# Warmup Iteration  26: 6693552.803 ops/s
# Warmup Iteration  27: 6208038.404 ops/s
# Warmup Iteration  28: 6392126.785 ops/s
# Warmup Iteration  29: 6636172.444 ops/s
# Warmup Iteration  30: 6137953.748 ops/s
Iteration   1: 6471201.624 ops/s
Iteration   2: 6326173.299 ops/s
Iteration   3: 6453944.268 ops/s
Iteration   4: 6466407.105 ops/s
Iteration   5: 6316469.863 ops/s
Iteration   6: 6640485.924 ops/s
Iteration   7: 6308992.834 ops/s
Iteration   8: 6456585.671 ops/s
Iteration   9: 6376109.410 ops/s
Iteration  10: 6361484.199 ops/s
Iteration  11: 6683558.142 ops/s
Iteration  12: 6305394.385 ops/s
Iteration  13: 6589310.816 ops/s
Iteration  14: 6315617.785 ops/s
Iteration  15: 6260950.988 ops/s
Iteration  16: 6626819.601 ops/s
Iteration  17: 6430962.184 ops/s
Iteration  18: 6148646.861 ops/s
Iteration  19: 6544309.413 ops/s
Iteration  20: 6705626.082 ops/s
Iteration  21: 6146282.797 ops/s
Iteration  22: 6703791.121 ops/s
Iteration  23: 6148337.921 ops/s
Iteration  24: 6428596.327 ops/s
Iteration  25: 6600656.577 ops/s
Iteration  26: 6185074.903 ops/s
Iteration  27: 6589275.614 ops/s
Iteration  28: 6488618.370 ops/s
Iteration  29: 6411968.881 ops/s
Iteration  30: 6531066.693 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnSuccess":
  6434090.655 ±(99.9%) 111731.857 ops/s [Average]
  (min, avg, max) = (6146282.797, 6434090.655, 6705626.082), stdev = 167234.997
  CI (99.9%): [6322358.798, 6545822.513] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_doOnSuccess  thrpt   30  6434090.655 ± 111731.857  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2103502.907 ops/s
# Warmup Iteration   2: 4786693.194 ops/s
# Warmup Iteration   3: 6110960.543 ops/s
# Warmup Iteration   4: 6804275.738 ops/s
# Warmup Iteration   5: 6453555.823 ops/s
# Warmup Iteration   6: 6344330.504 ops/s
# Warmup Iteration   7: 6514292.725 ops/s
# Warmup Iteration   8: 6673970.555 ops/s
# Warmup Iteration   9: 6452003.696 ops/s
# Warmup Iteration  10: 6465175.357 ops/s
# Warmup Iteration  11: 6760050.133 ops/s
# Warmup Iteration  12: 6438563.703 ops/s
# Warmup Iteration  13: 6408362.771 ops/s
# Warmup Iteration  14: 5290478.603 ops/s
# Warmup Iteration  15: 6328480.301 ops/s
# Warmup Iteration  16: 6757195.645 ops/s
# Warmup Iteration  17: 6499917.080 ops/s
# Warmup Iteration  18: 6436309.200 ops/s
# Warmup Iteration  19: 6891073.371 ops/s
# Warmup Iteration  20: 6573554.691 ops/s
# Warmup Iteration  21: 6766017.863 ops/s
# Warmup Iteration  22: 6367708.669 ops/s
# Warmup Iteration  23: 6563947.525 ops/s
# Warmup Iteration  24: 6594746.675 ops/s
# Warmup Iteration  25: 6767503.880 ops/s
# Warmup Iteration  26: 6338593.771 ops/s
# Warmup Iteration  27: 6607190.313 ops/s
# Warmup Iteration  28: 6457110.779 ops/s
# Warmup Iteration  29: 6663617.092 ops/s
# Warmup Iteration  30: 6610953.609 ops/s
Iteration   1: 6371043.298 ops/s
Iteration   2: 6832204.706 ops/s
Iteration   3: 6395893.260 ops/s
Iteration   4: 6682668.913 ops/s
Iteration   5: 6819246.522 ops/s
Iteration   6: 6548507.570 ops/s
Iteration   7: 6388263.156 ops/s
Iteration   8: 6686920.961 ops/s
Iteration   9: 6446319.900 ops/s
Iteration  10: 6857338.007 ops/s
Iteration  11: 6420466.390 ops/s
Iteration  12: 6713846.226 ops/s
Iteration  13: 6447597.649 ops/s
Iteration  14: 6666016.906 ops/s
Iteration  15: 6481747.359 ops/s
Iteration  16: 6518553.827 ops/s
Iteration  17: 6731935.164 ops/s
Iteration  18: 6484534.322 ops/s
Iteration  19: 6634784.501 ops/s
Iteration  20: 6895788.439 ops/s
Iteration  21: 6523868.904 ops/s
Iteration  22: 6787247.180 ops/s
Iteration  23: 6508749.575 ops/s
Iteration  24: 6728856.878 ops/s
Iteration  25: 6487739.788 ops/s
Iteration  26: 6785432.579 ops/s
Iteration  27: 6600424.763 ops/s
Iteration  28: 6452669.545 ops/s
Iteration  29: 6762424.650 ops/s
Iteration  30: 6459453.249 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnSubscribe":
  6604018.140 ±(99.9%) 106779.258 ops/s [Average]
  (min, avg, max) = (6371043.298, 6604018.140, 6895788.439), stdev = 159822.178
  CI (99.9%): [6497238.882, 6710797.397] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_doOnSubscribe  thrpt   30  6604018.140 ± 106779.258  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnSuccessThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnSuccessThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 247287.804 ops/s
# Warmup Iteration   2: 521945.936 ops/s
# Warmup Iteration   3: 592244.672 ops/s
# Warmup Iteration   4: 602943.118 ops/s
# Warmup Iteration   5: 623206.291 ops/s
# Warmup Iteration   6: 583439.288 ops/s
# Warmup Iteration   7: 599994.890 ops/s
# Warmup Iteration   8: 610788.036 ops/s
# Warmup Iteration   9: 597320.275 ops/s
# Warmup Iteration  10: 610002.932 ops/s
# Warmup Iteration  11: 595223.399 ops/s
# Warmup Iteration  12: 602087.618 ops/s
# Warmup Iteration  13: 595572.304 ops/s
# Warmup Iteration  14: 627549.258 ops/s
# Warmup Iteration  15: 603340.159 ops/s
# Warmup Iteration  16: 616351.846 ops/s
# Warmup Iteration  17: 615136.737 ops/s
# Warmup Iteration  18: 616899.548 ops/s
# Warmup Iteration  19: 637515.502 ops/s
# Warmup Iteration  20: 637172.520 ops/s
# Warmup Iteration  21: 630700.622 ops/s
# Warmup Iteration  22: 665110.829 ops/s
# Warmup Iteration  23: 657055.602 ops/s
# Warmup Iteration  24: 642515.147 ops/s
# Warmup Iteration  25: 634881.808 ops/s
# Warmup Iteration  26: 671544.859 ops/s
# Warmup Iteration  27: 642063.539 ops/s
# Warmup Iteration  28: 638510.515 ops/s
# Warmup Iteration  29: 634252.015 ops/s
# Warmup Iteration  30: 653367.370 ops/s
Iteration   1: 610744.413 ops/s
Iteration   2: 636857.455 ops/s
Iteration   3: 610969.496 ops/s
Iteration   4: 601241.889 ops/s
Iteration   5: 639905.611 ops/s
Iteration   6: 604568.977 ops/s
Iteration   7: 650587.408 ops/s
Iteration   8: 653840.770 ops/s
Iteration   9: 644109.428 ops/s
Iteration  10: 640896.291 ops/s
Iteration  11: 634177.116 ops/s
Iteration  12: 655768.285 ops/s
Iteration  13: 646226.708 ops/s
Iteration  14: 666774.311 ops/s
Iteration  15: 663182.292 ops/s
Iteration  16: 627979.002 ops/s
Iteration  17: 647758.862 ops/s
Iteration  18: 640893.112 ops/s
Iteration  19: 655360.929 ops/s
Iteration  20: 635197.349 ops/s
Iteration  21: 637931.751 ops/s
Iteration  22: 637507.248 ops/s
Iteration  23: 638282.741 ops/s
Iteration  24: 644295.226 ops/s
Iteration  25: 634875.249 ops/s
Iteration  26: 634353.558 ops/s
Iteration  27: 659296.127 ops/s
Iteration  28: 619772.718 ops/s
Iteration  29: 650472.368 ops/s
Iteration  30: 630179.845 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnSuccessThrows":
  638466.885 ±(99.9%) 10981.495 ops/s [Average]
  (min, avg, max) = (601241.889, 638466.885, 666774.311), stdev = 16436.585
  CI (99.9%): [627485.390, 649448.379] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_doOnSuccessThrows  thrpt   30  638466.885 ± 10981.495  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_supplierAndDisposerCrashNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_supplierAndDisposerCrashNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40082.245 ops/s
# Warmup Iteration   2: 149129.498 ops/s
# Warmup Iteration   3: 167287.607 ops/s
# Warmup Iteration   4: 174045.133 ops/s
# Warmup Iteration   5: 178736.484 ops/s
# Warmup Iteration   6: 164837.943 ops/s
# Warmup Iteration   7: 172015.451 ops/s
# Warmup Iteration   8: 171619.648 ops/s
# Warmup Iteration   9: 163648.172 ops/s
# Warmup Iteration  10: 168792.964 ops/s
# Warmup Iteration  11: 177317.914 ops/s
# Warmup Iteration  12: 183106.526 ops/s
# Warmup Iteration  13: 175176.672 ops/s
# Warmup Iteration  14: 180912.363 ops/s
# Warmup Iteration  15: 178609.039 ops/s
# Warmup Iteration  16: 181510.791 ops/s
# Warmup Iteration  17: 192888.773 ops/s
# Warmup Iteration  18: 180575.870 ops/s
# Warmup Iteration  19: 186561.183 ops/s
# Warmup Iteration  20: 179731.477 ops/s
# Warmup Iteration  21: 183352.295 ops/s
# Warmup Iteration  22: 181623.360 ops/s
# Warmup Iteration  23: 185191.488 ops/s
# Warmup Iteration  24: 182332.640 ops/s
# Warmup Iteration  25: 182294.971 ops/s
# Warmup Iteration  26: 196763.614 ops/s
# Warmup Iteration  27: 186564.668 ops/s
# Warmup Iteration  28: 182170.980 ops/s
# Warmup Iteration  29: 195075.435 ops/s
# Warmup Iteration  30: 187929.973 ops/s
Iteration   1: 186803.812 ops/s
Iteration   2: 192149.936 ops/s
Iteration   3: 193942.095 ops/s
Iteration   4: 176299.842 ops/s
Iteration   5: 181858.822 ops/s
Iteration   6: 185324.809 ops/s
Iteration   7: 184098.391 ops/s
Iteration   8: 184909.900 ops/s
Iteration   9: 186881.969 ops/s
Iteration  10: 188649.500 ops/s
Iteration  11: 190001.740 ops/s
Iteration  12: 187514.002 ops/s
Iteration  13: 189798.744 ops/s
Iteration  14: 173070.093 ops/s
Iteration  15: 188658.520 ops/s
Iteration  16: 189370.199 ops/s
Iteration  17: 171538.330 ops/s
Iteration  18: 187046.259 ops/s
Iteration  19: 182741.735 ops/s
Iteration  20: 193749.340 ops/s
Iteration  21: 183275.831 ops/s
Iteration  22: 192714.962 ops/s
Iteration  23: 193466.976 ops/s
Iteration  24: 185257.565 ops/s
Iteration  25: 190281.557 ops/s
Iteration  26: 183964.812 ops/s
Iteration  27: 191450.604 ops/s
Iteration  28: 183911.401 ops/s
Iteration  29: 182942.585 ops/s
Iteration  30: 190141.052 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_supplierAndDisposerCrashNonEager":
  186393.846 ±(99.9%) 3747.310 ops/s [Average]
  (min, avg, max) = (171538.330, 186393.846, 193942.095), stdev = 5608.798
  CI (99.9%): [182646.536, 190141.156] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MaybeUsingTest._Benchmark.benchmark_supplierAndDisposerCrashNonEager  thrpt   30  186393.846 ± 3747.310  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 97573.243 ops/s
# Warmup Iteration   2: 326062.694 ops/s
# Warmup Iteration   3: 382504.768 ops/s
# Warmup Iteration   4: 371399.101 ops/s
# Warmup Iteration   5: 392401.846 ops/s
# Warmup Iteration   6: 372417.203 ops/s
# Warmup Iteration   7: 341940.985 ops/s
# Warmup Iteration   8: 393207.968 ops/s
# Warmup Iteration   9: 376490.835 ops/s
# Warmup Iteration  10: 376888.161 ops/s
# Warmup Iteration  11: 385645.295 ops/s
# Warmup Iteration  12: 371057.735 ops/s
# Warmup Iteration  13: 383116.479 ops/s
# Warmup Iteration  14: 383160.273 ops/s
# Warmup Iteration  15: 391695.005 ops/s
# Warmup Iteration  16: 386712.200 ops/s
# Warmup Iteration  17: 374682.078 ops/s
# Warmup Iteration  18: 393401.103 ops/s
# Warmup Iteration  19: 367471.142 ops/s
# Warmup Iteration  20: 398276.558 ops/s
# Warmup Iteration  21: 379477.086 ops/s
# Warmup Iteration  22: 381408.122 ops/s
# Warmup Iteration  23: 397083.118 ops/s
# Warmup Iteration  24: 365283.708 ops/s
# Warmup Iteration  25: 378030.447 ops/s
# Warmup Iteration  26: 379090.888 ops/s
# Warmup Iteration  27: 374755.106 ops/s
# Warmup Iteration  28: 397462.922 ops/s
# Warmup Iteration  29: 388361.826 ops/s
# Warmup Iteration  30: 367903.483 ops/s
Iteration   1: 390889.515 ops/s
Iteration   2: 367398.146 ops/s
Iteration   3: 386000.291 ops/s
Iteration   4: 374418.819 ops/s
Iteration   5: 395417.227 ops/s
Iteration   6: 387612.210 ops/s
Iteration   7: 390382.151 ops/s
Iteration   8: 397321.683 ops/s
Iteration   9: 369794.261 ops/s
Iteration  10: 388227.163 ops/s
Iteration  11: 374132.323 ops/s
Iteration  12: 396970.925 ops/s
Iteration  13: 388538.394 ops/s
Iteration  14: 369155.641 ops/s
Iteration  15: 380198.016 ops/s
Iteration  16: 386910.687 ops/s
Iteration  17: 386305.220 ops/s
Iteration  18: 396846.796 ops/s
Iteration  19: 364246.977 ops/s
Iteration  20: 376787.600 ops/s
Iteration  21: 401793.289 ops/s
Iteration  22: 378907.507 ops/s
Iteration  23: 373383.283 ops/s
Iteration  24: 379416.832 ops/s
Iteration  25: 394504.440 ops/s
Iteration  26: 381625.004 ops/s
Iteration  27: 385356.151 ops/s
Iteration  28: 397361.446 ops/s
Iteration  29: 370117.776 ops/s
Iteration  30: 387613.352 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_simple":
  383921.104 ±(99.9%) 6930.364 ops/s [Average]
  (min, avg, max) = (364246.977, 383921.104, 401793.289), stdev = 10373.044
  CI (99.9%): [376990.740, 390851.468] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
BlockingObservableLatestTest._Benchmark.benchmark_simple  thrpt   30  383921.104 ± 6930.364  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1574218.322 ops/s
# Warmup Iteration   2: 5302713.264 ops/s
# Warmup Iteration   3: 6241092.460 ops/s
# Warmup Iteration   4: 7978066.129 ops/s
# Warmup Iteration   5: 8070170.020 ops/s
# Warmup Iteration   6: 8109177.132 ops/s
# Warmup Iteration   7: 7806367.445 ops/s
# Warmup Iteration   8: 8027393.296 ops/s
# Warmup Iteration   9: 8208685.797 ops/s
# Warmup Iteration  10: 7717362.618 ops/s
# Warmup Iteration  11: 8005421.539 ops/s
# Warmup Iteration  12: 7886235.155 ops/s
# Warmup Iteration  13: 7845551.392 ops/s
# Warmup Iteration  14: 8120355.872 ops/s
# Warmup Iteration  15: 7698468.283 ops/s
# Warmup Iteration  16: 7983864.331 ops/s
# Warmup Iteration  17: 7926611.347 ops/s
# Warmup Iteration  18: 8095005.148 ops/s
# Warmup Iteration  19: 8000369.259 ops/s
# Warmup Iteration  20: 7977055.892 ops/s
# Warmup Iteration  21: 8278030.904 ops/s
# Warmup Iteration  22: 8059032.609 ops/s
# Warmup Iteration  23: 7820363.369 ops/s
# Warmup Iteration  24: 7850404.076 ops/s
# Warmup Iteration  25: 7827990.074 ops/s
# Warmup Iteration  26: 8246019.153 ops/s
# Warmup Iteration  27: 8373762.347 ops/s
# Warmup Iteration  28: 7731476.135 ops/s
# Warmup Iteration  29: 8327401.985 ops/s
# Warmup Iteration  30: 8049059.264 ops/s
Iteration   1: 8185234.172 ops/s
Iteration   2: 7842073.010 ops/s
Iteration   3: 8150667.771 ops/s
Iteration   4: 8295381.562 ops/s
Iteration   5: 7712869.635 ops/s
Iteration   6: 8125905.191 ops/s
Iteration   7: 8301229.379 ops/s
Iteration   8: 7969808.446 ops/s
Iteration   9: 8075306.333 ops/s
Iteration  10: 7885223.234 ops/s
Iteration  11: 8329675.165 ops/s
Iteration  12: 7818830.883 ops/s
Iteration  13: 8086613.579 ops/s
Iteration  14: 7882965.564 ops/s
Iteration  15: 7882295.951 ops/s
Iteration  16: 7981712.169 ops/s
Iteration  17: 7671501.883 ops/s
Iteration  18: 8225653.822 ops/s
Iteration  19: 7827063.896 ops/s
Iteration  20: 8208854.745 ops/s
Iteration  21: 7922508.447 ops/s
Iteration  22: 8218469.854 ops/s
Iteration  23: 8149551.037 ops/s
Iteration  24: 8142770.883 ops/s
Iteration  25: 7971241.803 ops/s
Iteration  26: 8149224.403 ops/s
Iteration  27: 8169230.738 ops/s
Iteration  28: 7814491.664 ops/s
Iteration  29: 8109362.989 ops/s
Iteration  30: 7956156.545 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_empty":
  8035395.825 ±(99.9%) 120680.390 ops/s [Average]
  (min, avg, max) = (7671501.883, 8035395.825, 8329675.165), stdev = 180628.741
  CI (99.9%): [7914715.435, 8156076.216] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score        Error  Units
ObservableFromMaybeTest._Benchmark.benchmark_empty  thrpt   30  8035395.825 ± 120680.390  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 52332.739 ops/s
# Warmup Iteration   2: 314371.956 ops/s
# Warmup Iteration   3: 809898.142 ops/s
# Warmup Iteration   4: 930650.509 ops/s
# Warmup Iteration   5: 1110254.554 ops/s
# Warmup Iteration   6: 1124547.129 ops/s
# Warmup Iteration   7: 1077836.271 ops/s
# Warmup Iteration   8: 1190936.589 ops/s
# Warmup Iteration   9: 1150788.631 ops/s
# Warmup Iteration  10: 1158079.161 ops/s
# Warmup Iteration  11: 1054320.815 ops/s
# Warmup Iteration  12: 1122325.673 ops/s
# Warmup Iteration  13: 1184282.747 ops/s
# Warmup Iteration  14: 1167706.761 ops/s
# Warmup Iteration  15: 1078182.966 ops/s
# Warmup Iteration  16: 1120717.634 ops/s
# Warmup Iteration  17: 1095100.241 ops/s
# Warmup Iteration  18: 1106217.112 ops/s
# Warmup Iteration  19: 1097389.818 ops/s
# Warmup Iteration  20: 1156576.738 ops/s
# Warmup Iteration  21: 1121415.956 ops/s
# Warmup Iteration  22: 1099074.126 ops/s
# Warmup Iteration  23: 1138635.189 ops/s
# Warmup Iteration  24: 1077319.380 ops/s
# Warmup Iteration  25: 1194668.221 ops/s
# Warmup Iteration  26: 1056981.474 ops/s
# Warmup Iteration  27: 1116555.787 ops/s
# Warmup Iteration  28: 1155710.189 ops/s
# Warmup Iteration  29: 1076084.853 ops/s
# Warmup Iteration  30: 1145539.250 ops/s
Iteration   1: 1175659.601 ops/s
Iteration   2: 1155957.026 ops/s
Iteration   3: 1156163.712 ops/s
Iteration   4: 1097975.522 ops/s
Iteration   5: 1135545.728 ops/s
Iteration   6: 1097493.168 ops/s
Iteration   7: 1106286.742 ops/s
Iteration   8: 1162228.644 ops/s
Iteration   9: 1094329.092 ops/s
Iteration  10: 1161539.556 ops/s
Iteration  11: 1069822.894 ops/s
Iteration  12: 1086214.718 ops/s
Iteration  13: 1099898.711 ops/s
Iteration  14: 1095576.938 ops/s
Iteration  15: 1087618.163 ops/s
Iteration  16: 1123396.336 ops/s
Iteration  17: 1101325.899 ops/s
Iteration  18: 1119692.635 ops/s
Iteration  19: 1154431.935 ops/s
Iteration  20: 1087432.059 ops/s
Iteration  21: 1145700.126 ops/s
Iteration  22: 1078130.706 ops/s
Iteration  23: 1169038.434 ops/s
Iteration  24: 1093894.724 ops/s
Iteration  25: 1077502.151 ops/s
Iteration  26: 1127142.093 ops/s
Iteration  27: 1103116.585 ops/s
Iteration  28: 1091825.133 ops/s
Iteration  29: 1149071.088 ops/s
Iteration  30: 934434.348 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSize":
  1111281.482 ±(99.9%) 30651.413 ops/s [Average]
  (min, avg, max) = (934434.348, 1111281.482, 1175659.601), stdev = 45877.595
  CI (99.9%): [1080630.069, 1141932.895] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSize  thrpt   30  1111281.482 ± 30651.413  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 57562.316 ops/s
# Warmup Iteration   2: 291447.197 ops/s
# Warmup Iteration   3: 715903.549 ops/s
# Warmup Iteration   4: 982440.292 ops/s
# Warmup Iteration   5: 1067626.697 ops/s
# Warmup Iteration   6: 1074446.394 ops/s
# Warmup Iteration   7: 1144012.145 ops/s
# Warmup Iteration   8: 1047153.230 ops/s
# Warmup Iteration   9: 987164.477 ops/s
# Warmup Iteration  10: 1061156.720 ops/s
# Warmup Iteration  11: 1074541.340 ops/s
# Warmup Iteration  12: 1127278.293 ops/s
# Warmup Iteration  13: 1066891.529 ops/s
# Warmup Iteration  14: 1141762.421 ops/s
# Warmup Iteration  15: 1120404.422 ops/s
# Warmup Iteration  16: 1056020.093 ops/s
# Warmup Iteration  17: 1128438.697 ops/s
# Warmup Iteration  18: 1039859.276 ops/s
# Warmup Iteration  19: 1088930.708 ops/s
# Warmup Iteration  20: 1153817.577 ops/s
# Warmup Iteration  21: 1084382.704 ops/s
# Warmup Iteration  22: 1127234.022 ops/s
# Warmup Iteration  23: 1115548.974 ops/s
# Warmup Iteration  24: 1111238.693 ops/s
# Warmup Iteration  25: 1128142.708 ops/s
# Warmup Iteration  26: 1095641.957 ops/s
# Warmup Iteration  27: 1084086.235 ops/s
# Warmup Iteration  28: 1082608.376 ops/s
# Warmup Iteration  29: 1139782.549 ops/s
# Warmup Iteration  30: 1070605.794 ops/s
Iteration   1: 1130163.981 ops/s
Iteration   2: 1090713.685 ops/s
Iteration   3: 1120059.071 ops/s
Iteration   4: 1114603.191 ops/s
Iteration   5: 1078266.092 ops/s
Iteration   6: 1082951.801 ops/s
Iteration   7: 1118489.728 ops/s
Iteration   8: 1114512.363 ops/s
Iteration   9: 1102426.493 ops/s
Iteration  10: 1088957.768 ops/s
Iteration  11: 1154557.708 ops/s
Iteration  12: 1123779.400 ops/s
Iteration  13: 1111828.803 ops/s
Iteration  14: 1078649.779 ops/s
Iteration  15: 1110628.930 ops/s
Iteration  16: 1078806.494 ops/s
Iteration  17: 1128894.483 ops/s
Iteration  18: 1113971.175 ops/s
Iteration  19: 1107139.070 ops/s
Iteration  20: 1097864.942 ops/s
Iteration  21: 1091109.211 ops/s
Iteration  22: 1120105.226 ops/s
Iteration  23: 1069784.591 ops/s
Iteration  24: 1123177.230 ops/s
Iteration  25: 1099257.064 ops/s
Iteration  26: 1120983.905 ops/s
Iteration  27: 1138011.122 ops/s
Iteration  28: 1062093.010 ops/s
Iteration  29: 1116366.851 ops/s
Iteration  30: 1130884.269 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamOverlap":
  1107301.248 ±(99.9%) 14531.594 ops/s [Average]
  (min, avg, max) = (1062093.010, 1107301.248, 1154557.708), stdev = 21750.208
  CI (99.9%): [1092769.654, 1121832.842] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamOverlap  thrpt   30  1107301.248 ± 14531.594  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31119.266 ops/s
# Warmup Iteration   2: 232210.600 ops/s
# Warmup Iteration   3: 824362.504 ops/s
# Warmup Iteration   4: 1003726.365 ops/s
# Warmup Iteration   5: 1056725.142 ops/s
# Warmup Iteration   6: 1018710.222 ops/s
# Warmup Iteration   7: 998342.347 ops/s
# Warmup Iteration   8: 1097249.774 ops/s
# Warmup Iteration   9: 1120667.191 ops/s
# Warmup Iteration  10: 1047227.945 ops/s
# Warmup Iteration  11: 1101792.691 ops/s
# Warmup Iteration  12: 1086684.674 ops/s
# Warmup Iteration  13: 1120481.042 ops/s
# Warmup Iteration  14: 1098486.931 ops/s
# Warmup Iteration  15: 1099737.424 ops/s
# Warmup Iteration  16: 1083770.649 ops/s
# Warmup Iteration  17: 1104526.026 ops/s
# Warmup Iteration  18: 1145876.629 ops/s
# Warmup Iteration  19: 1088002.530 ops/s
# Warmup Iteration  20: 1127532.281 ops/s
# Warmup Iteration  21: 1071654.246 ops/s
# Warmup Iteration  22: 1107015.314 ops/s
# Warmup Iteration  23: 1139257.582 ops/s
# Warmup Iteration  24: 1060856.544 ops/s
# Warmup Iteration  25: 1116209.475 ops/s
# Warmup Iteration  26: 1100668.420 ops/s
# Warmup Iteration  27: 1123925.602 ops/s
# Warmup Iteration  28: 1101773.578 ops/s
# Warmup Iteration  29: 1101100.131 ops/s
# Warmup Iteration  30: 1142645.012 ops/s
Iteration   1: 1146870.811 ops/s
Iteration   2: 1084360.695 ops/s
Iteration   3: 1082469.092 ops/s
Iteration   4: 1118635.729 ops/s
Iteration   5: 1074087.575 ops/s
Iteration   6: 1090061.291 ops/s
Iteration   7: 1121071.683 ops/s
Iteration   8: 1074144.234 ops/s
Iteration   9: 1138203.617 ops/s
Iteration  10: 1129772.829 ops/s
Iteration  11: 1087065.939 ops/s
Iteration  12: 1118897.308 ops/s
Iteration  13: 1083500.703 ops/s
Iteration  14: 1138412.028 ops/s
Iteration  15: 1132874.481 ops/s
Iteration  16: 1113597.971 ops/s
Iteration  17: 1060586.538 ops/s
Iteration  18: 1160474.759 ops/s
Iteration  19: 1137486.874 ops/s
Iteration  20: 1071947.230 ops/s
Iteration  21: 1102504.732 ops/s
Iteration  22: 1127236.945 ops/s
Iteration  23: 1057487.105 ops/s
Iteration  24: 1108483.888 ops/s
Iteration  25: 924602.992 ops/s
Iteration  26: 1109287.814 ops/s
Iteration  27: 1158843.252 ops/s
Iteration  28: 1062818.439 ops/s
Iteration  29: 1093378.913 ops/s
Iteration  30: 1144594.042 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSkip":
  1101791.984 ±(99.9%) 30013.667 ops/s [Average]
  (min, avg, max) = (924602.992, 1101791.984, 1160474.759), stdev = 44923.047
  CI (99.9%): [1071778.317, 1131805.651] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSkip  thrpt   30  1101791.984 ± 30013.667  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeNonOverlapping$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeNonOverlapping

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10256.365 ops/s
# Warmup Iteration   2: 231547.641 ops/s
# Warmup Iteration   3: 394056.722 ops/s
# Warmup Iteration   4: 400403.664 ops/s
# Warmup Iteration   5: 476548.464 ops/s
# Warmup Iteration   6: 482048.394 ops/s
# Warmup Iteration   7: 452076.166 ops/s
# Warmup Iteration   8: 490882.678 ops/s
# Warmup Iteration   9: 477929.978 ops/s
# Warmup Iteration  10: 477421.877 ops/s
# Warmup Iteration  11: 476858.309 ops/s
# Warmup Iteration  12: 452470.713 ops/s
# Warmup Iteration  13: 464187.706 ops/s
# Warmup Iteration  14: 501910.399 ops/s
# Warmup Iteration  15: 460805.736 ops/s
# Warmup Iteration  16: 471021.888 ops/s
# Warmup Iteration  17: 461483.795 ops/s
# Warmup Iteration  18: 474370.866 ops/s
# Warmup Iteration  19: 466570.391 ops/s
# Warmup Iteration  20: 462892.105 ops/s
# Warmup Iteration  21: 472084.595 ops/s
# Warmup Iteration  22: 465090.416 ops/s
# Warmup Iteration  23: 471008.383 ops/s
# Warmup Iteration  24: 464810.407 ops/s
# Warmup Iteration  25: 462452.927 ops/s
# Warmup Iteration  26: 486032.663 ops/s
# Warmup Iteration  27: 462438.875 ops/s
# Warmup Iteration  28: 475667.216 ops/s
# Warmup Iteration  29: 456616.910 ops/s
# Warmup Iteration  30: 468873.039 ops/s
Iteration   1: 493572.361 ops/s
Iteration   2: 446335.251 ops/s
Iteration   3: 481196.042 ops/s
Iteration   4: 479125.619 ops/s
Iteration   5: 451362.650 ops/s
Iteration   6: 474970.195 ops/s
Iteration   7: 460397.601 ops/s
Iteration   8: 475506.980 ops/s
Iteration   9: 460172.797 ops/s
Iteration  10: 470560.748 ops/s
Iteration  11: 472148.552 ops/s
Iteration  12: 463971.908 ops/s
Iteration  13: 461295.558 ops/s
Iteration  14: 474065.014 ops/s
Iteration  15: 457156.223 ops/s
Iteration  16: 480154.714 ops/s
Iteration  17: 477548.037 ops/s
Iteration  18: 465738.395 ops/s
Iteration  19: 462907.642 ops/s
Iteration  20: 482853.730 ops/s
Iteration  21: 456326.888 ops/s
Iteration  22: 478661.414 ops/s
Iteration  23: 462547.320 ops/s
Iteration  24: 482717.084 ops/s
Iteration  25: 462270.804 ops/s
Iteration  26: 482346.565 ops/s
Iteration  27: 480647.380 ops/s
Iteration  28: 450779.418 ops/s
Iteration  29: 475131.662 ops/s
Iteration  30: 468654.646 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeNonOverlapping":
  469704.107 ±(99.9%) 7655.446 ops/s [Average]
  (min, avg, max) = (446335.251, 469704.107, 493572.361), stdev = 11458.311
  CI (99.9%): [462048.661, 477359.552] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeNonOverlapping  thrpt   30  469704.107 ± 7655.446  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedInnerCrash2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedInnerCrash2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5839.092 ops/s
# Warmup Iteration   2: 74884.617 ops/s
# Warmup Iteration   3: 123439.565 ops/s
# Warmup Iteration   4: 231567.842 ops/s
# Warmup Iteration   5: 299240.700 ops/s
# Warmup Iteration   6: 285677.861 ops/s
# Warmup Iteration   7: 314765.435 ops/s
# Warmup Iteration   8: 296067.763 ops/s
# Warmup Iteration   9: 323154.660 ops/s
# Warmup Iteration  10: 302198.430 ops/s
# Warmup Iteration  11: 304145.631 ops/s
# Warmup Iteration  12: 319453.794 ops/s
# Warmup Iteration  13: 317608.939 ops/s
# Warmup Iteration  14: 307189.681 ops/s
# Warmup Iteration  15: 312590.493 ops/s
# Warmup Iteration  16: 308771.068 ops/s
# Warmup Iteration  17: 295484.000 ops/s
# Warmup Iteration  18: 332150.098 ops/s
# Warmup Iteration  19: 313990.097 ops/s
# Warmup Iteration  20: 316971.199 ops/s
# Warmup Iteration  21: 332945.456 ops/s
# Warmup Iteration  22: 316525.364 ops/s
# Warmup Iteration  23: 330413.404 ops/s
# Warmup Iteration  24: 321390.960 ops/s
# Warmup Iteration  25: 302398.016 ops/s
# Warmup Iteration  26: 318615.309 ops/s
# Warmup Iteration  27: 333236.557 ops/s
# Warmup Iteration  28: 312865.982 ops/s
# Warmup Iteration  29: 331402.868 ops/s
# Warmup Iteration  30: 308112.292 ops/s
Iteration   1: 332475.324 ops/s
Iteration   2: 310860.360 ops/s
Iteration   3: 319902.356 ops/s
Iteration   4: 321438.101 ops/s
Iteration   5: 318886.330 ops/s
Iteration   6: 324078.202 ops/s
Iteration   7: 315852.137 ops/s
Iteration   8: 327134.021 ops/s
Iteration   9: 336449.201 ops/s
Iteration  10: 293175.206 ops/s
Iteration  11: 323678.451 ops/s
Iteration  12: 323526.887 ops/s
Iteration  13: 321233.977 ops/s
Iteration  14: 330465.855 ops/s
Iteration  15: 312389.490 ops/s
Iteration  16: 316667.049 ops/s
Iteration  17: 323885.093 ops/s
Iteration  18: 317655.137 ops/s
Iteration  19: 263716.384 ops/s
Iteration  20: 312219.402 ops/s
Iteration  21: 321006.345 ops/s
Iteration  22: 323478.665 ops/s
Iteration  23: 331370.722 ops/s
Iteration  24: 319049.092 ops/s
Iteration  25: 327621.424 ops/s
Iteration  26: 324284.109 ops/s
Iteration  27: 322464.721 ops/s
Iteration  28: 328811.084 ops/s
Iteration  29: 315715.874 ops/s
Iteration  30: 337693.071 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_fusedInnerCrash2":
  319906.136 ±(99.9%) 9122.808 ops/s [Average]
  (min, avg, max) = (263716.384, 319906.136, 337693.071), stdev = 13654.590
  CI (99.9%): [310783.328, 329028.943] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_fusedInnerCrash2  thrpt   30  319906.136 ± 9122.808  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipJustOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipJustOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4164.675 ops/s
# Warmup Iteration   2: 25453.702 ops/s
# Warmup Iteration   3: 71400.840 ops/s
# Warmup Iteration   4: 59846.593 ops/s
# Warmup Iteration   5: 100284.538 ops/s
# Warmup Iteration   6: 77304.572 ops/s
# Warmup Iteration   7: 92287.562 ops/s
# Warmup Iteration   8: 92532.122 ops/s
# Warmup Iteration   9: 101617.894 ops/s
# Warmup Iteration  10: 92607.892 ops/s
# Warmup Iteration  11: 94343.994 ops/s
# Warmup Iteration  12: 102647.951 ops/s
# Warmup Iteration  13: 89619.509 ops/s
# Warmup Iteration  14: 89543.736 ops/s
# Warmup Iteration  15: 81010.663 ops/s
# Warmup Iteration  16: 88574.659 ops/s
# Warmup Iteration  17: 96038.630 ops/s
# Warmup Iteration  18: 94663.907 ops/s
# Warmup Iteration  19: 95934.674 ops/s
# Warmup Iteration  20: 87914.325 ops/s
# Warmup Iteration  21: 90995.880 ops/s
# Warmup Iteration  22: 91028.855 ops/s
# Warmup Iteration  23: 99614.364 ops/s
# Warmup Iteration  24: 89601.313 ops/s
# Warmup Iteration  25: 92973.562 ops/s
# Warmup Iteration  26: 95591.952 ops/s
# Warmup Iteration  27: 97434.705 ops/s
# Warmup Iteration  28: 97098.862 ops/s
# Warmup Iteration  29: 93197.518 ops/s
# Warmup Iteration  30: 94738.402 ops/s
Iteration   1: 93327.596 ops/s
Iteration   2: 91599.184 ops/s
Iteration   3: 89036.839 ops/s
Iteration   4: 92686.934 ops/s
Iteration   5: 85081.490 ops/s
Iteration   6: 97382.608 ops/s
Iteration   7: 94287.020 ops/s
Iteration   8: 83617.168 ops/s
Iteration   9: 91974.053 ops/s
Iteration  10: 94964.381 ops/s
Iteration  11: 92120.056 ops/s
Iteration  12: 96007.927 ops/s
Iteration  13: 85092.614 ops/s
Iteration  14: 98773.679 ops/s
Iteration  15: 93498.990 ops/s
Iteration  16: 98185.596 ops/s
Iteration  17: 97418.532 ops/s
Iteration  18: 85816.938 ops/s
Iteration  19: 92588.242 ops/s
Iteration  20: 96606.905 ops/s
Iteration  21: 83056.684 ops/s
Iteration  22: 81854.221 ops/s
Iteration  23: 91728.848 ops/s
Iteration  24: 84161.144 ops/s
Iteration  25: 90394.371 ops/s
Iteration  26: 89064.621 ops/s
Iteration  27: 89282.040 ops/s
Iteration  28: 90502.989 ops/s
Iteration  29: 98440.297 ops/s
Iteration  30: 95445.541 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipJustOverlap":
  91466.584 ±(99.9%) 3333.005 ops/s [Average]
  (min, avg, max) = (81854.221, 91466.584, 98773.679), stdev = 4988.686
  CI (99.9%): [88133.578, 94799.589] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt      Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipJustOverlap  thrpt   30  91466.584 ± 3333.005  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipJustSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipJustSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4562.495 ops/s
# Warmup Iteration   2: 36484.508 ops/s
# Warmup Iteration   3: 50766.072 ops/s
# Warmup Iteration   4: 78979.525 ops/s
# Warmup Iteration   5: 95606.306 ops/s
# Warmup Iteration   6: 88783.135 ops/s
# Warmup Iteration   7: 85109.892 ops/s
# Warmup Iteration   8: 93733.130 ops/s
# Warmup Iteration   9: 87264.128 ops/s
# Warmup Iteration  10: 92327.128 ops/s
# Warmup Iteration  11: 98023.153 ops/s
# Warmup Iteration  12: 88632.299 ops/s
# Warmup Iteration  13: 95194.813 ops/s
# Warmup Iteration  14: 100901.959 ops/s
# Warmup Iteration  15: 97539.800 ops/s
# Warmup Iteration  16: 85678.574 ops/s
# Warmup Iteration  17: 92167.260 ops/s
# Warmup Iteration  18: 88442.754 ops/s
# Warmup Iteration  19: 94834.121 ops/s
# Warmup Iteration  20: 98933.273 ops/s
# Warmup Iteration  21: 96463.556 ops/s
# Warmup Iteration  22: 93527.059 ops/s
# Warmup Iteration  23: 91690.551 ops/s
# Warmup Iteration  24: 90564.460 ops/s
# Warmup Iteration  25: 94720.463 ops/s
# Warmup Iteration  26: 88620.923 ops/s
# Warmup Iteration  27: 91552.809 ops/s
# Warmup Iteration  28: 102927.402 ops/s
# Warmup Iteration  29: 93796.568 ops/s
# Warmup Iteration  30: 86763.251 ops/s
Iteration   1: 90734.802 ops/s
Iteration   2: 91322.405 ops/s
Iteration   3: 92031.893 ops/s
Iteration   4: 96356.641 ops/s
Iteration   5: 98441.168 ops/s
Iteration   6: 93671.681 ops/s
Iteration   7: 91590.744 ops/s
Iteration   8: 96429.688 ops/s
Iteration   9: 90509.461 ops/s
Iteration  10: 92159.350 ops/s
Iteration  11: 85021.345 ops/s
Iteration  12: 90610.509 ops/s
Iteration  13: 80168.374 ops/s
Iteration  14: 89617.487 ops/s
Iteration  15: 94541.373 ops/s
Iteration  16: 99921.101 ops/s
Iteration  17: 93852.316 ops/s
Iteration  18: 90043.346 ops/s
Iteration  19: 94661.297 ops/s
Iteration  20: 94076.626 ops/s
Iteration  21: 94736.404 ops/s
Iteration  22: 96280.848 ops/s
Iteration  23: 87554.973 ops/s
Iteration  24: 94965.506 ops/s
Iteration  25: 93966.531 ops/s
Iteration  26: 91209.888 ops/s
Iteration  27: 91285.468 ops/s
Iteration  28: 89422.538 ops/s
Iteration  29: 88546.597 ops/s
Iteration  30: 89036.405 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipJustSkip":
  92092.226 ±(99.9%) 2655.056 ops/s [Average]
  (min, avg, max) = (80168.374, 92092.226, 99921.101), stdev = 3973.963
  CI (99.9%): [89437.169, 94747.282] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipJustSkip  thrpt   30  92092.226 ± 2655.056  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_errorPassesThruMap2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_errorPassesThruMap2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.781 ops/s
# Warmup Iteration   2: 33898.383 ops/s
# Warmup Iteration   3: 87575.480 ops/s
# Warmup Iteration   4: 155613.218 ops/s
# Warmup Iteration   5: 245609.373 ops/s
# Warmup Iteration   6: 293178.137 ops/s
# Warmup Iteration   7: 315751.684 ops/s
# Warmup Iteration   8: 299771.882 ops/s
# Warmup Iteration   9: 309519.048 ops/s
# Warmup Iteration  10: 293131.658 ops/s
# Warmup Iteration  11: 305752.992 ops/s
# Warmup Iteration  12: 299211.660 ops/s
# Warmup Iteration  13: 305842.369 ops/s
# Warmup Iteration  14: 298168.140 ops/s
# Warmup Iteration  15: 299372.497 ops/s
# Warmup Iteration  16: 314231.998 ops/s
# Warmup Iteration  17: 301334.231 ops/s
# Warmup Iteration  18: 296595.500 ops/s
# Warmup Iteration  19: 306411.521 ops/s
# Warmup Iteration  20: 292252.867 ops/s
# Warmup Iteration  21: 320491.624 ops/s
# Warmup Iteration  22: 303997.440 ops/s
# Warmup Iteration  23: 311264.930 ops/s
# Warmup Iteration  24: 298648.832 ops/s
# Warmup Iteration  25: 310229.609 ops/s
# Warmup Iteration  26: 304740.875 ops/s
# Warmup Iteration  27: 299238.844 ops/s
# Warmup Iteration  28: 309138.440 ops/s
# Warmup Iteration  29: 310159.924 ops/s
# Warmup Iteration  30: 301574.264 ops/s
Iteration   1: 313940.396 ops/s
Iteration   2: 314518.167 ops/s
Iteration   3: 301815.417 ops/s
Iteration   4: 312642.247 ops/s
Iteration   5: 298568.889 ops/s
Iteration   6: 312525.927 ops/s
Iteration   7: 303828.945 ops/s
Iteration   8: 312585.977 ops/s
Iteration   9: 299871.861 ops/s
Iteration  10: 306742.181 ops/s
Iteration  11: 305292.387 ops/s
Iteration  12: 309500.959 ops/s
Iteration  13: 311142.168 ops/s
Iteration  14: 295969.192 ops/s
Iteration  15: 302370.562 ops/s
Iteration  16: 314482.295 ops/s
Iteration  17: 295938.431 ops/s
Iteration  18: 317259.594 ops/s
Iteration  19: 295974.358 ops/s
Iteration  20: 313954.022 ops/s
Iteration  21: 304151.636 ops/s
Iteration  22: 288462.086 ops/s
Iteration  23: 311398.168 ops/s
Iteration  24: 304373.070 ops/s
Iteration  25: 317520.426 ops/s
Iteration  26: 300057.746 ops/s
Iteration  27: 300152.578 ops/s
Iteration  28: 311062.889 ops/s
Iteration  29: 314275.032 ops/s
Iteration  30: 301985.035 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_errorPassesThruMap2":
  306412.088 ±(99.9%) 5036.680 ops/s [Average]
  (min, avg, max) = (288462.086, 306412.088, 317520.426), stdev = 7538.667
  CI (99.9%): [301375.408, 311448.769] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ObservableMapTest._Benchmark.benchmark_errorPassesThruMap2  thrpt   30  306412.088 ± 5036.680  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_observerEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_observerEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4209108.938 ops/s
# Warmup Iteration   2: 6441516.761 ops/s
# Warmup Iteration   3: 8810696.694 ops/s
# Warmup Iteration   4: 8663158.408 ops/s
# Warmup Iteration   5: 8903147.464 ops/s
# Warmup Iteration   6: 8779098.692 ops/s
# Warmup Iteration   7: 9288578.394 ops/s
# Warmup Iteration   8: 8580006.781 ops/s
# Warmup Iteration   9: 8712728.992 ops/s
# Warmup Iteration  10: 9208246.281 ops/s
# Warmup Iteration  11: 8751609.300 ops/s
# Warmup Iteration  12: 8791009.097 ops/s
# Warmup Iteration  13: 9204707.796 ops/s
# Warmup Iteration  14: 8727467.982 ops/s
# Warmup Iteration  15: 8941917.381 ops/s
# Warmup Iteration  16: 8916797.400 ops/s
# Warmup Iteration  17: 9041818.174 ops/s
# Warmup Iteration  18: 8609922.510 ops/s
# Warmup Iteration  19: 8897638.547 ops/s
# Warmup Iteration  20: 8984931.116 ops/s
# Warmup Iteration  21: 8727983.183 ops/s
# Warmup Iteration  22: 8944928.681 ops/s
# Warmup Iteration  23: 8742315.338 ops/s
# Warmup Iteration  24: 8749830.655 ops/s
# Warmup Iteration  25: 8960694.019 ops/s
# Warmup Iteration  26: 8759841.893 ops/s
# Warmup Iteration  27: 9003978.705 ops/s
# Warmup Iteration  28: 8875446.623 ops/s
# Warmup Iteration  29: 8925550.516 ops/s
# Warmup Iteration  30: 8985220.307 ops/s
Iteration   1: 8639551.407 ops/s
Iteration   2: 9013819.893 ops/s
Iteration   3: 9083067.599 ops/s
Iteration   4: 8893394.040 ops/s
Iteration   5: 8944524.011 ops/s
Iteration   6: 8611982.679 ops/s
Iteration   7: 7199459.098 ops/s
Iteration   8: 9104600.415 ops/s
Iteration   9: 8846934.654 ops/s
Iteration  10: 9163283.333 ops/s
Iteration  11: 8560000.088 ops/s
Iteration  12: 9111218.122 ops/s
Iteration  13: 8659935.883 ops/s
Iteration  14: 8794721.837 ops/s
Iteration  15: 9239265.086 ops/s
Iteration  16: 9137703.966 ops/s
Iteration  17: 8727040.632 ops/s
Iteration  18: 8911042.322 ops/s
Iteration  19: 8864612.971 ops/s
Iteration  20: 8967396.354 ops/s
Iteration  21: 8636239.409 ops/s
Iteration  22: 9041388.637 ops/s
Iteration  23: 8711552.365 ops/s
Iteration  24: 8639217.216 ops/s
Iteration  25: 9164647.528 ops/s
Iteration  26: 8636311.761 ops/s
Iteration  27: 8927518.751 ops/s
Iteration  28: 8580491.287 ops/s
Iteration  29: 8838454.216 ops/s
Iteration  30: 9318490.444 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_observerEmpty":
  8832262.200 ±(99.9%) 251771.654 ops/s [Average]
  (min, avg, max) = (7199459.098, 8832262.200, 9318490.444), stdev = 376839.987
  CI (99.9%): [8580490.546, 9084033.854] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
MaybeBlockingSubscribeTest._Benchmark.benchmark_observerEmpty  thrpt   30  8832262.200 ± 251771.654  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2826540.994 ops/s
# Warmup Iteration   2: 5454574.508 ops/s
# Warmup Iteration   3: 7692861.832 ops/s
# Warmup Iteration   4: 7512066.305 ops/s
# Warmup Iteration   5: 7177624.989 ops/s
# Warmup Iteration   6: 7621595.964 ops/s
# Warmup Iteration   7: 7591921.452 ops/s
# Warmup Iteration   8: 7624921.194 ops/s
# Warmup Iteration   9: 7536148.054 ops/s
# Warmup Iteration  10: 7318613.918 ops/s
# Warmup Iteration  11: 7536464.594 ops/s
# Warmup Iteration  12: 7692528.133 ops/s
# Warmup Iteration  13: 7396635.551 ops/s
# Warmup Iteration  14: 7618205.241 ops/s
# Warmup Iteration  15: 7343675.204 ops/s
# Warmup Iteration  16: 7448741.833 ops/s
# Warmup Iteration  17: 7481000.844 ops/s
# Warmup Iteration  18: 7305668.124 ops/s
# Warmup Iteration  19: 7585902.701 ops/s
# Warmup Iteration  20: 7431515.224 ops/s
# Warmup Iteration  21: 7750486.004 ops/s
# Warmup Iteration  22: 7550965.016 ops/s
# Warmup Iteration  23: 7314899.456 ops/s
# Warmup Iteration  24: 7656647.225 ops/s
# Warmup Iteration  25: 7290265.249 ops/s
# Warmup Iteration  26: 7755375.818 ops/s
# Warmup Iteration  27: 7103706.927 ops/s
# Warmup Iteration  28: 7742625.917 ops/s
# Warmup Iteration  29: 7701079.002 ops/s
# Warmup Iteration  30: 7538900.866 ops/s
Iteration   1: 7616123.128 ops/s
Iteration   2: 7739295.181 ops/s
Iteration   3: 7063317.528 ops/s
Iteration   4: 7811989.939 ops/s
Iteration   5: 7616355.556 ops/s
Iteration   6: 7490040.184 ops/s
Iteration   7: 7579615.086 ops/s
Iteration   8: 7620550.141 ops/s
Iteration   9: 7311042.835 ops/s
Iteration  10: 7487406.582 ops/s
Iteration  11: 7752062.204 ops/s
Iteration  12: 7350357.983 ops/s
Iteration  13: 7421613.417 ops/s
Iteration  14: 7814387.777 ops/s
Iteration  15: 7445469.436 ops/s
Iteration  16: 7464317.654 ops/s
Iteration  17: 7787489.643 ops/s
Iteration  18: 7336322.671 ops/s
Iteration  19: 7523450.200 ops/s
Iteration  20: 7669435.647 ops/s
Iteration  21: 7738378.947 ops/s
Iteration  22: 7540259.913 ops/s
Iteration  23: 7440204.420 ops/s
Iteration  24: 7532248.277 ops/s
Iteration  25: 7444435.652 ops/s
Iteration  26: 7666220.817 ops/s
Iteration  27: 7213881.045 ops/s
Iteration  28: 7662634.254 ops/s
Iteration  29: 7672949.830 ops/s
Iteration  30: 7505599.939 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleEmpty":
  7543915.196 ±(99.9%) 120105.631 ops/s [Average]
  (min, avg, max) = (7063317.528, 7543915.196, 7814387.777), stdev = 179768.468
  CI (99.9%): [7423809.565, 7664020.827] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleEmpty  thrpt   30  7543915.196 ± 120105.631  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2149379.279 ops/s
# Warmup Iteration   2: 5319195.076 ops/s
# Warmup Iteration   3: 7467663.404 ops/s
# Warmup Iteration   4: 7686377.002 ops/s
# Warmup Iteration   5: 7464439.046 ops/s
# Warmup Iteration   6: 7545693.103 ops/s
# Warmup Iteration   7: 7397542.682 ops/s
# Warmup Iteration   8: 7567974.826 ops/s
# Warmup Iteration   9: 7574773.978 ops/s
# Warmup Iteration  10: 7396447.755 ops/s
# Warmup Iteration  11: 7617315.557 ops/s
# Warmup Iteration  12: 7441961.497 ops/s
# Warmup Iteration  13: 7451969.259 ops/s
# Warmup Iteration  14: 7881197.318 ops/s
# Warmup Iteration  15: 7308266.935 ops/s
# Warmup Iteration  16: 7404246.109 ops/s
# Warmup Iteration  17: 7726267.454 ops/s
# Warmup Iteration  18: 7616022.180 ops/s
# Warmup Iteration  19: 7328155.501 ops/s
# Warmup Iteration  20: 7550792.184 ops/s
# Warmup Iteration  21: 7522249.732 ops/s
# Warmup Iteration  22: 7671823.836 ops/s
# Warmup Iteration  23: 7389550.764 ops/s
# Warmup Iteration  24: 7529298.858 ops/s
# Warmup Iteration  25: 7935513.780 ops/s
# Warmup Iteration  26: 7344122.471 ops/s
# Warmup Iteration  27: 7654392.562 ops/s
# Warmup Iteration  28: 7378627.193 ops/s
# Warmup Iteration  29: 7658941.869 ops/s
# Warmup Iteration  30: 7676465.556 ops/s
Iteration   1: 6268241.206 ops/s
Iteration   2: 7351128.794 ops/s
Iteration   3: 7798458.108 ops/s
Iteration   4: 7418864.314 ops/s
Iteration   5: 7296928.271 ops/s
Iteration   6: 7624173.826 ops/s
Iteration   7: 7526328.748 ops/s
Iteration   8: 7482657.246 ops/s
Iteration   9: 7884924.361 ops/s
Iteration  10: 7393107.397 ops/s
Iteration  11: 7697774.299 ops/s
Iteration  12: 7774218.718 ops/s
Iteration  13: 7618463.962 ops/s
Iteration  14: 7561944.711 ops/s
Iteration  15: 7573385.032 ops/s
Iteration  16: 7535187.147 ops/s
Iteration  17: 7263609.091 ops/s
Iteration  18: 7623278.199 ops/s
Iteration  19: 7331862.149 ops/s
Iteration  20: 7791741.855 ops/s
Iteration  21: 7659849.388 ops/s
Iteration  22: 7517494.993 ops/s
Iteration  23: 7813070.919 ops/s
Iteration  24: 7506654.152 ops/s
Iteration  25: 7230381.146 ops/s
Iteration  26: 7826439.528 ops/s
Iteration  27: 7646978.649 ops/s
Iteration  28: 7396633.225 ops/s
Iteration  29: 7640438.343 ops/s
Iteration  30: 7693686.882 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementEmpty":
  7524930.155 ±(99.9%) 198101.704 ops/s [Average]
  (min, avg, max) = (6268241.206, 7524930.155, 7884924.361), stdev = 296509.326
  CI (99.9%): [7326828.452, 7723031.859] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementEmpty  thrpt   30  7524930.155 ± 198101.704  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_bufferSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_bufferSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 302904.857 ops/s
# Warmup Iteration   2: 569273.091 ops/s
# Warmup Iteration   3: 640492.977 ops/s
# Warmup Iteration   4: 544591.128 ops/s
# Warmup Iteration   5: 674078.889 ops/s
# Warmup Iteration   6: 682717.411 ops/s
# Warmup Iteration   7: 567642.759 ops/s
# Warmup Iteration   8: 682045.950 ops/s
# Warmup Iteration   9: 644967.542 ops/s
# Warmup Iteration  10: 681644.453 ops/s
# Warmup Iteration  11: 662469.885 ops/s
# Warmup Iteration  12: 659852.614 ops/s
# Warmup Iteration  13: 677237.658 ops/s
# Warmup Iteration  14: 657554.202 ops/s
# Warmup Iteration  15: 671616.540 ops/s
# Warmup Iteration  16: 651799.391 ops/s
# Warmup Iteration  17: 691359.222 ops/s
# Warmup Iteration  18: 710992.157 ops/s
# Warmup Iteration  19: 725394.057 ops/s
# Warmup Iteration  20: 683075.677 ops/s
# Warmup Iteration  21: 722375.236 ops/s
# Warmup Iteration  22: 678051.280 ops/s
# Warmup Iteration  23: 711776.040 ops/s
# Warmup Iteration  24: 709803.756 ops/s
# Warmup Iteration  25: 690376.900 ops/s
# Warmup Iteration  26: 682048.189 ops/s
# Warmup Iteration  27: 703440.171 ops/s
# Warmup Iteration  28: 685237.457 ops/s
# Warmup Iteration  29: 688743.997 ops/s
# Warmup Iteration  30: 722300.392 ops/s
Iteration   1: 669981.106 ops/s
Iteration   2: 716738.377 ops/s
Iteration   3: 719493.663 ops/s
Iteration   4: 667256.281 ops/s
Iteration   5: 703811.216 ops/s
Iteration   6: 700073.886 ops/s
Iteration   7: 679757.143 ops/s
Iteration   8: 715507.243 ops/s
Iteration   9: 693635.338 ops/s
Iteration  10: 691985.260 ops/s
Iteration  11: 696332.140 ops/s
Iteration  12: 673277.296 ops/s
Iteration  13: 724486.510 ops/s
Iteration  14: 701764.058 ops/s
Iteration  15: 671393.218 ops/s
Iteration  16: 719843.967 ops/s
Iteration  17: 671234.351 ops/s
Iteration  18: 692544.870 ops/s
Iteration  19: 718085.008 ops/s
Iteration  20: 679602.424 ops/s
Iteration  21: 686510.058 ops/s
Iteration  22: 730048.254 ops/s
Iteration  23: 726513.081 ops/s
Iteration  24: 722803.570 ops/s
Iteration  25: 667637.070 ops/s
Iteration  26: 710169.965 ops/s
Iteration  27: 688677.166 ops/s
Iteration  28: 711182.707 ops/s
Iteration  29: 698331.912 ops/s
Iteration  30: 685010.939 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_bufferSupplierReturnsNull":
  697789.603 ±(99.9%) 13225.802 ops/s [Average]
  (min, avg, max) = (667256.281, 697789.603, 730048.254), stdev = 19795.760
  CI (99.9%): [684563.800, 711015.405] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_bufferSupplierReturnsNull  thrpt   30  697789.603 ± 13225.802  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_errorOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_errorOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 180334.964 ops/s
# Warmup Iteration   2: 575133.639 ops/s
# Warmup Iteration   3: 719015.333 ops/s
# Warmup Iteration   4: 663324.679 ops/s
# Warmup Iteration   5: 627166.064 ops/s
# Warmup Iteration   6: 666635.932 ops/s
# Warmup Iteration   7: 597446.970 ops/s
# Warmup Iteration   8: 714253.461 ops/s
# Warmup Iteration   9: 673335.627 ops/s
# Warmup Iteration  10: 700918.873 ops/s
# Warmup Iteration  11: 714420.635 ops/s
# Warmup Iteration  12: 687597.827 ops/s
# Warmup Iteration  13: 710728.284 ops/s
# Warmup Iteration  14: 694954.342 ops/s
# Warmup Iteration  15: 675106.094 ops/s
# Warmup Iteration  16: 700316.979 ops/s
# Warmup Iteration  17: 729734.949 ops/s
# Warmup Iteration  18: 734059.919 ops/s
# Warmup Iteration  19: 723287.430 ops/s
# Warmup Iteration  20: 735457.198 ops/s
# Warmup Iteration  21: 768679.485 ops/s
# Warmup Iteration  22: 708935.142 ops/s
# Warmup Iteration  23: 708166.924 ops/s
# Warmup Iteration  24: 729666.365 ops/s
# Warmup Iteration  25: 727213.396 ops/s
# Warmup Iteration  26: 590861.811 ops/s
# Warmup Iteration  27: 738720.674 ops/s
# Warmup Iteration  28: 703436.732 ops/s
# Warmup Iteration  29: 739535.951 ops/s
# Warmup Iteration  30: 726361.430 ops/s
Iteration   1: 732492.598 ops/s
Iteration   2: 739764.412 ops/s
Iteration   3: 752796.923 ops/s
Iteration   4: 727151.238 ops/s
Iteration   5: 735252.438 ops/s
Iteration   6: 735853.911 ops/s
Iteration   7: 760634.437 ops/s
Iteration   8: 751672.590 ops/s
Iteration   9: 724378.580 ops/s
Iteration  10: 741835.970 ops/s
Iteration  11: 727415.332 ops/s
Iteration  12: 726763.132 ops/s
Iteration  13: 760184.339 ops/s
Iteration  14: 721449.502 ops/s
Iteration  15: 734102.127 ops/s
Iteration  16: 730175.560 ops/s
Iteration  17: 739901.768 ops/s
Iteration  18: 743085.385 ops/s
Iteration  19: 709379.404 ops/s
Iteration  20: 774718.848 ops/s
Iteration  21: 710660.050 ops/s
Iteration  22: 757644.738 ops/s
Iteration  23: 704513.871 ops/s
Iteration  24: 744044.946 ops/s
Iteration  25: 733203.616 ops/s
Iteration  26: 726765.709 ops/s
Iteration  27: 720232.875 ops/s
Iteration  28: 731701.596 ops/s
Iteration  29: 744956.440 ops/s
Iteration  30: 739311.507 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_errorOther":
  736068.128 ±(99.9%) 10595.353 ops/s [Average]
  (min, avg, max) = (704513.871, 736068.128, 774718.848), stdev = 15858.627
  CI (99.9%): [725472.775, 746663.481] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_errorOther  thrpt   30  736068.128 ± 10595.353  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_errorOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_errorOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 197913.529 ops/s
# Warmup Iteration   2: 600870.890 ops/s
# Warmup Iteration   3: 655329.102 ops/s
# Warmup Iteration   4: 703348.552 ops/s
# Warmup Iteration   5: 693303.977 ops/s
# Warmup Iteration   6: 672129.668 ops/s
# Warmup Iteration   7: 703303.770 ops/s
# Warmup Iteration   8: 658454.061 ops/s
# Warmup Iteration   9: 679175.412 ops/s
# Warmup Iteration  10: 687471.108 ops/s
# Warmup Iteration  11: 629533.250 ops/s
# Warmup Iteration  12: 714540.549 ops/s
# Warmup Iteration  13: 674669.892 ops/s
# Warmup Iteration  14: 695596.838 ops/s
# Warmup Iteration  15: 714116.603 ops/s
# Warmup Iteration  16: 668061.688 ops/s
# Warmup Iteration  17: 761666.981 ops/s
# Warmup Iteration  18: 702120.060 ops/s
# Warmup Iteration  19: 748016.230 ops/s
# Warmup Iteration  20: 725704.839 ops/s
# Warmup Iteration  21: 739961.076 ops/s
# Warmup Iteration  22: 733477.643 ops/s
# Warmup Iteration  23: 752401.720 ops/s
# Warmup Iteration  24: 720932.256 ops/s
# Warmup Iteration  25: 721223.473 ops/s
# Warmup Iteration  26: 764770.267 ops/s
# Warmup Iteration  27: 726507.322 ops/s
# Warmup Iteration  28: 735405.121 ops/s
# Warmup Iteration  29: 706775.596 ops/s
# Warmup Iteration  30: 751160.803 ops/s
Iteration   1: 750101.148 ops/s
Iteration   2: 714892.617 ops/s
Iteration   3: 729948.252 ops/s
Iteration   4: 766630.518 ops/s
Iteration   5: 732341.828 ops/s
Iteration   6: 734870.961 ops/s
Iteration   7: 751957.773 ops/s
Iteration   8: 719124.478 ops/s
Iteration   9: 761774.006 ops/s
Iteration  10: 760898.258 ops/s
Iteration  11: 725098.664 ops/s
Iteration  12: 718058.963 ops/s
Iteration  13: 744974.836 ops/s
Iteration  14: 693320.348 ops/s
Iteration  15: 731619.079 ops/s
Iteration  16: 730801.254 ops/s
Iteration  17: 731876.286 ops/s
Iteration  18: 753828.585 ops/s
Iteration  19: 759888.119 ops/s
Iteration  20: 720428.828 ops/s
Iteration  21: 763837.198 ops/s
Iteration  22: 710318.188 ops/s
Iteration  23: 722975.851 ops/s
Iteration  24: 747830.402 ops/s
Iteration  25: 741718.345 ops/s
Iteration  26: 721877.191 ops/s
Iteration  27: 745564.232 ops/s
Iteration  28: 725660.184 ops/s
Iteration  29: 723227.082 ops/s
Iteration  30: 745782.940 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_errorOther":
  736040.880 ±(99.9%) 12046.449 ops/s [Average]
  (min, avg, max) = (693320.348, 736040.880, 766630.518), stdev = 18030.560
  CI (99.9%): [723994.431, 748087.330] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
MaybeSwitchIfEmptyTest._Benchmark.benchmark_errorOther  thrpt   30  736040.880 ± 12046.449  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_scanSeedSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_scanSeedSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 335154.973 ops/s
# Warmup Iteration   2: 597893.057 ops/s
# Warmup Iteration   3: 604780.113 ops/s
# Warmup Iteration   4: 662721.444 ops/s
# Warmup Iteration   5: 603609.314 ops/s
# Warmup Iteration   6: 668982.635 ops/s
# Warmup Iteration   7: 634454.839 ops/s
# Warmup Iteration   8: 661585.508 ops/s
# Warmup Iteration   9: 666182.935 ops/s
# Warmup Iteration  10: 648516.794 ops/s
# Warmup Iteration  11: 642097.830 ops/s
# Warmup Iteration  12: 677318.061 ops/s
# Warmup Iteration  13: 644851.607 ops/s
# Warmup Iteration  14: 681972.640 ops/s
# Warmup Iteration  15: 644808.509 ops/s
# Warmup Iteration  16: 637612.141 ops/s
# Warmup Iteration  17: 691837.864 ops/s
# Warmup Iteration  18: 665873.674 ops/s
# Warmup Iteration  19: 697140.508 ops/s
# Warmup Iteration  20: 697232.472 ops/s
# Warmup Iteration  21: 581078.341 ops/s
# Warmup Iteration  22: 695866.575 ops/s
# Warmup Iteration  23: 682515.110 ops/s
# Warmup Iteration  24: 698694.472 ops/s
# Warmup Iteration  25: 684207.224 ops/s
# Warmup Iteration  26: 686649.749 ops/s
# Warmup Iteration  27: 687820.605 ops/s
# Warmup Iteration  28: 676357.154 ops/s
# Warmup Iteration  29: 719786.172 ops/s
# Warmup Iteration  30: 685975.048 ops/s
Iteration   1: 661450.678 ops/s
Iteration   2: 714308.117 ops/s
Iteration   3: 678918.906 ops/s
Iteration   4: 685819.513 ops/s
Iteration   5: 685507.227 ops/s
Iteration   6: 683775.130 ops/s
Iteration   7: 724337.073 ops/s
Iteration   8: 675277.091 ops/s
Iteration   9: 678607.793 ops/s
Iteration  10: 709554.210 ops/s
Iteration  11: 670406.945 ops/s
Iteration  12: 701395.482 ops/s
Iteration  13: 681030.814 ops/s
Iteration  14: 693064.971 ops/s
Iteration  15: 682469.846 ops/s
Iteration  16: 660980.438 ops/s
Iteration  17: 698734.385 ops/s
Iteration  18: 673677.878 ops/s
Iteration  19: 680373.425 ops/s
Iteration  20: 673514.506 ops/s
Iteration  21: 668398.632 ops/s
Iteration  22: 690423.917 ops/s
Iteration  23: 689489.892 ops/s
Iteration  24: 694124.378 ops/s
Iteration  25: 667769.085 ops/s
Iteration  26: 708113.793 ops/s
Iteration  27: 669877.012 ops/s
Iteration  28: 682845.650 ops/s
Iteration  29: 707445.798 ops/s
Iteration  30: 692334.386 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_scanSeedSupplierReturnsNull":
  686134.232 ±(99.9%) 10633.977 ops/s [Average]
  (min, avg, max) = (660980.438, 686134.232, 724337.073), stdev = 15916.438
  CI (99.9%): [675500.255, 696768.210] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_scanSeedSupplierReturnsNull  thrpt   30  686134.232 ± 10633.977  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_observerDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_observerDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65272.034 ops/s
# Warmup Iteration   2: 279701.524 ops/s
# Warmup Iteration   3: 444449.008 ops/s
# Warmup Iteration   4: 479830.901 ops/s
# Warmup Iteration   5: 451543.635 ops/s
# Warmup Iteration   6: 502017.090 ops/s
# Warmup Iteration   7: 527373.919 ops/s
# Warmup Iteration   8: 506901.712 ops/s
# Warmup Iteration   9: 508242.879 ops/s
# Warmup Iteration  10: 531622.092 ops/s
# Warmup Iteration  11: 496527.611 ops/s
# Warmup Iteration  12: 500272.105 ops/s
# Warmup Iteration  13: 516077.270 ops/s
# Warmup Iteration  14: 506827.462 ops/s
# Warmup Iteration  15: 527476.776 ops/s
# Warmup Iteration  16: 506619.377 ops/s
# Warmup Iteration  17: 546875.937 ops/s
# Warmup Iteration  18: 526373.863 ops/s
# Warmup Iteration  19: 536678.322 ops/s
# Warmup Iteration  20: 528540.711 ops/s
# Warmup Iteration  21: 537176.063 ops/s
# Warmup Iteration  22: 547609.490 ops/s
# Warmup Iteration  23: 518222.843 ops/s
# Warmup Iteration  24: 535129.367 ops/s
# Warmup Iteration  25: 535588.042 ops/s
# Warmup Iteration  26: 517315.743 ops/s
# Warmup Iteration  27: 538589.709 ops/s
# Warmup Iteration  28: 517307.909 ops/s
# Warmup Iteration  29: 531036.671 ops/s
# Warmup Iteration  30: 541435.224 ops/s
Iteration   1: 526413.763 ops/s
Iteration   2: 528743.496 ops/s
Iteration   3: 527539.925 ops/s
Iteration   4: 542672.540 ops/s
Iteration   5: 534885.578 ops/s
Iteration   6: 526589.932 ops/s
Iteration   7: 537200.453 ops/s
Iteration   8: 516209.737 ops/s
Iteration   9: 544277.878 ops/s
Iteration  10: 522681.760 ops/s
Iteration  11: 543829.888 ops/s
Iteration  12: 518430.419 ops/s
Iteration  13: 550445.137 ops/s
Iteration  14: 541465.696 ops/s
Iteration  15: 509510.984 ops/s
Iteration  16: 548833.350 ops/s
Iteration  17: 545193.749 ops/s
Iteration  18: 523329.397 ops/s
Iteration  19: 541448.686 ops/s
Iteration  20: 514939.172 ops/s
Iteration  21: 538280.894 ops/s
Iteration  22: 518910.204 ops/s
Iteration  23: 504701.344 ops/s
Iteration  24: 515969.854 ops/s
Iteration  25: 540206.098 ops/s
Iteration  26: 547574.079 ops/s
Iteration  27: 517371.380 ops/s
Iteration  28: 544952.128 ops/s
Iteration  29: 525125.645 ops/s
Iteration  30: 549109.131 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_observerDelayError":
  531561.410 ±(99.9%) 8893.518 ops/s [Average]
  (min, avg, max) = (504701.344, 531561.410, 550445.137), stdev = 13311.399
  CI (99.9%): [522667.892, 540454.927] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_observerDelayError  thrpt   30  531561.410 ± 8893.518  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onErrorOtherOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onErrorOtherOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21212.997 ops/s
# Warmup Iteration   2: 110361.796 ops/s
# Warmup Iteration   3: 162339.699 ops/s
# Warmup Iteration   4: 163899.633 ops/s
# Warmup Iteration   5: 170940.923 ops/s
# Warmup Iteration   6: 188208.010 ops/s
# Warmup Iteration   7: 180505.963 ops/s
# Warmup Iteration   8: 184561.910 ops/s
# Warmup Iteration   9: 183692.782 ops/s
# Warmup Iteration  10: 187197.501 ops/s
# Warmup Iteration  11: 183311.511 ops/s
# Warmup Iteration  12: 192093.890 ops/s
# Warmup Iteration  13: 180079.796 ops/s
# Warmup Iteration  14: 189099.436 ops/s
# Warmup Iteration  15: 178495.469 ops/s
# Warmup Iteration  16: 153568.130 ops/s
# Warmup Iteration  17: 195132.052 ops/s
# Warmup Iteration  18: 187355.454 ops/s
# Warmup Iteration  19: 196073.452 ops/s
# Warmup Iteration  20: 191766.974 ops/s
# Warmup Iteration  21: 187467.259 ops/s
# Warmup Iteration  22: 192858.075 ops/s
# Warmup Iteration  23: 189097.014 ops/s
# Warmup Iteration  24: 186653.911 ops/s
# Warmup Iteration  25: 195159.464 ops/s
# Warmup Iteration  26: 191569.568 ops/s
# Warmup Iteration  27: 194752.820 ops/s
# Warmup Iteration  28: 186583.202 ops/s
# Warmup Iteration  29: 191863.319 ops/s
# Warmup Iteration  30: 186698.003 ops/s
Iteration   1: 191218.118 ops/s
Iteration   2: 185666.054 ops/s
Iteration   3: 182958.907 ops/s
Iteration   4: 190659.988 ops/s
Iteration   5: 194730.328 ops/s
Iteration   6: 183654.287 ops/s
Iteration   7: 194419.829 ops/s
Iteration   8: 189653.333 ops/s
Iteration   9: 196754.867 ops/s
Iteration  10: 181394.669 ops/s
Iteration  11: 189766.995 ops/s
Iteration  12: 197231.894 ops/s
Iteration  13: 187621.999 ops/s
Iteration  14: 190504.843 ops/s
Iteration  15: 191322.785 ops/s
Iteration  16: 183519.625 ops/s
Iteration  17: 192972.401 ops/s
Iteration  18: 192516.604 ops/s
Iteration  19: 188047.280 ops/s
Iteration  20: 193728.231 ops/s
Iteration  21: 187010.034 ops/s
Iteration  22: 193136.101 ops/s
Iteration  23: 186392.725 ops/s
Iteration  24: 190884.889 ops/s
Iteration  25: 202698.397 ops/s
Iteration  26: 184394.529 ops/s
Iteration  27: 195862.954 ops/s
Iteration  28: 187440.464 ops/s
Iteration  29: 191448.581 ops/s
Iteration  30: 190754.567 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onErrorOtherOverflow":
  190278.876 ±(99.9%) 3220.091 ops/s [Average]
  (min, avg, max) = (181394.669, 190278.876, 202698.397), stdev = 4819.681
  CI (99.9%): [187058.785, 193498.967] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_onErrorOtherOverflow  thrpt   30  190278.876 ± 3220.091  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onNextSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onNextSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 122632.110 ops/s
# Warmup Iteration   2: 714767.665 ops/s
# Warmup Iteration   3: 1319972.723 ops/s
# Warmup Iteration   4: 1587341.127 ops/s
# Warmup Iteration   5: 1660237.763 ops/s
# Warmup Iteration   6: 1669232.956 ops/s
# Warmup Iteration   7: 1626037.134 ops/s
# Warmup Iteration   8: 1668828.196 ops/s
# Warmup Iteration   9: 1574943.730 ops/s
# Warmup Iteration  10: 1704801.825 ops/s
# Warmup Iteration  11: 1663203.733 ops/s
# Warmup Iteration  12: 1638735.966 ops/s
# Warmup Iteration  13: 1676257.173 ops/s
# Warmup Iteration  14: 1596609.046 ops/s
# Warmup Iteration  15: 1654332.406 ops/s
# Warmup Iteration  16: 1727261.630 ops/s
# Warmup Iteration  17: 1608321.833 ops/s
# Warmup Iteration  18: 1677903.188 ops/s
# Warmup Iteration  19: 1707582.856 ops/s
# Warmup Iteration  20: 1596019.516 ops/s
# Warmup Iteration  21: 1669134.594 ops/s
# Warmup Iteration  22: 1580716.913 ops/s
# Warmup Iteration  23: 1598712.298 ops/s
# Warmup Iteration  24: 1679438.379 ops/s
# Warmup Iteration  25: 1684388.860 ops/s
# Warmup Iteration  26: 1664056.402 ops/s
# Warmup Iteration  27: 1658330.714 ops/s
# Warmup Iteration  28: 1594493.268 ops/s
# Warmup Iteration  29: 1638717.606 ops/s
# Warmup Iteration  30: 1641914.039 ops/s
Iteration   1: 1652461.206 ops/s
Iteration   2: 1648385.461 ops/s
Iteration   3: 1658740.412 ops/s
Iteration   4: 1641515.851 ops/s
Iteration   5: 1631388.762 ops/s
Iteration   6: 1690471.391 ops/s
Iteration   7: 1652810.668 ops/s
Iteration   8: 1660543.678 ops/s
Iteration   9: 1729752.268 ops/s
Iteration  10: 1615138.095 ops/s
Iteration  11: 1677138.722 ops/s
Iteration  12: 1610611.726 ops/s
Iteration  13: 1661965.085 ops/s
Iteration  14: 1700809.496 ops/s
Iteration  15: 1586601.070 ops/s
Iteration  16: 1636692.201 ops/s
Iteration  17: 1709762.902 ops/s
Iteration  18: 1607322.691 ops/s
Iteration  19: 1639980.615 ops/s
Iteration  20: 1613798.591 ops/s
Iteration  21: 1648353.081 ops/s
Iteration  22: 1674414.010 ops/s
Iteration  23: 1630890.515 ops/s
Iteration  24: 1694804.258 ops/s
Iteration  25: 1670896.250 ops/s
Iteration  26: 1575407.812 ops/s
Iteration  27: 1713054.322 ops/s
Iteration  28: 1615126.570 ops/s
Iteration  29: 1709955.334 ops/s
Iteration  30: 1644361.808 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onNextSlowPath":
  1653438.495 ±(99.9%) 25811.892 ops/s [Average]
  (min, avg, max) = (1575407.812, 1653438.495, 1729752.268), stdev = 38634.028
  CI (99.9%): [1627626.603, 1679250.387] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_onNextSlowPath  thrpt   30  1653438.495 ± 25811.892  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onNextSlowPathCreateQueue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onNextSlowPathCreateQueue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36052.463 ops/s
# Warmup Iteration   2: 415369.459 ops/s
# Warmup Iteration   3: 1026738.987 ops/s
# Warmup Iteration   4: 1264081.406 ops/s
# Warmup Iteration   5: 1532903.107 ops/s
# Warmup Iteration   6: 1530886.848 ops/s
# Warmup Iteration   7: 1478490.503 ops/s
# Warmup Iteration   8: 1590072.339 ops/s
# Warmup Iteration   9: 1574006.546 ops/s
# Warmup Iteration  10: 1210148.317 ops/s
# Warmup Iteration  11: 1438721.896 ops/s
# Warmup Iteration  12: 1467049.143 ops/s
# Warmup Iteration  13: 1537288.790 ops/s
# Warmup Iteration  14: 1545066.524 ops/s
# Warmup Iteration  15: 1488138.026 ops/s
# Warmup Iteration  16: 1546069.621 ops/s
# Warmup Iteration  17: 1586052.057 ops/s
# Warmup Iteration  18: 1503618.714 ops/s
# Warmup Iteration  19: 1507753.819 ops/s
# Warmup Iteration  20: 1562203.934 ops/s
# Warmup Iteration  21: 1565264.879 ops/s
# Warmup Iteration  22: 1476494.520 ops/s
# Warmup Iteration  23: 1527397.699 ops/s
# Warmup Iteration  24: 1468073.986 ops/s
# Warmup Iteration  25: 1565046.268 ops/s
# Warmup Iteration  26: 1520449.075 ops/s
# Warmup Iteration  27: 1497394.233 ops/s
# Warmup Iteration  28: 1528012.903 ops/s
# Warmup Iteration  29: 1500455.664 ops/s
# Warmup Iteration  30: 1562718.246 ops/s
Iteration   1: 1536720.893 ops/s
Iteration   2: 1549579.596 ops/s
Iteration   3: 1494910.391 ops/s
Iteration   4: 1597114.699 ops/s
Iteration   5: 1576105.896 ops/s
Iteration   6: 1469360.190 ops/s
Iteration   7: 1536711.387 ops/s
Iteration   8: 1494050.038 ops/s
Iteration   9: 1500248.034 ops/s
Iteration  10: 1567158.550 ops/s
Iteration  11: 1504003.237 ops/s
Iteration  12: 1515703.091 ops/s
Iteration  13: 1569208.067 ops/s
Iteration  14: 1433679.171 ops/s
Iteration  15: 1503236.908 ops/s
Iteration  16: 1565565.627 ops/s
Iteration  17: 1503360.817 ops/s
Iteration  18: 1543210.008 ops/s
Iteration  19: 1528226.265 ops/s
Iteration  20: 1499190.099 ops/s
Iteration  21: 1537365.407 ops/s
Iteration  22: 1508512.585 ops/s
Iteration  23: 1521705.391 ops/s
Iteration  24: 1546294.804 ops/s
Iteration  25: 1487619.125 ops/s
Iteration  26: 1564890.388 ops/s
Iteration  27: 1478085.486 ops/s
Iteration  28: 1563200.902 ops/s
Iteration  29: 1541594.741 ops/s
Iteration  30: 1509729.937 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_onNextSlowPathCreateQueue":
  1524878.058 ±(99.9%) 24344.317 ops/s [Average]
  (min, avg, max) = (1433679.171, 1524878.058, 1597114.699), stdev = 36437.431
  CI (99.9%): [1500533.740, 1549222.375] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_onNextSlowPathCreateQueue  thrpt   30  1524878.058 ± 24344.317  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_replaySelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_replaySelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 283140.012 ops/s
# Warmup Iteration   2: 509374.775 ops/s
# Warmup Iteration   3: 590266.472 ops/s
# Warmup Iteration   4: 530458.829 ops/s
# Warmup Iteration   5: 622824.016 ops/s
# Warmup Iteration   6: 630332.683 ops/s
# Warmup Iteration   7: 580730.789 ops/s
# Warmup Iteration   8: 604151.775 ops/s
# Warmup Iteration   9: 616236.883 ops/s
# Warmup Iteration  10: 590280.017 ops/s
# Warmup Iteration  11: 592661.802 ops/s
# Warmup Iteration  12: 629640.461 ops/s
# Warmup Iteration  13: 589159.247 ops/s
# Warmup Iteration  14: 617854.847 ops/s
# Warmup Iteration  15: 589376.502 ops/s
# Warmup Iteration  16: 623625.635 ops/s
# Warmup Iteration  17: 647860.198 ops/s
# Warmup Iteration  18: 641307.915 ops/s
# Warmup Iteration  19: 609886.741 ops/s
# Warmup Iteration  20: 662942.184 ops/s
# Warmup Iteration  21: 612815.089 ops/s
# Warmup Iteration  22: 634133.231 ops/s
# Warmup Iteration  23: 643366.613 ops/s
# Warmup Iteration  24: 611150.082 ops/s
# Warmup Iteration  25: 654491.842 ops/s
# Warmup Iteration  26: 659267.444 ops/s
# Warmup Iteration  27: 618510.420 ops/s
# Warmup Iteration  28: 631357.059 ops/s
# Warmup Iteration  29: 620650.424 ops/s
# Warmup Iteration  30: 656138.245 ops/s
Iteration   1: 628961.806 ops/s
Iteration   2: 639179.460 ops/s
Iteration   3: 634764.437 ops/s
Iteration   4: 643651.719 ops/s
Iteration   5: 624076.426 ops/s
Iteration   6: 640218.228 ops/s
Iteration   7: 653831.519 ops/s
Iteration   8: 624761.269 ops/s
Iteration   9: 634531.060 ops/s
Iteration  10: 653964.914 ops/s
Iteration  11: 625552.233 ops/s
Iteration  12: 645149.331 ops/s
Iteration  13: 631549.739 ops/s
Iteration  14: 630732.843 ops/s
Iteration  15: 643650.354 ops/s
Iteration  16: 615217.729 ops/s
Iteration  17: 642022.511 ops/s
Iteration  18: 615614.958 ops/s
Iteration  19: 637435.056 ops/s
Iteration  20: 627835.259 ops/s
Iteration  21: 637756.820 ops/s
Iteration  22: 654391.184 ops/s
Iteration  23: 624266.730 ops/s
Iteration  24: 653214.757 ops/s
Iteration  25: 622725.151 ops/s
Iteration  26: 636604.444 ops/s
Iteration  27: 632471.757 ops/s
Iteration  28: 630980.767 ops/s
Iteration  29: 666876.926 ops/s
Iteration  30: 656148.526 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_replaySelectorReturnsNull":
  636937.930 ±(99.9%) 8435.324 ops/s [Average]
  (min, avg, max) = (615217.729, 636937.930, 666876.926), stdev = 12625.597
  CI (99.9%): [628502.606, 645373.255] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_replaySelectorReturnsNull  thrpt   30  636937.930 ± 8435.324  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_resetWhileActiveIsNoOp$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_resetWhileActiveIsNoOp

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3940287.954 ops/s
# Warmup Iteration   2: 6321530.666 ops/s
# Warmup Iteration   3: 8831633.166 ops/s
# Warmup Iteration   4: 8685279.930 ops/s
# Warmup Iteration   5: 7394606.231 ops/s
# Warmup Iteration   6: 8767015.125 ops/s
# Warmup Iteration   7: 9036748.084 ops/s
# Warmup Iteration   8: 8494417.109 ops/s
# Warmup Iteration   9: 8679354.634 ops/s
# Warmup Iteration  10: 8857418.023 ops/s
# Warmup Iteration  11: 8422593.800 ops/s
# Warmup Iteration  12: 8896003.493 ops/s
# Warmup Iteration  13: 8698101.068 ops/s
# Warmup Iteration  14: 8629739.895 ops/s
# Warmup Iteration  15: 8894338.115 ops/s
# Warmup Iteration  16: 8668610.714 ops/s
# Warmup Iteration  17: 9134719.247 ops/s
# Warmup Iteration  18: 8844138.526 ops/s
# Warmup Iteration  19: 8542154.953 ops/s
# Warmup Iteration  20: 9203614.049 ops/s
# Warmup Iteration  21: 8545159.940 ops/s
# Warmup Iteration  22: 8708155.512 ops/s
# Warmup Iteration  23: 8908640.493 ops/s
# Warmup Iteration  24: 8663571.989 ops/s
# Warmup Iteration  25: 8470462.349 ops/s
# Warmup Iteration  26: 8699702.961 ops/s
# Warmup Iteration  27: 8479153.470 ops/s
# Warmup Iteration  28: 8927657.205 ops/s
# Warmup Iteration  29: 8626365.841 ops/s
# Warmup Iteration  30: 8751091.722 ops/s
Iteration   1: 9070469.629 ops/s
Iteration   2: 9141262.081 ops/s
Iteration   3: 8636577.223 ops/s
Iteration   4: 8937781.142 ops/s
Iteration   5: 8606230.675 ops/s
Iteration   6: 8887291.305 ops/s
Iteration   7: 8778104.324 ops/s
Iteration   8: 8919978.331 ops/s
Iteration   9: 8473997.051 ops/s
Iteration  10: 9038559.481 ops/s
Iteration  11: 8356314.142 ops/s
Iteration  12: 8621081.338 ops/s
Iteration  13: 9019310.890 ops/s
Iteration  14: 8583701.518 ops/s
Iteration  15: 8903038.416 ops/s
Iteration  16: 8407375.351 ops/s
Iteration  17: 9035317.399 ops/s
Iteration  18: 8544759.645 ops/s
Iteration  19: 8817632.675 ops/s
Iteration  20: 8660409.095 ops/s
Iteration  21: 8870949.294 ops/s
Iteration  22: 8848100.418 ops/s
Iteration  23: 8661619.220 ops/s
Iteration  24: 8922005.879 ops/s
Iteration  25: 8952422.847 ops/s
Iteration  26: 8607551.125 ops/s
Iteration  27: 8817461.704 ops/s
Iteration  28: 8676706.558 ops/s
Iteration  29: 8657353.315 ops/s
Iteration  30: 9096722.233 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_resetWhileActiveIsNoOp":
  8785002.810 ±(99.9%) 141792.017 ops/s [Average]
  (min, avg, max) = (8356314.142, 8785002.810, 9141262.081), stdev = 212227.632
  CI (99.9%): [8643210.793, 8926794.827] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
ObservableReplayTest._Benchmark.benchmark_resetWhileActiveIsNoOp  thrpt   30  8785002.810 ± 141792.017  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNextTest._Benchmark.benchmark_synchronousNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNextTest._Benchmark.benchmark_synchronousNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22398.451 ops/s
# Warmup Iteration   2: 298985.724 ops/s
# Warmup Iteration   3: 380715.256 ops/s
# Warmup Iteration   4: 673103.833 ops/s
# Warmup Iteration   5: 1011185.532 ops/s
# Warmup Iteration   6: 1049418.563 ops/s
# Warmup Iteration   7: 1002842.941 ops/s
# Warmup Iteration   8: 1027471.560 ops/s
# Warmup Iteration   9: 1014684.028 ops/s
# Warmup Iteration  10: 1043737.763 ops/s
# Warmup Iteration  11: 1014191.122 ops/s
# Warmup Iteration  12: 990540.557 ops/s
# Warmup Iteration  13: 1036412.505 ops/s
# Warmup Iteration  14: 1016719.711 ops/s
# Warmup Iteration  15: 999175.501 ops/s
# Warmup Iteration  16: 1035914.914 ops/s
# Warmup Iteration  17: 1004523.114 ops/s
# Warmup Iteration  18: 995546.338 ops/s
# Warmup Iteration  19: 1046632.794 ops/s
# Warmup Iteration  20: 1066113.144 ops/s
# Warmup Iteration  21: 991650.957 ops/s
# Warmup Iteration  22: 1034789.684 ops/s
# Warmup Iteration  23: 1015935.714 ops/s
# Warmup Iteration  24: 1031926.965 ops/s
# Warmup Iteration  25: 1003624.800 ops/s
# Warmup Iteration  26: 988544.321 ops/s
# Warmup Iteration  27: 1035195.853 ops/s
# Warmup Iteration  28: 1017717.822 ops/s
# Warmup Iteration  29: 1040691.794 ops/s
# Warmup Iteration  30: 1025027.477 ops/s
Iteration   1: 1039969.730 ops/s
Iteration   2: 1017849.958 ops/s
Iteration   3: 1051263.747 ops/s
Iteration   4: 1016628.667 ops/s
Iteration   5: 1005162.676 ops/s
Iteration   6: 1043702.610 ops/s
Iteration   7: 1092101.209 ops/s
Iteration   8: 1003767.605 ops/s
Iteration   9: 1041135.789 ops/s
Iteration  10: 1006155.774 ops/s
Iteration  11: 1013291.353 ops/s
Iteration  12: 1031526.547 ops/s
Iteration  13: 988168.530 ops/s
Iteration  14: 1047662.452 ops/s
Iteration  15: 1009293.943 ops/s
Iteration  16: 1023470.413 ops/s
Iteration  17: 1041453.475 ops/s
Iteration  18: 1019763.022 ops/s
Iteration  19: 1007853.676 ops/s
Iteration  20: 1066813.462 ops/s
Iteration  21: 978947.784 ops/s
Iteration  22: 1067028.535 ops/s
Iteration  23: 978821.528 ops/s
Iteration  24: 1054882.320 ops/s
Iteration  25: 996138.065 ops/s
Iteration  26: 1018374.858 ops/s
Iteration  27: 1036019.525 ops/s
Iteration  28: 995384.316 ops/s
Iteration  29: 1000386.265 ops/s
Iteration  30: 1080666.551 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNextTest._Benchmark.benchmark_synchronousNext":
  1025789.479 ±(99.9%) 19403.667 ops/s [Average]
  (min, avg, max) = (978821.528, 1025789.479, 1092101.209), stdev = 29042.497
  CI (99.9%): [1006385.813, 1045193.146] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
BlockingObservableNextTest._Benchmark.benchmark_synchronousNext  thrpt   30  1025789.479 ± 19403.667  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_timeInfo$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_timeInfo

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 725153.046 ops/s
# Warmup Iteration   2: 2311212.613 ops/s
# Warmup Iteration   3: 2941249.726 ops/s
# Warmup Iteration   4: 3259434.752 ops/s
# Warmup Iteration   5: 3190267.810 ops/s
# Warmup Iteration   6: 3289491.058 ops/s
# Warmup Iteration   7: 3306217.933 ops/s
# Warmup Iteration   8: 3260383.944 ops/s
# Warmup Iteration   9: 3375490.881 ops/s
# Warmup Iteration  10: 3148000.666 ops/s
# Warmup Iteration  11: 3211645.610 ops/s
# Warmup Iteration  12: 3265126.945 ops/s
# Warmup Iteration  13: 3245635.338 ops/s
# Warmup Iteration  14: 3338463.509 ops/s
# Warmup Iteration  15: 3135123.857 ops/s
# Warmup Iteration  16: 3259005.479 ops/s
# Warmup Iteration  17: 3236438.012 ops/s
# Warmup Iteration  18: 3341149.589 ops/s
# Warmup Iteration  19: 3240076.127 ops/s
# Warmup Iteration  20: 3237264.845 ops/s
# Warmup Iteration  21: 3264072.593 ops/s
# Warmup Iteration  22: 3237806.463 ops/s
# Warmup Iteration  23: 3322657.812 ops/s
# Warmup Iteration  24: 3366828.783 ops/s
# Warmup Iteration  25: 3224440.310 ops/s
# Warmup Iteration  26: 3263923.505 ops/s
# Warmup Iteration  27: 3190050.884 ops/s
# Warmup Iteration  28: 3250836.173 ops/s
# Warmup Iteration  29: 3380174.829 ops/s
# Warmup Iteration  30: 3172166.904 ops/s
Iteration   1: 3290745.891 ops/s
Iteration   2: 3225790.795 ops/s
Iteration   3: 3238222.533 ops/s
Iteration   4: 3327602.568 ops/s
Iteration   5: 3232468.466 ops/s
Iteration   6: 3272505.226 ops/s
Iteration   7: 3354046.130 ops/s
Iteration   8: 3184691.439 ops/s
Iteration   9: 3214729.126 ops/s
Iteration  10: 3343697.534 ops/s
Iteration  11: 3206888.730 ops/s
Iteration  12: 3212144.230 ops/s
Iteration  13: 3342826.282 ops/s
Iteration  14: 3138129.582 ops/s
Iteration  15: 3198295.316 ops/s
Iteration  16: 3368758.521 ops/s
Iteration  17: 3241600.343 ops/s
Iteration  18: 3321787.453 ops/s
Iteration  19: 3194911.044 ops/s
Iteration  20: 3276160.046 ops/s
Iteration  21: 3278696.766 ops/s
Iteration  22: 3178627.991 ops/s
Iteration  23: 3299228.880 ops/s
Iteration  24: 3192363.260 ops/s
Iteration  25: 3234211.546 ops/s
Iteration  26: 3248513.673 ops/s
Iteration  27: 3248487.187 ops/s
Iteration  28: 3301621.510 ops/s
Iteration  29: 3297538.904 ops/s
Iteration  30: 3251972.932 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_timeInfo":
  3257242.130 ±(99.9%) 39183.950 ops/s [Average]
  (min, avg, max) = (3138129.582, 3257242.130, 3368758.521), stdev = 58648.696
  CI (99.9%): [3218058.180, 3296426.080] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
MaybeTimestampTest._Benchmark.benchmark_timeInfo  thrpt   30  3257242.130 ± 39183.950  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_timeInfo$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_timeInfo

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 831252.391 ops/s
# Warmup Iteration   2: 2291025.655 ops/s
# Warmup Iteration   3: 3138956.960 ops/s
# Warmup Iteration   4: 3192843.727 ops/s
# Warmup Iteration   5: 3222655.337 ops/s
# Warmup Iteration   6: 3308641.133 ops/s
# Warmup Iteration   7: 3191054.330 ops/s
# Warmup Iteration   8: 3332563.151 ops/s
# Warmup Iteration   9: 3387991.233 ops/s
# Warmup Iteration  10: 3182380.813 ops/s
# Warmup Iteration  11: 3190588.841 ops/s
# Warmup Iteration  12: 3383943.473 ops/s
# Warmup Iteration  13: 3177008.853 ops/s
# Warmup Iteration  14: 3293909.244 ops/s
# Warmup Iteration  15: 3296065.163 ops/s
# Warmup Iteration  16: 3322262.643 ops/s
# Warmup Iteration  17: 3323868.011 ops/s
# Warmup Iteration  18: 3227441.812 ops/s
# Warmup Iteration  19: 3485842.967 ops/s
# Warmup Iteration  20: 3188568.656 ops/s
# Warmup Iteration  21: 3309387.430 ops/s
# Warmup Iteration  22: 3249209.615 ops/s
# Warmup Iteration  23: 3301911.858 ops/s
# Warmup Iteration  24: 3216118.381 ops/s
# Warmup Iteration  25: 3302340.874 ops/s
# Warmup Iteration  26: 3189190.213 ops/s
# Warmup Iteration  27: 3323750.375 ops/s
# Warmup Iteration  28: 3242677.859 ops/s
# Warmup Iteration  29: 3209868.006 ops/s
# Warmup Iteration  30: 3288349.690 ops/s
Iteration   1: 3271784.519 ops/s
Iteration   2: 3434259.872 ops/s
Iteration   3: 3386207.296 ops/s
Iteration   4: 3202912.743 ops/s
Iteration   5: 3281542.073 ops/s
Iteration   6: 3319339.003 ops/s
Iteration   7: 3278168.100 ops/s
Iteration   8: 3340380.422 ops/s
Iteration   9: 3212015.317 ops/s
Iteration  10: 3420223.733 ops/s
Iteration  11: 3288044.161 ops/s
Iteration  12: 3188917.030 ops/s
Iteration  13: 3286570.717 ops/s
Iteration  14: 3363020.054 ops/s
Iteration  15: 3303515.435 ops/s
Iteration  16: 3233671.715 ops/s
Iteration  17: 3370916.077 ops/s
Iteration  18: 3291484.136 ops/s
Iteration  19: 3319063.313 ops/s
Iteration  20: 3158655.214 ops/s
Iteration  21: 3374095.729 ops/s
Iteration  22: 3350849.675 ops/s
Iteration  23: 3236451.857 ops/s
Iteration  24: 3342570.357 ops/s
Iteration  25: 3178690.435 ops/s
Iteration  26: 3363968.615 ops/s
Iteration  27: 2715044.926 ops/s
Iteration  28: 3217733.168 ops/s
Iteration  29: 3347328.170 ops/s
Iteration  30: 3261076.131 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_timeInfo":
  3277950.000 ±(99.9%) 85778.452 ops/s [Average]
  (min, avg, max) = (2715044.926, 3277950.000, 3434259.872), stdev = 128389.158
  CI (99.9%): [3192171.548, 3363728.452] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MaybeTimeIntervalTest._Benchmark.benchmark_timeInfo  thrpt   30  3277950.000 ± 85778.452  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 780222.540 ops/s
# Warmup Iteration   2: 2822244.446 ops/s
# Warmup Iteration   3: 3717393.224 ops/s
# Warmup Iteration   4: 2965949.607 ops/s
# Warmup Iteration   5: 3492037.787 ops/s
# Warmup Iteration   6: 3572364.075 ops/s
# Warmup Iteration   7: 3647460.968 ops/s
# Warmup Iteration   8: 3655177.488 ops/s
# Warmup Iteration   9: 3515917.897 ops/s
# Warmup Iteration  10: 3680454.298 ops/s
# Warmup Iteration  11: 3487779.845 ops/s
# Warmup Iteration  12: 3592658.443 ops/s
# Warmup Iteration  13: 3564431.104 ops/s
# Warmup Iteration  14: 3521330.712 ops/s
# Warmup Iteration  15: 3698581.402 ops/s
# Warmup Iteration  16: 3490990.027 ops/s
# Warmup Iteration  17: 3521430.491 ops/s
# Warmup Iteration  18: 3532267.525 ops/s
# Warmup Iteration  19: 3495354.245 ops/s
# Warmup Iteration  20: 3668041.564 ops/s
# Warmup Iteration  21: 3481843.314 ops/s
# Warmup Iteration  22: 3591268.647 ops/s
# Warmup Iteration  23: 3658519.478 ops/s
# Warmup Iteration  24: 3569568.575 ops/s
# Warmup Iteration  25: 3616650.735 ops/s
# Warmup Iteration  26: 3684417.188 ops/s
# Warmup Iteration  27: 3452350.050 ops/s
# Warmup Iteration  28: 3599883.168 ops/s
# Warmup Iteration  29: 3522484.986 ops/s
# Warmup Iteration  30: 3577529.328 ops/s
Iteration   1: 3527238.477 ops/s
Iteration   2: 3515055.904 ops/s
Iteration   3: 3657695.886 ops/s
Iteration   4: 3456723.561 ops/s
Iteration   5: 3552637.545 ops/s
Iteration   6: 3672245.323 ops/s
Iteration   7: 3448531.260 ops/s
Iteration   8: 3690306.773 ops/s
Iteration   9: 3523733.477 ops/s
Iteration  10: 3581099.271 ops/s
Iteration  11: 3758921.043 ops/s
Iteration  12: 3530111.142 ops/s
Iteration  13: 3643994.091 ops/s
Iteration  14: 3495751.134 ops/s
Iteration  15: 3475216.428 ops/s
Iteration  16: 3707684.038 ops/s
Iteration  17: 3472212.259 ops/s
Iteration  18: 3544997.024 ops/s
Iteration  19: 3664414.884 ops/s
Iteration  20: 3461288.503 ops/s
Iteration  21: 3642260.198 ops/s
Iteration  22: 3466120.496 ops/s
Iteration  23: 3625196.342 ops/s
Iteration  24: 3527123.653 ops/s
Iteration  25: 3582144.405 ops/s
Iteration  26: 3617808.622 ops/s
Iteration  27: 3494738.872 ops/s
Iteration  28: 3587170.369 ops/s
Iteration  29: 3580206.048 ops/s
Iteration  30: 3481608.952 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_backpressure":
  3566141.199 ±(99.9%) 57057.761 ops/s [Average]
  (min, avg, max) = (3448531.260, 3566141.199, 3758921.043), stdev = 85401.377
  CI (99.9%): [3509083.438, 3623198.960] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableTakeUntilPredicateTest._Benchmark.benchmark_backpressure  thrpt   30  3566141.199 ± 57057.761  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_takeFromScalarQueue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_takeFromScalarQueue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 243148.587 ops/s
# Warmup Iteration   2: 1235592.696 ops/s
# Warmup Iteration   3: 1578766.139 ops/s
# Warmup Iteration   4: 2069670.723 ops/s
# Warmup Iteration   5: 2211981.482 ops/s
# Warmup Iteration   6: 2111441.605 ops/s
# Warmup Iteration   7: 2098171.148 ops/s
# Warmup Iteration   8: 2195358.812 ops/s
# Warmup Iteration   9: 2018986.257 ops/s
# Warmup Iteration  10: 2203384.212 ops/s
# Warmup Iteration  11: 2141646.780 ops/s
# Warmup Iteration  12: 2058110.961 ops/s
# Warmup Iteration  13: 2179813.715 ops/s
# Warmup Iteration  14: 2021097.657 ops/s
# Warmup Iteration  15: 2147920.398 ops/s
# Warmup Iteration  16: 2099631.086 ops/s
# Warmup Iteration  17: 2136918.045 ops/s
# Warmup Iteration  18: 2161498.252 ops/s
# Warmup Iteration  19: 2021883.597 ops/s
# Warmup Iteration  20: 2089819.331 ops/s
# Warmup Iteration  21: 2086452.300 ops/s
# Warmup Iteration  22: 2030184.140 ops/s
# Warmup Iteration  23: 2167832.044 ops/s
# Warmup Iteration  24: 2068517.116 ops/s
# Warmup Iteration  25: 2031910.582 ops/s
# Warmup Iteration  26: 2167595.906 ops/s
# Warmup Iteration  27: 2107540.144 ops/s
# Warmup Iteration  28: 2138306.308 ops/s
# Warmup Iteration  29: 2107465.256 ops/s
# Warmup Iteration  30: 2084696.498 ops/s
Iteration   1: 2214716.048 ops/s
Iteration   2: 2157719.623 ops/s
Iteration   3: 2065965.281 ops/s
Iteration   4: 2125162.592 ops/s
Iteration   5: 2137190.358 ops/s
Iteration   6: 2174185.949 ops/s
Iteration   7: 2207841.839 ops/s
Iteration   8: 2072897.860 ops/s
Iteration   9: 2097006.857 ops/s
Iteration  10: 2101013.398 ops/s
Iteration  11: 2110678.514 ops/s
Iteration  12: 2168721.294 ops/s
Iteration  13: 2050000.196 ops/s
Iteration  14: 2075566.781 ops/s
Iteration  15: 2137135.707 ops/s
Iteration  16: 2053271.694 ops/s
Iteration  17: 2058242.986 ops/s
Iteration  18: 2161138.767 ops/s
Iteration  19: 2052158.637 ops/s
Iteration  20: 2150825.443 ops/s
Iteration  21: 2136438.561 ops/s
Iteration  22: 1685853.983 ops/s
Iteration  23: 2159232.558 ops/s
Iteration  24: 2108052.074 ops/s
Iteration  25: 2149358.207 ops/s
Iteration  26: 2113557.940 ops/s
Iteration  27: 2124060.343 ops/s
Iteration  28: 2126867.618 ops/s
Iteration  29: 2130851.597 ops/s
Iteration  30: 2199851.893 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_takeFromScalarQueue":
  2110185.487 ±(99.9%) 61727.076 ops/s [Average]
  (min, avg, max) = (1685853.983, 2110185.487, 2214716.048), stdev = 92390.188
  CI (99.9%): [2048458.411, 2171912.563] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_takeFromScalarQueue  thrpt   30  2110185.487 ± 61727.076  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 764382.171 ops/s
# Warmup Iteration   2: 2100025.999 ops/s
# Warmup Iteration   3: 2325055.175 ops/s
# Warmup Iteration   4: 2605378.288 ops/s
# Warmup Iteration   5: 2762667.070 ops/s
# Warmup Iteration   6: 2657602.211 ops/s
# Warmup Iteration   7: 2761586.568 ops/s
# Warmup Iteration   8: 2788943.127 ops/s
# Warmup Iteration   9: 2658006.946 ops/s
# Warmup Iteration  10: 2611505.088 ops/s
# Warmup Iteration  11: 2737638.660 ops/s
# Warmup Iteration  12: 2668514.642 ops/s
# Warmup Iteration  13: 2735027.614 ops/s
# Warmup Iteration  14: 2707173.356 ops/s
# Warmup Iteration  15: 2744130.891 ops/s
# Warmup Iteration  16: 2649211.425 ops/s
# Warmup Iteration  17: 2691491.429 ops/s
# Warmup Iteration  18: 2773086.467 ops/s
# Warmup Iteration  19: 2639483.279 ops/s
# Warmup Iteration  20: 2807646.119 ops/s
# Warmup Iteration  21: 2665472.227 ops/s
# Warmup Iteration  22: 2680585.658 ops/s
# Warmup Iteration  23: 2785541.912 ops/s
# Warmup Iteration  24: 2594606.719 ops/s
# Warmup Iteration  25: 2677438.275 ops/s
# Warmup Iteration  26: 2793025.725 ops/s
# Warmup Iteration  27: 2642330.128 ops/s
# Warmup Iteration  28: 2732809.215 ops/s
# Warmup Iteration  29: 2686468.297 ops/s
# Warmup Iteration  30: 2744697.393 ops/s
Iteration   1: 2728030.753 ops/s
Iteration   2: 2684268.964 ops/s
Iteration   3: 2754536.691 ops/s
Iteration   4: 2647585.810 ops/s
Iteration   5: 2741034.846 ops/s
Iteration   6: 2813238.975 ops/s
Iteration   7: 2638944.544 ops/s
Iteration   8: 2791640.274 ops/s
Iteration   9: 2670553.442 ops/s
Iteration  10: 2713876.301 ops/s
Iteration  11: 2670815.214 ops/s
Iteration  12: 2714976.424 ops/s
Iteration  13: 2816341.514 ops/s
Iteration  14: 2775063.993 ops/s
Iteration  15: 2649982.868 ops/s
Iteration  16: 2698776.061 ops/s
Iteration  17: 2739796.636 ops/s
Iteration  18: 2681931.450 ops/s
Iteration  19: 2738123.048 ops/s
Iteration  20: 2703680.238 ops/s
Iteration  21: 2723515.377 ops/s
Iteration  22: 2694083.891 ops/s
Iteration  23: 2740947.360 ops/s
Iteration  24: 2794533.121 ops/s
Iteration  25: 2645012.592 ops/s
Iteration  26: 2734057.104 ops/s
Iteration  27: 2773751.788 ops/s
Iteration  28: 2646858.342 ops/s
Iteration  29: 2784685.305 ops/s
Iteration  30: 2571648.808 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_backpressure":
  2716076.391 ±(99.9%) 39255.196 ops/s [Average]
  (min, avg, max) = (2571648.808, 2716076.391, 2816341.514), stdev = 58755.333
  CI (99.9%): [2676821.195, 2755331.587] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableTakeWhileTest._Benchmark.benchmark_backpressure  thrpt   30  2716076.391 ± 39255.196  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_requestOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_requestOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1557640.181 ops/s
# Warmup Iteration   2: 3568087.492 ops/s
# Warmup Iteration   3: 4058148.159 ops/s
# Warmup Iteration   4: 4524398.133 ops/s
# Warmup Iteration   5: 4402281.373 ops/s
# Warmup Iteration   6: 4545434.331 ops/s
# Warmup Iteration   7: 4411440.312 ops/s
# Warmup Iteration   8: 4221546.956 ops/s
# Warmup Iteration   9: 4544624.542 ops/s
# Warmup Iteration  10: 4306110.733 ops/s
# Warmup Iteration  11: 4436563.773 ops/s
# Warmup Iteration  12: 4481108.728 ops/s
# Warmup Iteration  13: 4390546.887 ops/s
# Warmup Iteration  14: 4573304.509 ops/s
# Warmup Iteration  15: 4102493.752 ops/s
# Warmup Iteration  16: 4364166.189 ops/s
# Warmup Iteration  17: 4612100.112 ops/s
# Warmup Iteration  18: 4328850.960 ops/s
# Warmup Iteration  19: 4325827.091 ops/s
# Warmup Iteration  20: 4390097.295 ops/s
# Warmup Iteration  21: 4628848.481 ops/s
# Warmup Iteration  22: 4557138.772 ops/s
# Warmup Iteration  23: 4468892.259 ops/s
# Warmup Iteration  24: 4580873.993 ops/s
# Warmup Iteration  25: 4519622.768 ops/s
# Warmup Iteration  26: 4356442.642 ops/s
# Warmup Iteration  27: 4569453.523 ops/s
# Warmup Iteration  28: 4652871.229 ops/s
# Warmup Iteration  29: 4353072.367 ops/s
# Warmup Iteration  30: 4602069.880 ops/s
Iteration   1: 4260294.436 ops/s
Iteration   2: 4416547.905 ops/s
Iteration   3: 4596621.533 ops/s
Iteration   4: 4374365.695 ops/s
Iteration   5: 4543148.570 ops/s
Iteration   6: 4367100.951 ops/s
Iteration   7: 4644795.888 ops/s
Iteration   8: 4373328.198 ops/s
Iteration   9: 4439807.204 ops/s
Iteration  10: 4564761.104 ops/s
Iteration  11: 4215209.096 ops/s
Iteration  12: 4724549.323 ops/s
Iteration  13: 4275390.903 ops/s
Iteration  14: 4439697.795 ops/s
Iteration  15: 4337941.051 ops/s
Iteration  16: 4362648.834 ops/s
Iteration  17: 3823969.573 ops/s
Iteration  18: 4590108.814 ops/s
Iteration  19: 4463770.544 ops/s
Iteration  20: 4503918.328 ops/s
Iteration  21: 4451322.769 ops/s
Iteration  22: 4482606.941 ops/s
Iteration  23: 4420603.861 ops/s
Iteration  24: 4480882.848 ops/s
Iteration  25: 4464045.832 ops/s
Iteration  26: 4516854.080 ops/s
Iteration  27: 4438266.184 ops/s
Iteration  28: 4388216.444 ops/s
Iteration  29: 4641517.245 ops/s
Iteration  30: 4634968.460 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_requestOverflow":
  4441242.014 ±(99.9%) 111865.185 ops/s [Average]
  (min, avg, max) = (3823969.573, 4441242.014, 4724549.323), stdev = 167434.556
  CI (99.9%): [4329376.828, 4553107.199] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
FlowableOnBackpressureDropTest._Benchmark.benchmark_requestOverflow  thrpt   30  4441242.014 ± 111865.185  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_range$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_range

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 165458.633 ops/s
# Warmup Iteration   2: 567091.471 ops/s
# Warmup Iteration   3: 1236945.891 ops/s
# Warmup Iteration   4: 1457118.532 ops/s
# Warmup Iteration   5: 1252414.064 ops/s
# Warmup Iteration   6: 1468311.669 ops/s
# Warmup Iteration   7: 1446736.995 ops/s
# Warmup Iteration   8: 1428244.765 ops/s
# Warmup Iteration   9: 1435676.608 ops/s
# Warmup Iteration  10: 1380229.183 ops/s
# Warmup Iteration  11: 1400049.587 ops/s
# Warmup Iteration  12: 1449269.200 ops/s
# Warmup Iteration  13: 1382865.852 ops/s
# Warmup Iteration  14: 1465296.828 ops/s
# Warmup Iteration  15: 1492384.028 ops/s
# Warmup Iteration  16: 1381761.428 ops/s
# Warmup Iteration  17: 1392315.119 ops/s
# Warmup Iteration  18: 1466017.542 ops/s
# Warmup Iteration  19: 1359583.104 ops/s
# Warmup Iteration  20: 1443002.885 ops/s
# Warmup Iteration  21: 1405130.530 ops/s
# Warmup Iteration  22: 1403336.400 ops/s
# Warmup Iteration  23: 1448262.162 ops/s
# Warmup Iteration  24: 1374922.548 ops/s
# Warmup Iteration  25: 1410322.733 ops/s
# Warmup Iteration  26: 1433268.789 ops/s
# Warmup Iteration  27: 1418740.458 ops/s
# Warmup Iteration  28: 1436098.304 ops/s
# Warmup Iteration  29: 1471623.490 ops/s
# Warmup Iteration  30: 1352271.235 ops/s
Iteration   1: 1444868.642 ops/s
Iteration   2: 1449505.717 ops/s
Iteration   3: 1377014.738 ops/s
Iteration   4: 1445622.210 ops/s
Iteration   5: 1372064.010 ops/s
Iteration   6: 1422245.257 ops/s
Iteration   7: 1462329.736 ops/s
Iteration   8: 1406108.793 ops/s
Iteration   9: 1337109.001 ops/s
Iteration  10: 1449554.544 ops/s
Iteration  11: 1401202.768 ops/s
Iteration  12: 1397708.156 ops/s
Iteration  13: 1434330.796 ops/s
Iteration  14: 1371737.130 ops/s
Iteration  15: 1405263.470 ops/s
Iteration  16: 1399523.318 ops/s
Iteration  17: 1402731.037 ops/s
Iteration  18: 1467001.345 ops/s
Iteration  19: 1412375.405 ops/s
Iteration  20: 1404491.309 ops/s
Iteration  21: 1399340.680 ops/s
Iteration  22: 1435791.736 ops/s
Iteration  23: 1453093.163 ops/s
Iteration  24: 1383315.850 ops/s
Iteration  25: 1451761.914 ops/s
Iteration  26: 1391478.268 ops/s
Iteration  27: 1446379.280 ops/s
Iteration  28: 1399673.715 ops/s
Iteration  29: 1382345.158 ops/s
Iteration  30: 1477576.716 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_range":
  1416118.129 ±(99.9%) 22599.680 ops/s [Average]
  (min, avg, max) = (1337109.001, 1416118.129, 1477576.716), stdev = 33826.140
  CI (99.9%): [1393518.448, 1438717.809] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableBlockingStreamTest._Benchmark.benchmark_range  thrpt   30  1416118.129 ± 22599.680  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTest._Benchmark.benchmark_requestOverflowDoesNotOccur$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTest._Benchmark.benchmark_requestOverflowDoesNotOccur

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 489889.426 ops/s
# Warmup Iteration   2: 1958764.068 ops/s
# Warmup Iteration   3: 2347151.475 ops/s
# Warmup Iteration   4: 2793471.732 ops/s
# Warmup Iteration   5: 2875729.994 ops/s
# Warmup Iteration   6: 2774653.048 ops/s
# Warmup Iteration   7: 2780196.470 ops/s
# Warmup Iteration   8: 2717905.059 ops/s
# Warmup Iteration   9: 2893179.510 ops/s
# Warmup Iteration  10: 2726503.688 ops/s
# Warmup Iteration  11: 2790941.085 ops/s
# Warmup Iteration  12: 2872329.329 ops/s
# Warmup Iteration  13: 2743110.607 ops/s
# Warmup Iteration  14: 2808430.535 ops/s
# Warmup Iteration  15: 2807554.460 ops/s
# Warmup Iteration  16: 2871093.628 ops/s
# Warmup Iteration  17: 2782712.720 ops/s
# Warmup Iteration  18: 2796776.319 ops/s
# Warmup Iteration  19: 2913829.538 ops/s
# Warmup Iteration  20: 2732898.746 ops/s
# Warmup Iteration  21: 2855843.196 ops/s
# Warmup Iteration  22: 2738899.759 ops/s
# Warmup Iteration  23: 2928546.954 ops/s
# Warmup Iteration  24: 2792242.525 ops/s
# Warmup Iteration  25: 2736260.314 ops/s
# Warmup Iteration  26: 2931852.088 ops/s
# Warmup Iteration  27: 2770668.025 ops/s
# Warmup Iteration  28: 2832812.730 ops/s
# Warmup Iteration  29: 2904058.719 ops/s
# Warmup Iteration  30: 2767897.601 ops/s
Iteration   1: 2815706.217 ops/s
Iteration   2: 2796035.704 ops/s
Iteration   3: 2806727.818 ops/s
Iteration   4: 2928934.247 ops/s
Iteration   5: 2744434.776 ops/s
Iteration   6: 2874508.083 ops/s
Iteration   7: 2776114.852 ops/s
Iteration   8: 2801245.174 ops/s
Iteration   9: 2899383.380 ops/s
Iteration  10: 2944441.833 ops/s
Iteration  11: 2576509.950 ops/s
Iteration  12: 2412248.262 ops/s
Iteration  13: 2889050.724 ops/s
Iteration  14: 2802977.469 ops/s
Iteration  15: 2747060.617 ops/s
Iteration  16: 2842890.423 ops/s
Iteration  17: 2824600.953 ops/s
Iteration  18: 2720217.857 ops/s
Iteration  19: 2860176.708 ops/s
Iteration  20: 2831424.096 ops/s
Iteration  21: 2918936.784 ops/s
Iteration  22: 2799680.113 ops/s
Iteration  23: 2783433.806 ops/s
Iteration  24: 2790095.726 ops/s
Iteration  25: 2844039.356 ops/s
Iteration  26: 2821962.857 ops/s
Iteration  27: 2945112.652 ops/s
Iteration  28: 2699020.769 ops/s
Iteration  29: 2853111.129 ops/s
Iteration  30: 2955860.961 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTest._Benchmark.benchmark_requestOverflowDoesNotOccur":
  2810198.110 ±(99.9%) 73767.410 ops/s [Average]
  (min, avg, max) = (2412248.262, 2810198.110, 2955860.961), stdev = 110411.595
  CI (99.9%): [2736430.700, 2883965.520] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableSkipTest._Benchmark.benchmark_requestOverflowDoesNotOccur  thrpt   30  2810198.110 ± 73767.410  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_rangeBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_rangeBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 122964.954 ops/s
# Warmup Iteration   2: 696107.603 ops/s
# Warmup Iteration   3: 1301121.900 ops/s
# Warmup Iteration   4: 1337343.301 ops/s
# Warmup Iteration   5: 1691954.975 ops/s
# Warmup Iteration   6: 1602144.895 ops/s
# Warmup Iteration   7: 1623077.126 ops/s
# Warmup Iteration   8: 1570927.694 ops/s
# Warmup Iteration   9: 1572834.721 ops/s
# Warmup Iteration  10: 1622048.217 ops/s
# Warmup Iteration  11: 1573589.207 ops/s
# Warmup Iteration  12: 1593972.041 ops/s
# Warmup Iteration  13: 1603748.465 ops/s
# Warmup Iteration  14: 1574957.515 ops/s
# Warmup Iteration  15: 1683601.259 ops/s
# Warmup Iteration  16: 1589524.960 ops/s
# Warmup Iteration  17: 1584484.691 ops/s
# Warmup Iteration  18: 1564399.697 ops/s
# Warmup Iteration  19: 1626419.789 ops/s
# Warmup Iteration  20: 1644177.256 ops/s
# Warmup Iteration  21: 1611783.521 ops/s
# Warmup Iteration  22: 1541897.478 ops/s
# Warmup Iteration  23: 1662625.471 ops/s
# Warmup Iteration  24: 1526156.142 ops/s
# Warmup Iteration  25: 1688197.078 ops/s
# Warmup Iteration  26: 1610552.175 ops/s
# Warmup Iteration  27: 1594432.968 ops/s
# Warmup Iteration  28: 1587651.682 ops/s
# Warmup Iteration  29: 1617338.410 ops/s
# Warmup Iteration  30: 1630820.536 ops/s
Iteration   1: 1502602.768 ops/s
Iteration   2: 1693000.124 ops/s
Iteration   3: 1600121.719 ops/s
Iteration   4: 1600263.718 ops/s
Iteration   5: 1642449.340 ops/s
Iteration   6: 1587780.272 ops/s
Iteration   7: 1636339.236 ops/s
Iteration   8: 1585169.579 ops/s
Iteration   9: 1640661.708 ops/s
Iteration  10: 1600542.218 ops/s
Iteration  11: 1615286.966 ops/s
Iteration  12: 1599413.801 ops/s
Iteration  13: 1606407.328 ops/s
Iteration  14: 1619123.122 ops/s
Iteration  15: 1643155.157 ops/s
Iteration  16: 1578343.899 ops/s
Iteration  17: 1594161.583 ops/s
Iteration  18: 1621030.258 ops/s
Iteration  19: 1671430.375 ops/s
Iteration  20: 1554092.426 ops/s
Iteration  21: 1593577.667 ops/s
Iteration  22: 1634454.838 ops/s
Iteration  23: 1578924.808 ops/s
Iteration  24: 1682968.769 ops/s
Iteration  25: 1604116.260 ops/s
Iteration  26: 1635646.939 ops/s
Iteration  27: 1573763.577 ops/s
Iteration  28: 1592981.377 ops/s
Iteration  29: 1640653.524 ops/s
Iteration  30: 1579750.673 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_rangeBackpressured":
  1610273.801 ±(99.9%) 25851.168 ops/s [Average]
  (min, avg, max) = (1502602.768, 1610273.801, 1693000.124), stdev = 38692.814
  CI (99.9%): [1584422.633, 1636124.969] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableBlockingStreamTest._Benchmark.benchmark_rangeBackpressured  thrpt   30  1610273.801 ± 25851.168  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarReentrant2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarReentrant2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 156977.778 ops/s
# Warmup Iteration   2: 654942.166 ops/s
# Warmup Iteration   3: 1365377.919 ops/s
# Warmup Iteration   4: 1342814.924 ops/s
# Warmup Iteration   5: 1571377.362 ops/s
# Warmup Iteration   6: 1603960.736 ops/s
# Warmup Iteration   7: 1610161.099 ops/s
# Warmup Iteration   8: 1613681.541 ops/s
# Warmup Iteration   9: 1543429.524 ops/s
# Warmup Iteration  10: 1616424.524 ops/s
# Warmup Iteration  11: 1627037.791 ops/s
# Warmup Iteration  12: 1565285.400 ops/s
# Warmup Iteration  13: 1578760.808 ops/s
# Warmup Iteration  14: 1668574.039 ops/s
# Warmup Iteration  15: 1526411.766 ops/s
# Warmup Iteration  16: 1618529.706 ops/s
# Warmup Iteration  17: 1533718.590 ops/s
# Warmup Iteration  18: 1579313.770 ops/s
# Warmup Iteration  19: 1651735.537 ops/s
# Warmup Iteration  20: 1602116.601 ops/s
# Warmup Iteration  21: 1597520.841 ops/s
# Warmup Iteration  22: 1630142.493 ops/s
# Warmup Iteration  23: 1595773.662 ops/s
# Warmup Iteration  24: 1655060.030 ops/s
# Warmup Iteration  25: 1545098.851 ops/s
# Warmup Iteration  26: 1636451.400 ops/s
# Warmup Iteration  27: 1605899.471 ops/s
# Warmup Iteration  28: 1565518.657 ops/s
# Warmup Iteration  29: 1695212.520 ops/s
# Warmup Iteration  30: 1520924.486 ops/s
Iteration   1: 1669328.831 ops/s
Iteration   2: 1614651.124 ops/s
Iteration   3: 1662455.336 ops/s
Iteration   4: 1644582.579 ops/s
Iteration   5: 1580313.414 ops/s
Iteration   6: 1376046.213 ops/s
Iteration   7: 1586496.698 ops/s
Iteration   8: 1600939.892 ops/s
Iteration   9: 1626817.190 ops/s
Iteration  10: 1615921.017 ops/s
Iteration  11: 1594471.454 ops/s
Iteration  12: 1561309.986 ops/s
Iteration  13: 1627745.606 ops/s
Iteration  14: 1625742.531 ops/s
Iteration  15: 1632701.628 ops/s
Iteration  16: 1593436.038 ops/s
Iteration  17: 1596032.854 ops/s
Iteration  18: 1608365.733 ops/s
Iteration  19: 1604780.807 ops/s
Iteration  20: 1651416.870 ops/s
Iteration  21: 1628163.112 ops/s
Iteration  22: 1621138.701 ops/s
Iteration  23: 1581973.835 ops/s
Iteration  24: 1578247.935 ops/s
Iteration  25: 1669580.349 ops/s
Iteration  26: 1562637.337 ops/s
Iteration  27: 1663188.294 ops/s
Iteration  28: 1578078.010 ops/s
Iteration  29: 1668875.715 ops/s
Iteration  30: 1653873.303 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarReentrant2":
  1609310.413 ±(99.9%) 36641.841 ops/s [Average]
  (min, avg, max) = (1376046.213, 1609310.413, 1669580.349), stdev = 54843.787
  CI (99.9%): [1572668.572, 1645952.254] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_scalarReentrant2  thrpt   30  1609310.413 ± 36641.841  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 96421.316 ops/s
# Warmup Iteration   2: 574329.524 ops/s
# Warmup Iteration   3: 1384552.401 ops/s
# Warmup Iteration   4: 1450433.770 ops/s
# Warmup Iteration   5: 1446545.038 ops/s
# Warmup Iteration   6: 1437965.807 ops/s
# Warmup Iteration   7: 1282866.511 ops/s
# Warmup Iteration   8: 1514901.377 ops/s
# Warmup Iteration   9: 1445622.296 ops/s
# Warmup Iteration  10: 1537630.427 ops/s
# Warmup Iteration  11: 1397571.181 ops/s
# Warmup Iteration  12: 1492849.629 ops/s
# Warmup Iteration  13: 1466896.009 ops/s
# Warmup Iteration  14: 1472640.400 ops/s
# Warmup Iteration  15: 1500117.124 ops/s
# Warmup Iteration  16: 1496043.060 ops/s
# Warmup Iteration  17: 1478286.942 ops/s
# Warmup Iteration  18: 1484569.343 ops/s
# Warmup Iteration  19: 1469099.416 ops/s
# Warmup Iteration  20: 1522466.265 ops/s
# Warmup Iteration  21: 1437509.065 ops/s
# Warmup Iteration  22: 1476494.928 ops/s
# Warmup Iteration  23: 1538077.997 ops/s
# Warmup Iteration  24: 1461515.882 ops/s
# Warmup Iteration  25: 1468787.498 ops/s
# Warmup Iteration  26: 1471419.170 ops/s
# Warmup Iteration  27: 1547595.746 ops/s
# Warmup Iteration  28: 1512037.242 ops/s
# Warmup Iteration  29: 1450328.483 ops/s
# Warmup Iteration  30: 1511467.998 ops/s
Iteration   1: 1470047.626 ops/s
Iteration   2: 1491486.386 ops/s
Iteration   3: 1511141.412 ops/s
Iteration   4: 1491938.062 ops/s
Iteration   5: 1479380.771 ops/s
Iteration   6: 1435770.433 ops/s
Iteration   7: 1521920.606 ops/s
Iteration   8: 1542505.763 ops/s
Iteration   9: 1465785.194 ops/s
Iteration  10: 1484889.571 ops/s
Iteration  11: 1459579.476 ops/s
Iteration  12: 1525783.519 ops/s
Iteration  13: 1477705.629 ops/s
Iteration  14: 1468801.378 ops/s
Iteration  15: 1533264.601 ops/s
Iteration  16: 1401038.022 ops/s
Iteration  17: 1505254.279 ops/s
Iteration  18: 1448324.919 ops/s
Iteration  19: 1493749.687 ops/s
Iteration  20: 1552611.178 ops/s
Iteration  21: 1443526.089 ops/s
Iteration  22: 1480106.660 ops/s
Iteration  23: 1535289.963 ops/s
Iteration  24: 1434645.454 ops/s
Iteration  25: 1545050.375 ops/s
Iteration  26: 1448934.919 ops/s
Iteration  27: 1528942.193 ops/s
Iteration  28: 1463495.061 ops/s
Iteration  29: 1486029.152 ops/s
Iteration  30: 1544670.997 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarReentrant":
  1489055.646 ±(99.9%) 26046.626 ops/s [Average]
  (min, avg, max) = (1401038.022, 1489055.646, 1552611.178), stdev = 38985.367
  CI (99.9%): [1463009.019, 1515102.272] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_scalarReentrant  thrpt   30  1489055.646 ± 26046.626  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_deferredUpstreamProducer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_deferredUpstreamProducer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 510990.903 ops/s
# Warmup Iteration   2: 1906288.815 ops/s
# Warmup Iteration   3: 3276799.319 ops/s
# Warmup Iteration   4: 2901360.629 ops/s
# Warmup Iteration   5: 3057905.876 ops/s
# Warmup Iteration   6: 3293113.352 ops/s
# Warmup Iteration   7: 3252519.536 ops/s
# Warmup Iteration   8: 3385977.212 ops/s
# Warmup Iteration   9: 3214536.621 ops/s
# Warmup Iteration  10: 3424341.636 ops/s
# Warmup Iteration  11: 3212377.466 ops/s
# Warmup Iteration  12: 3236699.973 ops/s
# Warmup Iteration  13: 3372129.806 ops/s
# Warmup Iteration  14: 3368187.759 ops/s
# Warmup Iteration  15: 3195257.215 ops/s
# Warmup Iteration  16: 3373082.444 ops/s
# Warmup Iteration  17: 3369577.872 ops/s
# Warmup Iteration  18: 3257242.919 ops/s
# Warmup Iteration  19: 3209873.503 ops/s
# Warmup Iteration  20: 3425978.862 ops/s
# Warmup Iteration  21: 3222544.659 ops/s
# Warmup Iteration  22: 3351807.212 ops/s
# Warmup Iteration  23: 3271506.427 ops/s
# Warmup Iteration  24: 3216366.186 ops/s
# Warmup Iteration  25: 3313147.011 ops/s
# Warmup Iteration  26: 3235943.832 ops/s
# Warmup Iteration  27: 3279158.548 ops/s
# Warmup Iteration  28: 3263759.193 ops/s
# Warmup Iteration  29: 3147109.944 ops/s
# Warmup Iteration  30: 3302216.718 ops/s
Iteration   1: 2351928.668 ops/s
Iteration   2: 3210078.479 ops/s
Iteration   3: 3454419.565 ops/s
Iteration   4: 3226414.764 ops/s
Iteration   5: 3361329.465 ops/s
Iteration   6: 3175548.249 ops/s
Iteration   7: 3297452.972 ops/s
Iteration   8: 3357221.940 ops/s
Iteration   9: 3178391.397 ops/s
Iteration  10: 3406295.598 ops/s
Iteration  11: 3175719.214 ops/s
Iteration  12: 3352493.814 ops/s
Iteration  13: 3210487.603 ops/s
Iteration  14: 3229365.977 ops/s
Iteration  15: 3303992.551 ops/s
Iteration  16: 3283457.464 ops/s
Iteration  17: 3260279.265 ops/s
Iteration  18: 3348610.506 ops/s
Iteration  19: 3215200.613 ops/s
Iteration  20: 3283331.796 ops/s
Iteration  21: 3294682.154 ops/s
Iteration  22: 3286552.731 ops/s
Iteration  23: 3326710.732 ops/s
Iteration  24: 3233889.483 ops/s
Iteration  25: 3241578.746 ops/s
Iteration  26: 3389213.437 ops/s
Iteration  27: 3251147.410 ops/s
Iteration  28: 3398508.896 ops/s
Iteration  29: 3244697.829 ops/s
Iteration  30: 3287870.188 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_deferredUpstreamProducer":
  3254562.384 ±(99.9%) 123924.500 ops/s [Average]
  (min, avg, max) = (2351928.668, 3254562.384, 3454419.565), stdev = 185484.372
  CI (99.9%): [3130637.883, 3378486.884] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
FlowableDetachTest._Benchmark.benchmark_deferredUpstreamProducer  thrpt   30  3254562.384 ± 123924.500  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_requestZero$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_requestZero

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 151143.801 ops/s
# Warmup Iteration   2: 308095.845 ops/s
# Warmup Iteration   3: 397965.231 ops/s
# Warmup Iteration   4: 390505.949 ops/s
# Warmup Iteration   5: 422855.727 ops/s
# Warmup Iteration   6: 403153.888 ops/s
# Warmup Iteration   7: 388430.108 ops/s
# Warmup Iteration   8: 395412.200 ops/s
# Warmup Iteration   9: 391631.954 ops/s
# Warmup Iteration  10: 401363.956 ops/s
# Warmup Iteration  11: 397265.673 ops/s
# Warmup Iteration  12: 396948.635 ops/s
# Warmup Iteration  13: 396869.961 ops/s
# Warmup Iteration  14: 397561.019 ops/s
# Warmup Iteration  15: 377678.645 ops/s
# Warmup Iteration  16: 425134.470 ops/s
# Warmup Iteration  17: 426976.440 ops/s
# Warmup Iteration  18: 403440.631 ops/s
# Warmup Iteration  19: 424973.233 ops/s
# Warmup Iteration  20: 417510.744 ops/s
# Warmup Iteration  21: 416239.735 ops/s
# Warmup Iteration  22: 419537.441 ops/s
# Warmup Iteration  23: 402887.678 ops/s
# Warmup Iteration  24: 402839.727 ops/s
# Warmup Iteration  25: 433651.998 ops/s
# Warmup Iteration  26: 401120.300 ops/s
# Warmup Iteration  27: 431305.281 ops/s
# Warmup Iteration  28: 433997.911 ops/s
# Warmup Iteration  29: 433977.629 ops/s
# Warmup Iteration  30: 410541.641 ops/s
Iteration   1: 436868.262 ops/s
Iteration   2: 420952.529 ops/s
Iteration   3: 416153.483 ops/s
Iteration   4: 412685.210 ops/s
Iteration   5: 418589.252 ops/s
Iteration   6: 407391.590 ops/s
Iteration   7: 418094.451 ops/s
Iteration   8: 408038.936 ops/s
Iteration   9: 403477.215 ops/s
Iteration  10: 410683.331 ops/s
Iteration  11: 404901.499 ops/s
Iteration  12: 416587.143 ops/s
Iteration  13: 402139.625 ops/s
Iteration  14: 401478.882 ops/s
Iteration  15: 417841.434 ops/s
Iteration  16: 425089.117 ops/s
Iteration  17: 423897.497 ops/s
Iteration  18: 409423.047 ops/s
Iteration  19: 426597.108 ops/s
Iteration  20: 399643.311 ops/s
Iteration  21: 436497.967 ops/s
Iteration  22: 395404.120 ops/s
Iteration  23: 428081.783 ops/s
Iteration  24: 408331.453 ops/s
Iteration  25: 406851.883 ops/s
Iteration  26: 426031.959 ops/s
Iteration  27: 421360.049 ops/s
Iteration  28: 420122.258 ops/s
Iteration  29: 419072.776 ops/s
Iteration  30: 400439.574 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_requestZero":
  414757.558 ±(99.9%) 7220.451 ops/s [Average]
  (min, avg, max) = (395404.120, 414757.558, 436868.262), stdev = 10807.232
  CI (99.9%): [407537.107, 421978.010] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
StrictSubscriberTest._Benchmark.benchmark_requestZero  thrpt   30  414757.558 ± 7220.451  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_requestNegative$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_requestNegative

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 120037.220 ops/s
# Warmup Iteration   2: 266812.588 ops/s
# Warmup Iteration   3: 342424.720 ops/s
# Warmup Iteration   4: 367932.353 ops/s
# Warmup Iteration   5: 398160.273 ops/s
# Warmup Iteration   6: 390480.253 ops/s
# Warmup Iteration   7: 380866.754 ops/s
# Warmup Iteration   8: 389017.426 ops/s
# Warmup Iteration   9: 373993.420 ops/s
# Warmup Iteration  10: 390743.706 ops/s
# Warmup Iteration  11: 391827.411 ops/s
# Warmup Iteration  12: 377306.599 ops/s
# Warmup Iteration  13: 376984.787 ops/s
# Warmup Iteration  14: 377408.885 ops/s
# Warmup Iteration  15: 395704.526 ops/s
# Warmup Iteration  16: 391856.839 ops/s
# Warmup Iteration  17: 377066.528 ops/s
# Warmup Iteration  18: 399632.258 ops/s
# Warmup Iteration  19: 393615.189 ops/s
# Warmup Iteration  20: 408021.862 ops/s
# Warmup Iteration  21: 383402.952 ops/s
# Warmup Iteration  22: 395149.246 ops/s
# Warmup Iteration  23: 415055.937 ops/s
# Warmup Iteration  24: 388444.920 ops/s
# Warmup Iteration  25: 402034.340 ops/s
# Warmup Iteration  26: 295461.398 ops/s
# Warmup Iteration  27: 404768.237 ops/s
# Warmup Iteration  28: 415147.679 ops/s
# Warmup Iteration  29: 391393.437 ops/s
# Warmup Iteration  30: 412025.438 ops/s
Iteration   1: 394970.586 ops/s
Iteration   2: 406862.229 ops/s
Iteration   3: 388262.665 ops/s
Iteration   4: 401035.850 ops/s
Iteration   5: 412216.684 ops/s
Iteration   6: 381861.768 ops/s
Iteration   7: 401383.108 ops/s
Iteration   8: 398027.968 ops/s
Iteration   9: 406576.098 ops/s
Iteration  10: 389267.949 ops/s
Iteration  11: 377055.467 ops/s
Iteration  12: 411605.638 ops/s
Iteration  13: 384499.140 ops/s
Iteration  14: 400111.711 ops/s
Iteration  15: 401079.343 ops/s
Iteration  16: 394032.753 ops/s
Iteration  17: 413644.597 ops/s
Iteration  18: 391457.490 ops/s
Iteration  19: 400658.559 ops/s
Iteration  20: 414694.828 ops/s
Iteration  21: 385362.827 ops/s
Iteration  22: 412377.435 ops/s
Iteration  23: 382028.574 ops/s
Iteration  24: 398314.839 ops/s
Iteration  25: 387634.621 ops/s
Iteration  26: 408593.550 ops/s
Iteration  27: 401110.467 ops/s
Iteration  28: 394101.727 ops/s
Iteration  29: 415498.313 ops/s
Iteration  30: 397396.549 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_requestNegative":
  398390.778 ±(99.9%) 7226.466 ops/s [Average]
  (min, avg, max) = (377055.467, 398390.778, 415498.313), stdev = 10816.236
  CI (99.9%): [391164.311, 405617.244] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
StrictSubscriberTest._Benchmark.benchmark_requestNegative  thrpt   30  398390.778 ± 7226.466  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_noBackpressureWithInitialValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_noBackpressureWithInitialValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32582.078 ops/s
# Warmup Iteration   2: 146878.146 ops/s
# Warmup Iteration   3: 171770.350 ops/s
# Warmup Iteration   4: 194252.004 ops/s
# Warmup Iteration   5: 186287.469 ops/s
# Warmup Iteration   6: 191496.191 ops/s
# Warmup Iteration   7: 192563.662 ops/s
# Warmup Iteration   8: 196749.259 ops/s
# Warmup Iteration   9: 188352.820 ops/s
# Warmup Iteration  10: 188802.381 ops/s
# Warmup Iteration  11: 190759.434 ops/s
# Warmup Iteration  12: 194238.932 ops/s
# Warmup Iteration  13: 192293.590 ops/s
# Warmup Iteration  14: 196643.261 ops/s
# Warmup Iteration  15: 182221.726 ops/s
# Warmup Iteration  16: 195203.119 ops/s
# Warmup Iteration  17: 185235.653 ops/s
# Warmup Iteration  18: 191238.133 ops/s
# Warmup Iteration  19: 193410.685 ops/s
# Warmup Iteration  20: 188472.623 ops/s
# Warmup Iteration  21: 192747.904 ops/s
# Warmup Iteration  22: 191711.208 ops/s
# Warmup Iteration  23: 192378.283 ops/s
# Warmup Iteration  24: 197057.114 ops/s
# Warmup Iteration  25: 188695.099 ops/s
# Warmup Iteration  26: 176815.808 ops/s
# Warmup Iteration  27: 201556.842 ops/s
# Warmup Iteration  28: 194088.653 ops/s
# Warmup Iteration  29: 187033.240 ops/s
# Warmup Iteration  30: 192437.062 ops/s
Iteration   1: 200677.585 ops/s
Iteration   2: 192395.882 ops/s
Iteration   3: 185310.125 ops/s
Iteration   4: 190265.612 ops/s
Iteration   5: 192627.197 ops/s
Iteration   6: 189237.877 ops/s
Iteration   7: 190896.509 ops/s
Iteration   8: 190116.661 ops/s
Iteration   9: 188360.607 ops/s
Iteration  10: 185766.214 ops/s
Iteration  11: 194439.797 ops/s
Iteration  12: 198342.226 ops/s
Iteration  13: 191752.648 ops/s
Iteration  14: 204211.260 ops/s
Iteration  15: 185351.716 ops/s
Iteration  16: 190324.554 ops/s
Iteration  17: 192966.252 ops/s
Iteration  18: 197444.286 ops/s
Iteration  19: 195143.234 ops/s
Iteration  20: 191703.724 ops/s
Iteration  21: 195787.240 ops/s
Iteration  22: 190617.929 ops/s
Iteration  23: 186643.003 ops/s
Iteration  24: 197953.528 ops/s
Iteration  25: 196159.219 ops/s
Iteration  26: 196458.059 ops/s
Iteration  27: 185115.511 ops/s
Iteration  28: 197429.712 ops/s
Iteration  29: 197583.011 ops/s
Iteration  30: 194753.285 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_noBackpressureWithInitialValue":
  192861.149 ±(99.9%) 3239.898 ops/s [Average]
  (min, avg, max) = (185115.511, 192861.149, 204211.260), stdev = 4849.327
  CI (99.9%): [189621.251, 196101.046] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableScanTest._Benchmark.benchmark_noBackpressureWithInitialValue  thrpt   30  192861.149 ± 3239.898  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_backpressureWithInitialValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_backpressureWithInitialValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105271.468 ops/s
# Warmup Iteration   2: 224768.906 ops/s
# Warmup Iteration   3: 239585.795 ops/s
# Warmup Iteration   4: 242258.370 ops/s
# Warmup Iteration   5: 229455.141 ops/s
# Warmup Iteration   6: 253040.903 ops/s
# Warmup Iteration   7: 265385.615 ops/s
# Warmup Iteration   8: 262085.617 ops/s
# Warmup Iteration   9: 262243.136 ops/s
# Warmup Iteration  10: 258584.929 ops/s
# Warmup Iteration  11: 248803.259 ops/s
# Warmup Iteration  12: 286477.840 ops/s
# Warmup Iteration  13: 258147.980 ops/s
# Warmup Iteration  14: 271594.734 ops/s
# Warmup Iteration  15: 267546.504 ops/s
# Warmup Iteration  16: 260418.830 ops/s
# Warmup Iteration  17: 258804.438 ops/s
# Warmup Iteration  18: 261411.434 ops/s
# Warmup Iteration  19: 246275.306 ops/s
# Warmup Iteration  20: 253955.595 ops/s
# Warmup Iteration  21: 189427.989 ops/s
# Warmup Iteration  22: 266539.453 ops/s
# Warmup Iteration  23: 267219.199 ops/s
# Warmup Iteration  24: 246548.628 ops/s
# Warmup Iteration  25: 269137.528 ops/s
# Warmup Iteration  26: 267808.402 ops/s
# Warmup Iteration  27: 254196.385 ops/s
# Warmup Iteration  28: 251820.307 ops/s
# Warmup Iteration  29: 252571.682 ops/s
# Warmup Iteration  30: 262154.516 ops/s
Iteration   1: 247618.965 ops/s
Iteration   2: 240540.989 ops/s
Iteration   3: 261859.691 ops/s
Iteration   4: 259738.770 ops/s
Iteration   5: 240573.773 ops/s
Iteration   6: 255988.017 ops/s
Iteration   7: 247027.901 ops/s
Iteration   8: 264007.329 ops/s
Iteration   9: 267951.188 ops/s
Iteration  10: 250891.151 ops/s
Iteration  11: 267769.409 ops/s
Iteration  12: 249525.325 ops/s
Iteration  13: 249961.110 ops/s
Iteration  14: 256091.748 ops/s
Iteration  15: 244446.049 ops/s
Iteration  16: 258040.996 ops/s
Iteration  17: 248320.046 ops/s
Iteration  18: 270717.314 ops/s
Iteration  19: 237738.889 ops/s
Iteration  20: 252193.848 ops/s
Iteration  21: 261795.346 ops/s
Iteration  22: 244768.827 ops/s
Iteration  23: 259119.202 ops/s
Iteration  24: 248274.720 ops/s
Iteration  25: 251779.408 ops/s
Iteration  26: 267720.766 ops/s
Iteration  27: 250768.941 ops/s
Iteration  28: 271990.989 ops/s
Iteration  29: 242989.550 ops/s
Iteration  30: 248272.139 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_backpressureWithInitialValue":
  253949.413 ±(99.9%) 6395.583 ops/s [Average]
  (min, avg, max) = (237738.889, 253949.413, 271990.989), stdev = 9572.608
  CI (99.9%): [247553.830, 260344.996] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableScanTest._Benchmark.benchmark_backpressureWithInitialValue  thrpt   30  253949.413 ± 6395.583  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_longerSequence$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_longerSequence

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 468687.377 ops/s
# Warmup Iteration   2: 1653559.621 ops/s
# Warmup Iteration   3: 2741727.847 ops/s
# Warmup Iteration   4: 2555052.557 ops/s
# Warmup Iteration   5: 2612713.479 ops/s
# Warmup Iteration   6: 2594453.918 ops/s
# Warmup Iteration   7: 2669978.952 ops/s
# Warmup Iteration   8: 2684017.907 ops/s
# Warmup Iteration   9: 2605155.242 ops/s
# Warmup Iteration  10: 2691136.962 ops/s
# Warmup Iteration  11: 2619856.400 ops/s
# Warmup Iteration  12: 2420708.723 ops/s
# Warmup Iteration  13: 2632561.714 ops/s
# Warmup Iteration  14: 2696700.260 ops/s
# Warmup Iteration  15: 2637191.553 ops/s
# Warmup Iteration  16: 2648096.267 ops/s
# Warmup Iteration  17: 2735156.623 ops/s
# Warmup Iteration  18: 2607154.938 ops/s
# Warmup Iteration  19: 2651686.765 ops/s
# Warmup Iteration  20: 2629161.172 ops/s
# Warmup Iteration  21: 2692630.608 ops/s
# Warmup Iteration  22: 2549769.508 ops/s
# Warmup Iteration  23: 2762174.266 ops/s
# Warmup Iteration  24: 2736234.300 ops/s
# Warmup Iteration  25: 2616544.454 ops/s
# Warmup Iteration  26: 2661327.562 ops/s
# Warmup Iteration  27: 2795896.249 ops/s
# Warmup Iteration  28: 2560409.204 ops/s
# Warmup Iteration  29: 2791465.585 ops/s
# Warmup Iteration  30: 2744929.590 ops/s
Iteration   1: 2636696.132 ops/s
Iteration   2: 2709534.280 ops/s
Iteration   3: 2581224.731 ops/s
Iteration   4: 2677393.690 ops/s
Iteration   5: 2630030.610 ops/s
Iteration   6: 2621843.262 ops/s
Iteration   7: 2761084.640 ops/s
Iteration   8: 2600694.194 ops/s
Iteration   9: 2725282.666 ops/s
Iteration  10: 2651243.599 ops/s
Iteration  11: 2678686.300 ops/s
Iteration  12: 2695297.276 ops/s
Iteration  13: 2679692.684 ops/s
Iteration  14: 2682222.634 ops/s
Iteration  15: 2764703.004 ops/s
Iteration  16: 2680167.700 ops/s
Iteration  17: 2660028.775 ops/s
Iteration  18: 2634971.179 ops/s
Iteration  19: 2703029.421 ops/s
Iteration  20: 2732949.196 ops/s
Iteration  21: 2575320.859 ops/s
Iteration  22: 2805113.214 ops/s
Iteration  23: 2604018.821 ops/s
Iteration  24: 2763114.317 ops/s
Iteration  25: 2727341.198 ops/s
Iteration  26: 2580644.399 ops/s
Iteration  27: 2666274.828 ops/s
Iteration  28: 2623586.205 ops/s
Iteration  29: 2676761.020 ops/s
Iteration  30: 2764372.069 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_longerSequence":
  2676444.097 ±(99.9%) 40928.997 ops/s [Average]
  (min, avg, max) = (2575320.859, 2676444.097, 2805113.214), stdev = 61260.601
  CI (99.9%): [2635515.100, 2717373.094] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableTakeTest2._Benchmark.benchmark_longerSequence  thrpt   30  2676444.097 ± 40928.997  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_exactSequence$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_exactSequence

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 437650.105 ops/s
# Warmup Iteration   2: 1433135.578 ops/s
# Warmup Iteration   3: 1908489.037 ops/s
# Warmup Iteration   4: 2449807.739 ops/s
# Warmup Iteration   5: 2403723.243 ops/s
# Warmup Iteration   6: 2432590.048 ops/s
# Warmup Iteration   7: 2474713.533 ops/s
# Warmup Iteration   8: 2391768.087 ops/s
# Warmup Iteration   9: 2452141.133 ops/s
# Warmup Iteration  10: 2500154.406 ops/s
# Warmup Iteration  11: 2377839.674 ops/s
# Warmup Iteration  12: 2337444.957 ops/s
# Warmup Iteration  13: 2390007.300 ops/s
# Warmup Iteration  14: 2384601.522 ops/s
# Warmup Iteration  15: 2144898.698 ops/s
# Warmup Iteration  16: 2455581.761 ops/s
# Warmup Iteration  17: 2409352.361 ops/s
# Warmup Iteration  18: 2465842.661 ops/s
# Warmup Iteration  19: 2424740.209 ops/s
# Warmup Iteration  20: 2447419.651 ops/s
# Warmup Iteration  21: 2453249.054 ops/s
# Warmup Iteration  22: 2453111.749 ops/s
# Warmup Iteration  23: 2406273.756 ops/s
# Warmup Iteration  24: 2462010.233 ops/s
# Warmup Iteration  25: 2401311.980 ops/s
# Warmup Iteration  26: 2449317.980 ops/s
# Warmup Iteration  27: 2455742.090 ops/s
# Warmup Iteration  28: 2510050.022 ops/s
# Warmup Iteration  29: 2388260.751 ops/s
# Warmup Iteration  30: 2489435.548 ops/s
Iteration   1: 2447681.490 ops/s
Iteration   2: 2504902.969 ops/s
Iteration   3: 2402313.049 ops/s
Iteration   4: 2418604.570 ops/s
Iteration   5: 2381541.596 ops/s
Iteration   6: 2492849.709 ops/s
Iteration   7: 2366363.074 ops/s
Iteration   8: 2528247.695 ops/s
Iteration   9: 2379377.143 ops/s
Iteration  10: 2464439.743 ops/s
Iteration  11: 2515280.404 ops/s
Iteration  12: 2310356.125 ops/s
Iteration  13: 2515401.813 ops/s
Iteration  14: 2486962.955 ops/s
Iteration  15: 2473033.151 ops/s
Iteration  16: 2364263.898 ops/s
Iteration  17: 2543086.437 ops/s
Iteration  18: 2422451.302 ops/s
Iteration  19: 2467266.680 ops/s
Iteration  20: 2491244.897 ops/s
Iteration  21: 2398461.630 ops/s
Iteration  22: 2489775.366 ops/s
Iteration  23: 2428543.538 ops/s
Iteration  24: 2401211.228 ops/s
Iteration  25: 2502211.206 ops/s
Iteration  26: 2360563.377 ops/s
Iteration  27: 2471147.381 ops/s
Iteration  28: 2388249.384 ops/s
Iteration  29: 2456727.575 ops/s
Iteration  30: 2509503.609 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_exactSequence":
  2446068.766 ±(99.9%) 40204.230 ops/s [Average]
  (min, avg, max) = (2310356.125, 2446068.766, 2543086.437), stdev = 60175.803
  CI (99.9%): [2405864.537, 2486272.996] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FlowableTakeTest2._Benchmark.benchmark_exactSequence  thrpt   30  2446068.766 ± 40204.230  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferNegativeCapacity$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferNegativeCapacity

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 440119.929 ops/s
# Warmup Iteration   2: 586332.242 ops/s
# Warmup Iteration   3: 703498.809 ops/s
# Warmup Iteration   4: 715827.366 ops/s
# Warmup Iteration   5: 694133.696 ops/s
# Warmup Iteration   6: 712158.393 ops/s
# Warmup Iteration   7: 698384.555 ops/s
# Warmup Iteration   8: 711995.917 ops/s
# Warmup Iteration   9: 719575.739 ops/s
# Warmup Iteration  10: 651455.144 ops/s
# Warmup Iteration  11: 709763.674 ops/s
# Warmup Iteration  12: 712834.627 ops/s
# Warmup Iteration  13: 741461.142 ops/s
# Warmup Iteration  14: 732345.380 ops/s
# Warmup Iteration  15: 699263.758 ops/s
# Warmup Iteration  16: 716196.168 ops/s
# Warmup Iteration  17: 755899.423 ops/s
# Warmup Iteration  18: 788739.467 ops/s
# Warmup Iteration  19: 761440.501 ops/s
# Warmup Iteration  20: 750416.499 ops/s
# Warmup Iteration  21: 788295.041 ops/s
# Warmup Iteration  22: 781176.327 ops/s
# Warmup Iteration  23: 728803.085 ops/s
# Warmup Iteration  24: 745419.080 ops/s
# Warmup Iteration  25: 780314.671 ops/s
# Warmup Iteration  26: 756355.906 ops/s
# Warmup Iteration  27: 788281.167 ops/s
# Warmup Iteration  28: 746820.035 ops/s
# Warmup Iteration  29: 775472.449 ops/s
# Warmup Iteration  30: 759349.095 ops/s
Iteration   1: 771358.632 ops/s
Iteration   2: 728794.913 ops/s
Iteration   3: 783408.349 ops/s
Iteration   4: 768281.872 ops/s
Iteration   5: 771794.479 ops/s
Iteration   6: 770211.181 ops/s
Iteration   7: 765575.151 ops/s
Iteration   8: 771574.422 ops/s
Iteration   9: 759691.536 ops/s
Iteration  10: 782246.535 ops/s
Iteration  11: 758664.159 ops/s
Iteration  12: 755212.234 ops/s
Iteration  13: 766176.839 ops/s
Iteration  14: 767582.095 ops/s
Iteration  15: 778990.716 ops/s
Iteration  16: 762951.519 ops/s
Iteration  17: 766101.578 ops/s
Iteration  18: 768404.739 ops/s
Iteration  19: 764159.271 ops/s
Iteration  20: 780312.842 ops/s
Iteration  21: 776926.891 ops/s
Iteration  22: 749765.375 ops/s
Iteration  23: 786800.731 ops/s
Iteration  24: 764613.875 ops/s
Iteration  25: 752166.129 ops/s
Iteration  26: 784975.027 ops/s
Iteration  27: 752933.818 ops/s
Iteration  28: 790600.423 ops/s
Iteration  29: 741970.779 ops/s
Iteration  30: 793715.461 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferNegativeCapacity":
  767865.386 ±(99.9%) 9656.695 ops/s [Average]
  (min, avg, max) = (728794.913, 767865.386, 793715.461), stdev = 14453.688
  CI (99.9%): [758208.691, 777522.081] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferNegativeCapacity  thrpt   30  767865.386 ± 9656.695  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferZeroCapacity2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferZeroCapacity2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 406189.216 ops/s
# Warmup Iteration   2: 565246.686 ops/s
# Warmup Iteration   3: 696079.073 ops/s
# Warmup Iteration   4: 634875.031 ops/s
# Warmup Iteration   5: 752095.192 ops/s
# Warmup Iteration   6: 585812.400 ops/s
# Warmup Iteration   7: 742293.279 ops/s
# Warmup Iteration   8: 726118.209 ops/s
# Warmup Iteration   9: 695889.758 ops/s
# Warmup Iteration  10: 597327.563 ops/s
# Warmup Iteration  11: 709343.884 ops/s
# Warmup Iteration  12: 711223.684 ops/s
# Warmup Iteration  13: 715773.093 ops/s
# Warmup Iteration  14: 751418.721 ops/s
# Warmup Iteration  15: 688322.380 ops/s
# Warmup Iteration  16: 732332.996 ops/s
# Warmup Iteration  17: 749595.125 ops/s
# Warmup Iteration  18: 738760.330 ops/s
# Warmup Iteration  19: 789948.600 ops/s
# Warmup Iteration  20: 738006.189 ops/s
# Warmup Iteration  21: 773418.365 ops/s
# Warmup Iteration  22: 781440.345 ops/s
# Warmup Iteration  23: 725667.279 ops/s
# Warmup Iteration  24: 769174.804 ops/s
# Warmup Iteration  25: 752776.813 ops/s
# Warmup Iteration  26: 762028.264 ops/s
# Warmup Iteration  27: 790039.522 ops/s
# Warmup Iteration  28: 752297.322 ops/s
# Warmup Iteration  29: 764644.823 ops/s
# Warmup Iteration  30: 783835.252 ops/s
Iteration   1: 737497.288 ops/s
Iteration   2: 792110.881 ops/s
Iteration   3: 748562.856 ops/s
Iteration   4: 762586.146 ops/s
Iteration   5: 762696.629 ops/s
Iteration   6: 749250.152 ops/s
Iteration   7: 780615.855 ops/s
Iteration   8: 736486.725 ops/s
Iteration   9: 787162.257 ops/s
Iteration  10: 751106.660 ops/s
Iteration  11: 747374.647 ops/s
Iteration  12: 755695.291 ops/s
Iteration  13: 770320.308 ops/s
Iteration  14: 746159.989 ops/s
Iteration  15: 752884.282 ops/s
Iteration  16: 783992.481 ops/s
Iteration  17: 746136.028 ops/s
Iteration  18: 738065.946 ops/s
Iteration  19: 782040.519 ops/s
Iteration  20: 791451.901 ops/s
Iteration  21: 734750.766 ops/s
Iteration  22: 765733.191 ops/s
Iteration  23: 751051.582 ops/s
Iteration  24: 763715.666 ops/s
Iteration  25: 748888.768 ops/s
Iteration  26: 750024.290 ops/s
Iteration  27: 778362.548 ops/s
Iteration  28: 736315.575 ops/s
Iteration  29: 773642.681 ops/s
Iteration  30: 769320.112 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferZeroCapacity2":
  759800.067 ±(99.9%) 11770.093 ops/s [Average]
  (min, avg, max) = (734750.766, 759800.067, 792110.881), stdev = 17616.923
  CI (99.9%): [748029.974, 771570.160] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score       Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferZeroCapacity2  thrpt   30  759800.067 ± 11770.093  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferZeroCapacity$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferZeroCapacity

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 397988.784 ops/s
# Warmup Iteration   2: 591368.328 ops/s
# Warmup Iteration   3: 701801.929 ops/s
# Warmup Iteration   4: 698845.189 ops/s
# Warmup Iteration   5: 633158.389 ops/s
# Warmup Iteration   6: 683568.753 ops/s
# Warmup Iteration   7: 745223.055 ops/s
# Warmup Iteration   8: 698669.761 ops/s
# Warmup Iteration   9: 676898.216 ops/s
# Warmup Iteration  10: 700300.268 ops/s
# Warmup Iteration  11: 701425.991 ops/s
# Warmup Iteration  12: 693057.059 ops/s
# Warmup Iteration  13: 715435.480 ops/s
# Warmup Iteration  14: 678730.094 ops/s
# Warmup Iteration  15: 730314.391 ops/s
# Warmup Iteration  16: 693484.224 ops/s
# Warmup Iteration  17: 729525.831 ops/s
# Warmup Iteration  18: 745950.451 ops/s
# Warmup Iteration  19: 742043.768 ops/s
# Warmup Iteration  20: 731909.322 ops/s
# Warmup Iteration  21: 773739.734 ops/s
# Warmup Iteration  22: 750928.885 ops/s
# Warmup Iteration  23: 768352.080 ops/s
# Warmup Iteration  24: 728399.787 ops/s
# Warmup Iteration  25: 749331.322 ops/s
# Warmup Iteration  26: 719618.062 ops/s
# Warmup Iteration  27: 763536.987 ops/s
# Warmup Iteration  28: 732233.244 ops/s
# Warmup Iteration  29: 743040.936 ops/s
# Warmup Iteration  30: 692609.976 ops/s
Iteration   1: 712279.868 ops/s
Iteration   2: 763723.791 ops/s
Iteration   3: 787424.117 ops/s
Iteration   4: 704804.934 ops/s
Iteration   5: 763294.275 ops/s
Iteration   6: 736192.169 ops/s
Iteration   7: 776593.932 ops/s
Iteration   8: 722106.823 ops/s
Iteration   9: 770792.610 ops/s
Iteration  10: 723111.391 ops/s
Iteration  11: 750511.798 ops/s
Iteration  12: 759451.629 ops/s
Iteration  13: 740371.319 ops/s
Iteration  14: 750009.010 ops/s
Iteration  15: 787858.201 ops/s
Iteration  16: 728433.049 ops/s
Iteration  17: 759492.966 ops/s
Iteration  18: 738731.788 ops/s
Iteration  19: 770107.063 ops/s
Iteration  20: 740885.474 ops/s
Iteration  21: 752245.742 ops/s
Iteration  22: 727301.074 ops/s
Iteration  23: 761468.647 ops/s
Iteration  24: 749089.677 ops/s
Iteration  25: 750603.829 ops/s
Iteration  26: 763975.324 ops/s
Iteration  27: 744403.145 ops/s
Iteration  28: 757743.267 ops/s
Iteration  29: 732729.529 ops/s
Iteration  30: 747004.654 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferZeroCapacity":
  749091.370 ±(99.9%) 13629.997 ops/s [Average]
  (min, avg, max) = (704804.934, 749091.370, 787858.201), stdev = 20400.739
  CI (99.9%): [735461.373, 762721.366] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score       Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferZeroCapacity  thrpt   30  749091.370 ± 13629.997  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferNegativeCapacity2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferNegativeCapacity2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 448138.831 ops/s
# Warmup Iteration   2: 578443.983 ops/s
# Warmup Iteration   3: 709199.426 ops/s
# Warmup Iteration   4: 673265.625 ops/s
# Warmup Iteration   5: 544766.264 ops/s
# Warmup Iteration   6: 685552.349 ops/s
# Warmup Iteration   7: 613794.933 ops/s
# Warmup Iteration   8: 723768.462 ops/s
# Warmup Iteration   9: 681123.231 ops/s
# Warmup Iteration  10: 730283.455 ops/s
# Warmup Iteration  11: 712439.056 ops/s
# Warmup Iteration  12: 691168.295 ops/s
# Warmup Iteration  13: 725064.576 ops/s
# Warmup Iteration  14: 670313.038 ops/s
# Warmup Iteration  15: 735586.490 ops/s
# Warmup Iteration  16: 728144.979 ops/s
# Warmup Iteration  17: 723899.911 ops/s
# Warmup Iteration  18: 757072.427 ops/s
# Warmup Iteration  19: 734417.093 ops/s
# Warmup Iteration  20: 744112.125 ops/s
# Warmup Iteration  21: 728130.994 ops/s
# Warmup Iteration  22: 730265.178 ops/s
# Warmup Iteration  23: 780991.950 ops/s
# Warmup Iteration  24: 716200.047 ops/s
# Warmup Iteration  25: 760964.057 ops/s
# Warmup Iteration  26: 739455.365 ops/s
# Warmup Iteration  27: 730175.602 ops/s
# Warmup Iteration  28: 747835.904 ops/s
# Warmup Iteration  29: 752913.924 ops/s
# Warmup Iteration  30: 720024.243 ops/s
Iteration   1: 776304.630 ops/s
Iteration   2: 729620.075 ops/s
Iteration   3: 757805.390 ops/s
Iteration   4: 734897.371 ops/s
Iteration   5: 732638.403 ops/s
Iteration   6: 770434.143 ops/s
Iteration   7: 712505.333 ops/s
Iteration   8: 767823.105 ops/s
Iteration   9: 745146.673 ops/s
Iteration  10: 730304.217 ops/s
Iteration  11: 748012.134 ops/s
Iteration  12: 734996.984 ops/s
Iteration  13: 768605.594 ops/s
Iteration  14: 743505.433 ops/s
Iteration  15: 725013.135 ops/s
Iteration  16: 766141.976 ops/s
Iteration  17: 765780.148 ops/s
Iteration  18: 724329.559 ops/s
Iteration  19: 753789.552 ops/s
Iteration  20: 743786.658 ops/s
Iteration  21: 746101.336 ops/s
Iteration  22: 749675.387 ops/s
Iteration  23: 735468.242 ops/s
Iteration  24: 758687.319 ops/s
Iteration  25: 729818.724 ops/s
Iteration  26: 755118.471 ops/s
Iteration  27: 748278.772 ops/s
Iteration  28: 743910.026 ops/s
Iteration  29: 770729.408 ops/s
Iteration  30: 730444.232 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferNegativeCapacity2":
  746655.748 ±(99.9%) 11072.869 ops/s [Average]
  (min, avg, max) = (712505.333, 746655.748, 776304.630), stdev = 16573.350
  CI (99.9%): [735582.879, 757728.616] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt       Score       Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_fixBackpressureBufferNegativeCapacity2  thrpt   30  746655.748 ± 11072.869  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_drainMoreWorkBeforeCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_drainMoreWorkBeforeCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 209409.291 ops/s
# Warmup Iteration   2: 825576.598 ops/s
# Warmup Iteration   3: 1615423.891 ops/s
# Warmup Iteration   4: 1645632.336 ops/s
# Warmup Iteration   5: 1757416.378 ops/s
# Warmup Iteration   6: 1663491.869 ops/s
# Warmup Iteration   7: 1691486.840 ops/s
# Warmup Iteration   8: 1693126.455 ops/s
# Warmup Iteration   9: 1573130.827 ops/s
# Warmup Iteration  10: 1679694.240 ops/s
# Warmup Iteration  11: 1733647.195 ops/s
# Warmup Iteration  12: 1697701.571 ops/s
# Warmup Iteration  13: 1703991.453 ops/s
# Warmup Iteration  14: 1741400.862 ops/s
# Warmup Iteration  15: 1548408.871 ops/s
# Warmup Iteration  16: 1716479.054 ops/s
# Warmup Iteration  17: 1727321.300 ops/s
# Warmup Iteration  18: 1691916.875 ops/s
# Warmup Iteration  19: 1743947.813 ops/s
# Warmup Iteration  20: 1787088.936 ops/s
# Warmup Iteration  21: 1665509.481 ops/s
# Warmup Iteration  22: 1806127.591 ops/s
# Warmup Iteration  23: 1754429.152 ops/s
# Warmup Iteration  24: 1663372.533 ops/s
# Warmup Iteration  25: 1670584.412 ops/s
# Warmup Iteration  26: 1772149.288 ops/s
# Warmup Iteration  27: 1699230.273 ops/s
# Warmup Iteration  28: 1694628.523 ops/s
# Warmup Iteration  29: 1788483.095 ops/s
# Warmup Iteration  30: 1669095.065 ops/s
Iteration   1: 1744154.297 ops/s
Iteration   2: 1777006.570 ops/s
Iteration   3: 1689014.570 ops/s
Iteration   4: 1755837.081 ops/s
Iteration   5: 1660954.158 ops/s
Iteration   6: 1723060.219 ops/s
Iteration   7: 1751596.490 ops/s
Iteration   8: 1684768.872 ops/s
Iteration   9: 1801084.757 ops/s
Iteration  10: 1683501.759 ops/s
Iteration  11: 1770524.728 ops/s
Iteration  12: 1677965.863 ops/s
Iteration  13: 1757481.397 ops/s
Iteration  14: 1721247.798 ops/s
Iteration  15: 1720574.506 ops/s
Iteration  16: 1758211.187 ops/s
Iteration  17: 1650767.801 ops/s
Iteration  18: 1722060.706 ops/s
Iteration  19: 1784694.962 ops/s
Iteration  20: 1682998.745 ops/s
Iteration  21: 1754362.573 ops/s
Iteration  22: 1784775.385 ops/s
Iteration  23: 1734776.358 ops/s
Iteration  24: 1765026.309 ops/s
Iteration  25: 1656057.662 ops/s
Iteration  26: 1723045.759 ops/s
Iteration  27: 1710539.832 ops/s
Iteration  28: 1670080.801 ops/s
Iteration  29: 1802810.852 ops/s
Iteration  30: 1711484.215 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_drainMoreWorkBeforeCancel":
  1727682.207 ±(99.9%) 29547.233 ops/s [Average]
  (min, avg, max) = (1650767.801, 1727682.207, 1802810.852), stdev = 44224.911
  CI (99.9%): [1698134.974, 1757229.440] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_drainMoreWorkBeforeCancel  thrpt   30  1727682.207 ± 29547.233  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_noUpstreamCancelOnCasualChainClose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_noUpstreamCancelOnCasualChainClose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 153828.826 ops/s
# Warmup Iteration   2: 588445.345 ops/s
# Warmup Iteration   3: 844253.093 ops/s
# Warmup Iteration   4: 811943.325 ops/s
# Warmup Iteration   5: 758006.703 ops/s
# Warmup Iteration   6: 838850.438 ops/s
# Warmup Iteration   7: 872398.350 ops/s
# Warmup Iteration   8: 888648.908 ops/s
# Warmup Iteration   9: 861533.885 ops/s
# Warmup Iteration  10: 864561.550 ops/s
# Warmup Iteration  11: 869076.440 ops/s
# Warmup Iteration  12: 896496.101 ops/s
# Warmup Iteration  13: 851635.114 ops/s
# Warmup Iteration  14: 884780.470 ops/s
# Warmup Iteration  15: 860745.667 ops/s
# Warmup Iteration  16: 895917.157 ops/s
# Warmup Iteration  17: 961867.490 ops/s
# Warmup Iteration  18: 835378.421 ops/s
# Warmup Iteration  19: 875209.687 ops/s
# Warmup Iteration  20: 852158.644 ops/s
# Warmup Iteration  21: 854759.574 ops/s
# Warmup Iteration  22: 896144.679 ops/s
# Warmup Iteration  23: 881067.563 ops/s
# Warmup Iteration  24: 838943.601 ops/s
# Warmup Iteration  25: 844005.867 ops/s
# Warmup Iteration  26: 870678.833 ops/s
# Warmup Iteration  27: 898625.062 ops/s
# Warmup Iteration  28: 877776.422 ops/s
# Warmup Iteration  29: 877297.783 ops/s
# Warmup Iteration  30: 846946.485 ops/s
Iteration   1: 868869.281 ops/s
Iteration   2: 839400.346 ops/s
Iteration   3: 858937.234 ops/s
Iteration   4: 918601.268 ops/s
Iteration   5: 855233.264 ops/s
Iteration   6: 828547.775 ops/s
Iteration   7: 918644.874 ops/s
Iteration   8: 894566.539 ops/s
Iteration   9: 851334.342 ops/s
Iteration  10: 894459.543 ops/s
Iteration  11: 843914.327 ops/s
Iteration  12: 900254.012 ops/s
Iteration  13: 862625.107 ops/s
Iteration  14: 833933.384 ops/s
Iteration  15: 851062.934 ops/s
Iteration  16: 898365.030 ops/s
Iteration  17: 873225.888 ops/s
Iteration  18: 896126.431 ops/s
Iteration  19: 853989.476 ops/s
Iteration  20: 879204.440 ops/s
Iteration  21: 872090.071 ops/s
Iteration  22: 876524.098 ops/s
Iteration  23: 866981.165 ops/s
Iteration  24: 839383.253 ops/s
Iteration  25: 899307.962 ops/s
Iteration  26: 846040.243 ops/s
Iteration  27: 889406.556 ops/s
Iteration  28: 848500.435 ops/s
Iteration  29: 871082.784 ops/s
Iteration  30: 903592.866 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_noUpstreamCancelOnCasualChainClose":
  871140.164 ±(99.9%) 17001.539 ops/s [Average]
  (min, avg, max) = (828547.775, 871140.164, 918644.874), stdev = 25447.106
  CI (99.9%): [854138.625, 888141.704] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_noUpstreamCancelOnCasualChainClose  thrpt   30  871140.164 ± 17001.539  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9529.904 ops/s
# Warmup Iteration   2: 40131.908 ops/s
# Warmup Iteration   3: 50572.716 ops/s
# Warmup Iteration   4: 104749.205 ops/s
# Warmup Iteration   5: 123727.558 ops/s
# Warmup Iteration   6: 129929.159 ops/s
# Warmup Iteration   7: 129424.171 ops/s
# Warmup Iteration   8: 133534.128 ops/s
# Warmup Iteration   9: 133263.097 ops/s
# Warmup Iteration  10: 132746.386 ops/s
# Warmup Iteration  11: 136787.048 ops/s
# Warmup Iteration  12: 132785.162 ops/s
# Warmup Iteration  13: 134603.015 ops/s
# Warmup Iteration  14: 138170.292 ops/s
# Warmup Iteration  15: 129772.662 ops/s
# Warmup Iteration  16: 131151.310 ops/s
# Warmup Iteration  17: 136953.104 ops/s
# Warmup Iteration  18: 128404.995 ops/s
# Warmup Iteration  19: 137606.588 ops/s
# Warmup Iteration  20: 138733.654 ops/s
# Warmup Iteration  21: 129954.024 ops/s
# Warmup Iteration  22: 132590.259 ops/s
# Warmup Iteration  23: 134377.078 ops/s
# Warmup Iteration  24: 131523.487 ops/s
# Warmup Iteration  25: 131199.467 ops/s
# Warmup Iteration  26: 129956.186 ops/s
# Warmup Iteration  27: 133988.430 ops/s
# Warmup Iteration  28: 133433.672 ops/s
# Warmup Iteration  29: 129140.964 ops/s
# Warmup Iteration  30: 135216.580 ops/s
Iteration   1: 129155.793 ops/s
Iteration   2: 135929.893 ops/s
Iteration   3: 132712.823 ops/s
Iteration   4: 131783.670 ops/s
Iteration   5: 131591.807 ops/s
Iteration   6: 131316.094 ops/s
Iteration   7: 131497.436 ops/s
Iteration   8: 136763.796 ops/s
Iteration   9: 129324.176 ops/s
Iteration  10: 133125.290 ops/s
Iteration  11: 134104.097 ops/s
Iteration  12: 129135.728 ops/s
Iteration  13: 132598.583 ops/s
Iteration  14: 128664.036 ops/s
Iteration  15: 133586.830 ops/s
Iteration  16: 135990.004 ops/s
Iteration  17: 131904.170 ops/s
Iteration  18: 136596.029 ops/s
Iteration  19: 127166.757 ops/s
Iteration  20: 135190.586 ops/s
Iteration  21: 127087.289 ops/s
Iteration  22: 132896.208 ops/s
Iteration  23: 137677.391 ops/s
Iteration  24: 132191.901 ops/s
Iteration  25: 126236.728 ops/s
Iteration  26: 106393.054 ops/s
Iteration  27: 130892.470 ops/s
Iteration  28: 134890.069 ops/s
Iteration  29: 132537.785 ops/s
Iteration  30: 127956.407 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_backpressure":
  131229.897 ±(99.9%) 3738.243 ops/s [Average]
  (min, avg, max) = (106393.054, 131229.897, 137677.391), stdev = 5595.227
  CI (99.9%): [127491.654, 134968.140] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_backpressure  thrpt   30  131229.897 ± 3738.243  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_moreQueuedClean$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_moreQueuedClean

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30260.030 ops/s
# Warmup Iteration   2: 110138.846 ops/s
# Warmup Iteration   3: 190899.226 ops/s
# Warmup Iteration   4: 221683.746 ops/s
# Warmup Iteration   5: 225715.799 ops/s
# Warmup Iteration   6: 220039.200 ops/s
# Warmup Iteration   7: 202387.229 ops/s
# Warmup Iteration   8: 221496.912 ops/s
# Warmup Iteration   9: 227729.706 ops/s
# Warmup Iteration  10: 219327.166 ops/s
# Warmup Iteration  11: 225657.230 ops/s
# Warmup Iteration  12: 227348.747 ops/s
# Warmup Iteration  13: 226322.432 ops/s
# Warmup Iteration  14: 229092.674 ops/s
# Warmup Iteration  15: 226029.001 ops/s
# Warmup Iteration  16: 218689.925 ops/s
# Warmup Iteration  17: 228902.239 ops/s
# Warmup Iteration  18: 229797.784 ops/s
# Warmup Iteration  19: 227340.906 ops/s
# Warmup Iteration  20: 220593.665 ops/s
# Warmup Iteration  21: 233075.075 ops/s
# Warmup Iteration  22: 230289.526 ops/s
# Warmup Iteration  23: 222091.390 ops/s
# Warmup Iteration  24: 225337.693 ops/s
# Warmup Iteration  25: 233982.397 ops/s
# Warmup Iteration  26: 224243.516 ops/s
# Warmup Iteration  27: 233949.902 ops/s
# Warmup Iteration  28: 224790.366 ops/s
# Warmup Iteration  29: 231692.100 ops/s
# Warmup Iteration  30: 224766.333 ops/s
Iteration   1: 229167.365 ops/s
Iteration   2: 228248.891 ops/s
Iteration   3: 223776.891 ops/s
Iteration   4: 231469.091 ops/s
Iteration   5: 223485.884 ops/s
Iteration   6: 223025.709 ops/s
Iteration   7: 232941.285 ops/s
Iteration   8: 217651.042 ops/s
Iteration   9: 231513.183 ops/s
Iteration  10: 221619.370 ops/s
Iteration  11: 224443.931 ops/s
Iteration  12: 231664.978 ops/s
Iteration  13: 232135.646 ops/s
Iteration  14: 232331.234 ops/s
Iteration  15: 222881.142 ops/s
Iteration  16: 226358.558 ops/s
Iteration  17: 228756.933 ops/s
Iteration  18: 221211.937 ops/s
Iteration  19: 233304.292 ops/s
Iteration  20: 228598.309 ops/s
Iteration  21: 220234.255 ops/s
Iteration  22: 235236.068 ops/s
Iteration  23: 219593.203 ops/s
Iteration  24: 236093.998 ops/s
Iteration  25: 227757.945 ops/s
Iteration  26: 222847.747 ops/s
Iteration  27: 232723.463 ops/s
Iteration  28: 224797.832 ops/s
Iteration  29: 226024.137 ops/s
Iteration  30: 223364.836 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_moreQueuedClean":
  227108.638 ±(99.9%) 3367.059 ops/s [Average]
  (min, avg, max) = (217651.042, 227108.638, 236093.998), stdev = 5039.656
  CI (99.9%): [223741.580, 230475.697] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_moreQueuedClean  thrpt   30  227108.638 ± 3367.059  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 49332.675 ops/s
# Warmup Iteration   2: 168195.664 ops/s
# Warmup Iteration   3: 222197.745 ops/s
# Warmup Iteration   4: 297594.266 ops/s
# Warmup Iteration   5: 312244.376 ops/s
# Warmup Iteration   6: 323940.605 ops/s
# Warmup Iteration   7: 356069.199 ops/s
# Warmup Iteration   8: 345404.264 ops/s
# Warmup Iteration   9: 363048.959 ops/s
# Warmup Iteration  10: 360435.433 ops/s
# Warmup Iteration  11: 344975.333 ops/s
# Warmup Iteration  12: 346403.312 ops/s
# Warmup Iteration  13: 361771.922 ops/s
# Warmup Iteration  14: 337492.729 ops/s
# Warmup Iteration  15: 356945.524 ops/s
# Warmup Iteration  16: 344687.169 ops/s
# Warmup Iteration  17: 351499.733 ops/s
# Warmup Iteration  18: 355464.928 ops/s
# Warmup Iteration  19: 338914.572 ops/s
# Warmup Iteration  20: 360763.205 ops/s
# Warmup Iteration  21: 348665.700 ops/s
# Warmup Iteration  22: 354031.237 ops/s
# Warmup Iteration  23: 346747.190 ops/s
# Warmup Iteration  24: 343536.294 ops/s
# Warmup Iteration  25: 361964.076 ops/s
# Warmup Iteration  26: 347768.724 ops/s
# Warmup Iteration  27: 359963.670 ops/s
# Warmup Iteration  28: 364051.677 ops/s
# Warmup Iteration  29: 333717.603 ops/s
# Warmup Iteration  30: 362163.446 ops/s
Iteration   1: 369893.474 ops/s
Iteration   2: 340251.405 ops/s
Iteration   3: 352899.956 ops/s
Iteration   4: 357325.735 ops/s
Iteration   5: 349261.560 ops/s
Iteration   6: 351381.261 ops/s
Iteration   7: 351252.408 ops/s
Iteration   8: 351944.624 ops/s
Iteration   9: 357675.861 ops/s
Iteration  10: 337708.310 ops/s
Iteration  11: 356510.462 ops/s
Iteration  12: 341974.745 ops/s
Iteration  13: 342969.586 ops/s
Iteration  14: 356825.406 ops/s
Iteration  15: 348884.758 ops/s
Iteration  16: 338452.646 ops/s
Iteration  17: 352797.764 ops/s
Iteration  18: 344294.901 ops/s
Iteration  19: 356937.774 ops/s
Iteration  20: 360281.485 ops/s
Iteration  21: 289335.736 ops/s
Iteration  22: 353289.066 ops/s
Iteration  23: 353260.509 ops/s
Iteration  24: 348505.426 ops/s
Iteration  25: 353382.201 ops/s
Iteration  26: 337885.648 ops/s
Iteration  27: 365776.303 ops/s
Iteration  28: 346198.369 ops/s
Iteration  29: 361698.118 ops/s
Iteration  30: 336933.367 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries2":
  348859.629 ±(99.9%) 9363.631 ops/s [Average]
  (min, avg, max) = (289335.736, 348859.629, 369893.474), stdev = 14015.043
  CI (99.9%): [339495.998, 358223.260] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableReplayTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries2  thrpt   30  348859.629 ± 9363.631  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_unsafe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_unsafe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1345190.074 ops/s
# Warmup Iteration   2: 3416979.623 ops/s
# Warmup Iteration   3: 5354404.981 ops/s
# Warmup Iteration   4: 6016178.228 ops/s
# Warmup Iteration   5: 6074726.290 ops/s
# Warmup Iteration   6: 6065571.568 ops/s
# Warmup Iteration   7: 5926639.625 ops/s
# Warmup Iteration   8: 6098691.828 ops/s
# Warmup Iteration   9: 5977165.066 ops/s
# Warmup Iteration  10: 6090978.312 ops/s
# Warmup Iteration  11: 6003130.876 ops/s
# Warmup Iteration  12: 6068532.854 ops/s
# Warmup Iteration  13: 5873845.807 ops/s
# Warmup Iteration  14: 6195421.831 ops/s
# Warmup Iteration  15: 5814348.203 ops/s
# Warmup Iteration  16: 6292090.037 ops/s
# Warmup Iteration  17: 5997487.549 ops/s
# Warmup Iteration  18: 6264835.454 ops/s
# Warmup Iteration  19: 6289813.530 ops/s
# Warmup Iteration  20: 6022046.895 ops/s
# Warmup Iteration  21: 6438935.023 ops/s
# Warmup Iteration  22: 5917213.300 ops/s
# Warmup Iteration  23: 6259904.666 ops/s
# Warmup Iteration  24: 5947363.570 ops/s
# Warmup Iteration  25: 6059913.890 ops/s
# Warmup Iteration  26: 6060609.006 ops/s
# Warmup Iteration  27: 6035331.291 ops/s
# Warmup Iteration  28: 6181280.967 ops/s
# Warmup Iteration  29: 6277718.477 ops/s
# Warmup Iteration  30: 6189014.042 ops/s
Iteration   1: 6421926.962 ops/s
Iteration   2: 6165249.869 ops/s
Iteration   3: 5836019.485 ops/s
Iteration   4: 6328560.135 ops/s
Iteration   5: 6003861.311 ops/s
Iteration   6: 5817132.071 ops/s
Iteration   7: 6285137.887 ops/s
Iteration   8: 6271710.937 ops/s
Iteration   9: 6064990.044 ops/s
Iteration  10: 6250680.417 ops/s
Iteration  11: 6041000.714 ops/s
Iteration  12: 6154937.540 ops/s
Iteration  13: 6208536.378 ops/s
Iteration  14: 5900308.894 ops/s
Iteration  15: 6177242.097 ops/s
Iteration  16: 6237261.047 ops/s
Iteration  17: 6174606.741 ops/s
Iteration  18: 6209345.062 ops/s
Iteration  19: 6073117.990 ops/s
Iteration  20: 5980661.481 ops/s
Iteration  21: 6103208.792 ops/s
Iteration  22: 6129498.872 ops/s
Iteration  23: 6324294.781 ops/s
Iteration  24: 6204121.674 ops/s
Iteration  25: 6046281.762 ops/s
Iteration  26: 6395318.708 ops/s
Iteration  27: 6070775.854 ops/s
Iteration  28: 6151535.868 ops/s
Iteration  29: 6304538.178 ops/s
Iteration  30: 5995287.775 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_unsafe":
  6144238.311 ±(99.9%) 101699.299 ops/s [Average]
  (min, avg, max) = (5817132.071, 6144238.311, 6421926.962), stdev = 152218.735
  CI (99.9%): [6042539.012, 6245937.610] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score        Error  Units
FlowableCreateTest._Benchmark.benchmark_unsafe  thrpt   30  6144238.311 ± 101699.299  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_wrap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_wrap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 846666.892 ops/s
# Warmup Iteration   2: 4519807.425 ops/s
# Warmup Iteration   3: 4993945.619 ops/s
# Warmup Iteration   4: 5803240.511 ops/s
# Warmup Iteration   5: 5975080.976 ops/s
# Warmup Iteration   6: 5996741.059 ops/s
# Warmup Iteration   7: 5706076.596 ops/s
# Warmup Iteration   8: 5922922.104 ops/s
# Warmup Iteration   9: 6020136.171 ops/s
# Warmup Iteration  10: 5789075.657 ops/s
# Warmup Iteration  11: 5946319.062 ops/s
# Warmup Iteration  12: 5901518.940 ops/s
# Warmup Iteration  13: 5815900.443 ops/s
# Warmup Iteration  14: 5957797.946 ops/s
# Warmup Iteration  15: 5837899.867 ops/s
# Warmup Iteration  16: 6038043.763 ops/s
# Warmup Iteration  17: 5825381.957 ops/s
# Warmup Iteration  18: 5881881.388 ops/s
# Warmup Iteration  19: 6006165.255 ops/s
# Warmup Iteration  20: 5935429.807 ops/s
# Warmup Iteration  21: 6166784.537 ops/s
# Warmup Iteration  22: 6196758.784 ops/s
# Warmup Iteration  23: 5825997.965 ops/s
# Warmup Iteration  24: 5925991.422 ops/s
# Warmup Iteration  25: 5960305.853 ops/s
# Warmup Iteration  26: 6031722.593 ops/s
# Warmup Iteration  27: 5933929.902 ops/s
# Warmup Iteration  28: 6147819.840 ops/s
# Warmup Iteration  29: 5722378.048 ops/s
# Warmup Iteration  30: 5944862.431 ops/s
Iteration   1: 6015710.294 ops/s
Iteration   2: 5803512.659 ops/s
Iteration   3: 5934898.017 ops/s
Iteration   4: 5974303.777 ops/s
Iteration   5: 6140052.802 ops/s
Iteration   6: 6055865.336 ops/s
Iteration   7: 5779014.123 ops/s
Iteration   8: 6165295.092 ops/s
Iteration   9: 5921834.265 ops/s
Iteration  10: 5879757.014 ops/s
Iteration  11: 6125185.331 ops/s
Iteration  12: 5925539.242 ops/s
Iteration  13: 6089595.147 ops/s
Iteration  14: 6081319.455 ops/s
Iteration  15: 5721981.523 ops/s
Iteration  16: 4664998.905 ops/s
Iteration  17: 6141992.596 ops/s
Iteration  18: 5719385.810 ops/s
Iteration  19: 5952236.117 ops/s
Iteration  20: 6021776.241 ops/s
Iteration  21: 6103039.532 ops/s
Iteration  22: 5759129.838 ops/s
Iteration  23: 5909825.583 ops/s
Iteration  24: 6156054.994 ops/s
Iteration  25: 5766481.791 ops/s
Iteration  26: 6096110.722 ops/s
Iteration  27: 5982672.637 ops/s
Iteration  28: 5896723.941 ops/s
Iteration  29: 6184276.175 ops/s
Iteration  30: 6070721.025 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_wrap":
  5934642.999 ±(99.9%) 185970.807 ops/s [Average]
  (min, avg, max) = (4664998.905, 5934642.999, 6184276.175), stdev = 278352.370
  CI (99.9%): [5748672.193, 6120613.806] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score        Error  Units
FlowableCreateTest._Benchmark.benchmark_wrap  thrpt   30  5934642.999 ± 185970.807  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93746.628 ops/s
# Warmup Iteration   2: 392198.080 ops/s
# Warmup Iteration   3: 455645.634 ops/s
# Warmup Iteration   4: 428428.138 ops/s
# Warmup Iteration   5: 460576.510 ops/s
# Warmup Iteration   6: 443192.386 ops/s
# Warmup Iteration   7: 434245.186 ops/s
# Warmup Iteration   8: 457520.263 ops/s
# Warmup Iteration   9: 454248.842 ops/s
# Warmup Iteration  10: 439027.092 ops/s
# Warmup Iteration  11: 441563.897 ops/s
# Warmup Iteration  12: 456787.572 ops/s
# Warmup Iteration  13: 448862.059 ops/s
# Warmup Iteration  14: 459614.505 ops/s
# Warmup Iteration  15: 435952.057 ops/s
# Warmup Iteration  16: 465259.210 ops/s
# Warmup Iteration  17: 476447.121 ops/s
# Warmup Iteration  18: 445538.138 ops/s
# Warmup Iteration  19: 454572.962 ops/s
# Warmup Iteration  20: 491529.553 ops/s
# Warmup Iteration  21: 461275.973 ops/s
# Warmup Iteration  22: 501517.661 ops/s
# Warmup Iteration  23: 480658.115 ops/s
# Warmup Iteration  24: 467054.650 ops/s
# Warmup Iteration  25: 494206.992 ops/s
# Warmup Iteration  26: 485083.091 ops/s
# Warmup Iteration  27: 458922.490 ops/s
# Warmup Iteration  28: 485172.730 ops/s
# Warmup Iteration  29: 494562.596 ops/s
# Warmup Iteration  30: 465579.217 ops/s
Iteration   1: 472145.797 ops/s
Iteration   2: 485172.537 ops/s
Iteration   3: 471451.510 ops/s
Iteration   4: 481013.121 ops/s
Iteration   5: 443085.285 ops/s
Iteration   6: 474289.321 ops/s
Iteration   7: 474456.731 ops/s
Iteration   8: 484732.512 ops/s
Iteration   9: 471878.099 ops/s
Iteration  10: 469575.851 ops/s
Iteration  11: 493687.563 ops/s
Iteration  12: 461966.961 ops/s
Iteration  13: 472415.514 ops/s
Iteration  14: 487981.170 ops/s
Iteration  15: 468981.360 ops/s
Iteration  16: 487845.567 ops/s
Iteration  17: 467856.624 ops/s
Iteration  18: 475971.688 ops/s
Iteration  19: 489780.453 ops/s
Iteration  20: 466889.952 ops/s
Iteration  21: 488805.848 ops/s
Iteration  22: 467833.874 ops/s
Iteration  23: 481639.735 ops/s
Iteration  24: 470823.823 ops/s
Iteration  25: 478443.869 ops/s
Iteration  26: 479984.929 ops/s
Iteration  27: 461333.353 ops/s
Iteration  28: 489940.380 ops/s
Iteration  29: 471664.675 ops/s
Iteration  30: 475505.620 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_doubleOnSubscribe":
  475571.791 ±(99.9%) 7123.869 ops/s [Average]
  (min, avg, max) = (443085.285, 475571.791, 493687.563), stdev = 10662.672
  CI (99.9%): [468447.922, 482695.660] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  475571.791 ± 7123.869  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 172170.340 ops/s
# Warmup Iteration   2: 459890.029 ops/s
# Warmup Iteration   3: 471586.420 ops/s
# Warmup Iteration   4: 487548.645 ops/s
# Warmup Iteration   5: 488526.948 ops/s
# Warmup Iteration   6: 496728.752 ops/s
# Warmup Iteration   7: 442157.000 ops/s
# Warmup Iteration   8: 519750.856 ops/s
# Warmup Iteration   9: 491606.470 ops/s
# Warmup Iteration  10: 531562.806 ops/s
# Warmup Iteration  11: 504497.423 ops/s
# Warmup Iteration  12: 502100.539 ops/s
# Warmup Iteration  13: 519016.485 ops/s
# Warmup Iteration  14: 499583.839 ops/s
# Warmup Iteration  15: 524442.891 ops/s
# Warmup Iteration  16: 499329.433 ops/s
# Warmup Iteration  17: 525406.651 ops/s
# Warmup Iteration  18: 558397.065 ops/s
# Warmup Iteration  19: 526008.647 ops/s
# Warmup Iteration  20: 551904.523 ops/s
# Warmup Iteration  21: 522037.747 ops/s
# Warmup Iteration  22: 542476.529 ops/s
# Warmup Iteration  23: 524140.011 ops/s
# Warmup Iteration  24: 529733.980 ops/s
# Warmup Iteration  25: 537577.107 ops/s
# Warmup Iteration  26: 537774.066 ops/s
# Warmup Iteration  27: 537717.716 ops/s
# Warmup Iteration  28: 533273.280 ops/s
# Warmup Iteration  29: 530249.321 ops/s
# Warmup Iteration  30: 537785.604 ops/s
Iteration   1: 512627.717 ops/s
Iteration   2: 544458.046 ops/s
Iteration   3: 521917.839 ops/s
Iteration   4: 542734.598 ops/s
Iteration   5: 528428.955 ops/s
Iteration   6: 529321.469 ops/s
Iteration   7: 552456.447 ops/s
Iteration   8: 523003.216 ops/s
Iteration   9: 551242.071 ops/s
Iteration  10: 473090.451 ops/s
Iteration  11: 420559.848 ops/s
Iteration  12: 537930.694 ops/s
Iteration  13: 507377.420 ops/s
Iteration  14: 537194.201 ops/s
Iteration  15: 514003.830 ops/s
Iteration  16: 561015.862 ops/s
Iteration  17: 551266.454 ops/s
Iteration  18: 533871.625 ops/s
Iteration  19: 523590.573 ops/s
Iteration  20: 544787.471 ops/s
Iteration  21: 533112.220 ops/s
Iteration  22: 559268.285 ops/s
Iteration  23: 551545.268 ops/s
Iteration  24: 516611.124 ops/s
Iteration  25: 537895.524 ops/s
Iteration  26: 537920.484 ops/s
Iteration  27: 548272.177 ops/s
Iteration  28: 531662.363 ops/s
Iteration  29: 535848.255 ops/s
Iteration  30: 544688.730 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_doubleOnSubscribe":
  530256.774 ±(99.9%) 18298.007 ops/s [Average]
  (min, avg, max) = (420559.848, 530256.774, 561015.862), stdev = 27387.598
  CI (99.9%): [511958.767, 548554.781] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score       Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  530256.774 ± 18298.007  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromPubisherTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromPubisherTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1304091.587 ops/s
# Warmup Iteration   2: 4126298.693 ops/s
# Warmup Iteration   3: 5949681.668 ops/s
# Warmup Iteration   4: 6250617.389 ops/s
# Warmup Iteration   5: 6410081.807 ops/s
# Warmup Iteration   6: 6140327.025 ops/s
# Warmup Iteration   7: 6255649.450 ops/s
# Warmup Iteration   8: 6137829.832 ops/s
# Warmup Iteration   9: 6123268.301 ops/s
# Warmup Iteration  10: 6428748.333 ops/s
# Warmup Iteration  11: 6075180.790 ops/s
# Warmup Iteration  12: 6302478.646 ops/s
# Warmup Iteration  13: 6110782.927 ops/s
# Warmup Iteration  14: 6129723.523 ops/s
# Warmup Iteration  15: 6488247.406 ops/s
# Warmup Iteration  16: 5964262.635 ops/s
# Warmup Iteration  17: 6233600.092 ops/s
# Warmup Iteration  18: 6280620.339 ops/s
# Warmup Iteration  19: 6281809.269 ops/s
# Warmup Iteration  20: 6285223.674 ops/s
# Warmup Iteration  21: 6032370.371 ops/s
# Warmup Iteration  22: 6195388.108 ops/s
# Warmup Iteration  23: 6374457.016 ops/s
# Warmup Iteration  24: 6004275.275 ops/s
# Warmup Iteration  25: 6194191.497 ops/s
# Warmup Iteration  26: 6239562.068 ops/s
# Warmup Iteration  27: 6122085.340 ops/s
# Warmup Iteration  28: 6314964.515 ops/s
# Warmup Iteration  29: 6240182.503 ops/s
# Warmup Iteration  30: 6292865.082 ops/s
Iteration   1: 6489860.814 ops/s
Iteration   2: 6012379.929 ops/s
Iteration   3: 6379992.101 ops/s
Iteration   4: 6110843.074 ops/s
Iteration   5: 6140686.205 ops/s
Iteration   6: 6460976.127 ops/s
Iteration   7: 6061696.831 ops/s
Iteration   8: 6449809.217 ops/s
Iteration   9: 6347698.626 ops/s
Iteration  10: 6138420.067 ops/s
Iteration  11: 6239115.672 ops/s
Iteration  12: 6200735.644 ops/s
Iteration  13: 6155248.581 ops/s
Iteration  14: 6432255.153 ops/s
Iteration  15: 6198063.465 ops/s
Iteration  16: 6238066.277 ops/s
Iteration  17: 6314487.250 ops/s
Iteration  18: 6111936.904 ops/s
Iteration  19: 6302587.685 ops/s
Iteration  20: 6482262.410 ops/s
Iteration  21: 6081094.008 ops/s
Iteration  22: 6489920.768 ops/s
Iteration  23: 5898635.455 ops/s
Iteration  24: 6248377.444 ops/s
Iteration  25: 6108016.531 ops/s
Iteration  26: 6171900.823 ops/s
Iteration  27: 6284270.796 ops/s
Iteration  28: 6116553.193 ops/s
Iteration  29: 6312120.008 ops/s
Iteration  30: 6072219.063 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromPubisherTest._Benchmark.benchmark_just":
  6235007.671 ±(99.9%) 104915.796 ops/s [Average]
  (min, avg, max) = (5898635.455, 6235007.671, 6489920.768), stdev = 157033.037
  CI (99.9%): [6130091.874, 6339923.467] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
MaybeFromPubisherTest._Benchmark.benchmark_just  thrpt   30  6235007.671 ± 104915.796  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastWithNoElements$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastWithNoElements

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4724967.072 ops/s
# Warmup Iteration   2: 10789790.236 ops/s
# Warmup Iteration   3: 16048342.987 ops/s
# Warmup Iteration   4: 15508889.533 ops/s
# Warmup Iteration   5: 15324936.849 ops/s
# Warmup Iteration   6: 15400391.191 ops/s
# Warmup Iteration   7: 16138633.577 ops/s
# Warmup Iteration   8: 15228322.114 ops/s
# Warmup Iteration   9: 15860912.887 ops/s
# Warmup Iteration  10: 15980493.320 ops/s
# Warmup Iteration  11: 14539140.727 ops/s
# Warmup Iteration  12: 15739722.662 ops/s
# Warmup Iteration  13: 16369534.865 ops/s
# Warmup Iteration  14: 15039302.309 ops/s
# Warmup Iteration  15: 15880501.338 ops/s
# Warmup Iteration  16: 15503420.202 ops/s
# Warmup Iteration  17: 15658313.882 ops/s
# Warmup Iteration  18: 15613625.115 ops/s
# Warmup Iteration  19: 15780529.309 ops/s
# Warmup Iteration  20: 16016716.590 ops/s
# Warmup Iteration  21: 15166858.369 ops/s
# Warmup Iteration  22: 16079645.055 ops/s
# Warmup Iteration  23: 15759017.106 ops/s
# Warmup Iteration  24: 15591667.907 ops/s
# Warmup Iteration  25: 15832051.948 ops/s
# Warmup Iteration  26: 15655724.704 ops/s
# Warmup Iteration  27: 16115234.633 ops/s
# Warmup Iteration  28: 15423260.582 ops/s
# Warmup Iteration  29: 15382296.569 ops/s
# Warmup Iteration  30: 16372088.619 ops/s
Iteration   1: 15275819.642 ops/s
Iteration   2: 16232888.570 ops/s
Iteration   3: 15258852.080 ops/s
Iteration   4: 15281162.318 ops/s
Iteration   5: 12945044.121 ops/s
Iteration   6: 16201768.091 ops/s
Iteration   7: 15523861.069 ops/s
Iteration   8: 15855236.804 ops/s
Iteration   9: 16467123.113 ops/s
Iteration  10: 15066091.215 ops/s
Iteration  11: 16026523.172 ops/s
Iteration  12: 15116294.447 ops/s
Iteration  13: 15966951.686 ops/s
Iteration  14: 15436198.399 ops/s
Iteration  15: 15268703.719 ops/s
Iteration  16: 16221720.377 ops/s
Iteration  17: 15583138.266 ops/s
Iteration  18: 16259914.782 ops/s
Iteration  19: 15249498.932 ops/s
Iteration  20: 15839644.932 ops/s
Iteration  21: 15509203.959 ops/s
Iteration  22: 15590610.511 ops/s
Iteration  23: 16203130.138 ops/s
Iteration  24: 15243911.393 ops/s
Iteration  25: 15397534.292 ops/s
Iteration  26: 16395059.025 ops/s
Iteration  27: 15066482.293 ops/s
Iteration  28: 16307417.121 ops/s
Iteration  29: 15754389.445 ops/s
Iteration  30: 15546316.304 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastWithNoElements":
  15603016.341 ±(99.9%) 445872.601 ops/s [Average]
  (min, avg, max) = (12945044.121, 15603016.341, 16467123.113), stdev = 667361.169
  CI (99.9%): [15157143.740, 16048888.941] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
FlowableLastTest._Benchmark.benchmark_lastWithNoElements  thrpt   30  15603016.341 ± 445872.601  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_safeSubscriberAlreadySafe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_safeSubscriberAlreadySafe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1912279.097 ops/s
# Warmup Iteration   2: 4902093.876 ops/s
# Warmup Iteration   3: 7052717.860 ops/s
# Warmup Iteration   4: 6616948.303 ops/s
# Warmup Iteration   5: 7040252.061 ops/s
# Warmup Iteration   6: 6723861.991 ops/s
# Warmup Iteration   7: 7020003.067 ops/s
# Warmup Iteration   8: 7008709.395 ops/s
# Warmup Iteration   9: 6834247.264 ops/s
# Warmup Iteration  10: 6871527.878 ops/s
# Warmup Iteration  11: 7112578.080 ops/s
# Warmup Iteration  12: 6798466.946 ops/s
# Warmup Iteration  13: 7143701.729 ops/s
# Warmup Iteration  14: 6846619.002 ops/s
# Warmup Iteration  15: 7016663.676 ops/s
# Warmup Iteration  16: 7184425.403 ops/s
# Warmup Iteration  17: 7061751.904 ops/s
# Warmup Iteration  18: 6777192.253 ops/s
# Warmup Iteration  19: 7169134.114 ops/s
# Warmup Iteration  20: 7215713.135 ops/s
# Warmup Iteration  21: 6746665.746 ops/s
# Warmup Iteration  22: 7302326.687 ops/s
# Warmup Iteration  23: 6825696.567 ops/s
# Warmup Iteration  24: 6920055.110 ops/s
# Warmup Iteration  25: 7181296.027 ops/s
# Warmup Iteration  26: 6750237.092 ops/s
# Warmup Iteration  27: 7365081.141 ops/s
# Warmup Iteration  28: 6711859.421 ops/s
# Warmup Iteration  29: 7091061.492 ops/s
# Warmup Iteration  30: 6896908.630 ops/s
Iteration   1: 6984711.215 ops/s
Iteration   2: 7035165.401 ops/s
Iteration   3: 6904353.623 ops/s
Iteration   4: 7010575.368 ops/s
Iteration   5: 6913501.693 ops/s
Iteration   6: 6867205.857 ops/s
Iteration   7: 7233093.046 ops/s
Iteration   8: 6844637.801 ops/s
Iteration   9: 6986019.093 ops/s
Iteration  10: 6770332.495 ops/s
Iteration  11: 7020423.989 ops/s
Iteration  12: 6953474.130 ops/s
Iteration  13: 6741375.168 ops/s
Iteration  14: 7070643.741 ops/s
Iteration  15: 6907985.749 ops/s
Iteration  16: 7088880.074 ops/s
Iteration  17: 6995762.187 ops/s
Iteration  18: 6927271.692 ops/s
Iteration  19: 7181981.625 ops/s
Iteration  20: 6903221.594 ops/s
Iteration  21: 6857657.353 ops/s
Iteration  22: 7064636.728 ops/s
Iteration  23: 6851028.454 ops/s
Iteration  24: 7351280.419 ops/s
Iteration  25: 7254248.819 ops/s
Iteration  26: 6769310.729 ops/s
Iteration  27: 7160918.856 ops/s
Iteration  28: 6928608.992 ops/s
Iteration  29: 7054346.737 ops/s
Iteration  30: 7058357.313 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_safeSubscriberAlreadySafe":
  6989700.331 ±(99.9%) 98312.239 ops/s [Average]
  (min, avg, max) = (6741375.168, 6989700.331, 7351280.419), stdev = 147149.142
  CI (99.9%): [6891388.092, 7088012.570] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableSubscriberTest._Benchmark.benchmark_safeSubscriberAlreadySafe  thrpt   30  6989700.331 ± 98312.239  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_withPublisherDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_withPublisherDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1389537.602 ops/s
# Warmup Iteration   2: 6815147.836 ops/s
# Warmup Iteration   3: 9125268.156 ops/s
# Warmup Iteration   4: 9981390.889 ops/s
# Warmup Iteration   5: 10724760.881 ops/s
# Warmup Iteration   6: 10206286.157 ops/s
# Warmup Iteration   7: 10059953.904 ops/s
# Warmup Iteration   8: 10526171.085 ops/s
# Warmup Iteration   9: 10284083.887 ops/s
# Warmup Iteration  10: 10530656.097 ops/s
# Warmup Iteration  11: 10184637.413 ops/s
# Warmup Iteration  12: 9891150.560 ops/s
# Warmup Iteration  13: 10723397.076 ops/s
# Warmup Iteration  14: 10245514.944 ops/s
# Warmup Iteration  15: 10134348.646 ops/s
# Warmup Iteration  16: 10837856.135 ops/s
# Warmup Iteration  17: 10087598.987 ops/s
# Warmup Iteration  18: 10812264.444 ops/s
# Warmup Iteration  19: 10156756.356 ops/s
# Warmup Iteration  20: 10537068.414 ops/s
# Warmup Iteration  21: 10114210.196 ops/s
# Warmup Iteration  22: 10688426.849 ops/s
# Warmup Iteration  23: 10064793.302 ops/s
# Warmup Iteration  24: 10305218.628 ops/s
# Warmup Iteration  25: 10585785.476 ops/s
# Warmup Iteration  26: 10263858.343 ops/s
# Warmup Iteration  27: 10555400.650 ops/s
# Warmup Iteration  28: 10309712.232 ops/s
# Warmup Iteration  29: 10330743.137 ops/s
# Warmup Iteration  30: 8481450.201 ops/s
Iteration   1: 10914393.670 ops/s
Iteration   2: 10099854.075 ops/s
Iteration   3: 10445618.750 ops/s
Iteration   4: 10104050.199 ops/s
Iteration   5: 10668676.645 ops/s
Iteration   6: 10358145.168 ops/s
Iteration   7: 10068963.447 ops/s
Iteration   8: 10639019.630 ops/s
Iteration   9: 10004118.024 ops/s
Iteration  10: 10690810.548 ops/s
Iteration  11: 10028282.942 ops/s
Iteration  12: 10673324.935 ops/s
Iteration  13: 10031399.250 ops/s
Iteration  14: 10633950.937 ops/s
Iteration  15: 10382073.556 ops/s
Iteration  16: 10749889.821 ops/s
Iteration  17: 9982452.031 ops/s
Iteration  18: 10629959.631 ops/s
Iteration  19: 10582802.043 ops/s
Iteration  20: 10065370.062 ops/s
Iteration  21: 10530702.251 ops/s
Iteration  22: 10272808.578 ops/s
Iteration  23: 10356166.558 ops/s
Iteration  24: 10043184.176 ops/s
Iteration  25: 10528679.154 ops/s
Iteration  26: 10348025.489 ops/s
Iteration  27: 10280014.553 ops/s
Iteration  28: 10382541.540 ops/s
Iteration  29: 10291224.933 ops/s
Iteration  30: 10308692.686 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_withPublisherDispose":
  10369839.843 ±(99.9%) 176089.465 ops/s [Average]
  (min, avg, max) = (9982452.031, 10369839.843, 10914393.670), stdev = 263562.442
  CI (99.9%): [10193750.378, 10545929.308] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
MaybeDelaySubscriptionTest._Benchmark.benchmark_withPublisherDispose  thrpt   30  10369839.843 ± 176089.465  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceWithObjectsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceWithObjectsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4738693.154 ops/s
# Warmup Iteration   2: 13980333.888 ops/s
# Warmup Iteration   3: 20369022.647 ops/s
# Warmup Iteration   4: 20230174.740 ops/s
# Warmup Iteration   5: 20581668.500 ops/s
# Warmup Iteration   6: 20521419.450 ops/s
# Warmup Iteration   7: 20912634.935 ops/s
# Warmup Iteration   8: 20755647.014 ops/s
# Warmup Iteration   9: 19725816.871 ops/s
# Warmup Iteration  10: 20785290.567 ops/s
# Warmup Iteration  11: 20613193.138 ops/s
# Warmup Iteration  12: 19843338.712 ops/s
# Warmup Iteration  13: 21003067.136 ops/s
# Warmup Iteration  14: 20987370.350 ops/s
# Warmup Iteration  15: 19940628.709 ops/s
# Warmup Iteration  16: 20204059.997 ops/s
# Warmup Iteration  17: 20223690.575 ops/s
# Warmup Iteration  18: 20759573.418 ops/s
# Warmup Iteration  19: 20644656.724 ops/s
# Warmup Iteration  20: 20054465.449 ops/s
# Warmup Iteration  21: 21113366.695 ops/s
# Warmup Iteration  22: 19605283.468 ops/s
# Warmup Iteration  23: 21141702.699 ops/s
# Warmup Iteration  24: 20280482.607 ops/s
# Warmup Iteration  25: 20000199.318 ops/s
# Warmup Iteration  26: 20871707.635 ops/s
# Warmup Iteration  27: 20122715.460 ops/s
# Warmup Iteration  28: 20403128.673 ops/s
# Warmup Iteration  29: 20359156.570 ops/s
# Warmup Iteration  30: 20021402.066 ops/s
Iteration   1: 20715159.530 ops/s
Iteration   2: 20000643.698 ops/s
Iteration   3: 20781862.823 ops/s
Iteration   4: 20354019.297 ops/s
Iteration   5: 20212209.596 ops/s
Iteration   6: 20125195.517 ops/s
Iteration   7: 20894604.282 ops/s
Iteration   8: 20092689.501 ops/s
Iteration   9: 20471174.433 ops/s
Iteration  10: 19656526.168 ops/s
Iteration  11: 19949769.582 ops/s
Iteration  12: 20713159.282 ops/s
Iteration  13: 19872309.472 ops/s
Iteration  14: 21151116.509 ops/s
Iteration  15: 20480706.083 ops/s
Iteration  16: 19397311.122 ops/s
Iteration  17: 20780427.495 ops/s
Iteration  18: 19893197.845 ops/s
Iteration  19: 19091209.742 ops/s
Iteration  20: 20424929.580 ops/s
Iteration  21: 19335655.501 ops/s
Iteration  22: 20618020.702 ops/s
Iteration  23: 20005828.730 ops/s
Iteration  24: 20386429.785 ops/s
Iteration  25: 20188881.109 ops/s
Iteration  26: 20011364.887 ops/s
Iteration  27: 20605525.332 ops/s
Iteration  28: 19852936.869 ops/s
Iteration  29: 20802284.191 ops/s
Iteration  30: 20029965.831 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceWithObjectsFlowable":
  20229837.150 ±(99.9%) 327964.730 ops/s [Average]
  (min, avg, max) = (19091209.742, 20229837.150, 21151116.509), stdev = 490882.205
  CI (99.9%): [19901872.420, 20557801.879] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
FlowableReduceTests._Benchmark.benchmark_reduceWithObjectsFlowable  thrpt   30  20229837.150 ± 327964.730  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 462804.673 ops/s
# Warmup Iteration   2: 1982834.700 ops/s
# Warmup Iteration   3: 2674346.849 ops/s
# Warmup Iteration   4: 2885953.408 ops/s
# Warmup Iteration   5: 3125506.999 ops/s
# Warmup Iteration   6: 3141353.032 ops/s
# Warmup Iteration   7: 3001485.148 ops/s
# Warmup Iteration   8: 3180966.045 ops/s
# Warmup Iteration   9: 3108229.570 ops/s
# Warmup Iteration  10: 3005900.419 ops/s
# Warmup Iteration  11: 2909876.552 ops/s
# Warmup Iteration  12: 3119907.280 ops/s
# Warmup Iteration  13: 2904205.588 ops/s
# Warmup Iteration  14: 3105389.968 ops/s
# Warmup Iteration  15: 3038911.459 ops/s
# Warmup Iteration  16: 2931280.787 ops/s
# Warmup Iteration  17: 3111548.860 ops/s
# Warmup Iteration  18: 2976303.514 ops/s
# Warmup Iteration  19: 3019563.757 ops/s
# Warmup Iteration  20: 3128262.177 ops/s
# Warmup Iteration  21: 2982566.683 ops/s
# Warmup Iteration  22: 3060427.244 ops/s
# Warmup Iteration  23: 3155548.436 ops/s
# Warmup Iteration  24: 2943215.003 ops/s
# Warmup Iteration  25: 2124216.854 ops/s
# Warmup Iteration  26: 3152657.098 ops/s
# Warmup Iteration  27: 2985492.430 ops/s
# Warmup Iteration  28: 3151346.484 ops/s
# Warmup Iteration  29: 2892072.112 ops/s
# Warmup Iteration  30: 3129093.116 ops/s
Iteration   1: 2972687.826 ops/s
Iteration   2: 2976917.257 ops/s
Iteration   3: 3122758.885 ops/s
Iteration   4: 2939674.260 ops/s
Iteration   5: 3164572.336 ops/s
Iteration   6: 3035842.314 ops/s
Iteration   7: 3086761.828 ops/s
Iteration   8: 3076440.292 ops/s
Iteration   9: 2955808.886 ops/s
Iteration  10: 3162893.444 ops/s
Iteration  11: 2900264.334 ops/s
Iteration  12: 3004601.117 ops/s
Iteration  13: 3105701.996 ops/s
Iteration  14: 2916012.158 ops/s
Iteration  15: 3114940.042 ops/s
Iteration  16: 2976061.204 ops/s
Iteration  17: 3183080.044 ops/s
Iteration  18: 3032282.655 ops/s
Iteration  19: 3033292.704 ops/s
Iteration  20: 3210646.637 ops/s
Iteration  21: 2935174.639 ops/s
Iteration  22: 3122765.321 ops/s
Iteration  23: 3012530.617 ops/s
Iteration  24: 2985836.707 ops/s
Iteration  25: 3155556.574 ops/s
Iteration  26: 2998220.085 ops/s
Iteration  27: 3136775.772 ops/s
Iteration  28: 3072800.402 ops/s
Iteration  29: 3106586.406 ops/s
Iteration  30: 3077381.151 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_take":
  3052495.596 ±(99.9%) 57493.242 ops/s [Average]
  (min, avg, max) = (2900264.334, 3052495.596, 3210646.637), stdev = 86053.184
  CI (99.9%): [2995002.354, 3109988.838] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableOnBackpressureLatestTest._Benchmark.benchmark_take  thrpt   30  3052495.596 ± 57493.242  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1597425.778 ops/s
# Warmup Iteration   2: 4162753.370 ops/s
# Warmup Iteration   3: 5792476.579 ops/s
# Warmup Iteration   4: 5957443.666 ops/s
# Warmup Iteration   5: 6174098.072 ops/s
# Warmup Iteration   6: 5679002.950 ops/s
# Warmup Iteration   7: 5875810.870 ops/s
# Warmup Iteration   8: 6174047.166 ops/s
# Warmup Iteration   9: 5688700.013 ops/s
# Warmup Iteration  10: 5886497.138 ops/s
# Warmup Iteration  11: 5772049.121 ops/s
# Warmup Iteration  12: 5941361.575 ops/s
# Warmup Iteration  13: 5988574.804 ops/s
# Warmup Iteration  14: 5600134.464 ops/s
# Warmup Iteration  15: 6138544.177 ops/s
# Warmup Iteration  16: 5657182.107 ops/s
# Warmup Iteration  17: 6135091.444 ops/s
# Warmup Iteration  18: 5886535.099 ops/s
# Warmup Iteration  19: 5997461.679 ops/s
# Warmup Iteration  20: 5888395.451 ops/s
# Warmup Iteration  21: 5913732.915 ops/s
# Warmup Iteration  22: 6173563.711 ops/s
# Warmup Iteration  23: 5811465.922 ops/s
# Warmup Iteration  24: 5938986.224 ops/s
# Warmup Iteration  25: 5965675.983 ops/s
# Warmup Iteration  26: 5887132.284 ops/s
# Warmup Iteration  27: 5822044.098 ops/s
# Warmup Iteration  28: 6082378.518 ops/s
# Warmup Iteration  29: 5895291.471 ops/s
# Warmup Iteration  30: 5810093.094 ops/s
Iteration   1: 6138189.859 ops/s
Iteration   2: 5634317.102 ops/s
Iteration   3: 6175750.007 ops/s
Iteration   4: 5804763.362 ops/s
Iteration   5: 5840009.712 ops/s
Iteration   6: 5993684.245 ops/s
Iteration   7: 5930590.505 ops/s
Iteration   8: 5959205.126 ops/s
Iteration   9: 5883539.343 ops/s
Iteration  10: 5891782.833 ops/s
Iteration  11: 6101715.610 ops/s
Iteration  12: 5975376.480 ops/s
Iteration  13: 5838489.879 ops/s
Iteration  14: 6220785.864 ops/s
Iteration  15: 5779386.950 ops/s
Iteration  16: 6081565.293 ops/s
Iteration  17: 5860223.851 ops/s
Iteration  18: 6028711.205 ops/s
Iteration  19: 6098213.122 ops/s
Iteration  20: 5950676.657 ops/s
Iteration  21: 5864658.768 ops/s
Iteration  22: 6003841.444 ops/s
Iteration  23: 5962218.936 ops/s
Iteration  24: 5877108.659 ops/s
Iteration  25: 5929453.440 ops/s
Iteration  26: 5830176.690 ops/s
Iteration  27: 5867770.035 ops/s
Iteration  28: 6065878.230 ops/s
Iteration  29: 5791108.738 ops/s
Iteration  30: 6156783.262 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_dispose":
  5951199.174 ±(99.9%) 91172.514 ops/s [Average]
  (min, avg, max) = (5634317.102, 5951199.174, 6220785.864), stdev = 136462.738
  CI (99.9%): [5860026.659, 6042371.688] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FlowableTakeLastOneTest._Benchmark.benchmark_dispose  thrpt   30  5951199.174 ± 91172.514  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_reduceFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_reduceFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95575.339 ops/s
# Warmup Iteration   2: 520636.230 ops/s
# Warmup Iteration   3: 572693.423 ops/s
# Warmup Iteration   4: 532974.081 ops/s
# Warmup Iteration   5: 539379.682 ops/s
# Warmup Iteration   6: 551960.265 ops/s
# Warmup Iteration   7: 524987.714 ops/s
# Warmup Iteration   8: 567869.811 ops/s
# Warmup Iteration   9: 553728.731 ops/s
# Warmup Iteration  10: 569982.541 ops/s
# Warmup Iteration  11: 551961.540 ops/s
# Warmup Iteration  12: 586078.432 ops/s
# Warmup Iteration  13: 564174.094 ops/s
# Warmup Iteration  14: 549210.373 ops/s
# Warmup Iteration  15: 569058.983 ops/s
# Warmup Iteration  16: 540961.872 ops/s
# Warmup Iteration  17: 604278.383 ops/s
# Warmup Iteration  18: 568301.129 ops/s
# Warmup Iteration  19: 571393.100 ops/s
# Warmup Iteration  20: 449180.125 ops/s
# Warmup Iteration  21: 571411.434 ops/s
# Warmup Iteration  22: 597404.324 ops/s
# Warmup Iteration  23: 595975.528 ops/s
# Warmup Iteration  24: 557398.145 ops/s
# Warmup Iteration  25: 584141.941 ops/s
# Warmup Iteration  26: 604820.518 ops/s
# Warmup Iteration  27: 582169.102 ops/s
# Warmup Iteration  28: 588862.973 ops/s
# Warmup Iteration  29: 601570.238 ops/s
# Warmup Iteration  30: 586068.610 ops/s
Iteration   1: 565755.658 ops/s
Iteration   2: 602011.049 ops/s
Iteration   3: 580208.507 ops/s
Iteration   4: 603235.873 ops/s
Iteration   5: 586895.415 ops/s
Iteration   6: 567600.184 ops/s
Iteration   7: 596186.460 ops/s
Iteration   8: 581745.612 ops/s
Iteration   9: 603365.825 ops/s
Iteration  10: 567224.654 ops/s
Iteration  11: 581586.825 ops/s
Iteration  12: 597922.708 ops/s
Iteration  13: 574585.650 ops/s
Iteration  14: 593303.822 ops/s
Iteration  15: 576887.530 ops/s
Iteration  16: 570226.653 ops/s
Iteration  17: 610244.409 ops/s
Iteration  18: 566254.724 ops/s
Iteration  19: 587943.427 ops/s
Iteration  20: 598371.051 ops/s
Iteration  21: 572537.034 ops/s
Iteration  22: 611815.931 ops/s
Iteration  23: 582885.752 ops/s
Iteration  24: 577664.469 ops/s
Iteration  25: 568234.289 ops/s
Iteration  26: 571300.571 ops/s
Iteration  27: 597938.440 ops/s
Iteration  28: 554263.407 ops/s
Iteration  29: 585049.741 ops/s
Iteration  30: 609927.581 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_reduceFunctionReturnsNull":
  584772.442 ±(99.9%) 10424.629 ops/s [Average]
  (min, avg, max) = (554263.407, 584772.442, 611815.931), stdev = 15603.095
  CI (99.9%): [574347.813, 595197.071] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_reduceFunctionReturnsNull  thrpt   30  584772.442 ± 10424.629  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_consumerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_consumerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75366.081 ops/s
# Warmup Iteration   2: 319948.963 ops/s
# Warmup Iteration   3: 419116.772 ops/s
# Warmup Iteration   4: 380214.860 ops/s
# Warmup Iteration   5: 448790.690 ops/s
# Warmup Iteration   6: 432428.342 ops/s
# Warmup Iteration   7: 426130.921 ops/s
# Warmup Iteration   8: 426471.364 ops/s
# Warmup Iteration   9: 425165.951 ops/s
# Warmup Iteration  10: 440562.333 ops/s
# Warmup Iteration  11: 423690.986 ops/s
# Warmup Iteration  12: 440775.858 ops/s
# Warmup Iteration  13: 408371.592 ops/s
# Warmup Iteration  14: 436025.769 ops/s
# Warmup Iteration  15: 393861.382 ops/s
# Warmup Iteration  16: 419501.189 ops/s
# Warmup Iteration  17: 453538.685 ops/s
# Warmup Iteration  18: 450902.145 ops/s
# Warmup Iteration  19: 445053.230 ops/s
# Warmup Iteration  20: 461077.236 ops/s
# Warmup Iteration  21: 437348.657 ops/s
# Warmup Iteration  22: 462687.474 ops/s
# Warmup Iteration  23: 430544.375 ops/s
# Warmup Iteration  24: 450390.751 ops/s
# Warmup Iteration  25: 454118.592 ops/s
# Warmup Iteration  26: 437454.967 ops/s
# Warmup Iteration  27: 460829.392 ops/s
# Warmup Iteration  28: 435916.559 ops/s
# Warmup Iteration  29: 452171.752 ops/s
# Warmup Iteration  30: 455556.201 ops/s
Iteration   1: 442085.879 ops/s
Iteration   2: 462048.544 ops/s
Iteration   3: 447998.270 ops/s
Iteration   4: 436427.403 ops/s
Iteration   5: 455611.606 ops/s
Iteration   6: 455448.909 ops/s
Iteration   7: 443744.281 ops/s
Iteration   8: 462989.946 ops/s
Iteration   9: 438719.097 ops/s
Iteration  10: 447278.424 ops/s
Iteration  11: 459004.603 ops/s
Iteration  12: 433590.786 ops/s
Iteration  13: 452385.174 ops/s
Iteration  14: 441316.654 ops/s
Iteration  15: 436252.215 ops/s
Iteration  16: 462011.285 ops/s
Iteration  17: 433321.403 ops/s
Iteration  18: 453420.946 ops/s
Iteration  19: 456832.535 ops/s
Iteration  20: 427995.430 ops/s
Iteration  21: 452483.987 ops/s
Iteration  22: 458033.091 ops/s
Iteration  23: 456482.441 ops/s
Iteration  24: 447104.620 ops/s
Iteration  25: 456264.164 ops/s
Iteration  26: 438719.791 ops/s
Iteration  27: 440152.750 ops/s
Iteration  28: 479873.074 ops/s
Iteration  29: 443879.693 ops/s
Iteration  30: 446993.793 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_consumerThrows":
  448949.026 ±(99.9%) 7521.610 ops/s [Average]
  (min, avg, max) = (427995.430, 448949.026, 479873.074), stdev = 11257.993
  CI (99.9%): [441427.417, 456470.636] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_consumerThrows  thrpt   30  448949.026 ± 7521.610  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_cancelThenRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_cancelThenRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3295758.854 ops/s
# Warmup Iteration   2: 7164828.424 ops/s
# Warmup Iteration   3: 10476951.270 ops/s
# Warmup Iteration   4: 9903774.630 ops/s
# Warmup Iteration   5: 10473495.416 ops/s
# Warmup Iteration   6: 10024179.674 ops/s
# Warmup Iteration   7: 10489562.199 ops/s
# Warmup Iteration   8: 10248885.650 ops/s
# Warmup Iteration   9: 9993994.431 ops/s
# Warmup Iteration  10: 10232431.673 ops/s
# Warmup Iteration  11: 10294318.452 ops/s
# Warmup Iteration  12: 10039799.788 ops/s
# Warmup Iteration  13: 10361370.708 ops/s
# Warmup Iteration  14: 8358017.438 ops/s
# Warmup Iteration  15: 10602211.708 ops/s
# Warmup Iteration  16: 10308793.311 ops/s
# Warmup Iteration  17: 11026687.002 ops/s
# Warmup Iteration  18: 9575901.229 ops/s
# Warmup Iteration  19: 10390911.940 ops/s
# Warmup Iteration  20: 10249075.389 ops/s
# Warmup Iteration  21: 10172321.278 ops/s
# Warmup Iteration  22: 10565107.803 ops/s
# Warmup Iteration  23: 11049758.320 ops/s
# Warmup Iteration  24: 10533285.486 ops/s
# Warmup Iteration  25: 9832661.090 ops/s
# Warmup Iteration  26: 10371303.977 ops/s
# Warmup Iteration  27: 10438215.203 ops/s
# Warmup Iteration  28: 9806051.801 ops/s
# Warmup Iteration  29: 10414178.505 ops/s
# Warmup Iteration  30: 10365752.320 ops/s
Iteration   1: 10540426.837 ops/s
Iteration   2: 10927087.905 ops/s
Iteration   3: 10142045.475 ops/s
Iteration   4: 10257603.768 ops/s
Iteration   5: 10033912.774 ops/s
Iteration   6: 10150694.099 ops/s
Iteration   7: 10482287.132 ops/s
Iteration   8: 10064438.091 ops/s
Iteration   9: 10609676.083 ops/s
Iteration  10: 10060316.361 ops/s
Iteration  11: 10166615.982 ops/s
Iteration  12: 10244424.037 ops/s
Iteration  13: 10485303.029 ops/s
Iteration  14: 9935624.601 ops/s
Iteration  15: 10828746.747 ops/s
Iteration  16: 9954114.703 ops/s
Iteration  17: 10591581.824 ops/s
Iteration  18: 9845995.063 ops/s
Iteration  19: 10413042.816 ops/s
Iteration  20: 10396114.638 ops/s
Iteration  21: 10056747.454 ops/s
Iteration  22: 10660710.522 ops/s
Iteration  23: 9810302.811 ops/s
Iteration  24: 10396880.329 ops/s
Iteration  25: 9875270.572 ops/s
Iteration  26: 10309134.653 ops/s
Iteration  27: 9881459.159 ops/s
Iteration  28: 10215929.798 ops/s
Iteration  29: 10534071.645 ops/s
Iteration  30: 10058815.003 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_cancelThenRequest":
  10264312.464 ±(99.9%) 199635.635 ops/s [Average]
  (min, avg, max) = (9810302.811, 10264312.464, 10927087.905), stdev = 298805.243
  CI (99.9%): [10064676.829, 10463948.099] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
FlowableTakeLastTest._Benchmark.benchmark_cancelThenRequest  thrpt   30  10264312.464 ± 199635.635  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1897870.649 ops/s
# Warmup Iteration   2: 4961750.361 ops/s
# Warmup Iteration   3: 6862227.324 ops/s
# Warmup Iteration   4: 6506681.596 ops/s
# Warmup Iteration   5: 6939612.117 ops/s
# Warmup Iteration   6: 6474753.157 ops/s
# Warmup Iteration   7: 6765667.736 ops/s
# Warmup Iteration   8: 7013926.442 ops/s
# Warmup Iteration   9: 6449373.061 ops/s
# Warmup Iteration  10: 7024698.810 ops/s
# Warmup Iteration  11: 6773658.848 ops/s
# Warmup Iteration  12: 6675587.151 ops/s
# Warmup Iteration  13: 6792641.255 ops/s
# Warmup Iteration  14: 6751209.289 ops/s
# Warmup Iteration  15: 6670893.184 ops/s
# Warmup Iteration  16: 6860306.890 ops/s
# Warmup Iteration  17: 6684700.880 ops/s
# Warmup Iteration  18: 6866164.704 ops/s
# Warmup Iteration  19: 6648121.985 ops/s
# Warmup Iteration  20: 7015491.475 ops/s
# Warmup Iteration  21: 6899269.075 ops/s
# Warmup Iteration  22: 6679655.936 ops/s
# Warmup Iteration  23: 6794395.739 ops/s
# Warmup Iteration  24: 6583856.427 ops/s
# Warmup Iteration  25: 6680804.693 ops/s
# Warmup Iteration  26: 6799577.247 ops/s
# Warmup Iteration  27: 6684584.968 ops/s
# Warmup Iteration  28: 6750045.174 ops/s
# Warmup Iteration  29: 6838327.667 ops/s
# Warmup Iteration  30: 6706213.762 ops/s
Iteration   1: 6523636.521 ops/s
Iteration   2: 6867197.574 ops/s
Iteration   3: 6779021.321 ops/s
Iteration   4: 6678580.709 ops/s
Iteration   5: 6936004.690 ops/s
Iteration   6: 6918867.559 ops/s
Iteration   7: 6626337.515 ops/s
Iteration   8: 7015920.307 ops/s
Iteration   9: 6659921.617 ops/s
Iteration  10: 7206235.752 ops/s
Iteration  11: 6583438.133 ops/s
Iteration  12: 7014508.930 ops/s
Iteration  13: 6797155.376 ops/s
Iteration  14: 6534768.896 ops/s
Iteration  15: 6704140.113 ops/s
Iteration  16: 7106508.460 ops/s
Iteration  17: 6714217.939 ops/s
Iteration  18: 6941059.508 ops/s
Iteration  19: 6728283.467 ops/s
Iteration  20: 6926803.763 ops/s
Iteration  21: 6548180.767 ops/s
Iteration  22: 6701129.761 ops/s
Iteration  23: 6994171.069 ops/s
Iteration  24: 6499520.548 ops/s
Iteration  25: 6894603.187 ops/s
Iteration  26: 6522274.575 ops/s
Iteration  27: 6810984.602 ops/s
Iteration  28: 6796937.317 ops/s
Iteration  29: 6737134.806 ops/s
Iteration  30: 7001664.196 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTest._Benchmark.benchmark_dispose":
  6792306.966 ±(99.9%) 126233.188 ops/s [Average]
  (min, avg, max) = (6499520.548, 6792306.966, 7206235.752), stdev = 188939.907
  CI (99.9%): [6666073.778, 6918540.154] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score        Error  Units
FlowableSkipTest._Benchmark.benchmark_dispose  thrpt   30  6792306.966 ± 126233.188  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_selectorNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_selectorNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 103152.363 ops/s
# Warmup Iteration   2: 347818.177 ops/s
# Warmup Iteration   3: 405995.283 ops/s
# Warmup Iteration   4: 401153.574 ops/s
# Warmup Iteration   5: 373618.609 ops/s
# Warmup Iteration   6: 426730.429 ops/s
# Warmup Iteration   7: 415312.228 ops/s
# Warmup Iteration   8: 448902.211 ops/s
# Warmup Iteration   9: 342560.546 ops/s
# Warmup Iteration  10: 453492.652 ops/s
# Warmup Iteration  11: 449866.640 ops/s
# Warmup Iteration  12: 419861.467 ops/s
# Warmup Iteration  13: 447291.793 ops/s
# Warmup Iteration  14: 419854.376 ops/s
# Warmup Iteration  15: 438022.232 ops/s
# Warmup Iteration  16: 425943.246 ops/s
# Warmup Iteration  17: 455665.839 ops/s
# Warmup Iteration  18: 431108.110 ops/s
# Warmup Iteration  19: 451313.001 ops/s
# Warmup Iteration  20: 443108.954 ops/s
# Warmup Iteration  21: 432775.295 ops/s
# Warmup Iteration  22: 456145.540 ops/s
# Warmup Iteration  23: 439537.015 ops/s
# Warmup Iteration  24: 431193.666 ops/s
# Warmup Iteration  25: 441474.002 ops/s
# Warmup Iteration  26: 442576.386 ops/s
# Warmup Iteration  27: 443234.882 ops/s
# Warmup Iteration  28: 432211.594 ops/s
# Warmup Iteration  29: 445255.931 ops/s
# Warmup Iteration  30: 458149.963 ops/s
Iteration   1: 437916.874 ops/s
Iteration   2: 432568.283 ops/s
Iteration   3: 461193.216 ops/s
Iteration   4: 445068.880 ops/s
Iteration   5: 430062.018 ops/s
Iteration   6: 462071.810 ops/s
Iteration   7: 454902.533 ops/s
Iteration   8: 430564.620 ops/s
Iteration   9: 467246.506 ops/s
Iteration  10: 442866.653 ops/s
Iteration  11: 431481.210 ops/s
Iteration  12: 455719.500 ops/s
Iteration  13: 443862.836 ops/s
Iteration  14: 449537.100 ops/s
Iteration  15: 457808.156 ops/s
Iteration  16: 450727.569 ops/s
Iteration  17: 432534.216 ops/s
Iteration  18: 447847.903 ops/s
Iteration  19: 448241.358 ops/s
Iteration  20: 444941.852 ops/s
Iteration  21: 451963.547 ops/s
Iteration  22: 438904.832 ops/s
Iteration  23: 459155.614 ops/s
Iteration  24: 427113.568 ops/s
Iteration  25: 442955.861 ops/s
Iteration  26: 443391.788 ops/s
Iteration  27: 453848.995 ops/s
Iteration  28: 431441.752 ops/s
Iteration  29: 456006.399 ops/s
Iteration  30: 438327.160 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_selectorNull":
  445675.754 ±(99.9%) 7344.693 ops/s [Average]
  (min, avg, max) = (427113.568, 445675.754, 467246.506), stdev = 10993.192
  CI (99.9%): [438331.061, 453020.447] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableDematerializeTest._Benchmark.benchmark_selectorNull  thrpt   30  445675.754 ± 7344.693  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalFiltered$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalFiltered

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 590270.369 ops/s
# Warmup Iteration   2: 2596262.098 ops/s
# Warmup Iteration   3: 2875696.881 ops/s
# Warmup Iteration   4: 3485177.469 ops/s
# Warmup Iteration   5: 3504265.910 ops/s
# Warmup Iteration   6: 3319645.045 ops/s
# Warmup Iteration   7: 3536427.363 ops/s
# Warmup Iteration   8: 3519408.562 ops/s
# Warmup Iteration   9: 3367948.484 ops/s
# Warmup Iteration  10: 3490313.336 ops/s
# Warmup Iteration  11: 3468201.268 ops/s
# Warmup Iteration  12: 3465708.435 ops/s
# Warmup Iteration  13: 3479998.031 ops/s
# Warmup Iteration  14: 3498189.808 ops/s
# Warmup Iteration  15: 3445596.744 ops/s
# Warmup Iteration  16: 3313416.962 ops/s
# Warmup Iteration  17: 3537201.137 ops/s
# Warmup Iteration  18: 3344865.873 ops/s
# Warmup Iteration  19: 3553535.338 ops/s
# Warmup Iteration  20: 3472473.148 ops/s
# Warmup Iteration  21: 3402413.191 ops/s
# Warmup Iteration  22: 3452073.129 ops/s
# Warmup Iteration  23: 3455227.623 ops/s
# Warmup Iteration  24: 3504193.578 ops/s
# Warmup Iteration  25: 3528696.071 ops/s
# Warmup Iteration  26: 3426167.427 ops/s
# Warmup Iteration  27: 3539738.518 ops/s
# Warmup Iteration  28: 3416682.604 ops/s
# Warmup Iteration  29: 3554906.616 ops/s
# Warmup Iteration  30: 3377089.355 ops/s
Iteration   1: 3457066.057 ops/s
Iteration   2: 3451069.103 ops/s
Iteration   3: 3391618.781 ops/s
Iteration   4: 3616665.536 ops/s
Iteration   5: 3410920.818 ops/s
Iteration   6: 3396075.640 ops/s
Iteration   7: 3566545.433 ops/s
Iteration   8: 3379304.186 ops/s
Iteration   9: 3531300.248 ops/s
Iteration  10: 3340045.747 ops/s
Iteration  11: 3397008.417 ops/s
Iteration  12: 3582634.292 ops/s
Iteration  13: 3399890.004 ops/s
Iteration  14: 3485940.895 ops/s
Iteration  15: 3328475.666 ops/s
Iteration  16: 3446823.353 ops/s
Iteration  17: 3563715.516 ops/s
Iteration  18: 3410346.849 ops/s
Iteration  19: 3533907.977 ops/s
Iteration  20: 3348830.945 ops/s
Iteration  21: 3564724.424 ops/s
Iteration  22: 3349256.029 ops/s
Iteration  23: 3485709.850 ops/s
Iteration  24: 3439723.532 ops/s
Iteration  25: 3415195.861 ops/s
Iteration  26: 3466006.893 ops/s
Iteration  27: 3405054.334 ops/s
Iteration  28: 3463719.915 ops/s
Iteration  29: 3634819.071 ops/s
Iteration  30: 3349681.016 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalFiltered":
  3453735.880 ±(99.9%) 57644.869 ops/s [Average]
  (min, avg, max) = (3328475.666, 3453735.880, 3634819.071), stdev = 86280.133
  CI (99.9%): [3396091.010, 3511380.749] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableFromArrayTest._Benchmark.benchmark_conditionalFiltered  thrpt   30  3453735.880 ± 57644.869  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 199534.517 ops/s
# Warmup Iteration   2: 570512.919 ops/s
# Warmup Iteration   3: 683819.398 ops/s
# Warmup Iteration   4: 505924.757 ops/s
# Warmup Iteration   5: 613523.446 ops/s
# Warmup Iteration   6: 650430.792 ops/s
# Warmup Iteration   7: 629558.327 ops/s
# Warmup Iteration   8: 624944.655 ops/s
# Warmup Iteration   9: 681460.411 ops/s
# Warmup Iteration  10: 667102.964 ops/s
# Warmup Iteration  11: 656104.533 ops/s
# Warmup Iteration  12: 692386.662 ops/s
# Warmup Iteration  13: 666897.397 ops/s
# Warmup Iteration  14: 690536.423 ops/s
# Warmup Iteration  15: 654339.998 ops/s
# Warmup Iteration  16: 691267.539 ops/s
# Warmup Iteration  17: 696030.188 ops/s
# Warmup Iteration  18: 722843.359 ops/s
# Warmup Iteration  19: 708870.952 ops/s
# Warmup Iteration  20: 693764.617 ops/s
# Warmup Iteration  21: 752712.056 ops/s
# Warmup Iteration  22: 738795.889 ops/s
# Warmup Iteration  23: 697210.175 ops/s
# Warmup Iteration  24: 689981.269 ops/s
# Warmup Iteration  25: 726414.215 ops/s
# Warmup Iteration  26: 719293.239 ops/s
# Warmup Iteration  27: 691902.961 ops/s
# Warmup Iteration  28: 730205.194 ops/s
# Warmup Iteration  29: 705042.941 ops/s
# Warmup Iteration  30: 741194.491 ops/s
Iteration   1: 693526.140 ops/s
Iteration   2: 711670.027 ops/s
Iteration   3: 742654.805 ops/s
Iteration   4: 673383.618 ops/s
Iteration   5: 703850.524 ops/s
Iteration   6: 749522.898 ops/s
Iteration   7: 694538.259 ops/s
Iteration   8: 718568.362 ops/s
Iteration   9: 702249.272 ops/s
Iteration  10: 717394.775 ops/s
Iteration  11: 718845.240 ops/s
Iteration  12: 709395.959 ops/s
Iteration  13: 720917.053 ops/s
Iteration  14: 694200.977 ops/s
Iteration  15: 704039.479 ops/s
Iteration  16: 711558.628 ops/s
Iteration  17: 702493.212 ops/s
Iteration  18: 699632.655 ops/s
Iteration  19: 745720.370 ops/s
Iteration  20: 702907.968 ops/s
Iteration  21: 717009.701 ops/s
Iteration  22: 720358.577 ops/s
Iteration  23: 735636.285 ops/s
Iteration  24: 696026.542 ops/s
Iteration  25: 720328.486 ops/s
Iteration  26: 714975.390 ops/s
Iteration  27: 728285.006 ops/s
Iteration  28: 697078.738 ops/s
Iteration  29: 708800.867 ops/s
Iteration  30: 720541.835 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageFlowable":
  712537.055 ±(99.9%) 11265.340 ops/s [Average]
  (min, avg, max) = (673383.618, 712537.055, 749522.898), stdev = 16861.431
  CI (99.9%): [701271.715, 723802.395] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score       Error  Units
FlowableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageFlowable  thrpt   30  712537.055 ± 11265.340  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestToFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestToFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4645616.420 ops/s
# Warmup Iteration   2: 8072109.183 ops/s
# Warmup Iteration   3: 10682460.851 ops/s
# Warmup Iteration   4: 10869560.602 ops/s
# Warmup Iteration   5: 10948700.539 ops/s
# Warmup Iteration   6: 11011837.189 ops/s
# Warmup Iteration   7: 10188361.215 ops/s
# Warmup Iteration   8: 10673564.084 ops/s
# Warmup Iteration   9: 11110339.288 ops/s
# Warmup Iteration  10: 10660384.643 ops/s
# Warmup Iteration  11: 10896043.668 ops/s
# Warmup Iteration  12: 10589052.539 ops/s
# Warmup Iteration  13: 10920300.429 ops/s
# Warmup Iteration  14: 10955875.175 ops/s
# Warmup Iteration  15: 10459660.863 ops/s
# Warmup Iteration  16: 10570161.909 ops/s
# Warmup Iteration  17: 11305963.386 ops/s
# Warmup Iteration  18: 10524567.867 ops/s
# Warmup Iteration  19: 11352841.639 ops/s
# Warmup Iteration  20: 10666942.317 ops/s
# Warmup Iteration  21: 10901503.882 ops/s
# Warmup Iteration  22: 11075627.770 ops/s
# Warmup Iteration  23: 10842435.766 ops/s
# Warmup Iteration  24: 10938722.485 ops/s
# Warmup Iteration  25: 10993117.971 ops/s
# Warmup Iteration  26: 10671965.263 ops/s
# Warmup Iteration  27: 10785314.575 ops/s
# Warmup Iteration  28: 11037548.531 ops/s
# Warmup Iteration  29: 11115285.459 ops/s
# Warmup Iteration  30: 11151016.794 ops/s
Iteration   1: 10659059.406 ops/s
Iteration   2: 11317617.151 ops/s
Iteration   3: 10801452.079 ops/s
Iteration   4: 11285501.887 ops/s
Iteration   5: 11271209.564 ops/s
Iteration   6: 11222472.048 ops/s
Iteration   7: 10653289.567 ops/s
Iteration   8: 11077899.476 ops/s
Iteration   9: 10280765.392 ops/s
Iteration  10: 11089440.079 ops/s
Iteration  11: 11044374.657 ops/s
Iteration  12: 10157488.718 ops/s
Iteration  13: 11122114.334 ops/s
Iteration  14: 10596482.710 ops/s
Iteration  15: 11045310.315 ops/s
Iteration  16: 11318843.154 ops/s
Iteration  17: 10581950.371 ops/s
Iteration  18: 10800534.257 ops/s
Iteration  19: 10671056.925 ops/s
Iteration  20: 11003207.553 ops/s
Iteration  21: 10767883.567 ops/s
Iteration  22: 11056204.040 ops/s
Iteration  23: 11343763.406 ops/s
Iteration  24: 11283083.895 ops/s
Iteration  25: 10344482.681 ops/s
Iteration  26: 11385877.016 ops/s
Iteration  27: 10404506.855 ops/s
Iteration  28: 10815429.774 ops/s
Iteration  29: 11274759.172 ops/s
Iteration  30: 10485506.583 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestToFlowable":
  10905385.554 ±(99.9%) 239383.866 ops/s [Average]
  (min, avg, max) = (10157488.718, 10905385.554, 11385877.016), stdev = 358298.528
  CI (99.9%): [10666001.688, 11144769.420] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
FlowableSubscriberTest._Benchmark.benchmark_requestToFlowable  thrpt   30  10905385.554 ± 239383.866  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapperToJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapperToJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1011205.445 ops/s
# Warmup Iteration   2: 4378361.978 ops/s
# Warmup Iteration   3: 5400180.926 ops/s
# Warmup Iteration   4: 6309642.156 ops/s
# Warmup Iteration   5: 6031381.440 ops/s
# Warmup Iteration   6: 6478304.451 ops/s
# Warmup Iteration   7: 6120323.630 ops/s
# Warmup Iteration   8: 6262988.992 ops/s
# Warmup Iteration   9: 6292401.883 ops/s
# Warmup Iteration  10: 6202912.178 ops/s
# Warmup Iteration  11: 6316537.168 ops/s
# Warmup Iteration  12: 6073855.624 ops/s
# Warmup Iteration  13: 6278758.188 ops/s
# Warmup Iteration  14: 6413258.169 ops/s
# Warmup Iteration  15: 6446375.540 ops/s
# Warmup Iteration  16: 6379695.404 ops/s
# Warmup Iteration  17: 6135109.330 ops/s
# Warmup Iteration  18: 6428101.446 ops/s
# Warmup Iteration  19: 6341380.523 ops/s
# Warmup Iteration  20: 6038371.581 ops/s
# Warmup Iteration  21: 6436318.060 ops/s
# Warmup Iteration  22: 6233050.710 ops/s
# Warmup Iteration  23: 6050044.327 ops/s
# Warmup Iteration  24: 6214362.053 ops/s
# Warmup Iteration  25: 6532474.455 ops/s
# Warmup Iteration  26: 6121401.271 ops/s
# Warmup Iteration  27: 6451179.874 ops/s
# Warmup Iteration  28: 6272948.372 ops/s
# Warmup Iteration  29: 6172277.727 ops/s
# Warmup Iteration  30: 6113868.864 ops/s
Iteration   1: 6106684.033 ops/s
Iteration   2: 6472026.246 ops/s
Iteration   3: 6153779.661 ops/s
Iteration   4: 6487728.345 ops/s
Iteration   5: 6414542.686 ops/s
Iteration   6: 6011431.913 ops/s
Iteration   7: 6360773.669 ops/s
Iteration   8: 6203563.840 ops/s
Iteration   9: 6296261.089 ops/s
Iteration  10: 6425116.993 ops/s
Iteration  11: 6134133.308 ops/s
Iteration  12: 6613724.319 ops/s
Iteration  13: 6233015.585 ops/s
Iteration  14: 6130241.908 ops/s
Iteration  15: 6260063.236 ops/s
Iteration  16: 6373103.149 ops/s
Iteration  17: 6037974.184 ops/s
Iteration  18: 6266995.996 ops/s
Iteration  19: 6363399.336 ops/s
Iteration  20: 6279256.077 ops/s
Iteration  21: 6482552.769 ops/s
Iteration  22: 6111240.665 ops/s
Iteration  23: 6419135.289 ops/s
Iteration  24: 6261287.548 ops/s
Iteration  25: 6486380.236 ops/s
Iteration  26: 6275766.718 ops/s
Iteration  27: 6155991.755 ops/s
Iteration  28: 6298535.863 ops/s
Iteration  29: 6182846.895 ops/s
Iteration  30: 6409400.847 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapperToJust":
  6290231.805 ±(99.9%) 100221.412 ops/s [Average]
  (min, avg, max) = (6011431.913, 6290231.805, 6613724.319), stdev = 150006.703
  CI (99.9%): [6190010.393, 6390453.217] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
FlowableScalarXMapTest._Benchmark.benchmark_mapperToJust  thrpt   30  6290231.805 ± 100221.412  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_withPublisherDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_withPublisherDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 102669.960 ops/s
# Warmup Iteration   2: 328730.292 ops/s
# Warmup Iteration   3: 376658.708 ops/s
# Warmup Iteration   4: 348880.014 ops/s
# Warmup Iteration   5: 402703.480 ops/s
# Warmup Iteration   6: 339699.479 ops/s
# Warmup Iteration   7: 397839.223 ops/s
# Warmup Iteration   8: 405064.874 ops/s
# Warmup Iteration   9: 408748.820 ops/s
# Warmup Iteration  10: 408708.186 ops/s
# Warmup Iteration  11: 389646.709 ops/s
# Warmup Iteration  12: 407506.141 ops/s
# Warmup Iteration  13: 409835.580 ops/s
# Warmup Iteration  14: 401802.883 ops/s
# Warmup Iteration  15: 393092.403 ops/s
# Warmup Iteration  16: 409661.869 ops/s
# Warmup Iteration  17: 490323.114 ops/s
# Warmup Iteration  18: 495232.489 ops/s
# Warmup Iteration  19: 467690.090 ops/s
# Warmup Iteration  20: 473297.786 ops/s
# Warmup Iteration  21: 461468.559 ops/s
# Warmup Iteration  22: 491839.327 ops/s
# Warmup Iteration  23: 487476.085 ops/s
# Warmup Iteration  24: 490336.418 ops/s
# Warmup Iteration  25: 460379.054 ops/s
# Warmup Iteration  26: 494360.602 ops/s
# Warmup Iteration  27: 460849.075 ops/s
# Warmup Iteration  28: 466334.843 ops/s
# Warmup Iteration  29: 486992.971 ops/s
# Warmup Iteration  30: 456682.997 ops/s
Iteration   1: 462981.560 ops/s
Iteration   2: 480343.718 ops/s
Iteration   3: 471507.693 ops/s
Iteration   4: 475594.842 ops/s
Iteration   5: 472912.917 ops/s
Iteration   6: 473143.892 ops/s
Iteration   7: 460383.184 ops/s
Iteration   8: 475941.221 ops/s
Iteration   9: 463503.568 ops/s
Iteration  10: 459294.087 ops/s
Iteration  11: 498068.274 ops/s
Iteration  12: 474156.048 ops/s
Iteration  13: 470271.297 ops/s
Iteration  14: 471616.121 ops/s
Iteration  15: 461889.491 ops/s
Iteration  16: 469393.150 ops/s
Iteration  17: 487128.298 ops/s
Iteration  18: 459443.656 ops/s
Iteration  19: 471288.525 ops/s
Iteration  20: 477598.806 ops/s
Iteration  21: 484060.636 ops/s
Iteration  22: 471927.297 ops/s
Iteration  23: 479607.509 ops/s
Iteration  24: 478747.453 ops/s
Iteration  25: 453217.159 ops/s
Iteration  26: 412701.817 ops/s
Iteration  27: 463927.364 ops/s
Iteration  28: 467842.988 ops/s
Iteration  29: 471103.855 ops/s
Iteration  30: 474785.119 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_withPublisherDoubleOnSubscribe":
  469812.718 ±(99.9%) 9473.375 ops/s [Average]
  (min, avg, max) = (412701.817, 469812.718, 498068.274), stdev = 14179.302
  CI (99.9%): [460339.343, 479286.093] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
MaybeDelaySubscriptionTest._Benchmark.benchmark_withPublisherDoubleOnSubscribe  thrpt   30  469812.718 ± 9473.375  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 200395.947 ops/s
# Warmup Iteration   2: 565503.526 ops/s
# Warmup Iteration   3: 667064.352 ops/s
# Warmup Iteration   4: 690546.470 ops/s
# Warmup Iteration   5: 665771.656 ops/s
# Warmup Iteration   6: 662748.858 ops/s
# Warmup Iteration   7: 666017.780 ops/s
# Warmup Iteration   8: 632642.996 ops/s
# Warmup Iteration   9: 695145.983 ops/s
# Warmup Iteration  10: 608440.772 ops/s
# Warmup Iteration  11: 674225.057 ops/s
# Warmup Iteration  12: 669678.671 ops/s
# Warmup Iteration  13: 697065.519 ops/s
# Warmup Iteration  14: 684624.145 ops/s
# Warmup Iteration  15: 671785.803 ops/s
# Warmup Iteration  16: 641925.922 ops/s
# Warmup Iteration  17: 723979.650 ops/s
# Warmup Iteration  18: 717927.473 ops/s
# Warmup Iteration  19: 722495.288 ops/s
# Warmup Iteration  20: 710827.606 ops/s
# Warmup Iteration  21: 727468.567 ops/s
# Warmup Iteration  22: 726069.972 ops/s
# Warmup Iteration  23: 725998.248 ops/s
# Warmup Iteration  24: 711037.337 ops/s
# Warmup Iteration  25: 713362.094 ops/s
# Warmup Iteration  26: 712862.024 ops/s
# Warmup Iteration  27: 723482.246 ops/s
# Warmup Iteration  28: 710653.858 ops/s
# Warmup Iteration  29: 728974.377 ops/s
# Warmup Iteration  30: 722868.358 ops/s
Iteration   1: 699936.201 ops/s
Iteration   2: 707705.331 ops/s
Iteration   3: 694489.282 ops/s
Iteration   4: 730372.098 ops/s
Iteration   5: 714425.926 ops/s
Iteration   6: 748546.822 ops/s
Iteration   7: 702419.671 ops/s
Iteration   8: 732530.441 ops/s
Iteration   9: 708916.228 ops/s
Iteration  10: 751750.850 ops/s
Iteration  11: 745876.970 ops/s
Iteration  12: 698171.719 ops/s
Iteration  13: 738104.534 ops/s
Iteration  14: 742512.963 ops/s
Iteration  15: 713379.017 ops/s
Iteration  16: 753488.623 ops/s
Iteration  17: 697951.248 ops/s
Iteration  18: 724023.258 ops/s
Iteration  19: 712796.744 ops/s
Iteration  20: 727989.335 ops/s
Iteration  21: 715684.422 ops/s
Iteration  22: 696183.567 ops/s
Iteration  23: 729069.339 ops/s
Iteration  24: 716551.683 ops/s
Iteration  25: 712134.603 ops/s
Iteration  26: 724487.038 ops/s
Iteration  27: 716608.827 ops/s
Iteration  28: 717201.780 ops/s
Iteration  29: 755101.318 ops/s
Iteration  30: 738528.945 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_error":
  722231.293 ±(99.9%) 12235.764 ops/s [Average]
  (min, avg, max) = (694489.282, 722231.293, 755101.318), stdev = 18313.917
  CI (99.9%): [709995.529, 734467.057] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
MaybeFlatMapIterableFlowableTest._Benchmark.benchmark_error  thrpt   30  722231.293 ± 12235.764  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 498509.035 ops/s
# Warmup Iteration   2: 3117939.700 ops/s
# Warmup Iteration   3: 3561572.033 ops/s
# Warmup Iteration   4: 4371585.061 ops/s
# Warmup Iteration   5: 4212371.464 ops/s
# Warmup Iteration   6: 4324692.910 ops/s
# Warmup Iteration   7: 4587466.225 ops/s
# Warmup Iteration   8: 4213536.056 ops/s
# Warmup Iteration   9: 4340032.944 ops/s
# Warmup Iteration  10: 4450675.034 ops/s
# Warmup Iteration  11: 4219085.470 ops/s
# Warmup Iteration  12: 4437691.112 ops/s
# Warmup Iteration  13: 4208166.180 ops/s
# Warmup Iteration  14: 4372010.085 ops/s
# Warmup Iteration  15: 4518957.171 ops/s
# Warmup Iteration  16: 4317147.231 ops/s
# Warmup Iteration  17: 4346128.094 ops/s
# Warmup Iteration  18: 4344144.505 ops/s
# Warmup Iteration  19: 4241422.339 ops/s
# Warmup Iteration  20: 4458543.376 ops/s
# Warmup Iteration  21: 4346417.276 ops/s
# Warmup Iteration  22: 4395208.584 ops/s
# Warmup Iteration  23: 4329622.342 ops/s
# Warmup Iteration  24: 4336215.307 ops/s
# Warmup Iteration  25: 4358360.527 ops/s
# Warmup Iteration  26: 4301626.668 ops/s
# Warmup Iteration  27: 4474459.794 ops/s
# Warmup Iteration  28: 4221237.526 ops/s
# Warmup Iteration  29: 4249730.659 ops/s
# Warmup Iteration  30: 4470860.407 ops/s
Iteration   1: 4393658.319 ops/s
Iteration   2: 4442994.005 ops/s
Iteration   3: 4368028.231 ops/s
Iteration   4: 4405592.767 ops/s
Iteration   5: 4334802.145 ops/s
Iteration   6: 4343644.692 ops/s
Iteration   7: 4424118.137 ops/s
Iteration   8: 4398273.813 ops/s
Iteration   9: 4341712.731 ops/s
Iteration  10: 4516324.573 ops/s
Iteration  11: 4242563.446 ops/s
Iteration  12: 4504328.274 ops/s
Iteration  13: 4236847.431 ops/s
Iteration  14: 4459762.504 ops/s
Iteration  15: 4363330.056 ops/s
Iteration  16: 4268314.718 ops/s
Iteration  17: 4258421.554 ops/s
Iteration  18: 4383606.139 ops/s
Iteration  19: 4486371.549 ops/s
Iteration  20: 3872071.578 ops/s
Iteration  21: 4168990.899 ops/s
Iteration  22: 4397859.032 ops/s
Iteration  23: 4423006.061 ops/s
Iteration  24: 4297568.685 ops/s
Iteration  25: 4364622.526 ops/s
Iteration  26: 4352749.620 ops/s
Iteration  27: 4328749.569 ops/s
Iteration  28: 4381788.265 ops/s
Iteration  29: 4280269.427 ops/s
Iteration  30: 4569341.891 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_disposed":
  4353657.088 ±(99.9%) 85125.219 ops/s [Average]
  (min, avg, max) = (3872071.578, 4353657.088, 4569341.891), stdev = 127411.430
  CI (99.9%): [4268531.869, 4438782.307] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MaybeTakeUntilPublisherTest._Benchmark.benchmark_disposed  thrpt   30  4353657.088 ± 85125.219  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 66391.757 ops/s
# Warmup Iteration   2: 271343.285 ops/s
# Warmup Iteration   3: 340388.278 ops/s
# Warmup Iteration   4: 368793.744 ops/s
# Warmup Iteration   5: 323618.002 ops/s
# Warmup Iteration   6: 393222.587 ops/s
# Warmup Iteration   7: 390884.751 ops/s
# Warmup Iteration   8: 370545.147 ops/s
# Warmup Iteration   9: 402554.910 ops/s
# Warmup Iteration  10: 378513.733 ops/s
# Warmup Iteration  11: 370877.041 ops/s
# Warmup Iteration  12: 396006.752 ops/s
# Warmup Iteration  13: 381146.971 ops/s
# Warmup Iteration  14: 371038.003 ops/s
# Warmup Iteration  15: 390355.763 ops/s
# Warmup Iteration  16: 387524.050 ops/s
# Warmup Iteration  17: 398617.282 ops/s
# Warmup Iteration  18: 393423.039 ops/s
# Warmup Iteration  19: 410797.640 ops/s
# Warmup Iteration  20: 403034.215 ops/s
# Warmup Iteration  21: 382188.564 ops/s
# Warmup Iteration  22: 398326.521 ops/s
# Warmup Iteration  23: 391356.480 ops/s
# Warmup Iteration  24: 377549.554 ops/s
# Warmup Iteration  25: 411642.555 ops/s
# Warmup Iteration  26: 387713.519 ops/s
# Warmup Iteration  27: 395157.223 ops/s
# Warmup Iteration  28: 404121.008 ops/s
# Warmup Iteration  29: 377128.839 ops/s
# Warmup Iteration  30: 411585.069 ops/s
Iteration   1: 379568.107 ops/s
Iteration   2: 395186.770 ops/s
Iteration   3: 383085.797 ops/s
Iteration   4: 396377.250 ops/s
Iteration   5: 407706.745 ops/s
Iteration   6: 390666.488 ops/s
Iteration   7: 397880.144 ops/s
Iteration   8: 386516.826 ops/s
Iteration   9: 402584.164 ops/s
Iteration  10: 380889.966 ops/s
Iteration  11: 396285.659 ops/s
Iteration  12: 400916.213 ops/s
Iteration  13: 396450.973 ops/s
Iteration  14: 409647.926 ops/s
Iteration  15: 392199.276 ops/s
Iteration  16: 397480.059 ops/s
Iteration  17: 403150.868 ops/s
Iteration  18: 394466.309 ops/s
Iteration  19: 389961.421 ops/s
Iteration  20: 413295.685 ops/s
Iteration  21: 378084.659 ops/s
Iteration  22: 394416.133 ops/s
Iteration  23: 401101.101 ops/s
Iteration  24: 399731.096 ops/s
Iteration  25: 400921.332 ops/s
Iteration  26: 389362.059 ops/s
Iteration  27: 402479.729 ops/s
Iteration  28: 381060.949 ops/s
Iteration  29: 405593.185 ops/s
Iteration  30: 392929.813 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional":
  395333.223 ±(99.9%) 6039.365 ops/s [Average]
  (min, avg, max) = (378084.659, 395333.223, 413295.685), stdev = 9039.438
  CI (99.9%): [389293.858, 401372.588] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_consumerThrowsConditional  thrpt   30  395333.223 ± 6039.365  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75325.278 ops/s
# Warmup Iteration   2: 206510.027 ops/s
# Warmup Iteration   3: 321096.529 ops/s
# Warmup Iteration   4: 272532.838 ops/s
# Warmup Iteration   5: 358849.674 ops/s
# Warmup Iteration   6: 308630.548 ops/s
# Warmup Iteration   7: 334997.144 ops/s
# Warmup Iteration   8: 339077.268 ops/s
# Warmup Iteration   9: 330730.696 ops/s
# Warmup Iteration  10: 345152.611 ops/s
# Warmup Iteration  11: 345523.201 ops/s
# Warmup Iteration  12: 326211.328 ops/s
# Warmup Iteration  13: 344420.314 ops/s
# Warmup Iteration  14: 333466.739 ops/s
# Warmup Iteration  15: 350124.378 ops/s
# Warmup Iteration  16: 351520.543 ops/s
# Warmup Iteration  17: 347038.492 ops/s
# Warmup Iteration  18: 367593.588 ops/s
# Warmup Iteration  19: 364590.315 ops/s
# Warmup Iteration  20: 358658.397 ops/s
# Warmup Iteration  21: 374206.897 ops/s
# Warmup Iteration  22: 358929.153 ops/s
# Warmup Iteration  23: 348025.280 ops/s
# Warmup Iteration  24: 350942.690 ops/s
# Warmup Iteration  25: 366405.638 ops/s
# Warmup Iteration  26: 350330.679 ops/s
# Warmup Iteration  27: 359887.419 ops/s
# Warmup Iteration  28: 345364.196 ops/s
# Warmup Iteration  29: 368467.380 ops/s
# Warmup Iteration  30: 356194.517 ops/s
Iteration   1: 356968.986 ops/s
Iteration   2: 360033.231 ops/s
Iteration   3: 349699.887 ops/s
Iteration   4: 350312.909 ops/s
Iteration   5: 379741.745 ops/s
Iteration   6: 354097.870 ops/s
Iteration   7: 361432.278 ops/s
Iteration   8: 355646.077 ops/s
Iteration   9: 348243.793 ops/s
Iteration  10: 378152.300 ops/s
Iteration  11: 364421.065 ops/s
Iteration  12: 347193.602 ops/s
Iteration  13: 374536.959 ops/s
Iteration  14: 351775.763 ops/s
Iteration  15: 299500.772 ops/s
Iteration  16: 369291.625 ops/s
Iteration  17: 349293.986 ops/s
Iteration  18: 367186.888 ops/s
Iteration  19: 369673.398 ops/s
Iteration  20: 339423.206 ops/s
Iteration  21: 370924.656 ops/s
Iteration  22: 352436.035 ops/s
Iteration  23: 368340.476 ops/s
Iteration  24: 350986.206 ops/s
Iteration  25: 364409.658 ops/s
Iteration  26: 350894.923 ops/s
Iteration  27: 351763.452 ops/s
Iteration  28: 365089.532 ops/s
Iteration  29: 338597.394 ops/s
Iteration  30: 364368.960 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_error":
  356814.588 ±(99.9%) 10163.440 ops/s [Average]
  (min, avg, max) = (299500.772, 356814.588, 379741.745), stdev = 15212.160
  CI (99.9%): [346651.148, 366978.028] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
FlowableElementAtTest._Benchmark.benchmark_error  thrpt   30  356814.588 ± 10163.440  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromFlowableJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromFlowableJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1423602.301 ops/s
# Warmup Iteration   2: 4063108.928 ops/s
# Warmup Iteration   3: 6110200.342 ops/s
# Warmup Iteration   4: 5744880.744 ops/s
# Warmup Iteration   5: 6058548.566 ops/s
# Warmup Iteration   6: 5980480.211 ops/s
# Warmup Iteration   7: 5907560.461 ops/s
# Warmup Iteration   8: 6024864.347 ops/s
# Warmup Iteration   9: 5929721.942 ops/s
# Warmup Iteration  10: 5852764.669 ops/s
# Warmup Iteration  11: 6201165.994 ops/s
# Warmup Iteration  12: 6095321.661 ops/s
# Warmup Iteration  13: 5837456.104 ops/s
# Warmup Iteration  14: 5973831.359 ops/s
# Warmup Iteration  15: 6260687.495 ops/s
# Warmup Iteration  16: 5855463.084 ops/s
# Warmup Iteration  17: 6151857.924 ops/s
# Warmup Iteration  18: 6048830.212 ops/s
# Warmup Iteration  19: 5946661.729 ops/s
# Warmup Iteration  20: 6113281.165 ops/s
# Warmup Iteration  21: 5925275.509 ops/s
# Warmup Iteration  22: 6046978.432 ops/s
# Warmup Iteration  23: 5814453.182 ops/s
# Warmup Iteration  24: 5892396.632 ops/s
# Warmup Iteration  25: 5936438.078 ops/s
# Warmup Iteration  26: 5903180.124 ops/s
# Warmup Iteration  27: 6070277.701 ops/s
# Warmup Iteration  28: 5928694.707 ops/s
# Warmup Iteration  29: 6051009.045 ops/s
# Warmup Iteration  30: 5843711.906 ops/s
Iteration   1: 5979527.866 ops/s
Iteration   2: 6211083.966 ops/s
Iteration   3: 6001218.238 ops/s
Iteration   4: 5879930.782 ops/s
Iteration   5: 6062734.715 ops/s
Iteration   6: 6050005.251 ops/s
Iteration   7: 6014265.986 ops/s
Iteration   8: 5821674.628 ops/s
Iteration   9: 5974918.049 ops/s
Iteration  10: 6133413.885 ops/s
Iteration  11: 5856558.674 ops/s
Iteration  12: 6120641.447 ops/s
Iteration  13: 5908472.332 ops/s
Iteration  14: 6117008.387 ops/s
Iteration  15: 5902575.132 ops/s
Iteration  16: 6018748.039 ops/s
Iteration  17: 5933983.241 ops/s
Iteration  18: 6057469.141 ops/s
Iteration  19: 6059422.320 ops/s
Iteration  20: 5946623.899 ops/s
Iteration  21: 6094170.386 ops/s
Iteration  22: 5899665.061 ops/s
Iteration  23: 5842398.808 ops/s
Iteration  24: 6215819.657 ops/s
Iteration  25: 6024707.009 ops/s
Iteration  26: 5821030.448 ops/s
Iteration  27: 6078838.128 ops/s
Iteration  28: 5783094.698 ops/s
Iteration  29: 5947234.980 ops/s
Iteration  30: 6124734.119 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromFlowableJust":
  5996065.642 ±(99.9%) 77625.464 ops/s [Average]
  (min, avg, max) = (5783094.698, 5996065.642, 6215819.657), stdev = 116186.149
  CI (99.9%): [5918440.178, 6073691.106] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_fromFlowableJust  thrpt   30  5996065.642 ± 77625.464  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 424376.294 ops/s
# Warmup Iteration   2: 1446988.975 ops/s
# Warmup Iteration   3: 1894490.709 ops/s
# Warmup Iteration   4: 2555564.808 ops/s
# Warmup Iteration   5: 2421599.114 ops/s
# Warmup Iteration   6: 2515481.742 ops/s
# Warmup Iteration   7: 2442330.753 ops/s
# Warmup Iteration   8: 2426600.852 ops/s
# Warmup Iteration   9: 2571937.432 ops/s
# Warmup Iteration  10: 2443335.494 ops/s
# Warmup Iteration  11: 2490752.497 ops/s
# Warmup Iteration  12: 2493068.138 ops/s
# Warmup Iteration  13: 2518067.639 ops/s
# Warmup Iteration  14: 2520011.273 ops/s
# Warmup Iteration  15: 2399421.044 ops/s
# Warmup Iteration  16: 2556901.654 ops/s
# Warmup Iteration  17: 2542639.937 ops/s
# Warmup Iteration  18: 2433145.474 ops/s
# Warmup Iteration  19: 2526764.125 ops/s
# Warmup Iteration  20: 2521871.370 ops/s
# Warmup Iteration  21: 2513880.087 ops/s
# Warmup Iteration  22: 2437257.318 ops/s
# Warmup Iteration  23: 2580709.057 ops/s
# Warmup Iteration  24: 2613367.223 ops/s
# Warmup Iteration  25: 2466621.775 ops/s
# Warmup Iteration  26: 2565100.370 ops/s
# Warmup Iteration  27: 2408387.114 ops/s
# Warmup Iteration  28: 2504962.804 ops/s
# Warmup Iteration  29: 2596153.797 ops/s
# Warmup Iteration  30: 2361549.827 ops/s
Iteration   1: 2497526.208 ops/s
Iteration   2: 2581230.372 ops/s
Iteration   3: 2441724.411 ops/s
Iteration   4: 2522186.439 ops/s
Iteration   5: 2390227.939 ops/s
Iteration   6: 2501631.686 ops/s
Iteration   7: 2533730.005 ops/s
Iteration   8: 2467453.217 ops/s
Iteration   9: 2379885.536 ops/s
Iteration  10: 2117912.939 ops/s
Iteration  11: 2455942.619 ops/s
Iteration  12: 2524495.933 ops/s
Iteration  13: 2458249.624 ops/s
Iteration  14: 2416991.163 ops/s
Iteration  15: 2518592.000 ops/s
Iteration  16: 2430139.014 ops/s
Iteration  17: 2405470.532 ops/s
Iteration  18: 2538657.436 ops/s
Iteration  19: 2516855.625 ops/s
Iteration  20: 2572715.224 ops/s
Iteration  21: 2481431.826 ops/s
Iteration  22: 2538574.397 ops/s
Iteration  23: 2429324.155 ops/s
Iteration  24: 2590398.351 ops/s
Iteration  25: 2461523.398 ops/s
Iteration  26: 2483856.169 ops/s
Iteration  27: 2581736.166 ops/s
Iteration  28: 2438977.670 ops/s
Iteration  29: 2450049.271 ops/s
Iteration  30: 2523346.906 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeSuccess":
  2475027.874 ±(99.9%) 59375.437 ops/s [Average]
  (min, avg, max) = (2117912.939, 2475027.874, 2590398.351), stdev = 88870.365
  CI (99.9%): [2415652.438, 2534403.311] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeSuccess  thrpt   30  2475027.874 ± 59375.437  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noCancelPreviousArray$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noCancelPreviousArray

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 349345.068 ops/s
# Warmup Iteration   2: 1073248.427 ops/s
# Warmup Iteration   3: 1311172.054 ops/s
# Warmup Iteration   4: 1617218.575 ops/s
# Warmup Iteration   5: 1570900.263 ops/s
# Warmup Iteration   6: 1641150.125 ops/s
# Warmup Iteration   7: 1578946.637 ops/s
# Warmup Iteration   8: 1694731.129 ops/s
# Warmup Iteration   9: 1598682.686 ops/s
# Warmup Iteration  10: 1660539.858 ops/s
# Warmup Iteration  11: 1588252.625 ops/s
# Warmup Iteration  12: 1531262.624 ops/s
# Warmup Iteration  13: 1652544.882 ops/s
# Warmup Iteration  14: 1626199.165 ops/s
# Warmup Iteration  15: 1656414.598 ops/s
# Warmup Iteration  16: 1632365.133 ops/s
# Warmup Iteration  17: 1619463.963 ops/s
# Warmup Iteration  18: 1615746.973 ops/s
# Warmup Iteration  19: 1575393.356 ops/s
# Warmup Iteration  20: 1591347.764 ops/s
# Warmup Iteration  21: 1585530.305 ops/s
# Warmup Iteration  22: 1580881.601 ops/s
# Warmup Iteration  23: 1610821.770 ops/s
# Warmup Iteration  24: 1606301.447 ops/s
# Warmup Iteration  25: 1680444.045 ops/s
# Warmup Iteration  26: 1591224.441 ops/s
# Warmup Iteration  27: 1605755.074 ops/s
# Warmup Iteration  28: 1570588.783 ops/s
# Warmup Iteration  29: 1559913.245 ops/s
# Warmup Iteration  30: 1682301.056 ops/s
Iteration   1: 1606516.053 ops/s
Iteration   2: 1624500.956 ops/s
Iteration   3: 1623234.931 ops/s
Iteration   4: 1563570.822 ops/s
Iteration   5: 1642617.442 ops/s
Iteration   6: 1577723.258 ops/s
Iteration   7: 1577401.460 ops/s
Iteration   8: 1588584.742 ops/s
Iteration   9: 1605896.099 ops/s
Iteration  10: 1578490.339 ops/s
Iteration  11: 1595785.913 ops/s
Iteration  12: 1667182.749 ops/s
Iteration  13: 1586494.137 ops/s
Iteration  14: 1551459.007 ops/s
Iteration  15: 1636060.599 ops/s
Iteration  16: 1576631.919 ops/s
Iteration  17: 1592350.132 ops/s
Iteration  18: 1632433.354 ops/s
Iteration  19: 1584956.859 ops/s
Iteration  20: 1668479.548 ops/s
Iteration  21: 1601956.932 ops/s
Iteration  22: 1603687.056 ops/s
Iteration  23: 1569709.004 ops/s
Iteration  24: 1641470.137 ops/s
Iteration  25: 1611048.648 ops/s
Iteration  26: 1594228.232 ops/s
Iteration  27: 1634182.890 ops/s
Iteration  28: 1585495.989 ops/s
Iteration  29: 1588156.534 ops/s
Iteration  30: 1573091.277 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noCancelPreviousArray":
  1602779.901 ±(99.9%) 19898.739 ops/s [Average]
  (min, avg, max) = (1551459.007, 1602779.901, 1668479.548), stdev = 29783.499
  CI (99.9%): [1582881.161, 1622678.640] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_noCancelPreviousArray  thrpt   30  1602779.901 ± 19898.739  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 216668.953 ops/s
# Warmup Iteration   2: 542543.427 ops/s
# Warmup Iteration   3: 629470.550 ops/s
# Warmup Iteration   4: 688409.242 ops/s
# Warmup Iteration   5: 575710.065 ops/s
# Warmup Iteration   6: 678977.448 ops/s
# Warmup Iteration   7: 690286.239 ops/s
# Warmup Iteration   8: 695211.082 ops/s
# Warmup Iteration   9: 684937.346 ops/s
# Warmup Iteration  10: 709405.790 ops/s
# Warmup Iteration  11: 665524.315 ops/s
# Warmup Iteration  12: 693555.318 ops/s
# Warmup Iteration  13: 697848.051 ops/s
# Warmup Iteration  14: 679790.233 ops/s
# Warmup Iteration  15: 710205.487 ops/s
# Warmup Iteration  16: 674040.355 ops/s
# Warmup Iteration  17: 729905.145 ops/s
# Warmup Iteration  18: 754781.855 ops/s
# Warmup Iteration  19: 717533.228 ops/s
# Warmup Iteration  20: 760997.273 ops/s
# Warmup Iteration  21: 752537.897 ops/s
# Warmup Iteration  22: 703246.449 ops/s
# Warmup Iteration  23: 742146.267 ops/s
# Warmup Iteration  24: 711690.991 ops/s
# Warmup Iteration  25: 722289.327 ops/s
# Warmup Iteration  26: 723927.367 ops/s
# Warmup Iteration  27: 723204.885 ops/s
# Warmup Iteration  28: 763341.397 ops/s
# Warmup Iteration  29: 708323.673 ops/s
# Warmup Iteration  30: 763429.840 ops/s
Iteration   1: 763352.374 ops/s
Iteration   2: 712883.060 ops/s
Iteration   3: 723697.175 ops/s
Iteration   4: 620487.196 ops/s
Iteration   5: 737083.571 ops/s
Iteration   6: 715882.624 ops/s
Iteration   7: 732719.135 ops/s
Iteration   8: 744021.713 ops/s
Iteration   9: 713582.953 ops/s
Iteration  10: 729203.513 ops/s
Iteration  11: 746185.274 ops/s
Iteration  12: 720208.773 ops/s
Iteration  13: 731786.000 ops/s
Iteration  14: 730859.526 ops/s
Iteration  15: 710217.851 ops/s
Iteration  16: 765326.820 ops/s
Iteration  17: 696839.083 ops/s
Iteration  18: 724671.969 ops/s
Iteration  19: 712006.544 ops/s
Iteration  20: 740341.151 ops/s
Iteration  21: 713905.385 ops/s
Iteration  22: 732052.048 ops/s
Iteration  23: 720747.138 ops/s
Iteration  24: 705504.307 ops/s
Iteration  25: 746954.507 ops/s
Iteration  26: 698261.616 ops/s
Iteration  27: 751579.154 ops/s
Iteration  28: 702146.347 ops/s
Iteration  29: 757150.849 ops/s
Iteration  30: 732279.285 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_mainError":
  724397.898 ±(99.9%) 17982.055 ops/s [Average]
  (min, avg, max) = (620487.196, 724397.898, 765326.820), stdev = 26914.696
  CI (99.9%): [706415.843, 742379.953] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
FlowableConcatWithMaybeTest._Benchmark.benchmark_mainError  thrpt   30  724397.898 ± 17982.055  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_mergeBadSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_mergeBadSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 429713.548 ops/s
# Warmup Iteration   2: 1584607.766 ops/s
# Warmup Iteration   3: 2304833.758 ops/s
# Warmup Iteration   4: 2222764.983 ops/s
# Warmup Iteration   5: 2310499.154 ops/s
# Warmup Iteration   6: 2324141.640 ops/s
# Warmup Iteration   7: 2195714.213 ops/s
# Warmup Iteration   8: 2277394.323 ops/s
# Warmup Iteration   9: 2044823.273 ops/s
# Warmup Iteration  10: 2089354.768 ops/s
# Warmup Iteration  11: 2312323.142 ops/s
# Warmup Iteration  12: 2209378.315 ops/s
# Warmup Iteration  13: 2320379.655 ops/s
# Warmup Iteration  14: 2367416.124 ops/s
# Warmup Iteration  15: 2323385.733 ops/s
# Warmup Iteration  16: 2338429.838 ops/s
# Warmup Iteration  17: 2184793.585 ops/s
# Warmup Iteration  18: 2340935.443 ops/s
# Warmup Iteration  19: 2220031.304 ops/s
# Warmup Iteration  20: 2299815.776 ops/s
# Warmup Iteration  21: 2315292.018 ops/s
# Warmup Iteration  22: 2248036.632 ops/s
# Warmup Iteration  23: 2351329.358 ops/s
# Warmup Iteration  24: 2287928.526 ops/s
# Warmup Iteration  25: 2320610.100 ops/s
# Warmup Iteration  26: 2242534.623 ops/s
# Warmup Iteration  27: 2320562.000 ops/s
# Warmup Iteration  28: 2262934.743 ops/s
# Warmup Iteration  29: 2327974.111 ops/s
# Warmup Iteration  30: 2328125.047 ops/s
Iteration   1: 2217910.129 ops/s
Iteration   2: 2290627.230 ops/s
Iteration   3: 2217956.141 ops/s
Iteration   4: 2311228.385 ops/s
Iteration   5: 2319315.004 ops/s
Iteration   6: 2216132.141 ops/s
Iteration   7: 2283207.612 ops/s
Iteration   8: 2251009.665 ops/s
Iteration   9: 2264431.351 ops/s
Iteration  10: 2363286.545 ops/s
Iteration  11: 2224705.754 ops/s
Iteration  12: 2311451.579 ops/s
Iteration  13: 2282768.207 ops/s
Iteration  14: 2313715.271 ops/s
Iteration  15: 2238196.592 ops/s
Iteration  16: 2298837.357 ops/s
Iteration  17: 2341699.003 ops/s
Iteration  18: 2270066.644 ops/s
Iteration  19: 2337741.913 ops/s
Iteration  20: 2308709.916 ops/s
Iteration  21: 2275424.332 ops/s
Iteration  22: 2329305.385 ops/s
Iteration  23: 2312477.553 ops/s
Iteration  24: 2324528.778 ops/s
Iteration  25: 2237979.220 ops/s
Iteration  26: 2318309.574 ops/s
Iteration  27: 2269428.378 ops/s
Iteration  28: 2240241.017 ops/s
Iteration  29: 2334453.050 ops/s
Iteration  30: 2217420.995 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_mergeBadSource":
  2284085.491 ±(99.9%) 28990.065 ops/s [Average]
  (min, avg, max) = (2216132.141, 2284085.491, 2363286.545), stdev = 43390.968
  CI (99.9%): [2255095.426, 2313075.556] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MaybeMergeArrayTest._Benchmark.benchmark_mergeBadSource  thrpt   30  2284085.491 ± 28990.065  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedStreamAvailableLater$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedStreamAvailableLater

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 295759.848 ops/s
# Warmup Iteration   2: 1039061.187 ops/s
# Warmup Iteration   3: 2255460.413 ops/s
# Warmup Iteration   4: 2601233.302 ops/s
# Warmup Iteration   5: 2448677.423 ops/s
# Warmup Iteration   6: 2601717.148 ops/s
# Warmup Iteration   7: 2222621.952 ops/s
# Warmup Iteration   8: 2567568.034 ops/s
# Warmup Iteration   9: 2574165.272 ops/s
# Warmup Iteration  10: 2570153.023 ops/s
# Warmup Iteration  11: 2581396.726 ops/s
# Warmup Iteration  12: 2500011.720 ops/s
# Warmup Iteration  13: 2438483.364 ops/s
# Warmup Iteration  14: 2643104.723 ops/s
# Warmup Iteration  15: 2586257.555 ops/s
# Warmup Iteration  16: 2623785.860 ops/s
# Warmup Iteration  17: 2479821.739 ops/s
# Warmup Iteration  18: 2563758.729 ops/s
# Warmup Iteration  19: 2625914.654 ops/s
# Warmup Iteration  20: 2480203.363 ops/s
# Warmup Iteration  21: 2590613.037 ops/s
# Warmup Iteration  22: 2528997.354 ops/s
# Warmup Iteration  23: 2643587.734 ops/s
# Warmup Iteration  24: 2656871.014 ops/s
# Warmup Iteration  25: 2516205.665 ops/s
# Warmup Iteration  26: 2627406.176 ops/s
# Warmup Iteration  27: 2539463.498 ops/s
# Warmup Iteration  28: 2554474.041 ops/s
# Warmup Iteration  29: 2104832.854 ops/s
# Warmup Iteration  30: 2648863.280 ops/s
Iteration   1: 2528754.924 ops/s
Iteration   2: 2502033.616 ops/s
Iteration   3: 2662844.724 ops/s
Iteration   4: 2460210.707 ops/s
Iteration   5: 2643539.641 ops/s
Iteration   6: 2482702.838 ops/s
Iteration   7: 2549238.793 ops/s
Iteration   8: 2637704.890 ops/s
Iteration   9: 2644809.179 ops/s
Iteration  10: 2553376.494 ops/s
Iteration  11: 2588676.166 ops/s
Iteration  12: 2531870.826 ops/s
Iteration  13: 2617500.993 ops/s
Iteration  14: 2572244.697 ops/s
Iteration  15: 2557075.877 ops/s
Iteration  16: 2662976.066 ops/s
Iteration  17: 2500630.467 ops/s
Iteration  18: 2687673.722 ops/s
Iteration  19: 2549148.224 ops/s
Iteration  20: 2552589.356 ops/s
Iteration  21: 2572224.949 ops/s
Iteration  22: 2468354.120 ops/s
Iteration  23: 2599084.953 ops/s
Iteration  24: 2522760.340 ops/s
Iteration  25: 2641990.683 ops/s
Iteration  26: 2537277.008 ops/s
Iteration  27: 2507852.421 ops/s
Iteration  28: 2701678.638 ops/s
Iteration  29: 2463414.367 ops/s
Iteration  30: 2515596.202 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedStreamAvailableLater":
  2567194.530 ±(99.9%) 46111.196 ops/s [Average]
  (min, avg, max) = (2460210.707, 2567194.530, 2701678.638), stdev = 69017.072
  CI (99.9%): [2521083.334, 2613305.725] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedStreamAvailableLater  thrpt   30  2567194.530 ± 46111.196  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissionsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissionsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93106.536 ops/s
# Warmup Iteration   2: 334703.411 ops/s
# Warmup Iteration   3: 561594.048 ops/s
# Warmup Iteration   4: 569437.104 ops/s
# Warmup Iteration   5: 580854.240 ops/s
# Warmup Iteration   6: 569096.048 ops/s
# Warmup Iteration   7: 602294.054 ops/s
# Warmup Iteration   8: 639234.090 ops/s
# Warmup Iteration   9: 600071.708 ops/s
# Warmup Iteration  10: 617045.559 ops/s
# Warmup Iteration  11: 622496.716 ops/s
# Warmup Iteration  12: 613812.602 ops/s
# Warmup Iteration  13: 611547.417 ops/s
# Warmup Iteration  14: 621025.625 ops/s
# Warmup Iteration  15: 615585.308 ops/s
# Warmup Iteration  16: 619054.159 ops/s
# Warmup Iteration  17: 632414.598 ops/s
# Warmup Iteration  18: 640245.560 ops/s
# Warmup Iteration  19: 668523.270 ops/s
# Warmup Iteration  20: 622856.031 ops/s
# Warmup Iteration  21: 658467.135 ops/s
# Warmup Iteration  22: 629788.049 ops/s
# Warmup Iteration  23: 664021.969 ops/s
# Warmup Iteration  24: 655384.512 ops/s
# Warmup Iteration  25: 651957.922 ops/s
# Warmup Iteration  26: 648668.991 ops/s
# Warmup Iteration  27: 661962.916 ops/s
# Warmup Iteration  28: 642900.185 ops/s
# Warmup Iteration  29: 656420.149 ops/s
# Warmup Iteration  30: 658815.272 ops/s
Iteration   1: 641556.212 ops/s
Iteration   2: 663141.386 ops/s
Iteration   3: 633313.037 ops/s
Iteration   4: 635582.747 ops/s
Iteration   5: 679109.835 ops/s
Iteration   6: 636014.745 ops/s
Iteration   7: 678542.634 ops/s
Iteration   8: 660414.986 ops/s
Iteration   9: 628539.158 ops/s
Iteration  10: 677098.005 ops/s
Iteration  11: 648525.700 ops/s
Iteration  12: 632676.641 ops/s
Iteration  13: 668258.100 ops/s
Iteration  14: 625745.464 ops/s
Iteration  15: 638476.311 ops/s
Iteration  16: 643686.833 ops/s
Iteration  17: 618404.353 ops/s
Iteration  18: 651925.919 ops/s
Iteration  19: 644750.104 ops/s
Iteration  20: 655073.762 ops/s
Iteration  21: 636033.536 ops/s
Iteration  22: 669976.908 ops/s
Iteration  23: 636873.503 ops/s
Iteration  24: 648611.758 ops/s
Iteration  25: 650957.110 ops/s
Iteration  26: 635949.255 ops/s
Iteration  27: 668643.805 ops/s
Iteration  28: 641712.935 ops/s
Iteration  29: 647629.411 ops/s
Iteration  30: 644491.024 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissionsFlowable":
  648057.173 ±(99.9%) 10850.494 ops/s [Average]
  (min, avg, max) = (618404.353, 648057.173, 679109.835), stdev = 16240.510
  CI (99.9%): [637206.679, 658907.667] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                 Mode  Cnt       Score       Error  Units
FlowableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndOnNextEmissionsFlowable  thrpt   30  648057.173 ± 10850.494  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1609588.441 ops/s
# Warmup Iteration   2: 4359916.101 ops/s
# Warmup Iteration   3: 6329496.653 ops/s
# Warmup Iteration   4: 6159590.169 ops/s
# Warmup Iteration   5: 5957741.861 ops/s
# Warmup Iteration   6: 6045420.881 ops/s
# Warmup Iteration   7: 6132670.148 ops/s
# Warmup Iteration   8: 6033066.305 ops/s
# Warmup Iteration   9: 6207630.351 ops/s
# Warmup Iteration  10: 6018863.627 ops/s
# Warmup Iteration  11: 6110799.183 ops/s
# Warmup Iteration  12: 5981205.522 ops/s
# Warmup Iteration  13: 6084673.968 ops/s
# Warmup Iteration  14: 6294665.863 ops/s
# Warmup Iteration  15: 5948203.687 ops/s
# Warmup Iteration  16: 6272131.472 ops/s
# Warmup Iteration  17: 6025700.780 ops/s
# Warmup Iteration  18: 6071363.355 ops/s
# Warmup Iteration  19: 6254823.343 ops/s
# Warmup Iteration  20: 5939740.832 ops/s
# Warmup Iteration  21: 6259679.043 ops/s
# Warmup Iteration  22: 6000197.780 ops/s
# Warmup Iteration  23: 6339023.742 ops/s
# Warmup Iteration  24: 4582637.693 ops/s
# Warmup Iteration  25: 6189099.069 ops/s
# Warmup Iteration  26: 6195705.189 ops/s
# Warmup Iteration  27: 6040341.889 ops/s
# Warmup Iteration  28: 6282202.811 ops/s
# Warmup Iteration  29: 6074036.417 ops/s
# Warmup Iteration  30: 6384290.050 ops/s
Iteration   1: 6074623.294 ops/s
Iteration   2: 6163648.295 ops/s
Iteration   3: 6326686.577 ops/s
Iteration   4: 6056027.628 ops/s
Iteration   5: 6359766.464 ops/s
Iteration   6: 6173467.745 ops/s
Iteration   7: 6231272.956 ops/s
Iteration   8: 5918599.513 ops/s
Iteration   9: 6324343.012 ops/s
Iteration  10: 6123596.954 ops/s
Iteration  11: 6149870.456 ops/s
Iteration  12: 6210263.138 ops/s
Iteration  13: 6148056.794 ops/s
Iteration  14: 6270995.733 ops/s
Iteration  15: 6217026.662 ops/s
Iteration  16: 6294207.899 ops/s
Iteration  17: 6112345.868 ops/s
Iteration  18: 6306532.957 ops/s
Iteration  19: 6114977.818 ops/s
Iteration  20: 6011399.575 ops/s
Iteration  21: 6435209.690 ops/s
Iteration  22: 5982109.746 ops/s
Iteration  23: 6087481.727 ops/s
Iteration  24: 6330585.905 ops/s
Iteration  25: 6182788.811 ops/s
Iteration  26: 6242499.673 ops/s
Iteration  27: 6145901.724 ops/s
Iteration  28: 6182319.009 ops/s
Iteration  29: 6291704.049 ops/s
Iteration  30: 6002280.778 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_dispose":
  6182353.015 ±(99.9%) 82190.733 ops/s [Average]
  (min, avg, max) = (5918599.513, 6182353.015, 6435209.690), stdev = 123019.229
  CI (99.9%): [6100162.282, 6264543.748] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FlowableGenerateTest._Benchmark.benchmark_dispose  thrpt   30  6182353.015 ± 82190.733  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_asyncFusion$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_asyncFusion

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 942429.620 ops/s
# Warmup Iteration   2: 3291038.203 ops/s
# Warmup Iteration   3: 5024345.567 ops/s
# Warmup Iteration   4: 5251540.436 ops/s
# Warmup Iteration   5: 5147510.435 ops/s
# Warmup Iteration   6: 5536211.833 ops/s
# Warmup Iteration   7: 5402158.694 ops/s
# Warmup Iteration   8: 5299991.801 ops/s
# Warmup Iteration   9: 5536755.054 ops/s
# Warmup Iteration  10: 5321854.368 ops/s
# Warmup Iteration  11: 5391181.601 ops/s
# Warmup Iteration  12: 5367412.591 ops/s
# Warmup Iteration  13: 5416280.719 ops/s
# Warmup Iteration  14: 5429367.812 ops/s
# Warmup Iteration  15: 5358343.019 ops/s
# Warmup Iteration  16: 5387733.207 ops/s
# Warmup Iteration  17: 5322619.785 ops/s
# Warmup Iteration  18: 5611754.252 ops/s
# Warmup Iteration  19: 5317208.608 ops/s
# Warmup Iteration  20: 5589202.805 ops/s
# Warmup Iteration  21: 5563666.308 ops/s
# Warmup Iteration  22: 5173614.028 ops/s
# Warmup Iteration  23: 5579576.782 ops/s
# Warmup Iteration  24: 5450898.285 ops/s
# Warmup Iteration  25: 5403623.108 ops/s
# Warmup Iteration  26: 5431409.813 ops/s
# Warmup Iteration  27: 5507947.372 ops/s
# Warmup Iteration  28: 5092902.688 ops/s
# Warmup Iteration  29: 5432513.595 ops/s
# Warmup Iteration  30: 5324480.936 ops/s
Iteration   1: 5456668.952 ops/s
Iteration   2: 5519502.568 ops/s
Iteration   3: 5251059.485 ops/s
Iteration   4: 5412297.642 ops/s
Iteration   5: 5530634.107 ops/s
Iteration   6: 5326979.836 ops/s
Iteration   7: 5528946.655 ops/s
Iteration   8: 5577702.246 ops/s
Iteration   9: 5173485.868 ops/s
Iteration  10: 5445437.323 ops/s
Iteration  11: 5310767.588 ops/s
Iteration  12: 5540816.722 ops/s
Iteration  13: 5552320.226 ops/s
Iteration  14: 5430775.229 ops/s
Iteration  15: 5288663.918 ops/s
Iteration  16: 5304101.571 ops/s
Iteration  17: 5451691.559 ops/s
Iteration  18: 5332160.311 ops/s
Iteration  19: 5566867.952 ops/s
Iteration  20: 5185739.596 ops/s
Iteration  21: 5376672.922 ops/s
Iteration  22: 5532926.851 ops/s
Iteration  23: 5518830.004 ops/s
Iteration  24: 5214128.928 ops/s
Iteration  25: 5640970.648 ops/s
Iteration  26: 5237776.822 ops/s
Iteration  27: 5455578.851 ops/s
Iteration  28: 5596102.233 ops/s
Iteration  29: 5257550.634 ops/s
Iteration  30: 5470068.927 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_asyncFusion":
  5416240.872 ±(99.9%) 90189.768 ops/s [Average]
  (min, avg, max) = (5173485.868, 5416240.872, 5640970.648), stdev = 134991.809
  CI (99.9%): [5326051.105, 5506430.640] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableFromSingleTest._Benchmark.benchmark_asyncFusion  thrpt   30  5416240.872 ± 90189.768  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_success$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_success

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 735331.764 ops/s
# Warmup Iteration   2: 4258131.653 ops/s
# Warmup Iteration   3: 5379292.163 ops/s
# Warmup Iteration   4: 4741788.750 ops/s
# Warmup Iteration   5: 5424854.090 ops/s
# Warmup Iteration   6: 5243554.802 ops/s
# Warmup Iteration   7: 4985104.691 ops/s
# Warmup Iteration   8: 5397028.875 ops/s
# Warmup Iteration   9: 5365712.585 ops/s
# Warmup Iteration  10: 5586049.156 ops/s
# Warmup Iteration  11: 5141899.522 ops/s
# Warmup Iteration  12: 5480594.277 ops/s
# Warmup Iteration  13: 5392155.686 ops/s
# Warmup Iteration  14: 5389156.736 ops/s
# Warmup Iteration  15: 5391440.814 ops/s
# Warmup Iteration  16: 5362974.289 ops/s
# Warmup Iteration  17: 5306887.980 ops/s
# Warmup Iteration  18: 5233875.057 ops/s
# Warmup Iteration  19: 4767127.158 ops/s
# Warmup Iteration  20: 5339077.619 ops/s
# Warmup Iteration  21: 5467116.639 ops/s
# Warmup Iteration  22: 5220150.511 ops/s
# Warmup Iteration  23: 5573174.061 ops/s
# Warmup Iteration  24: 5479606.229 ops/s
# Warmup Iteration  25: 5331583.946 ops/s
# Warmup Iteration  26: 5650260.319 ops/s
# Warmup Iteration  27: 5402390.340 ops/s
# Warmup Iteration  28: 5512727.168 ops/s
# Warmup Iteration  29: 5479955.362 ops/s
# Warmup Iteration  30: 5595761.684 ops/s
Iteration   1: 5311115.970 ops/s
Iteration   2: 5523592.079 ops/s
Iteration   3: 5269446.577 ops/s
Iteration   4: 5443426.530 ops/s
Iteration   5: 5319777.150 ops/s
Iteration   6: 5499890.290 ops/s
Iteration   7: 5303795.260 ops/s
Iteration   8: 5399079.352 ops/s
Iteration   9: 5602600.410 ops/s
Iteration  10: 5203077.030 ops/s
Iteration  11: 5597684.585 ops/s
Iteration  12: 5218166.483 ops/s
Iteration  13: 5258637.839 ops/s
Iteration  14: 5573375.519 ops/s
Iteration  15: 5506008.370 ops/s
Iteration  16: 5230555.893 ops/s
Iteration  17: 5429592.669 ops/s
Iteration  18: 5203357.989 ops/s
Iteration  19: 5413778.385 ops/s
Iteration  20: 5518016.644 ops/s
Iteration  21: 5271074.418 ops/s
Iteration  22: 5609946.173 ops/s
Iteration  23: 5513626.467 ops/s
Iteration  24: 5353914.270 ops/s
Iteration  25: 5507073.624 ops/s
Iteration  26: 5396439.017 ops/s
Iteration  27: 5540918.211 ops/s
Iteration  28: 5301628.667 ops/s
Iteration  29: 5455922.246 ops/s
Iteration  30: 5441193.999 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_success":
  5407223.737 ±(99.9%) 86259.108 ops/s [Average]
  (min, avg, max) = (5203077.030, 5407223.737, 5609946.173), stdev = 129108.581
  CI (99.9%): [5320964.629, 5493482.845] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableFromSingleTest._Benchmark.benchmark_success  thrpt   30  5407223.737 ± 86259.108  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_syncFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_syncFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 866356.511 ops/s
# Warmup Iteration   2: 3822340.655 ops/s
# Warmup Iteration   3: 4386488.400 ops/s
# Warmup Iteration   4: 5343203.562 ops/s
# Warmup Iteration   5: 5203324.352 ops/s
# Warmup Iteration   6: 4956041.721 ops/s
# Warmup Iteration   7: 5411230.350 ops/s
# Warmup Iteration   8: 5122780.568 ops/s
# Warmup Iteration   9: 5191108.337 ops/s
# Warmup Iteration  10: 5340561.266 ops/s
# Warmup Iteration  11: 5208429.709 ops/s
# Warmup Iteration  12: 5286787.834 ops/s
# Warmup Iteration  13: 5110404.268 ops/s
# Warmup Iteration  14: 5014226.936 ops/s
# Warmup Iteration  15: 5258312.929 ops/s
# Warmup Iteration  16: 5266354.233 ops/s
# Warmup Iteration  17: 5166521.732 ops/s
# Warmup Iteration  18: 5245515.181 ops/s
# Warmup Iteration  19: 5434686.825 ops/s
# Warmup Iteration  20: 4952874.919 ops/s
# Warmup Iteration  21: 5296096.259 ops/s
# Warmup Iteration  22: 5101042.703 ops/s
# Warmup Iteration  23: 5247361.605 ops/s
# Warmup Iteration  24: 5104650.662 ops/s
# Warmup Iteration  25: 5205837.780 ops/s
# Warmup Iteration  26: 5323564.029 ops/s
# Warmup Iteration  27: 5227885.257 ops/s
# Warmup Iteration  28: 5127507.809 ops/s
# Warmup Iteration  29: 5410386.578 ops/s
# Warmup Iteration  30: 4989229.738 ops/s
Iteration   1: 5573614.769 ops/s
Iteration   2: 5328508.175 ops/s
Iteration   3: 5045525.277 ops/s
Iteration   4: 4988420.298 ops/s
Iteration   5: 5560888.710 ops/s
Iteration   6: 5083374.220 ops/s
Iteration   7: 5216686.825 ops/s
Iteration   8: 5399561.731 ops/s
Iteration   9: 5210653.021 ops/s
Iteration  10: 5309291.202 ops/s
Iteration  11: 5132804.170 ops/s
Iteration  12: 5322355.408 ops/s
Iteration  13: 5325401.137 ops/s
Iteration  14: 5160366.542 ops/s
Iteration  15: 5287182.797 ops/s
Iteration  16: 5135109.919 ops/s
Iteration  17: 5427741.358 ops/s
Iteration  18: 5251464.291 ops/s
Iteration  19: 5443325.744 ops/s
Iteration  20: 5269530.122 ops/s
Iteration  21: 5099359.913 ops/s
Iteration  22: 5544989.086 ops/s
Iteration  23: 5125916.724 ops/s
Iteration  24: 5367014.104 ops/s
Iteration  25: 5108072.596 ops/s
Iteration  26: 5218180.448 ops/s
Iteration  27: 5322419.677 ops/s
Iteration  28: 5118860.209 ops/s
Iteration  29: 5393432.734 ops/s
Iteration  30: 5238359.499 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_syncFusionRejected":
  5266947.024 ±(99.9%) 102697.029 ops/s [Average]
  (min, avg, max) = (4988420.298, 5266947.024, 5573614.769), stdev = 153712.090
  CI (99.9%): [5164249.995, 5369644.052] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
FlowableFromSingleTest._Benchmark.benchmark_syncFusionRejected  thrpt   30  5266947.024 ± 102697.029  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherNormalMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherNormalMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 175247.462 ops/s
# Warmup Iteration   2: 1035578.945 ops/s
# Warmup Iteration   3: 1426864.929 ops/s
# Warmup Iteration   4: 1407841.408 ops/s
# Warmup Iteration   5: 1590079.250 ops/s
# Warmup Iteration   6: 1601331.785 ops/s
# Warmup Iteration   7: 1606398.545 ops/s
# Warmup Iteration   8: 1666293.040 ops/s
# Warmup Iteration   9: 1566116.249 ops/s
# Warmup Iteration  10: 1650045.646 ops/s
# Warmup Iteration  11: 1595204.689 ops/s
# Warmup Iteration  12: 1665050.320 ops/s
# Warmup Iteration  13: 1463996.019 ops/s
# Warmup Iteration  14: 1525187.759 ops/s
# Warmup Iteration  15: 1614234.063 ops/s
# Warmup Iteration  16: 1534171.250 ops/s
# Warmup Iteration  17: 1642098.109 ops/s
# Warmup Iteration  18: 1597119.586 ops/s
# Warmup Iteration  19: 1561305.796 ops/s
# Warmup Iteration  20: 1604234.741 ops/s
# Warmup Iteration  21: 1664157.509 ops/s
# Warmup Iteration  22: 1604511.420 ops/s
# Warmup Iteration  23: 1612452.688 ops/s
# Warmup Iteration  24: 1541650.956 ops/s
# Warmup Iteration  25: 1664908.878 ops/s
# Warmup Iteration  26: 1573180.253 ops/s
# Warmup Iteration  27: 1646514.555 ops/s
# Warmup Iteration  28: 1613532.667 ops/s
# Warmup Iteration  29: 1584499.138 ops/s
# Warmup Iteration  30: 1620415.801 ops/s
Iteration   1: 1557320.333 ops/s
Iteration   2: 1587103.945 ops/s
Iteration   3: 1566122.807 ops/s
Iteration   4: 1608742.353 ops/s
Iteration   5: 1593991.802 ops/s
Iteration   6: 1614185.496 ops/s
Iteration   7: 1601872.713 ops/s
Iteration   8: 1577936.395 ops/s
Iteration   9: 1676294.305 ops/s
Iteration  10: 1556936.515 ops/s
Iteration  11: 1627297.008 ops/s
Iteration  12: 1607041.201 ops/s
Iteration  13: 1550208.864 ops/s
Iteration  14: 1621203.635 ops/s
Iteration  15: 1588968.025 ops/s
Iteration  16: 1589901.148 ops/s
Iteration  17: 1669920.256 ops/s
Iteration  18: 1562736.575 ops/s
Iteration  19: 1612063.384 ops/s
Iteration  20: 1557280.060 ops/s
Iteration  21: 1626915.923 ops/s
Iteration  22: 1576263.602 ops/s
Iteration  23: 1594218.000 ops/s
Iteration  24: 1660055.073 ops/s
Iteration  25: 1591854.961 ops/s
Iteration  26: 1646739.467 ops/s
Iteration  27: 1589809.438 ops/s
Iteration  28: 1661373.517 ops/s
Iteration  29: 1588251.230 ops/s
Iteration  30: 1600372.910 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherNormalMaxConcurrency":
  1602099.365 ±(99.9%) 23165.814 ops/s [Average]
  (min, avg, max) = (1550208.864, 1602099.365, 1676294.305), stdev = 34673.503
  CI (99.9%): [1578933.550, 1625265.179] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SingleConcatEagerTest._Benchmark.benchmark_publisherNormalMaxConcurrency  thrpt   30  1602099.365 ± 23165.814  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 123193.534 ops/s
# Warmup Iteration   2: 649117.940 ops/s
# Warmup Iteration   3: 996613.254 ops/s
# Warmup Iteration   4: 1267973.234 ops/s
# Warmup Iteration   5: 1272828.102 ops/s
# Warmup Iteration   6: 1268096.757 ops/s
# Warmup Iteration   7: 1274265.993 ops/s
# Warmup Iteration   8: 1238115.800 ops/s
# Warmup Iteration   9: 1288217.368 ops/s
# Warmup Iteration  10: 1297207.025 ops/s
# Warmup Iteration  11: 1278035.298 ops/s
# Warmup Iteration  12: 1303962.206 ops/s
# Warmup Iteration  13: 1269885.986 ops/s
# Warmup Iteration  14: 1353742.834 ops/s
# Warmup Iteration  15: 1276142.633 ops/s
# Warmup Iteration  16: 1292287.311 ops/s
# Warmup Iteration  17: 1282265.424 ops/s
# Warmup Iteration  18: 1261833.257 ops/s
# Warmup Iteration  19: 1306522.594 ops/s
# Warmup Iteration  20: 1250540.900 ops/s
# Warmup Iteration  21: 1322897.868 ops/s
# Warmup Iteration  22: 1315349.528 ops/s
# Warmup Iteration  23: 1222200.283 ops/s
# Warmup Iteration  24: 1310960.299 ops/s
# Warmup Iteration  25: 1267047.244 ops/s
# Warmup Iteration  26: 1241449.338 ops/s
# Warmup Iteration  27: 1270889.521 ops/s
# Warmup Iteration  28: 1360763.730 ops/s
# Warmup Iteration  29: 1240436.213 ops/s
# Warmup Iteration  30: 1314212.999 ops/s
Iteration   1: 1261412.843 ops/s
Iteration   2: 1295624.959 ops/s
Iteration   3: 1334386.709 ops/s
Iteration   4: 1275886.904 ops/s
Iteration   5: 1286736.890 ops/s
Iteration   6: 1248122.616 ops/s
Iteration   7: 1299062.428 ops/s
Iteration   8: 1334530.678 ops/s
Iteration   9: 1234828.210 ops/s
Iteration  10: 1289370.519 ops/s
Iteration  11: 1276335.744 ops/s
Iteration  12: 1296217.734 ops/s
Iteration  13: 1342802.234 ops/s
Iteration  14: 1208150.353 ops/s
Iteration  15: 1265487.595 ops/s
Iteration  16: 1270218.627 ops/s
Iteration  17: 1243585.006 ops/s
Iteration  18: 1299834.564 ops/s
Iteration  19: 1255247.426 ops/s
Iteration  20: 1284244.648 ops/s
Iteration  21: 1264155.436 ops/s
Iteration  22: 1300805.200 ops/s
Iteration  23: 1324902.813 ops/s
Iteration  24: 1283209.011 ops/s
Iteration  25: 1304007.087 ops/s
Iteration  26: 1227219.913 ops/s
Iteration  27: 1331645.153 ops/s
Iteration  28: 1254585.085 ops/s
Iteration  29: 1276156.425 ops/s
Iteration  30: 1317170.074 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherNormal":
  1282864.763 ±(99.9%) 22423.446 ops/s [Average]
  (min, avg, max) = (1208150.353, 1282864.763, 1342802.234), stdev = 33562.360
  CI (99.9%): [1260441.317, 1305288.209] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SingleConcatEagerTest._Benchmark.benchmark_publisherNormal  thrpt   30  1282864.763 ± 22423.446  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justSingleJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justSingleJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 351281.366 ops/s
# Warmup Iteration   2: 1601440.294 ops/s
# Warmup Iteration   3: 2223913.462 ops/s
# Warmup Iteration   4: 2172322.132 ops/s
# Warmup Iteration   5: 2084836.542 ops/s
# Warmup Iteration   6: 2032286.877 ops/s
# Warmup Iteration   7: 2355674.578 ops/s
# Warmup Iteration   8: 2112423.063 ops/s
# Warmup Iteration   9: 1812550.846 ops/s
# Warmup Iteration  10: 2318101.489 ops/s
# Warmup Iteration  11: 2133856.076 ops/s
# Warmup Iteration  12: 2202626.554 ops/s
# Warmup Iteration  13: 2151550.145 ops/s
# Warmup Iteration  14: 2171485.396 ops/s
# Warmup Iteration  15: 2282874.707 ops/s
# Warmup Iteration  16: 2189647.144 ops/s
# Warmup Iteration  17: 2212834.482 ops/s
# Warmup Iteration  18: 2280434.143 ops/s
# Warmup Iteration  19: 2192063.988 ops/s
# Warmup Iteration  20: 2261526.481 ops/s
# Warmup Iteration  21: 2064804.109 ops/s
# Warmup Iteration  22: 2278517.102 ops/s
# Warmup Iteration  23: 2291529.475 ops/s
# Warmup Iteration  24: 2185031.391 ops/s
# Warmup Iteration  25: 2257418.116 ops/s
# Warmup Iteration  26: 2196250.935 ops/s
# Warmup Iteration  27: 2255612.835 ops/s
# Warmup Iteration  28: 2331190.763 ops/s
# Warmup Iteration  29: 2298851.880 ops/s
# Warmup Iteration  30: 2204739.940 ops/s
Iteration   1: 2280252.468 ops/s
Iteration   2: 2172145.276 ops/s
Iteration   3: 2208049.699 ops/s
Iteration   4: 2215461.956 ops/s
Iteration   5: 2232042.647 ops/s
Iteration   6: 2234470.219 ops/s
Iteration   7: 2314189.066 ops/s
Iteration   8: 2118345.314 ops/s
Iteration   9: 2275475.643 ops/s
Iteration  10: 2239214.215 ops/s
Iteration  11: 2254820.109 ops/s
Iteration  12: 2132344.705 ops/s
Iteration  13: 2221339.284 ops/s
Iteration  14: 2267251.067 ops/s
Iteration  15: 2178916.049 ops/s
Iteration  16: 2241746.201 ops/s
Iteration  17: 2190358.108 ops/s
Iteration  18: 2207605.761 ops/s
Iteration  19: 2254235.017 ops/s
Iteration  20: 2133924.630 ops/s
Iteration  21: 2197545.092 ops/s
Iteration  22: 2277871.482 ops/s
Iteration  23: 2198119.269 ops/s
Iteration  24: 2308958.330 ops/s
Iteration  25: 2179846.003 ops/s
Iteration  26: 2367080.283 ops/s
Iteration  27: 2306566.470 ops/s
Iteration  28: 2151729.951 ops/s
Iteration  29: 2282660.002 ops/s
Iteration  30: 2210466.903 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justSingleJust":
  2228434.374 ±(99.9%) 39530.536 ops/s [Average]
  (min, avg, max) = (2118345.314, 2228434.374, 2367080.283), stdev = 59167.449
  CI (99.9%): [2188903.838, 2267964.910] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SingleStartWithTest._Benchmark.benchmark_justSingleJust  thrpt   30  2228434.374 ± 39530.536  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacityFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacityFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 177118.609 ops/s
# Warmup Iteration   2: 990841.060 ops/s
# Warmup Iteration   3: 1832713.201 ops/s
# Warmup Iteration   4: 1606527.789 ops/s
# Warmup Iteration   5: 1996178.573 ops/s
# Warmup Iteration   6: 1959121.486 ops/s
# Warmup Iteration   7: 1933405.035 ops/s
# Warmup Iteration   8: 2040804.877 ops/s
# Warmup Iteration   9: 1957006.366 ops/s
# Warmup Iteration  10: 1927140.607 ops/s
# Warmup Iteration  11: 1960024.507 ops/s
# Warmup Iteration  12: 2020248.242 ops/s
# Warmup Iteration  13: 1934561.765 ops/s
# Warmup Iteration  14: 2031765.854 ops/s
# Warmup Iteration  15: 1915221.513 ops/s
# Warmup Iteration  16: 1941610.304 ops/s
# Warmup Iteration  17: 2017528.804 ops/s
# Warmup Iteration  18: 1911249.749 ops/s
# Warmup Iteration  19: 1904663.153 ops/s
# Warmup Iteration  20: 2000190.225 ops/s
# Warmup Iteration  21: 1919100.696 ops/s
# Warmup Iteration  22: 1989549.467 ops/s
# Warmup Iteration  23: 2015205.081 ops/s
# Warmup Iteration  24: 1963359.409 ops/s
# Warmup Iteration  25: 1892975.276 ops/s
# Warmup Iteration  26: 2052559.403 ops/s
# Warmup Iteration  27: 1901726.630 ops/s
# Warmup Iteration  28: 2011312.201 ops/s
# Warmup Iteration  29: 1946009.900 ops/s
# Warmup Iteration  30: 1961566.680 ops/s
Iteration   1: 2065121.624 ops/s
Iteration   2: 2009286.134 ops/s
Iteration   3: 1949411.218 ops/s
Iteration   4: 1933256.348 ops/s
Iteration   5: 2021502.404 ops/s
Iteration   6: 1917992.192 ops/s
Iteration   7: 1963461.026 ops/s
Iteration   8: 1938205.480 ops/s
Iteration   9: 2019253.899 ops/s
Iteration  10: 1905943.655 ops/s
Iteration  11: 2045003.207 ops/s
Iteration  12: 1930152.190 ops/s
Iteration  13: 1949793.689 ops/s
Iteration  14: 2031274.691 ops/s
Iteration  15: 1877250.435 ops/s
Iteration  16: 1995143.246 ops/s
Iteration  17: 1948485.224 ops/s
Iteration  18: 1954729.873 ops/s
Iteration  19: 2004998.293 ops/s
Iteration  20: 1918991.276 ops/s
Iteration  21: 1983881.216 ops/s
Iteration  22: 1918564.459 ops/s
Iteration  23: 1978268.771 ops/s
Iteration  24: 1998609.621 ops/s
Iteration  25: 1980882.719 ops/s
Iteration  26: 1962988.265 ops/s
Iteration  27: 2030668.272 ops/s
Iteration  28: 2004019.924 ops/s
Iteration  29: 2051185.651 ops/s
Iteration  30: 1894127.191 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacityFlowable":
  1972748.406 ±(99.9%) 33126.011 ops/s [Average]
  (min, avg, max) = (1877250.435, 1972748.406, 2065121.624), stdev = 49581.458
  CI (99.9%): [1939622.395, 2005874.417] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
FlowableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacityFlowable  thrpt   30  1972748.406 ± 33126.011  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_toSortedListCapacityFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_toSortedListCapacityFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 206328.555 ops/s
# Warmup Iteration   2: 1098998.688 ops/s
# Warmup Iteration   3: 1293859.788 ops/s
# Warmup Iteration   4: 1697454.211 ops/s
# Warmup Iteration   5: 1803855.558 ops/s
# Warmup Iteration   6: 1871045.009 ops/s
# Warmup Iteration   7: 1890485.696 ops/s
# Warmup Iteration   8: 1775868.163 ops/s
# Warmup Iteration   9: 1843184.757 ops/s
# Warmup Iteration  10: 1838266.308 ops/s
# Warmup Iteration  11: 1659824.587 ops/s
# Warmup Iteration  12: 1896599.198 ops/s
# Warmup Iteration  13: 1804890.739 ops/s
# Warmup Iteration  14: 1888899.657 ops/s
# Warmup Iteration  15: 1850332.221 ops/s
# Warmup Iteration  16: 1861579.377 ops/s
# Warmup Iteration  17: 1911636.691 ops/s
# Warmup Iteration  18: 1869713.647 ops/s
# Warmup Iteration  19: 1921845.089 ops/s
# Warmup Iteration  20: 1897747.976 ops/s
# Warmup Iteration  21: 1787763.518 ops/s
# Warmup Iteration  22: 1892055.100 ops/s
# Warmup Iteration  23: 1943963.185 ops/s
# Warmup Iteration  24: 1882264.880 ops/s
# Warmup Iteration  25: 1820912.811 ops/s
# Warmup Iteration  26: 1908487.192 ops/s
# Warmup Iteration  27: 1814097.909 ops/s
# Warmup Iteration  28: 1873507.330 ops/s
# Warmup Iteration  29: 1815144.211 ops/s
# Warmup Iteration  30: 1908169.134 ops/s
Iteration   1: 1819594.229 ops/s
Iteration   2: 1840054.911 ops/s
Iteration   3: 1915797.547 ops/s
Iteration   4: 1836416.472 ops/s
Iteration   5: 1932869.232 ops/s
Iteration   6: 1924180.323 ops/s
Iteration   7: 1779804.018 ops/s
Iteration   8: 1949442.259 ops/s
Iteration   9: 1883566.180 ops/s
Iteration  10: 1799495.904 ops/s
Iteration  11: 1916233.409 ops/s
Iteration  12: 1824836.773 ops/s
Iteration  13: 1924488.971 ops/s
Iteration  14: 1817164.863 ops/s
Iteration  15: 1881959.183 ops/s
Iteration  16: 1886076.398 ops/s
Iteration  17: 1842797.645 ops/s
Iteration  18: 1897408.996 ops/s
Iteration  19: 1844621.691 ops/s
Iteration  20: 1861305.315 ops/s
Iteration  21: 1917862.160 ops/s
Iteration  22: 1846707.695 ops/s
Iteration  23: 1878624.298 ops/s
Iteration  24: 1830501.423 ops/s
Iteration  25: 1868746.352 ops/s
Iteration  26: 1938751.530 ops/s
Iteration  27: 1773375.671 ops/s
Iteration  28: 1926133.092 ops/s
Iteration  29: 1861537.750 ops/s
Iteration  30: 1840564.736 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_toSortedListCapacityFlowable":
  1868697.301 ±(99.9%) 32417.121 ops/s [Average]
  (min, avg, max) = (1773375.671, 1868697.301, 1949442.259), stdev = 48520.424
  CI (99.9%): [1836280.180, 1901114.422] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableToSortedListTest._Benchmark.benchmark_toSortedListCapacityFlowable  thrpt   30  1868697.301 ± 32417.121  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatArrayEagerDelayErrorTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatArrayEagerDelayErrorTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 46846.864 ops/s
# Warmup Iteration   2: 225815.312 ops/s
# Warmup Iteration   3: 384584.779 ops/s
# Warmup Iteration   4: 412446.320 ops/s
# Warmup Iteration   5: 369652.604 ops/s
# Warmup Iteration   6: 441773.179 ops/s
# Warmup Iteration   7: 446356.308 ops/s
# Warmup Iteration   8: 414772.461 ops/s
# Warmup Iteration   9: 442386.212 ops/s
# Warmup Iteration  10: 407927.351 ops/s
# Warmup Iteration  11: 448716.328 ops/s
# Warmup Iteration  12: 441487.126 ops/s
# Warmup Iteration  13: 415297.221 ops/s
# Warmup Iteration  14: 445099.304 ops/s
# Warmup Iteration  15: 425078.586 ops/s
# Warmup Iteration  16: 418595.924 ops/s
# Warmup Iteration  17: 450695.482 ops/s
# Warmup Iteration  18: 434925.325 ops/s
# Warmup Iteration  19: 452973.931 ops/s
# Warmup Iteration  20: 435204.719 ops/s
# Warmup Iteration  21: 449780.442 ops/s
# Warmup Iteration  22: 459056.336 ops/s
# Warmup Iteration  23: 440872.643 ops/s
# Warmup Iteration  24: 440598.064 ops/s
# Warmup Iteration  25: 466301.646 ops/s
# Warmup Iteration  26: 427256.331 ops/s
# Warmup Iteration  27: 450833.795 ops/s
# Warmup Iteration  28: 451307.891 ops/s
# Warmup Iteration  29: 449947.771 ops/s
# Warmup Iteration  30: 460639.724 ops/s
Iteration   1: 434081.117 ops/s
Iteration   2: 457698.028 ops/s
Iteration   3: 448750.712 ops/s
Iteration   4: 455371.383 ops/s
Iteration   5: 440918.706 ops/s
Iteration   6: 449788.500 ops/s
Iteration   7: 432395.998 ops/s
Iteration   8: 443900.376 ops/s
Iteration   9: 438138.445 ops/s
Iteration  10: 444168.148 ops/s
Iteration  11: 425777.335 ops/s
Iteration  12: 446676.046 ops/s
Iteration  13: 454077.284 ops/s
Iteration  14: 424123.030 ops/s
Iteration  15: 460653.901 ops/s
Iteration  16: 450840.581 ops/s
Iteration  17: 453249.246 ops/s
Iteration  18: 444644.587 ops/s
Iteration  19: 440348.872 ops/s
Iteration  20: 458913.201 ops/s
Iteration  21: 435683.687 ops/s
Iteration  22: 454568.612 ops/s
Iteration  23: 449534.943 ops/s
Iteration  24: 442116.961 ops/s
Iteration  25: 455565.624 ops/s
Iteration  26: 442575.429 ops/s
Iteration  27: 459741.158 ops/s
Iteration  28: 431154.750 ops/s
Iteration  29: 464203.427 ops/s
Iteration  30: 372541.749 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatArrayEagerDelayErrorTest._Benchmark.benchmark_normal":
  443740.061 ±(99.9%) 11376.006 ops/s [Average]
  (min, avg, max) = (372541.749, 443740.061, 464203.427), stdev = 17027.071
  CI (99.9%): [432364.056, 455116.067] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SingleConcatArrayEagerDelayErrorTest._Benchmark.benchmark_normal  thrpt   30  443740.061 ± 11376.006  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherDelayErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherDelayErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 47009.049 ops/s
# Warmup Iteration   2: 196733.783 ops/s
# Warmup Iteration   3: 437395.057 ops/s
# Warmup Iteration   4: 391125.017 ops/s
# Warmup Iteration   5: 483506.598 ops/s
# Warmup Iteration   6: 466681.219 ops/s
# Warmup Iteration   7: 484851.499 ops/s
# Warmup Iteration   8: 470762.557 ops/s
# Warmup Iteration   9: 488216.926 ops/s
# Warmup Iteration  10: 482273.493 ops/s
# Warmup Iteration  11: 474844.683 ops/s
# Warmup Iteration  12: 490100.681 ops/s
# Warmup Iteration  13: 465869.267 ops/s
# Warmup Iteration  14: 480884.411 ops/s
# Warmup Iteration  15: 470281.413 ops/s
# Warmup Iteration  16: 476614.104 ops/s
# Warmup Iteration  17: 506694.281 ops/s
# Warmup Iteration  18: 495812.000 ops/s
# Warmup Iteration  19: 499108.410 ops/s
# Warmup Iteration  20: 509247.060 ops/s
# Warmup Iteration  21: 453412.454 ops/s
# Warmup Iteration  22: 509721.234 ops/s
# Warmup Iteration  23: 506972.646 ops/s
# Warmup Iteration  24: 482848.833 ops/s
# Warmup Iteration  25: 494943.579 ops/s
# Warmup Iteration  26: 510125.512 ops/s
# Warmup Iteration  27: 484267.482 ops/s
# Warmup Iteration  28: 493302.671 ops/s
# Warmup Iteration  29: 495364.039 ops/s
# Warmup Iteration  30: 492888.945 ops/s
Iteration   1: 506124.733 ops/s
Iteration   2: 489182.025 ops/s
Iteration   3: 482919.343 ops/s
Iteration   4: 492186.826 ops/s
Iteration   5: 484384.526 ops/s
Iteration   6: 489307.873 ops/s
Iteration   7: 493085.572 ops/s
Iteration   8: 493088.143 ops/s
Iteration   9: 507275.590 ops/s
Iteration  10: 489474.303 ops/s
Iteration  11: 508521.268 ops/s
Iteration  12: 486411.100 ops/s
Iteration  13: 484056.220 ops/s
Iteration  14: 509879.167 ops/s
Iteration  15: 488995.062 ops/s
Iteration  16: 490898.314 ops/s
Iteration  17: 505630.176 ops/s
Iteration  18: 486241.456 ops/s
Iteration  19: 525882.747 ops/s
Iteration  20: 486233.842 ops/s
Iteration  21: 485166.810 ops/s
Iteration  22: 519501.373 ops/s
Iteration  23: 485786.760 ops/s
Iteration  24: 494308.939 ops/s
Iteration  25: 518738.204 ops/s
Iteration  26: 464735.690 ops/s
Iteration  27: 488930.588 ops/s
Iteration  28: 485204.550 ops/s
Iteration  29: 495650.026 ops/s
Iteration  30: 505443.091 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherDelayErrorMaxConcurrency":
  494774.811 ±(99.9%) 8789.038 ops/s [Average]
  (min, avg, max) = (464735.690, 494774.811, 525882.747), stdev = 13155.019
  CI (99.9%): [485985.773, 503563.848] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
SingleConcatEagerTest._Benchmark.benchmark_publisherDelayErrorMaxConcurrency  thrpt   30  494774.811 ± 8789.038  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60091.923 ops/s
# Warmup Iteration   2: 230077.219 ops/s
# Warmup Iteration   3: 376531.449 ops/s
# Warmup Iteration   4: 405109.217 ops/s
# Warmup Iteration   5: 376817.735 ops/s
# Warmup Iteration   6: 434950.807 ops/s
# Warmup Iteration   7: 429114.983 ops/s
# Warmup Iteration   8: 426543.527 ops/s
# Warmup Iteration   9: 437167.861 ops/s
# Warmup Iteration  10: 412607.083 ops/s
# Warmup Iteration  11: 423870.994 ops/s
# Warmup Iteration  12: 442943.717 ops/s
# Warmup Iteration  13: 413201.599 ops/s
# Warmup Iteration  14: 449389.734 ops/s
# Warmup Iteration  15: 428031.965 ops/s
# Warmup Iteration  16: 424282.869 ops/s
# Warmup Iteration  17: 460144.714 ops/s
# Warmup Iteration  18: 431856.309 ops/s
# Warmup Iteration  19: 466659.129 ops/s
# Warmup Iteration  20: 446072.320 ops/s
# Warmup Iteration  21: 440596.729 ops/s
# Warmup Iteration  22: 447478.396 ops/s
# Warmup Iteration  23: 446112.841 ops/s
# Warmup Iteration  24: 449794.498 ops/s
# Warmup Iteration  25: 439436.076 ops/s
# Warmup Iteration  26: 452589.144 ops/s
# Warmup Iteration  27: 457827.817 ops/s
# Warmup Iteration  28: 433565.970 ops/s
# Warmup Iteration  29: 432846.238 ops/s
# Warmup Iteration  30: 451034.466 ops/s
Iteration   1: 436933.138 ops/s
Iteration   2: 443921.163 ops/s
Iteration   3: 441477.821 ops/s
Iteration   4: 451273.324 ops/s
Iteration   5: 445713.077 ops/s
Iteration   6: 453929.062 ops/s
Iteration   7: 453471.694 ops/s
Iteration   8: 434819.601 ops/s
Iteration   9: 456049.385 ops/s
Iteration  10: 457684.938 ops/s
Iteration  11: 438029.421 ops/s
Iteration  12: 452897.576 ops/s
Iteration  13: 434326.130 ops/s
Iteration  14: 459395.902 ops/s
Iteration  15: 439899.086 ops/s
Iteration  16: 433900.552 ops/s
Iteration  17: 448502.127 ops/s
Iteration  18: 470762.293 ops/s
Iteration  19: 437098.682 ops/s
Iteration  20: 448536.882 ops/s
Iteration  21: 469941.871 ops/s
Iteration  22: 443771.986 ops/s
Iteration  23: 442524.199 ops/s
Iteration  24: 449826.148 ops/s
Iteration  25: 361185.113 ops/s
Iteration  26: 440466.135 ops/s
Iteration  27: 462759.477 ops/s
Iteration  28: 436036.290 ops/s
Iteration  29: 453738.792 ops/s
Iteration  30: 437732.828 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_publisherDelayError":
  444553.490 ±(99.9%) 12533.899 ops/s [Average]
  (min, avg, max) = (361185.113, 444553.490, 470762.293), stdev = 18760.152
  CI (99.9%): [432019.590, 457087.389] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
SingleConcatEagerTest._Benchmark.benchmark_publisherDelayError  thrpt   30  444553.490 ± 12533.899  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concatArrayEagerTest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concatArrayEagerTest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 98969.425 ops/s
# Warmup Iteration   2: 323638.159 ops/s
# Warmup Iteration   3: 776345.308 ops/s
# Warmup Iteration   4: 988481.125 ops/s
# Warmup Iteration   5: 1009397.255 ops/s
# Warmup Iteration   6: 1000743.511 ops/s
# Warmup Iteration   7: 910256.949 ops/s
# Warmup Iteration   8: 907366.878 ops/s
# Warmup Iteration   9: 1020684.165 ops/s
# Warmup Iteration  10: 974850.957 ops/s
# Warmup Iteration  11: 982679.768 ops/s
# Warmup Iteration  12: 944444.945 ops/s
# Warmup Iteration  13: 993404.253 ops/s
# Warmup Iteration  14: 1019872.667 ops/s
# Warmup Iteration  15: 975172.628 ops/s
# Warmup Iteration  16: 984885.359 ops/s
# Warmup Iteration  17: 1007295.367 ops/s
# Warmup Iteration  18: 964282.370 ops/s
# Warmup Iteration  19: 1014105.368 ops/s
# Warmup Iteration  20: 1040905.162 ops/s
# Warmup Iteration  21: 1003548.498 ops/s
# Warmup Iteration  22: 1010241.268 ops/s
# Warmup Iteration  23: 993704.547 ops/s
# Warmup Iteration  24: 992106.647 ops/s
# Warmup Iteration  25: 1032828.008 ops/s
# Warmup Iteration  26: 1000837.170 ops/s
# Warmup Iteration  27: 1015088.066 ops/s
# Warmup Iteration  28: 1035690.310 ops/s
# Warmup Iteration  29: 971363.597 ops/s
# Warmup Iteration  30: 1024221.297 ops/s
Iteration   1: 1001101.847 ops/s
Iteration   2: 1017775.288 ops/s
Iteration   3: 1066026.558 ops/s
Iteration   4: 987156.114 ops/s
Iteration   5: 966315.518 ops/s
Iteration   6: 1051562.858 ops/s
Iteration   7: 1030895.116 ops/s
Iteration   8: 996294.287 ops/s
Iteration   9: 1014525.659 ops/s
Iteration  10: 989777.956 ops/s
Iteration  11: 985745.366 ops/s
Iteration  12: 1035883.490 ops/s
Iteration  13: 975146.239 ops/s
Iteration  14: 995292.837 ops/s
Iteration  15: 1031684.010 ops/s
Iteration  16: 1018982.769 ops/s
Iteration  17: 983379.589 ops/s
Iteration  18: 1022091.454 ops/s
Iteration  19: 975780.698 ops/s
Iteration  20: 1019404.133 ops/s
Iteration  21: 1011754.559 ops/s
Iteration  22: 966736.808 ops/s
Iteration  23: 1010348.421 ops/s
Iteration  24: 986604.876 ops/s
Iteration  25: 995956.646 ops/s
Iteration  26: 1009341.541 ops/s
Iteration  27: 1036776.032 ops/s
Iteration  28: 935790.068 ops/s
Iteration  29: 1021389.927 ops/s
Iteration  30: 966258.879 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concatArrayEagerTest":
  1003525.985 ±(99.9%) 19008.417 ops/s [Average]
  (min, avg, max) = (935790.068, 1003525.985, 1066026.558), stdev = 28450.906
  CI (99.9%): [984517.568, 1022534.402] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SingleConcatTest._Benchmark.benchmark_concatArrayEagerTest  thrpt   30  1003525.985 ± 19008.417  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concatEagerPublisherTest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concatEagerPublisherTest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42421.962 ops/s
# Warmup Iteration   2: 320011.970 ops/s
# Warmup Iteration   3: 685181.952 ops/s
# Warmup Iteration   4: 848821.107 ops/s
# Warmup Iteration   5: 1020366.652 ops/s
# Warmup Iteration   6: 968281.226 ops/s
# Warmup Iteration   7: 987556.175 ops/s
# Warmup Iteration   8: 1012504.904 ops/s
# Warmup Iteration   9: 977072.633 ops/s
# Warmup Iteration  10: 1023287.935 ops/s
# Warmup Iteration  11: 1003711.473 ops/s
# Warmup Iteration  12: 1002909.957 ops/s
# Warmup Iteration  13: 965465.407 ops/s
# Warmup Iteration  14: 984978.847 ops/s
# Warmup Iteration  15: 1035584.571 ops/s
# Warmup Iteration  16: 1017271.127 ops/s
# Warmup Iteration  17: 942978.445 ops/s
# Warmup Iteration  18: 992978.662 ops/s
# Warmup Iteration  19: 1022051.651 ops/s
# Warmup Iteration  20: 997489.740 ops/s
# Warmup Iteration  21: 1005716.760 ops/s
# Warmup Iteration  22: 994398.900 ops/s
# Warmup Iteration  23: 1001559.267 ops/s
# Warmup Iteration  24: 998066.364 ops/s
# Warmup Iteration  25: 1006871.352 ops/s
# Warmup Iteration  26: 947863.448 ops/s
# Warmup Iteration  27: 1013901.098 ops/s
# Warmup Iteration  28: 961615.845 ops/s
# Warmup Iteration  29: 963442.802 ops/s
# Warmup Iteration  30: 1000295.972 ops/s
Iteration   1: 978082.331 ops/s
Iteration   2: 973233.842 ops/s
Iteration   3: 988801.725 ops/s
Iteration   4: 977303.754 ops/s
Iteration   5: 987495.858 ops/s
Iteration   6: 996095.786 ops/s
Iteration   7: 1022166.838 ops/s
Iteration   8: 981268.128 ops/s
Iteration   9: 1007322.625 ops/s
Iteration  10: 976672.246 ops/s
Iteration  11: 988995.681 ops/s
Iteration  12: 970151.763 ops/s
Iteration  13: 1012278.987 ops/s
Iteration  14: 979483.832 ops/s
Iteration  15: 962293.417 ops/s
Iteration  16: 1018127.727 ops/s
Iteration  17: 970003.588 ops/s
Iteration  18: 995924.236 ops/s
Iteration  19: 928215.995 ops/s
Iteration  20: 887631.337 ops/s
Iteration  21: 962166.853 ops/s
Iteration  22: 985477.777 ops/s
Iteration  23: 959168.216 ops/s
Iteration  24: 946436.439 ops/s
Iteration  25: 1011530.520 ops/s
Iteration  26: 976227.504 ops/s
Iteration  27: 991450.354 ops/s
Iteration  28: 1015042.491 ops/s
Iteration  29: 971056.909 ops/s
Iteration  30: 1007892.992 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concatEagerPublisherTest":
  980933.325 ±(99.9%) 18671.331 ops/s [Average]
  (min, avg, max) = (887631.337, 980933.325, 1022166.838), stdev = 27946.371
  CI (99.9%): [962261.994, 999604.656] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
SingleConcatTest._Benchmark.benchmark_concatEagerPublisherTest  thrpt   30  980933.325 ± 18671.331  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 231032.798 ops/s
# Warmup Iteration   2: 550979.590 ops/s
# Warmup Iteration   3: 700743.005 ops/s
# Warmup Iteration   4: 687523.674 ops/s
# Warmup Iteration   5: 705324.874 ops/s
# Warmup Iteration   6: 699613.906 ops/s
# Warmup Iteration   7: 672723.254 ops/s
# Warmup Iteration   8: 689453.375 ops/s
# Warmup Iteration   9: 668242.227 ops/s
# Warmup Iteration  10: 704097.412 ops/s
# Warmup Iteration  11: 684182.600 ops/s
# Warmup Iteration  12: 682033.316 ops/s
# Warmup Iteration  13: 697219.344 ops/s
# Warmup Iteration  14: 704557.820 ops/s
# Warmup Iteration  15: 665216.925 ops/s
# Warmup Iteration  16: 666184.349 ops/s
# Warmup Iteration  17: 695194.309 ops/s
# Warmup Iteration  18: 711271.413 ops/s
# Warmup Iteration  19: 722551.164 ops/s
# Warmup Iteration  20: 660059.641 ops/s
# Warmup Iteration  21: 760842.072 ops/s
# Warmup Iteration  22: 749093.056 ops/s
# Warmup Iteration  23: 726614.840 ops/s
# Warmup Iteration  24: 760423.514 ops/s
# Warmup Iteration  25: 761363.458 ops/s
# Warmup Iteration  26: 714790.604 ops/s
# Warmup Iteration  27: 756282.188 ops/s
# Warmup Iteration  28: 735055.455 ops/s
# Warmup Iteration  29: 744919.255 ops/s
# Warmup Iteration  30: 720424.757 ops/s
Iteration   1: 732567.931 ops/s
Iteration   2: 755252.087 ops/s
Iteration   3: 722793.521 ops/s
Iteration   4: 748032.462 ops/s
Iteration   5: 736275.677 ops/s
Iteration   6: 730843.484 ops/s
Iteration   7: 741552.400 ops/s
Iteration   8: 705789.401 ops/s
Iteration   9: 729916.912 ops/s
Iteration  10: 748304.877 ops/s
Iteration  11: 698396.243 ops/s
Iteration  12: 750089.444 ops/s
Iteration  13: 712091.804 ops/s
Iteration  14: 714134.883 ops/s
Iteration  15: 717545.070 ops/s
Iteration  16: 727241.921 ops/s
Iteration  17: 741781.092 ops/s
Iteration  18: 731539.414 ops/s
Iteration  19: 757017.546 ops/s
Iteration  20: 767576.316 ops/s
Iteration  21: 700840.518 ops/s
Iteration  22: 756270.428 ops/s
Iteration  23: 706542.537 ops/s
Iteration  24: 757564.914 ops/s
Iteration  25: 734643.414 ops/s
Iteration  26: 761463.895 ops/s
Iteration  27: 711096.571 ops/s
Iteration  28: 735675.663 ops/s
Iteration  29: 756378.001 ops/s
Iteration  30: 723666.962 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSingleTest._Benchmark.benchmark_error":
  733762.846 ±(99.9%) 13070.796 ops/s [Average]
  (min, avg, max) = (698396.243, 733762.846, 767576.316), stdev = 19563.754
  CI (99.9%): [720692.050, 746833.643] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
FlowableFromSingleTest._Benchmark.benchmark_error  thrpt   30  733762.846 ± 13070.796  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_errorLastOrErrorFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_errorLastOrErrorFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 133986.180 ops/s
# Warmup Iteration   2: 554268.204 ops/s
# Warmup Iteration   3: 604644.772 ops/s
# Warmup Iteration   4: 618126.892 ops/s
# Warmup Iteration   5: 623486.591 ops/s
# Warmup Iteration   6: 644823.956 ops/s
# Warmup Iteration   7: 678413.401 ops/s
# Warmup Iteration   8: 655928.479 ops/s
# Warmup Iteration   9: 658884.384 ops/s
# Warmup Iteration  10: 675760.011 ops/s
# Warmup Iteration  11: 629186.987 ops/s
# Warmup Iteration  12: 684251.290 ops/s
# Warmup Iteration  13: 672206.192 ops/s
# Warmup Iteration  14: 632211.605 ops/s
# Warmup Iteration  15: 657360.138 ops/s
# Warmup Iteration  16: 674988.716 ops/s
# Warmup Iteration  17: 679452.114 ops/s
# Warmup Iteration  18: 668575.278 ops/s
# Warmup Iteration  19: 718175.853 ops/s
# Warmup Iteration  20: 689849.113 ops/s
# Warmup Iteration  21: 702558.937 ops/s
# Warmup Iteration  22: 711451.860 ops/s
# Warmup Iteration  23: 697629.890 ops/s
# Warmup Iteration  24: 694059.300 ops/s
# Warmup Iteration  25: 696714.119 ops/s
# Warmup Iteration  26: 684908.435 ops/s
# Warmup Iteration  27: 715946.636 ops/s
# Warmup Iteration  28: 682877.377 ops/s
# Warmup Iteration  29: 691868.585 ops/s
# Warmup Iteration  30: 721271.466 ops/s
Iteration   1: 688408.849 ops/s
Iteration   2: 721656.445 ops/s
Iteration   3: 688466.751 ops/s
Iteration   4: 703009.170 ops/s
Iteration   5: 715295.617 ops/s
Iteration   6: 679673.646 ops/s
Iteration   7: 722388.936 ops/s
Iteration   8: 683152.206 ops/s
Iteration   9: 731416.211 ops/s
Iteration  10: 690069.811 ops/s
Iteration  11: 722338.942 ops/s
Iteration  12: 671208.183 ops/s
Iteration  13: 686392.529 ops/s
Iteration  14: 630319.284 ops/s
Iteration  15: 652331.151 ops/s
Iteration  16: 703869.637 ops/s
Iteration  17: 696735.323 ops/s
Iteration  18: 721164.703 ops/s
Iteration  19: 718797.262 ops/s
Iteration  20: 689522.478 ops/s
Iteration  21: 704790.107 ops/s
Iteration  22: 643099.856 ops/s
Iteration  23: 701015.160 ops/s
Iteration  24: 720576.178 ops/s
Iteration  25: 688767.073 ops/s
Iteration  26: 701810.969 ops/s
Iteration  27: 715050.065 ops/s
Iteration  28: 682467.330 ops/s
Iteration  29: 722587.104 ops/s
Iteration  30: 708956.396 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_errorLastOrErrorFlowable":
  696844.579 ±(99.9%) 16403.334 ops/s [Average]
  (min, avg, max) = (630319.284, 696844.579, 731416.211), stdev = 24551.740
  CI (99.9%): [680441.245, 713247.913] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableLastTest._Benchmark.benchmark_errorLastOrErrorFlowable  thrpt   30  696844.579 ± 16403.334  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48469.063 ops/s
# Warmup Iteration   2: 249790.426 ops/s
# Warmup Iteration   3: 357983.121 ops/s
# Warmup Iteration   4: 404192.053 ops/s
# Warmup Iteration   5: 397645.327 ops/s
# Warmup Iteration   6: 401148.880 ops/s
# Warmup Iteration   7: 434689.380 ops/s
# Warmup Iteration   8: 444489.488 ops/s
# Warmup Iteration   9: 411091.785 ops/s
# Warmup Iteration  10: 427261.556 ops/s
# Warmup Iteration  11: 413755.870 ops/s
# Warmup Iteration  12: 426918.126 ops/s
# Warmup Iteration  13: 418985.024 ops/s
# Warmup Iteration  14: 424828.328 ops/s
# Warmup Iteration  15: 441220.827 ops/s
# Warmup Iteration  16: 409136.719 ops/s
# Warmup Iteration  17: 457008.495 ops/s
# Warmup Iteration  18: 440580.920 ops/s
# Warmup Iteration  19: 438742.659 ops/s
# Warmup Iteration  20: 437276.818 ops/s
# Warmup Iteration  21: 454684.761 ops/s
# Warmup Iteration  22: 429603.804 ops/s
# Warmup Iteration  23: 418170.529 ops/s
# Warmup Iteration  24: 427969.908 ops/s
# Warmup Iteration  25: 430424.342 ops/s
# Warmup Iteration  26: 405913.289 ops/s
# Warmup Iteration  27: 418422.931 ops/s
# Warmup Iteration  28: 420144.575 ops/s
# Warmup Iteration  29: 413666.876 ops/s
# Warmup Iteration  30: 420274.538 ops/s
Iteration   1: 408692.845 ops/s
Iteration   2: 416661.531 ops/s
Iteration   3: 400598.089 ops/s
Iteration   4: 416751.379 ops/s
Iteration   5: 433018.488 ops/s
Iteration   6: 388068.380 ops/s
Iteration   7: 420537.088 ops/s
Iteration   8: 425438.483 ops/s
Iteration   9: 406819.365 ops/s
Iteration  10: 412530.766 ops/s
Iteration  11: 422248.434 ops/s
Iteration  12: 403597.175 ops/s
Iteration  13: 411650.550 ops/s
Iteration  14: 420297.379 ops/s
Iteration  15: 404068.800 ops/s
Iteration  16: 446707.238 ops/s
Iteration  17: 360602.457 ops/s
Iteration  18: 331427.744 ops/s
Iteration  19: 397869.552 ops/s
Iteration  20: 428921.058 ops/s
Iteration  21: 412880.561 ops/s
Iteration  22: 399595.435 ops/s
Iteration  23: 423005.198 ops/s
Iteration  24: 388376.339 ops/s
Iteration  25: 407780.206 ops/s
Iteration  26: 406227.188 ops/s
Iteration  27: 412472.271 ops/s
Iteration  28: 439164.138 ops/s
Iteration  29: 395382.868 ops/s
Iteration  30: 426682.101 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableDelayError":
  408935.770 ±(99.9%) 14911.163 ops/s [Average]
  (min, avg, max) = (331427.744, 408935.770, 446707.238), stdev = 22318.328
  CI (99.9%): [394024.607, 423846.933] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
SingleConcatEagerTest._Benchmark.benchmark_iterableDelayError  thrpt   30  408935.770 ± 14911.163  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableDelayErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableDelayErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27533.015 ops/s
# Warmup Iteration   2: 260330.513 ops/s
# Warmup Iteration   3: 418269.689 ops/s
# Warmup Iteration   4: 401941.264 ops/s
# Warmup Iteration   5: 436827.754 ops/s
# Warmup Iteration   6: 468359.975 ops/s
# Warmup Iteration   7: 430320.210 ops/s
# Warmup Iteration   8: 393221.064 ops/s
# Warmup Iteration   9: 430216.139 ops/s
# Warmup Iteration  10: 449304.131 ops/s
# Warmup Iteration  11: 459848.941 ops/s
# Warmup Iteration  12: 440264.848 ops/s
# Warmup Iteration  13: 451258.571 ops/s
# Warmup Iteration  14: 459283.530 ops/s
# Warmup Iteration  15: 429960.773 ops/s
# Warmup Iteration  16: 467648.447 ops/s
# Warmup Iteration  17: 461313.968 ops/s
# Warmup Iteration  18: 485303.118 ops/s
# Warmup Iteration  19: 447105.926 ops/s
# Warmup Iteration  20: 470997.383 ops/s
# Warmup Iteration  21: 458898.897 ops/s
# Warmup Iteration  22: 461549.617 ops/s
# Warmup Iteration  23: 459409.057 ops/s
# Warmup Iteration  24: 492360.255 ops/s
# Warmup Iteration  25: 441447.012 ops/s
# Warmup Iteration  26: 478040.003 ops/s
# Warmup Iteration  27: 484512.844 ops/s
# Warmup Iteration  28: 462819.986 ops/s
# Warmup Iteration  29: 464786.978 ops/s
# Warmup Iteration  30: 477259.824 ops/s
Iteration   1: 463035.608 ops/s
Iteration   2: 471820.605 ops/s
Iteration   3: 470238.092 ops/s
Iteration   4: 464731.900 ops/s
Iteration   5: 451398.947 ops/s
Iteration   6: 470898.928 ops/s
Iteration   7: 468764.480 ops/s
Iteration   8: 464881.849 ops/s
Iteration   9: 485252.502 ops/s
Iteration  10: 452818.441 ops/s
Iteration  11: 479181.765 ops/s
Iteration  12: 476879.687 ops/s
Iteration  13: 468998.640 ops/s
Iteration  14: 486124.171 ops/s
Iteration  15: 461354.508 ops/s
Iteration  16: 452367.574 ops/s
Iteration  17: 467036.820 ops/s
Iteration  18: 456704.518 ops/s
Iteration  19: 407569.735 ops/s
Iteration  20: 471983.771 ops/s
Iteration  21: 493436.657 ops/s
Iteration  22: 465337.957 ops/s
Iteration  23: 463873.234 ops/s
Iteration  24: 477943.432 ops/s
Iteration  25: 449118.051 ops/s
Iteration  26: 482132.595 ops/s
Iteration  27: 449584.606 ops/s
Iteration  28: 468549.279 ops/s
Iteration  29: 481159.426 ops/s
Iteration  30: 452455.535 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableDelayErrorMaxConcurrency":
  465854.444 ±(99.9%) 10699.784 ops/s [Average]
  (min, avg, max) = (407569.735, 465854.444, 493436.657), stdev = 16014.934
  CI (99.9%): [455154.660, 476554.228] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
SingleConcatEagerTest._Benchmark.benchmark_iterableDelayErrorMaxConcurrency  thrpt   30  465854.444 ± 10699.784  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32269.735 ops/s
# Warmup Iteration   2: 173861.971 ops/s
# Warmup Iteration   3: 418973.575 ops/s
# Warmup Iteration   4: 393427.750 ops/s
# Warmup Iteration   5: 372665.645 ops/s
# Warmup Iteration   6: 442889.472 ops/s
# Warmup Iteration   7: 437505.659 ops/s
# Warmup Iteration   8: 460437.441 ops/s
# Warmup Iteration   9: 443644.442 ops/s
# Warmup Iteration  10: 455916.330 ops/s
# Warmup Iteration  11: 447975.582 ops/s
# Warmup Iteration  12: 424143.407 ops/s
# Warmup Iteration  13: 462858.463 ops/s
# Warmup Iteration  14: 456266.003 ops/s
# Warmup Iteration  15: 426112.839 ops/s
# Warmup Iteration  16: 454407.958 ops/s
# Warmup Iteration  17: 442341.737 ops/s
# Warmup Iteration  18: 457945.968 ops/s
# Warmup Iteration  19: 482427.423 ops/s
# Warmup Iteration  20: 433814.017 ops/s
# Warmup Iteration  21: 455542.984 ops/s
# Warmup Iteration  22: 460555.085 ops/s
# Warmup Iteration  23: 454132.273 ops/s
# Warmup Iteration  24: 465299.444 ops/s
# Warmup Iteration  25: 475142.421 ops/s
# Warmup Iteration  26: 463784.659 ops/s
# Warmup Iteration  27: 446519.482 ops/s
# Warmup Iteration  28: 475397.012 ops/s
# Warmup Iteration  29: 449259.831 ops/s
# Warmup Iteration  30: 465393.188 ops/s
Iteration   1: 474265.993 ops/s
Iteration   2: 443342.261 ops/s
Iteration   3: 460658.207 ops/s
Iteration   4: 450531.408 ops/s
Iteration   5: 465304.997 ops/s
Iteration   6: 453090.855 ops/s
Iteration   7: 451610.006 ops/s
Iteration   8: 458488.763 ops/s
Iteration   9: 489562.408 ops/s
Iteration  10: 455766.916 ops/s
Iteration  11: 458017.229 ops/s
Iteration  12: 476401.871 ops/s
Iteration  13: 444932.452 ops/s
Iteration  14: 455304.055 ops/s
Iteration  15: 465325.909 ops/s
Iteration  16: 472042.995 ops/s
Iteration  17: 459876.090 ops/s
Iteration  18: 449079.988 ops/s
Iteration  19: 449886.599 ops/s
Iteration  20: 489842.947 ops/s
Iteration  21: 360199.486 ops/s
Iteration  22: 486460.665 ops/s
Iteration  23: 419423.750 ops/s
Iteration  24: 473762.694 ops/s
Iteration  25: 476720.941 ops/s
Iteration  26: 437007.818 ops/s
Iteration  27: 482005.297 ops/s
Iteration  28: 438473.887 ops/s
Iteration  29: 454416.605 ops/s
Iteration  30: 458552.551 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableError":
  457011.855 ±(99.9%) 16382.496 ops/s [Average]
  (min, avg, max) = (360199.486, 457011.855, 489842.947), stdev = 24520.551
  CI (99.9%): [440629.359, 473394.351] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
SingleConcatEagerTest._Benchmark.benchmark_iterableError  thrpt   30  457011.855 ± 16382.496  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48750.975 ops/s
# Warmup Iteration   2: 146603.722 ops/s
# Warmup Iteration   3: 456592.219 ops/s
# Warmup Iteration   4: 501552.235 ops/s
# Warmup Iteration   5: 469969.154 ops/s
# Warmup Iteration   6: 473507.505 ops/s
# Warmup Iteration   7: 506488.616 ops/s
# Warmup Iteration   8: 499600.711 ops/s
# Warmup Iteration   9: 477654.365 ops/s
# Warmup Iteration  10: 477779.462 ops/s
# Warmup Iteration  11: 484307.914 ops/s
# Warmup Iteration  12: 471337.529 ops/s
# Warmup Iteration  13: 490782.446 ops/s
# Warmup Iteration  14: 469664.347 ops/s
# Warmup Iteration  15: 480086.046 ops/s
# Warmup Iteration  16: 484007.228 ops/s
# Warmup Iteration  17: 544757.775 ops/s
# Warmup Iteration  18: 474727.654 ops/s
# Warmup Iteration  19: 520191.130 ops/s
# Warmup Iteration  20: 514647.413 ops/s
# Warmup Iteration  21: 517034.036 ops/s
# Warmup Iteration  22: 503476.831 ops/s
# Warmup Iteration  23: 536909.659 ops/s
# Warmup Iteration  24: 479526.789 ops/s
# Warmup Iteration  25: 500657.711 ops/s
# Warmup Iteration  26: 522482.465 ops/s
# Warmup Iteration  27: 542894.697 ops/s
# Warmup Iteration  28: 515152.569 ops/s
# Warmup Iteration  29: 518447.074 ops/s
# Warmup Iteration  30: 548331.919 ops/s
Iteration   1: 503765.326 ops/s
Iteration   2: 549023.411 ops/s
Iteration   3: 504438.649 ops/s
Iteration   4: 545101.559 ops/s
Iteration   5: 524605.232 ops/s
Iteration   6: 505054.970 ops/s
Iteration   7: 514960.361 ops/s
Iteration   8: 528242.873 ops/s
Iteration   9: 536053.931 ops/s
Iteration  10: 519919.688 ops/s
Iteration  11: 518018.225 ops/s
Iteration  12: 530720.216 ops/s
Iteration  13: 523654.698 ops/s
Iteration  14: 504027.960 ops/s
Iteration  15: 500648.084 ops/s
Iteration  16: 538103.498 ops/s
Iteration  17: 510832.268 ops/s
Iteration  18: 525513.148 ops/s
Iteration  19: 439347.742 ops/s
Iteration  20: 519419.725 ops/s
Iteration  21: 502524.221 ops/s
Iteration  22: 520481.409 ops/s
Iteration  23: 548506.398 ops/s
Iteration  24: 515180.529 ops/s
Iteration  25: 541929.688 ops/s
Iteration  26: 485446.366 ops/s
Iteration  27: 513519.268 ops/s
Iteration  28: 496417.114 ops/s
Iteration  29: 507149.493 ops/s
Iteration  30: 534975.043 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatEagerTest._Benchmark.benchmark_iterableErrorMaxConcurrency":
  516919.370 ±(99.9%) 14575.495 ops/s [Average]
  (min, avg, max) = (439347.742, 516919.370, 549023.411), stdev = 21815.916
  CI (99.9%): [502343.875, 531494.865] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
SingleConcatEagerTest._Benchmark.benchmark_iterableErrorMaxConcurrency  thrpt   30  516919.370 ± 14575.495  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainErrorSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainErrorSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75933.620 ops/s
# Warmup Iteration   2: 474377.500 ops/s
# Warmup Iteration   3: 495975.099 ops/s
# Warmup Iteration   4: 521971.984 ops/s
# Warmup Iteration   5: 546418.425 ops/s
# Warmup Iteration   6: 562772.619 ops/s
# Warmup Iteration   7: 544878.000 ops/s
# Warmup Iteration   8: 571353.951 ops/s
# Warmup Iteration   9: 541601.977 ops/s
# Warmup Iteration  10: 567459.602 ops/s
# Warmup Iteration  11: 545938.492 ops/s
# Warmup Iteration  12: 556960.066 ops/s
# Warmup Iteration  13: 572538.527 ops/s
# Warmup Iteration  14: 535078.749 ops/s
# Warmup Iteration  15: 551393.262 ops/s
# Warmup Iteration  16: 527554.988 ops/s
# Warmup Iteration  17: 581977.436 ops/s
# Warmup Iteration  18: 606440.420 ops/s
# Warmup Iteration  19: 548449.176 ops/s
# Warmup Iteration  20: 610594.077 ops/s
# Warmup Iteration  21: 587066.047 ops/s
# Warmup Iteration  22: 579182.664 ops/s
# Warmup Iteration  23: 595106.823 ops/s
# Warmup Iteration  24: 558518.651 ops/s
# Warmup Iteration  25: 583538.639 ops/s
# Warmup Iteration  26: 586911.425 ops/s
# Warmup Iteration  27: 558962.187 ops/s
# Warmup Iteration  28: 602762.040 ops/s
# Warmup Iteration  29: 604321.498 ops/s
# Warmup Iteration  30: 565534.937 ops/s
Iteration   1: 583069.373 ops/s
Iteration   2: 600474.486 ops/s
Iteration   3: 568336.927 ops/s
Iteration   4: 590995.406 ops/s
Iteration   5: 570622.836 ops/s
Iteration   6: 582764.830 ops/s
Iteration   7: 581957.383 ops/s
Iteration   8: 564007.079 ops/s
Iteration   9: 604810.305 ops/s
Iteration  10: 522338.624 ops/s
Iteration  11: 614266.790 ops/s
Iteration  12: 566941.688 ops/s
Iteration  13: 589249.559 ops/s
Iteration  14: 598833.939 ops/s
Iteration  15: 612562.141 ops/s
Iteration  16: 561595.367 ops/s
Iteration  17: 617413.399 ops/s
Iteration  18: 581142.874 ops/s
Iteration  19: 582507.454 ops/s
Iteration  20: 634756.934 ops/s
Iteration  21: 609312.109 ops/s
Iteration  22: 630736.737 ops/s
Iteration  23: 619210.057 ops/s
Iteration  24: 619664.749 ops/s
Iteration  25: 612070.626 ops/s
Iteration  26: 634111.865 ops/s
Iteration  27: 607938.020 ops/s
Iteration  28: 641640.543 ops/s
Iteration  29: 624707.617 ops/s
Iteration  30: 608533.804 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainErrorSingle":
  597885.784 ±(99.9%) 17922.017 ops/s [Average]
  (min, avg, max) = (522338.624, 597885.784, 641640.543), stdev = 26824.834
  CI (99.9%): [579963.767, 615807.801] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_mainErrorSingle  thrpt   30  597885.784 ± 17922.017  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_drainExactRequestCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_drainExactRequestCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 181827.706 ops/s
# Warmup Iteration   2: 756557.095 ops/s
# Warmup Iteration   3: 1576169.782 ops/s
# Warmup Iteration   4: 1672465.573 ops/s
# Warmup Iteration   5: 1761465.994 ops/s
# Warmup Iteration   6: 1660559.625 ops/s
# Warmup Iteration   7: 1743565.940 ops/s
# Warmup Iteration   8: 1777745.827 ops/s
# Warmup Iteration   9: 1652957.207 ops/s
# Warmup Iteration  10: 1738585.003 ops/s
# Warmup Iteration  11: 1760825.005 ops/s
# Warmup Iteration  12: 1756208.388 ops/s
# Warmup Iteration  13: 1580144.421 ops/s
# Warmup Iteration  14: 1734860.681 ops/s
# Warmup Iteration  15: 1748395.992 ops/s
# Warmup Iteration  16: 1650696.623 ops/s
# Warmup Iteration  17: 1753626.849 ops/s
# Warmup Iteration  18: 1791094.194 ops/s
# Warmup Iteration  19: 1663459.464 ops/s
# Warmup Iteration  20: 1773072.481 ops/s
# Warmup Iteration  21: 1783166.197 ops/s
# Warmup Iteration  22: 1727950.456 ops/s
# Warmup Iteration  23: 1714351.756 ops/s
# Warmup Iteration  24: 1687904.307 ops/s
# Warmup Iteration  25: 1767307.649 ops/s
# Warmup Iteration  26: 1738969.735 ops/s
# Warmup Iteration  27: 1446599.785 ops/s
# Warmup Iteration  28: 1687214.668 ops/s
# Warmup Iteration  29: 1743479.095 ops/s
# Warmup Iteration  30: 1797197.231 ops/s
Iteration   1: 1679188.671 ops/s
Iteration   2: 1660311.015 ops/s
Iteration   3: 1743225.067 ops/s
Iteration   4: 1702085.912 ops/s
Iteration   5: 1742282.116 ops/s
Iteration   6: 1674982.983 ops/s
Iteration   7: 1774891.765 ops/s
Iteration   8: 1738764.364 ops/s
Iteration   9: 1691710.216 ops/s
Iteration  10: 1633581.222 ops/s
Iteration  11: 1735032.780 ops/s
Iteration  12: 1762542.838 ops/s
Iteration  13: 1729943.776 ops/s
Iteration  14: 1682622.027 ops/s
Iteration  15: 1789655.848 ops/s
Iteration  16: 1711451.455 ops/s
Iteration  17: 1712561.793 ops/s
Iteration  18: 1783065.187 ops/s
Iteration  19: 1747010.903 ops/s
Iteration  20: 1736213.381 ops/s
Iteration  21: 1755349.222 ops/s
Iteration  22: 1775631.341 ops/s
Iteration  23: 1765735.993 ops/s
Iteration  24: 1681339.820 ops/s
Iteration  25: 1774398.459 ops/s
Iteration  26: 1690073.202 ops/s
Iteration  27: 1754356.790 ops/s
Iteration  28: 1731637.191 ops/s
Iteration  29: 1722490.908 ops/s
Iteration  30: 1717626.056 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_drainExactRequestCancel":
  1726658.743 ±(99.9%) 26467.088 ops/s [Average]
  (min, avg, max) = (1633581.222, 1726658.743, 1789655.848), stdev = 39614.694
  CI (99.9%): [1700191.656, 1753125.831] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_drainExactRequestCancel  thrpt   30  1726658.743 ± 26467.088  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_sourceOverflowsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_sourceOverflowsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 63210.154 ops/s
# Warmup Iteration   2: 361037.108 ops/s
# Warmup Iteration   3: 390299.677 ops/s
# Warmup Iteration   4: 363849.784 ops/s
# Warmup Iteration   5: 460901.299 ops/s
# Warmup Iteration   6: 409531.745 ops/s
# Warmup Iteration   7: 415984.929 ops/s
# Warmup Iteration   8: 468311.574 ops/s
# Warmup Iteration   9: 437614.660 ops/s
# Warmup Iteration  10: 451940.008 ops/s
# Warmup Iteration  11: 446636.643 ops/s
# Warmup Iteration  12: 447658.493 ops/s
# Warmup Iteration  13: 461159.173 ops/s
# Warmup Iteration  14: 434231.814 ops/s
# Warmup Iteration  15: 439539.914 ops/s
# Warmup Iteration  16: 458120.520 ops/s
# Warmup Iteration  17: 451874.749 ops/s
# Warmup Iteration  18: 478089.997 ops/s
# Warmup Iteration  19: 459309.103 ops/s
# Warmup Iteration  20: 468067.384 ops/s
# Warmup Iteration  21: 439175.036 ops/s
# Warmup Iteration  22: 474870.431 ops/s
# Warmup Iteration  23: 456730.806 ops/s
# Warmup Iteration  24: 461800.686 ops/s
# Warmup Iteration  25: 470186.690 ops/s
# Warmup Iteration  26: 449335.851 ops/s
# Warmup Iteration  27: 470115.705 ops/s
# Warmup Iteration  28: 454583.347 ops/s
# Warmup Iteration  29: 459683.362 ops/s
# Warmup Iteration  30: 461266.855 ops/s
Iteration   1: 466814.584 ops/s
Iteration   2: 452698.543 ops/s
Iteration   3: 476649.311 ops/s
Iteration   4: 460867.604 ops/s
Iteration   5: 452821.704 ops/s
Iteration   6: 476250.012 ops/s
Iteration   7: 445290.828 ops/s
Iteration   8: 473783.934 ops/s
Iteration   9: 463927.617 ops/s
Iteration  10: 454088.238 ops/s
Iteration  11: 465353.986 ops/s
Iteration  12: 457191.565 ops/s
Iteration  13: 473512.008 ops/s
Iteration  14: 460274.567 ops/s
Iteration  15: 477214.891 ops/s
Iteration  16: 477930.802 ops/s
Iteration  17: 453023.107 ops/s
Iteration  18: 472381.234 ops/s
Iteration  19: 474963.614 ops/s
Iteration  20: 461382.692 ops/s
Iteration  21: 466684.889 ops/s
Iteration  22: 467130.355 ops/s
Iteration  23: 459946.687 ops/s
Iteration  24: 457541.472 ops/s
Iteration  25: 457549.931 ops/s
Iteration  26: 482533.395 ops/s
Iteration  27: 468338.660 ops/s
Iteration  28: 442017.274 ops/s
Iteration  29: 462865.684 ops/s
Iteration  30: 486525.655 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_sourceOverflowsFlowable":
  464918.495 ±(99.9%) 7243.985 ops/s [Average]
  (min, avg, max) = (442017.274, 464918.495, 486525.655), stdev = 10842.456
  CI (99.9%): [457674.510, 472162.479] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_sourceOverflowsFlowable  thrpt   30  464918.495 ± 7243.985  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 17557.432 ops/s
# Warmup Iteration   2: 29542.881 ops/s
# Warmup Iteration   3: 103159.351 ops/s
# Warmup Iteration   4: 110860.569 ops/s
# Warmup Iteration   5: 106201.982 ops/s
# Warmup Iteration   6: 111394.817 ops/s
# Warmup Iteration   7: 111679.972 ops/s
# Warmup Iteration   8: 107761.998 ops/s
# Warmup Iteration   9: 110436.593 ops/s
# Warmup Iteration  10: 113835.961 ops/s
# Warmup Iteration  11: 106456.014 ops/s
# Warmup Iteration  12: 109824.024 ops/s
# Warmup Iteration  13: 108996.069 ops/s
# Warmup Iteration  14: 113738.379 ops/s
# Warmup Iteration  15: 111906.742 ops/s
# Warmup Iteration  16: 111753.167 ops/s
# Warmup Iteration  17: 115634.406 ops/s
# Warmup Iteration  18: 115158.366 ops/s
# Warmup Iteration  19: 115318.358 ops/s
# Warmup Iteration  20: 116099.459 ops/s
# Warmup Iteration  21: 92682.635 ops/s
# Warmup Iteration  22: 114551.144 ops/s
# Warmup Iteration  23: 113750.965 ops/s
# Warmup Iteration  24: 115960.363 ops/s
# Warmup Iteration  25: 107526.121 ops/s
# Warmup Iteration  26: 112925.360 ops/s
# Warmup Iteration  27: 119427.684 ops/s
# Warmup Iteration  28: 105457.412 ops/s
# Warmup Iteration  29: 119055.438 ops/s
# Warmup Iteration  30: 113575.566 ops/s
Iteration   1: 116545.095 ops/s
Iteration   2: 111802.705 ops/s
Iteration   3: 119739.253 ops/s
Iteration   4: 113720.922 ops/s
Iteration   5: 116687.264 ops/s
Iteration   6: 113468.792 ops/s
Iteration   7: 116212.538 ops/s
Iteration   8: 116412.942 ops/s
Iteration   9: 113504.713 ops/s
Iteration  10: 118283.809 ops/s
Iteration  11: 112914.474 ops/s
Iteration  12: 119937.090 ops/s
Iteration  13: 111907.079 ops/s
Iteration  14: 118514.047 ops/s
Iteration  15: 116862.382 ops/s
Iteration  16: 110813.204 ops/s
Iteration  17: 117087.100 ops/s
Iteration  18: 113113.743 ops/s
Iteration  19: 114039.016 ops/s
Iteration  20: 117723.824 ops/s
Iteration  21: 112292.301 ops/s
Iteration  22: 116565.058 ops/s
Iteration  23: 111608.143 ops/s
Iteration  24: 115332.358 ops/s
Iteration  25: 119503.020 ops/s
Iteration  26: 114773.286 ops/s
Iteration  27: 116228.460 ops/s
Iteration  28: 113489.085 ops/s
Iteration  29: 116189.935 ops/s
Iteration  30: 117705.888 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_badSource":
  115432.584 ±(99.9%) 1732.115 ops/s [Average]
  (min, avg, max) = (110813.204, 115432.584, 119937.090), stdev = 2592.549
  CI (99.9%): [113700.469, 117164.700] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
FlowableAllTest._Benchmark.benchmark_badSource  thrpt   30  115432.584 ± 1732.115  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedAllConditiona$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedAllConditiona

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 165642.892 ops/s
# Warmup Iteration   2: 719953.484 ops/s
# Warmup Iteration   3: 1340494.890 ops/s
# Warmup Iteration   4: 1362310.239 ops/s
# Warmup Iteration   5: 1428757.549 ops/s
# Warmup Iteration   6: 1356144.788 ops/s
# Warmup Iteration   7: 1362533.654 ops/s
# Warmup Iteration   8: 1280635.241 ops/s
# Warmup Iteration   9: 1319823.921 ops/s
# Warmup Iteration  10: 1430431.711 ops/s
# Warmup Iteration  11: 1426548.966 ops/s
# Warmup Iteration  12: 1384923.831 ops/s
# Warmup Iteration  13: 1435303.506 ops/s
# Warmup Iteration  14: 1379635.542 ops/s
# Warmup Iteration  15: 1430322.402 ops/s
# Warmup Iteration  16: 1421646.311 ops/s
# Warmup Iteration  17: 1488608.017 ops/s
# Warmup Iteration  18: 1377553.642 ops/s
# Warmup Iteration  19: 1416746.879 ops/s
# Warmup Iteration  20: 1429402.638 ops/s
# Warmup Iteration  21: 1380734.643 ops/s
# Warmup Iteration  22: 1471188.299 ops/s
# Warmup Iteration  23: 1428414.582 ops/s
# Warmup Iteration  24: 1383592.023 ops/s
# Warmup Iteration  25: 1419748.936 ops/s
# Warmup Iteration  26: 1381751.883 ops/s
# Warmup Iteration  27: 1386060.912 ops/s
# Warmup Iteration  28: 1476313.180 ops/s
# Warmup Iteration  29: 1408322.816 ops/s
# Warmup Iteration  30: 1452148.518 ops/s
Iteration   1: 1401770.940 ops/s
Iteration   2: 1446030.310 ops/s
Iteration   3: 1366560.119 ops/s
Iteration   4: 1451398.004 ops/s
Iteration   5: 1453589.162 ops/s
Iteration   6: 1404208.545 ops/s
Iteration   7: 1425440.834 ops/s
Iteration   8: 1423366.422 ops/s
Iteration   9: 1430985.020 ops/s
Iteration  10: 1381626.559 ops/s
Iteration  11: 1425445.411 ops/s
Iteration  12: 1409276.502 ops/s
Iteration  13: 1423751.225 ops/s
Iteration  14: 1425050.300 ops/s
Iteration  15: 1431101.201 ops/s
Iteration  16: 1386353.148 ops/s
Iteration  17: 1430273.765 ops/s
Iteration  18: 1418389.006 ops/s
Iteration  19: 1375513.342 ops/s
Iteration  20: 1485190.203 ops/s
Iteration  21: 1428596.859 ops/s
Iteration  22: 1447666.800 ops/s
Iteration  23: 1377871.435 ops/s
Iteration  24: 1421338.499 ops/s
Iteration  25: 1445941.883 ops/s
Iteration  26: 1357656.337 ops/s
Iteration  27: 1399543.848 ops/s
Iteration  28: 1444850.057 ops/s
Iteration  29: 1384791.180 ops/s
Iteration  30: 1359382.035 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedAllConditiona":
  1415431.965 ±(99.9%) 20811.827 ops/s [Average]
  (min, avg, max) = (1357656.337, 1415431.965, 1485190.203), stdev = 31150.165
  CI (99.9%): [1394620.138, 1436243.792] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedAllConditiona  thrpt   30  1415431.965 ± 20811.827  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5967518.682 ops/s
# Warmup Iteration   2: 10230558.817 ops/s
# Warmup Iteration   3: 11761684.688 ops/s
# Warmup Iteration   4: 12835289.808 ops/s
# Warmup Iteration   5: 13167203.572 ops/s
# Warmup Iteration   6: 13116462.927 ops/s
# Warmup Iteration   7: 13616886.558 ops/s
# Warmup Iteration   8: 13128396.148 ops/s
# Warmup Iteration   9: 13290476.887 ops/s
# Warmup Iteration  10: 13085567.942 ops/s
# Warmup Iteration  11: 12878272.202 ops/s
# Warmup Iteration  12: 13402702.526 ops/s
# Warmup Iteration  13: 13190823.203 ops/s
# Warmup Iteration  14: 13579391.062 ops/s
# Warmup Iteration  15: 12942844.333 ops/s
# Warmup Iteration  16: 10784267.348 ops/s
# Warmup Iteration  17: 13161174.466 ops/s
# Warmup Iteration  18: 13576707.047 ops/s
# Warmup Iteration  19: 13251383.013 ops/s
# Warmup Iteration  20: 13067931.684 ops/s
# Warmup Iteration  21: 13336117.567 ops/s
# Warmup Iteration  22: 13163634.885 ops/s
# Warmup Iteration  23: 13263807.733 ops/s
# Warmup Iteration  24: 12752065.589 ops/s
# Warmup Iteration  25: 13074231.948 ops/s
# Warmup Iteration  26: 13938477.356 ops/s
# Warmup Iteration  27: 13498021.642 ops/s
# Warmup Iteration  28: 12959996.755 ops/s
# Warmup Iteration  29: 13321424.334 ops/s
# Warmup Iteration  30: 13051495.609 ops/s
Iteration   1: 13278952.759 ops/s
Iteration   2: 13829830.029 ops/s
Iteration   3: 12868886.495 ops/s
Iteration   4: 13172264.410 ops/s
Iteration   5: 12781043.800 ops/s
Iteration   6: 12893409.716 ops/s
Iteration   7: 13778117.913 ops/s
Iteration   8: 12898478.575 ops/s
Iteration   9: 13679273.998 ops/s
Iteration  10: 13142342.027 ops/s
Iteration  11: 13676163.964 ops/s
Iteration  12: 13240006.366 ops/s
Iteration  13: 13002297.918 ops/s
Iteration  14: 13362192.079 ops/s
Iteration  15: 13236097.978 ops/s
Iteration  16: 12708229.988 ops/s
Iteration  17: 13719017.992 ops/s
Iteration  18: 12633355.118 ops/s
Iteration  19: 13485285.778 ops/s
Iteration  20: 13157856.357 ops/s
Iteration  21: 13627642.418 ops/s
Iteration  22: 13495876.957 ops/s
Iteration  23: 12910498.588 ops/s
Iteration  24: 13747184.408 ops/s
Iteration  25: 13100124.359 ops/s
Iteration  26: 13542233.694 ops/s
Iteration  27: 13108087.476 ops/s
Iteration  28: 13572117.932 ops/s
Iteration  29: 13082170.653 ops/s
Iteration  30: 12834131.508 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_empty":
  13252105.708 ±(99.9%) 236879.295 ops/s [Average]
  (min, avg, max) = (12633355.118, 13252105.708, 13829830.029), stdev = 354549.803
  CI (99.9%): [13015226.414, 13488985.003] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
MaybeToCompletionStageTest._Benchmark.benchmark_empty  thrpt   30  13252105.708 ± 236879.295  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_emptyError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_emptyError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 194055.936 ops/s
# Warmup Iteration   2: 309840.801 ops/s
# Warmup Iteration   3: 331103.658 ops/s
# Warmup Iteration   4: 349600.273 ops/s
# Warmup Iteration   5: 338964.996 ops/s
# Warmup Iteration   6: 315606.143 ops/s
# Warmup Iteration   7: 342690.655 ops/s
# Warmup Iteration   8: 320506.150 ops/s
# Warmup Iteration   9: 346899.386 ops/s
# Warmup Iteration  10: 336766.874 ops/s
# Warmup Iteration  11: 341262.628 ops/s
# Warmup Iteration  12: 352485.789 ops/s
# Warmup Iteration  13: 341577.748 ops/s
# Warmup Iteration  14: 340276.541 ops/s
# Warmup Iteration  15: 338437.232 ops/s
# Warmup Iteration  16: 349039.210 ops/s
# Warmup Iteration  17: 358348.353 ops/s
# Warmup Iteration  18: 354567.480 ops/s
# Warmup Iteration  19: 366903.833 ops/s
# Warmup Iteration  20: 349253.189 ops/s
# Warmup Iteration  21: 377149.733 ops/s
# Warmup Iteration  22: 366092.530 ops/s
# Warmup Iteration  23: 352283.008 ops/s
# Warmup Iteration  24: 360872.835 ops/s
# Warmup Iteration  25: 369027.295 ops/s
# Warmup Iteration  26: 358277.464 ops/s
# Warmup Iteration  27: 354622.397 ops/s
# Warmup Iteration  28: 369879.331 ops/s
# Warmup Iteration  29: 364117.826 ops/s
# Warmup Iteration  30: 357423.194 ops/s
Iteration   1: 375068.087 ops/s
Iteration   2: 361779.441 ops/s
Iteration   3: 361506.533 ops/s
Iteration   4: 363979.058 ops/s
Iteration   5: 358927.623 ops/s
Iteration   6: 369203.436 ops/s
Iteration   7: 352918.009 ops/s
Iteration   8: 355836.179 ops/s
Iteration   9: 373954.478 ops/s
Iteration  10: 350195.439 ops/s
Iteration  11: 365022.083 ops/s
Iteration  12: 360975.535 ops/s
Iteration  13: 362006.872 ops/s
Iteration  14: 353442.403 ops/s
Iteration  15: 355142.490 ops/s
Iteration  16: 374001.670 ops/s
Iteration  17: 353309.146 ops/s
Iteration  18: 378268.819 ops/s
Iteration  19: 359604.772 ops/s
Iteration  20: 356170.157 ops/s
Iteration  21: 362513.240 ops/s
Iteration  22: 354281.413 ops/s
Iteration  23: 372851.684 ops/s
Iteration  24: 370795.189 ops/s
Iteration  25: 354490.352 ops/s
Iteration  26: 359857.277 ops/s
Iteration  27: 365102.421 ops/s
Iteration  28: 358141.011 ops/s
Iteration  29: 357450.124 ops/s
Iteration  30: 358444.483 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_emptyError":
  361841.314 ±(99.9%) 5064.698 ops/s [Average]
  (min, avg, max) = (350195.439, 361841.314, 378268.819), stdev = 7580.602
  CI (99.9%): [356776.616, 366906.012] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MaybeToCompletionStageTest._Benchmark.benchmark_emptyError  thrpt   30  361841.314 ± 5064.698  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapHiddenIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapHiddenIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.891 ops/s
# Warmup Iteration   2: 14895.264 ops/s
# Warmup Iteration   3: 80948.160 ops/s
# Warmup Iteration   4: 70046.627 ops/s
# Warmup Iteration   5: 161670.733 ops/s
# Warmup Iteration   6: 190229.351 ops/s
# Warmup Iteration   7: 362146.744 ops/s
# Warmup Iteration   8: 505707.816 ops/s
# Warmup Iteration   9: 499335.163 ops/s
# Warmup Iteration  10: 515212.074 ops/s
# Warmup Iteration  11: 405106.712 ops/s
# Warmup Iteration  12: 491271.980 ops/s
# Warmup Iteration  13: 505938.350 ops/s
# Warmup Iteration  14: 496314.742 ops/s
# Warmup Iteration  15: 505239.760 ops/s
# Warmup Iteration  16: 492428.248 ops/s
# Warmup Iteration  17: 503100.843 ops/s
# Warmup Iteration  18: 482431.213 ops/s
# Warmup Iteration  19: 498759.049 ops/s
# Warmup Iteration  20: 490100.715 ops/s
# Warmup Iteration  21: 503476.196 ops/s
# Warmup Iteration  22: 503054.244 ops/s
# Warmup Iteration  23: 490164.636 ops/s
# Warmup Iteration  24: 497513.339 ops/s
# Warmup Iteration  25: 500011.038 ops/s
# Warmup Iteration  26: 483970.099 ops/s
# Warmup Iteration  27: 518883.593 ops/s
# Warmup Iteration  28: 514922.769 ops/s
# Warmup Iteration  29: 494823.798 ops/s
# Warmup Iteration  30: 496548.104 ops/s
Iteration   1: 480886.060 ops/s
Iteration   2: 504261.810 ops/s
Iteration   3: 514032.446 ops/s
Iteration   4: 490432.692 ops/s
Iteration   5: 511669.684 ops/s
Iteration   6: 492353.559 ops/s
Iteration   7: 495505.280 ops/s
Iteration   8: 513425.693 ops/s
Iteration   9: 505512.559 ops/s
Iteration  10: 521877.249 ops/s
Iteration  11: 489436.402 ops/s
Iteration  12: 509835.767 ops/s
Iteration  13: 491003.179 ops/s
Iteration  14: 506704.524 ops/s
Iteration  15: 495560.487 ops/s
Iteration  16: 485321.838 ops/s
Iteration  17: 518197.725 ops/s
Iteration  18: 508619.850 ops/s
Iteration  19: 497180.063 ops/s
Iteration  20: 500569.274 ops/s
Iteration  21: 494312.122 ops/s
Iteration  22: 504526.037 ops/s
Iteration  23: 491690.293 ops/s
Iteration  24: 504093.782 ops/s
Iteration  25: 511114.608 ops/s
Iteration  26: 494960.108 ops/s
Iteration  27: 520539.094 ops/s
Iteration  28: 484753.864 ops/s
Iteration  29: 489764.792 ops/s
Iteration  30: 518056.761 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapHiddenIterable":
  501539.920 ±(99.9%) 7708.766 ops/s [Average]
  (min, avg, max) = (480886.060, 501539.920, 521877.249), stdev = 11538.119
  CI (99.9%): [493831.154, 509248.686] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchMapHiddenIterable  thrpt   30  501539.920 ± 7708.766  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchDuringOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchDuringOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.830 ops/s
# Warmup Iteration   2: 33621.850 ops/s
# Warmup Iteration   3: 115262.660 ops/s
# Warmup Iteration   4: 143284.291 ops/s
# Warmup Iteration   5: 215086.202 ops/s
# Warmup Iteration   6: 307176.263 ops/s
# Warmup Iteration   7: 635874.667 ops/s
# Warmup Iteration   8: 614849.875 ops/s
# Warmup Iteration   9: 655271.434 ops/s
# Warmup Iteration  10: 618575.074 ops/s
# Warmup Iteration  11: 617133.668 ops/s
# Warmup Iteration  12: 622196.859 ops/s
# Warmup Iteration  13: 622702.352 ops/s
# Warmup Iteration  14: 672400.062 ops/s
# Warmup Iteration  15: 618797.254 ops/s
# Warmup Iteration  16: 626430.913 ops/s
# Warmup Iteration  17: 620096.854 ops/s
# Warmup Iteration  18: 622375.277 ops/s
# Warmup Iteration  19: 651642.328 ops/s
# Warmup Iteration  20: 618873.377 ops/s
# Warmup Iteration  21: 641494.947 ops/s
# Warmup Iteration  22: 630005.517 ops/s
# Warmup Iteration  23: 617885.432 ops/s
# Warmup Iteration  24: 611267.374 ops/s
# Warmup Iteration  25: 660209.214 ops/s
# Warmup Iteration  26: 608810.747 ops/s
# Warmup Iteration  27: 623727.141 ops/s
# Warmup Iteration  28: 654176.556 ops/s
# Warmup Iteration  29: 624299.867 ops/s
# Warmup Iteration  30: 653015.825 ops/s
Iteration   1: 615786.944 ops/s
Iteration   2: 654426.816 ops/s
Iteration   3: 640337.803 ops/s
Iteration   4: 628833.782 ops/s
Iteration   5: 643439.107 ops/s
Iteration   6: 652683.225 ops/s
Iteration   7: 628484.168 ops/s
Iteration   8: 612375.893 ops/s
Iteration   9: 646232.867 ops/s
Iteration  10: 620327.455 ops/s
Iteration  11: 625413.109 ops/s
Iteration  12: 654412.945 ops/s
Iteration  13: 618901.307 ops/s
Iteration  14: 635662.058 ops/s
Iteration  15: 634488.818 ops/s
Iteration  16: 638857.765 ops/s
Iteration  17: 619051.854 ops/s
Iteration  18: 647321.315 ops/s
Iteration  19: 608275.428 ops/s
Iteration  20: 637027.607 ops/s
Iteration  21: 616585.937 ops/s
Iteration  22: 625943.758 ops/s
Iteration  23: 625018.110 ops/s
Iteration  24: 622228.817 ops/s
Iteration  25: 626547.729 ops/s
Iteration  26: 634431.754 ops/s
Iteration  27: 653521.350 ops/s
Iteration  28: 620614.094 ops/s
Iteration  29: 652376.437 ops/s
Iteration  30: 657015.837 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchDuringOnNext":
  633220.803 ±(99.9%) 9576.371 ops/s [Average]
  (min, avg, max) = (608275.428, 633220.803, 657015.837), stdev = 14333.463
  CI (99.9%): [623644.432, 642797.174] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchDuringOnNext  thrpt   30  633220.803 ± 9576.371  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 210998.972 ops/s
# Warmup Iteration   2: 334769.906 ops/s
# Warmup Iteration   3: 344056.041 ops/s
# Warmup Iteration   4: 361379.609 ops/s
# Warmup Iteration   5: 331806.164 ops/s
# Warmup Iteration   6: 335031.086 ops/s
# Warmup Iteration   7: 356699.782 ops/s
# Warmup Iteration   8: 362176.714 ops/s
# Warmup Iteration   9: 373606.555 ops/s
# Warmup Iteration  10: 346859.922 ops/s
# Warmup Iteration  11: 373284.387 ops/s
# Warmup Iteration  12: 352822.761 ops/s
# Warmup Iteration  13: 368349.391 ops/s
# Warmup Iteration  14: 378533.539 ops/s
# Warmup Iteration  15: 371698.699 ops/s
# Warmup Iteration  16: 346707.771 ops/s
# Warmup Iteration  17: 386726.165 ops/s
# Warmup Iteration  18: 372831.181 ops/s
# Warmup Iteration  19: 385346.487 ops/s
# Warmup Iteration  20: 383177.965 ops/s
# Warmup Iteration  21: 390605.941 ops/s
# Warmup Iteration  22: 393872.001 ops/s
# Warmup Iteration  23: 374510.773 ops/s
# Warmup Iteration  24: 383943.492 ops/s
# Warmup Iteration  25: 390898.313 ops/s
# Warmup Iteration  26: 379008.330 ops/s
# Warmup Iteration  27: 393777.046 ops/s
# Warmup Iteration  28: 382045.751 ops/s
# Warmup Iteration  29: 393015.237 ops/s
# Warmup Iteration  30: 386796.363 ops/s
Iteration   1: 378144.157 ops/s
Iteration   2: 383101.275 ops/s
Iteration   3: 383406.431 ops/s
Iteration   4: 391822.630 ops/s
Iteration   5: 401684.086 ops/s
Iteration   6: 373783.134 ops/s
Iteration   7: 389625.555 ops/s
Iteration   8: 389531.062 ops/s
Iteration   9: 380601.089 ops/s
Iteration  10: 394956.436 ops/s
Iteration  11: 377262.641 ops/s
Iteration  12: 390618.626 ops/s
Iteration  13: 387274.623 ops/s
Iteration  14: 377366.407 ops/s
Iteration  15: 386552.862 ops/s
Iteration  16: 381116.860 ops/s
Iteration  17: 387886.004 ops/s
Iteration  18: 394139.486 ops/s
Iteration  19: 385470.466 ops/s
Iteration  20: 388827.567 ops/s
Iteration  21: 382066.210 ops/s
Iteration  22: 395975.936 ops/s
Iteration  23: 368816.981 ops/s
Iteration  24: 389893.223 ops/s
Iteration  25: 392810.317 ops/s
Iteration  26: 377019.312 ops/s
Iteration  27: 393017.219 ops/s
Iteration  28: 383933.287 ops/s
Iteration  29: 392290.228 ops/s
Iteration  30: 371344.906 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_error":
  385677.967 ±(99.9%) 5225.822 ops/s [Average]
  (min, avg, max) = (368816.981, 385677.967, 401684.086), stdev = 7821.764
  CI (99.9%): [380452.146, 390903.789] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
MaybeToCompletionStageTest._Benchmark.benchmark_error  thrpt   30  385677.967 ± 5225.822  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_asyncFusedPollCrashDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_asyncFusedPollCrashDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.773 ops/s
# Warmup Iteration   2: 15730.895 ops/s
# Warmup Iteration   3: 69042.830 ops/s
# Warmup Iteration   4: 65427.991 ops/s
# Warmup Iteration   5: 109518.303 ops/s
# Warmup Iteration   6: 184175.656 ops/s
# Warmup Iteration   7: 233527.088 ops/s
# Warmup Iteration   8: 246308.278 ops/s
# Warmup Iteration   9: 228567.132 ops/s
# Warmup Iteration  10: 236497.304 ops/s
# Warmup Iteration  11: 228713.983 ops/s
# Warmup Iteration  12: 218861.044 ops/s
# Warmup Iteration  13: 244907.716 ops/s
# Warmup Iteration  14: 233065.564 ops/s
# Warmup Iteration  15: 244773.303 ops/s
# Warmup Iteration  16: 243984.135 ops/s
# Warmup Iteration  17: 243095.240 ops/s
# Warmup Iteration  18: 238345.682 ops/s
# Warmup Iteration  19: 250528.117 ops/s
# Warmup Iteration  20: 235391.496 ops/s
# Warmup Iteration  21: 252181.579 ops/s
# Warmup Iteration  22: 244603.426 ops/s
# Warmup Iteration  23: 233089.288 ops/s
# Warmup Iteration  24: 248041.807 ops/s
# Warmup Iteration  25: 243778.034 ops/s
# Warmup Iteration  26: 247851.299 ops/s
# Warmup Iteration  27: 244539.260 ops/s
# Warmup Iteration  28: 231632.102 ops/s
# Warmup Iteration  29: 258193.963 ops/s
# Warmup Iteration  30: 241109.674 ops/s
Iteration   1: 233092.979 ops/s
Iteration   2: 236739.016 ops/s
Iteration   3: 246325.609 ops/s
Iteration   4: 238109.233 ops/s
Iteration   5: 243787.038 ops/s
Iteration   6: 244032.596 ops/s
Iteration   7: 243864.203 ops/s
Iteration   8: 251671.987 ops/s
Iteration   9: 252427.690 ops/s
Iteration  10: 238979.529 ops/s
Iteration  11: 245738.768 ops/s
Iteration  12: 243038.614 ops/s
Iteration  13: 241504.466 ops/s
Iteration  14: 244137.412 ops/s
Iteration  15: 249979.118 ops/s
Iteration  16: 234184.874 ops/s
Iteration  17: 250521.574 ops/s
Iteration  18: 244623.670 ops/s
Iteration  19: 239410.809 ops/s
Iteration  20: 247876.761 ops/s
Iteration  21: 240291.190 ops/s
Iteration  22: 247444.082 ops/s
Iteration  23: 232491.274 ops/s
Iteration  24: 243601.180 ops/s
Iteration  25: 245665.874 ops/s
Iteration  26: 236169.326 ops/s
Iteration  27: 250712.068 ops/s
Iteration  28: 242649.209 ops/s
Iteration  29: 237480.294 ops/s
Iteration  30: 252820.029 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_asyncFusedPollCrashDelayError":
  243312.349 ±(99.9%) 3851.132 ops/s [Average]
  (min, avg, max) = (232491.274, 243312.349, 252820.029), stdev = 5764.194
  CI (99.9%): [239461.217, 247163.481] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_asyncFusedPollCrashDelayError  thrpt   30  243312.349 ± 3851.132  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2869667.698 ops/s
# Warmup Iteration   2: 8674314.149 ops/s
# Warmup Iteration   3: 10146632.150 ops/s
# Warmup Iteration   4: 11330382.089 ops/s
# Warmup Iteration   5: 11221344.378 ops/s
# Warmup Iteration   6: 10715052.097 ops/s
# Warmup Iteration   7: 10993921.193 ops/s
# Warmup Iteration   8: 11217788.845 ops/s
# Warmup Iteration   9: 11219604.006 ops/s
# Warmup Iteration  10: 11123923.560 ops/s
# Warmup Iteration  11: 11345752.458 ops/s
# Warmup Iteration  12: 11129081.731 ops/s
# Warmup Iteration  13: 10820042.418 ops/s
# Warmup Iteration  14: 11388662.264 ops/s
# Warmup Iteration  15: 10788599.181 ops/s
# Warmup Iteration  16: 10964668.618 ops/s
# Warmup Iteration  17: 11564046.916 ops/s
# Warmup Iteration  18: 10786782.513 ops/s
# Warmup Iteration  19: 11401685.209 ops/s
# Warmup Iteration  20: 11084163.213 ops/s
# Warmup Iteration  21: 11550745.984 ops/s
# Warmup Iteration  22: 10954308.531 ops/s
# Warmup Iteration  23: 10560407.028 ops/s
# Warmup Iteration  24: 11389840.941 ops/s
# Warmup Iteration  25: 10981279.702 ops/s
# Warmup Iteration  26: 11123898.310 ops/s
# Warmup Iteration  27: 11173132.365 ops/s
# Warmup Iteration  28: 11294747.937 ops/s
# Warmup Iteration  29: 11240778.146 ops/s
# Warmup Iteration  30: 10744315.633 ops/s
Iteration   1: 11195831.136 ops/s
Iteration   2: 11240909.862 ops/s
Iteration   3: 10909552.146 ops/s
Iteration   4: 11251756.597 ops/s
Iteration   5: 10856590.000 ops/s
Iteration   6: 11137484.074 ops/s
Iteration   7: 11580022.351 ops/s
Iteration   8: 10997173.681 ops/s
Iteration   9: 11134026.474 ops/s
Iteration  10: 11114354.713 ops/s
Iteration  11: 11530096.926 ops/s
Iteration  12: 11380960.329 ops/s
Iteration  13: 10920969.470 ops/s
Iteration  14: 11135747.695 ops/s
Iteration  15: 11091384.769 ops/s
Iteration  16: 11110326.440 ops/s
Iteration  17: 11301924.219 ops/s
Iteration  18: 11388207.301 ops/s
Iteration  19: 10886699.834 ops/s
Iteration  20: 11349178.042 ops/s
Iteration  21: 11046071.162 ops/s
Iteration  22: 11294488.548 ops/s
Iteration  23: 11187107.490 ops/s
Iteration  24: 11571489.302 ops/s
Iteration  25: 11677924.141 ops/s
Iteration  26: 10866841.511 ops/s
Iteration  27: 11278069.650 ops/s
Iteration  28: 11465858.874 ops/s
Iteration  29: 10844590.956 ops/s
Iteration  30: 11500159.288 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_dispose":
  11208193.233 ±(99.9%) 157857.897 ops/s [Average]
  (min, avg, max) = (10844590.956, 11208193.233, 11677924.141), stdev = 236274.287
  CI (99.9%): [11050335.336, 11366051.130] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score        Error  Units
MaybeCreateTest._Benchmark.benchmark_dispose  thrpt   30  11208193.233 ± 157857.897  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_completableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_completableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 450961.051 ops/s
# Warmup Iteration   2: 562312.514 ops/s
# Warmup Iteration   3: 709933.190 ops/s
# Warmup Iteration   4: 710066.684 ops/s
# Warmup Iteration   5: 708088.762 ops/s
# Warmup Iteration   6: 723678.233 ops/s
# Warmup Iteration   7: 700446.413 ops/s
# Warmup Iteration   8: 734436.050 ops/s
# Warmup Iteration   9: 710953.416 ops/s
# Warmup Iteration  10: 688215.739 ops/s
# Warmup Iteration  11: 723565.518 ops/s
# Warmup Iteration  12: 704565.470 ops/s
# Warmup Iteration  13: 720326.989 ops/s
# Warmup Iteration  14: 703341.604 ops/s
# Warmup Iteration  15: 706926.981 ops/s
# Warmup Iteration  16: 742298.603 ops/s
# Warmup Iteration  17: 733772.622 ops/s
# Warmup Iteration  18: 768222.575 ops/s
# Warmup Iteration  19: 741729.564 ops/s
# Warmup Iteration  20: 751275.269 ops/s
# Warmup Iteration  21: 739696.374 ops/s
# Warmup Iteration  22: 729780.869 ops/s
# Warmup Iteration  23: 748650.125 ops/s
# Warmup Iteration  24: 734191.935 ops/s
# Warmup Iteration  25: 767027.116 ops/s
# Warmup Iteration  26: 768738.803 ops/s
# Warmup Iteration  27: 728425.983 ops/s
# Warmup Iteration  28: 772091.101 ops/s
# Warmup Iteration  29: 728858.745 ops/s
# Warmup Iteration  30: 788211.206 ops/s
Iteration   1: 767163.723 ops/s
Iteration   2: 720296.566 ops/s
Iteration   3: 766890.448 ops/s
Iteration   4: 712242.878 ops/s
Iteration   5: 760143.468 ops/s
Iteration   6: 726693.967 ops/s
Iteration   7: 750711.284 ops/s
Iteration   8: 777265.155 ops/s
Iteration   9: 730638.222 ops/s
Iteration  10: 763972.325 ops/s
Iteration  11: 740165.484 ops/s
Iteration  12: 764039.605 ops/s
Iteration  13: 721059.143 ops/s
Iteration  14: 761768.261 ops/s
Iteration  15: 748422.343 ops/s
Iteration  16: 779948.719 ops/s
Iteration  17: 731632.624 ops/s
Iteration  18: 772041.650 ops/s
Iteration  19: 759860.096 ops/s
Iteration  20: 765812.884 ops/s
Iteration  21: 746542.288 ops/s
Iteration  22: 751243.892 ops/s
Iteration  23: 770037.688 ops/s
Iteration  24: 737871.742 ops/s
Iteration  25: 762226.043 ops/s
Iteration  26: 753194.240 ops/s
Iteration  27: 610050.548 ops/s
Iteration  28: 765841.197 ops/s
Iteration  29: 761487.737 ops/s
Iteration  30: 750926.234 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_completableFutureCancels":
  747673.015 ±(99.9%) 21024.085 ops/s [Average]
  (min, avg, max) = (610050.548, 747673.015, 779948.719), stdev = 31467.863
  CI (99.9%): [726648.930, 768697.100] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
MaybeToCompletionStageTest._Benchmark.benchmark_completableFutureCancels  thrpt   30  747673.015 ± 21024.085  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_completableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_completableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2367512.812 ops/s
# Warmup Iteration   2: 5162594.130 ops/s
# Warmup Iteration   3: 5547154.649 ops/s
# Warmup Iteration   4: 6292912.009 ops/s
# Warmup Iteration   5: 6539129.120 ops/s
# Warmup Iteration   6: 6473081.530 ops/s
# Warmup Iteration   7: 6427012.404 ops/s
# Warmup Iteration   8: 6524233.640 ops/s
# Warmup Iteration   9: 6443626.572 ops/s
# Warmup Iteration  10: 6653512.315 ops/s
# Warmup Iteration  11: 6256938.586 ops/s
# Warmup Iteration  12: 6375803.041 ops/s
# Warmup Iteration  13: 6432174.961 ops/s
# Warmup Iteration  14: 6613157.681 ops/s
# Warmup Iteration  15: 6081800.762 ops/s
# Warmup Iteration  16: 6547591.158 ops/s
# Warmup Iteration  17: 6361319.938 ops/s
# Warmup Iteration  18: 6361912.244 ops/s
# Warmup Iteration  19: 6752777.954 ops/s
# Warmup Iteration  20: 6244514.869 ops/s
# Warmup Iteration  21: 6820911.051 ops/s
# Warmup Iteration  22: 6345286.569 ops/s
# Warmup Iteration  23: 6660975.864 ops/s
# Warmup Iteration  24: 6350384.996 ops/s
# Warmup Iteration  25: 6389773.822 ops/s
# Warmup Iteration  26: 6725542.095 ops/s
# Warmup Iteration  27: 6675841.922 ops/s
# Warmup Iteration  28: 6316166.856 ops/s
# Warmup Iteration  29: 6668426.528 ops/s
# Warmup Iteration  30: 6346683.744 ops/s
Iteration   1: 6362518.119 ops/s
Iteration   2: 6402372.440 ops/s
Iteration   3: 6308727.841 ops/s
Iteration   4: 6276528.634 ops/s
Iteration   5: 6626376.887 ops/s
Iteration   6: 6377665.211 ops/s
Iteration   7: 6718904.864 ops/s
Iteration   8: 6316098.231 ops/s
Iteration   9: 6642532.566 ops/s
Iteration  10: 6471561.371 ops/s
Iteration  11: 6517344.870 ops/s
Iteration  12: 6394337.792 ops/s
Iteration  13: 6388449.415 ops/s
Iteration  14: 6660371.727 ops/s
Iteration  15: 6480964.625 ops/s
Iteration  16: 6335962.470 ops/s
Iteration  17: 6611248.779 ops/s
Iteration  18: 6317916.362 ops/s
Iteration  19: 6525318.906 ops/s
Iteration  20: 6642360.624 ops/s
Iteration  21: 6344545.074 ops/s
Iteration  22: 6677161.664 ops/s
Iteration  23: 6443567.316 ops/s
Iteration  24: 6379551.599 ops/s
Iteration  25: 6790090.729 ops/s
Iteration  26: 6199344.457 ops/s
Iteration  27: 6547802.022 ops/s
Iteration  28: 6670430.299 ops/s
Iteration  29: 6339282.197 ops/s
Iteration  30: 6413854.376 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_completableManualCompleteCancels":
  6472773.049 ±(99.9%) 102474.547 ops/s [Average]
  (min, avg, max) = (6199344.457, 6472773.049, 6790090.729), stdev = 153379.089
  CI (99.9%): [6370298.502, 6575247.596] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score        Error  Units
MaybeToCompletionStageTest._Benchmark.benchmark_completableManualCompleteCancels  thrpt   30  6472773.049 ± 102474.547  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStageTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStageTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1304040.015 ops/s
# Warmup Iteration   2: 3697464.982 ops/s
# Warmup Iteration   3: 5312288.597 ops/s
# Warmup Iteration   4: 5270904.709 ops/s
# Warmup Iteration   5: 5183284.334 ops/s
# Warmup Iteration   6: 5333268.069 ops/s
# Warmup Iteration   7: 5200554.787 ops/s
# Warmup Iteration   8: 5393174.731 ops/s
# Warmup Iteration   9: 5250202.871 ops/s
# Warmup Iteration  10: 4747445.151 ops/s
# Warmup Iteration  11: 5462254.624 ops/s
# Warmup Iteration  12: 5122804.440 ops/s
# Warmup Iteration  13: 5274158.501 ops/s
# Warmup Iteration  14: 5371298.927 ops/s
# Warmup Iteration  15: 5061004.485 ops/s
# Warmup Iteration  16: 5448900.572 ops/s
# Warmup Iteration  17: 5211627.306 ops/s
# Warmup Iteration  18: 5249670.154 ops/s
# Warmup Iteration  19: 5423194.803 ops/s
# Warmup Iteration  20: 5269450.525 ops/s
# Warmup Iteration  21: 5333430.031 ops/s
# Warmup Iteration  22: 5254944.628 ops/s
# Warmup Iteration  23: 5505705.702 ops/s
# Warmup Iteration  24: 5213027.414 ops/s
# Warmup Iteration  25: 5376083.601 ops/s
# Warmup Iteration  26: 5213446.132 ops/s
# Warmup Iteration  27: 5447326.567 ops/s
# Warmup Iteration  28: 5224115.699 ops/s
# Warmup Iteration  29: 5300018.358 ops/s
# Warmup Iteration  30: 5510584.831 ops/s
Iteration   1: 5101331.428 ops/s
Iteration   2: 5449786.990 ops/s
Iteration   3: 5237756.756 ops/s
Iteration   4: 5335706.178 ops/s
Iteration   5: 5161372.502 ops/s
Iteration   6: 5293451.156 ops/s
Iteration   7: 5149325.509 ops/s
Iteration   8: 5258722.842 ops/s
Iteration   9: 5582375.448 ops/s
Iteration  10: 5177350.337 ops/s
Iteration  11: 5295699.566 ops/s
Iteration  12: 5315477.431 ops/s
Iteration  13: 5269607.792 ops/s
Iteration  14: 5256291.097 ops/s
Iteration  15: 5122304.172 ops/s
Iteration  16: 5457234.211 ops/s
Iteration  17: 5118509.564 ops/s
Iteration  18: 5386405.435 ops/s
Iteration  19: 5155326.734 ops/s
Iteration  20: 5415857.294 ops/s
Iteration  21: 5255894.281 ops/s
Iteration  22: 4409192.271 ops/s
Iteration  23: 5446644.551 ops/s
Iteration  24: 5271997.196 ops/s
Iteration  25: 5337843.678 ops/s
Iteration  26: 5178005.944 ops/s
Iteration  27: 5356682.965 ops/s
Iteration  28: 5169197.005 ops/s
Iteration  29: 5257314.056 ops/s
Iteration  30: 5344526.179 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStageTest._Benchmark.benchmark_dispose":
  5252239.686 ±(99.9%) 131850.219 ops/s [Average]
  (min, avg, max) = (4409192.271, 5252239.686, 5582375.448), stdev = 197347.215
  CI (99.9%): [5120389.467, 5384089.904] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
MaybeFromCompletionStageTest._Benchmark.benchmark_dispose  thrpt   30  5252239.686 ± 131850.219  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_dispose2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_dispose2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 897833.147 ops/s
# Warmup Iteration   2: 3804874.193 ops/s
# Warmup Iteration   3: 4851896.202 ops/s
# Warmup Iteration   4: 4952950.223 ops/s
# Warmup Iteration   5: 5314527.572 ops/s
# Warmup Iteration   6: 5118959.155 ops/s
# Warmup Iteration   7: 4951483.481 ops/s
# Warmup Iteration   8: 5260343.424 ops/s
# Warmup Iteration   9: 5176389.766 ops/s
# Warmup Iteration  10: 5139823.069 ops/s
# Warmup Iteration  11: 5340377.698 ops/s
# Warmup Iteration  12: 5087702.379 ops/s
# Warmup Iteration  13: 5217252.644 ops/s
# Warmup Iteration  14: 5193624.873 ops/s
# Warmup Iteration  15: 5278206.531 ops/s
# Warmup Iteration  16: 5299155.219 ops/s
# Warmup Iteration  17: 5131591.215 ops/s
# Warmup Iteration  18: 5344250.098 ops/s
# Warmup Iteration  19: 5057475.880 ops/s
# Warmup Iteration  20: 5217097.722 ops/s
# Warmup Iteration  21: 5393709.545 ops/s
# Warmup Iteration  22: 5067899.192 ops/s
# Warmup Iteration  23: 5239497.290 ops/s
# Warmup Iteration  24: 5191208.472 ops/s
# Warmup Iteration  25: 5029456.606 ops/s
# Warmup Iteration  26: 5343239.731 ops/s
# Warmup Iteration  27: 5274507.555 ops/s
# Warmup Iteration  28: 5261250.453 ops/s
# Warmup Iteration  29: 4955494.858 ops/s
# Warmup Iteration  30: 5264069.119 ops/s
Iteration   1: 5020295.427 ops/s
Iteration   2: 5130745.727 ops/s
Iteration   3: 5278120.639 ops/s
Iteration   4: 5103142.438 ops/s
Iteration   5: 5061643.427 ops/s
Iteration   6: 5278579.470 ops/s
Iteration   7: 4978398.569 ops/s
Iteration   8: 5325521.432 ops/s
Iteration   9: 4954497.075 ops/s
Iteration  10: 5320191.830 ops/s
Iteration  11: 5068772.430 ops/s
Iteration  12: 5198055.961 ops/s
Iteration  13: 5184194.970 ops/s
Iteration  14: 5120730.264 ops/s
Iteration  15: 5265376.347 ops/s
Iteration  16: 4976788.640 ops/s
Iteration  17: 5339407.635 ops/s
Iteration  18: 5261918.479 ops/s
Iteration  19: 4959197.881 ops/s
Iteration  20: 5272627.452 ops/s
Iteration  21: 5027618.749 ops/s
Iteration  22: 5176850.543 ops/s
Iteration  23: 5145582.157 ops/s
Iteration  24: 5038550.106 ops/s
Iteration  25: 5243479.541 ops/s
Iteration  26: 5196586.672 ops/s
Iteration  27: 5233383.624 ops/s
Iteration  28: 5276570.387 ops/s
Iteration  29: 5237173.196 ops/s
Iteration  30: 5198646.369 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_dispose2":
  5162421.581 ±(99.9%) 79346.990 ops/s [Average]
  (min, avg, max) = (4954497.075, 5162421.581, 5339407.635), stdev = 118762.849
  CI (99.9%): [5083074.591, 5241768.572] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
MaybeZipArrayTest._Benchmark.benchmark_dispose2  thrpt   30  5162421.581 ± 79346.990  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_completableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_completableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 133915.206 ops/s
# Warmup Iteration   2: 314607.884 ops/s
# Warmup Iteration   3: 341237.362 ops/s
# Warmup Iteration   4: 320531.231 ops/s
# Warmup Iteration   5: 370687.143 ops/s
# Warmup Iteration   6: 362186.950 ops/s
# Warmup Iteration   7: 359334.082 ops/s
# Warmup Iteration   8: 350474.428 ops/s
# Warmup Iteration   9: 374258.273 ops/s
# Warmup Iteration  10: 362701.817 ops/s
# Warmup Iteration  11: 355600.587 ops/s
# Warmup Iteration  12: 366904.946 ops/s
# Warmup Iteration  13: 350247.145 ops/s
# Warmup Iteration  14: 357492.655 ops/s
# Warmup Iteration  15: 356119.472 ops/s
# Warmup Iteration  16: 360617.222 ops/s
# Warmup Iteration  17: 379168.442 ops/s
# Warmup Iteration  18: 383230.422 ops/s
# Warmup Iteration  19: 396041.697 ops/s
# Warmup Iteration  20: 372580.539 ops/s
# Warmup Iteration  21: 384147.561 ops/s
# Warmup Iteration  22: 367382.983 ops/s
# Warmup Iteration  23: 389250.888 ops/s
# Warmup Iteration  24: 384402.529 ops/s
# Warmup Iteration  25: 375533.962 ops/s
# Warmup Iteration  26: 381618.918 ops/s
# Warmup Iteration  27: 394082.727 ops/s
# Warmup Iteration  28: 371574.477 ops/s
# Warmup Iteration  29: 384172.440 ops/s
# Warmup Iteration  30: 378851.840 ops/s
Iteration   1: 389594.559 ops/s
Iteration   2: 387432.523 ops/s
Iteration   3: 370416.523 ops/s
Iteration   4: 381709.469 ops/s
Iteration   5: 368934.934 ops/s
Iteration   6: 374670.196 ops/s
Iteration   7: 386106.129 ops/s
Iteration   8: 374407.434 ops/s
Iteration   9: 371746.550 ops/s
Iteration  10: 371409.033 ops/s
Iteration  11: 388859.204 ops/s
Iteration  12: 386871.019 ops/s
Iteration  13: 363303.264 ops/s
Iteration  14: 383290.076 ops/s
Iteration  15: 374432.560 ops/s
Iteration  16: 376195.211 ops/s
Iteration  17: 329442.875 ops/s
Iteration  18: 370299.972 ops/s
Iteration  19: 384015.137 ops/s
Iteration  20: 381676.487 ops/s
Iteration  21: 385989.891 ops/s
Iteration  22: 379420.812 ops/s
Iteration  23: 378356.458 ops/s
Iteration  24: 387927.512 ops/s
Iteration  25: 380013.319 ops/s
Iteration  26: 389259.211 ops/s
Iteration  27: 372556.805 ops/s
Iteration  28: 389820.977 ops/s
Iteration  29: 375106.749 ops/s
Iteration  30: 381099.172 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_completableManualCompleteExceptionallyCancels":
  377812.135 ±(99.9%) 7801.446 ops/s [Average]
  (min, avg, max) = (329442.875, 377812.135, 389820.977), stdev = 11676.838
  CI (99.9%): [370010.689, 385613.582] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt       Score      Error  Units
MaybeToCompletionStageTest._Benchmark.benchmark_completableManualCompleteExceptionallyCancels  thrpt   30  377812.135 ± 7801.446  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1969286.582 ops/s
# Warmup Iteration   2: 4356943.330 ops/s
# Warmup Iteration   3: 5285784.481 ops/s
# Warmup Iteration   4: 5341700.361 ops/s
# Warmup Iteration   5: 5771179.321 ops/s
# Warmup Iteration   6: 5589322.090 ops/s
# Warmup Iteration   7: 5386339.589 ops/s
# Warmup Iteration   8: 5709838.197 ops/s
# Warmup Iteration   9: 5355078.597 ops/s
# Warmup Iteration  10: 5788153.126 ops/s
# Warmup Iteration  11: 5722893.998 ops/s
# Warmup Iteration  12: 5458081.054 ops/s
# Warmup Iteration  13: 5537065.824 ops/s
# Warmup Iteration  14: 5736562.234 ops/s
# Warmup Iteration  15: 5444748.105 ops/s
# Warmup Iteration  16: 5663331.770 ops/s
# Warmup Iteration  17: 5493533.416 ops/s
# Warmup Iteration  18: 5769236.166 ops/s
# Warmup Iteration  19: 5523072.654 ops/s
# Warmup Iteration  20: 5545323.661 ops/s
# Warmup Iteration  21: 5924205.177 ops/s
# Warmup Iteration  22: 5402382.177 ops/s
# Warmup Iteration  23: 5646065.899 ops/s
# Warmup Iteration  24: 5595768.729 ops/s
# Warmup Iteration  25: 5554569.509 ops/s
# Warmup Iteration  26: 5693287.928 ops/s
# Warmup Iteration  27: 5470202.878 ops/s
# Warmup Iteration  28: 5574671.210 ops/s
# Warmup Iteration  29: 5752347.111 ops/s
# Warmup Iteration  30: 5528570.258 ops/s
Iteration   1: 5702543.439 ops/s
Iteration   2: 5490113.481 ops/s
Iteration   3: 5449679.524 ops/s
Iteration   4: 5839179.501 ops/s
Iteration   5: 5536206.349 ops/s
Iteration   6: 5655933.763 ops/s
Iteration   7: 5662449.234 ops/s
Iteration   8: 5825028.043 ops/s
Iteration   9: 5704845.727 ops/s
Iteration  10: 5515124.599 ops/s
Iteration  11: 5757915.561 ops/s
Iteration  12: 5540484.387 ops/s
Iteration  13: 5694588.263 ops/s
Iteration  14: 5491286.503 ops/s
Iteration  15: 5464668.609 ops/s
Iteration  16: 5719122.326 ops/s
Iteration  17: 5477039.166 ops/s
Iteration  18: 5584977.064 ops/s
Iteration  19: 5513501.352 ops/s
Iteration  20: 5828339.898 ops/s
Iteration  21: 5530058.609 ops/s
Iteration  22: 5681439.604 ops/s
Iteration  23: 5538334.009 ops/s
Iteration  24: 5496085.619 ops/s
Iteration  25: 5770788.088 ops/s
Iteration  26: 5485124.842 ops/s
Iteration  27: 5829949.235 ops/s
Iteration  28: 5447241.464 ops/s
Iteration  29: 5703899.772 ops/s
Iteration  30: 5500646.693 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_dispose":
  5614553.157 ±(99.9%) 87556.775 ops/s [Average]
  (min, avg, max) = (5447241.464, 5614553.157, 5839179.501), stdev = 131050.870
  CI (99.9%): [5526996.382, 5702109.933] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SingleOnErrorCompleteTest._Benchmark.benchmark_dispose  thrpt   30  5614553.157 ± 87556.775  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_consumerDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_consumerDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 613839.807 ops/s
# Warmup Iteration   2: 3716204.875 ops/s
# Warmup Iteration   3: 4054201.646 ops/s
# Warmup Iteration   4: 4986784.346 ops/s
# Warmup Iteration   5: 4999188.582 ops/s
# Warmup Iteration   6: 4779990.133 ops/s
# Warmup Iteration   7: 4691408.897 ops/s
# Warmup Iteration   8: 4957532.626 ops/s
# Warmup Iteration   9: 4870693.020 ops/s
# Warmup Iteration  10: 4904886.504 ops/s
# Warmup Iteration  11: 4989010.195 ops/s
# Warmup Iteration  12: 5085941.416 ops/s
# Warmup Iteration  13: 4768730.677 ops/s
# Warmup Iteration  14: 4928284.225 ops/s
# Warmup Iteration  15: 4934656.190 ops/s
# Warmup Iteration  16: 5014513.885 ops/s
# Warmup Iteration  17: 4985836.303 ops/s
# Warmup Iteration  18: 4830445.155 ops/s
# Warmup Iteration  19: 5136519.370 ops/s
# Warmup Iteration  20: 4855714.937 ops/s
# Warmup Iteration  21: 5158483.325 ops/s
# Warmup Iteration  22: 4797290.624 ops/s
# Warmup Iteration  23: 4977831.827 ops/s
# Warmup Iteration  24: 4999497.013 ops/s
# Warmup Iteration  25: 4740996.823 ops/s
# Warmup Iteration  26: 5007953.075 ops/s
# Warmup Iteration  27: 4923321.810 ops/s
# Warmup Iteration  28: 4874062.588 ops/s
# Warmup Iteration  29: 4943167.703 ops/s
# Warmup Iteration  30: 4866233.597 ops/s
Iteration   1: 4868717.523 ops/s
Iteration   2: 4971869.827 ops/s
Iteration   3: 5024000.192 ops/s
Iteration   4: 5022901.815 ops/s
Iteration   5: 4729322.931 ops/s
Iteration   6: 5010431.052 ops/s
Iteration   7: 4800038.205 ops/s
Iteration   8: 4821219.432 ops/s
Iteration   9: 4987160.863 ops/s
Iteration  10: 4873537.108 ops/s
Iteration  11: 4624880.025 ops/s
Iteration  12: 4321580.179 ops/s
Iteration  13: 4947470.382 ops/s
Iteration  14: 4810041.062 ops/s
Iteration  15: 4942057.620 ops/s
Iteration  16: 4910689.719 ops/s
Iteration  17: 5042664.306 ops/s
Iteration  18: 4995450.296 ops/s
Iteration  19: 4853854.511 ops/s
Iteration  20: 5103392.314 ops/s
Iteration  21: 4903906.114 ops/s
Iteration  22: 5017229.832 ops/s
Iteration  23: 5021614.293 ops/s
Iteration  24: 4983393.756 ops/s
Iteration  25: 5122118.390 ops/s
Iteration  26: 4767487.410 ops/s
Iteration  27: 5033046.902 ops/s
Iteration  28: 4871042.374 ops/s
Iteration  29: 4929762.708 ops/s
Iteration  30: 4755628.143 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_consumerDisposed":
  4902216.976 ±(99.9%) 106755.294 ops/s [Average]
  (min, avg, max) = (4321580.179, 4902216.976, 5122118.390), stdev = 159786.310
  CI (99.9%): [4795461.683, 5008972.270] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
ObservableConcatWithMaybeTest._Benchmark.benchmark_consumerDisposed  thrpt   30  4902216.976 ± 106755.294  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_disposeUpfront$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_disposeUpfront

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3301687.852 ops/s
# Warmup Iteration   2: 6538989.540 ops/s
# Warmup Iteration   3: 9258932.044 ops/s
# Warmup Iteration   4: 8554870.908 ops/s
# Warmup Iteration   5: 9029464.561 ops/s
# Warmup Iteration   6: 9065174.272 ops/s
# Warmup Iteration   7: 8977204.665 ops/s
# Warmup Iteration   8: 9035937.934 ops/s
# Warmup Iteration   9: 8621453.034 ops/s
# Warmup Iteration  10: 8974970.306 ops/s
# Warmup Iteration  11: 8997908.390 ops/s
# Warmup Iteration  12: 8600163.428 ops/s
# Warmup Iteration  13: 9355416.781 ops/s
# Warmup Iteration  14: 9411409.316 ops/s
# Warmup Iteration  15: 8941943.957 ops/s
# Warmup Iteration  16: 9136468.849 ops/s
# Warmup Iteration  17: 8780984.428 ops/s
# Warmup Iteration  18: 8798318.671 ops/s
# Warmup Iteration  19: 9231694.223 ops/s
# Warmup Iteration  20: 8897179.698 ops/s
# Warmup Iteration  21: 9252102.008 ops/s
# Warmup Iteration  22: 8781737.202 ops/s
# Warmup Iteration  23: 9079668.444 ops/s
# Warmup Iteration  24: 8779217.166 ops/s
# Warmup Iteration  25: 8707792.773 ops/s
# Warmup Iteration  26: 9294942.626 ops/s
# Warmup Iteration  27: 8738304.002 ops/s
# Warmup Iteration  28: 8907575.219 ops/s
# Warmup Iteration  29: 9161150.080 ops/s
# Warmup Iteration  30: 8924204.596 ops/s
Iteration   1: 9137202.322 ops/s
Iteration   2: 8762697.066 ops/s
Iteration   3: 8889528.994 ops/s
Iteration   4: 8981021.134 ops/s
Iteration   5: 8882598.948 ops/s
Iteration   6: 9081962.945 ops/s
Iteration   7: 9214010.161 ops/s
Iteration   8: 8843439.201 ops/s
Iteration   9: 9248429.356 ops/s
Iteration  10: 8852177.097 ops/s
Iteration  11: 8873434.625 ops/s
Iteration  12: 9255132.275 ops/s
Iteration  13: 8782721.142 ops/s
Iteration  14: 8940564.703 ops/s
Iteration  15: 8598127.589 ops/s
Iteration  16: 9254878.717 ops/s
Iteration  17: 8960206.828 ops/s
Iteration  18: 8744207.872 ops/s
Iteration  19: 9039005.285 ops/s
Iteration  20: 8819966.219 ops/s
Iteration  21: 9165727.403 ops/s
Iteration  22: 9081172.070 ops/s
Iteration  23: 8756631.928 ops/s
Iteration  24: 9323753.443 ops/s
Iteration  25: 8805477.080 ops/s
Iteration  26: 9283677.536 ops/s
Iteration  27: 8660309.482 ops/s
Iteration  28: 9011913.351 ops/s
Iteration  29: 9123598.545 ops/s
Iteration  30: 9405846.687 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_disposeUpfront":
  8992647.334 ±(99.9%) 143168.329 ops/s [Average]
  (min, avg, max) = (8598127.589, 8992647.334, 9405846.687), stdev = 214287.632
  CI (99.9%): [8849479.004, 9135815.663] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
MaybeFromCallableTest._Benchmark.benchmark_disposeUpfront  thrpt   30  8992647.334 ± 143168.329  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_scalarMapToCrashingCallable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_scalarMapToCrashingCallable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 280718.440 ops/s
# Warmup Iteration   2: 550642.603 ops/s
# Warmup Iteration   3: 626205.615 ops/s
# Warmup Iteration   4: 596124.888 ops/s
# Warmup Iteration   5: 650875.560 ops/s
# Warmup Iteration   6: 641662.046 ops/s
# Warmup Iteration   7: 655002.429 ops/s
# Warmup Iteration   8: 636283.242 ops/s
# Warmup Iteration   9: 641697.749 ops/s
# Warmup Iteration  10: 651503.183 ops/s
# Warmup Iteration  11: 578571.402 ops/s
# Warmup Iteration  12: 664315.093 ops/s
# Warmup Iteration  13: 615468.102 ops/s
# Warmup Iteration  14: 635948.899 ops/s
# Warmup Iteration  15: 662175.149 ops/s
# Warmup Iteration  16: 638775.839 ops/s
# Warmup Iteration  17: 687706.591 ops/s
# Warmup Iteration  18: 693223.773 ops/s
# Warmup Iteration  19: 679731.992 ops/s
# Warmup Iteration  20: 675046.890 ops/s
# Warmup Iteration  21: 696713.618 ops/s
# Warmup Iteration  22: 676390.892 ops/s
# Warmup Iteration  23: 672163.605 ops/s
# Warmup Iteration  24: 681870.059 ops/s
# Warmup Iteration  25: 677221.881 ops/s
# Warmup Iteration  26: 682307.918 ops/s
# Warmup Iteration  27: 695613.019 ops/s
# Warmup Iteration  28: 660215.855 ops/s
# Warmup Iteration  29: 685447.758 ops/s
# Warmup Iteration  30: 682110.481 ops/s
Iteration   1: 658581.659 ops/s
Iteration   2: 676103.945 ops/s
Iteration   3: 665447.603 ops/s
Iteration   4: 693998.611 ops/s
Iteration   5: 675506.281 ops/s
Iteration   6: 658619.888 ops/s
Iteration   7: 512934.231 ops/s
Iteration   8: 657852.420 ops/s
Iteration   9: 691017.580 ops/s
Iteration  10: 669958.426 ops/s
Iteration  11: 675125.315 ops/s
Iteration  12: 701581.209 ops/s
Iteration  13: 664766.965 ops/s
Iteration  14: 671731.627 ops/s
Iteration  15: 684871.845 ops/s
Iteration  16: 669633.925 ops/s
Iteration  17: 697172.277 ops/s
Iteration  18: 663010.488 ops/s
Iteration  19: 699664.675 ops/s
Iteration  20: 663694.373 ops/s
Iteration  21: 696099.357 ops/s
Iteration  22: 669925.549 ops/s
Iteration  23: 689736.923 ops/s
Iteration  24: 707532.512 ops/s
Iteration  25: 656852.431 ops/s
Iteration  26: 699513.762 ops/s
Iteration  27: 652658.218 ops/s
Iteration  28: 676885.137 ops/s
Iteration  29: 689534.540 ops/s
Iteration  30: 674387.318 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_scalarMapToCrashingCallable":
  672146.636 ±(99.9%) 22639.629 ops/s [Average]
  (min, avg, max) = (512934.231, 672146.636, 707532.512), stdev = 33885.933
  CI (99.9%): [649507.008, 694786.265] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ObservableScalarXMapTest._Benchmark.benchmark_scalarMapToCrashingCallable  thrpt   30  672146.636 ± 22639.629  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1747461.449 ops/s
# Warmup Iteration   2: 3300974.665 ops/s
# Warmup Iteration   3: 3555515.005 ops/s
# Warmup Iteration   4: 3970395.652 ops/s
# Warmup Iteration   5: 4307901.734 ops/s
# Warmup Iteration   6: 4196931.227 ops/s
# Warmup Iteration   7: 4000769.212 ops/s
# Warmup Iteration   8: 4248794.832 ops/s
# Warmup Iteration   9: 4104094.169 ops/s
# Warmup Iteration  10: 4275695.637 ops/s
# Warmup Iteration  11: 4009401.394 ops/s
# Warmup Iteration  12: 4161841.829 ops/s
# Warmup Iteration  13: 4291450.465 ops/s
# Warmup Iteration  14: 4008854.972 ops/s
# Warmup Iteration  15: 4068558.837 ops/s
# Warmup Iteration  16: 4170773.338 ops/s
# Warmup Iteration  17: 4163992.214 ops/s
# Warmup Iteration  18: 4025529.783 ops/s
# Warmup Iteration  19: 4129593.958 ops/s
# Warmup Iteration  20: 4171918.109 ops/s
# Warmup Iteration  21: 4238400.664 ops/s
# Warmup Iteration  22: 4110832.299 ops/s
# Warmup Iteration  23: 3962819.594 ops/s
# Warmup Iteration  24: 4138682.370 ops/s
# Warmup Iteration  25: 4079802.411 ops/s
# Warmup Iteration  26: 4186901.539 ops/s
# Warmup Iteration  27: 4284612.069 ops/s
# Warmup Iteration  28: 4140831.515 ops/s
# Warmup Iteration  29: 4010991.713 ops/s
# Warmup Iteration  30: 4246390.314 ops/s
Iteration   1: 4032401.850 ops/s
Iteration   2: 4177404.016 ops/s
Iteration   3: 4129580.440 ops/s
Iteration   4: 4188693.199 ops/s
Iteration   5: 4128870.743 ops/s
Iteration   6: 4156616.746 ops/s
Iteration   7: 4158182.920 ops/s
Iteration   8: 4289842.617 ops/s
Iteration   9: 4044478.680 ops/s
Iteration  10: 4215952.091 ops/s
Iteration  11: 4077082.309 ops/s
Iteration  12: 4302238.238 ops/s
Iteration  13: 4161829.127 ops/s
Iteration  14: 4083415.523 ops/s
Iteration  15: 4309973.636 ops/s
Iteration  16: 4192640.259 ops/s
Iteration  17: 4158699.055 ops/s
Iteration  18: 4298221.702 ops/s
Iteration  19: 4113716.756 ops/s
Iteration  20: 4352244.786 ops/s
Iteration  21: 4131106.688 ops/s
Iteration  22: 4316595.917 ops/s
Iteration  23: 4179776.457 ops/s
Iteration  24: 4116133.790 ops/s
Iteration  25: 4202927.759 ops/s
Iteration  26: 4133849.105 ops/s
Iteration  27: 4316886.002 ops/s
Iteration  28: 4287794.925 ops/s
Iteration  29: 4043753.020 ops/s
Iteration  30: 4326405.716 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCancels":
  4187577.136 ±(99.9%) 62885.994 ops/s [Average]
  (min, avg, max) = (4032401.850, 4187577.136, 4352244.786), stdev = 94124.803
  CI (99.9%): [4124691.142, 4250463.130] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCancels  thrpt   30  4187577.136 ± 62885.994  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 882313.919 ops/s
# Warmup Iteration   2: 2579521.849 ops/s
# Warmup Iteration   3: 2901070.964 ops/s
# Warmup Iteration   4: 3735527.813 ops/s
# Warmup Iteration   5: 3697479.196 ops/s
# Warmup Iteration   6: 3639802.422 ops/s
# Warmup Iteration   7: 3762654.285 ops/s
# Warmup Iteration   8: 3626760.047 ops/s
# Warmup Iteration   9: 3601108.316 ops/s
# Warmup Iteration  10: 3660367.333 ops/s
# Warmup Iteration  11: 3659430.112 ops/s
# Warmup Iteration  12: 3774850.228 ops/s
# Warmup Iteration  13: 3687242.007 ops/s
# Warmup Iteration  14: 3625848.713 ops/s
# Warmup Iteration  15: 3653189.220 ops/s
# Warmup Iteration  16: 3718547.562 ops/s
# Warmup Iteration  17: 3609202.071 ops/s
# Warmup Iteration  18: 3860840.572 ops/s
# Warmup Iteration  19: 3791988.302 ops/s
# Warmup Iteration  20: 3662689.851 ops/s
# Warmup Iteration  21: 3779364.329 ops/s
# Warmup Iteration  22: 3672008.290 ops/s
# Warmup Iteration  23: 3752221.892 ops/s
# Warmup Iteration  24: 3850081.270 ops/s
# Warmup Iteration  25: 3813040.809 ops/s
# Warmup Iteration  26: 3615107.890 ops/s
# Warmup Iteration  27: 3664555.880 ops/s
# Warmup Iteration  28: 3767306.911 ops/s
# Warmup Iteration  29: 3641548.275 ops/s
# Warmup Iteration  30: 3787176.401 ops/s
Iteration   1: 2913745.869 ops/s
Iteration   2: 3677182.722 ops/s
Iteration   3: 3827804.034 ops/s
Iteration   4: 3657249.033 ops/s
Iteration   5: 3710446.384 ops/s
Iteration   6: 3692596.628 ops/s
Iteration   7: 3728582.884 ops/s
Iteration   8: 3700025.792 ops/s
Iteration   9: 3710810.815 ops/s
Iteration  10: 3797578.371 ops/s
Iteration  11: 3614461.454 ops/s
Iteration  12: 3795992.825 ops/s
Iteration  13: 3687031.788 ops/s
Iteration  14: 3632472.994 ops/s
Iteration  15: 3617815.862 ops/s
Iteration  16: 3800880.803 ops/s
Iteration  17: 3666121.887 ops/s
Iteration  18: 3789305.955 ops/s
Iteration  19: 3588439.368 ops/s
Iteration  20: 3857951.014 ops/s
Iteration  21: 3612274.427 ops/s
Iteration  22: 3616306.294 ops/s
Iteration  23: 3732834.759 ops/s
Iteration  24: 3644886.034 ops/s
Iteration  25: 3850663.189 ops/s
Iteration  26: 3829131.521 ops/s
Iteration  27: 3597873.510 ops/s
Iteration  28: 3782439.518 ops/s
Iteration  29: 3675369.701 ops/s
Iteration  30: 3741770.908 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCancels":
  3685001.545 ±(99.9%) 111190.934 ops/s [Average]
  (min, avg, max) = (2913745.869, 3685001.545, 3857951.014), stdev = 166425.368
  CI (99.9%): [3573810.611, 3796192.479] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score        Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCancels  thrpt   30  3685001.545 ± 111190.934  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_disposeOnArrival2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_disposeOnArrival2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 746973.189 ops/s
# Warmup Iteration   2: 1958336.681 ops/s
# Warmup Iteration   3: 2728246.050 ops/s
# Warmup Iteration   4: 2705114.212 ops/s
# Warmup Iteration   5: 2802074.656 ops/s
# Warmup Iteration   6: 2766980.395 ops/s
# Warmup Iteration   7: 2638468.479 ops/s
# Warmup Iteration   8: 2877784.034 ops/s
# Warmup Iteration   9: 2745115.673 ops/s
# Warmup Iteration  10: 2688372.467 ops/s
# Warmup Iteration  11: 2694701.605 ops/s
# Warmup Iteration  12: 2794816.192 ops/s
# Warmup Iteration  13: 2679349.415 ops/s
# Warmup Iteration  14: 2922487.987 ops/s
# Warmup Iteration  15: 2831618.861 ops/s
# Warmup Iteration  16: 2640629.739 ops/s
# Warmup Iteration  17: 2878836.151 ops/s
# Warmup Iteration  18: 2797712.756 ops/s
# Warmup Iteration  19: 2763367.834 ops/s
# Warmup Iteration  20: 2746139.865 ops/s
# Warmup Iteration  21: 2701245.781 ops/s
# Warmup Iteration  22: 2805048.372 ops/s
# Warmup Iteration  23: 2651155.523 ops/s
# Warmup Iteration  24: 2676162.776 ops/s
# Warmup Iteration  25: 2890164.721 ops/s
# Warmup Iteration  26: 2723418.858 ops/s
# Warmup Iteration  27: 2706745.570 ops/s
# Warmup Iteration  28: 2715089.753 ops/s
# Warmup Iteration  29: 2779954.883 ops/s
# Warmup Iteration  30: 2807167.140 ops/s
Iteration   1: 2685345.235 ops/s
Iteration   2: 2805369.111 ops/s
Iteration   3: 2676543.349 ops/s
Iteration   4: 2757037.968 ops/s
Iteration   5: 2704015.363 ops/s
Iteration   6: 2804283.690 ops/s
Iteration   7: 2782621.056 ops/s
Iteration   8: 2699161.725 ops/s
Iteration   9: 2785811.723 ops/s
Iteration  10: 2678178.626 ops/s
Iteration  11: 2840362.436 ops/s
Iteration  12: 2717845.795 ops/s
Iteration  13: 2691598.815 ops/s
Iteration  14: 2753063.870 ops/s
Iteration  15: 2791863.687 ops/s
Iteration  16: 2742268.939 ops/s
Iteration  17: 2755002.963 ops/s
Iteration  18: 2865687.239 ops/s
Iteration  19: 2703342.986 ops/s
Iteration  20: 2773045.325 ops/s
Iteration  21: 2763158.912 ops/s
Iteration  22: 2651320.421 ops/s
Iteration  23: 2733744.536 ops/s
Iteration  24: 2799886.078 ops/s
Iteration  25: 2850597.828 ops/s
Iteration  26: 2677080.307 ops/s
Iteration  27: 2808688.970 ops/s
Iteration  28: 2760445.134 ops/s
Iteration  29: 2670018.128 ops/s
Iteration  30: 2833183.708 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_disposeOnArrival2":
  2752019.131 ±(99.9%) 39863.267 ops/s [Average]
  (min, avg, max) = (2651320.421, 2752019.131, 2865687.239), stdev = 59665.466
  CI (99.9%): [2712155.864, 2791882.398] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObservableCacheTest._Benchmark.benchmark_disposeOnArrival2  thrpt   30  2752019.131 ± 39863.267  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_refCountSynchronousTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_refCountSynchronousTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 361493.360 ops/s
# Warmup Iteration   2: 1476753.948 ops/s
# Warmup Iteration   3: 1703807.890 ops/s
# Warmup Iteration   4: 2237202.024 ops/s
# Warmup Iteration   5: 2545435.387 ops/s
# Warmup Iteration   6: 2439091.169 ops/s
# Warmup Iteration   7: 2525010.953 ops/s
# Warmup Iteration   8: 2356851.003 ops/s
# Warmup Iteration   9: 2373956.013 ops/s
# Warmup Iteration  10: 2498202.382 ops/s
# Warmup Iteration  11: 2299500.095 ops/s
# Warmup Iteration  12: 2433670.745 ops/s
# Warmup Iteration  13: 2361527.792 ops/s
# Warmup Iteration  14: 2580989.310 ops/s
# Warmup Iteration  15: 2418505.871 ops/s
# Warmup Iteration  16: 2433220.827 ops/s
# Warmup Iteration  17: 2439150.760 ops/s
# Warmup Iteration  18: 2490261.836 ops/s
# Warmup Iteration  19: 2517631.542 ops/s
# Warmup Iteration  20: 2479293.553 ops/s
# Warmup Iteration  21: 2360670.570 ops/s
# Warmup Iteration  22: 2516289.500 ops/s
# Warmup Iteration  23: 2568633.780 ops/s
# Warmup Iteration  24: 2364574.313 ops/s
# Warmup Iteration  25: 2118123.703 ops/s
# Warmup Iteration  26: 2378801.840 ops/s
# Warmup Iteration  27: 2478820.148 ops/s
# Warmup Iteration  28: 2476315.663 ops/s
# Warmup Iteration  29: 2553223.242 ops/s
# Warmup Iteration  30: 2443521.019 ops/s
Iteration   1: 2523039.157 ops/s
Iteration   2: 2419099.492 ops/s
Iteration   3: 2550224.183 ops/s
Iteration   4: 2355859.429 ops/s
Iteration   5: 2501898.680 ops/s
Iteration   6: 2536123.326 ops/s
Iteration   7: 2367995.309 ops/s
Iteration   8: 2600062.622 ops/s
Iteration   9: 2438109.502 ops/s
Iteration  10: 2450003.404 ops/s
Iteration  11: 2544668.654 ops/s
Iteration  12: 2406377.520 ops/s
Iteration  13: 2528342.918 ops/s
Iteration  14: 2388214.442 ops/s
Iteration  15: 2409066.449 ops/s
Iteration  16: 2509620.025 ops/s
Iteration  17: 2338329.648 ops/s
Iteration  18: 2511254.113 ops/s
Iteration  19: 2507698.966 ops/s
Iteration  20: 2437702.468 ops/s
Iteration  21: 2501637.799 ops/s
Iteration  22: 2408586.769 ops/s
Iteration  23: 2504940.116 ops/s
Iteration  24: 2437258.544 ops/s
Iteration  25: 2467488.465 ops/s
Iteration  26: 2518354.484 ops/s
Iteration  27: 2432358.270 ops/s
Iteration  28: 2367966.708 ops/s
Iteration  29: 2483865.996 ops/s
Iteration  30: 2483325.713 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_refCountSynchronousTake":
  2464315.772 ±(99.9%) 44062.616 ops/s [Average]
  (min, avg, max) = (2338329.648, 2464315.772, 2600062.622), stdev = 65950.854
  CI (99.9%): [2420253.157, 2508378.388] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableRefCountTest._Benchmark.benchmark_refCountSynchronousTake  thrpt   30  2464315.772 ± 44062.616  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFutureTest._Benchmark.benchmark_cancelImmediately$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFutureTest._Benchmark.benchmark_cancelImmediately

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2748394.885 ops/s
# Warmup Iteration   2: 5608113.159 ops/s
# Warmup Iteration   3: 7743448.352 ops/s
# Warmup Iteration   4: 7398576.467 ops/s
# Warmup Iteration   5: 7684246.526 ops/s
# Warmup Iteration   6: 7802144.724 ops/s
# Warmup Iteration   7: 7801681.102 ops/s
# Warmup Iteration   8: 7515372.886 ops/s
# Warmup Iteration   9: 7822021.338 ops/s
# Warmup Iteration  10: 7547232.285 ops/s
# Warmup Iteration  11: 7539709.579 ops/s
# Warmup Iteration  12: 7724377.017 ops/s
# Warmup Iteration  13: 7750506.623 ops/s
# Warmup Iteration  14: 7352165.620 ops/s
# Warmup Iteration  15: 7972613.740 ops/s
# Warmup Iteration  16: 7700017.278 ops/s
# Warmup Iteration  17: 7470084.264 ops/s
# Warmup Iteration  18: 7845631.860 ops/s
# Warmup Iteration  19: 7343407.904 ops/s
# Warmup Iteration  20: 7764080.694 ops/s
# Warmup Iteration  21: 7521699.805 ops/s
# Warmup Iteration  22: 7653755.976 ops/s
# Warmup Iteration  23: 7426076.909 ops/s
# Warmup Iteration  24: 7508928.984 ops/s
# Warmup Iteration  25: 7659439.129 ops/s
# Warmup Iteration  26: 7607476.479 ops/s
# Warmup Iteration  27: 7432968.563 ops/s
# Warmup Iteration  28: 7823825.972 ops/s
# Warmup Iteration  29: 7524298.024 ops/s
# Warmup Iteration  30: 7788493.909 ops/s
Iteration   1: 7484084.414 ops/s
Iteration   2: 7642127.291 ops/s
Iteration   3: 7683651.746 ops/s
Iteration   4: 7334703.948 ops/s
Iteration   5: 7528259.108 ops/s
Iteration   6: 7843574.005 ops/s
Iteration   7: 7346688.760 ops/s
Iteration   8: 7747313.476 ops/s
Iteration   9: 7466816.414 ops/s
Iteration  10: 7387174.767 ops/s
Iteration  11: 7595496.894 ops/s
Iteration  12: 7443695.572 ops/s
Iteration  13: 7693567.215 ops/s
Iteration  14: 7884076.548 ops/s
Iteration  15: 7745867.495 ops/s
Iteration  16: 7492691.822 ops/s
Iteration  17: 7743708.157 ops/s
Iteration  18: 7590354.002 ops/s
Iteration  19: 7476218.638 ops/s
Iteration  20: 7849443.044 ops/s
Iteration  21: 7475270.644 ops/s
Iteration  22: 7528566.874 ops/s
Iteration  23: 7889200.893 ops/s
Iteration  24: 7347832.970 ops/s
Iteration  25: 7743005.378 ops/s
Iteration  26: 7736133.218 ops/s
Iteration  27: 7539801.111 ops/s
Iteration  28: 7488321.209 ops/s
Iteration  29: 7611563.478 ops/s
Iteration  30: 7819324.312 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFutureTest._Benchmark.benchmark_cancelImmediately":
  7605284.447 ±(99.9%) 112436.177 ops/s [Average]
  (min, avg, max) = (7334703.948, 7605284.447, 7889200.893), stdev = 168289.189
  CI (99.9%): [7492848.270, 7717720.624] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
MaybeFromFutureTest._Benchmark.benchmark_cancelImmediately  thrpt   30  7605284.447 ± 112436.177  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_onSuccessAfterDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_onSuccessAfterDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 647360.788 ops/s
# Warmup Iteration   2: 2693839.205 ops/s
# Warmup Iteration   3: 3072063.842 ops/s
# Warmup Iteration   4: 3411617.735 ops/s
# Warmup Iteration   5: 3599133.765 ops/s
# Warmup Iteration   6: 3620205.526 ops/s
# Warmup Iteration   7: 3423217.234 ops/s
# Warmup Iteration   8: 3659422.194 ops/s
# Warmup Iteration   9: 3680376.248 ops/s
# Warmup Iteration  10: 3360354.940 ops/s
# Warmup Iteration  11: 3543761.746 ops/s
# Warmup Iteration  12: 3508511.543 ops/s
# Warmup Iteration  13: 3521086.373 ops/s
# Warmup Iteration  14: 3580920.341 ops/s
# Warmup Iteration  15: 3520531.765 ops/s
# Warmup Iteration  16: 3510189.124 ops/s
# Warmup Iteration  17: 3679354.236 ops/s
# Warmup Iteration  18: 3535683.454 ops/s
# Warmup Iteration  19: 3484899.568 ops/s
# Warmup Iteration  20: 2921680.087 ops/s
# Warmup Iteration  21: 3485469.247 ops/s
# Warmup Iteration  22: 3550875.527 ops/s
# Warmup Iteration  23: 3545879.275 ops/s
# Warmup Iteration  24: 3475925.285 ops/s
# Warmup Iteration  25: 3679699.934 ops/s
# Warmup Iteration  26: 3464096.731 ops/s
# Warmup Iteration  27: 3408454.963 ops/s
# Warmup Iteration  28: 3543448.985 ops/s
# Warmup Iteration  29: 3682384.770 ops/s
# Warmup Iteration  30: 3377146.953 ops/s
Iteration   1: 3566733.089 ops/s
Iteration   2: 3609274.341 ops/s
Iteration   3: 3426632.831 ops/s
Iteration   4: 3540556.649 ops/s
Iteration   5: 3541441.400 ops/s
Iteration   6: 3465168.618 ops/s
Iteration   7: 3654725.885 ops/s
Iteration   8: 3462292.597 ops/s
Iteration   9: 3593755.605 ops/s
Iteration  10: 3505451.571 ops/s
Iteration  11: 3459260.907 ops/s
Iteration  12: 3582398.355 ops/s
Iteration  13: 3405810.792 ops/s
Iteration  14: 3667030.642 ops/s
Iteration  15: 3599001.863 ops/s
Iteration  16: 3502489.639 ops/s
Iteration  17: 3475068.667 ops/s
Iteration  18: 3636453.658 ops/s
Iteration  19: 3481089.503 ops/s
Iteration  20: 3591137.656 ops/s
Iteration  21: 3435210.719 ops/s
Iteration  22: 3542563.740 ops/s
Iteration  23: 3644772.550 ops/s
Iteration  24: 3437505.752 ops/s
Iteration  25: 3578552.393 ops/s
Iteration  26: 3508837.173 ops/s
Iteration  27: 3639064.651 ops/s
Iteration  28: 3571797.894 ops/s
Iteration  29: 3466229.839 ops/s
Iteration  30: 3490744.230 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_onSuccessAfterDispose":
  3536035.107 ±(99.9%) 50753.725 ops/s [Average]
  (min, avg, max) = (3405810.792, 3536035.107, 3667030.642), stdev = 75965.793
  CI (99.9%): [3485281.382, 3586788.832] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MaybeZipArrayTest._Benchmark.benchmark_onSuccessAfterDispose  thrpt   30  3536035.107 ± 50753.725  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1148361.369 ops/s
# Warmup Iteration   2: 2448548.185 ops/s
# Warmup Iteration   3: 2605275.171 ops/s
# Warmup Iteration   4: 2927328.098 ops/s
# Warmup Iteration   5: 3068823.484 ops/s
# Warmup Iteration   6: 2968498.334 ops/s
# Warmup Iteration   7: 3072211.263 ops/s
# Warmup Iteration   8: 2766965.131 ops/s
# Warmup Iteration   9: 3082059.066 ops/s
# Warmup Iteration  10: 2888339.225 ops/s
# Warmup Iteration  11: 3005137.175 ops/s
# Warmup Iteration  12: 2943903.452 ops/s
# Warmup Iteration  13: 3009276.471 ops/s
# Warmup Iteration  14: 2889907.089 ops/s
# Warmup Iteration  15: 2983367.726 ops/s
# Warmup Iteration  16: 3004963.095 ops/s
# Warmup Iteration  17: 2915763.186 ops/s
# Warmup Iteration  18: 3037720.530 ops/s
# Warmup Iteration  19: 2968981.299 ops/s
# Warmup Iteration  20: 3076780.369 ops/s
# Warmup Iteration  21: 3035972.451 ops/s
# Warmup Iteration  22: 2921396.028 ops/s
# Warmup Iteration  23: 2981439.063 ops/s
# Warmup Iteration  24: 2857780.996 ops/s
# Warmup Iteration  25: 3023776.304 ops/s
# Warmup Iteration  26: 3056534.779 ops/s
# Warmup Iteration  27: 2935096.838 ops/s
# Warmup Iteration  28: 3085344.426 ops/s
# Warmup Iteration  29: 2900647.639 ops/s
# Warmup Iteration  30: 2948135.465 ops/s
Iteration   1: 2986281.853 ops/s
Iteration   2: 2851914.471 ops/s
Iteration   3: 2974630.017 ops/s
Iteration   4: 2986357.327 ops/s
Iteration   5: 2969978.691 ops/s
Iteration   6: 3105468.603 ops/s
Iteration   7: 2889671.377 ops/s
Iteration   8: 3060968.829 ops/s
Iteration   9: 2901950.564 ops/s
Iteration  10: 2918128.223 ops/s
Iteration  11: 3020434.654 ops/s
Iteration  12: 2927274.222 ops/s
Iteration  13: 3010250.855 ops/s
Iteration  14: 2921245.950 ops/s
Iteration  15: 2921063.704 ops/s
Iteration  16: 3024084.587 ops/s
Iteration  17: 2845299.482 ops/s
Iteration  18: 3018764.144 ops/s
Iteration  19: 2932650.505 ops/s
Iteration  20: 3001723.875 ops/s
Iteration  21: 3007718.314 ops/s
Iteration  22: 2938264.307 ops/s
Iteration  23: 3165911.329 ops/s
Iteration  24: 3027242.460 ops/s
Iteration  25: 2912280.639 ops/s
Iteration  26: 3086475.214 ops/s
Iteration  27: 2926809.227 ops/s
Iteration  28: 2996214.378 ops/s
Iteration  29: 2975128.339 ops/s
Iteration  30: 3011440.055 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeDispose":
  2977187.540 ±(99.9%) 48472.501 ops/s [Average]
  (min, avg, max) = (2845299.482, 2977187.540, 3165911.329), stdev = 72551.364
  CI (99.9%): [2928715.038, 3025660.041] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeDispose  thrpt   30  2977187.540 ± 48472.501  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_cancelComposes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_cancelComposes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 960095.623 ops/s
# Warmup Iteration   2: 3802014.320 ops/s
# Warmup Iteration   3: 4069288.322 ops/s
# Warmup Iteration   4: 5117221.507 ops/s
# Warmup Iteration   5: 4830959.281 ops/s
# Warmup Iteration   6: 4921962.379 ops/s
# Warmup Iteration   7: 5134901.324 ops/s
# Warmup Iteration   8: 4751571.319 ops/s
# Warmup Iteration   9: 5167986.195 ops/s
# Warmup Iteration  10: 5229186.709 ops/s
# Warmup Iteration  11: 4907890.122 ops/s
# Warmup Iteration  12: 4885378.437 ops/s
# Warmup Iteration  13: 5005471.146 ops/s
# Warmup Iteration  14: 4807393.356 ops/s
# Warmup Iteration  15: 4031940.042 ops/s
# Warmup Iteration  16: 4922628.586 ops/s
# Warmup Iteration  17: 4886356.967 ops/s
# Warmup Iteration  18: 5049327.323 ops/s
# Warmup Iteration  19: 4888621.188 ops/s
# Warmup Iteration  20: 4824755.637 ops/s
# Warmup Iteration  21: 4982829.124 ops/s
# Warmup Iteration  22: 4868968.432 ops/s
# Warmup Iteration  23: 5102097.109 ops/s
# Warmup Iteration  24: 4635341.254 ops/s
# Warmup Iteration  25: 4996879.350 ops/s
# Warmup Iteration  26: 4937552.378 ops/s
# Warmup Iteration  27: 4772458.635 ops/s
# Warmup Iteration  28: 5134078.461 ops/s
# Warmup Iteration  29: 4706302.662 ops/s
# Warmup Iteration  30: 5147120.165 ops/s
Iteration   1: 4774116.353 ops/s
Iteration   2: 5040328.805 ops/s
Iteration   3: 4777051.087 ops/s
Iteration   4: 4841024.327 ops/s
Iteration   5: 4987055.370 ops/s
Iteration   6: 4980265.180 ops/s
Iteration   7: 4738705.548 ops/s
Iteration   8: 5042779.743 ops/s
Iteration   9: 4900087.432 ops/s
Iteration  10: 4985616.994 ops/s
Iteration  11: 4903219.181 ops/s
Iteration  12: 5010626.848 ops/s
Iteration  13: 4929994.422 ops/s
Iteration  14: 4871489.660 ops/s
Iteration  15: 4944730.565 ops/s
Iteration  16: 4851528.690 ops/s
Iteration  17: 5005625.688 ops/s
Iteration  18: 4882610.842 ops/s
Iteration  19: 4806568.413 ops/s
Iteration  20: 5067723.508 ops/s
Iteration  21: 4953712.272 ops/s
Iteration  22: 4891320.126 ops/s
Iteration  23: 5144990.084 ops/s
Iteration  24: 4744318.085 ops/s
Iteration  25: 4911027.193 ops/s
Iteration  26: 4982055.070 ops/s
Iteration  27: 4766285.138 ops/s
Iteration  28: 5060183.386 ops/s
Iteration  29: 4983921.117 ops/s
Iteration  30: 4900504.105 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_cancelComposes":
  4922648.841 ±(99.9%) 69938.406 ops/s [Average]
  (min, avg, max) = (4738705.548, 4922648.841, 5144990.084), stdev = 104680.521
  CI (99.9%): [4852710.435, 4992587.247] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SingleFromMaybeTest._Benchmark.benchmark_cancelComposes  thrpt   30  4922648.841 ± 69938.406  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerDisposedOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerDisposedOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1565177.338 ops/s
# Warmup Iteration   2: 3841729.405 ops/s
# Warmup Iteration   3: 5629786.393 ops/s
# Warmup Iteration   4: 5393865.507 ops/s
# Warmup Iteration   5: 5698944.261 ops/s
# Warmup Iteration   6: 5476720.804 ops/s
# Warmup Iteration   7: 5337468.242 ops/s
# Warmup Iteration   8: 5449326.069 ops/s
# Warmup Iteration   9: 5486105.459 ops/s
# Warmup Iteration  10: 5502995.787 ops/s
# Warmup Iteration  11: 5698978.948 ops/s
# Warmup Iteration  12: 5604716.057 ops/s
# Warmup Iteration  13: 5499612.314 ops/s
# Warmup Iteration  14: 5500046.863 ops/s
# Warmup Iteration  15: 5529134.933 ops/s
# Warmup Iteration  16: 5458332.578 ops/s
# Warmup Iteration  17: 5709972.101 ops/s
# Warmup Iteration  18: 5285393.017 ops/s
# Warmup Iteration  19: 5720435.778 ops/s
# Warmup Iteration  20: 5432545.145 ops/s
# Warmup Iteration  21: 5637848.772 ops/s
# Warmup Iteration  22: 5505625.877 ops/s
# Warmup Iteration  23: 5524705.165 ops/s
# Warmup Iteration  24: 5520809.406 ops/s
# Warmup Iteration  25: 5478234.266 ops/s
# Warmup Iteration  26: 5481400.010 ops/s
# Warmup Iteration  27: 5582845.732 ops/s
# Warmup Iteration  28: 5437286.336 ops/s
# Warmup Iteration  29: 5693902.089 ops/s
# Warmup Iteration  30: 5601553.338 ops/s
Iteration   1: 5500408.103 ops/s
Iteration   2: 5708604.192 ops/s
Iteration   3: 5371572.108 ops/s
Iteration   4: 5460065.271 ops/s
Iteration   5: 5764196.542 ops/s
Iteration   6: 5388528.651 ops/s
Iteration   7: 5720761.261 ops/s
Iteration   8: 5486074.654 ops/s
Iteration   9: 5485752.209 ops/s
Iteration  10: 5707254.126 ops/s
Iteration  11: 5466402.304 ops/s
Iteration  12: 5455909.806 ops/s
Iteration  13: 5596127.597 ops/s
Iteration  14: 5446827.659 ops/s
Iteration  15: 5306059.420 ops/s
Iteration  16: 5663270.312 ops/s
Iteration  17: 5369881.466 ops/s
Iteration  18: 5565081.433 ops/s
Iteration  19: 5738225.422 ops/s
Iteration  20: 5242781.668 ops/s
Iteration  21: 5712961.222 ops/s
Iteration  22: 5509155.198 ops/s
Iteration  23: 5496375.987 ops/s
Iteration  24: 5726878.658 ops/s
Iteration  25: 5482158.351 ops/s
Iteration  26: 5608208.367 ops/s
Iteration  27: 5440377.861 ops/s
Iteration  28: 5465906.799 ops/s
Iteration  29: 5646437.807 ops/s
Iteration  30: 5460604.120 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerDisposedOnComplete":
  5533094.952 ±(99.9%) 93107.975 ops/s [Average]
  (min, avg, max) = (5242781.668, 5533094.952, 5764196.542), stdev = 139359.644
  CI (99.9%): [5439986.977, 5626202.927] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableUsingTest._Benchmark.benchmark_eagerDisposedOnComplete  thrpt   30  5533094.952 ± 93107.975  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecentTest._Benchmark.benchmark_singleSourceManyIterators$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecentTest._Benchmark.benchmark_singleSourceManyIterators

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 34610.039 ops/s
# Warmup Iteration   2: 135042.069 ops/s
# Warmup Iteration   3: 145195.401 ops/s
# Warmup Iteration   4: 138573.338 ops/s
# Warmup Iteration   5: 152745.440 ops/s
# Warmup Iteration   6: 140390.812 ops/s
# Warmup Iteration   7: 157746.439 ops/s
# Warmup Iteration   8: 159752.740 ops/s
# Warmup Iteration   9: 156694.940 ops/s
# Warmup Iteration  10: 123040.505 ops/s
# Warmup Iteration  11: 161033.145 ops/s
# Warmup Iteration  12: 154739.984 ops/s
# Warmup Iteration  13: 159344.349 ops/s
# Warmup Iteration  14: 153873.498 ops/s
# Warmup Iteration  15: 160065.727 ops/s
# Warmup Iteration  16: 156781.328 ops/s
# Warmup Iteration  17: 150804.419 ops/s
# Warmup Iteration  18: 155632.705 ops/s
# Warmup Iteration  19: 151977.386 ops/s
# Warmup Iteration  20: 167202.195 ops/s
# Warmup Iteration  21: 149431.314 ops/s
# Warmup Iteration  22: 148805.533 ops/s
# Warmup Iteration  23: 158932.371 ops/s
# Warmup Iteration  24: 147415.641 ops/s
# Warmup Iteration  25: 159449.982 ops/s
# Warmup Iteration  26: 149416.739 ops/s
# Warmup Iteration  27: 156805.891 ops/s
# Warmup Iteration  28: 154596.821 ops/s
# Warmup Iteration  29: 153747.133 ops/s
# Warmup Iteration  30: 151033.900 ops/s
Iteration   1: 151533.021 ops/s
Iteration   2: 155759.580 ops/s
Iteration   3: 150411.017 ops/s
Iteration   4: 152208.474 ops/s
Iteration   5: 156907.936 ops/s
Iteration   6: 154118.331 ops/s
Iteration   7: 155668.097 ops/s
Iteration   8: 159428.299 ops/s
Iteration   9: 151043.648 ops/s
Iteration  10: 155371.316 ops/s
Iteration  11: 153909.310 ops/s
Iteration  12: 150649.160 ops/s
Iteration  13: 152947.066 ops/s
Iteration  14: 153694.826 ops/s
Iteration  15: 151398.763 ops/s
Iteration  16: 157657.952 ops/s
Iteration  17: 146078.511 ops/s
Iteration  18: 155063.601 ops/s
Iteration  19: 145779.590 ops/s
Iteration  20: 162280.551 ops/s
Iteration  21: 153930.912 ops/s
Iteration  22: 161071.303 ops/s
Iteration  23: 149349.528 ops/s
Iteration  24: 158652.264 ops/s
Iteration  25: 150421.035 ops/s
Iteration  26: 159231.707 ops/s
Iteration  27: 159969.382 ops/s
Iteration  28: 151942.530 ops/s
Iteration  29: 152423.461 ops/s
Iteration  30: 158991.065 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecentTest._Benchmark.benchmark_singleSourceManyIterators":
  154263.075 ±(99.9%) 2795.925 ops/s [Average]
  (min, avg, max) = (145779.590, 154263.075, 162280.551), stdev = 4184.809
  CI (99.9%): [151467.150, 157058.999] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
BlockingObservableMostRecentTest._Benchmark.benchmark_singleSourceManyIterators  thrpt   30  154263.075 ± 2795.925  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109040.730 ops/s
# Warmup Iteration   2: 530786.688 ops/s
# Warmup Iteration   3: 646614.375 ops/s
# Warmup Iteration   4: 654731.548 ops/s
# Warmup Iteration   5: 687489.728 ops/s
# Warmup Iteration   6: 669705.907 ops/s
# Warmup Iteration   7: 649632.845 ops/s
# Warmup Iteration   8: 669862.460 ops/s
# Warmup Iteration   9: 662673.101 ops/s
# Warmup Iteration  10: 658451.371 ops/s
# Warmup Iteration  11: 690403.861 ops/s
# Warmup Iteration  12: 647755.439 ops/s
# Warmup Iteration  13: 688516.875 ops/s
# Warmup Iteration  14: 640968.655 ops/s
# Warmup Iteration  15: 675772.572 ops/s
# Warmup Iteration  16: 666809.896 ops/s
# Warmup Iteration  17: 690384.872 ops/s
# Warmup Iteration  18: 738540.962 ops/s
# Warmup Iteration  19: 685235.007 ops/s
# Warmup Iteration  20: 731445.780 ops/s
# Warmup Iteration  21: 698012.171 ops/s
# Warmup Iteration  22: 721456.202 ops/s
# Warmup Iteration  23: 684869.853 ops/s
# Warmup Iteration  24: 693031.492 ops/s
# Warmup Iteration  25: 701106.403 ops/s
# Warmup Iteration  26: 693514.987 ops/s
# Warmup Iteration  27: 710124.620 ops/s
# Warmup Iteration  28: 736192.405 ops/s
# Warmup Iteration  29: 690045.571 ops/s
# Warmup Iteration  30: 727461.719 ops/s
Iteration   1: 690346.809 ops/s
Iteration   2: 722699.237 ops/s
Iteration   3: 681337.800 ops/s
Iteration   4: 702699.421 ops/s
Iteration   5: 713791.622 ops/s
Iteration   6: 686493.975 ops/s
Iteration   7: 684756.283 ops/s
Iteration   8: 713240.598 ops/s
Iteration   9: 700325.035 ops/s
Iteration  10: 710998.079 ops/s
Iteration  11: 672325.959 ops/s
Iteration  12: 713500.223 ops/s
Iteration  13: 703699.371 ops/s
Iteration  14: 693349.304 ops/s
Iteration  15: 697793.215 ops/s
Iteration  16: 721375.989 ops/s
Iteration  17: 683758.357 ops/s
Iteration  18: 667206.527 ops/s
Iteration  19: 734239.931 ops/s
Iteration  20: 677939.721 ops/s
Iteration  21: 744770.176 ops/s
Iteration  22: 683669.349 ops/s
Iteration  23: 683244.198 ops/s
Iteration  24: 742880.440 ops/s
Iteration  25: 670949.222 ops/s
Iteration  26: 705264.887 ops/s
Iteration  27: 721008.627 ops/s
Iteration  28: 730446.913 ops/s
Iteration  29: 692793.725 ops/s
Iteration  30: 705649.783 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_mainError":
  701751.826 ±(99.9%) 14120.484 ops/s [Average]
  (min, avg, max) = (667206.527, 701751.826, 744770.176), stdev = 21134.878
  CI (99.9%): [687631.342, 715872.310] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_mainError  thrpt   30  701751.826 ± 14120.484  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 178150.061 ops/s
# Warmup Iteration   2: 889851.804 ops/s
# Warmup Iteration   3: 1694143.594 ops/s
# Warmup Iteration   4: 1907629.056 ops/s
# Warmup Iteration   5: 1696736.221 ops/s
# Warmup Iteration   6: 1937352.562 ops/s
# Warmup Iteration   7: 2087674.719 ops/s
# Warmup Iteration   8: 1954323.848 ops/s
# Warmup Iteration   9: 1996450.934 ops/s
# Warmup Iteration  10: 1963781.616 ops/s
# Warmup Iteration  11: 2065020.934 ops/s
# Warmup Iteration  12: 1980755.688 ops/s
# Warmup Iteration  13: 2028144.824 ops/s
# Warmup Iteration  14: 2017142.788 ops/s
# Warmup Iteration  15: 2006326.357 ops/s
# Warmup Iteration  16: 1933872.725 ops/s
# Warmup Iteration  17: 2015385.636 ops/s
# Warmup Iteration  18: 2018913.356 ops/s
# Warmup Iteration  19: 1861785.603 ops/s
# Warmup Iteration  20: 1992107.970 ops/s
# Warmup Iteration  21: 1926137.414 ops/s
# Warmup Iteration  22: 2011794.700 ops/s
# Warmup Iteration  23: 2048480.165 ops/s
# Warmup Iteration  24: 1978171.592 ops/s
# Warmup Iteration  25: 1959035.809 ops/s
# Warmup Iteration  26: 2008757.149 ops/s
# Warmup Iteration  27: 1991974.458 ops/s
# Warmup Iteration  28: 2010047.877 ops/s
# Warmup Iteration  29: 1949145.121 ops/s
# Warmup Iteration  30: 1974826.045 ops/s
Iteration   1: 2064461.446 ops/s
Iteration   2: 2034969.418 ops/s
Iteration   3: 1969142.162 ops/s
Iteration   4: 2006708.805 ops/s
Iteration   5: 2029927.874 ops/s
Iteration   6: 1957993.793 ops/s
Iteration   7: 2069187.257 ops/s
Iteration   8: 1944831.904 ops/s
Iteration   9: 2040387.852 ops/s
Iteration  10: 1990944.785 ops/s
Iteration  11: 2045382.422 ops/s
Iteration  12: 1927710.871 ops/s
Iteration  13: 1953127.056 ops/s
Iteration  14: 2055541.286 ops/s
Iteration  15: 2003832.011 ops/s
Iteration  16: 1900928.418 ops/s
Iteration  17: 1982967.804 ops/s
Iteration  18: 1979094.693 ops/s
Iteration  19: 1949171.892 ops/s
Iteration  20: 2042142.155 ops/s
Iteration  21: 1964458.245 ops/s
Iteration  22: 2045407.167 ops/s
Iteration  23: 1981783.315 ops/s
Iteration  24: 1964790.917 ops/s
Iteration  25: 1978443.231 ops/s
Iteration  26: 2008848.027 ops/s
Iteration  27: 2021079.567 ops/s
Iteration  28: 1973640.182 ops/s
Iteration  29: 1959293.109 ops/s
Iteration  30: 2077096.171 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSize":
  1997443.128 ±(99.9%) 30401.409 ops/s [Average]
  (min, avg, max) = (1900928.418, 1997443.128, 2077096.171), stdev = 45503.402
  CI (99.9%): [1967041.719, 2027844.537] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSize  thrpt   30  1997443.128 ± 30401.409  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 640900.978 ops/s
# Warmup Iteration   2: 3030090.624 ops/s
# Warmup Iteration   3: 4705959.380 ops/s
# Warmup Iteration   4: 4470378.253 ops/s
# Warmup Iteration   5: 4775844.094 ops/s
# Warmup Iteration   6: 4459298.332 ops/s
# Warmup Iteration   7: 4084073.667 ops/s
# Warmup Iteration   8: 4509354.032 ops/s
# Warmup Iteration   9: 4566027.773 ops/s
# Warmup Iteration  10: 4752914.113 ops/s
# Warmup Iteration  11: 4820898.577 ops/s
# Warmup Iteration  12: 4557035.908 ops/s
# Warmup Iteration  13: 4681874.189 ops/s
# Warmup Iteration  14: 4666075.419 ops/s
# Warmup Iteration  15: 4692868.821 ops/s
# Warmup Iteration  16: 4648805.876 ops/s
# Warmup Iteration  17: 4570811.702 ops/s
# Warmup Iteration  18: 4749942.978 ops/s
# Warmup Iteration  19: 4609961.662 ops/s
# Warmup Iteration  20: 4778884.045 ops/s
# Warmup Iteration  21: 4778873.535 ops/s
# Warmup Iteration  22: 4653262.596 ops/s
# Warmup Iteration  23: 4662849.677 ops/s
# Warmup Iteration  24: 4697915.724 ops/s
# Warmup Iteration  25: 4563416.682 ops/s
# Warmup Iteration  26: 4545416.306 ops/s
# Warmup Iteration  27: 4725226.744 ops/s
# Warmup Iteration  28: 4517864.757 ops/s
# Warmup Iteration  29: 4770519.778 ops/s
# Warmup Iteration  30: 4437023.920 ops/s
Iteration   1: 4737779.494 ops/s
Iteration   2: 4870095.126 ops/s
Iteration   3: 4780407.698 ops/s
Iteration   4: 4553936.875 ops/s
Iteration   5: 4864513.043 ops/s
Iteration   6: 4698604.421 ops/s
Iteration   7: 4436670.544 ops/s
Iteration   8: 4809889.853 ops/s
Iteration   9: 4517474.496 ops/s
Iteration  10: 4697456.130 ops/s
Iteration  11: 4501510.339 ops/s
Iteration  12: 4707850.594 ops/s
Iteration  13: 4740671.103 ops/s
Iteration  14: 4530531.805 ops/s
Iteration  15: 4575526.168 ops/s
Iteration  16: 4807551.659 ops/s
Iteration  17: 4741380.028 ops/s
Iteration  18: 4621730.377 ops/s
Iteration  19: 4837823.804 ops/s
Iteration  20: 4530560.753 ops/s
Iteration  21: 4572129.754 ops/s
Iteration  22: 4768378.410 ops/s
Iteration  23: 4517846.453 ops/s
Iteration  24: 4595748.278 ops/s
Iteration  25: 4841453.237 ops/s
Iteration  26: 4567361.957 ops/s
Iteration  27: 4791112.022 ops/s
Iteration  28: 4550975.988 ops/s
Iteration  29: 4863275.826 ops/s
Iteration  30: 4569696.320 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream":
  4673331.418 ±(99.9%) 88417.153 ops/s [Average]
  (min, avg, max) = (4436670.544, 4673331.418, 4870095.126), stdev = 132338.643
  CI (99.9%): [4584914.265, 4761748.572] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MaybeUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream  thrpt   30  4673331.418 ± 88417.153  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 799587.159 ops/s
# Warmup Iteration   2: 2937870.255 ops/s
# Warmup Iteration   3: 3972654.600 ops/s
# Warmup Iteration   4: 4437349.196 ops/s
# Warmup Iteration   5: 4461240.464 ops/s
# Warmup Iteration   6: 4634142.688 ops/s
# Warmup Iteration   7: 4423017.853 ops/s
# Warmup Iteration   8: 4547270.452 ops/s
# Warmup Iteration   9: 4624068.762 ops/s
# Warmup Iteration  10: 4376860.018 ops/s
# Warmup Iteration  11: 4467532.005 ops/s
# Warmup Iteration  12: 4722948.331 ops/s
# Warmup Iteration  13: 4362347.164 ops/s
# Warmup Iteration  14: 4724059.922 ops/s
# Warmup Iteration  15: 4372855.572 ops/s
# Warmup Iteration  16: 4570934.061 ops/s
# Warmup Iteration  17: 4393408.779 ops/s
# Warmup Iteration  18: 4690779.386 ops/s
# Warmup Iteration  19: 4598303.577 ops/s
# Warmup Iteration  20: 4542789.877 ops/s
# Warmup Iteration  21: 4548075.692 ops/s
# Warmup Iteration  22: 4422088.153 ops/s
# Warmup Iteration  23: 4472312.722 ops/s
# Warmup Iteration  24: 4582528.496 ops/s
# Warmup Iteration  25: 4469068.783 ops/s
# Warmup Iteration  26: 4510640.862 ops/s
# Warmup Iteration  27: 4314876.323 ops/s
# Warmup Iteration  28: 4679385.597 ops/s
# Warmup Iteration  29: 4477242.392 ops/s
# Warmup Iteration  30: 4634527.091 ops/s
Iteration   1: 4528064.102 ops/s
Iteration   2: 4353659.048 ops/s
Iteration   3: 4543168.034 ops/s
Iteration   4: 4345317.401 ops/s
Iteration   5: 4656163.125 ops/s
Iteration   6: 4371671.435 ops/s
Iteration   7: 4351098.284 ops/s
Iteration   8: 4688937.851 ops/s
Iteration   9: 4458778.433 ops/s
Iteration  10: 4641506.692 ops/s
Iteration  11: 4463097.239 ops/s
Iteration  12: 4523745.950 ops/s
Iteration  13: 4583974.759 ops/s
Iteration  14: 4401380.814 ops/s
Iteration  15: 4665437.607 ops/s
Iteration  16: 4534161.156 ops/s
Iteration  17: 4675835.361 ops/s
Iteration  18: 4645725.483 ops/s
Iteration  19: 4417734.929 ops/s
Iteration  20: 4575798.416 ops/s
Iteration  21: 4395156.977 ops/s
Iteration  22: 4405640.952 ops/s
Iteration  23: 4605849.685 ops/s
Iteration  24: 4474853.285 ops/s
Iteration  25: 4563624.917 ops/s
Iteration  26: 4592680.664 ops/s
Iteration  27: 4525742.834 ops/s
Iteration  28: 4681595.648 ops/s
Iteration  29: 4457592.629 ops/s
Iteration  30: 4575266.370 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource":
  4523442.003 ±(99.9%) 73328.369 ops/s [Average]
  (min, avg, max) = (4345317.401, 4523442.003, 4688937.851), stdev = 109754.459
  CI (99.9%): [4450113.634, 4596770.371] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MaybeUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource  thrpt   30  4523442.003 ± 73328.369  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 572805.506 ops/s
# Warmup Iteration   2: 1716730.125 ops/s
# Warmup Iteration   3: 2453285.725 ops/s
# Warmup Iteration   4: 2803647.405 ops/s
# Warmup Iteration   5: 3072159.523 ops/s
# Warmup Iteration   6: 3014957.327 ops/s
# Warmup Iteration   7: 3094868.707 ops/s
# Warmup Iteration   8: 2960256.181 ops/s
# Warmup Iteration   9: 3000661.495 ops/s
# Warmup Iteration  10: 3132253.454 ops/s
# Warmup Iteration  11: 3019464.126 ops/s
# Warmup Iteration  12: 3010894.904 ops/s
# Warmup Iteration  13: 3088456.698 ops/s
# Warmup Iteration  14: 3042164.598 ops/s
# Warmup Iteration  15: 3061517.509 ops/s
# Warmup Iteration  16: 2949372.012 ops/s
# Warmup Iteration  17: 2959648.035 ops/s
# Warmup Iteration  18: 3127145.720 ops/s
# Warmup Iteration  19: 2884016.071 ops/s
# Warmup Iteration  20: 3041783.097 ops/s
# Warmup Iteration  21: 2980280.918 ops/s
# Warmup Iteration  22: 3107240.091 ops/s
# Warmup Iteration  23: 2928236.369 ops/s
# Warmup Iteration  24: 3012067.547 ops/s
# Warmup Iteration  25: 3065044.707 ops/s
# Warmup Iteration  26: 2946437.373 ops/s
# Warmup Iteration  27: 2985949.077 ops/s
# Warmup Iteration  28: 3016007.014 ops/s
# Warmup Iteration  29: 2923403.307 ops/s
# Warmup Iteration  30: 3107526.245 ops/s
Iteration   1: 3030004.112 ops/s
Iteration   2: 3093102.280 ops/s
Iteration   3: 3036911.788 ops/s
Iteration   4: 2978118.685 ops/s
Iteration   5: 3078658.640 ops/s
Iteration   6: 2937724.188 ops/s
Iteration   7: 3054444.229 ops/s
Iteration   8: 3024519.354 ops/s
Iteration   9: 2956378.965 ops/s
Iteration  10: 2990801.978 ops/s
Iteration  11: 2861677.976 ops/s
Iteration  12: 2986627.433 ops/s
Iteration  13: 3038355.278 ops/s
Iteration  14: 2845097.726 ops/s
Iteration  15: 3022201.711 ops/s
Iteration  16: 3093335.481 ops/s
Iteration  17: 2961757.053 ops/s
Iteration  18: 2988261.810 ops/s
Iteration  19: 3194411.524 ops/s
Iteration  20: 2944612.536 ops/s
Iteration  21: 3073113.891 ops/s
Iteration  22: 2856055.529 ops/s
Iteration  23: 3049987.781 ops/s
Iteration  24: 2978559.712 ops/s
Iteration  25: 3008111.690 ops/s
Iteration  26: 2545387.344 ops/s
Iteration  27: 2931964.879 ops/s
Iteration  28: 3080655.833 ops/s
Iteration  29: 2928516.439 ops/s
Iteration  30: 3050909.540 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_dispose":
  2987342.180 ±(99.9%) 75798.362 ops/s [Average]
  (min, avg, max) = (2545387.344, 2987342.180, 3194411.524), stdev = 113451.428
  CI (99.9%): [2911543.818, 3063140.542] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_dispose  thrpt   30  2987342.180 ± 75798.362  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 456020.975 ops/s
# Warmup Iteration   2: 1903800.565 ops/s
# Warmup Iteration   3: 2137822.553 ops/s
# Warmup Iteration   4: 2563375.141 ops/s
# Warmup Iteration   5: 2577143.121 ops/s
# Warmup Iteration   6: 2604952.266 ops/s
# Warmup Iteration   7: 2654568.715 ops/s
# Warmup Iteration   8: 2471943.039 ops/s
# Warmup Iteration   9: 2594624.083 ops/s
# Warmup Iteration  10: 2574307.831 ops/s
# Warmup Iteration  11: 2551823.060 ops/s
# Warmup Iteration  12: 2488189.494 ops/s
# Warmup Iteration  13: 2535935.626 ops/s
# Warmup Iteration  14: 2649332.878 ops/s
# Warmup Iteration  15: 2480721.840 ops/s
# Warmup Iteration  16: 2612371.981 ops/s
# Warmup Iteration  17: 2586668.913 ops/s
# Warmup Iteration  18: 2680295.904 ops/s
# Warmup Iteration  19: 2592758.543 ops/s
# Warmup Iteration  20: 2540734.762 ops/s
# Warmup Iteration  21: 2711967.513 ops/s
# Warmup Iteration  22: 2479923.076 ops/s
# Warmup Iteration  23: 2660050.185 ops/s
# Warmup Iteration  24: 2562122.339 ops/s
# Warmup Iteration  25: 2538394.003 ops/s
# Warmup Iteration  26: 2689829.372 ops/s
# Warmup Iteration  27: 2628321.144 ops/s
# Warmup Iteration  28: 2547320.323 ops/s
# Warmup Iteration  29: 2613149.482 ops/s
# Warmup Iteration  30: 2570574.369 ops/s
Iteration   1: 2663483.018 ops/s
Iteration   2: 2529820.952 ops/s
Iteration   3: 2652978.063 ops/s
Iteration   4: 2546762.337 ops/s
Iteration   5: 2558685.824 ops/s
Iteration   6: 2672320.357 ops/s
Iteration   7: 2620434.291 ops/s
Iteration   8: 2508986.163 ops/s
Iteration   9: 2586885.215 ops/s
Iteration  10: 2649320.207 ops/s
Iteration  11: 2562767.765 ops/s
Iteration  12: 2624236.278 ops/s
Iteration  13: 2523921.889 ops/s
Iteration  14: 2623258.637 ops/s
Iteration  15: 2712350.202 ops/s
Iteration  16: 2653819.601 ops/s
Iteration  17: 2531376.375 ops/s
Iteration  18: 2500886.159 ops/s
Iteration  19: 2612686.046 ops/s
Iteration  20: 2537940.359 ops/s
Iteration  21: 2647788.053 ops/s
Iteration  22: 2530148.420 ops/s
Iteration  23: 2625966.744 ops/s
Iteration  24: 2524462.689 ops/s
Iteration  25: 2640198.470 ops/s
Iteration  26: 2427129.734 ops/s
Iteration  27: 2602653.715 ops/s
Iteration  28: 2632629.536 ops/s
Iteration  29: 2549736.486 ops/s
Iteration  30: 2499559.261 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_dispose":
  2585106.428 ±(99.9%) 44262.084 ops/s [Average]
  (min, avg, max) = (2427129.734, 2585106.428, 2712350.202), stdev = 66249.408
  CI (99.9%): [2540844.344, 2629368.512] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableTimeoutWithSelectorTest._Benchmark.benchmark_dispose  thrpt   30  2585106.428 ± 44262.084  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 547820.388 ops/s
# Warmup Iteration   2: 1550272.230 ops/s
# Warmup Iteration   3: 2298292.288 ops/s
# Warmup Iteration   4: 2547548.288 ops/s
# Warmup Iteration   5: 2563801.685 ops/s
# Warmup Iteration   6: 2514250.184 ops/s
# Warmup Iteration   7: 2479382.554 ops/s
# Warmup Iteration   8: 2559282.393 ops/s
# Warmup Iteration   9: 2499106.952 ops/s
# Warmup Iteration  10: 2581882.098 ops/s
# Warmup Iteration  11: 2569370.592 ops/s
# Warmup Iteration  12: 2419303.638 ops/s
# Warmup Iteration  13: 2635389.525 ops/s
# Warmup Iteration  14: 2498175.907 ops/s
# Warmup Iteration  15: 2598796.761 ops/s
# Warmup Iteration  16: 2516014.611 ops/s
# Warmup Iteration  17: 2460273.145 ops/s
# Warmup Iteration  18: 2486236.843 ops/s
# Warmup Iteration  19: 2540994.735 ops/s
# Warmup Iteration  20: 2508051.430 ops/s
# Warmup Iteration  21: 2682300.943 ops/s
# Warmup Iteration  22: 2542599.011 ops/s
# Warmup Iteration  23: 2423998.184 ops/s
# Warmup Iteration  24: 2565532.785 ops/s
# Warmup Iteration  25: 2619141.425 ops/s
# Warmup Iteration  26: 2578322.226 ops/s
# Warmup Iteration  27: 2439413.012 ops/s
# Warmup Iteration  28: 2501296.522 ops/s
# Warmup Iteration  29: 2622392.288 ops/s
# Warmup Iteration  30: 2450472.938 ops/s
Iteration   1: 2491999.913 ops/s
Iteration   2: 2536740.711 ops/s
Iteration   3: 2666389.914 ops/s
Iteration   4: 2429537.023 ops/s
Iteration   5: 2539711.575 ops/s
Iteration   6: 2542313.561 ops/s
Iteration   7: 2523319.702 ops/s
Iteration   8: 2584617.316 ops/s
Iteration   9: 2446145.655 ops/s
Iteration  10: 2565106.356 ops/s
Iteration  11: 2470702.783 ops/s
Iteration  12: 2513388.813 ops/s
Iteration  13: 2536966.579 ops/s
Iteration  14: 2422815.662 ops/s
Iteration  15: 2584439.940 ops/s
Iteration  16: 2501020.263 ops/s
Iteration  17: 2506063.861 ops/s
Iteration  18: 2538548.740 ops/s
Iteration  19: 2482126.615 ops/s
Iteration  20: 2384316.607 ops/s
Iteration  21: 2268601.177 ops/s
Iteration  22: 2589413.412 ops/s
Iteration  23: 2420343.732 ops/s
Iteration  24: 2546296.303 ops/s
Iteration  25: 2554252.188 ops/s
Iteration  26: 2395472.541 ops/s
Iteration  27: 2623866.469 ops/s
Iteration  28: 2447177.249 ops/s
Iteration  29: 2512167.607 ops/s
Iteration  30: 2616503.208 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose":
  2508012.182 ±(99.9%) 55040.728 ops/s [Average]
  (min, avg, max) = (2268601.177, 2508012.182, 2666389.914), stdev = 82382.377
  CI (99.9%): [2452971.454, 2563052.911] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt        Score       Error  Units
ObservableTimeoutTests._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose  thrpt   30  2508012.182 ± 55040.728  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 138006.309 ops/s
# Warmup Iteration   2: 706856.304 ops/s
# Warmup Iteration   3: 1670850.953 ops/s
# Warmup Iteration   4: 1801840.436 ops/s
# Warmup Iteration   5: 1846017.490 ops/s
# Warmup Iteration   6: 1867745.766 ops/s
# Warmup Iteration   7: 1785626.035 ops/s
# Warmup Iteration   8: 1860125.741 ops/s
# Warmup Iteration   9: 1777833.314 ops/s
# Warmup Iteration  10: 1707895.722 ops/s
# Warmup Iteration  11: 1766674.812 ops/s
# Warmup Iteration  12: 1933967.392 ops/s
# Warmup Iteration  13: 1798046.361 ops/s
# Warmup Iteration  14: 1913721.578 ops/s
# Warmup Iteration  15: 1787299.661 ops/s
# Warmup Iteration  16: 1881606.489 ops/s
# Warmup Iteration  17: 1853625.730 ops/s
# Warmup Iteration  18: 1849498.458 ops/s
# Warmup Iteration  19: 1821078.085 ops/s
# Warmup Iteration  20: 1886281.457 ops/s
# Warmup Iteration  21: 1787936.391 ops/s
# Warmup Iteration  22: 1922836.311 ops/s
# Warmup Iteration  23: 1845435.830 ops/s
# Warmup Iteration  24: 1915048.193 ops/s
# Warmup Iteration  25: 1802823.087 ops/s
# Warmup Iteration  26: 1866417.884 ops/s
# Warmup Iteration  27: 1790309.339 ops/s
# Warmup Iteration  28: 1899494.804 ops/s
# Warmup Iteration  29: 1788342.175 ops/s
# Warmup Iteration  30: 1910635.784 ops/s
Iteration   1: 1814254.178 ops/s
Iteration   2: 1916617.930 ops/s
Iteration   3: 1847388.842 ops/s
Iteration   4: 1865706.858 ops/s
Iteration   5: 1909142.355 ops/s
Iteration   6: 1786658.479 ops/s
Iteration   7: 1879488.168 ops/s
Iteration   8: 1817726.421 ops/s
Iteration   9: 1888511.474 ops/s
Iteration  10: 1898793.956 ops/s
Iteration  11: 1827582.466 ops/s
Iteration  12: 1880230.976 ops/s
Iteration  13: 1789727.262 ops/s
Iteration  14: 1812495.088 ops/s
Iteration  15: 1887510.115 ops/s
Iteration  16: 1847790.882 ops/s
Iteration  17: 1800730.791 ops/s
Iteration  18: 1842571.235 ops/s
Iteration  19: 1878544.418 ops/s
Iteration  20: 1863764.409 ops/s
Iteration  21: 1857961.235 ops/s
Iteration  22: 1870368.674 ops/s
Iteration  23: 1894393.480 ops/s
Iteration  24: 1858197.061 ops/s
Iteration  25: 1821103.956 ops/s
Iteration  26: 1846193.142 ops/s
Iteration  27: 1775874.368 ops/s
Iteration  28: 1873729.663 ops/s
Iteration  29: 1837303.148 ops/s
Iteration  30: 1818264.599 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSkip":
  1850287.521 ±(99.9%) 25182.003 ops/s [Average]
  (min, avg, max) = (1775874.368, 1850287.521, 1916617.930), stdev = 37691.240
  CI (99.9%): [1825105.518, 1875469.524] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSkip  thrpt   30  1850287.521 ± 25182.003  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 112572.244 ops/s
# Warmup Iteration   2: 574291.549 ops/s
# Warmup Iteration   3: 1699280.581 ops/s
# Warmup Iteration   4: 1799920.552 ops/s
# Warmup Iteration   5: 1662751.827 ops/s
# Warmup Iteration   6: 1781892.729 ops/s
# Warmup Iteration   7: 1723854.126 ops/s
# Warmup Iteration   8: 1552336.548 ops/s
# Warmup Iteration   9: 1776592.803 ops/s
# Warmup Iteration  10: 1781201.605 ops/s
# Warmup Iteration  11: 1736350.263 ops/s
# Warmup Iteration  12: 1841425.575 ops/s
# Warmup Iteration  13: 1744798.761 ops/s
# Warmup Iteration  14: 1818105.507 ops/s
# Warmup Iteration  15: 1737694.169 ops/s
# Warmup Iteration  16: 1785421.010 ops/s
# Warmup Iteration  17: 1840860.746 ops/s
# Warmup Iteration  18: 1737803.361 ops/s
# Warmup Iteration  19: 1891493.640 ops/s
# Warmup Iteration  20: 1869393.172 ops/s
# Warmup Iteration  21: 1723292.086 ops/s
# Warmup Iteration  22: 1821814.424 ops/s
# Warmup Iteration  23: 1796512.824 ops/s
# Warmup Iteration  24: 1796294.925 ops/s
# Warmup Iteration  25: 1858292.512 ops/s
# Warmup Iteration  26: 1785881.826 ops/s
# Warmup Iteration  27: 1841395.455 ops/s
# Warmup Iteration  28: 1765197.917 ops/s
# Warmup Iteration  29: 1851945.777 ops/s
# Warmup Iteration  30: 1772824.877 ops/s
Iteration   1: 1793324.319 ops/s
Iteration   2: 1823281.668 ops/s
Iteration   3: 1756142.612 ops/s
Iteration   4: 1866780.023 ops/s
Iteration   5: 1727527.870 ops/s
Iteration   6: 1838578.470 ops/s
Iteration   7: 1777350.510 ops/s
Iteration   8: 1809169.235 ops/s
Iteration   9: 1794889.465 ops/s
Iteration  10: 1786030.710 ops/s
Iteration  11: 1770306.074 ops/s
Iteration  12: 1799203.847 ops/s
Iteration  13: 1783258.366 ops/s
Iteration  14: 1744111.847 ops/s
Iteration  15: 1495348.012 ops/s
Iteration  16: 1830293.892 ops/s
Iteration  17: 1749769.760 ops/s
Iteration  18: 1814219.654 ops/s
Iteration  19: 1757761.700 ops/s
Iteration  20: 1863827.754 ops/s
Iteration  21: 1826267.125 ops/s
Iteration  22: 1759166.731 ops/s
Iteration  23: 1797491.744 ops/s
Iteration  24: 1848648.278 ops/s
Iteration  25: 1765196.562 ops/s
Iteration  26: 1845611.982 ops/s
Iteration  27: 1800428.700 ops/s
Iteration  28: 1877350.429 ops/s
Iteration  29: 1746235.508 ops/s
Iteration  30: 1731484.882 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentOverlap":
  1785968.591 ±(99.9%) 45889.510 ops/s [Average]
  (min, avg, max) = (1495348.012, 1785968.591, 1877350.429), stdev = 68685.264
  CI (99.9%): [1740079.081, 1831858.101] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentOverlap  thrpt   30  1785968.591 ± 45889.510  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapScalarBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapScalarBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 317162.660 ops/s
# Warmup Iteration   2: 1607465.634 ops/s
# Warmup Iteration   3: 1832329.609 ops/s
# Warmup Iteration   4: 1819194.416 ops/s
# Warmup Iteration   5: 1844602.264 ops/s
# Warmup Iteration   6: 1841715.735 ops/s
# Warmup Iteration   7: 1803927.060 ops/s
# Warmup Iteration   8: 1718236.600 ops/s
# Warmup Iteration   9: 1825126.773 ops/s
# Warmup Iteration  10: 1888723.099 ops/s
# Warmup Iteration  11: 1826035.210 ops/s
# Warmup Iteration  12: 1901940.087 ops/s
# Warmup Iteration  13: 1801463.898 ops/s
# Warmup Iteration  14: 1875819.818 ops/s
# Warmup Iteration  15: 1803927.765 ops/s
# Warmup Iteration  16: 1829340.479 ops/s
# Warmup Iteration  17: 1891180.045 ops/s
# Warmup Iteration  18: 1861145.069 ops/s
# Warmup Iteration  19: 1904186.285 ops/s
# Warmup Iteration  20: 1828089.042 ops/s
# Warmup Iteration  21: 1917847.781 ops/s
# Warmup Iteration  22: 1758627.708 ops/s
# Warmup Iteration  23: 1845678.626 ops/s
# Warmup Iteration  24: 1912910.514 ops/s
# Warmup Iteration  25: 1895159.915 ops/s
# Warmup Iteration  26: 1873235.073 ops/s
# Warmup Iteration  27: 1935876.433 ops/s
# Warmup Iteration  28: 1849945.959 ops/s
# Warmup Iteration  29: 1842230.455 ops/s
# Warmup Iteration  30: 1828905.408 ops/s
Iteration   1: 1849960.180 ops/s
Iteration   2: 1868860.199 ops/s
Iteration   3: 1837229.180 ops/s
Iteration   4: 1894482.034 ops/s
Iteration   5: 1866434.511 ops/s
Iteration   6: 1782972.351 ops/s
Iteration   7: 1895545.686 ops/s
Iteration   8: 1871878.263 ops/s
Iteration   9: 1847163.748 ops/s
Iteration  10: 1897425.072 ops/s
Iteration  11: 1794893.199 ops/s
Iteration  12: 1881191.542 ops/s
Iteration  13: 1909836.305 ops/s
Iteration  14: 1831719.439 ops/s
Iteration  15: 1844402.511 ops/s
Iteration  16: 1811447.906 ops/s
Iteration  17: 1855088.141 ops/s
Iteration  18: 1899127.418 ops/s
Iteration  19: 1855175.130 ops/s
Iteration  20: 1865106.658 ops/s
Iteration  21: 1956273.275 ops/s
Iteration  22: 1826363.970 ops/s
Iteration  23: 1880460.115 ops/s
Iteration  24: 1807075.379 ops/s
Iteration  25: 1897001.490 ops/s
Iteration  26: 1838055.223 ops/s
Iteration  27: 1843265.447 ops/s
Iteration  28: 1926255.545 ops/s
Iteration  29: 1834602.084 ops/s
Iteration  30: 1866139.885 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapScalarBackpressured":
  1861181.063 ±(99.9%) 25961.690 ops/s [Average]
  (min, avg, max) = (1782972.351, 1861181.063, 1956273.275), stdev = 38858.238
  CI (99.9%): [1835219.373, 1887142.753] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapScalarBackpressured  thrpt   30  1861181.063 ± 25961.690  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_asyncFusedSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_asyncFusedSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 104156.233 ops/s
# Warmup Iteration   2: 437659.838 ops/s
# Warmup Iteration   3: 1088055.225 ops/s
# Warmup Iteration   4: 1232601.625 ops/s
# Warmup Iteration   5: 1378906.263 ops/s
# Warmup Iteration   6: 1319410.827 ops/s
# Warmup Iteration   7: 1410580.982 ops/s
# Warmup Iteration   8: 1340498.488 ops/s
# Warmup Iteration   9: 1380485.289 ops/s
# Warmup Iteration  10: 1344113.437 ops/s
# Warmup Iteration  11: 1347984.771 ops/s
# Warmup Iteration  12: 1375154.930 ops/s
# Warmup Iteration  13: 1416327.921 ops/s
# Warmup Iteration  14: 1289689.549 ops/s
# Warmup Iteration  15: 1430223.513 ops/s
# Warmup Iteration  16: 1412572.121 ops/s
# Warmup Iteration  17: 1339919.816 ops/s
# Warmup Iteration  18: 1349290.875 ops/s
# Warmup Iteration  19: 1400366.484 ops/s
# Warmup Iteration  20: 1318563.743 ops/s
# Warmup Iteration  21: 1343722.137 ops/s
# Warmup Iteration  22: 1350138.035 ops/s
# Warmup Iteration  23: 1384342.282 ops/s
# Warmup Iteration  24: 1375057.929 ops/s
# Warmup Iteration  25: 1320210.267 ops/s
# Warmup Iteration  26: 1382423.802 ops/s
# Warmup Iteration  27: 1327991.380 ops/s
# Warmup Iteration  28: 1370737.512 ops/s
# Warmup Iteration  29: 1392212.298 ops/s
# Warmup Iteration  30: 1336285.562 ops/s
Iteration   1: 1363273.762 ops/s
Iteration   2: 1370467.281 ops/s
Iteration   3: 1322305.809 ops/s
Iteration   4: 1363222.893 ops/s
Iteration   5: 1337959.108 ops/s
Iteration   6: 1402854.034 ops/s
Iteration   7: 1341445.009 ops/s
Iteration   8: 1352047.813 ops/s
Iteration   9: 1396302.462 ops/s
Iteration  10: 1129906.002 ops/s
Iteration  11: 1361234.453 ops/s
Iteration  12: 1325569.676 ops/s
Iteration  13: 1389935.858 ops/s
Iteration  14: 1339106.521 ops/s
Iteration  15: 1337502.876 ops/s
Iteration  16: 1401673.148 ops/s
Iteration  17: 1404018.716 ops/s
Iteration  18: 1320368.472 ops/s
Iteration  19: 1342897.956 ops/s
Iteration  20: 1361266.570 ops/s
Iteration  21: 1359935.272 ops/s
Iteration  22: 1403625.171 ops/s
Iteration  23: 1356475.871 ops/s
Iteration  24: 1347266.983 ops/s
Iteration  25: 1323948.324 ops/s
Iteration  26: 1337832.529 ops/s
Iteration  27: 1322245.356 ops/s
Iteration  28: 1337832.802 ops/s
Iteration  29: 1369221.643 ops/s
Iteration  30: 1337964.259 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_asyncFusedSource":
  1348656.888 ±(99.9%) 32731.539 ops/s [Average]
  (min, avg, max) = (1129906.002, 1348656.888, 1404018.716), stdev = 48991.030
  CI (99.9%): [1315925.349, 1381388.426] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableConcatMapTest._Benchmark.benchmark_asyncFusedSource  thrpt   30  1348656.888 ± 32731.539  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_callableCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_callableCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 51651.122 ops/s
# Warmup Iteration   2: 294813.728 ops/s
# Warmup Iteration   3: 344784.737 ops/s
# Warmup Iteration   4: 400626.542 ops/s
# Warmup Iteration   5: 408933.445 ops/s
# Warmup Iteration   6: 395439.966 ops/s
# Warmup Iteration   7: 399096.277 ops/s
# Warmup Iteration   8: 412311.518 ops/s
# Warmup Iteration   9: 382689.640 ops/s
# Warmup Iteration  10: 408323.951 ops/s
# Warmup Iteration  11: 392899.475 ops/s
# Warmup Iteration  12: 396538.470 ops/s
# Warmup Iteration  13: 416895.698 ops/s
# Warmup Iteration  14: 398804.599 ops/s
# Warmup Iteration  15: 394538.367 ops/s
# Warmup Iteration  16: 417319.270 ops/s
# Warmup Iteration  17: 401902.686 ops/s
# Warmup Iteration  18: 399322.689 ops/s
# Warmup Iteration  19: 429574.786 ops/s
# Warmup Iteration  20: 415140.769 ops/s
# Warmup Iteration  21: 421105.065 ops/s
# Warmup Iteration  22: 419073.032 ops/s
# Warmup Iteration  23: 415840.925 ops/s
# Warmup Iteration  24: 414934.880 ops/s
# Warmup Iteration  25: 407948.729 ops/s
# Warmup Iteration  26: 423043.149 ops/s
# Warmup Iteration  27: 420393.758 ops/s
# Warmup Iteration  28: 404514.623 ops/s
# Warmup Iteration  29: 427225.638 ops/s
# Warmup Iteration  30: 415839.631 ops/s
Iteration   1: 417018.696 ops/s
Iteration   2: 428210.827 ops/s
Iteration   3: 409108.290 ops/s
Iteration   4: 416592.405 ops/s
Iteration   5: 413009.354 ops/s
Iteration   6: 419194.603 ops/s
Iteration   7: 413648.988 ops/s
Iteration   8: 414118.538 ops/s
Iteration   9: 416669.206 ops/s
Iteration  10: 411709.690 ops/s
Iteration  11: 411827.503 ops/s
Iteration  12: 403483.632 ops/s
Iteration  13: 416923.553 ops/s
Iteration  14: 428546.631 ops/s
Iteration  15: 399882.871 ops/s
Iteration  16: 405647.053 ops/s
Iteration  17: 420631.448 ops/s
Iteration  18: 426628.966 ops/s
Iteration  19: 414369.437 ops/s
Iteration  20: 434000.050 ops/s
Iteration  21: 415464.464 ops/s
Iteration  22: 400195.601 ops/s
Iteration  23: 424999.190 ops/s
Iteration  24: 409077.235 ops/s
Iteration  25: 415902.707 ops/s
Iteration  26: 411094.670 ops/s
Iteration  27: 424429.403 ops/s
Iteration  28: 421478.547 ops/s
Iteration  29: 412868.309 ops/s
Iteration  30: 420322.593 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_callableCrash":
  415901.815 ±(99.9%) 5461.348 ops/s [Average]
  (min, avg, max) = (399882.871, 415901.815, 434000.050), stdev = 8174.289
  CI (99.9%): [410440.467, 421363.163] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_callableCrash  thrpt   30  415901.815 ± 5461.348  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_scalarCallableSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_scalarCallableSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 936647.035 ops/s
# Warmup Iteration   2: 3698097.760 ops/s
# Warmup Iteration   3: 4198375.044 ops/s
# Warmup Iteration   4: 4630885.749 ops/s
# Warmup Iteration   5: 4816573.847 ops/s
# Warmup Iteration   6: 4806471.112 ops/s
# Warmup Iteration   7: 4685289.354 ops/s
# Warmup Iteration   8: 4841558.402 ops/s
# Warmup Iteration   9: 4899444.375 ops/s
# Warmup Iteration  10: 4868429.130 ops/s
# Warmup Iteration  11: 4896880.557 ops/s
# Warmup Iteration  12: 4806972.288 ops/s
# Warmup Iteration  13: 4938435.114 ops/s
# Warmup Iteration  14: 4751323.801 ops/s
# Warmup Iteration  15: 4863660.044 ops/s
# Warmup Iteration  16: 4735247.563 ops/s
# Warmup Iteration  17: 4768452.475 ops/s
# Warmup Iteration  18: 4993868.871 ops/s
# Warmup Iteration  19: 4719310.929 ops/s
# Warmup Iteration  20: 4977146.611 ops/s
# Warmup Iteration  21: 4773678.304 ops/s
# Warmup Iteration  22: 4918620.581 ops/s
# Warmup Iteration  23: 4711597.952 ops/s
# Warmup Iteration  24: 4757349.672 ops/s
# Warmup Iteration  25: 4955015.009 ops/s
# Warmup Iteration  26: 4698799.001 ops/s
# Warmup Iteration  27: 4867079.730 ops/s
# Warmup Iteration  28: 4734617.607 ops/s
# Warmup Iteration  29: 4865599.724 ops/s
# Warmup Iteration  30: 4903649.567 ops/s
Iteration   1: 4801657.470 ops/s
Iteration   2: 4923420.130 ops/s
Iteration   3: 4691158.547 ops/s
Iteration   4: 4754541.887 ops/s
Iteration   5: 4247852.746 ops/s
Iteration   6: 4796724.409 ops/s
Iteration   7: 4724490.100 ops/s
Iteration   8: 4724356.493 ops/s
Iteration   9: 4996018.123 ops/s
Iteration  10: 4766268.394 ops/s
Iteration  11: 4716050.200 ops/s
Iteration  12: 5004554.880 ops/s
Iteration  13: 4694116.598 ops/s
Iteration  14: 4973858.587 ops/s
Iteration  15: 4958183.983 ops/s
Iteration  16: 4629435.497 ops/s
Iteration  17: 4875619.830 ops/s
Iteration  18: 4818012.742 ops/s
Iteration  19: 4834215.548 ops/s
Iteration  20: 4831803.416 ops/s
Iteration  21: 4874954.349 ops/s
Iteration  22: 4899423.385 ops/s
Iteration  23: 4742303.302 ops/s
Iteration  24: 4869982.957 ops/s
Iteration  25: 4686405.865 ops/s
Iteration  26: 4984170.995 ops/s
Iteration  27: 4814227.706 ops/s
Iteration  28: 4855912.960 ops/s
Iteration  29: 4856719.397 ops/s
Iteration  30: 4789590.255 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_scalarCallableSource":
  4804534.358 ±(99.9%) 97236.566 ops/s [Average]
  (min, avg, max) = (4247852.746, 4804534.358, 5004554.880), stdev = 145539.126
  CI (99.9%): [4707297.792, 4901770.925] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableConcatMapTest._Benchmark.benchmark_scalarCallableSource  thrpt   30  4804534.358 ± 97236.566  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntilFalse$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntilFalse

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 666838.669 ops/s
# Warmup Iteration   2: 2906274.663 ops/s
# Warmup Iteration   3: 3332966.691 ops/s
# Warmup Iteration   4: 3680269.392 ops/s
# Warmup Iteration   5: 3795410.822 ops/s
# Warmup Iteration   6: 3761333.233 ops/s
# Warmup Iteration   7: 3837431.871 ops/s
# Warmup Iteration   8: 3721106.518 ops/s
# Warmup Iteration   9: 3708586.154 ops/s
# Warmup Iteration  10: 3851151.701 ops/s
# Warmup Iteration  11: 3806761.705 ops/s
# Warmup Iteration  12: 3678075.999 ops/s
# Warmup Iteration  13: 3865047.150 ops/s
# Warmup Iteration  14: 3659753.301 ops/s
# Warmup Iteration  15: 3915911.016 ops/s
# Warmup Iteration  16: 3651172.656 ops/s
# Warmup Iteration  17: 3802790.899 ops/s
# Warmup Iteration  18: 3775523.317 ops/s
# Warmup Iteration  19: 3785161.978 ops/s
# Warmup Iteration  20: 3848944.122 ops/s
# Warmup Iteration  21: 3766736.106 ops/s
# Warmup Iteration  22: 3700965.368 ops/s
# Warmup Iteration  23: 3881695.825 ops/s
# Warmup Iteration  24: 3636101.626 ops/s
# Warmup Iteration  25: 3617780.213 ops/s
# Warmup Iteration  26: 3850002.369 ops/s
# Warmup Iteration  27: 3728770.122 ops/s
# Warmup Iteration  28: 3700868.402 ops/s
# Warmup Iteration  29: 3777760.886 ops/s
# Warmup Iteration  30: 3694455.547 ops/s
Iteration   1: 3870015.976 ops/s
Iteration   2: 3750072.411 ops/s
Iteration   3: 3676142.796 ops/s
Iteration   4: 3806797.876 ops/s
Iteration   5: 3727888.931 ops/s
Iteration   6: 3896285.307 ops/s
Iteration   7: 3732026.481 ops/s
Iteration   8: 3838540.880 ops/s
Iteration   9: 3639672.059 ops/s
Iteration  10: 3775484.692 ops/s
Iteration  11: 3806533.965 ops/s
Iteration  12: 3705120.513 ops/s
Iteration  13: 3860337.065 ops/s
Iteration  14: 3707247.278 ops/s
Iteration  15: 3600954.629 ops/s
Iteration  16: 3647127.419 ops/s
Iteration  17: 3797582.075 ops/s
Iteration  18: 3851669.422 ops/s
Iteration  19: 3790525.748 ops/s
Iteration  20: 3862294.063 ops/s
Iteration  21: 3722222.043 ops/s
Iteration  22: 3891588.681 ops/s
Iteration  23: 3672612.584 ops/s
Iteration  24: 3841694.735 ops/s
Iteration  25: 3724612.883 ops/s
Iteration  26: 3731741.928 ops/s
Iteration  27: 3852019.531 ops/s
Iteration  28: 3709789.536 ops/s
Iteration  29: 3599601.014 ops/s
Iteration  30: 3951494.089 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntilFalse":
  3767989.887 ±(99.9%) 61603.085 ops/s [Average]
  (min, avg, max) = (3599601.014, 3767989.887, 3951494.089), stdev = 92204.604
  CI (99.9%): [3706386.802, 3829592.972] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableRepeatTest._Benchmark.benchmark_repeatUntilFalse  thrpt   30  3767989.887 ± 61603.085  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatIterableDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatIterableDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 357154.749 ops/s
# Warmup Iteration   2: 1756975.790 ops/s
# Warmup Iteration   3: 1981922.825 ops/s
# Warmup Iteration   4: 2491008.021 ops/s
# Warmup Iteration   5: 2443912.903 ops/s
# Warmup Iteration   6: 2415713.695 ops/s
# Warmup Iteration   7: 2355622.490 ops/s
# Warmup Iteration   8: 2470978.852 ops/s
# Warmup Iteration   9: 2363495.192 ops/s
# Warmup Iteration  10: 2443609.912 ops/s
# Warmup Iteration  11: 2314494.715 ops/s
# Warmup Iteration  12: 2475259.936 ops/s
# Warmup Iteration  13: 2448743.791 ops/s
# Warmup Iteration  14: 2362352.875 ops/s
# Warmup Iteration  15: 2455295.910 ops/s
# Warmup Iteration  16: 2451560.604 ops/s
# Warmup Iteration  17: 2409584.949 ops/s
# Warmup Iteration  18: 2400879.673 ops/s
# Warmup Iteration  19: 2525759.539 ops/s
# Warmup Iteration  20: 2398311.408 ops/s
# Warmup Iteration  21: 2472887.356 ops/s
# Warmup Iteration  22: 2446004.749 ops/s
# Warmup Iteration  23: 2468572.661 ops/s
# Warmup Iteration  24: 2501219.969 ops/s
# Warmup Iteration  25: 2382686.816 ops/s
# Warmup Iteration  26: 2542861.514 ops/s
# Warmup Iteration  27: 2330010.796 ops/s
# Warmup Iteration  28: 2473877.517 ops/s
# Warmup Iteration  29: 2121283.143 ops/s
# Warmup Iteration  30: 2321956.586 ops/s
Iteration   1: 2404338.843 ops/s
Iteration   2: 2424321.519 ops/s
Iteration   3: 2355912.544 ops/s
Iteration   4: 2426191.711 ops/s
Iteration   5: 2456969.432 ops/s
Iteration   6: 2313960.372 ops/s
Iteration   7: 2464979.680 ops/s
Iteration   8: 2397407.140 ops/s
Iteration   9: 2513732.858 ops/s
Iteration  10: 2449155.397 ops/s
Iteration  11: 2480442.120 ops/s
Iteration  12: 2469735.092 ops/s
Iteration  13: 2375869.050 ops/s
Iteration  14: 2409155.451 ops/s
Iteration  15: 2511159.553 ops/s
Iteration  16: 2379725.609 ops/s
Iteration  17: 2407253.963 ops/s
Iteration  18: 2464751.456 ops/s
Iteration  19: 2362610.827 ops/s
Iteration  20: 2468386.550 ops/s
Iteration  21: 2449328.215 ops/s
Iteration  22: 2347887.712 ops/s
Iteration  23: 2458635.127 ops/s
Iteration  24: 2436853.533 ops/s
Iteration  25: 2519587.444 ops/s
Iteration  26: 2463167.823 ops/s
Iteration  27: 2354465.755 ops/s
Iteration  28: 2542631.156 ops/s
Iteration  29: 2355376.246 ops/s
Iteration  30: 2435960.493 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatIterableDelayError":
  2429998.422 ±(99.9%) 38339.502 ops/s [Average]
  (min, avg, max) = (2313960.372, 2429998.422, 2542631.156), stdev = 57384.766
  CI (99.9%): [2391658.921, 2468337.924] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatIterableDelayError  thrpt   30  2429998.422 ± 38339.502  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapInnerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapInnerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130847.337 ops/s
# Warmup Iteration   2: 407480.536 ops/s
# Warmup Iteration   3: 508416.474 ops/s
# Warmup Iteration   4: 518598.181 ops/s
# Warmup Iteration   5: 467920.905 ops/s
# Warmup Iteration   6: 556066.690 ops/s
# Warmup Iteration   7: 542541.563 ops/s
# Warmup Iteration   8: 557373.382 ops/s
# Warmup Iteration   9: 561180.105 ops/s
# Warmup Iteration  10: 546901.037 ops/s
# Warmup Iteration  11: 544325.298 ops/s
# Warmup Iteration  12: 535166.213 ops/s
# Warmup Iteration  13: 551428.094 ops/s
# Warmup Iteration  14: 551276.752 ops/s
# Warmup Iteration  15: 555740.607 ops/s
# Warmup Iteration  16: 568728.476 ops/s
# Warmup Iteration  17: 548746.642 ops/s
# Warmup Iteration  18: 580616.762 ops/s
# Warmup Iteration  19: 584088.605 ops/s
# Warmup Iteration  20: 566677.879 ops/s
# Warmup Iteration  21: 570835.263 ops/s
# Warmup Iteration  22: 594184.060 ops/s
# Warmup Iteration  23: 569039.193 ops/s
# Warmup Iteration  24: 570701.886 ops/s
# Warmup Iteration  25: 591460.055 ops/s
# Warmup Iteration  26: 578902.863 ops/s
# Warmup Iteration  27: 593276.472 ops/s
# Warmup Iteration  28: 558701.359 ops/s
# Warmup Iteration  29: 602353.875 ops/s
# Warmup Iteration  30: 574950.063 ops/s
Iteration   1: 571563.607 ops/s
Iteration   2: 589311.933 ops/s
Iteration   3: 566117.889 ops/s
Iteration   4: 573136.685 ops/s
Iteration   5: 569529.605 ops/s
Iteration   6: 589641.046 ops/s
Iteration   7: 577005.901 ops/s
Iteration   8: 569049.588 ops/s
Iteration   9: 578147.418 ops/s
Iteration  10: 580970.560 ops/s
Iteration  11: 562363.331 ops/s
Iteration  12: 608028.367 ops/s
Iteration  13: 575181.168 ops/s
Iteration  14: 572958.486 ops/s
Iteration  15: 590463.563 ops/s
Iteration  16: 570830.444 ops/s
Iteration  17: 593121.692 ops/s
Iteration  18: 577551.423 ops/s
Iteration  19: 605840.774 ops/s
Iteration  20: 562534.995 ops/s
Iteration  21: 566161.811 ops/s
Iteration  22: 599273.537 ops/s
Iteration  23: 592907.034 ops/s
Iteration  24: 580682.038 ops/s
Iteration  25: 587189.795 ops/s
Iteration  26: 575973.188 ops/s
Iteration  27: 598364.788 ops/s
Iteration  28: 600690.700 ops/s
Iteration  29: 557128.299 ops/s
Iteration  30: 596201.557 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapInnerError":
  581264.041 ±(99.9%) 9241.387 ops/s [Average]
  (min, avg, max) = (557128.299, 581264.041, 608028.367), stdev = 13832.075
  CI (99.9%): [572022.653, 590505.428] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapInnerError  thrpt   30  581264.041 ± 9241.387  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapEmptyDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapEmptyDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 310194.347 ops/s
# Warmup Iteration   2: 1710757.307 ops/s
# Warmup Iteration   3: 2044235.582 ops/s
# Warmup Iteration   4: 2420530.492 ops/s
# Warmup Iteration   5: 2554123.872 ops/s
# Warmup Iteration   6: 2561925.258 ops/s
# Warmup Iteration   7: 2413595.084 ops/s
# Warmup Iteration   8: 2567986.988 ops/s
# Warmup Iteration   9: 2610430.589 ops/s
# Warmup Iteration  10: 2427445.626 ops/s
# Warmup Iteration  11: 2504007.967 ops/s
# Warmup Iteration  12: 2412671.260 ops/s
# Warmup Iteration  13: 2474613.014 ops/s
# Warmup Iteration  14: 2565974.115 ops/s
# Warmup Iteration  15: 2406277.108 ops/s
# Warmup Iteration  16: 2586463.693 ops/s
# Warmup Iteration  17: 2425628.664 ops/s
# Warmup Iteration  18: 2425323.586 ops/s
# Warmup Iteration  19: 2517421.883 ops/s
# Warmup Iteration  20: 2470272.248 ops/s
# Warmup Iteration  21: 2533182.382 ops/s
# Warmup Iteration  22: 2584371.101 ops/s
# Warmup Iteration  23: 2429884.787 ops/s
# Warmup Iteration  24: 2014858.365 ops/s
# Warmup Iteration  25: 2436621.103 ops/s
# Warmup Iteration  26: 2533612.865 ops/s
# Warmup Iteration  27: 2468223.845 ops/s
# Warmup Iteration  28: 2448768.248 ops/s
# Warmup Iteration  29: 2474420.143 ops/s
# Warmup Iteration  30: 2570522.787 ops/s
Iteration   1: 2493577.026 ops/s
Iteration   2: 2456400.712 ops/s
Iteration   3: 2472570.791 ops/s
Iteration   4: 2453399.222 ops/s
Iteration   5: 2620215.979 ops/s
Iteration   6: 2525528.940 ops/s
Iteration   7: 2427346.303 ops/s
Iteration   8: 2529433.509 ops/s
Iteration   9: 2483949.888 ops/s
Iteration  10: 2600099.923 ops/s
Iteration  11: 2586475.502 ops/s
Iteration  12: 2446329.397 ops/s
Iteration  13: 2626030.194 ops/s
Iteration  14: 2483055.588 ops/s
Iteration  15: 2402587.545 ops/s
Iteration  16: 2529499.784 ops/s
Iteration  17: 2531005.204 ops/s
Iteration  18: 2536250.795 ops/s
Iteration  19: 2457537.839 ops/s
Iteration  20: 2530823.249 ops/s
Iteration  21: 2548147.202 ops/s
Iteration  22: 2469496.766 ops/s
Iteration  23: 2537870.661 ops/s
Iteration  24: 2376445.060 ops/s
Iteration  25: 2558314.372 ops/s
Iteration  26: 2445999.389 ops/s
Iteration  27: 2498558.720 ops/s
Iteration  28: 2518167.078 ops/s
Iteration  29: 2454209.604 ops/s
Iteration  30: 2597096.171 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapEmptyDelayError":
  2506547.414 ±(99.9%) 42099.197 ops/s [Average]
  (min, avg, max) = (2376445.060, 2506547.414, 2626030.194), stdev = 63012.101
  CI (99.9%): [2464448.217, 2548646.611] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapEmptyDelayError  thrpt   30  2506547.414 ± 42099.197  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_fusedCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_fusedCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78112.900 ops/s
# Warmup Iteration   2: 276866.741 ops/s
# Warmup Iteration   3: 375042.296 ops/s
# Warmup Iteration   4: 390288.797 ops/s
# Warmup Iteration   5: 398709.172 ops/s
# Warmup Iteration   6: 375251.568 ops/s
# Warmup Iteration   7: 355398.651 ops/s
# Warmup Iteration   8: 410403.588 ops/s
# Warmup Iteration   9: 392320.750 ops/s
# Warmup Iteration  10: 390240.943 ops/s
# Warmup Iteration  11: 404088.024 ops/s
# Warmup Iteration  12: 393935.445 ops/s
# Warmup Iteration  13: 409383.133 ops/s
# Warmup Iteration  14: 388610.922 ops/s
# Warmup Iteration  15: 399406.060 ops/s
# Warmup Iteration  16: 406160.925 ops/s
# Warmup Iteration  17: 452696.780 ops/s
# Warmup Iteration  18: 470203.062 ops/s
# Warmup Iteration  19: 454531.664 ops/s
# Warmup Iteration  20: 464211.792 ops/s
# Warmup Iteration  21: 456258.343 ops/s
# Warmup Iteration  22: 462945.894 ops/s
# Warmup Iteration  23: 469440.792 ops/s
# Warmup Iteration  24: 441809.605 ops/s
# Warmup Iteration  25: 473322.916 ops/s
# Warmup Iteration  26: 456154.118 ops/s
# Warmup Iteration  27: 466363.046 ops/s
# Warmup Iteration  28: 455082.166 ops/s
# Warmup Iteration  29: 449374.572 ops/s
# Warmup Iteration  30: 480895.189 ops/s
Iteration   1: 447364.607 ops/s
Iteration   2: 476808.043 ops/s
Iteration   3: 478173.561 ops/s
Iteration   4: 467500.235 ops/s
Iteration   5: 437307.593 ops/s
Iteration   6: 461584.856 ops/s
Iteration   7: 465915.008 ops/s
Iteration   8: 486416.419 ops/s
Iteration   9: 458486.004 ops/s
Iteration  10: 470676.066 ops/s
Iteration  11: 466914.464 ops/s
Iteration  12: 468437.827 ops/s
Iteration  13: 468657.500 ops/s
Iteration  14: 451905.826 ops/s
Iteration  15: 465005.195 ops/s
Iteration  16: 465556.063 ops/s
Iteration  17: 477487.365 ops/s
Iteration  18: 476519.359 ops/s
Iteration  19: 465475.798 ops/s
Iteration  20: 466483.033 ops/s
Iteration  21: 461744.377 ops/s
Iteration  22: 465542.159 ops/s
Iteration  23: 484776.754 ops/s
Iteration  24: 444018.774 ops/s
Iteration  25: 469413.853 ops/s
Iteration  26: 461002.147 ops/s
Iteration  27: 467367.817 ops/s
Iteration  28: 485182.019 ops/s
Iteration  29: 443020.126 ops/s
Iteration  30: 486436.312 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_fusedCrash":
  466372.639 ±(99.9%) 8424.869 ops/s [Average]
  (min, avg, max) = (437307.593, 466372.639, 486436.312), stdev = 12609.949
  CI (99.9%): [457947.769, 474797.508] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_fusedCrash  thrpt   30  466372.639 ± 8424.869  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_immediateInnerNextOuterError2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_immediateInnerNextOuterError2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42064.248 ops/s
# Warmup Iteration   2: 95268.018 ops/s
# Warmup Iteration   3: 329799.224 ops/s
# Warmup Iteration   4: 345704.288 ops/s
# Warmup Iteration   5: 327311.141 ops/s
# Warmup Iteration   6: 325463.936 ops/s
# Warmup Iteration   7: 354099.594 ops/s
# Warmup Iteration   8: 337050.015 ops/s
# Warmup Iteration   9: 348907.984 ops/s
# Warmup Iteration  10: 347068.583 ops/s
# Warmup Iteration  11: 342544.492 ops/s
# Warmup Iteration  12: 319795.259 ops/s
# Warmup Iteration  13: 366856.643 ops/s
# Warmup Iteration  14: 335584.606 ops/s
# Warmup Iteration  15: 352524.950 ops/s
# Warmup Iteration  16: 342614.220 ops/s
# Warmup Iteration  17: 347487.334 ops/s
# Warmup Iteration  18: 334611.091 ops/s
# Warmup Iteration  19: 285551.660 ops/s
# Warmup Iteration  20: 348811.687 ops/s
# Warmup Iteration  21: 355066.019 ops/s
# Warmup Iteration  22: 354938.544 ops/s
# Warmup Iteration  23: 353851.614 ops/s
# Warmup Iteration  24: 362507.693 ops/s
# Warmup Iteration  25: 353516.635 ops/s
# Warmup Iteration  26: 348094.863 ops/s
# Warmup Iteration  27: 372138.577 ops/s
# Warmup Iteration  28: 358279.237 ops/s
# Warmup Iteration  29: 353138.863 ops/s
# Warmup Iteration  30: 359467.066 ops/s
Iteration   1: 354488.703 ops/s
Iteration   2: 358622.771 ops/s
Iteration   3: 342279.445 ops/s
Iteration   4: 361221.451 ops/s
Iteration   5: 350261.831 ops/s
Iteration   6: 347242.772 ops/s
Iteration   7: 361626.124 ops/s
Iteration   8: 342467.670 ops/s
Iteration   9: 362135.004 ops/s
Iteration  10: 355560.531 ops/s
Iteration  11: 347386.937 ops/s
Iteration  12: 367735.228 ops/s
Iteration  13: 341842.888 ops/s
Iteration  14: 366444.156 ops/s
Iteration  15: 360267.836 ops/s
Iteration  16: 349253.343 ops/s
Iteration  17: 361333.749 ops/s
Iteration  18: 354710.397 ops/s
Iteration  19: 366703.331 ops/s
Iteration  20: 367345.274 ops/s
Iteration  21: 347373.495 ops/s
Iteration  22: 367345.175 ops/s
Iteration  23: 363106.141 ops/s
Iteration  24: 351501.679 ops/s
Iteration  25: 359036.394 ops/s
Iteration  26: 362659.770 ops/s
Iteration  27: 351590.885 ops/s
Iteration  28: 364949.292 ops/s
Iteration  29: 367076.083 ops/s
Iteration  30: 344165.223 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_immediateInnerNextOuterError2":
  356591.119 ±(99.9%) 5718.667 ops/s [Average]
  (min, avg, max) = (341842.888, 356591.119, 367735.228), stdev = 8559.432
  CI (99.9%): [350872.453, 362309.786] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_immediateInnerNextOuterError2  thrpt   30  356591.119 ± 5718.667  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_issue2826$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_issue2826

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 88243.378 ops/s
# Warmup Iteration   2: 223761.306 ops/s
# Warmup Iteration   3: 438498.321 ops/s
# Warmup Iteration   4: 420264.931 ops/s
# Warmup Iteration   5: 439694.800 ops/s
# Warmup Iteration   6: 408672.558 ops/s
# Warmup Iteration   7: 421224.565 ops/s
# Warmup Iteration   8: 438682.840 ops/s
# Warmup Iteration   9: 429545.378 ops/s
# Warmup Iteration  10: 433630.511 ops/s
# Warmup Iteration  11: 404425.867 ops/s
# Warmup Iteration  12: 429099.634 ops/s
# Warmup Iteration  13: 430039.813 ops/s
# Warmup Iteration  14: 426595.545 ops/s
# Warmup Iteration  15: 438359.771 ops/s
# Warmup Iteration  16: 432270.325 ops/s
# Warmup Iteration  17: 453445.653 ops/s
# Warmup Iteration  18: 441138.186 ops/s
# Warmup Iteration  19: 444352.417 ops/s
# Warmup Iteration  20: 452424.797 ops/s
# Warmup Iteration  21: 434008.744 ops/s
# Warmup Iteration  22: 440565.604 ops/s
# Warmup Iteration  23: 446830.252 ops/s
# Warmup Iteration  24: 436717.598 ops/s
# Warmup Iteration  25: 456159.678 ops/s
# Warmup Iteration  26: 419291.862 ops/s
# Warmup Iteration  27: 455907.677 ops/s
# Warmup Iteration  28: 437577.673 ops/s
# Warmup Iteration  29: 448956.460 ops/s
# Warmup Iteration  30: 450836.555 ops/s
Iteration   1: 432378.911 ops/s
Iteration   2: 452862.885 ops/s
Iteration   3: 442091.071 ops/s
Iteration   4: 442687.418 ops/s
Iteration   5: 467936.562 ops/s
Iteration   6: 435185.275 ops/s
Iteration   7: 457186.394 ops/s
Iteration   8: 448752.328 ops/s
Iteration   9: 463011.264 ops/s
Iteration  10: 436537.568 ops/s
Iteration  11: 457620.956 ops/s
Iteration  12: 439974.567 ops/s
Iteration  13: 451725.116 ops/s
Iteration  14: 438023.802 ops/s
Iteration  15: 437741.181 ops/s
Iteration  16: 462458.711 ops/s
Iteration  17: 449166.869 ops/s
Iteration  18: 435703.537 ops/s
Iteration  19: 453924.323 ops/s
Iteration  20: 468434.030 ops/s
Iteration  21: 454984.165 ops/s
Iteration  22: 459202.795 ops/s
Iteration  23: 435359.334 ops/s
Iteration  24: 459448.968 ops/s
Iteration  25: 445468.391 ops/s
Iteration  26: 449073.863 ops/s
Iteration  27: 438230.762 ops/s
Iteration  28: 447155.045 ops/s
Iteration  29: 452107.750 ops/s
Iteration  30: 450049.934 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_issue2826":
  448816.126 ±(99.9%) 6900.990 ops/s [Average]
  (min, avg, max) = (432378.911, 448816.126, 468434.030), stdev = 10329.078
  CI (99.9%): [441915.136, 455717.116] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableRetryWithPredicateTest._Benchmark.benchmark_issue2826  thrpt   30  448816.126 ± 6900.990  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeat$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeat

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 252769.768 ops/s
# Warmup Iteration   2: 1278182.446 ops/s
# Warmup Iteration   3: 1733838.646 ops/s
# Warmup Iteration   4: 1644930.365 ops/s
# Warmup Iteration   5: 1776066.797 ops/s
# Warmup Iteration   6: 1698585.146 ops/s
# Warmup Iteration   7: 1679915.098 ops/s
# Warmup Iteration   8: 1665509.740 ops/s
# Warmup Iteration   9: 1539476.526 ops/s
# Warmup Iteration  10: 1703273.689 ops/s
# Warmup Iteration  11: 1704486.967 ops/s
# Warmup Iteration  12: 1719307.929 ops/s
# Warmup Iteration  13: 1430011.465 ops/s
# Warmup Iteration  14: 1695775.606 ops/s
# Warmup Iteration  15: 1763711.185 ops/s
# Warmup Iteration  16: 1657615.902 ops/s
# Warmup Iteration  17: 1755492.477 ops/s
# Warmup Iteration  18: 1725568.671 ops/s
# Warmup Iteration  19: 1694855.037 ops/s
# Warmup Iteration  20: 1752427.454 ops/s
# Warmup Iteration  21: 1683440.474 ops/s
# Warmup Iteration  22: 1746260.989 ops/s
# Warmup Iteration  23: 1671225.956 ops/s
# Warmup Iteration  24: 1709976.576 ops/s
# Warmup Iteration  25: 1770602.735 ops/s
# Warmup Iteration  26: 1736746.988 ops/s
# Warmup Iteration  27: 1638591.271 ops/s
# Warmup Iteration  28: 1741802.754 ops/s
# Warmup Iteration  29: 1724304.947 ops/s
# Warmup Iteration  30: 1742245.166 ops/s
Iteration   1: 1696070.830 ops/s
Iteration   2: 1715651.786 ops/s
Iteration   3: 1762959.221 ops/s
Iteration   4: 1671274.177 ops/s
Iteration   5: 1704305.203 ops/s
Iteration   6: 1745639.891 ops/s
Iteration   7: 1668595.138 ops/s
Iteration   8: 1733568.622 ops/s
Iteration   9: 1731327.132 ops/s
Iteration  10: 1680315.445 ops/s
Iteration  11: 1756872.996 ops/s
Iteration  12: 1706939.449 ops/s
Iteration  13: 1694625.496 ops/s
Iteration  14: 1693460.595 ops/s
Iteration  15: 1754811.814 ops/s
Iteration  16: 1682920.206 ops/s
Iteration  17: 1790475.681 ops/s
Iteration  18: 1615158.781 ops/s
Iteration  19: 1742942.312 ops/s
Iteration  20: 1668086.545 ops/s
Iteration  21: 1748137.603 ops/s
Iteration  22: 1722877.027 ops/s
Iteration  23: 1676981.586 ops/s
Iteration  24: 1756943.230 ops/s
Iteration  25: 1706878.645 ops/s
Iteration  26: 1737770.629 ops/s
Iteration  27: 1672026.329 ops/s
Iteration  28: 1670469.256 ops/s
Iteration  29: 1778720.777 ops/s
Iteration  30: 1678061.971 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeat":
  1712162.279 ±(99.9%) 27042.815 ops/s [Average]
  (min, avg, max) = (1615158.781, 1712162.279, 1790475.681), stdev = 40476.415
  CI (99.9%): [1685119.464, 1739205.094] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeat  thrpt   30  1712162.279 ± 27042.815  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatUntil$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatUntil

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 254414.601 ops/s
# Warmup Iteration   2: 1158427.821 ops/s
# Warmup Iteration   3: 1508224.421 ops/s
# Warmup Iteration   4: 1575633.913 ops/s
# Warmup Iteration   5: 1533464.162 ops/s
# Warmup Iteration   6: 1567016.414 ops/s
# Warmup Iteration   7: 1474251.766 ops/s
# Warmup Iteration   8: 1539097.966 ops/s
# Warmup Iteration   9: 1632151.396 ops/s
# Warmup Iteration  10: 1551997.220 ops/s
# Warmup Iteration  11: 1586576.334 ops/s
# Warmup Iteration  12: 1603454.596 ops/s
# Warmup Iteration  13: 1581998.035 ops/s
# Warmup Iteration  14: 1607300.828 ops/s
# Warmup Iteration  15: 1556387.334 ops/s
# Warmup Iteration  16: 1593236.255 ops/s
# Warmup Iteration  17: 1573847.729 ops/s
# Warmup Iteration  18: 1595322.534 ops/s
# Warmup Iteration  19: 1607395.375 ops/s
# Warmup Iteration  20: 1525908.113 ops/s
# Warmup Iteration  21: 1624735.321 ops/s
# Warmup Iteration  22: 1526319.484 ops/s
# Warmup Iteration  23: 1514537.075 ops/s
# Warmup Iteration  24: 1548027.963 ops/s
# Warmup Iteration  25: 1559312.924 ops/s
# Warmup Iteration  26: 1547484.368 ops/s
# Warmup Iteration  27: 1574456.847 ops/s
# Warmup Iteration  28: 1607262.202 ops/s
# Warmup Iteration  29: 1581292.472 ops/s
# Warmup Iteration  30: 1574536.658 ops/s
Iteration   1: 1560412.864 ops/s
Iteration   2: 1614829.860 ops/s
Iteration   3: 1573656.691 ops/s
Iteration   4: 1621560.599 ops/s
Iteration   5: 1544561.801 ops/s
Iteration   6: 1503314.557 ops/s
Iteration   7: 1627790.096 ops/s
Iteration   8: 1540209.452 ops/s
Iteration   9: 1525752.482 ops/s
Iteration  10: 1631045.627 ops/s
Iteration  11: 1558652.335 ops/s
Iteration  12: 1657613.128 ops/s
Iteration  13: 1581417.693 ops/s
Iteration  14: 1545729.133 ops/s
Iteration  15: 1548567.332 ops/s
Iteration  16: 1523821.387 ops/s
Iteration  17: 1556766.331 ops/s
Iteration  18: 1577847.209 ops/s
Iteration  19: 1531903.302 ops/s
Iteration  20: 1601163.721 ops/s
Iteration  21: 1512595.290 ops/s
Iteration  22: 1577349.472 ops/s
Iteration  23: 1644985.874 ops/s
Iteration  24: 1534940.037 ops/s
Iteration  25: 1615657.433 ops/s
Iteration  26: 1551385.903 ops/s
Iteration  27: 1608805.663 ops/s
Iteration  28: 1520785.023 ops/s
Iteration  29: 1589597.288 ops/s
Iteration  30: 1582209.989 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatUntil":
  1572164.252 ±(99.9%) 27882.329 ops/s [Average]
  (min, avg, max) = (1503314.557, 1572164.252, 1657613.128), stdev = 41732.961
  CI (99.9%): [1544281.923, 1600046.582] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableRepeatTest._Benchmark.benchmark_noCancelPreviousRepeatUntil  thrpt   30  1572164.252 ± 27882.329  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_badInnerSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_badInnerSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28584.348 ops/s
# Warmup Iteration   2: 90749.531 ops/s
# Warmup Iteration   3: 137593.200 ops/s
# Warmup Iteration   4: 147057.043 ops/s
# Warmup Iteration   5: 134220.879 ops/s
# Warmup Iteration   6: 154567.338 ops/s
# Warmup Iteration   7: 158223.271 ops/s
# Warmup Iteration   8: 126048.234 ops/s
# Warmup Iteration   9: 152514.414 ops/s
# Warmup Iteration  10: 156358.286 ops/s
# Warmup Iteration  11: 149798.283 ops/s
# Warmup Iteration  12: 156241.033 ops/s
# Warmup Iteration  13: 154735.948 ops/s
# Warmup Iteration  14: 153661.729 ops/s
# Warmup Iteration  15: 155426.818 ops/s
# Warmup Iteration  16: 155881.855 ops/s
# Warmup Iteration  17: 164341.972 ops/s
# Warmup Iteration  18: 153381.194 ops/s
# Warmup Iteration  19: 164025.085 ops/s
# Warmup Iteration  20: 153378.577 ops/s
# Warmup Iteration  21: 163284.841 ops/s
# Warmup Iteration  22: 152685.214 ops/s
# Warmup Iteration  23: 166980.400 ops/s
# Warmup Iteration  24: 161951.778 ops/s
# Warmup Iteration  25: 156882.928 ops/s
# Warmup Iteration  26: 161859.992 ops/s
# Warmup Iteration  27: 161784.757 ops/s
# Warmup Iteration  28: 164894.487 ops/s
# Warmup Iteration  29: 167874.780 ops/s
# Warmup Iteration  30: 152727.708 ops/s
Iteration   1: 163032.437 ops/s
Iteration   2: 157028.553 ops/s
Iteration   3: 165000.507 ops/s
Iteration   4: 160587.799 ops/s
Iteration   5: 154992.757 ops/s
Iteration   6: 165618.859 ops/s
Iteration   7: 155555.709 ops/s
Iteration   8: 156910.439 ops/s
Iteration   9: 165081.550 ops/s
Iteration  10: 160805.206 ops/s
Iteration  11: 162756.153 ops/s
Iteration  12: 157976.675 ops/s
Iteration  13: 161064.552 ops/s
Iteration  14: 155905.988 ops/s
Iteration  15: 159255.511 ops/s
Iteration  16: 162159.373 ops/s
Iteration  17: 160156.389 ops/s
Iteration  18: 157938.701 ops/s
Iteration  19: 158472.609 ops/s
Iteration  20: 165642.965 ops/s
Iteration  21: 155185.900 ops/s
Iteration  22: 161230.589 ops/s
Iteration  23: 157467.592 ops/s
Iteration  24: 160846.766 ops/s
Iteration  25: 166829.506 ops/s
Iteration  26: 156304.012 ops/s
Iteration  27: 163580.867 ops/s
Iteration  28: 160471.221 ops/s
Iteration  29: 157586.098 ops/s
Iteration  30: 166556.491 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_badInnerSource":
  160400.059 ±(99.9%) 2412.806 ops/s [Average]
  (min, avg, max) = (154992.757, 160400.059, 166829.506), stdev = 3611.374
  CI (99.9%): [157987.254, 162812.865] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_badInnerSource  thrpt   30  160400.059 ± 2412.806  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1084891.466 ops/s
# Warmup Iteration   2: 3048988.026 ops/s
# Warmup Iteration   3: 4231406.414 ops/s
# Warmup Iteration   4: 4056236.444 ops/s
# Warmup Iteration   5: 4262763.360 ops/s
# Warmup Iteration   6: 4304690.478 ops/s
# Warmup Iteration   7: 4019389.739 ops/s
# Warmup Iteration   8: 4150081.953 ops/s
# Warmup Iteration   9: 3983816.121 ops/s
# Warmup Iteration  10: 4135316.651 ops/s
# Warmup Iteration  11: 4195648.141 ops/s
# Warmup Iteration  12: 4234938.537 ops/s
# Warmup Iteration  13: 4083884.436 ops/s
# Warmup Iteration  14: 4071687.067 ops/s
# Warmup Iteration  15: 4306787.676 ops/s
# Warmup Iteration  16: 4188429.773 ops/s
# Warmup Iteration  17: 4021344.679 ops/s
# Warmup Iteration  18: 4036410.619 ops/s
# Warmup Iteration  19: 4292669.638 ops/s
# Warmup Iteration  20: 3922585.772 ops/s
# Warmup Iteration  21: 4207776.135 ops/s
# Warmup Iteration  22: 4066046.918 ops/s
# Warmup Iteration  23: 4191800.383 ops/s
# Warmup Iteration  24: 4130944.292 ops/s
# Warmup Iteration  25: 4159184.206 ops/s
# Warmup Iteration  26: 4089437.784 ops/s
# Warmup Iteration  27: 4239312.550 ops/s
# Warmup Iteration  28: 4117278.250 ops/s
# Warmup Iteration  29: 4399778.463 ops/s
# Warmup Iteration  30: 3978410.213 ops/s
Iteration   1: 4172083.586 ops/s
Iteration   2: 4038796.113 ops/s
Iteration   3: 4206541.765 ops/s
Iteration   4: 4083201.697 ops/s
Iteration   5: 4149252.407 ops/s
Iteration   6: 4329511.507 ops/s
Iteration   7: 4067960.432 ops/s
Iteration   8: 4263062.581 ops/s
Iteration   9: 4104414.184 ops/s
Iteration  10: 4317856.319 ops/s
Iteration  11: 4026255.373 ops/s
Iteration  12: 4217395.037 ops/s
Iteration  13: 3996472.339 ops/s
Iteration  14: 4180586.348 ops/s
Iteration  15: 4132407.657 ops/s
Iteration  16: 4251195.697 ops/s
Iteration  17: 4158301.913 ops/s
Iteration  18: 4272220.766 ops/s
Iteration  19: 4294829.346 ops/s
Iteration  20: 3970735.837 ops/s
Iteration  21: 4180581.398 ops/s
Iteration  22: 4108689.128 ops/s
Iteration  23: 4324793.737 ops/s
Iteration  24: 4173936.203 ops/s
Iteration  25: 4170687.025 ops/s
Iteration  26: 4129579.403 ops/s
Iteration  27: 4244883.722 ops/s
Iteration  28: 4232950.380 ops/s
Iteration  29: 4097348.269 ops/s
Iteration  30: 4183151.880 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejected":
  4169322.735 ±(99.9%) 64311.032 ops/s [Average]
  (min, avg, max) = (3970735.837, 4169322.735, 4329511.507), stdev = 96257.733
  CI (99.9%): [4105011.703, 4233633.767] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejected  thrpt   30  4169322.735 ± 64311.032  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejectedDelayErrorr$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejectedDelayErrorr

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1175761.247 ops/s
# Warmup Iteration   2: 2906980.009 ops/s
# Warmup Iteration   3: 3443048.546 ops/s
# Warmup Iteration   4: 4375511.599 ops/s
# Warmup Iteration   5: 4163767.688 ops/s
# Warmup Iteration   6: 4333556.564 ops/s
# Warmup Iteration   7: 4133265.705 ops/s
# Warmup Iteration   8: 4458013.750 ops/s
# Warmup Iteration   9: 4277904.229 ops/s
# Warmup Iteration  10: 4083148.757 ops/s
# Warmup Iteration  11: 4447948.245 ops/s
# Warmup Iteration  12: 4144128.859 ops/s
# Warmup Iteration  13: 4154084.077 ops/s
# Warmup Iteration  14: 4401483.491 ops/s
# Warmup Iteration  15: 4147673.417 ops/s
# Warmup Iteration  16: 4390397.499 ops/s
# Warmup Iteration  17: 4097590.283 ops/s
# Warmup Iteration  18: 4123153.544 ops/s
# Warmup Iteration  19: 4187354.423 ops/s
# Warmup Iteration  20: 4302438.995 ops/s
# Warmup Iteration  21: 4229446.383 ops/s
# Warmup Iteration  22: 4144326.827 ops/s
# Warmup Iteration  23: 4299345.116 ops/s
# Warmup Iteration  24: 4123030.893 ops/s
# Warmup Iteration  25: 4280646.156 ops/s
# Warmup Iteration  26: 4400697.076 ops/s
# Warmup Iteration  27: 4290507.865 ops/s
# Warmup Iteration  28: 4272405.525 ops/s
# Warmup Iteration  29: 4381813.697 ops/s
# Warmup Iteration  30: 4313426.637 ops/s
Iteration   1: 4136355.656 ops/s
Iteration   2: 4344850.593 ops/s
Iteration   3: 4232075.530 ops/s
Iteration   4: 4330434.486 ops/s
Iteration   5: 4250525.920 ops/s
Iteration   6: 4177443.500 ops/s
Iteration   7: 4312965.493 ops/s
Iteration   8: 4141393.898 ops/s
Iteration   9: 4199220.567 ops/s
Iteration  10: 4456762.067 ops/s
Iteration  11: 4182481.183 ops/s
Iteration  12: 4177573.807 ops/s
Iteration  13: 4213339.854 ops/s
Iteration  14: 4286426.135 ops/s
Iteration  15: 4142536.542 ops/s
Iteration  16: 4274213.884 ops/s
Iteration  17: 4119830.127 ops/s
Iteration  18: 4363984.523 ops/s
Iteration  19: 4149372.843 ops/s
Iteration  20: 4355757.854 ops/s
Iteration  21: 4248103.766 ops/s
Iteration  22: 4126940.090 ops/s
Iteration  23: 4292317.496 ops/s
Iteration  24: 4145409.284 ops/s
Iteration  25: 4310490.889 ops/s
Iteration  26: 4171423.708 ops/s
Iteration  27: 4314880.123 ops/s
Iteration  28: 4328313.143 ops/s
Iteration  29: 4150239.683 ops/s
Iteration  30: 4271716.491 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejectedDelayErrorr":
  4240245.971 ±(99.9%) 59049.955 ops/s [Average]
  (min, avg, max) = (4119830.127, 4240245.971, 4456762.067), stdev = 88383.199
  CI (99.9%): [4181196.017, 4299295.926] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejectedDelayErrorr  thrpt   30  4240245.971 ± 59049.955  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetry$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetry

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43993.006 ops/s
# Warmup Iteration   2: 128852.264 ops/s
# Warmup Iteration   3: 141610.220 ops/s
# Warmup Iteration   4: 141155.829 ops/s
# Warmup Iteration   5: 143541.983 ops/s
# Warmup Iteration   6: 142401.154 ops/s
# Warmup Iteration   7: 142060.404 ops/s
# Warmup Iteration   8: 140289.938 ops/s
# Warmup Iteration   9: 140742.494 ops/s
# Warmup Iteration  10: 146675.756 ops/s
# Warmup Iteration  11: 140354.968 ops/s
# Warmup Iteration  12: 143208.778 ops/s
# Warmup Iteration  13: 145906.354 ops/s
# Warmup Iteration  14: 140276.383 ops/s
# Warmup Iteration  15: 145761.573 ops/s
# Warmup Iteration  16: 146382.828 ops/s
# Warmup Iteration  17: 145482.879 ops/s
# Warmup Iteration  18: 155662.083 ops/s
# Warmup Iteration  19: 153390.736 ops/s
# Warmup Iteration  20: 152156.935 ops/s
# Warmup Iteration  21: 149321.061 ops/s
# Warmup Iteration  22: 146186.378 ops/s
# Warmup Iteration  23: 149876.733 ops/s
# Warmup Iteration  24: 154373.672 ops/s
# Warmup Iteration  25: 148851.042 ops/s
# Warmup Iteration  26: 145529.716 ops/s
# Warmup Iteration  27: 149852.116 ops/s
# Warmup Iteration  28: 154995.568 ops/s
# Warmup Iteration  29: 149676.587 ops/s
# Warmup Iteration  30: 151750.668 ops/s
Iteration   1: 152358.597 ops/s
Iteration   2: 148328.704 ops/s
Iteration   3: 154458.994 ops/s
Iteration   4: 147581.801 ops/s
Iteration   5: 152713.842 ops/s
Iteration   6: 144531.497 ops/s
Iteration   7: 154347.717 ops/s
Iteration   8: 149363.490 ops/s
Iteration   9: 150929.129 ops/s
Iteration  10: 154230.799 ops/s
Iteration  11: 146082.720 ops/s
Iteration  12: 155738.376 ops/s
Iteration  13: 144751.425 ops/s
Iteration  14: 150919.469 ops/s
Iteration  15: 150737.575 ops/s
Iteration  16: 148804.314 ops/s
Iteration  17: 150226.466 ops/s
Iteration  18: 152614.571 ops/s
Iteration  19: 152293.635 ops/s
Iteration  20: 154645.270 ops/s
Iteration  21: 143936.296 ops/s
Iteration  22: 151131.737 ops/s
Iteration  23: 147393.749 ops/s
Iteration  24: 151678.245 ops/s
Iteration  25: 148040.995 ops/s
Iteration  26: 145733.589 ops/s
Iteration  27: 153952.344 ops/s
Iteration  28: 147781.493 ops/s
Iteration  29: 150188.762 ops/s
Iteration  30: 112281.079 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetry":
  148925.889 ±(99.9%) 5115.615 ops/s [Average]
  (min, avg, max) = (112281.079, 148925.889, 155738.376), stdev = 7656.812
  CI (99.9%): [143810.275, 154041.504] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetry  thrpt   30  148925.889 ± 5115.615  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatWhenDefaultScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatWhenDefaultScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 128046.070 ops/s
# Warmup Iteration   2: 447155.644 ops/s
# Warmup Iteration   3: 986874.660 ops/s
# Warmup Iteration   4: 1056005.281 ops/s
# Warmup Iteration   5: 1108563.063 ops/s
# Warmup Iteration   6: 1137308.375 ops/s
# Warmup Iteration   7: 1228737.422 ops/s
# Warmup Iteration   8: 1236417.383 ops/s
# Warmup Iteration   9: 1261083.856 ops/s
# Warmup Iteration  10: 1186172.192 ops/s
# Warmup Iteration  11: 1165631.665 ops/s
# Warmup Iteration  12: 1183011.798 ops/s
# Warmup Iteration  13: 1255520.070 ops/s
# Warmup Iteration  14: 1251038.070 ops/s
# Warmup Iteration  15: 1265623.169 ops/s
# Warmup Iteration  16: 1280862.528 ops/s
# Warmup Iteration  17: 1198114.948 ops/s
# Warmup Iteration  18: 1279962.267 ops/s
# Warmup Iteration  19: 1261022.064 ops/s
# Warmup Iteration  20: 1227553.832 ops/s
# Warmup Iteration  21: 1305161.712 ops/s
# Warmup Iteration  22: 1177902.109 ops/s
# Warmup Iteration  23: 1221106.390 ops/s
# Warmup Iteration  24: 1250787.343 ops/s
# Warmup Iteration  25: 1297968.772 ops/s
# Warmup Iteration  26: 1203470.360 ops/s
# Warmup Iteration  27: 1246098.578 ops/s
# Warmup Iteration  28: 1242926.412 ops/s
# Warmup Iteration  29: 1285205.468 ops/s
# Warmup Iteration  30: 1279932.156 ops/s
Iteration   1: 1256864.618 ops/s
Iteration   2: 1245419.929 ops/s
Iteration   3: 1224402.454 ops/s
Iteration   4: 1248938.572 ops/s
Iteration   5: 1277422.346 ops/s
Iteration   6: 1211272.097 ops/s
Iteration   7: 1263854.986 ops/s
Iteration   8: 1189943.583 ops/s
Iteration   9: 1263908.495 ops/s
Iteration  10: 1255035.570 ops/s
Iteration  11: 1211454.128 ops/s
Iteration  12: 1278323.030 ops/s
Iteration  13: 1210572.875 ops/s
Iteration  14: 1237051.723 ops/s
Iteration  15: 1251058.463 ops/s
Iteration  16: 1257758.691 ops/s
Iteration  17: 1289397.501 ops/s
Iteration  18: 1274463.791 ops/s
Iteration  19: 1248221.060 ops/s
Iteration  20: 1293260.604 ops/s
Iteration  21: 1227841.617 ops/s
Iteration  22: 1275245.526 ops/s
Iteration  23: 1212819.941 ops/s
Iteration  24: 1218364.137 ops/s
Iteration  25: 1281649.108 ops/s
Iteration  26: 1269825.375 ops/s
Iteration  27: 1220062.541 ops/s
Iteration  28: 1248252.957 ops/s
Iteration  29: 1231841.263 ops/s
Iteration  30: 1210049.652 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatWhenDefaultScheduler":
  1246152.554 ±(99.9%) 18559.207 ops/s [Average]
  (min, avg, max) = (1189943.583, 1246152.554, 1293260.604), stdev = 27778.549
  CI (99.9%): [1227593.348, 1264711.761] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableRepeatTest._Benchmark.benchmark_repeatWhenDefaultScheduler  thrpt   30  1246152.554 ± 18559.207  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29145.920 ops/s
# Warmup Iteration   2: 126042.511 ops/s
# Warmup Iteration   3: 157344.712 ops/s
# Warmup Iteration   4: 158687.347 ops/s
# Warmup Iteration   5: 172089.060 ops/s
# Warmup Iteration   6: 183213.517 ops/s
# Warmup Iteration   7: 176136.449 ops/s
# Warmup Iteration   8: 176686.660 ops/s
# Warmup Iteration   9: 172995.463 ops/s
# Warmup Iteration  10: 176638.432 ops/s
# Warmup Iteration  11: 177351.096 ops/s
# Warmup Iteration  12: 177724.797 ops/s
# Warmup Iteration  13: 175785.401 ops/s
# Warmup Iteration  14: 184480.741 ops/s
# Warmup Iteration  15: 170431.223 ops/s
# Warmup Iteration  16: 185225.355 ops/s
# Warmup Iteration  17: 193665.104 ops/s
# Warmup Iteration  18: 198031.244 ops/s
# Warmup Iteration  19: 191366.454 ops/s
# Warmup Iteration  20: 198005.887 ops/s
# Warmup Iteration  21: 186323.310 ops/s
# Warmup Iteration  22: 200361.819 ops/s
# Warmup Iteration  23: 195061.051 ops/s
# Warmup Iteration  24: 187703.098 ops/s
# Warmup Iteration  25: 189195.923 ops/s
# Warmup Iteration  26: 199271.633 ops/s
# Warmup Iteration  27: 193717.646 ops/s
# Warmup Iteration  28: 190496.256 ops/s
# Warmup Iteration  29: 193758.447 ops/s
# Warmup Iteration  30: 187384.907 ops/s
Iteration   1: 198823.203 ops/s
Iteration   2: 185546.028 ops/s
Iteration   3: 197822.593 ops/s
Iteration   4: 200675.410 ops/s
Iteration   5: 192748.856 ops/s
Iteration   6: 188749.666 ops/s
Iteration   7: 200669.459 ops/s
Iteration   8: 191003.665 ops/s
Iteration   9: 190878.454 ops/s
Iteration  10: 200480.052 ops/s
Iteration  11: 188867.218 ops/s
Iteration  12: 202081.555 ops/s
Iteration  13: 193689.051 ops/s
Iteration  14: 191924.428 ops/s
Iteration  15: 197600.786 ops/s
Iteration  16: 190233.355 ops/s
Iteration  17: 192959.369 ops/s
Iteration  18: 194213.558 ops/s
Iteration  19: 197832.566 ops/s
Iteration  20: 191489.725 ops/s
Iteration  21: 191959.105 ops/s
Iteration  22: 201981.998 ops/s
Iteration  23: 190377.865 ops/s
Iteration  24: 169969.966 ops/s
Iteration  25: 173563.186 ops/s
Iteration  26: 198366.657 ops/s
Iteration  27: 196142.577 ops/s
Iteration  28: 195975.488 ops/s
Iteration  29: 187961.095 ops/s
Iteration  30: 202448.940 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancel":
  193234.529 ±(99.9%) 5005.091 ops/s [Average]
  (min, avg, max) = (169969.966, 193234.529, 202448.940), stdev = 7491.385
  CI (99.9%): [188229.438, 198239.620] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  193234.529 ± 5005.091  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorExactInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorExactInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39078.690 ops/s
# Warmup Iteration   2: 120718.131 ops/s
# Warmup Iteration   3: 326318.756 ops/s
# Warmup Iteration   4: 364404.925 ops/s
# Warmup Iteration   5: 356156.811 ops/s
# Warmup Iteration   6: 398565.897 ops/s
# Warmup Iteration   7: 379382.931 ops/s
# Warmup Iteration   8: 407176.798 ops/s
# Warmup Iteration   9: 402272.419 ops/s
# Warmup Iteration  10: 411383.282 ops/s
# Warmup Iteration  11: 411064.283 ops/s
# Warmup Iteration  12: 395130.543 ops/s
# Warmup Iteration  13: 404762.444 ops/s
# Warmup Iteration  14: 403213.732 ops/s
# Warmup Iteration  15: 407853.282 ops/s
# Warmup Iteration  16: 387415.274 ops/s
# Warmup Iteration  17: 406062.043 ops/s
# Warmup Iteration  18: 427317.030 ops/s
# Warmup Iteration  19: 406901.131 ops/s
# Warmup Iteration  20: 420198.249 ops/s
# Warmup Iteration  21: 410494.103 ops/s
# Warmup Iteration  22: 409346.147 ops/s
# Warmup Iteration  23: 435588.372 ops/s
# Warmup Iteration  24: 394193.085 ops/s
# Warmup Iteration  25: 415713.921 ops/s
# Warmup Iteration  26: 432065.906 ops/s
# Warmup Iteration  27: 403740.312 ops/s
# Warmup Iteration  28: 433147.864 ops/s
# Warmup Iteration  29: 411145.502 ops/s
# Warmup Iteration  30: 409307.516 ops/s
Iteration   1: 429817.878 ops/s
Iteration   2: 412870.383 ops/s
Iteration   3: 405133.685 ops/s
Iteration   4: 437970.566 ops/s
Iteration   5: 405367.097 ops/s
Iteration   6: 418729.201 ops/s
Iteration   7: 412370.951 ops/s
Iteration   8: 422307.345 ops/s
Iteration   9: 410694.653 ops/s
Iteration  10: 416796.350 ops/s
Iteration  11: 418301.102 ops/s
Iteration  12: 421313.337 ops/s
Iteration  13: 419627.942 ops/s
Iteration  14: 411300.239 ops/s
Iteration  15: 416991.625 ops/s
Iteration  16: 406073.254 ops/s
Iteration  17: 428495.807 ops/s
Iteration  18: 433209.378 ops/s
Iteration  19: 406748.834 ops/s
Iteration  20: 416205.069 ops/s
Iteration  21: 410699.078 ops/s
Iteration  22: 415417.636 ops/s
Iteration  23: 413281.000 ops/s
Iteration  24: 422420.639 ops/s
Iteration  25: 419315.822 ops/s
Iteration  26: 412787.909 ops/s
Iteration  27: 429470.196 ops/s
Iteration  28: 417343.110 ops/s
Iteration  29: 407284.959 ops/s
Iteration  30: 421778.119 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorExactInner":
  417337.439 ±(99.9%) 5613.575 ops/s [Average]
  (min, avg, max) = (405133.685, 417337.439, 437970.566), stdev = 8402.136
  CI (99.9%): [411723.864, 422951.014] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_errorExactInner  thrpt   30  417337.439 ± 5613.575  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_errorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_errorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 49206.168 ops/s
# Warmup Iteration   2: 377232.997 ops/s
# Warmup Iteration   3: 521666.723 ops/s
# Warmup Iteration   4: 529290.138 ops/s
# Warmup Iteration   5: 513711.917 ops/s
# Warmup Iteration   6: 566671.563 ops/s
# Warmup Iteration   7: 560582.334 ops/s
# Warmup Iteration   8: 568480.958 ops/s
# Warmup Iteration   9: 562782.115 ops/s
# Warmup Iteration  10: 588782.264 ops/s
# Warmup Iteration  11: 588073.618 ops/s
# Warmup Iteration  12: 544855.333 ops/s
# Warmup Iteration  13: 595501.095 ops/s
# Warmup Iteration  14: 569906.842 ops/s
# Warmup Iteration  15: 554037.217 ops/s
# Warmup Iteration  16: 578049.051 ops/s
# Warmup Iteration  17: 601523.773 ops/s
# Warmup Iteration  18: 601181.688 ops/s
# Warmup Iteration  19: 607261.160 ops/s
# Warmup Iteration  20: 539072.711 ops/s
# Warmup Iteration  21: 612138.669 ops/s
# Warmup Iteration  22: 596793.434 ops/s
# Warmup Iteration  23: 618367.323 ops/s
# Warmup Iteration  24: 615501.601 ops/s
# Warmup Iteration  25: 586166.339 ops/s
# Warmup Iteration  26: 635282.728 ops/s
# Warmup Iteration  27: 594761.217 ops/s
# Warmup Iteration  28: 590597.929 ops/s
# Warmup Iteration  29: 613053.459 ops/s
# Warmup Iteration  30: 589868.659 ops/s
Iteration   1: 619861.172 ops/s
Iteration   2: 592956.515 ops/s
Iteration   3: 584635.952 ops/s
Iteration   4: 643910.303 ops/s
Iteration   5: 576503.139 ops/s
Iteration   6: 614801.346 ops/s
Iteration   7: 588073.629 ops/s
Iteration   8: 623728.655 ops/s
Iteration   9: 621159.967 ops/s
Iteration  10: 584632.495 ops/s
Iteration  11: 611310.460 ops/s
Iteration  12: 600834.872 ops/s
Iteration  13: 623303.308 ops/s
Iteration  14: 602620.697 ops/s
Iteration  15: 571922.689 ops/s
Iteration  16: 604169.369 ops/s
Iteration  17: 609950.692 ops/s
Iteration  18: 585612.638 ops/s
Iteration  19: 523677.991 ops/s
Iteration  20: 605811.998 ops/s
Iteration  21: 582265.716 ops/s
Iteration  22: 634679.592 ops/s
Iteration  23: 577585.535 ops/s
Iteration  24: 608171.215 ops/s
Iteration  25: 586591.482 ops/s
Iteration  26: 598993.239 ops/s
Iteration  27: 622120.622 ops/s
Iteration  28: 613519.561 ops/s
Iteration  29: 594769.459 ops/s
Iteration  30: 590489.134 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_errorDelayed":
  599955.448 ±(99.9%) 15433.427 ops/s [Average]
  (min, avg, max) = (523677.991, 599955.448, 643910.303), stdev = 23100.029
  CI (99.9%): [584522.021, 615388.875] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_errorDelayed  thrpt   30  599955.448 ± 15433.427  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeTest._Benchmark.benchmark_delayErrorWithMaxConcurrencyError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeTest._Benchmark.benchmark_delayErrorWithMaxConcurrencyError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58530.872 ops/s
# Warmup Iteration   2: 347370.372 ops/s
# Warmup Iteration   3: 423706.276 ops/s
# Warmup Iteration   4: 451882.776 ops/s
# Warmup Iteration   5: 458890.573 ops/s
# Warmup Iteration   6: 447786.012 ops/s
# Warmup Iteration   7: 440522.338 ops/s
# Warmup Iteration   8: 433250.926 ops/s
# Warmup Iteration   9: 481330.687 ops/s
# Warmup Iteration  10: 418408.594 ops/s
# Warmup Iteration  11: 487544.508 ops/s
# Warmup Iteration  12: 420477.147 ops/s
# Warmup Iteration  13: 486795.208 ops/s
# Warmup Iteration  14: 450575.781 ops/s
# Warmup Iteration  15: 477438.534 ops/s
# Warmup Iteration  16: 470222.842 ops/s
# Warmup Iteration  17: 469364.685 ops/s
# Warmup Iteration  18: 493751.398 ops/s
# Warmup Iteration  19: 478499.433 ops/s
# Warmup Iteration  20: 508425.748 ops/s
# Warmup Iteration  21: 462840.997 ops/s
# Warmup Iteration  22: 502580.715 ops/s
# Warmup Iteration  23: 490289.953 ops/s
# Warmup Iteration  24: 486976.959 ops/s
# Warmup Iteration  25: 469165.779 ops/s
# Warmup Iteration  26: 491655.010 ops/s
# Warmup Iteration  27: 471427.896 ops/s
# Warmup Iteration  28: 482053.105 ops/s
# Warmup Iteration  29: 490098.449 ops/s
# Warmup Iteration  30: 468068.091 ops/s
Iteration   1: 505802.216 ops/s
Iteration   2: 484072.337 ops/s
Iteration   3: 481228.142 ops/s
Iteration   4: 499591.759 ops/s
Iteration   5: 473769.521 ops/s
Iteration   6: 474818.679 ops/s
Iteration   7: 507282.435 ops/s
Iteration   8: 491756.976 ops/s
Iteration   9: 492241.154 ops/s
Iteration  10: 471945.866 ops/s
Iteration  11: 496052.918 ops/s
Iteration  12: 473968.531 ops/s
Iteration  13: 491552.847 ops/s
Iteration  14: 471254.942 ops/s
Iteration  15: 478239.034 ops/s
Iteration  16: 499080.810 ops/s
Iteration  17: 468110.394 ops/s
Iteration  18: 487204.510 ops/s
Iteration  19: 474547.177 ops/s
Iteration  20: 499706.442 ops/s
Iteration  21: 486526.803 ops/s
Iteration  22: 481269.418 ops/s
Iteration  23: 492111.253 ops/s
Iteration  24: 470640.910 ops/s
Iteration  25: 495958.700 ops/s
Iteration  26: 474695.669 ops/s
Iteration  27: 480538.533 ops/s
Iteration  28: 493794.227 ops/s
Iteration  29: 486404.469 ops/s
Iteration  30: 489149.595 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeTest._Benchmark.benchmark_delayErrorWithMaxConcurrencyError":
  485777.209 ±(99.9%) 7432.011 ops/s [Average]
  (min, avg, max) = (468110.394, 485777.209, 507282.435), stdev = 11123.885
  CI (99.9%): [478345.198, 493209.220] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
MaybeMergeTest._Benchmark.benchmark_delayErrorWithMaxConcurrencyError  thrpt   30  485777.209 ± 7432.011  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_disposeInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_disposeInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 221073.595 ops/s
# Warmup Iteration   2: 1087441.475 ops/s
# Warmup Iteration   3: 2037742.624 ops/s
# Warmup Iteration   4: 1910617.582 ops/s
# Warmup Iteration   5: 2185546.530 ops/s
# Warmup Iteration   6: 2124289.642 ops/s
# Warmup Iteration   7: 2121667.350 ops/s
# Warmup Iteration   8: 2252042.629 ops/s
# Warmup Iteration   9: 2100381.559 ops/s
# Warmup Iteration  10: 2189419.184 ops/s
# Warmup Iteration  11: 2267245.022 ops/s
# Warmup Iteration  12: 2165358.319 ops/s
# Warmup Iteration  13: 2199505.415 ops/s
# Warmup Iteration  14: 2127052.387 ops/s
# Warmup Iteration  15: 2195144.592 ops/s
# Warmup Iteration  16: 2254814.993 ops/s
# Warmup Iteration  17: 2208612.732 ops/s
# Warmup Iteration  18: 2135224.114 ops/s
# Warmup Iteration  19: 2272289.654 ops/s
# Warmup Iteration  20: 2139089.386 ops/s
# Warmup Iteration  21: 2251300.178 ops/s
# Warmup Iteration  22: 2155350.454 ops/s
# Warmup Iteration  23: 2184502.418 ops/s
# Warmup Iteration  24: 2157526.702 ops/s
# Warmup Iteration  25: 2211935.972 ops/s
# Warmup Iteration  26: 2253279.509 ops/s
# Warmup Iteration  27: 2115075.139 ops/s
# Warmup Iteration  28: 2218517.809 ops/s
# Warmup Iteration  29: 2204617.030 ops/s
# Warmup Iteration  30: 2160027.316 ops/s
Iteration   1: 2297015.724 ops/s
Iteration   2: 2231188.277 ops/s
Iteration   3: 2126339.267 ops/s
Iteration   4: 2228888.460 ops/s
Iteration   5: 2159915.843 ops/s
Iteration   6: 2196419.011 ops/s
Iteration   7: 2180865.148 ops/s
Iteration   8: 2185320.924 ops/s
Iteration   9: 2274596.721 ops/s
Iteration  10: 2143327.455 ops/s
Iteration  11: 2209234.106 ops/s
Iteration  12: 2209097.962 ops/s
Iteration  13: 2143684.514 ops/s
Iteration  14: 1833283.273 ops/s
Iteration  15: 2196906.005 ops/s
Iteration  16: 2159494.758 ops/s
Iteration  17: 2233260.283 ops/s
Iteration  18: 2133624.857 ops/s
Iteration  19: 2241450.936 ops/s
Iteration  20: 2183020.717 ops/s
Iteration  21: 2194289.851 ops/s
Iteration  22: 2203086.923 ops/s
Iteration  23: 2196196.188 ops/s
Iteration  24: 2282451.464 ops/s
Iteration  25: 2138843.008 ops/s
Iteration  26: 2157814.606 ops/s
Iteration  27: 2220480.344 ops/s
Iteration  28: 2190028.444 ops/s
Iteration  29: 2188680.079 ops/s
Iteration  30: 2181044.631 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_disposeInner":
  2183994.993 ±(99.9%) 52681.563 ops/s [Average]
  (min, avg, max) = (1833283.273, 2183994.993, 2297015.724), stdev = 78851.289
  CI (99.9%): [2131313.430, 2236676.555] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_disposeInner  thrpt   30  2183994.993 ± 52681.563  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_middleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_middleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42541.242 ops/s
# Warmup Iteration   2: 246424.515 ops/s
# Warmup Iteration   3: 322850.848 ops/s
# Warmup Iteration   4: 334051.141 ops/s
# Warmup Iteration   5: 364175.767 ops/s
# Warmup Iteration   6: 337365.125 ops/s
# Warmup Iteration   7: 335811.423 ops/s
# Warmup Iteration   8: 313882.048 ops/s
# Warmup Iteration   9: 348573.769 ops/s
# Warmup Iteration  10: 342582.829 ops/s
# Warmup Iteration  11: 344072.696 ops/s
# Warmup Iteration  12: 357503.219 ops/s
# Warmup Iteration  13: 328461.225 ops/s
# Warmup Iteration  14: 357952.033 ops/s
# Warmup Iteration  15: 345541.136 ops/s
# Warmup Iteration  16: 346941.908 ops/s
# Warmup Iteration  17: 366465.648 ops/s
# Warmup Iteration  18: 359745.319 ops/s
# Warmup Iteration  19: 361981.485 ops/s
# Warmup Iteration  20: 355451.975 ops/s
# Warmup Iteration  21: 349712.914 ops/s
# Warmup Iteration  22: 365951.985 ops/s
# Warmup Iteration  23: 358624.752 ops/s
# Warmup Iteration  24: 354903.229 ops/s
# Warmup Iteration  25: 361731.074 ops/s
# Warmup Iteration  26: 349179.278 ops/s
# Warmup Iteration  27: 372652.767 ops/s
# Warmup Iteration  28: 375550.489 ops/s
# Warmup Iteration  29: 343621.785 ops/s
# Warmup Iteration  30: 362198.515 ops/s
Iteration   1: 355888.983 ops/s
Iteration   2: 366167.737 ops/s
Iteration   3: 368413.191 ops/s
Iteration   4: 354758.496 ops/s
Iteration   5: 357178.441 ops/s
Iteration   6: 370696.395 ops/s
Iteration   7: 356394.753 ops/s
Iteration   8: 368991.970 ops/s
Iteration   9: 366554.814 ops/s
Iteration  10: 357509.847 ops/s
Iteration  11: 367038.534 ops/s
Iteration  12: 334912.195 ops/s
Iteration  13: 350367.852 ops/s
Iteration  14: 369756.208 ops/s
Iteration  15: 352055.366 ops/s
Iteration  16: 350746.084 ops/s
Iteration  17: 371604.749 ops/s
Iteration  18: 354121.584 ops/s
Iteration  19: 377299.636 ops/s
Iteration  20: 349484.500 ops/s
Iteration  21: 371520.133 ops/s
Iteration  22: 369656.059 ops/s
Iteration  23: 342201.814 ops/s
Iteration  24: 359038.434 ops/s
Iteration  25: 359222.564 ops/s
Iteration  26: 357346.199 ops/s
Iteration  27: 363997.165 ops/s
Iteration  28: 359027.430 ops/s
Iteration  29: 373649.468 ops/s
Iteration  30: 362966.275 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_middleError":
  360618.896 ±(99.9%) 6523.957 ops/s [Average]
  (min, avg, max) = (334912.195, 360618.896, 377299.636), stdev = 9764.753
  CI (99.9%): [354094.939, 367142.853] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_middleError  thrpt   30  360618.896 ± 6523.957  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_innerSuccessCompletesAfterMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_innerSuccessCompletesAfterMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 116163.067 ops/s
# Warmup Iteration   2: 546224.436 ops/s
# Warmup Iteration   3: 1302619.105 ops/s
# Warmup Iteration   4: 1764822.125 ops/s
# Warmup Iteration   5: 1940622.616 ops/s
# Warmup Iteration   6: 2041006.445 ops/s
# Warmup Iteration   7: 1920599.354 ops/s
# Warmup Iteration   8: 2043588.368 ops/s
# Warmup Iteration   9: 2035711.043 ops/s
# Warmup Iteration  10: 1904070.406 ops/s
# Warmup Iteration  11: 1973092.960 ops/s
# Warmup Iteration  12: 2021792.337 ops/s
# Warmup Iteration  13: 1912622.810 ops/s
# Warmup Iteration  14: 2018181.299 ops/s
# Warmup Iteration  15: 1929576.139 ops/s
# Warmup Iteration  16: 2037142.017 ops/s
# Warmup Iteration  17: 1886292.195 ops/s
# Warmup Iteration  18: 2092810.741 ops/s
# Warmup Iteration  19: 2012057.441 ops/s
# Warmup Iteration  20: 2014291.485 ops/s
# Warmup Iteration  21: 1989462.846 ops/s
# Warmup Iteration  22: 1962973.290 ops/s
# Warmup Iteration  23: 2061202.223 ops/s
# Warmup Iteration  24: 1945420.921 ops/s
# Warmup Iteration  25: 2008563.706 ops/s
# Warmup Iteration  26: 2056996.804 ops/s
# Warmup Iteration  27: 1951273.047 ops/s
# Warmup Iteration  28: 2056517.337 ops/s
# Warmup Iteration  29: 1983461.297 ops/s
# Warmup Iteration  30: 1950351.330 ops/s
Iteration   1: 2026772.222 ops/s
Iteration   2: 1996292.064 ops/s
Iteration   3: 2033789.078 ops/s
Iteration   4: 1940210.924 ops/s
Iteration   5: 1999068.509 ops/s
Iteration   6: 2033350.224 ops/s
Iteration   7: 1974174.853 ops/s
Iteration   8: 2054284.894 ops/s
Iteration   9: 1522379.784 ops/s
Iteration  10: 2047769.851 ops/s
Iteration  11: 1955735.452 ops/s
Iteration  12: 1918151.189 ops/s
Iteration  13: 2036432.034 ops/s
Iteration  14: 1876754.189 ops/s
Iteration  15: 2050598.804 ops/s
Iteration  16: 2046474.680 ops/s
Iteration  17: 1946806.453 ops/s
Iteration  18: 2039211.737 ops/s
Iteration  19: 2003893.626 ops/s
Iteration  20: 1982581.069 ops/s
Iteration  21: 2069924.921 ops/s
Iteration  22: 1893466.732 ops/s
Iteration  23: 2035210.180 ops/s
Iteration  24: 1967270.470 ops/s
Iteration  25: 2026861.023 ops/s
Iteration  26: 2057692.262 ops/s
Iteration  27: 1989201.872 ops/s
Iteration  28: 1994461.287 ops/s
Iteration  29: 1990248.692 ops/s
Iteration  30: 2003791.153 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_innerSuccessCompletesAfterMain":
  1983762.008 ±(99.9%) 66823.311 ops/s [Average]
  (min, avg, max) = (1522379.784, 1983762.008, 2069924.921), stdev = 100017.994
  CI (99.9%): [1916938.696, 2050585.319] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_innerSuccessCompletesAfterMain  thrpt   30  1983762.008 ± 66823.311  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergePublisherDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergePublisherDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41617.660 ops/s
# Warmup Iteration   2: 98779.443 ops/s
# Warmup Iteration   3: 208941.958 ops/s
# Warmup Iteration   4: 220782.529 ops/s
# Warmup Iteration   5: 230591.395 ops/s
# Warmup Iteration   6: 211109.738 ops/s
# Warmup Iteration   7: 195422.179 ops/s
# Warmup Iteration   8: 227699.979 ops/s
# Warmup Iteration   9: 226754.437 ops/s
# Warmup Iteration  10: 232890.899 ops/s
# Warmup Iteration  11: 227119.860 ops/s
# Warmup Iteration  12: 224224.944 ops/s
# Warmup Iteration  13: 236663.571 ops/s
# Warmup Iteration  14: 225638.159 ops/s
# Warmup Iteration  15: 235931.280 ops/s
# Warmup Iteration  16: 231181.085 ops/s
# Warmup Iteration  17: 235522.274 ops/s
# Warmup Iteration  18: 236735.605 ops/s
# Warmup Iteration  19: 240816.765 ops/s
# Warmup Iteration  20: 229936.751 ops/s
# Warmup Iteration  21: 249445.147 ops/s
# Warmup Iteration  22: 235369.826 ops/s
# Warmup Iteration  23: 240491.612 ops/s
# Warmup Iteration  24: 229337.632 ops/s
# Warmup Iteration  25: 237009.593 ops/s
# Warmup Iteration  26: 238183.234 ops/s
# Warmup Iteration  27: 238750.293 ops/s
# Warmup Iteration  28: 231506.761 ops/s
# Warmup Iteration  29: 238749.784 ops/s
# Warmup Iteration  30: 237833.746 ops/s
Iteration   1: 237971.967 ops/s
Iteration   2: 237652.618 ops/s
Iteration   3: 229150.218 ops/s
Iteration   4: 250022.097 ops/s
Iteration   5: 234479.557 ops/s
Iteration   6: 231843.079 ops/s
Iteration   7: 247890.740 ops/s
Iteration   8: 237049.656 ops/s
Iteration   9: 231623.560 ops/s
Iteration  10: 244774.790 ops/s
Iteration  11: 226580.276 ops/s
Iteration  12: 237242.906 ops/s
Iteration  13: 241532.802 ops/s
Iteration  14: 233455.355 ops/s
Iteration  15: 223515.209 ops/s
Iteration  16: 240551.617 ops/s
Iteration  17: 230057.001 ops/s
Iteration  18: 236264.745 ops/s
Iteration  19: 237247.295 ops/s
Iteration  20: 227515.196 ops/s
Iteration  21: 241211.590 ops/s
Iteration  22: 236575.009 ops/s
Iteration  23: 244374.488 ops/s
Iteration  24: 231601.757 ops/s
Iteration  25: 240915.533 ops/s
Iteration  26: 235629.437 ops/s
Iteration  27: 239100.172 ops/s
Iteration  28: 237539.526 ops/s
Iteration  29: 234114.509 ops/s
Iteration  30: 242499.085 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergePublisherDelayError":
  236666.060 ±(99.9%) 4127.880 ops/s [Average]
  (min, avg, max) = (223515.209, 236666.060, 250022.097), stdev = 6178.417
  CI (99.9%): [232538.180, 240793.940] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_mergePublisherDelayError  thrpt   30  236666.060 ± 4127.880  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalMaxConcurrent1Backpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalMaxConcurrent1Backpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33450.132 ops/s
# Warmup Iteration   2: 96682.017 ops/s
# Warmup Iteration   3: 305623.554 ops/s
# Warmup Iteration   4: 330489.668 ops/s
# Warmup Iteration   5: 329896.264 ops/s
# Warmup Iteration   6: 364184.604 ops/s
# Warmup Iteration   7: 352715.828 ops/s
# Warmup Iteration   8: 311636.551 ops/s
# Warmup Iteration   9: 361681.463 ops/s
# Warmup Iteration  10: 364101.728 ops/s
# Warmup Iteration  11: 353374.810 ops/s
# Warmup Iteration  12: 361524.618 ops/s
# Warmup Iteration  13: 358269.961 ops/s
# Warmup Iteration  14: 375128.820 ops/s
# Warmup Iteration  15: 350759.589 ops/s
# Warmup Iteration  16: 370670.904 ops/s
# Warmup Iteration  17: 370985.045 ops/s
# Warmup Iteration  18: 355989.073 ops/s
# Warmup Iteration  19: 368245.386 ops/s
# Warmup Iteration  20: 357351.601 ops/s
# Warmup Iteration  21: 360682.618 ops/s
# Warmup Iteration  22: 366568.673 ops/s
# Warmup Iteration  23: 349984.168 ops/s
# Warmup Iteration  24: 373335.315 ops/s
# Warmup Iteration  25: 370104.854 ops/s
# Warmup Iteration  26: 352225.737 ops/s
# Warmup Iteration  27: 370086.300 ops/s
# Warmup Iteration  28: 362211.959 ops/s
# Warmup Iteration  29: 343748.023 ops/s
# Warmup Iteration  30: 358197.773 ops/s
Iteration   1: 373667.441 ops/s
Iteration   2: 365429.138 ops/s
Iteration   3: 328752.112 ops/s
Iteration   4: 308098.728 ops/s
Iteration   5: 356871.193 ops/s
Iteration   6: 353612.284 ops/s
Iteration   7: 373743.499 ops/s
Iteration   8: 343063.222 ops/s
Iteration   9: 382331.355 ops/s
Iteration  10: 352876.075 ops/s
Iteration  11: 363693.540 ops/s
Iteration  12: 371137.830 ops/s
Iteration  13: 357726.337 ops/s
Iteration  14: 370655.870 ops/s
Iteration  15: 347710.432 ops/s
Iteration  16: 350392.386 ops/s
Iteration  17: 365519.098 ops/s
Iteration  18: 363577.784 ops/s
Iteration  19: 373472.805 ops/s
Iteration  20: 350495.757 ops/s
Iteration  21: 355162.377 ops/s
Iteration  22: 368618.141 ops/s
Iteration  23: 350721.060 ops/s
Iteration  24: 370569.474 ops/s
Iteration  25: 350403.652 ops/s
Iteration  26: 365890.998 ops/s
Iteration  27: 357151.682 ops/s
Iteration  28: 351890.552 ops/s
Iteration  29: 347167.469 ops/s
Iteration  30: 357324.319 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_normalMaxConcurrent1Backpressured":
  357590.887 ±(99.9%) 9824.661 ops/s [Average]
  (min, avg, max) = (308098.728, 357590.887, 382331.355), stdev = 14705.091
  CI (99.9%): [347766.226, 367415.548] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_normalMaxConcurrent1Backpressured  thrpt   30  357590.887 ± 9824.661  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeDelayError4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeDelayError4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19809.591 ops/s
# Warmup Iteration   2: 31843.987 ops/s
# Warmup Iteration   3: 107922.679 ops/s
# Warmup Iteration   4: 129639.442 ops/s
# Warmup Iteration   5: 128989.892 ops/s
# Warmup Iteration   6: 142883.286 ops/s
# Warmup Iteration   7: 141251.699 ops/s
# Warmup Iteration   8: 140702.742 ops/s
# Warmup Iteration   9: 147538.776 ops/s
# Warmup Iteration  10: 124205.195 ops/s
# Warmup Iteration  11: 139933.618 ops/s
# Warmup Iteration  12: 145542.988 ops/s
# Warmup Iteration  13: 139154.939 ops/s
# Warmup Iteration  14: 144224.349 ops/s
# Warmup Iteration  15: 149286.346 ops/s
# Warmup Iteration  16: 140863.290 ops/s
# Warmup Iteration  17: 145589.629 ops/s
# Warmup Iteration  18: 150894.632 ops/s
# Warmup Iteration  19: 150319.974 ops/s
# Warmup Iteration  20: 144007.010 ops/s
# Warmup Iteration  21: 150727.639 ops/s
# Warmup Iteration  22: 145650.178 ops/s
# Warmup Iteration  23: 141540.258 ops/s
# Warmup Iteration  24: 149741.556 ops/s
# Warmup Iteration  25: 148485.177 ops/s
# Warmup Iteration  26: 142303.427 ops/s
# Warmup Iteration  27: 145722.037 ops/s
# Warmup Iteration  28: 145291.013 ops/s
# Warmup Iteration  29: 145900.856 ops/s
# Warmup Iteration  30: 144877.617 ops/s
Iteration   1: 150626.284 ops/s
Iteration   2: 146811.419 ops/s
Iteration   3: 144176.900 ops/s
Iteration   4: 147400.986 ops/s
Iteration   5: 144292.910 ops/s
Iteration   6: 150401.943 ops/s
Iteration   7: 143971.622 ops/s
Iteration   8: 149843.869 ops/s
Iteration   9: 142859.685 ops/s
Iteration  10: 147142.588 ops/s
Iteration  11: 148586.230 ops/s
Iteration  12: 145912.615 ops/s
Iteration  13: 151267.854 ops/s
Iteration  14: 144568.299 ops/s
Iteration  15: 141602.902 ops/s
Iteration  16: 148922.036 ops/s
Iteration  17: 143122.137 ops/s
Iteration  18: 144399.023 ops/s
Iteration  19: 155061.303 ops/s
Iteration  20: 143141.529 ops/s
Iteration  21: 153424.024 ops/s
Iteration  22: 141048.103 ops/s
Iteration  23: 151542.552 ops/s
Iteration  24: 144295.915 ops/s
Iteration  25: 146635.310 ops/s
Iteration  26: 144078.081 ops/s
Iteration  27: 148928.742 ops/s
Iteration  28: 152003.333 ops/s
Iteration  29: 143018.512 ops/s
Iteration  30: 147713.145 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeDelayError4":
  146893.328 ±(99.9%) 2465.898 ops/s [Average]
  (min, avg, max) = (141048.103, 146893.328, 155061.303), stdev = 3690.841
  CI (99.9%): [144427.430, 149359.227] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_mergeDelayError4  thrpt   30  146893.328 ± 2465.898  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 189348.186 ops/s
# Warmup Iteration   2: 1454264.047 ops/s
# Warmup Iteration   3: 2058405.212 ops/s
# Warmup Iteration   4: 2456353.172 ops/s
# Warmup Iteration   5: 2517129.495 ops/s
# Warmup Iteration   6: 2640395.764 ops/s
# Warmup Iteration   7: 2438696.469 ops/s
# Warmup Iteration   8: 2450713.816 ops/s
# Warmup Iteration   9: 2577591.133 ops/s
# Warmup Iteration  10: 2462575.775 ops/s
# Warmup Iteration  11: 2474433.798 ops/s
# Warmup Iteration  12: 2645984.279 ops/s
# Warmup Iteration  13: 2613408.601 ops/s
# Warmup Iteration  14: 2613476.235 ops/s
# Warmup Iteration  15: 2495099.877 ops/s
# Warmup Iteration  16: 2557208.476 ops/s
# Warmup Iteration  17: 2576440.864 ops/s
# Warmup Iteration  18: 2573226.668 ops/s
# Warmup Iteration  19: 2497460.440 ops/s
# Warmup Iteration  20: 2543881.059 ops/s
# Warmup Iteration  21: 2571555.690 ops/s
# Warmup Iteration  22: 2452424.613 ops/s
# Warmup Iteration  23: 2624541.341 ops/s
# Warmup Iteration  24: 2454843.618 ops/s
# Warmup Iteration  25: 2516972.151 ops/s
# Warmup Iteration  26: 2476835.583 ops/s
# Warmup Iteration  27: 2563515.565 ops/s
# Warmup Iteration  28: 2218081.858 ops/s
# Warmup Iteration  29: 2541849.480 ops/s
# Warmup Iteration  30: 2546637.765 ops/s
Iteration   1: 2574726.738 ops/s
Iteration   2: 2519236.732 ops/s
Iteration   3: 2484914.245 ops/s
Iteration   4: 2611118.897 ops/s
Iteration   5: 2481304.625 ops/s
Iteration   6: 2532279.087 ops/s
Iteration   7: 2575081.942 ops/s
Iteration   8: 2420628.645 ops/s
Iteration   9: 2652238.962 ops/s
Iteration  10: 2470344.005 ops/s
Iteration  11: 2553034.198 ops/s
Iteration  12: 2442971.013 ops/s
Iteration  13: 2638081.952 ops/s
Iteration  14: 2593388.524 ops/s
Iteration  15: 2390755.187 ops/s
Iteration  16: 2515113.919 ops/s
Iteration  17: 2520254.277 ops/s
Iteration  18: 2554487.280 ops/s
Iteration  19: 2527690.144 ops/s
Iteration  20: 2479038.854 ops/s
Iteration  21: 2616208.426 ops/s
Iteration  22: 2432203.617 ops/s
Iteration  23: 2472113.754 ops/s
Iteration  24: 2578026.287 ops/s
Iteration  25: 2546445.500 ops/s
Iteration  26: 2480865.988 ops/s
Iteration  27: 2557691.592 ops/s
Iteration  28: 2451379.834 ops/s
Iteration  29: 2601888.800 ops/s
Iteration  30: 2550238.630 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_take":
  2527458.388 ±(99.9%) 44729.561 ops/s [Average]
  (min, avg, max) = (2390755.187, 2527458.388, 2652238.962), stdev = 66949.106
  CI (99.9%): [2482728.828, 2572187.949] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
MaybeMergeArrayTest._Benchmark.benchmark_take  thrpt   30  2527458.388 ± 44729.561  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_iterableUndeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_iterableUndeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25044.969 ops/s
# Warmup Iteration   2: 125575.548 ops/s
# Warmup Iteration   3: 157903.815 ops/s
# Warmup Iteration   4: 162606.846 ops/s
# Warmup Iteration   5: 158624.619 ops/s
# Warmup Iteration   6: 157329.458 ops/s
# Warmup Iteration   7: 169389.152 ops/s
# Warmup Iteration   8: 152490.977 ops/s
# Warmup Iteration   9: 168616.450 ops/s
# Warmup Iteration  10: 173767.111 ops/s
# Warmup Iteration  11: 171429.351 ops/s
# Warmup Iteration  12: 169154.652 ops/s
# Warmup Iteration  13: 172868.567 ops/s
# Warmup Iteration  14: 166087.538 ops/s
# Warmup Iteration  15: 169676.124 ops/s
# Warmup Iteration  16: 173552.469 ops/s
# Warmup Iteration  17: 170452.307 ops/s
# Warmup Iteration  18: 171568.403 ops/s
# Warmup Iteration  19: 180924.048 ops/s
# Warmup Iteration  20: 172057.892 ops/s
# Warmup Iteration  21: 180109.726 ops/s
# Warmup Iteration  22: 161549.848 ops/s
# Warmup Iteration  23: 175110.297 ops/s
# Warmup Iteration  24: 175094.607 ops/s
# Warmup Iteration  25: 172790.779 ops/s
# Warmup Iteration  26: 175559.452 ops/s
# Warmup Iteration  27: 172139.821 ops/s
# Warmup Iteration  28: 174292.928 ops/s
# Warmup Iteration  29: 183122.905 ops/s
# Warmup Iteration  30: 171585.820 ops/s
Iteration   1: 173426.392 ops/s
Iteration   2: 171151.990 ops/s
Iteration   3: 177069.644 ops/s
Iteration   4: 170622.987 ops/s
Iteration   5: 168565.873 ops/s
Iteration   6: 176930.567 ops/s
Iteration   7: 180074.751 ops/s
Iteration   8: 165813.297 ops/s
Iteration   9: 169444.899 ops/s
Iteration  10: 167415.050 ops/s
Iteration  11: 174819.222 ops/s
Iteration  12: 180831.095 ops/s
Iteration  13: 171285.790 ops/s
Iteration  14: 173105.297 ops/s
Iteration  15: 174387.515 ops/s
Iteration  16: 173044.610 ops/s
Iteration  17: 176763.747 ops/s
Iteration  18: 170086.865 ops/s
Iteration  19: 175948.670 ops/s
Iteration  20: 168823.262 ops/s
Iteration  21: 177109.280 ops/s
Iteration  22: 174220.528 ops/s
Iteration  23: 171248.109 ops/s
Iteration  24: 182536.637 ops/s
Iteration  25: 176311.346 ops/s
Iteration  26: 176329.335 ops/s
Iteration  27: 171423.604 ops/s
Iteration  28: 172812.493 ops/s
Iteration  29: 173221.273 ops/s
Iteration  30: 176471.663 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_iterableUndeliverableUponCancelDelayError":
  173709.860 ±(99.9%) 2657.151 ops/s [Average]
  (min, avg, max) = (165813.297, 173709.860, 182536.637), stdev = 3977.098
  CI (99.9%): [171052.709, 176367.010] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
CompletableMergeTest._Benchmark.benchmark_iterableUndeliverableUponCancelDelayError  thrpt   30  173709.860 ± 2657.151  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray2SignalsComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray2SignalsComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 205579.512 ops/s
# Warmup Iteration   2: 671638.252 ops/s
# Warmup Iteration   3: 1588389.823 ops/s
# Warmup Iteration   4: 1673534.313 ops/s
# Warmup Iteration   5: 1982109.309 ops/s
# Warmup Iteration   6: 1816286.703 ops/s
# Warmup Iteration   7: 1965077.029 ops/s
# Warmup Iteration   8: 1916355.296 ops/s
# Warmup Iteration   9: 1901425.683 ops/s
# Warmup Iteration  10: 1938229.419 ops/s
# Warmup Iteration  11: 1805401.661 ops/s
# Warmup Iteration  12: 1946909.450 ops/s
# Warmup Iteration  13: 1886836.053 ops/s
# Warmup Iteration  14: 1916465.547 ops/s
# Warmup Iteration  15: 1971577.175 ops/s
# Warmup Iteration  16: 1908087.928 ops/s
# Warmup Iteration  17: 1957680.910 ops/s
# Warmup Iteration  18: 1927862.193 ops/s
# Warmup Iteration  19: 1913605.621 ops/s
# Warmup Iteration  20: 1916800.506 ops/s
# Warmup Iteration  21: 1886832.648 ops/s
# Warmup Iteration  22: 1486350.074 ops/s
# Warmup Iteration  23: 1844703.562 ops/s
# Warmup Iteration  24: 1949350.780 ops/s
# Warmup Iteration  25: 1851781.665 ops/s
# Warmup Iteration  26: 1977178.998 ops/s
# Warmup Iteration  27: 1827302.522 ops/s
# Warmup Iteration  28: 1903425.553 ops/s
# Warmup Iteration  29: 1991895.605 ops/s
# Warmup Iteration  30: 1924643.006 ops/s
Iteration   1: 1848419.652 ops/s
Iteration   2: 1978343.878 ops/s
Iteration   3: 1903424.536 ops/s
Iteration   4: 1926987.819 ops/s
Iteration   5: 1906470.727 ops/s
Iteration   6: 1907033.120 ops/s
Iteration   7: 1916559.715 ops/s
Iteration   8: 1892253.000 ops/s
Iteration   9: 1970225.503 ops/s
Iteration  10: 1892269.168 ops/s
Iteration  11: 1969190.639 ops/s
Iteration  12: 1875767.181 ops/s
Iteration  13: 1929351.206 ops/s
Iteration  14: 1937839.721 ops/s
Iteration  15: 1839369.788 ops/s
Iteration  16: 1984738.740 ops/s
Iteration  17: 1884186.321 ops/s
Iteration  18: 1913008.656 ops/s
Iteration  19: 1948043.026 ops/s
Iteration  20: 1944561.445 ops/s
Iteration  21: 1922267.054 ops/s
Iteration  22: 1889985.020 ops/s
Iteration  23: 1965223.341 ops/s
Iteration  24: 1990365.693 ops/s
Iteration  25: 1805666.603 ops/s
Iteration  26: 1929944.548 ops/s
Iteration  27: 1860726.848 ops/s
Iteration  28: 1948125.873 ops/s
Iteration  29: 1864904.419 ops/s
Iteration  30: 1864809.244 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray2SignalsComplete":
  1913668.749 ±(99.9%) 30824.267 ops/s [Average]
  (min, avg, max) = (1805666.603, 1913668.749, 1990365.693), stdev = 46136.315
  CI (99.9%): [1882844.483, 1944493.016] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_ambArray2SignalsComplete  thrpt   30  1913668.749 ± 30824.267  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray1SignalsComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray1SignalsComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 204067.157 ops/s
# Warmup Iteration   2: 1315582.176 ops/s
# Warmup Iteration   3: 1475805.211 ops/s
# Warmup Iteration   4: 1977684.697 ops/s
# Warmup Iteration   5: 1928489.003 ops/s
# Warmup Iteration   6: 1948376.450 ops/s
# Warmup Iteration   7: 1940296.263 ops/s
# Warmup Iteration   8: 1999870.721 ops/s
# Warmup Iteration   9: 1880985.957 ops/s
# Warmup Iteration  10: 1907004.569 ops/s
# Warmup Iteration  11: 1985420.488 ops/s
# Warmup Iteration  12: 2023050.306 ops/s
# Warmup Iteration  13: 1856832.151 ops/s
# Warmup Iteration  14: 1950887.582 ops/s
# Warmup Iteration  15: 1844270.390 ops/s
# Warmup Iteration  16: 1922337.013 ops/s
# Warmup Iteration  17: 1989187.688 ops/s
# Warmup Iteration  18: 1908304.765 ops/s
# Warmup Iteration  19: 1977984.160 ops/s
# Warmup Iteration  20: 1973301.770 ops/s
# Warmup Iteration  21: 1904202.554 ops/s
# Warmup Iteration  22: 1982742.582 ops/s
# Warmup Iteration  23: 1894439.074 ops/s
# Warmup Iteration  24: 1928097.078 ops/s
# Warmup Iteration  25: 1957720.789 ops/s
# Warmup Iteration  26: 1889098.162 ops/s
# Warmup Iteration  27: 1920880.688 ops/s
# Warmup Iteration  28: 1882855.535 ops/s
# Warmup Iteration  29: 1919199.056 ops/s
# Warmup Iteration  30: 1961524.434 ops/s
Iteration   1: 1865702.600 ops/s
Iteration   2: 1939051.721 ops/s
Iteration   3: 1989516.272 ops/s
Iteration   4: 1838074.342 ops/s
Iteration   5: 1936943.482 ops/s
Iteration   6: 1885648.170 ops/s
Iteration   7: 1971338.323 ops/s
Iteration   8: 1877682.847 ops/s
Iteration   9: 1900862.649 ops/s
Iteration  10: 1986655.734 ops/s
Iteration  11: 1905654.533 ops/s
Iteration  12: 1968479.520 ops/s
Iteration  13: 1898439.433 ops/s
Iteration  14: 1971816.181 ops/s
Iteration  15: 1917348.990 ops/s
Iteration  16: 1904367.938 ops/s
Iteration  17: 1936971.551 ops/s
Iteration  18: 1898987.423 ops/s
Iteration  19: 1909331.759 ops/s
Iteration  20: 1951700.967 ops/s
Iteration  21: 1903849.852 ops/s
Iteration  22: 1979608.006 ops/s
Iteration  23: 1936975.170 ops/s
Iteration  24: 1898327.180 ops/s
Iteration  25: 1885544.722 ops/s
Iteration  26: 2038947.967 ops/s
Iteration  27: 1997648.367 ops/s
Iteration  28: 1876976.050 ops/s
Iteration  29: 1981061.491 ops/s
Iteration  30: 1924791.976 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray1SignalsComplete":
  1929276.841 ±(99.9%) 30972.006 ops/s [Average]
  (min, avg, max) = (1838074.342, 1929276.841, 2038947.967), stdev = 46357.444
  CI (99.9%): [1898304.835, 1960248.846] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_ambArray1SignalsComplete  thrpt   30  1929276.841 ± 30972.006  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 239484.364 ops/s
# Warmup Iteration   2: 965408.989 ops/s
# Warmup Iteration   3: 1427588.045 ops/s
# Warmup Iteration   4: 1790333.790 ops/s
# Warmup Iteration   5: 1887224.823 ops/s
# Warmup Iteration   6: 1891884.678 ops/s
# Warmup Iteration   7: 1838820.895 ops/s
# Warmup Iteration   8: 1907964.363 ops/s
# Warmup Iteration   9: 1839371.685 ops/s
# Warmup Iteration  10: 1875463.597 ops/s
# Warmup Iteration  11: 1891403.688 ops/s
# Warmup Iteration  12: 1904232.495 ops/s
# Warmup Iteration  13: 1835199.913 ops/s
# Warmup Iteration  14: 1924572.302 ops/s
# Warmup Iteration  15: 1970957.193 ops/s
# Warmup Iteration  16: 1827366.802 ops/s
# Warmup Iteration  17: 1618093.853 ops/s
# Warmup Iteration  18: 1791768.235 ops/s
# Warmup Iteration  19: 1934037.950 ops/s
# Warmup Iteration  20: 1788559.388 ops/s
# Warmup Iteration  21: 1852670.191 ops/s
# Warmup Iteration  22: 1853707.064 ops/s
# Warmup Iteration  23: 1821008.902 ops/s
# Warmup Iteration  24: 1843618.735 ops/s
# Warmup Iteration  25: 1848077.091 ops/s
# Warmup Iteration  26: 1788327.726 ops/s
# Warmup Iteration  27: 1893019.785 ops/s
# Warmup Iteration  28: 1801793.490 ops/s
# Warmup Iteration  29: 1862939.696 ops/s
# Warmup Iteration  30: 1844562.772 ops/s
Iteration   1: 1795420.503 ops/s
Iteration   2: 1910832.537 ops/s
Iteration   3: 1855050.689 ops/s
Iteration   4: 1871818.645 ops/s
Iteration   5: 1841680.467 ops/s
Iteration   6: 1893414.822 ops/s
Iteration   7: 1893236.943 ops/s
Iteration   8: 1917617.827 ops/s
Iteration   9: 1807492.497 ops/s
Iteration  10: 1894340.490 ops/s
Iteration  11: 1871313.016 ops/s
Iteration  12: 1901727.964 ops/s
Iteration  13: 1832692.953 ops/s
Iteration  14: 1844087.362 ops/s
Iteration  15: 1918629.951 ops/s
Iteration  16: 1826152.050 ops/s
Iteration  17: 1883687.168 ops/s
Iteration  18: 1859523.304 ops/s
Iteration  19: 1900502.235 ops/s
Iteration  20: 1880168.392 ops/s
Iteration  21: 1835140.856 ops/s
Iteration  22: 1943284.630 ops/s
Iteration  23: 1858544.599 ops/s
Iteration  24: 1782876.961 ops/s
Iteration  25: 1890897.220 ops/s
Iteration  26: 1848985.268 ops/s
Iteration  27: 1919061.379 ops/s
Iteration  28: 1835447.501 ops/s
Iteration  29: 1883619.734 ops/s
Iteration  30: 1889185.365 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsComplete":
  1869547.778 ±(99.9%) 26064.865 ops/s [Average]
  (min, avg, max) = (1782876.961, 1869547.778, 1943284.630), stdev = 39012.667
  CI (99.9%): [1843482.912, 1895612.643] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_ambIterable2SignalsComplete  thrpt   30  1869547.778 ± 26064.865  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable1SignalsComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable1SignalsComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 151709.960 ops/s
# Warmup Iteration   2: 711212.069 ops/s
# Warmup Iteration   3: 1477311.772 ops/s
# Warmup Iteration   4: 1532313.278 ops/s
# Warmup Iteration   5: 1863699.058 ops/s
# Warmup Iteration   6: 1727593.914 ops/s
# Warmup Iteration   7: 1761627.588 ops/s
# Warmup Iteration   8: 1803002.071 ops/s
# Warmup Iteration   9: 1689308.950 ops/s
# Warmup Iteration  10: 1733440.486 ops/s
# Warmup Iteration  11: 1792948.938 ops/s
# Warmup Iteration  12: 1735665.755 ops/s
# Warmup Iteration  13: 1839349.953 ops/s
# Warmup Iteration  14: 1761587.646 ops/s
# Warmup Iteration  15: 1766594.370 ops/s
# Warmup Iteration  16: 1787697.038 ops/s
# Warmup Iteration  17: 1777494.723 ops/s
# Warmup Iteration  18: 1822917.542 ops/s
# Warmup Iteration  19: 1776655.136 ops/s
# Warmup Iteration  20: 1798839.992 ops/s
# Warmup Iteration  21: 1737868.539 ops/s
# Warmup Iteration  22: 1779251.239 ops/s
# Warmup Iteration  23: 1835857.943 ops/s
# Warmup Iteration  24: 1748939.526 ops/s
# Warmup Iteration  25: 1717982.595 ops/s
# Warmup Iteration  26: 1782075.841 ops/s
# Warmup Iteration  27: 1781224.961 ops/s
# Warmup Iteration  28: 1770274.644 ops/s
# Warmup Iteration  29: 1827653.725 ops/s
# Warmup Iteration  30: 1722497.412 ops/s
Iteration   1: 1801184.829 ops/s
Iteration   2: 1768397.714 ops/s
Iteration   3: 1814534.086 ops/s
Iteration   4: 1750661.512 ops/s
Iteration   5: 1745879.244 ops/s
Iteration   6: 1819337.010 ops/s
Iteration   7: 1775214.796 ops/s
Iteration   8: 1818299.380 ops/s
Iteration   9: 1728940.380 ops/s
Iteration  10: 1823219.144 ops/s
Iteration  11: 1739573.601 ops/s
Iteration  12: 1792273.305 ops/s
Iteration  13: 1749578.549 ops/s
Iteration  14: 1763921.661 ops/s
Iteration  15: 1801023.958 ops/s
Iteration  16: 1721317.796 ops/s
Iteration  17: 1787734.258 ops/s
Iteration  18: 1812427.898 ops/s
Iteration  19: 1777340.661 ops/s
Iteration  20: 1739159.491 ops/s
Iteration  21: 1807396.656 ops/s
Iteration  22: 1726178.893 ops/s
Iteration  23: 1778255.212 ops/s
Iteration  24: 1826312.068 ops/s
Iteration  25: 1733605.083 ops/s
Iteration  26: 1760048.011 ops/s
Iteration  27: 1871156.916 ops/s
Iteration  28: 1743813.139 ops/s
Iteration  29: 1717072.918 ops/s
Iteration  30: 1785381.877 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable1SignalsComplete":
  1775974.668 ±(99.9%) 25553.113 ops/s [Average]
  (min, avg, max) = (1717072.918, 1775974.668, 1871156.916), stdev = 38246.700
  CI (99.9%): [1750421.555, 1801527.782] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_ambIterable1SignalsComplete  thrpt   30  1775974.668 ± 25553.113  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray2SignalsSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray2SignalsSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 226652.622 ops/s
# Warmup Iteration   2: 715205.523 ops/s
# Warmup Iteration   3: 1524276.715 ops/s
# Warmup Iteration   4: 1499026.289 ops/s
# Warmup Iteration   5: 1736507.304 ops/s
# Warmup Iteration   6: 1738086.610 ops/s
# Warmup Iteration   7: 1798894.515 ops/s
# Warmup Iteration   8: 1694254.471 ops/s
# Warmup Iteration   9: 1765449.142 ops/s
# Warmup Iteration  10: 1822778.927 ops/s
# Warmup Iteration  11: 1556952.842 ops/s
# Warmup Iteration  12: 1676226.880 ops/s
# Warmup Iteration  13: 1728394.442 ops/s
# Warmup Iteration  14: 1833277.304 ops/s
# Warmup Iteration  15: 1727248.612 ops/s
# Warmup Iteration  16: 1800464.268 ops/s
# Warmup Iteration  17: 1703398.210 ops/s
# Warmup Iteration  18: 1801820.632 ops/s
# Warmup Iteration  19: 1718534.101 ops/s
# Warmup Iteration  20: 1786606.864 ops/s
# Warmup Iteration  21: 1734070.248 ops/s
# Warmup Iteration  22: 1736678.337 ops/s
# Warmup Iteration  23: 1737582.768 ops/s
# Warmup Iteration  24: 1711318.028 ops/s
# Warmup Iteration  25: 1752166.902 ops/s
# Warmup Iteration  26: 1712242.970 ops/s
# Warmup Iteration  27: 1786433.256 ops/s
# Warmup Iteration  28: 1689873.881 ops/s
# Warmup Iteration  29: 1739585.649 ops/s
# Warmup Iteration  30: 1790920.324 ops/s
Iteration   1: 1664056.871 ops/s
Iteration   2: 1793693.987 ops/s
Iteration   3: 1731353.344 ops/s
Iteration   4: 1740218.051 ops/s
Iteration   5: 1741288.514 ops/s
Iteration   6: 1744663.173 ops/s
Iteration   7: 1721780.098 ops/s
Iteration   8: 1668928.607 ops/s
Iteration   9: 1713225.840 ops/s
Iteration  10: 1741426.370 ops/s
Iteration  11: 1726941.256 ops/s
Iteration  12: 1816918.219 ops/s
Iteration  13: 1688280.247 ops/s
Iteration  14: 1769677.122 ops/s
Iteration  15: 1697386.569 ops/s
Iteration  16: 1706030.099 ops/s
Iteration  17: 1783149.829 ops/s
Iteration  18: 1708670.525 ops/s
Iteration  19: 1725676.634 ops/s
Iteration  20: 1744111.008 ops/s
Iteration  21: 1735181.717 ops/s
Iteration  22: 1783420.212 ops/s
Iteration  23: 1782034.724 ops/s
Iteration  24: 1694956.983 ops/s
Iteration  25: 1781814.749 ops/s
Iteration  26: 1754567.740 ops/s
Iteration  27: 1745270.488 ops/s
Iteration  28: 1697502.075 ops/s
Iteration  29: 1705138.728 ops/s
Iteration  30: 1830521.656 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambArray2SignalsSuccess":
  1737929.515 ±(99.9%) 27549.326 ops/s [Average]
  (min, avg, max) = (1664056.871, 1737929.515, 1830521.656), stdev = 41234.537
  CI (99.9%): [1710380.189, 1765478.841] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_ambArray2SignalsSuccess  thrpt   30  1737929.515 ± 27549.326  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_noArgSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_noArgSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14221034.955 ops/s
# Warmup Iteration   2: 20330973.734 ops/s
# Warmup Iteration   3: 20440939.735 ops/s
# Warmup Iteration   4: 24776617.848 ops/s
# Warmup Iteration   5: 26202180.634 ops/s
# Warmup Iteration   6: 24069127.060 ops/s
# Warmup Iteration   7: 25577068.472 ops/s
# Warmup Iteration   8: 25074169.353 ops/s
# Warmup Iteration   9: 24353638.857 ops/s
# Warmup Iteration  10: 25530551.133 ops/s
# Warmup Iteration  11: 24267888.433 ops/s
# Warmup Iteration  12: 25359032.116 ops/s
# Warmup Iteration  13: 25532396.974 ops/s
# Warmup Iteration  14: 23582392.479 ops/s
# Warmup Iteration  15: 25723086.693 ops/s
# Warmup Iteration  16: 24432737.041 ops/s
# Warmup Iteration  17: 25183031.759 ops/s
# Warmup Iteration  18: 24900242.274 ops/s
# Warmup Iteration  19: 25204868.441 ops/s
# Warmup Iteration  20: 25633268.235 ops/s
# Warmup Iteration  21: 24834354.399 ops/s
# Warmup Iteration  22: 25865391.444 ops/s
# Warmup Iteration  23: 25103403.866 ops/s
# Warmup Iteration  24: 26170936.232 ops/s
# Warmup Iteration  25: 24882975.568 ops/s
# Warmup Iteration  26: 25667900.004 ops/s
# Warmup Iteration  27: 25366473.634 ops/s
# Warmup Iteration  28: 24667554.305 ops/s
# Warmup Iteration  29: 25253894.930 ops/s
# Warmup Iteration  30: 25543669.486 ops/s
Iteration   1: 24552429.881 ops/s
Iteration   2: 25453904.731 ops/s
Iteration   3: 25337255.460 ops/s
Iteration   4: 24572828.570 ops/s
Iteration   5: 26595002.075 ops/s
Iteration   6: 26430738.807 ops/s
Iteration   7: 24601576.184 ops/s
Iteration   8: 25143215.031 ops/s
Iteration   9: 25253450.331 ops/s
Iteration  10: 25689162.032 ops/s
Iteration  11: 25274482.639 ops/s
Iteration  12: 25280163.957 ops/s
Iteration  13: 26537131.596 ops/s
Iteration  14: 26600740.583 ops/s
Iteration  15: 25241437.081 ops/s
Iteration  16: 25186539.097 ops/s
Iteration  17: 25889458.557 ops/s
Iteration  18: 25059482.293 ops/s
Iteration  19: 26053048.687 ops/s
Iteration  20: 25909256.729 ops/s
Iteration  21: 25066535.172 ops/s
Iteration  22: 26018535.948 ops/s
Iteration  23: 24549056.732 ops/s
Iteration  24: 26012822.713 ops/s
Iteration  25: 24364068.668 ops/s
Iteration  26: 24143380.896 ops/s
Iteration  27: 25947026.643 ops/s
Iteration  28: 25029074.140 ops/s
Iteration  29: 24034471.486 ops/s
Iteration  30: 25770161.929 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_noArgSuccess":
  25386547.955 ±(99.9%) 484716.104 ops/s [Average]
  (min, avg, max) = (24034471.486, 25386547.955, 26600740.583), stdev = 725500.300
  CI (99.9%): [24901831.851, 25871264.059] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
MaybeBlockingSubscribeTest._Benchmark.benchmark_noArgSuccess  thrpt   30  25386547.955 ± 484716.104  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_zipIterableTwoIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_zipIterableTwoIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 370084.253 ops/s
# Warmup Iteration   2: 568241.307 ops/s
# Warmup Iteration   3: 635550.054 ops/s
# Warmup Iteration   4: 605074.874 ops/s
# Warmup Iteration   5: 597531.286 ops/s
# Warmup Iteration   6: 579452.872 ops/s
# Warmup Iteration   7: 507770.814 ops/s
# Warmup Iteration   8: 631064.354 ops/s
# Warmup Iteration   9: 648359.546 ops/s
# Warmup Iteration  10: 615405.252 ops/s
# Warmup Iteration  11: 636799.026 ops/s
# Warmup Iteration  12: 620784.692 ops/s
# Warmup Iteration  13: 625888.319 ops/s
# Warmup Iteration  14: 659528.678 ops/s
# Warmup Iteration  15: 638046.719 ops/s
# Warmup Iteration  16: 608547.554 ops/s
# Warmup Iteration  17: 676382.181 ops/s
# Warmup Iteration  18: 655211.693 ops/s
# Warmup Iteration  19: 679570.185 ops/s
# Warmup Iteration  20: 662935.989 ops/s
# Warmup Iteration  21: 689354.365 ops/s
# Warmup Iteration  22: 687559.205 ops/s
# Warmup Iteration  23: 653926.077 ops/s
# Warmup Iteration  24: 698080.997 ops/s
# Warmup Iteration  25: 647427.366 ops/s
# Warmup Iteration  26: 661805.114 ops/s
# Warmup Iteration  27: 662662.359 ops/s
# Warmup Iteration  28: 681793.715 ops/s
# Warmup Iteration  29: 685566.191 ops/s
# Warmup Iteration  30: 657458.060 ops/s
Iteration   1: 697178.054 ops/s
Iteration   2: 647382.632 ops/s
Iteration   3: 643798.160 ops/s
Iteration   4: 684543.840 ops/s
Iteration   5: 658591.675 ops/s
Iteration   6: 688595.501 ops/s
Iteration   7: 667790.704 ops/s
Iteration   8: 688716.273 ops/s
Iteration   9: 665775.142 ops/s
Iteration  10: 695776.630 ops/s
Iteration  11: 654795.855 ops/s
Iteration  12: 679639.901 ops/s
Iteration  13: 659534.794 ops/s
Iteration  14: 665169.845 ops/s
Iteration  15: 685128.573 ops/s
Iteration  16: 688092.909 ops/s
Iteration  17: 662367.907 ops/s
Iteration  18: 696919.548 ops/s
Iteration  19: 652518.366 ops/s
Iteration  20: 676678.083 ops/s
Iteration  21: 697159.769 ops/s
Iteration  22: 645050.553 ops/s
Iteration  23: 686860.820 ops/s
Iteration  24: 675552.179 ops/s
Iteration  25: 678884.345 ops/s
Iteration  26: 672340.333 ops/s
Iteration  27: 673747.761 ops/s
Iteration  28: 667648.908 ops/s
Iteration  29: 681581.240 ops/s
Iteration  30: 659563.946 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_zipIterableTwoIsNull":
  673246.142 ±(99.9%) 10754.465 ops/s [Average]
  (min, avg, max) = (643798.160, 673246.142, 697178.054), stdev = 16096.779
  CI (99.9%): [662491.676, 684000.607] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
MaybeZipIterableTest._Benchmark.benchmark_zipIterableTwoIsNull  thrpt   30  673246.142 ± 10754.465  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1701954.782 ops/s
# Warmup Iteration   2: 6198410.658 ops/s
# Warmup Iteration   3: 6836450.840 ops/s
# Warmup Iteration   4: 7460681.326 ops/s
# Warmup Iteration   5: 7847598.852 ops/s
# Warmup Iteration   6: 8030132.106 ops/s
# Warmup Iteration   7: 7664016.183 ops/s
# Warmup Iteration   8: 7980239.389 ops/s
# Warmup Iteration   9: 7701632.737 ops/s
# Warmup Iteration  10: 7843938.143 ops/s
# Warmup Iteration  11: 7900971.155 ops/s
# Warmup Iteration  12: 7613893.123 ops/s
# Warmup Iteration  13: 7844486.389 ops/s
# Warmup Iteration  14: 7775420.364 ops/s
# Warmup Iteration  15: 7815583.726 ops/s
# Warmup Iteration  16: 7824980.977 ops/s
# Warmup Iteration  17: 7553161.410 ops/s
# Warmup Iteration  18: 7881641.588 ops/s
# Warmup Iteration  19: 8088990.828 ops/s
# Warmup Iteration  20: 7527974.958 ops/s
# Warmup Iteration  21: 7723488.300 ops/s
# Warmup Iteration  22: 7825247.522 ops/s
# Warmup Iteration  23: 7970978.673 ops/s
# Warmup Iteration  24: 7661045.506 ops/s
# Warmup Iteration  25: 7956649.020 ops/s
# Warmup Iteration  26: 7794777.330 ops/s
# Warmup Iteration  27: 7806049.404 ops/s
# Warmup Iteration  28: 7910030.424 ops/s
# Warmup Iteration  29: 7777737.365 ops/s
# Warmup Iteration  30: 7994887.082 ops/s
Iteration   1: 7722406.208 ops/s
Iteration   2: 8052080.869 ops/s
Iteration   3: 7895361.724 ops/s
Iteration   4: 7490541.672 ops/s
Iteration   5: 7971457.012 ops/s
Iteration   6: 7700703.831 ops/s
Iteration   7: 7512619.285 ops/s
Iteration   8: 7981275.740 ops/s
Iteration   9: 7641591.759 ops/s
Iteration  10: 7927903.528 ops/s
Iteration  11: 7954720.719 ops/s
Iteration  12: 7711174.984 ops/s
Iteration  13: 8107889.424 ops/s
Iteration  14: 7865449.564 ops/s
Iteration  15: 7448415.049 ops/s
Iteration  16: 7772623.216 ops/s
Iteration  17: 7866379.987 ops/s
Iteration  18: 7604609.235 ops/s
Iteration  19: 7824944.833 ops/s
Iteration  20: 7653932.821 ops/s
Iteration  21: 7808281.654 ops/s
Iteration  22: 7629965.072 ops/s
Iteration  23: 7734261.818 ops/s
Iteration  24: 7917010.949 ops/s
Iteration  25: 7561350.826 ops/s
Iteration  26: 8022149.853 ops/s
Iteration  27: 7711414.235 ops/s
Iteration  28: 7974105.063 ops/s
Iteration  29: 7619993.084 ops/s
Iteration  30: 7831486.510 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_dispose":
  7783870.017 ±(99.9%) 118184.268 ops/s [Average]
  (min, avg, max) = (7448415.049, 7783870.017, 8107889.424), stdev = 176892.662
  CI (99.9%): [7665685.749, 7902054.286] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
MaybeFlatMapSingleElementTest._Benchmark.benchmark_dispose  thrpt   30  7783870.017 ± 118184.268  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1520030.449 ops/s
# Warmup Iteration   2: 5248630.216 ops/s
# Warmup Iteration   3: 8060062.396 ops/s
# Warmup Iteration   4: 7576658.110 ops/s
# Warmup Iteration   5: 6844137.263 ops/s
# Warmup Iteration   6: 7916674.151 ops/s
# Warmup Iteration   7: 7774556.922 ops/s
# Warmup Iteration   8: 7975614.072 ops/s
# Warmup Iteration   9: 7909004.798 ops/s
# Warmup Iteration  10: 7859702.149 ops/s
# Warmup Iteration  11: 7921105.229 ops/s
# Warmup Iteration  12: 7891380.459 ops/s
# Warmup Iteration  13: 7746605.416 ops/s
# Warmup Iteration  14: 8153205.764 ops/s
# Warmup Iteration  15: 7719227.424 ops/s
# Warmup Iteration  16: 8022760.573 ops/s
# Warmup Iteration  17: 7832827.128 ops/s
# Warmup Iteration  18: 7690708.589 ops/s
# Warmup Iteration  19: 7838272.612 ops/s
# Warmup Iteration  20: 8025912.725 ops/s
# Warmup Iteration  21: 7739055.922 ops/s
# Warmup Iteration  22: 7912080.226 ops/s
# Warmup Iteration  23: 7638823.557 ops/s
# Warmup Iteration  24: 7975085.623 ops/s
# Warmup Iteration  25: 8093692.562 ops/s
# Warmup Iteration  26: 7866853.464 ops/s
# Warmup Iteration  27: 7959041.769 ops/s
# Warmup Iteration  28: 7842277.800 ops/s
# Warmup Iteration  29: 8011740.952 ops/s
# Warmup Iteration  30: 7757630.432 ops/s
Iteration   1: 7865129.347 ops/s
Iteration   2: 8097051.234 ops/s
Iteration   3: 8137000.742 ops/s
Iteration   4: 7594979.161 ops/s
Iteration   5: 7960368.499 ops/s
Iteration   6: 7594778.189 ops/s
Iteration   7: 8215912.573 ops/s
Iteration   8: 8003825.218 ops/s
Iteration   9: 7776106.464 ops/s
Iteration  10: 7743947.021 ops/s
Iteration  11: 7962750.827 ops/s
Iteration  12: 7918864.647 ops/s
Iteration  13: 7775306.425 ops/s
Iteration  14: 7773342.990 ops/s
Iteration  15: 7943022.741 ops/s
Iteration  16: 8192957.026 ops/s
Iteration  17: 8031706.708 ops/s
Iteration  18: 7573327.342 ops/s
Iteration  19: 8329351.541 ops/s
Iteration  20: 7897864.892 ops/s
Iteration  21: 7705547.441 ops/s
Iteration  22: 8004219.865 ops/s
Iteration  23: 7656874.121 ops/s
Iteration  24: 7601511.357 ops/s
Iteration  25: 8001399.938 ops/s
Iteration  26: 7594758.807 ops/s
Iteration  27: 8162936.243 ops/s
Iteration  28: 7660557.537 ops/s
Iteration  29: 7898110.124 ops/s
Iteration  30: 8081242.725 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_dispose":
  7891825.058 ±(99.9%) 142861.590 ops/s [Average]
  (min, avg, max) = (7573327.342, 7891825.058, 8329351.541), stdev = 213828.519
  CI (99.9%): [7748963.468, 8034686.648] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
MaybeConcatMapSingleTest._Benchmark.benchmark_dispose  thrpt   30  7891825.058 ± 142861.590  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7552066.039 ops/s
# Warmup Iteration   2: 12118835.072 ops/s
# Warmup Iteration   3: 15704648.808 ops/s
# Warmup Iteration   4: 16029750.449 ops/s
# Warmup Iteration   5: 16608989.667 ops/s
# Warmup Iteration   6: 15882570.966 ops/s
# Warmup Iteration   7: 16624150.298 ops/s
# Warmup Iteration   8: 16301815.436 ops/s
# Warmup Iteration   9: 15758374.170 ops/s
# Warmup Iteration  10: 16898675.537 ops/s
# Warmup Iteration  11: 16571199.303 ops/s
# Warmup Iteration  12: 15720784.922 ops/s
# Warmup Iteration  13: 16588590.411 ops/s
# Warmup Iteration  14: 16699069.026 ops/s
# Warmup Iteration  15: 16675695.119 ops/s
# Warmup Iteration  16: 16602599.000 ops/s
# Warmup Iteration  17: 16374418.797 ops/s
# Warmup Iteration  18: 16630390.060 ops/s
# Warmup Iteration  19: 15891174.390 ops/s
# Warmup Iteration  20: 16685613.563 ops/s
# Warmup Iteration  21: 16123719.893 ops/s
# Warmup Iteration  22: 15703885.567 ops/s
# Warmup Iteration  23: 16867952.786 ops/s
# Warmup Iteration  24: 16020869.561 ops/s
# Warmup Iteration  25: 16440428.581 ops/s
# Warmup Iteration  26: 16648982.301 ops/s
# Warmup Iteration  27: 16093410.550 ops/s
# Warmup Iteration  28: 16069353.158 ops/s
# Warmup Iteration  29: 16840607.523 ops/s
# Warmup Iteration  30: 15868598.473 ops/s
Iteration   1: 16925960.631 ops/s
Iteration   2: 16294627.779 ops/s
Iteration   3: 15884681.430 ops/s
Iteration   4: 17256519.812 ops/s
Iteration   5: 15769200.728 ops/s
Iteration   6: 16462975.309 ops/s
Iteration   7: 16751600.613 ops/s
Iteration   8: 16311926.812 ops/s
Iteration   9: 16891882.918 ops/s
Iteration  10: 16568684.185 ops/s
Iteration  11: 16453275.009 ops/s
Iteration  12: 16657874.270 ops/s
Iteration  13: 15976430.589 ops/s
Iteration  14: 16461185.989 ops/s
Iteration  15: 16741177.129 ops/s
Iteration  16: 17193311.342 ops/s
Iteration  17: 16004395.202 ops/s
Iteration  18: 17040818.915 ops/s
Iteration  19: 16299859.140 ops/s
Iteration  20: 16736001.848 ops/s
Iteration  21: 16292547.360 ops/s
Iteration  22: 16555472.486 ops/s
Iteration  23: 16503507.696 ops/s
Iteration  24: 16514746.986 ops/s
Iteration  25: 16694342.710 ops/s
Iteration  26: 15951083.385 ops/s
Iteration  27: 17075233.903 ops/s
Iteration  28: 14218365.112 ops/s
Iteration  29: 16302139.502 ops/s
Iteration  30: 16711773.106 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_just":
  16450053.397 ±(99.9%) 379845.799 ops/s [Average]
  (min, avg, max) = (14218365.112, 16450053.397, 17256519.812), stdev = 568535.353
  CI (99.9%): [16070207.597, 16829899.196] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
MaybeToCompletionStageTest._Benchmark.benchmark_just  thrpt   30  16450053.397 ± 379845.799  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastWithNoElements$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastWithNoElements

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4620787.762 ops/s
# Warmup Iteration   2: 11252167.789 ops/s
# Warmup Iteration   3: 17267191.480 ops/s
# Warmup Iteration   4: 15938578.814 ops/s
# Warmup Iteration   5: 16891671.052 ops/s
# Warmup Iteration   6: 17022897.539 ops/s
# Warmup Iteration   7: 15898607.843 ops/s
# Warmup Iteration   8: 16724151.648 ops/s
# Warmup Iteration   9: 16137027.828 ops/s
# Warmup Iteration  10: 17220234.567 ops/s
# Warmup Iteration  11: 16629464.388 ops/s
# Warmup Iteration  12: 15877568.781 ops/s
# Warmup Iteration  13: 16746650.931 ops/s
# Warmup Iteration  14: 16472892.800 ops/s
# Warmup Iteration  15: 16695285.371 ops/s
# Warmup Iteration  16: 16557253.842 ops/s
# Warmup Iteration  17: 16773755.305 ops/s
# Warmup Iteration  18: 16582017.435 ops/s
# Warmup Iteration  19: 16530504.682 ops/s
# Warmup Iteration  20: 17026865.278 ops/s
# Warmup Iteration  21: 17087909.014 ops/s
# Warmup Iteration  22: 16026201.523 ops/s
# Warmup Iteration  23: 16501685.219 ops/s
# Warmup Iteration  24: 17120222.733 ops/s
# Warmup Iteration  25: 16073914.254 ops/s
# Warmup Iteration  26: 17376001.592 ops/s
# Warmup Iteration  27: 16433260.315 ops/s
# Warmup Iteration  28: 16416344.532 ops/s
# Warmup Iteration  29: 17318615.300 ops/s
# Warmup Iteration  30: 16745899.228 ops/s
Iteration   1: 16271403.821 ops/s
Iteration   2: 16917073.509 ops/s
Iteration   3: 16839719.376 ops/s
Iteration   4: 16636938.693 ops/s
Iteration   5: 17022283.021 ops/s
Iteration   6: 16402000.343 ops/s
Iteration   7: 16134710.616 ops/s
Iteration   8: 16767048.849 ops/s
Iteration   9: 16206675.711 ops/s
Iteration  10: 17002309.154 ops/s
Iteration  11: 16649121.306 ops/s
Iteration  12: 16681550.329 ops/s
Iteration  13: 17159638.889 ops/s
Iteration  14: 16966664.176 ops/s
Iteration  15: 16577161.678 ops/s
Iteration  16: 16509786.121 ops/s
Iteration  17: 17257793.393 ops/s
Iteration  18: 16628744.192 ops/s
Iteration  19: 16461951.911 ops/s
Iteration  20: 17170671.962 ops/s
Iteration  21: 15805463.749 ops/s
Iteration  22: 17307999.161 ops/s
Iteration  23: 17015948.826 ops/s
Iteration  24: 16367584.361 ops/s
Iteration  25: 16114498.914 ops/s
Iteration  26: 17301135.581 ops/s
Iteration  27: 16501655.739 ops/s
Iteration  28: 16678131.808 ops/s
Iteration  29: 17470687.079 ops/s
Iteration  30: 16611936.560 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastWithNoElements":
  16714609.628 ±(99.9%) 270572.638 ops/s [Average]
  (min, avg, max) = (15805463.749, 16714609.628, 17470687.079), stdev = 404980.417
  CI (99.9%): [16444036.990, 16985182.265] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ObservableLastTest._Benchmark.benchmark_lastWithNoElements  thrpt   30  16714609.628 ± 270572.638  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSingleEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSingleEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 359299.666 ops/s
# Warmup Iteration   2: 648654.147 ops/s
# Warmup Iteration   3: 734484.436 ops/s
# Warmup Iteration   4: 725667.575 ops/s
# Warmup Iteration   5: 757158.372 ops/s
# Warmup Iteration   6: 696344.521 ops/s
# Warmup Iteration   7: 745672.263 ops/s
# Warmup Iteration   8: 755345.640 ops/s
# Warmup Iteration   9: 766197.168 ops/s
# Warmup Iteration  10: 766036.254 ops/s
# Warmup Iteration  11: 739705.311 ops/s
# Warmup Iteration  12: 722920.395 ops/s
# Warmup Iteration  13: 751756.265 ops/s
# Warmup Iteration  14: 728139.211 ops/s
# Warmup Iteration  15: 736654.567 ops/s
# Warmup Iteration  16: 731083.371 ops/s
# Warmup Iteration  17: 782315.579 ops/s
# Warmup Iteration  18: 764604.386 ops/s
# Warmup Iteration  19: 798129.931 ops/s
# Warmup Iteration  20: 801161.349 ops/s
# Warmup Iteration  21: 749535.977 ops/s
# Warmup Iteration  22: 801854.793 ops/s
# Warmup Iteration  23: 777972.945 ops/s
# Warmup Iteration  24: 766749.366 ops/s
# Warmup Iteration  25: 795861.719 ops/s
# Warmup Iteration  26: 825458.901 ops/s
# Warmup Iteration  27: 785138.360 ops/s
# Warmup Iteration  28: 757034.309 ops/s
# Warmup Iteration  29: 800715.951 ops/s
# Warmup Iteration  30: 750207.735 ops/s
Iteration   1: 813016.237 ops/s
Iteration   2: 759367.156 ops/s
Iteration   3: 804954.332 ops/s
Iteration   4: 798529.254 ops/s
Iteration   5: 774860.601 ops/s
Iteration   6: 808693.740 ops/s
Iteration   7: 769807.944 ops/s
Iteration   8: 798368.099 ops/s
Iteration   9: 783268.582 ops/s
Iteration  10: 780338.204 ops/s
Iteration  11: 822589.480 ops/s
Iteration  12: 761808.837 ops/s
Iteration  13: 808139.676 ops/s
Iteration  14: 760550.889 ops/s
Iteration  15: 775421.997 ops/s
Iteration  16: 809604.177 ops/s
Iteration  17: 773963.457 ops/s
Iteration  18: 773267.828 ops/s
Iteration  19: 821165.484 ops/s
Iteration  20: 767816.660 ops/s
Iteration  21: 819977.478 ops/s
Iteration  22: 756628.351 ops/s
Iteration  23: 679635.089 ops/s
Iteration  24: 783534.310 ops/s
Iteration  25: 800187.847 ops/s
Iteration  26: 824175.823 ops/s
Iteration  27: 744856.538 ops/s
Iteration  28: 801305.302 ops/s
Iteration  29: 789484.448 ops/s
Iteration  30: 770084.327 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSingleEmpty":
  784513.405 ±(99.9%) 19918.559 ops/s [Average]
  (min, avg, max) = (679635.089, 784513.405, 824175.823), stdev = 29813.163
  CI (99.9%): [764594.846, 804431.964] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
ObservableBlockingTest._Benchmark.benchmark_blockingSingleEmpty  thrpt   30  784513.405 ± 19918.559  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2384281.898 ops/s
# Warmup Iteration   2: 6746555.958 ops/s
# Warmup Iteration   3: 8517001.632 ops/s
# Warmup Iteration   4: 8592745.435 ops/s
# Warmup Iteration   5: 9155834.393 ops/s
# Warmup Iteration   6: 8927455.026 ops/s
# Warmup Iteration   7: 8404805.869 ops/s
# Warmup Iteration   8: 8741296.992 ops/s
# Warmup Iteration   9: 8784197.422 ops/s
# Warmup Iteration  10: 8482023.339 ops/s
# Warmup Iteration  11: 8710223.447 ops/s
# Warmup Iteration  12: 9052094.416 ops/s
# Warmup Iteration  13: 8593246.319 ops/s
# Warmup Iteration  14: 9086848.110 ops/s
# Warmup Iteration  15: 8550575.558 ops/s
# Warmup Iteration  16: 8670635.451 ops/s
# Warmup Iteration  17: 8611597.564 ops/s
# Warmup Iteration  18: 8243644.756 ops/s
# Warmup Iteration  19: 8617316.805 ops/s
# Warmup Iteration  20: 8139811.490 ops/s
# Warmup Iteration  21: 8325180.087 ops/s
# Warmup Iteration  22: 8785724.889 ops/s
# Warmup Iteration  23: 8458576.521 ops/s
# Warmup Iteration  24: 8199921.307 ops/s
# Warmup Iteration  25: 8702051.303 ops/s
# Warmup Iteration  26: 8519501.738 ops/s
# Warmup Iteration  27: 8411018.320 ops/s
# Warmup Iteration  28: 8346538.520 ops/s
# Warmup Iteration  29: 8798258.737 ops/s
# Warmup Iteration  30: 8285359.308 ops/s
Iteration   1: 8333414.871 ops/s
Iteration   2: 8663669.450 ops/s
Iteration   3: 8470887.179 ops/s
Iteration   4: 8638751.211 ops/s
Iteration   5: 8349883.974 ops/s
Iteration   6: 8572655.993 ops/s
Iteration   7: 8480062.089 ops/s
Iteration   8: 8422899.186 ops/s
Iteration   9: 8685975.287 ops/s
Iteration  10: 8348640.391 ops/s
Iteration  11: 8635863.811 ops/s
Iteration  12: 8078331.264 ops/s
Iteration  13: 8805547.131 ops/s
Iteration  14: 8330919.163 ops/s
Iteration  15: 8394172.056 ops/s
Iteration  16: 8663776.623 ops/s
Iteration  17: 8135586.839 ops/s
Iteration  18: 8737657.462 ops/s
Iteration  19: 8448190.499 ops/s
Iteration  20: 8301262.944 ops/s
Iteration  21: 8621634.416 ops/s
Iteration  22: 8545231.546 ops/s
Iteration  23: 9007060.210 ops/s
Iteration  24: 8504249.081 ops/s
Iteration  25: 8487569.991 ops/s
Iteration  26: 8413585.807 ops/s
Iteration  27: 8226994.828 ops/s
Iteration  28: 8630071.862 ops/s
Iteration  29: 8399990.419 ops/s
Iteration  30: 8144517.348 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_dispose":
  8482635.098 ±(99.9%) 138950.364 ops/s [Average]
  (min, avg, max) = (8078331.264, 8482635.098, 9007060.210), stdev = 207974.380
  CI (99.9%): [8343684.733, 8621585.462] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
MaybeFlatMapSingleTest._Benchmark.benchmark_dispose  thrpt   30  8482635.098 ± 138950.364  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_offlineSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_offlineSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1078268.021 ops/s
# Warmup Iteration   2: 2451085.371 ops/s
# Warmup Iteration   3: 3011902.874 ops/s
# Warmup Iteration   4: 3416290.565 ops/s
# Warmup Iteration   5: 3444017.246 ops/s
# Warmup Iteration   6: 3366193.831 ops/s
# Warmup Iteration   7: 3299810.461 ops/s
# Warmup Iteration   8: 3361140.062 ops/s
# Warmup Iteration   9: 3359681.987 ops/s
# Warmup Iteration  10: 3384024.576 ops/s
# Warmup Iteration  11: 3307315.215 ops/s
# Warmup Iteration  12: 3475183.542 ops/s
# Warmup Iteration  13: 3339874.758 ops/s
# Warmup Iteration  14: 3424527.744 ops/s
# Warmup Iteration  15: 3479127.470 ops/s
# Warmup Iteration  16: 3435755.009 ops/s
# Warmup Iteration  17: 3217491.400 ops/s
# Warmup Iteration  18: 3452003.335 ops/s
# Warmup Iteration  19: 3281140.537 ops/s
# Warmup Iteration  20: 3370285.801 ops/s
# Warmup Iteration  21: 3358534.121 ops/s
# Warmup Iteration  22: 3395028.692 ops/s
# Warmup Iteration  23: 3423367.883 ops/s
# Warmup Iteration  24: 3321286.412 ops/s
# Warmup Iteration  25: 3371197.361 ops/s
# Warmup Iteration  26: 3458925.890 ops/s
# Warmup Iteration  27: 3362501.811 ops/s
# Warmup Iteration  28: 3357158.440 ops/s
# Warmup Iteration  29: 3520597.978 ops/s
# Warmup Iteration  30: 3189022.949 ops/s
Iteration   1: 3512127.740 ops/s
Iteration   2: 3260293.943 ops/s
Iteration   3: 3502605.802 ops/s
Iteration   4: 3451006.810 ops/s
Iteration   5: 3371558.737 ops/s
Iteration   6: 3500938.108 ops/s
Iteration   7: 3434317.562 ops/s
Iteration   8: 3246168.136 ops/s
Iteration   9: 3458220.279 ops/s
Iteration  10: 3443009.521 ops/s
Iteration  11: 3429287.163 ops/s
Iteration  12: 3306379.879 ops/s
Iteration  13: 3367563.211 ops/s
Iteration  14: 3400137.830 ops/s
Iteration  15: 3348896.396 ops/s
Iteration  16: 3262825.255 ops/s
Iteration  17: 3107509.872 ops/s
Iteration  18: 3268192.932 ops/s
Iteration  19: 3393763.402 ops/s
Iteration  20: 3298246.179 ops/s
Iteration  21: 3552818.184 ops/s
Iteration  22: 3462474.113 ops/s
Iteration  23: 3331027.685 ops/s
Iteration  24: 3430342.544 ops/s
Iteration  25: 3289346.475 ops/s
Iteration  26: 3456986.714 ops/s
Iteration  27: 3478084.020 ops/s
Iteration  28: 3247148.819 ops/s
Iteration  29: 3425057.753 ops/s
Iteration  30: 3291554.342 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_offlineSuccess":
  3377596.313 ±(99.9%) 68734.431 ops/s [Average]
  (min, avg, max) = (3107509.872, 3377596.313, 3552818.184), stdev = 102878.468
  CI (99.9%): [3308861.882, 3446330.745] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MaybeCacheTest._Benchmark.benchmark_offlineSuccess  thrpt   30  3377596.313 ± 68734.431  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_errorPassesThruMap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_errorPassesThruMap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.828 ops/s
# Warmup Iteration   2: 39205.779 ops/s
# Warmup Iteration   3: 149617.169 ops/s
# Warmup Iteration   4: 269695.104 ops/s
# Warmup Iteration   5: 462613.232 ops/s
# Warmup Iteration   6: 570158.665 ops/s
# Warmup Iteration   7: 592119.752 ops/s
# Warmup Iteration   8: 603671.662 ops/s
# Warmup Iteration   9: 585764.781 ops/s
# Warmup Iteration  10: 579085.998 ops/s
# Warmup Iteration  11: 585652.429 ops/s
# Warmup Iteration  12: 577931.030 ops/s
# Warmup Iteration  13: 573760.063 ops/s
# Warmup Iteration  14: 577062.241 ops/s
# Warmup Iteration  15: 591566.041 ops/s
# Warmup Iteration  16: 582635.136 ops/s
# Warmup Iteration  17: 583579.839 ops/s
# Warmup Iteration  18: 603915.969 ops/s
# Warmup Iteration  19: 581362.512 ops/s
# Warmup Iteration  20: 575718.055 ops/s
# Warmup Iteration  21: 611410.708 ops/s
# Warmup Iteration  22: 573953.510 ops/s
# Warmup Iteration  23: 601430.595 ops/s
# Warmup Iteration  24: 562365.737 ops/s
# Warmup Iteration  25: 597588.730 ops/s
# Warmup Iteration  26: 568719.884 ops/s
# Warmup Iteration  27: 601000.329 ops/s
# Warmup Iteration  28: 577786.595 ops/s
# Warmup Iteration  29: 583590.724 ops/s
# Warmup Iteration  30: 595442.239 ops/s
Iteration   1: 565453.548 ops/s
Iteration   2: 595877.251 ops/s
Iteration   3: 577834.818 ops/s
Iteration   4: 580759.931 ops/s
Iteration   5: 614892.180 ops/s
Iteration   6: 568232.182 ops/s
Iteration   7: 585991.329 ops/s
Iteration   8: 572300.727 ops/s
Iteration   9: 581633.575 ops/s
Iteration  10: 598556.456 ops/s
Iteration  11: 578454.040 ops/s
Iteration  12: 580305.755 ops/s
Iteration  13: 612797.877 ops/s
Iteration  14: 543958.698 ops/s
Iteration  15: 560873.837 ops/s
Iteration  16: 600620.406 ops/s
Iteration  17: 569336.390 ops/s
Iteration  18: 578499.854 ops/s
Iteration  19: 603199.133 ops/s
Iteration  20: 568401.269 ops/s
Iteration  21: 590990.960 ops/s
Iteration  22: 598037.330 ops/s
Iteration  23: 561032.704 ops/s
Iteration  24: 609814.727 ops/s
Iteration  25: 569630.086 ops/s
Iteration  26: 602105.087 ops/s
Iteration  27: 574972.888 ops/s
Iteration  28: 589982.411 ops/s
Iteration  29: 574533.370 ops/s
Iteration  30: 589242.579 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_errorPassesThruMap":
  583277.380 ±(99.9%) 11393.055 ops/s [Average]
  (min, avg, max) = (543958.698, 583277.380, 614892.180), stdev = 17052.589
  CI (99.9%): [571884.325, 594670.435] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
ObservableMapTest._Benchmark.benchmark_errorPassesThruMap  thrpt   30  583277.380 ± 11393.055  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_zipArrayOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_zipArrayOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 319786.772 ops/s
# Warmup Iteration   2: 536560.876 ops/s
# Warmup Iteration   3: 620455.680 ops/s
# Warmup Iteration   4: 583553.908 ops/s
# Warmup Iteration   5: 598460.151 ops/s
# Warmup Iteration   6: 575146.827 ops/s
# Warmup Iteration   7: 644371.062 ops/s
# Warmup Iteration   8: 648881.681 ops/s
# Warmup Iteration   9: 655791.769 ops/s
# Warmup Iteration  10: 638876.679 ops/s
# Warmup Iteration  11: 641474.540 ops/s
# Warmup Iteration  12: 645959.342 ops/s
# Warmup Iteration  13: 622224.740 ops/s
# Warmup Iteration  14: 667645.195 ops/s
# Warmup Iteration  15: 631396.848 ops/s
# Warmup Iteration  16: 663028.583 ops/s
# Warmup Iteration  17: 690317.228 ops/s
# Warmup Iteration  18: 686698.727 ops/s
# Warmup Iteration  19: 695414.889 ops/s
# Warmup Iteration  20: 701247.319 ops/s
# Warmup Iteration  21: 655913.551 ops/s
# Warmup Iteration  22: 678053.221 ops/s
# Warmup Iteration  23: 677666.532 ops/s
# Warmup Iteration  24: 662988.706 ops/s
# Warmup Iteration  25: 697651.385 ops/s
# Warmup Iteration  26: 656739.212 ops/s
# Warmup Iteration  27: 707667.375 ops/s
# Warmup Iteration  28: 656276.884 ops/s
# Warmup Iteration  29: 683322.742 ops/s
# Warmup Iteration  30: 690202.477 ops/s
Iteration   1: 659927.415 ops/s
Iteration   2: 687815.416 ops/s
Iteration   3: 697663.412 ops/s
Iteration   4: 647365.499 ops/s
Iteration   5: 705773.889 ops/s
Iteration   6: 691904.701 ops/s
Iteration   7: 650270.642 ops/s
Iteration   8: 708369.380 ops/s
Iteration   9: 665656.722 ops/s
Iteration  10: 705970.014 ops/s
Iteration  11: 677642.069 ops/s
Iteration  12: 554873.578 ops/s
Iteration  13: 703455.436 ops/s
Iteration  14: 679314.614 ops/s
Iteration  15: 673391.707 ops/s
Iteration  16: 675511.858 ops/s
Iteration  17: 677074.309 ops/s
Iteration  18: 693581.439 ops/s
Iteration  19: 666437.913 ops/s
Iteration  20: 678435.000 ops/s
Iteration  21: 689064.685 ops/s
Iteration  22: 668259.716 ops/s
Iteration  23: 717155.720 ops/s
Iteration  24: 679308.285 ops/s
Iteration  25: 662337.790 ops/s
Iteration  26: 680656.169 ops/s
Iteration  27: 679645.869 ops/s
Iteration  28: 685261.452 ops/s
Iteration  29: 674191.204 ops/s
Iteration  30: 687383.753 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_zipArrayOneIsNull":
  677456.655 ±(99.9%) 19102.566 ops/s [Average]
  (min, avg, max) = (554873.578, 677456.655, 717155.720), stdev = 28591.824
  CI (99.9%): [658354.089, 696559.222] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
MaybeZipArrayTest._Benchmark.benchmark_zipArrayOneIsNull  thrpt   30  677456.655 ± 19102.566  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3788612.743 ops/s
# Warmup Iteration   2: 7010731.624 ops/s
# Warmup Iteration   3: 9519110.462 ops/s
# Warmup Iteration   4: 9212393.514 ops/s
# Warmup Iteration   5: 9608237.505 ops/s
# Warmup Iteration   6: 9434858.472 ops/s
# Warmup Iteration   7: 9228057.641 ops/s
# Warmup Iteration   8: 9630288.355 ops/s
# Warmup Iteration   9: 9444659.957 ops/s
# Warmup Iteration  10: 9622124.293 ops/s
# Warmup Iteration  11: 9172828.155 ops/s
# Warmup Iteration  12: 9787451.612 ops/s
# Warmup Iteration  13: 9466532.463 ops/s
# Warmup Iteration  14: 9560786.806 ops/s
# Warmup Iteration  15: 9714226.830 ops/s
# Warmup Iteration  16: 9635692.887 ops/s
# Warmup Iteration  17: 9092668.416 ops/s
# Warmup Iteration  18: 9207274.162 ops/s
# Warmup Iteration  19: 9624240.013 ops/s
# Warmup Iteration  20: 9394963.648 ops/s
# Warmup Iteration  21: 9379697.285 ops/s
# Warmup Iteration  22: 9619048.964 ops/s
# Warmup Iteration  23: 9244523.954 ops/s
# Warmup Iteration  24: 9566327.953 ops/s
# Warmup Iteration  25: 9519105.770 ops/s
# Warmup Iteration  26: 9263080.295 ops/s
# Warmup Iteration  27: 9659481.469 ops/s
# Warmup Iteration  28: 9679445.463 ops/s
# Warmup Iteration  29: 9280283.127 ops/s
# Warmup Iteration  30: 9562049.639 ops/s
Iteration   1: 9471043.679 ops/s
Iteration   2: 9736365.915 ops/s
Iteration   3: 9307908.567 ops/s
Iteration   4: 9471736.507 ops/s
Iteration   5: 9548633.432 ops/s
Iteration   6: 9248830.416 ops/s
Iteration   7: 9624315.954 ops/s
Iteration   8: 9356741.775 ops/s
Iteration   9: 9312118.106 ops/s
Iteration  10: 9712631.105 ops/s
Iteration  11: 9370138.719 ops/s
Iteration  12: 9447395.463 ops/s
Iteration  13: 9661580.785 ops/s
Iteration  14: 9408126.218 ops/s
Iteration  15: 9067969.992 ops/s
Iteration  16: 9845335.956 ops/s
Iteration  17: 9287305.909 ops/s
Iteration  18: 9203306.771 ops/s
Iteration  19: 9654511.961 ops/s
Iteration  20: 9179757.335 ops/s
Iteration  21: 9499027.144 ops/s
Iteration  22: 9376375.336 ops/s
Iteration  23: 9495792.808 ops/s
Iteration  24: 9870544.442 ops/s
Iteration  25: 9216476.370 ops/s
Iteration  26: 9577083.390 ops/s
Iteration  27: 9438016.463 ops/s
Iteration  28: 9420782.939 ops/s
Iteration  29: 9218929.151 ops/s
Iteration  30: 10150926.022 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_dispose":
  9472656.954 ±(99.9%) 158175.112 ops/s [Average]
  (min, avg, max) = (9067969.992, 9472656.954, 10150926.022), stdev = 236749.079
  CI (99.9%): [9314481.842, 9630832.066] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score        Error  Units
MaybeFlattenTest._Benchmark.benchmark_dispose  thrpt   30  9472656.954 ± 158175.112  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2752093.487 ops/s
# Warmup Iteration   2: 6668040.249 ops/s
# Warmup Iteration   3: 9193686.137 ops/s
# Warmup Iteration   4: 9304497.892 ops/s
# Warmup Iteration   5: 9649440.232 ops/s
# Warmup Iteration   6: 9854722.844 ops/s
# Warmup Iteration   7: 9019958.384 ops/s
# Warmup Iteration   8: 9591321.119 ops/s
# Warmup Iteration   9: 9179184.038 ops/s
# Warmup Iteration  10: 9228379.733 ops/s
# Warmup Iteration  11: 9332550.959 ops/s
# Warmup Iteration  12: 9268492.242 ops/s
# Warmup Iteration  13: 9382507.063 ops/s
# Warmup Iteration  14: 9759155.161 ops/s
# Warmup Iteration  15: 9148531.786 ops/s
# Warmup Iteration  16: 9613777.105 ops/s
# Warmup Iteration  17: 9361888.502 ops/s
# Warmup Iteration  18: 9614678.957 ops/s
# Warmup Iteration  19: 9543433.198 ops/s
# Warmup Iteration  20: 9279821.947 ops/s
# Warmup Iteration  21: 9764032.782 ops/s
# Warmup Iteration  22: 9622774.446 ops/s
# Warmup Iteration  23: 9266389.574 ops/s
# Warmup Iteration  24: 9614807.975 ops/s
# Warmup Iteration  25: 9425875.395 ops/s
# Warmup Iteration  26: 9363878.437 ops/s
# Warmup Iteration  27: 9601430.054 ops/s
# Warmup Iteration  28: 9288604.967 ops/s
# Warmup Iteration  29: 9546630.252 ops/s
# Warmup Iteration  30: 9095653.459 ops/s
Iteration   1: 9244121.073 ops/s
Iteration   2: 9710036.420 ops/s
Iteration   3: 9252923.091 ops/s
Iteration   4: 9413335.980 ops/s
Iteration   5: 9216808.526 ops/s
Iteration   6: 9530479.892 ops/s
Iteration   7: 8087466.761 ops/s
Iteration   8: 8986466.451 ops/s
Iteration   9: 9578665.243 ops/s
Iteration  10: 9137692.680 ops/s
Iteration  11: 9615638.609 ops/s
Iteration  12: 9173699.406 ops/s
Iteration  13: 9327497.333 ops/s
Iteration  14: 9502560.434 ops/s
Iteration  15: 9743932.718 ops/s
Iteration  16: 9113329.681 ops/s
Iteration  17: 9457273.577 ops/s
Iteration  18: 9100527.295 ops/s
Iteration  19: 9723627.187 ops/s
Iteration  20: 9280988.728 ops/s
Iteration  21: 9223864.049 ops/s
Iteration  22: 9436974.789 ops/s
Iteration  23: 9122102.563 ops/s
Iteration  24: 9379351.576 ops/s
Iteration  25: 9601039.543 ops/s
Iteration  26: 9272572.864 ops/s
Iteration  27: 9318463.476 ops/s
Iteration  28: 9738377.378 ops/s
Iteration  29: 9675891.894 ops/s
Iteration  30: 9238103.842 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_dispose":
  9340127.102 ±(99.9%) 214735.170 ops/s [Average]
  (min, avg, max) = (8087466.761, 9340127.102, 9743932.718), stdev = 321405.518
  CI (99.9%): [9125391.932, 9554862.272] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
MaybeConcatMapTest._Benchmark.benchmark_dispose  thrpt   30  9340127.102 ± 214735.170  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToCompletableTest._Benchmark.benchmark_successToComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToCompletableTest._Benchmark.benchmark_successToComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2349622.751 ops/s
# Warmup Iteration   2: 6037977.393 ops/s
# Warmup Iteration   3: 8788630.991 ops/s
# Warmup Iteration   4: 8384138.796 ops/s
# Warmup Iteration   5: 8818410.476 ops/s
# Warmup Iteration   6: 8240319.213 ops/s
# Warmup Iteration   7: 8355392.683 ops/s
# Warmup Iteration   8: 8614546.378 ops/s
# Warmup Iteration   9: 8443880.884 ops/s
# Warmup Iteration  10: 8460075.015 ops/s
# Warmup Iteration  11: 8485085.794 ops/s
# Warmup Iteration  12: 8841365.238 ops/s
# Warmup Iteration  13: 8522405.015 ops/s
# Warmup Iteration  14: 8337834.798 ops/s
# Warmup Iteration  15: 8952040.579 ops/s
# Warmup Iteration  16: 8761484.725 ops/s
# Warmup Iteration  17: 8167491.096 ops/s
# Warmup Iteration  18: 8382800.905 ops/s
# Warmup Iteration  19: 8806927.658 ops/s
# Warmup Iteration  20: 8301992.295 ops/s
# Warmup Iteration  21: 8651495.804 ops/s
# Warmup Iteration  22: 8441120.683 ops/s
# Warmup Iteration  23: 8586247.031 ops/s
# Warmup Iteration  24: 8600428.227 ops/s
# Warmup Iteration  25: 8169182.106 ops/s
# Warmup Iteration  26: 8767406.083 ops/s
# Warmup Iteration  27: 8416361.259 ops/s
# Warmup Iteration  28: 8479279.540 ops/s
# Warmup Iteration  29: 8748082.385 ops/s
# Warmup Iteration  30: 8636291.523 ops/s
Iteration   1: 8366122.739 ops/s
Iteration   2: 8431715.985 ops/s
Iteration   3: 8787951.668 ops/s
Iteration   4: 8351831.482 ops/s
Iteration   5: 8636322.403 ops/s
Iteration   6: 8745216.034 ops/s
Iteration   7: 8270035.342 ops/s
Iteration   8: 8772271.984 ops/s
Iteration   9: 8307230.239 ops/s
Iteration  10: 8811689.229 ops/s
Iteration  11: 8390071.525 ops/s
Iteration  12: 8673900.777 ops/s
Iteration  13: 8461573.886 ops/s
Iteration  14: 8249744.356 ops/s
Iteration  15: 8633508.548 ops/s
Iteration  16: 8511075.209 ops/s
Iteration  17: 8490742.455 ops/s
Iteration  18: 8769236.339 ops/s
Iteration  19: 8585566.776 ops/s
Iteration  20: 8752322.197 ops/s
Iteration  21: 8481210.402 ops/s
Iteration  22: 8701662.777 ops/s
Iteration  23: 8301297.415 ops/s
Iteration  24: 8817825.013 ops/s
Iteration  25: 8315682.808 ops/s
Iteration  26: 8379361.656 ops/s
Iteration  27: 8675695.170 ops/s
Iteration  28: 8298004.313 ops/s
Iteration  29: 8877999.107 ops/s
Iteration  30: 8354349.545 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeToCompletableTest._Benchmark.benchmark_successToComplete":
  8540040.579 ±(99.9%) 133227.463 ops/s [Average]
  (min, avg, max) = (8249744.356, 8540040.579, 8877999.107), stdev = 199408.609
  CI (99.9%): [8406813.116, 8673268.042] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
MaybeToCompletableTest._Benchmark.benchmark_successToComplete  thrpt   30  8540040.579 ± 133227.463  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromMaybeTest._Benchmark.benchmark_fromMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromMaybeTest._Benchmark.benchmark_fromMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3192801.476 ops/s
# Warmup Iteration   2: 5651010.638 ops/s
# Warmup Iteration   3: 8261271.854 ops/s
# Warmup Iteration   4: 8473419.449 ops/s
# Warmup Iteration   5: 8602783.266 ops/s
# Warmup Iteration   6: 8291249.954 ops/s
# Warmup Iteration   7: 8460031.153 ops/s
# Warmup Iteration   8: 8287261.027 ops/s
# Warmup Iteration   9: 8334670.513 ops/s
# Warmup Iteration  10: 8612552.227 ops/s
# Warmup Iteration  11: 8635242.265 ops/s
# Warmup Iteration  12: 8161542.746 ops/s
# Warmup Iteration  13: 8603154.337 ops/s
# Warmup Iteration  14: 8391832.592 ops/s
# Warmup Iteration  15: 8666283.097 ops/s
# Warmup Iteration  16: 8682124.205 ops/s
# Warmup Iteration  17: 8081896.577 ops/s
# Warmup Iteration  18: 8480934.610 ops/s
# Warmup Iteration  19: 8331778.163 ops/s
# Warmup Iteration  20: 8586875.435 ops/s
# Warmup Iteration  21: 8136296.926 ops/s
# Warmup Iteration  22: 8299206.685 ops/s
# Warmup Iteration  23: 8796855.644 ops/s
# Warmup Iteration  24: 8418769.682 ops/s
# Warmup Iteration  25: 8464361.210 ops/s
# Warmup Iteration  26: 8637954.023 ops/s
# Warmup Iteration  27: 8110651.240 ops/s
# Warmup Iteration  28: 8474173.984 ops/s
# Warmup Iteration  29: 8455304.376 ops/s
# Warmup Iteration  30: 8197484.912 ops/s
Iteration   1: 8537852.939 ops/s
Iteration   2: 7049199.084 ops/s
Iteration   3: 8639615.665 ops/s
Iteration   4: 8889035.199 ops/s
Iteration   5: 8314147.932 ops/s
Iteration   6: 8609203.716 ops/s
Iteration   7: 8156174.414 ops/s
Iteration   8: 8545217.102 ops/s
Iteration   9: 8323356.564 ops/s
Iteration  10: 8404363.367 ops/s
Iteration  11: 8381573.795 ops/s
Iteration  12: 8232541.586 ops/s
Iteration  13: 8313455.242 ops/s
Iteration  14: 8777147.417 ops/s
Iteration  15: 8220048.437 ops/s
Iteration  16: 8213103.368 ops/s
Iteration  17: 8851488.183 ops/s
Iteration  18: 8197314.452 ops/s
Iteration  19: 8831974.099 ops/s
Iteration  20: 8214073.065 ops/s
Iteration  21: 8743167.222 ops/s
Iteration  22: 8874344.800 ops/s
Iteration  23: 8265477.663 ops/s
Iteration  24: 8953552.177 ops/s
Iteration  25: 8328168.417 ops/s
Iteration  26: 8807879.310 ops/s
Iteration  27: 8137583.677 ops/s
Iteration  28: 8372364.123 ops/s
Iteration  29: 8371934.189 ops/s
Iteration  30: 8073777.447 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromMaybeTest._Benchmark.benchmark_fromMaybe":
  8420971.155 ±(99.9%) 247875.643 ops/s [Average]
  (min, avg, max) = (7049199.084, 8420971.155, 8953552.177), stdev = 371008.622
  CI (99.9%): [8173095.512, 8668846.798] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
CompletableFromMaybeTest._Benchmark.benchmark_fromMaybe  thrpt   30  8420971.155 ± 247875.643  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_nonEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_nonEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 992409.518 ops/s
# Warmup Iteration   2: 4718045.652 ops/s
# Warmup Iteration   3: 6152008.337 ops/s
# Warmup Iteration   4: 6513579.187 ops/s
# Warmup Iteration   5: 6356616.162 ops/s
# Warmup Iteration   6: 6539547.141 ops/s
# Warmup Iteration   7: 6471469.003 ops/s
# Warmup Iteration   8: 6592844.295 ops/s
# Warmup Iteration   9: 6759095.941 ops/s
# Warmup Iteration  10: 6320617.994 ops/s
# Warmup Iteration  11: 6520564.720 ops/s
# Warmup Iteration  12: 6560186.450 ops/s
# Warmup Iteration  13: 6426695.411 ops/s
# Warmup Iteration  14: 6726043.630 ops/s
# Warmup Iteration  15: 6717673.439 ops/s
# Warmup Iteration  16: 6810671.489 ops/s
# Warmup Iteration  17: 6470461.834 ops/s
# Warmup Iteration  18: 6646641.460 ops/s
# Warmup Iteration  19: 6651984.507 ops/s
# Warmup Iteration  20: 6587549.567 ops/s
# Warmup Iteration  21: 6490065.425 ops/s
# Warmup Iteration  22: 6886702.508 ops/s
# Warmup Iteration  23: 6398566.209 ops/s
# Warmup Iteration  24: 6530345.503 ops/s
# Warmup Iteration  25: 6692242.436 ops/s
# Warmup Iteration  26: 6512347.746 ops/s
# Warmup Iteration  27: 6585464.241 ops/s
# Warmup Iteration  28: 6674623.728 ops/s
# Warmup Iteration  29: 6478596.152 ops/s
# Warmup Iteration  30: 6682826.981 ops/s
Iteration   1: 6312294.473 ops/s
Iteration   2: 6477036.124 ops/s
Iteration   3: 6899236.566 ops/s
Iteration   4: 6500546.500 ops/s
Iteration   5: 6558053.479 ops/s
Iteration   6: 6545380.875 ops/s
Iteration   7: 6612309.274 ops/s
Iteration   8: 6640907.987 ops/s
Iteration   9: 6461775.856 ops/s
Iteration  10: 6716083.215 ops/s
Iteration  11: 6667782.716 ops/s
Iteration  12: 6579667.263 ops/s
Iteration  13: 6441855.845 ops/s
Iteration  14: 6554681.742 ops/s
Iteration  15: 6710945.413 ops/s
Iteration  16: 6517030.733 ops/s
Iteration  17: 6618082.951 ops/s
Iteration  18: 6442168.547 ops/s
Iteration  19: 6665904.101 ops/s
Iteration  20: 6608291.840 ops/s
Iteration  21: 6521875.713 ops/s
Iteration  22: 6591119.904 ops/s
Iteration  23: 6626610.952 ops/s
Iteration  24: 6774455.345 ops/s
Iteration  25: 6739205.258 ops/s
Iteration  26: 6461576.787 ops/s
Iteration  27: 6835393.505 ops/s
Iteration  28: 6665889.101 ops/s
Iteration  29: 6374921.074 ops/s
Iteration  30: 6756809.924 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_nonEmpty":
  6595929.769 ±(99.9%) 90129.896 ops/s [Average]
  (min, avg, max) = (6312294.473, 6595929.769, 6899236.566), stdev = 134902.195
  CI (99.9%): [6505799.873, 6686059.665] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_nonEmpty  thrpt   30  6595929.769 ± 90129.896  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_noArgEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_noArgEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12229497.086 ops/s
# Warmup Iteration   2: 17031017.992 ops/s
# Warmup Iteration   3: 20179781.409 ops/s
# Warmup Iteration   4: 23096849.680 ops/s
# Warmup Iteration   5: 22572758.577 ops/s
# Warmup Iteration   6: 22790243.049 ops/s
# Warmup Iteration   7: 23283733.391 ops/s
# Warmup Iteration   8: 22426861.719 ops/s
# Warmup Iteration   9: 22797588.217 ops/s
# Warmup Iteration  10: 22717494.878 ops/s
# Warmup Iteration  11: 21947875.992 ops/s
# Warmup Iteration  12: 23114418.822 ops/s
# Warmup Iteration  13: 22519531.513 ops/s
# Warmup Iteration  14: 23230203.033 ops/s
# Warmup Iteration  15: 22578112.615 ops/s
# Warmup Iteration  16: 22833603.003 ops/s
# Warmup Iteration  17: 23773849.858 ops/s
# Warmup Iteration  18: 22311773.861 ops/s
# Warmup Iteration  19: 23794735.896 ops/s
# Warmup Iteration  20: 22725707.221 ops/s
# Warmup Iteration  21: 22535957.370 ops/s
# Warmup Iteration  22: 23006191.984 ops/s
# Warmup Iteration  23: 22456750.279 ops/s
# Warmup Iteration  24: 22694453.602 ops/s
# Warmup Iteration  25: 22505374.760 ops/s
# Warmup Iteration  26: 22718581.262 ops/s
# Warmup Iteration  27: 19460910.579 ops/s
# Warmup Iteration  28: 23251752.390 ops/s
# Warmup Iteration  29: 22796692.075 ops/s
# Warmup Iteration  30: 23232502.367 ops/s
Iteration   1: 22796635.690 ops/s
Iteration   2: 22256226.869 ops/s
Iteration   3: 22741175.198 ops/s
Iteration   4: 24029155.427 ops/s
Iteration   5: 22493157.300 ops/s
Iteration   6: 23374006.858 ops/s
Iteration   7: 22388803.534 ops/s
Iteration   8: 23004871.896 ops/s
Iteration   9: 23362852.830 ops/s
Iteration  10: 22365933.571 ops/s
Iteration  11: 23810456.274 ops/s
Iteration  12: 23548861.729 ops/s
Iteration  13: 22502183.546 ops/s
Iteration  14: 23718829.921 ops/s
Iteration  15: 23368620.266 ops/s
Iteration  16: 21370961.053 ops/s
Iteration  17: 23872687.448 ops/s
Iteration  18: 22560537.652 ops/s
Iteration  19: 23232078.395 ops/s
Iteration  20: 22973171.275 ops/s
Iteration  21: 22292695.753 ops/s
Iteration  22: 23525189.798 ops/s
Iteration  23: 22523678.037 ops/s
Iteration  24: 23513303.346 ops/s
Iteration  25: 22045515.312 ops/s
Iteration  26: 22615537.874 ops/s
Iteration  27: 23423751.575 ops/s
Iteration  28: 22482249.347 ops/s
Iteration  29: 22708981.217 ops/s
Iteration  30: 23236070.857 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_noArgEmpty":
  22937939.328 ±(99.9%) 417865.911 ops/s [Average]
  (min, avg, max) = (21370961.053, 22937939.328, 24029155.427), stdev = 625442.071
  CI (99.9%): [22520073.417, 23355805.239] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
MaybeBlockingSubscribeTest._Benchmark.benchmark_noArgEmpty  thrpt   30  22937939.328 ± 417865.911  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFromOptionalTest._Benchmark.benchmark_hasValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFromOptionalTest._Benchmark.benchmark_hasValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2201509.232 ops/s
# Warmup Iteration   2: 5842412.417 ops/s
# Warmup Iteration   3: 8879277.802 ops/s
# Warmup Iteration   4: 8318871.884 ops/s
# Warmup Iteration   5: 8438885.988 ops/s
# Warmup Iteration   6: 8752132.459 ops/s
# Warmup Iteration   7: 8249681.254 ops/s
# Warmup Iteration   8: 8946728.136 ops/s
# Warmup Iteration   9: 8697149.398 ops/s
# Warmup Iteration  10: 8470089.129 ops/s
# Warmup Iteration  11: 8644445.147 ops/s
# Warmup Iteration  12: 8618289.544 ops/s
# Warmup Iteration  13: 8372209.528 ops/s
# Warmup Iteration  14: 8810322.692 ops/s
# Warmup Iteration  15: 8487943.873 ops/s
# Warmup Iteration  16: 8352322.331 ops/s
# Warmup Iteration  17: 8419148.225 ops/s
# Warmup Iteration  18: 8386185.050 ops/s
# Warmup Iteration  19: 8854984.211 ops/s
# Warmup Iteration  20: 8362483.499 ops/s
# Warmup Iteration  21: 8745444.938 ops/s
# Warmup Iteration  22: 8499634.210 ops/s
# Warmup Iteration  23: 8392421.151 ops/s
# Warmup Iteration  24: 8510075.097 ops/s
# Warmup Iteration  25: 8714498.019 ops/s
# Warmup Iteration  26: 8303706.527 ops/s
# Warmup Iteration  27: 8475407.905 ops/s
# Warmup Iteration  28: 8667433.065 ops/s
# Warmup Iteration  29: 8519352.507 ops/s
# Warmup Iteration  30: 8649028.613 ops/s
Iteration   1: 8446688.859 ops/s
Iteration   2: 8694620.436 ops/s
Iteration   3: 8752620.649 ops/s
Iteration   4: 8168227.849 ops/s
Iteration   5: 8846820.679 ops/s
Iteration   6: 8372853.666 ops/s
Iteration   7: 8714926.158 ops/s
Iteration   8: 8553720.839 ops/s
Iteration   9: 8430656.671 ops/s
Iteration  10: 8796409.210 ops/s
Iteration  11: 8487954.305 ops/s
Iteration  12: 8780748.719 ops/s
Iteration  13: 8232974.238 ops/s
Iteration  14: 8396601.996 ops/s
Iteration  15: 8758486.561 ops/s
Iteration  16: 8418913.764 ops/s
Iteration  17: 8741579.932 ops/s
Iteration  18: 8666371.761 ops/s
Iteration  19: 8086945.349 ops/s
Iteration  20: 8829742.435 ops/s
Iteration  21: 8382962.339 ops/s
Iteration  22: 8277839.571 ops/s
Iteration  23: 8693950.282 ops/s
Iteration  24: 8470642.387 ops/s
Iteration  25: 8790664.695 ops/s
Iteration  26: 8166421.444 ops/s
Iteration  27: 8613198.033 ops/s
Iteration  28: 8425000.487 ops/s
Iteration  29: 8710903.105 ops/s
Iteration  30: 8289762.332 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFromOptionalTest._Benchmark.benchmark_hasValue":
  8533306.958 ±(99.9%) 150097.156 ops/s [Average]
  (min, avg, max) = (8086945.349, 8533306.958, 8846820.679), stdev = 224658.375
  CI (99.9%): [8383209.802, 8683404.115] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
MaybeFromOptionalTest._Benchmark.benchmark_hasValue  thrpt   30  8533306.958 ± 150097.156  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1184472.180 ops/s
# Warmup Iteration   2: 4312937.373 ops/s
# Warmup Iteration   3: 4518991.328 ops/s
# Warmup Iteration   4: 5306048.380 ops/s
# Warmup Iteration   5: 5530562.718 ops/s
# Warmup Iteration   6: 5365762.067 ops/s
# Warmup Iteration   7: 5472782.753 ops/s
# Warmup Iteration   8: 5580519.306 ops/s
# Warmup Iteration   9: 5196393.775 ops/s
# Warmup Iteration  10: 5309747.346 ops/s
# Warmup Iteration  11: 5560752.343 ops/s
# Warmup Iteration  12: 5248975.191 ops/s
# Warmup Iteration  13: 5675041.321 ops/s
# Warmup Iteration  14: 5400090.979 ops/s
# Warmup Iteration  15: 5438998.687 ops/s
# Warmup Iteration  16: 5661506.978 ops/s
# Warmup Iteration  17: 5486471.430 ops/s
# Warmup Iteration  18: 5200548.482 ops/s
# Warmup Iteration  19: 5532198.018 ops/s
# Warmup Iteration  20: 5454347.581 ops/s
# Warmup Iteration  21: 5361541.432 ops/s
# Warmup Iteration  22: 4753089.886 ops/s
# Warmup Iteration  23: 5222424.734 ops/s
# Warmup Iteration  24: 5530134.506 ops/s
# Warmup Iteration  25: 5168300.755 ops/s
# Warmup Iteration  26: 5455428.040 ops/s
# Warmup Iteration  27: 5499811.353 ops/s
# Warmup Iteration  28: 5344906.686 ops/s
# Warmup Iteration  29: 5652091.976 ops/s
# Warmup Iteration  30: 5498107.176 ops/s
Iteration   1: 5125694.677 ops/s
Iteration   2: 5368196.829 ops/s
Iteration   3: 5284606.723 ops/s
Iteration   4: 5329435.544 ops/s
Iteration   5: 5358961.730 ops/s
Iteration   6: 5531234.569 ops/s
Iteration   7: 5077051.870 ops/s
Iteration   8: 5477018.025 ops/s
Iteration   9: 5381671.270 ops/s
Iteration  10: 5596140.495 ops/s
Iteration  11: 5294849.678 ops/s
Iteration  12: 5394160.399 ops/s
Iteration  13: 5501358.135 ops/s
Iteration  14: 5273168.800 ops/s
Iteration  15: 5294486.919 ops/s
Iteration  16: 5565585.430 ops/s
Iteration  17: 5296097.233 ops/s
Iteration  18: 5478771.269 ops/s
Iteration  19: 5218722.124 ops/s
Iteration  20: 5227180.949 ops/s
Iteration  21: 5524107.574 ops/s
Iteration  22: 5083162.533 ops/s
Iteration  23: 5394493.673 ops/s
Iteration  24: 5260578.939 ops/s
Iteration  25: 5479848.626 ops/s
Iteration  26: 5127561.437 ops/s
Iteration  27: 5401534.200 ops/s
Iteration  28: 5518387.602 ops/s
Iteration  29: 5271795.769 ops/s
Iteration  30: 5558643.938 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualTest._Benchmark.benchmark_dispose":
  5356483.565 ±(99.9%) 98699.427 ops/s [Average]
  (min, avg, max) = (5077051.870, 5356483.565, 5596140.495), stdev = 147728.666
  CI (99.9%): [5257784.139, 5455182.992] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
MaybeEqualTest._Benchmark.benchmark_dispose  thrpt   30  5356483.565 ± 98699.427  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1824295.004 ops/s
# Warmup Iteration   2: 4823111.707 ops/s
# Warmup Iteration   3: 6500472.012 ops/s
# Warmup Iteration   4: 6629968.493 ops/s
# Warmup Iteration   5: 6813059.708 ops/s
# Warmup Iteration   6: 6512348.746 ops/s
# Warmup Iteration   7: 6905688.655 ops/s
# Warmup Iteration   8: 7058844.052 ops/s
# Warmup Iteration   9: 6682932.357 ops/s
# Warmup Iteration  10: 6838563.694 ops/s
# Warmup Iteration  11: 6593110.776 ops/s
# Warmup Iteration  12: 6698123.751 ops/s
# Warmup Iteration  13: 6876074.391 ops/s
# Warmup Iteration  14: 6564289.045 ops/s
# Warmup Iteration  15: 6816249.878 ops/s
# Warmup Iteration  16: 6908780.825 ops/s
# Warmup Iteration  17: 6936559.946 ops/s
# Warmup Iteration  18: 6535539.678 ops/s
# Warmup Iteration  19: 6986830.626 ops/s
# Warmup Iteration  20: 6637355.636 ops/s
# Warmup Iteration  21: 6981833.414 ops/s
# Warmup Iteration  22: 6685120.110 ops/s
# Warmup Iteration  23: 6895131.737 ops/s
# Warmup Iteration  24: 6654669.356 ops/s
# Warmup Iteration  25: 6764438.951 ops/s
# Warmup Iteration  26: 6900383.618 ops/s
# Warmup Iteration  27: 6930404.063 ops/s
# Warmup Iteration  28: 6808496.084 ops/s
# Warmup Iteration  29: 6950059.514 ops/s
# Warmup Iteration  30: 6655106.529 ops/s
Iteration   1: 6707258.320 ops/s
Iteration   2: 7008875.174 ops/s
Iteration   3: 6826467.598 ops/s
Iteration   4: 6870402.399 ops/s
Iteration   5: 7005558.122 ops/s
Iteration   6: 6598857.728 ops/s
Iteration   7: 6883095.894 ops/s
Iteration   8: 6576828.682 ops/s
Iteration   9: 6836288.580 ops/s
Iteration  10: 6931466.188 ops/s
Iteration  11: 6798064.710 ops/s
Iteration  12: 6714210.941 ops/s
Iteration  13: 7007792.870 ops/s
Iteration  14: 6549508.832 ops/s
Iteration  15: 6857669.280 ops/s
Iteration  16: 6829000.814 ops/s
Iteration  17: 6710552.457 ops/s
Iteration  18: 6818654.112 ops/s
Iteration  19: 6642778.944 ops/s
Iteration  20: 7156395.352 ops/s
Iteration  21: 6543144.645 ops/s
Iteration  22: 6802602.161 ops/s
Iteration  23: 6600706.371 ops/s
Iteration  24: 6580699.762 ops/s
Iteration  25: 6891598.010 ops/s
Iteration  26: 6621341.969 ops/s
Iteration  27: 6971084.685 ops/s
Iteration  28: 6697840.333 ops/s
Iteration  29: 6710153.095 ops/s
Iteration  30: 6988848.388 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenEmpty":
  6791258.214 ±(99.9%) 108775.039 ops/s [Average]
  (min, avg, max) = (6543144.645, 6791258.214, 7156395.352), stdev = 162809.370
  CI (99.9%): [6682483.175, 6900033.253] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchWhenEmpty  thrpt   30  6791258.214 ± 108775.039  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToCompletableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToCompletableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3491790.689 ops/s
# Warmup Iteration   2: 9938022.822 ops/s
# Warmup Iteration   3: 13437093.741 ops/s
# Warmup Iteration   4: 12934360.955 ops/s
# Warmup Iteration   5: 12677836.090 ops/s
# Warmup Iteration   6: 13183172.162 ops/s
# Warmup Iteration   7: 12806547.767 ops/s
# Warmup Iteration   8: 12732955.076 ops/s
# Warmup Iteration   9: 13179871.746 ops/s
# Warmup Iteration  10: 12879808.647 ops/s
# Warmup Iteration  11: 13115234.804 ops/s
# Warmup Iteration  12: 12984108.154 ops/s
# Warmup Iteration  13: 13108347.096 ops/s
# Warmup Iteration  14: 13041783.287 ops/s
# Warmup Iteration  15: 13373045.878 ops/s
# Warmup Iteration  16: 10995614.469 ops/s
# Warmup Iteration  17: 12792160.074 ops/s
# Warmup Iteration  18: 13217107.901 ops/s
# Warmup Iteration  19: 13698514.419 ops/s
# Warmup Iteration  20: 13643375.094 ops/s
# Warmup Iteration  21: 13296475.786 ops/s
# Warmup Iteration  22: 13021248.475 ops/s
# Warmup Iteration  23: 13666576.227 ops/s
# Warmup Iteration  24: 13974804.447 ops/s
# Warmup Iteration  25: 12991538.844 ops/s
# Warmup Iteration  26: 13411458.812 ops/s
# Warmup Iteration  27: 13575461.698 ops/s
# Warmup Iteration  28: 13100564.709 ops/s
# Warmup Iteration  29: 13266954.908 ops/s
# Warmup Iteration  30: 13069461.952 ops/s
Iteration   1: 13247985.644 ops/s
Iteration   2: 13397138.514 ops/s
Iteration   3: 13480668.228 ops/s
Iteration   4: 13249075.510 ops/s
Iteration   5: 13813756.165 ops/s
Iteration   6: 13339370.659 ops/s
Iteration   7: 12975813.153 ops/s
Iteration   8: 13522266.865 ops/s
Iteration   9: 13189507.379 ops/s
Iteration  10: 13335972.590 ops/s
Iteration  11: 12712168.096 ops/s
Iteration  12: 13250574.880 ops/s
Iteration  13: 13699308.168 ops/s
Iteration  14: 13137320.629 ops/s
Iteration  15: 13027264.252 ops/s
Iteration  16: 13195367.204 ops/s
Iteration  17: 12929340.271 ops/s
Iteration  18: 13142509.795 ops/s
Iteration  19: 13684565.153 ops/s
Iteration  20: 13005806.600 ops/s
Iteration  21: 13527938.708 ops/s
Iteration  22: 12929043.702 ops/s
Iteration  23: 13303224.988 ops/s
Iteration  24: 13232590.886 ops/s
Iteration  25: 13029522.784 ops/s
Iteration  26: 13222992.130 ops/s
Iteration  27: 12859466.053 ops/s
Iteration  28: 13234448.484 ops/s
Iteration  29: 12802811.658 ops/s
Iteration  30: 13388577.598 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeToCompletableTest._Benchmark.benchmark_dispose":
  13228879.892 ±(99.9%) 178568.648 ops/s [Average]
  (min, avg, max) = (12712168.096, 13228879.892, 13813756.165), stdev = 267273.167
  CI (99.9%): [13050311.243, 13407448.540] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
MaybeToCompletableTest._Benchmark.benchmark_dispose  thrpt   30  13228879.892 ± 178568.648  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_successEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_successEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3442484.287 ops/s
# Warmup Iteration   2: 6079410.673 ops/s
# Warmup Iteration   3: 8097206.407 ops/s
# Warmup Iteration   4: 7877381.037 ops/s
# Warmup Iteration   5: 8151505.909 ops/s
# Warmup Iteration   6: 8110081.838 ops/s
# Warmup Iteration   7: 8209659.995 ops/s
# Warmup Iteration   8: 7956272.021 ops/s
# Warmup Iteration   9: 8184295.132 ops/s
# Warmup Iteration  10: 8248231.730 ops/s
# Warmup Iteration  11: 7794688.895 ops/s
# Warmup Iteration  12: 8306561.333 ops/s
# Warmup Iteration  13: 7925811.143 ops/s
# Warmup Iteration  14: 8283855.556 ops/s
# Warmup Iteration  15: 8280171.416 ops/s
# Warmup Iteration  16: 7958304.078 ops/s
# Warmup Iteration  17: 8415924.889 ops/s
# Warmup Iteration  18: 7995971.549 ops/s
# Warmup Iteration  19: 7795354.551 ops/s
# Warmup Iteration  20: 8314621.765 ops/s
# Warmup Iteration  21: 8152113.263 ops/s
# Warmup Iteration  22: 7943196.958 ops/s
# Warmup Iteration  23: 8513378.647 ops/s
# Warmup Iteration  24: 7782715.120 ops/s
# Warmup Iteration  25: 8145770.978 ops/s
# Warmup Iteration  26: 7916551.656 ops/s
# Warmup Iteration  27: 8396130.450 ops/s
# Warmup Iteration  28: 8100574.890 ops/s
# Warmup Iteration  29: 8019554.625 ops/s
# Warmup Iteration  30: 8604393.029 ops/s
Iteration   1: 8128780.131 ops/s
Iteration   2: 7889871.013 ops/s
Iteration   3: 8227978.243 ops/s
Iteration   4: 8331413.351 ops/s
Iteration   5: 7867370.904 ops/s
Iteration   6: 8295770.423 ops/s
Iteration   7: 7881012.128 ops/s
Iteration   8: 8432877.349 ops/s
Iteration   9: 8076732.648 ops/s
Iteration  10: 8080435.860 ops/s
Iteration  11: 8332451.753 ops/s
Iteration  12: 8170397.275 ops/s
Iteration  13: 8178330.862 ops/s
Iteration  14: 8095157.776 ops/s
Iteration  15: 8121567.817 ops/s
Iteration  16: 8076714.515 ops/s
Iteration  17: 8257207.638 ops/s
Iteration  18: 8178562.351 ops/s
Iteration  19: 7926981.961 ops/s
Iteration  20: 8156666.475 ops/s
Iteration  21: 8075128.717 ops/s
Iteration  22: 7970626.852 ops/s
Iteration  23: 8281103.838 ops/s
Iteration  24: 8179614.326 ops/s
Iteration  25: 8423542.244 ops/s
Iteration  26: 7780485.685 ops/s
Iteration  27: 8143103.376 ops/s
Iteration  28: 8388456.691 ops/s
Iteration  29: 7769480.806 ops/s
Iteration  30: 8347863.701 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_successEmpty":
  8135522.890 ±(99.9%) 122717.073 ops/s [Average]
  (min, avg, max) = (7769480.806, 8135522.890, 8432877.349), stdev = 183677.151
  CI (99.9%): [8012805.818, 8258239.963] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
MaybeMapOptionalTest._Benchmark.benchmark_successEmpty  thrpt   30  8135522.890 ± 122717.073  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_one$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_one

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2102706.297 ops/s
# Warmup Iteration   2: 5061247.193 ops/s
# Warmup Iteration   3: 7482833.906 ops/s
# Warmup Iteration   4: 7233818.549 ops/s
# Warmup Iteration   5: 6918147.930 ops/s
# Warmup Iteration   6: 7618962.852 ops/s
# Warmup Iteration   7: 7462211.113 ops/s
# Warmup Iteration   8: 7277828.746 ops/s
# Warmup Iteration   9: 6930502.582 ops/s
# Warmup Iteration  10: 7325628.769 ops/s
# Warmup Iteration  11: 6060527.944 ops/s
# Warmup Iteration  12: 7062050.468 ops/s
# Warmup Iteration  13: 7328145.287 ops/s
# Warmup Iteration  14: 7274202.397 ops/s
# Warmup Iteration  15: 7441015.997 ops/s
# Warmup Iteration  16: 7372030.591 ops/s
# Warmup Iteration  17: 7027946.938 ops/s
# Warmup Iteration  18: 7205244.416 ops/s
# Warmup Iteration  19: 7322490.568 ops/s
# Warmup Iteration  20: 7175157.570 ops/s
# Warmup Iteration  21: 7445916.550 ops/s
# Warmup Iteration  22: 7141318.095 ops/s
# Warmup Iteration  23: 7449860.932 ops/s
# Warmup Iteration  24: 7523495.457 ops/s
# Warmup Iteration  25: 7024257.207 ops/s
# Warmup Iteration  26: 7629657.829 ops/s
# Warmup Iteration  27: 7156188.043 ops/s
# Warmup Iteration  28: 7064392.063 ops/s
# Warmup Iteration  29: 7452180.793 ops/s
# Warmup Iteration  30: 7112676.345 ops/s
Iteration   1: 7300088.633 ops/s
Iteration   2: 7464226.233 ops/s
Iteration   3: 7057863.769 ops/s
Iteration   4: 7406160.834 ops/s
Iteration   5: 7222272.271 ops/s
Iteration   6: 7371659.803 ops/s
Iteration   7: 7339742.268 ops/s
Iteration   8: 6989345.742 ops/s
Iteration   9: 7438972.451 ops/s
Iteration  10: 7262284.453 ops/s
Iteration  11: 7125622.603 ops/s
Iteration  12: 7615227.888 ops/s
Iteration  13: 7083499.564 ops/s
Iteration  14: 6987798.282 ops/s
Iteration  15: 7210564.932 ops/s
Iteration  16: 7243025.936 ops/s
Iteration  17: 7073752.807 ops/s
Iteration  18: 7600884.870 ops/s
Iteration  19: 7102612.202 ops/s
Iteration  20: 7429296.592 ops/s
Iteration  21: 7113050.164 ops/s
Iteration  22: 7653600.994 ops/s
Iteration  23: 7335854.394 ops/s
Iteration  24: 7182642.755 ops/s
Iteration  25: 7683415.684 ops/s
Iteration  26: 7073308.037 ops/s
Iteration  27: 7504393.831 ops/s
Iteration  28: 7377917.331 ops/s
Iteration  29: 7138094.104 ops/s
Iteration  30: 7314860.672 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_one":
  7290068.003 ±(99.9%) 133299.220 ops/s [Average]
  (min, avg, max) = (6987798.282, 7290068.003, 7683415.684), stdev = 199516.012
  CI (99.9%): [7156768.784, 7423367.223] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score        Error  Units
MaybeCountTest._Benchmark.benchmark_one  thrpt   30  7290068.003 ± 133299.220  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValueDifferentType$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValueDifferentType

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1400808.245 ops/s
# Warmup Iteration   2: 3897485.934 ops/s
# Warmup Iteration   3: 5361514.161 ops/s
# Warmup Iteration   4: 5884263.995 ops/s
# Warmup Iteration   5: 5441745.021 ops/s
# Warmup Iteration   6: 5697848.311 ops/s
# Warmup Iteration   7: 5508939.054 ops/s
# Warmup Iteration   8: 5723687.016 ops/s
# Warmup Iteration   9: 5630900.274 ops/s
# Warmup Iteration  10: 5532381.839 ops/s
# Warmup Iteration  11: 5759751.228 ops/s
# Warmup Iteration  12: 5503772.881 ops/s
# Warmup Iteration  13: 5626198.984 ops/s
# Warmup Iteration  14: 5793567.666 ops/s
# Warmup Iteration  15: 5467242.604 ops/s
# Warmup Iteration  16: 5695831.472 ops/s
# Warmup Iteration  17: 5682507.658 ops/s
# Warmup Iteration  18: 5624155.764 ops/s
# Warmup Iteration  19: 5560233.047 ops/s
# Warmup Iteration  20: 5694196.727 ops/s
# Warmup Iteration  21: 5782126.610 ops/s
# Warmup Iteration  22: 5535461.314 ops/s
# Warmup Iteration  23: 5782368.027 ops/s
# Warmup Iteration  24: 5809541.913 ops/s
# Warmup Iteration  25: 5862340.330 ops/s
# Warmup Iteration  26: 5409035.996 ops/s
# Warmup Iteration  27: 5769316.174 ops/s
# Warmup Iteration  28: 5457634.556 ops/s
# Warmup Iteration  29: 5798748.057 ops/s
# Warmup Iteration  30: 5678097.216 ops/s
Iteration   1: 5579547.543 ops/s
Iteration   2: 5711293.128 ops/s
Iteration   3: 5752969.971 ops/s
Iteration   4: 5728233.946 ops/s
Iteration   5: 5667578.649 ops/s
Iteration   6: 5807657.262 ops/s
Iteration   7: 5658696.635 ops/s
Iteration   8: 5650486.164 ops/s
Iteration   9: 5697309.429 ops/s
Iteration  10: 5524986.687 ops/s
Iteration  11: 5627739.843 ops/s
Iteration  12: 5744211.256 ops/s
Iteration  13: 5633874.415 ops/s
Iteration  14: 5838715.953 ops/s
Iteration  15: 5585666.042 ops/s
Iteration  16: 5661741.337 ops/s
Iteration  17: 5653740.937 ops/s
Iteration  18: 5750633.147 ops/s
Iteration  19: 5570400.211 ops/s
Iteration  20: 5804611.453 ops/s
Iteration  21: 5770444.680 ops/s
Iteration  22: 5763847.541 ops/s
Iteration  23: 5565293.314 ops/s
Iteration  24: 5894833.507 ops/s
Iteration  25: 5575228.630 ops/s
Iteration  26: 5822901.264 ops/s
Iteration  27: 5911961.360 ops/s
Iteration  28: 5567796.352 ops/s
Iteration  29: 5698685.751 ops/s
Iteration  30: 5698376.348 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValueDifferentType":
  5697315.425 ±(99.9%) 68118.179 ops/s [Average]
  (min, avg, max) = (5524986.687, 5697315.425, 5911961.360), stdev = 101956.091
  CI (99.9%): [5629197.246, 5765433.604] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValueDifferentType  thrpt   30  5697315.425 ± 68118.179  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1253147.426 ops/s
# Warmup Iteration   2: 4300199.438 ops/s
# Warmup Iteration   3: 5175253.318 ops/s
# Warmup Iteration   4: 5639092.528 ops/s
# Warmup Iteration   5: 5843192.539 ops/s
# Warmup Iteration   6: 4601356.218 ops/s
# Warmup Iteration   7: 5714621.294 ops/s
# Warmup Iteration   8: 5570628.166 ops/s
# Warmup Iteration   9: 5946071.578 ops/s
# Warmup Iteration  10: 5851282.207 ops/s
# Warmup Iteration  11: 5781083.940 ops/s
# Warmup Iteration  12: 5857200.647 ops/s
# Warmup Iteration  13: 5559821.116 ops/s
# Warmup Iteration  14: 5838467.771 ops/s
# Warmup Iteration  15: 5875205.127 ops/s
# Warmup Iteration  16: 5652315.914 ops/s
# Warmup Iteration  17: 5568840.132 ops/s
# Warmup Iteration  18: 5760512.189 ops/s
# Warmup Iteration  19: 5748418.520 ops/s
# Warmup Iteration  20: 5691172.487 ops/s
# Warmup Iteration  21: 5977170.055 ops/s
# Warmup Iteration  22: 5578028.367 ops/s
# Warmup Iteration  23: 6036090.323 ops/s
# Warmup Iteration  24: 5810362.877 ops/s
# Warmup Iteration  25: 5655689.154 ops/s
# Warmup Iteration  26: 5614607.460 ops/s
# Warmup Iteration  27: 6026426.529 ops/s
# Warmup Iteration  28: 5681785.294 ops/s
# Warmup Iteration  29: 5760290.429 ops/s
# Warmup Iteration  30: 5863982.891 ops/s
Iteration   1: 5690958.372 ops/s
Iteration   2: 5921510.510 ops/s
Iteration   3: 5694021.633 ops/s
Iteration   4: 5654285.133 ops/s
Iteration   5: 5881164.635 ops/s
Iteration   6: 5522163.331 ops/s
Iteration   7: 5754354.527 ops/s
Iteration   8: 5948931.136 ops/s
Iteration   9: 5737229.072 ops/s
Iteration  10: 5703013.527 ops/s
Iteration  11: 5891640.395 ops/s
Iteration  12: 5706426.106 ops/s
Iteration  13: 5990994.491 ops/s
Iteration  14: 5494402.367 ops/s
Iteration  15: 5717194.409 ops/s
Iteration  16: 5952246.357 ops/s
Iteration  17: 5617363.867 ops/s
Iteration  18: 5915515.645 ops/s
Iteration  19: 5699675.290 ops/s
Iteration  20: 5723386.984 ops/s
Iteration  21: 5840480.592 ops/s
Iteration  22: 5760696.517 ops/s
Iteration  23: 5931938.277 ops/s
Iteration  24: 5710497.935 ops/s
Iteration  25: 5865061.679 ops/s
Iteration  26: 5759513.074 ops/s
Iteration  27: 5753579.374 ops/s
Iteration  28: 5923567.269 ops/s
Iteration  29: 5470869.590 ops/s
Iteration  30: 5883809.375 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValue":
  5770549.716 ±(99.9%) 92960.757 ops/s [Average]
  (min, avg, max) = (5470869.590, 5770549.716, 5990994.491), stdev = 139139.295
  CI (99.9%): [5677588.959, 5863510.473] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValue  thrpt   30  5770549.716 ± 92960.757  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValueDifferentType$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValueDifferentType

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1568849.740 ops/s
# Warmup Iteration   2: 4089907.991 ops/s
# Warmup Iteration   3: 5669954.930 ops/s
# Warmup Iteration   4: 5617248.193 ops/s
# Warmup Iteration   5: 5979166.531 ops/s
# Warmup Iteration   6: 5832600.158 ops/s
# Warmup Iteration   7: 5541581.188 ops/s
# Warmup Iteration   8: 5622774.624 ops/s
# Warmup Iteration   9: 5682050.012 ops/s
# Warmup Iteration  10: 5861811.423 ops/s
# Warmup Iteration  11: 5400383.134 ops/s
# Warmup Iteration  12: 5647681.434 ops/s
# Warmup Iteration  13: 5917400.666 ops/s
# Warmup Iteration  14: 5859427.669 ops/s
# Warmup Iteration  15: 5707484.625 ops/s
# Warmup Iteration  16: 5787007.514 ops/s
# Warmup Iteration  17: 5730365.929 ops/s
# Warmup Iteration  18: 5653061.824 ops/s
# Warmup Iteration  19: 5836794.472 ops/s
# Warmup Iteration  20: 5543458.882 ops/s
# Warmup Iteration  21: 5920199.805 ops/s
# Warmup Iteration  22: 5756350.357 ops/s
# Warmup Iteration  23: 5590801.783 ops/s
# Warmup Iteration  24: 5845733.486 ops/s
# Warmup Iteration  25: 5706953.095 ops/s
# Warmup Iteration  26: 5781749.178 ops/s
# Warmup Iteration  27: 5701010.283 ops/s
# Warmup Iteration  28: 5783948.138 ops/s
# Warmup Iteration  29: 5789100.154 ops/s
# Warmup Iteration  30: 5505571.806 ops/s
Iteration   1: 5994941.215 ops/s
Iteration   2: 6027173.613 ops/s
Iteration   3: 5635750.706 ops/s
Iteration   4: 5811226.105 ops/s
Iteration   5: 6039542.860 ops/s
Iteration   6: 5647680.811 ops/s
Iteration   7: 5770414.661 ops/s
Iteration   8: 6037173.960 ops/s
Iteration   9: 5475194.831 ops/s
Iteration  10: 5924374.464 ops/s
Iteration  11: 5866736.785 ops/s
Iteration  12: 5673485.339 ops/s
Iteration  13: 5977864.926 ops/s
Iteration  14: 5658393.319 ops/s
Iteration  15: 5713794.052 ops/s
Iteration  16: 5834673.070 ops/s
Iteration  17: 5572869.746 ops/s
Iteration  18: 5848359.963 ops/s
Iteration  19: 5818777.310 ops/s
Iteration  20: 5782690.962 ops/s
Iteration  21: 5885365.593 ops/s
Iteration  22: 5599327.651 ops/s
Iteration  23: 5970061.522 ops/s
Iteration  24: 5587126.278 ops/s
Iteration  25: 5735852.445 ops/s
Iteration  26: 5729686.790 ops/s
Iteration  27: 5950221.319 ops/s
Iteration  28: 5667838.870 ops/s
Iteration  29: 5661897.625 ops/s
Iteration  30: 6037964.046 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValueDifferentType":
  5797882.028 ±(99.9%) 107958.330 ops/s [Average]
  (min, avg, max) = (5475194.831, 5797882.028, 6039542.860), stdev = 161586.958
  CI (99.9%): [5689923.698, 5905840.358] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score        Error  Units
SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValueDifferentType  thrpt   30  5797882.028 ± 107958.330  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1064106.908 ops/s
# Warmup Iteration   2: 4432656.932 ops/s
# Warmup Iteration   3: 4897824.887 ops/s
# Warmup Iteration   4: 5648065.586 ops/s
# Warmup Iteration   5: 5755991.439 ops/s
# Warmup Iteration   6: 5968286.018 ops/s
# Warmup Iteration   7: 5506983.882 ops/s
# Warmup Iteration   8: 5820786.656 ops/s
# Warmup Iteration   9: 5860812.668 ops/s
# Warmup Iteration  10: 5509758.253 ops/s
# Warmup Iteration  11: 5825972.358 ops/s
# Warmup Iteration  12: 5868236.138 ops/s
# Warmup Iteration  13: 5622391.891 ops/s
# Warmup Iteration  14: 5669669.103 ops/s
# Warmup Iteration  15: 5409766.655 ops/s
# Warmup Iteration  16: 5812006.964 ops/s
# Warmup Iteration  17: 5667718.675 ops/s
# Warmup Iteration  18: 5820757.141 ops/s
# Warmup Iteration  19: 6004379.544 ops/s
# Warmup Iteration  20: 5677660.312 ops/s
# Warmup Iteration  21: 5772889.111 ops/s
# Warmup Iteration  22: 5505671.997 ops/s
# Warmup Iteration  23: 5823361.231 ops/s
# Warmup Iteration  24: 5787632.457 ops/s
# Warmup Iteration  25: 5777841.680 ops/s
# Warmup Iteration  26: 5802609.322 ops/s
# Warmup Iteration  27: 5589238.038 ops/s
# Warmup Iteration  28: 5743386.716 ops/s
# Warmup Iteration  29: 6115377.273 ops/s
# Warmup Iteration  30: 5863694.349 ops/s
Iteration   1: 5579403.516 ops/s
Iteration   2: 5948964.488 ops/s
Iteration   3: 5748262.862 ops/s
Iteration   4: 5617855.378 ops/s
Iteration   5: 5740000.249 ops/s
Iteration   6: 5756855.072 ops/s
Iteration   7: 5848335.635 ops/s
Iteration   8: 5669026.568 ops/s
Iteration   9: 5674937.408 ops/s
Iteration  10: 5763098.933 ops/s
Iteration  11: 5813634.580 ops/s
Iteration  12: 5871393.178 ops/s
Iteration  13: 5644030.253 ops/s
Iteration  14: 5798649.222 ops/s
Iteration  15: 5711420.232 ops/s
Iteration  16: 5630673.813 ops/s
Iteration  17: 5943280.176 ops/s
Iteration  18: 5589225.583 ops/s
Iteration  19: 5925373.867 ops/s
Iteration  20: 5767129.661 ops/s
Iteration  21: 5637351.313 ops/s
Iteration  22: 5992252.226 ops/s
Iteration  23: 5663314.280 ops/s
Iteration  24: 5898445.660 ops/s
Iteration  25: 5551876.854 ops/s
Iteration  26: 5881274.886 ops/s
Iteration  27: 5559263.975 ops/s
Iteration  28: 5620037.757 ops/s
Iteration  29: 5774846.918 ops/s
Iteration  30: 5516310.079 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValue":
  5737884.154 ±(99.9%) 88791.885 ops/s [Average]
  (min, avg, max) = (5516310.079, 5737884.154, 5992252.226), stdev = 132899.524
  CI (99.9%): [5649092.269, 5826676.039] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeValue  thrpt   30  5737884.154 ± 88791.885  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1616827.610 ops/s
# Warmup Iteration   2: 4056653.072 ops/s
# Warmup Iteration   3: 5690034.048 ops/s
# Warmup Iteration   4: 5551710.006 ops/s
# Warmup Iteration   5: 5955519.748 ops/s
# Warmup Iteration   6: 5490682.433 ops/s
# Warmup Iteration   7: 5658225.027 ops/s
# Warmup Iteration   8: 5572019.156 ops/s
# Warmup Iteration   9: 5670180.766 ops/s
# Warmup Iteration  10: 5661920.490 ops/s
# Warmup Iteration  11: 5554072.586 ops/s
# Warmup Iteration  12: 5663585.519 ops/s
# Warmup Iteration  13: 5908457.464 ops/s
# Warmup Iteration  14: 5608153.022 ops/s
# Warmup Iteration  15: 5734328.648 ops/s
# Warmup Iteration  16: 5711298.657 ops/s
# Warmup Iteration  17: 5665173.527 ops/s
# Warmup Iteration  18: 5800123.279 ops/s
# Warmup Iteration  19: 5948272.271 ops/s
# Warmup Iteration  20: 5616478.436 ops/s
# Warmup Iteration  21: 5745968.601 ops/s
# Warmup Iteration  22: 6033914.859 ops/s
# Warmup Iteration  23: 5680442.805 ops/s
# Warmup Iteration  24: 5721011.051 ops/s
# Warmup Iteration  25: 5762772.353 ops/s
# Warmup Iteration  26: 5838864.836 ops/s
# Warmup Iteration  27: 5827612.868 ops/s
# Warmup Iteration  28: 5825959.782 ops/s
# Warmup Iteration  29: 5585907.276 ops/s
# Warmup Iteration  30: 6030143.001 ops/s
Iteration   1: 5618937.128 ops/s
Iteration   2: 5647582.808 ops/s
Iteration   3: 5867868.688 ops/s
Iteration   4: 5702345.578 ops/s
Iteration   5: 5756340.535 ops/s
Iteration   6: 5697973.091 ops/s
Iteration   7: 5939225.792 ops/s
Iteration   8: 5946208.305 ops/s
Iteration   9: 5580287.673 ops/s
Iteration  10: 5771040.957 ops/s
Iteration  11: 5857528.290 ops/s
Iteration  12: 5652241.840 ops/s
Iteration  13: 5678470.441 ops/s
Iteration  14: 5683749.932 ops/s
Iteration  15: 5658062.363 ops/s
Iteration  16: 5956986.110 ops/s
Iteration  17: 5747136.834 ops/s
Iteration  18: 5620007.222 ops/s
Iteration  19: 5765941.238 ops/s
Iteration  20: 5837460.965 ops/s
Iteration  21: 5872344.986 ops/s
Iteration  22: 5699498.819 ops/s
Iteration  23: 5804004.931 ops/s
Iteration  24: 5696254.604 ops/s
Iteration  25: 5738574.421 ops/s
Iteration  26: 5935578.588 ops/s
Iteration  27: 5086725.341 ops/s
Iteration  28: 5415123.433 ops/s
Iteration  29: 5631382.332 ops/s
Iteration  30: 5663465.407 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValue":
  5717611.622 ±(99.9%) 114846.985 ops/s [Average]
  (min, avg, max) = (5086725.341, 5717611.622, 5956986.110), stdev = 171897.573
  CI (99.9%): [5602764.637, 5832458.606] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValue  thrpt   30  5717611.622 ± 114846.985  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1496950.391 ops/s
# Warmup Iteration   2: 4231950.029 ops/s
# Warmup Iteration   3: 5153280.165 ops/s
# Warmup Iteration   4: 5787131.973 ops/s
# Warmup Iteration   5: 5800645.961 ops/s
# Warmup Iteration   6: 5506865.781 ops/s
# Warmup Iteration   7: 5864257.716 ops/s
# Warmup Iteration   8: 5439524.914 ops/s
# Warmup Iteration   9: 5856812.774 ops/s
# Warmup Iteration  10: 5525427.428 ops/s
# Warmup Iteration  11: 5770611.016 ops/s
# Warmup Iteration  12: 5771895.426 ops/s
# Warmup Iteration  13: 5707524.465 ops/s
# Warmup Iteration  14: 5900263.869 ops/s
# Warmup Iteration  15: 5644129.732 ops/s
# Warmup Iteration  16: 5792735.648 ops/s
# Warmup Iteration  17: 5911273.912 ops/s
# Warmup Iteration  18: 5631727.646 ops/s
# Warmup Iteration  19: 5915727.205 ops/s
# Warmup Iteration  20: 5954702.777 ops/s
# Warmup Iteration  21: 5712070.670 ops/s
# Warmup Iteration  22: 5947516.428 ops/s
# Warmup Iteration  23: 5741971.005 ops/s
# Warmup Iteration  24: 5675868.443 ops/s
# Warmup Iteration  25: 5980353.105 ops/s
# Warmup Iteration  26: 5442893.070 ops/s
# Warmup Iteration  27: 5876707.371 ops/s
# Warmup Iteration  28: 5609920.085 ops/s
# Warmup Iteration  29: 5736521.068 ops/s
# Warmup Iteration  30: 5784723.532 ops/s
Iteration   1: 5523551.058 ops/s
Iteration   2: 5931973.121 ops/s
Iteration   3: 5537864.998 ops/s
Iteration   4: 5734677.562 ops/s
Iteration   5: 5957472.253 ops/s
Iteration   6: 5722099.584 ops/s
Iteration   7: 5808442.426 ops/s
Iteration   8: 5717436.414 ops/s
Iteration   9: 5839540.131 ops/s
Iteration  10: 5863616.678 ops/s
Iteration  11: 5667904.406 ops/s
Iteration  12: 5933594.373 ops/s
Iteration  13: 5571804.407 ops/s
Iteration  14: 5618193.778 ops/s
Iteration  15: 5742335.915 ops/s
Iteration  16: 5756765.799 ops/s
Iteration  17: 5593725.277 ops/s
Iteration  18: 5983324.611 ops/s
Iteration  19: 5658264.560 ops/s
Iteration  20: 5786927.382 ops/s
Iteration  21: 5824746.322 ops/s
Iteration  22: 5673909.347 ops/s
Iteration  23: 5939731.441 ops/s
Iteration  24: 5631296.322 ops/s
Iteration  25: 5826274.893 ops/s
Iteration  26: 5676602.794 ops/s
Iteration  27: 5756057.664 ops/s
Iteration  28: 5864119.486 ops/s
Iteration  29: 5586002.218 ops/s
Iteration  30: 5681266.267 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValue":
  5746984.050 ±(99.9%) 87221.675 ops/s [Average]
  (min, avg, max) = (5523551.058, 5746984.050, 5983324.611), stdev = 130549.307
  CI (99.9%): [5659762.374, 5834205.725] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValue  thrpt   30  5746984.050 ± 87221.675  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValueDifferentType$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValueDifferentType

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1593738.934 ops/s
# Warmup Iteration   2: 4060590.010 ops/s
# Warmup Iteration   3: 5624719.895 ops/s
# Warmup Iteration   4: 5727924.169 ops/s
# Warmup Iteration   5: 5755114.507 ops/s
# Warmup Iteration   6: 5471593.559 ops/s
# Warmup Iteration   7: 5786660.080 ops/s
# Warmup Iteration   8: 5759757.656 ops/s
# Warmup Iteration   9: 5622191.771 ops/s
# Warmup Iteration  10: 5916221.805 ops/s
# Warmup Iteration  11: 5344344.774 ops/s
# Warmup Iteration  12: 5939751.421 ops/s
# Warmup Iteration  13: 5407640.866 ops/s
# Warmup Iteration  14: 5946299.048 ops/s
# Warmup Iteration  15: 5838959.951 ops/s
# Warmup Iteration  16: 5790348.549 ops/s
# Warmup Iteration  17: 5693104.974 ops/s
# Warmup Iteration  18: 5667416.962 ops/s
# Warmup Iteration  19: 5715873.440 ops/s
# Warmup Iteration  20: 5900613.650 ops/s
# Warmup Iteration  21: 5567741.132 ops/s
# Warmup Iteration  22: 5828191.350 ops/s
# Warmup Iteration  23: 5646445.176 ops/s
# Warmup Iteration  24: 5640421.508 ops/s
# Warmup Iteration  25: 5778014.998 ops/s
# Warmup Iteration  26: 5616300.256 ops/s
# Warmup Iteration  27: 5772668.298 ops/s
# Warmup Iteration  28: 5793807.432 ops/s
# Warmup Iteration  29: 5733390.253 ops/s
# Warmup Iteration  30: 5837534.294 ops/s
Iteration   1: 5945722.124 ops/s
Iteration   2: 5764114.240 ops/s
Iteration   3: 5641333.260 ops/s
Iteration   4: 5835324.669 ops/s
Iteration   5: 5549292.027 ops/s
Iteration   6: 5815199.441 ops/s
Iteration   7: 5664286.477 ops/s
Iteration   8: 5720841.309 ops/s
Iteration   9: 6016715.959 ops/s
Iteration  10: 5591428.274 ops/s
Iteration  11: 5930314.953 ops/s
Iteration  12: 5543841.676 ops/s
Iteration  13: 5584618.588 ops/s
Iteration  14: 5943744.617 ops/s
Iteration  15: 5768900.061 ops/s
Iteration  16: 5738126.985 ops/s
Iteration  17: 5655017.761 ops/s
Iteration  18: 5791396.794 ops/s
Iteration  19: 5554932.273 ops/s
Iteration  20: 5818696.747 ops/s
Iteration  21: 5591113.549 ops/s
Iteration  22: 4810951.635 ops/s
Iteration  23: 5617132.805 ops/s
Iteration  24: 5767827.285 ops/s
Iteration  25: 5870849.851 ops/s
Iteration  26: 5730259.931 ops/s
Iteration  27: 5641919.416 ops/s
Iteration  28: 5833083.896 ops/s
Iteration  29: 5600177.411 ops/s
Iteration  30: 5847997.104 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValueDifferentType":
  5706172.037 ±(99.9%) 143269.896 ops/s [Average]
  (min, avg, max) = (4810951.635, 5706172.037, 6016715.959), stdev = 214439.652
  CI (99.9%): [5562902.141, 5849441.934] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score        Error  Units
MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValueDifferentType  thrpt   30  5706172.037 ± 143269.896  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValueDifferentType$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValueDifferentType

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1731684.905 ops/s
# Warmup Iteration   2: 4185339.536 ops/s
# Warmup Iteration   3: 5574323.983 ops/s
# Warmup Iteration   4: 5661959.747 ops/s
# Warmup Iteration   5: 6028220.842 ops/s
# Warmup Iteration   6: 5674621.539 ops/s
# Warmup Iteration   7: 5715338.466 ops/s
# Warmup Iteration   8: 5598914.238 ops/s
# Warmup Iteration   9: 5761894.285 ops/s
# Warmup Iteration  10: 5828222.443 ops/s
# Warmup Iteration  11: 5563960.387 ops/s
# Warmup Iteration  12: 5627985.162 ops/s
# Warmup Iteration  13: 5841846.279 ops/s
# Warmup Iteration  14: 5641017.833 ops/s
# Warmup Iteration  15: 5905159.561 ops/s
# Warmup Iteration  16: 5496264.986 ops/s
# Warmup Iteration  17: 5770612.012 ops/s
# Warmup Iteration  18: 6082004.216 ops/s
# Warmup Iteration  19: 5712757.476 ops/s
# Warmup Iteration  20: 5834074.522 ops/s
# Warmup Iteration  21: 5692952.637 ops/s
# Warmup Iteration  22: 5930031.149 ops/s
# Warmup Iteration  23: 5790578.851 ops/s
# Warmup Iteration  24: 5846031.920 ops/s
# Warmup Iteration  25: 5789888.070 ops/s
# Warmup Iteration  26: 5589031.201 ops/s
# Warmup Iteration  27: 5998168.876 ops/s
# Warmup Iteration  28: 5618725.423 ops/s
# Warmup Iteration  29: 5673099.448 ops/s
# Warmup Iteration  30: 5773183.869 ops/s
Iteration   1: 6079087.369 ops/s
Iteration   2: 5798263.953 ops/s
Iteration   3: 5712493.306 ops/s
Iteration   4: 5883779.783 ops/s
Iteration   5: 5590408.347 ops/s
Iteration   6: 5796260.061 ops/s
Iteration   7: 5679552.066 ops/s
Iteration   8: 5651528.971 ops/s
Iteration   9: 5988633.218 ops/s
Iteration  10: 5802189.919 ops/s
Iteration  11: 5809800.782 ops/s
Iteration  12: 5744988.942 ops/s
Iteration  13: 5557903.490 ops/s
Iteration  14: 5829233.012 ops/s
Iteration  15: 5796851.944 ops/s
Iteration  16: 5593447.719 ops/s
Iteration  17: 5629496.917 ops/s
Iteration  18: 6104800.766 ops/s
Iteration  19: 5538415.402 ops/s
Iteration  20: 6078299.519 ops/s
Iteration  21: 5647071.006 ops/s
Iteration  22: 6082906.649 ops/s
Iteration  23: 5702765.374 ops/s
Iteration  24: 5757219.015 ops/s
Iteration  25: 5851399.772 ops/s
Iteration  26: 5748326.038 ops/s
Iteration  27: 5801013.185 ops/s
Iteration  28: 5702475.489 ops/s
Iteration  29: 5593861.983 ops/s
Iteration  30: 5905316.464 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValueDifferentType":
  5781926.349 ±(99.9%) 107807.160 ops/s [Average]
  (min, avg, max) = (5538415.402, 5781926.349, 6104800.766), stdev = 161360.695
  CI (99.9%): [5674119.188, 5889733.509] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score        Error  Units
SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeValueDifferentType  thrpt   30  5781926.349 ± 107807.160  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_normalToMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_normalToMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1738698.088 ops/s
# Warmup Iteration   2: 4682185.180 ops/s
# Warmup Iteration   3: 7295234.280 ops/s
# Warmup Iteration   4: 6795563.772 ops/s
# Warmup Iteration   5: 7263018.148 ops/s
# Warmup Iteration   6: 7086593.850 ops/s
# Warmup Iteration   7: 6930260.258 ops/s
# Warmup Iteration   8: 7094107.769 ops/s
# Warmup Iteration   9: 7018937.645 ops/s
# Warmup Iteration  10: 6958708.059 ops/s
# Warmup Iteration  11: 6992504.332 ops/s
# Warmup Iteration  12: 6940511.059 ops/s
# Warmup Iteration  13: 7106661.410 ops/s
# Warmup Iteration  14: 6952012.193 ops/s
# Warmup Iteration  15: 7103553.677 ops/s
# Warmup Iteration  16: 7143947.983 ops/s
# Warmup Iteration  17: 6915879.216 ops/s
# Warmup Iteration  18: 6933732.382 ops/s
# Warmup Iteration  19: 7271845.121 ops/s
# Warmup Iteration  20: 6992432.804 ops/s
# Warmup Iteration  21: 7245043.305 ops/s
# Warmup Iteration  22: 7186506.240 ops/s
# Warmup Iteration  23: 6881974.182 ops/s
# Warmup Iteration  24: 6969293.136 ops/s
# Warmup Iteration  25: 7296509.491 ops/s
# Warmup Iteration  26: 7117058.060 ops/s
# Warmup Iteration  27: 7124089.849 ops/s
# Warmup Iteration  28: 7152166.978 ops/s
# Warmup Iteration  29: 7162109.046 ops/s
# Warmup Iteration  30: 7042778.108 ops/s
Iteration   1: 6887451.103 ops/s
Iteration   2: 7105687.523 ops/s
Iteration   3: 7170726.442 ops/s
Iteration   4: 6991827.830 ops/s
Iteration   5: 7116686.909 ops/s
Iteration   6: 7020658.637 ops/s
Iteration   7: 7043031.238 ops/s
Iteration   8: 7256263.762 ops/s
Iteration   9: 7112069.984 ops/s
Iteration  10: 7191794.545 ops/s
Iteration  11: 6888447.535 ops/s
Iteration  12: 7162068.099 ops/s
Iteration  13: 6911718.007 ops/s
Iteration  14: 6983044.649 ops/s
Iteration  15: 7158864.346 ops/s
Iteration  16: 7045474.368 ops/s
Iteration  17: 5590950.091 ops/s
Iteration  18: 7156940.112 ops/s
Iteration  19: 7002968.921 ops/s
Iteration  20: 7294079.490 ops/s
Iteration  21: 7105485.344 ops/s
Iteration  22: 6922244.926 ops/s
Iteration  23: 7098951.003 ops/s
Iteration  24: 6976663.022 ops/s
Iteration  25: 7056820.958 ops/s
Iteration  26: 7054377.230 ops/s
Iteration  27: 7264344.745 ops/s
Iteration  28: 7402732.264 ops/s
Iteration  29: 6760139.175 ops/s
Iteration  30: 7307996.694 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_normalToMaybe":
  7034683.632 ±(99.9%) 205240.197 ops/s [Average]
  (min, avg, max) = (5590950.091, 7034683.632, 7402732.264), stdev = 307193.889
  CI (99.9%): [6829443.434, 7239923.829] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
MaybeIsEmptyTest._Benchmark.benchmark_normalToMaybe  thrpt   30  7034683.632 ± 205240.197  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1640121.160 ops/s
# Warmup Iteration   2: 4726109.497 ops/s
# Warmup Iteration   3: 7062828.403 ops/s
# Warmup Iteration   4: 6738747.062 ops/s
# Warmup Iteration   5: 7063551.597 ops/s
# Warmup Iteration   6: 6748919.217 ops/s
# Warmup Iteration   7: 7076191.097 ops/s
# Warmup Iteration   8: 6833457.857 ops/s
# Warmup Iteration   9: 6997083.871 ops/s
# Warmup Iteration  10: 7168534.924 ops/s
# Warmup Iteration  11: 6688187.357 ops/s
# Warmup Iteration  12: 6972589.846 ops/s
# Warmup Iteration  13: 6849615.586 ops/s
# Warmup Iteration  14: 6882968.718 ops/s
# Warmup Iteration  15: 7072087.720 ops/s
# Warmup Iteration  16: 6757929.428 ops/s
# Warmup Iteration  17: 7085226.146 ops/s
# Warmup Iteration  18: 7345775.506 ops/s
# Warmup Iteration  19: 6917856.592 ops/s
# Warmup Iteration  20: 7230307.067 ops/s
# Warmup Iteration  21: 7092196.702 ops/s
# Warmup Iteration  22: 6800667.177 ops/s
# Warmup Iteration  23: 7107981.238 ops/s
# Warmup Iteration  24: 6853466.281 ops/s
# Warmup Iteration  25: 6845415.653 ops/s
# Warmup Iteration  26: 7256073.346 ops/s
# Warmup Iteration  27: 7041429.189 ops/s
# Warmup Iteration  28: 6870290.450 ops/s
# Warmup Iteration  29: 6857901.865 ops/s
# Warmup Iteration  30: 7092637.597 ops/s
Iteration   1: 6924735.543 ops/s
Iteration   2: 6730580.953 ops/s
Iteration   3: 7319187.268 ops/s
Iteration   4: 6652195.586 ops/s
Iteration   5: 6985692.733 ops/s
Iteration   6: 6766964.203 ops/s
Iteration   7: 6807884.939 ops/s
Iteration   8: 7112791.749 ops/s
Iteration   9: 6886456.645 ops/s
Iteration  10: 7237357.409 ops/s
Iteration  11: 6741574.591 ops/s
Iteration  12: 7037432.945 ops/s
Iteration  13: 6865231.223 ops/s
Iteration  14: 6811250.390 ops/s
Iteration  15: 6896873.317 ops/s
Iteration  16: 7121978.532 ops/s
Iteration  17: 6718496.876 ops/s
Iteration  18: 7017708.677 ops/s
Iteration  19: 6971746.527 ops/s
Iteration  20: 7195091.823 ops/s
Iteration  21: 6930646.546 ops/s
Iteration  22: 7003173.432 ops/s
Iteration  23: 6871240.932 ops/s
Iteration  24: 7166923.624 ops/s
Iteration  25: 7280052.138 ops/s
Iteration  26: 7064639.421 ops/s
Iteration  27: 7132053.061 ops/s
Iteration  28: 6920557.605 ops/s
Iteration  29: 6840993.538 ops/s
Iteration  30: 7297875.237 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccess":
  6976979.582 ±(99.9%) 123699.471 ops/s [Average]
  (min, avg, max) = (6652195.586, 6976979.582, 7319187.268), stdev = 185147.559
  CI (99.9%): [6853280.111, 7100679.053] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccess  thrpt   30  6976979.582 ± 123699.471  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2658611.848 ops/s
# Warmup Iteration   2: 4968714.749 ops/s
# Warmup Iteration   3: 6728065.610 ops/s
# Warmup Iteration   4: 6695840.388 ops/s
# Warmup Iteration   5: 7044859.898 ops/s
# Warmup Iteration   6: 6759041.869 ops/s
# Warmup Iteration   7: 6957291.754 ops/s
# Warmup Iteration   8: 6645107.903 ops/s
# Warmup Iteration   9: 6930960.243 ops/s
# Warmup Iteration  10: 7098636.528 ops/s
# Warmup Iteration  11: 7113501.793 ops/s
# Warmup Iteration  12: 6956165.691 ops/s
# Warmup Iteration  13: 6932671.997 ops/s
# Warmup Iteration  14: 6896217.972 ops/s
# Warmup Iteration  15: 6617290.209 ops/s
# Warmup Iteration  16: 6827372.572 ops/s
# Warmup Iteration  17: 6800787.099 ops/s
# Warmup Iteration  18: 7076858.138 ops/s
# Warmup Iteration  19: 7035227.563 ops/s
# Warmup Iteration  20: 7596560.650 ops/s
# Warmup Iteration  21: 6834100.005 ops/s
# Warmup Iteration  22: 7412490.773 ops/s
# Warmup Iteration  23: 6747729.989 ops/s
# Warmup Iteration  24: 6894570.484 ops/s
# Warmup Iteration  25: 7008242.523 ops/s
# Warmup Iteration  26: 6942105.894 ops/s
# Warmup Iteration  27: 7040786.008 ops/s
# Warmup Iteration  28: 6893417.340 ops/s
# Warmup Iteration  29: 6869124.827 ops/s
# Warmup Iteration  30: 6759266.419 ops/s
Iteration   1: 7626506.051 ops/s
Iteration   2: 6791558.502 ops/s
Iteration   3: 7049625.675 ops/s
Iteration   4: 6752344.466 ops/s
Iteration   5: 6864704.297 ops/s
Iteration   6: 6751827.532 ops/s
Iteration   7: 6990902.735 ops/s
Iteration   8: 6940452.347 ops/s
Iteration   9: 6854458.167 ops/s
Iteration  10: 7093276.482 ops/s
Iteration  11: 6687412.345 ops/s
Iteration  12: 5883285.252 ops/s
Iteration  13: 6671508.365 ops/s
Iteration  14: 7006292.595 ops/s
Iteration  15: 7170206.637 ops/s
Iteration  16: 6670737.664 ops/s
Iteration  17: 6997118.821 ops/s
Iteration  18: 6699216.459 ops/s
Iteration  19: 7118040.871 ops/s
Iteration  20: 7052787.137 ops/s
Iteration  21: 6741892.532 ops/s
Iteration  22: 7081673.761 ops/s
Iteration  23: 6888925.818 ops/s
Iteration  24: 6906471.983 ops/s
Iteration  25: 7035798.104 ops/s
Iteration  26: 6709476.922 ops/s
Iteration  27: 6618669.272 ops/s
Iteration  28: 6814751.543 ops/s
Iteration  29: 7095896.570 ops/s
Iteration  30: 6666391.168 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_normal":
  6874407.002 ±(99.9%) 188870.055 ops/s [Average]
  (min, avg, max) = (5883285.252, 6874407.002, 7626506.051), stdev = 282691.829
  CI (99.9%): [6685536.947, 7063277.058] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score        Error  Units
MaybeHideTest._Benchmark.benchmark_normal  thrpt   30  6874407.002 ± 188870.055  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_offlineComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_offlineComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1490171.199 ops/s
# Warmup Iteration   2: 3022238.950 ops/s
# Warmup Iteration   3: 2929570.793 ops/s
# Warmup Iteration   4: 3720916.315 ops/s
# Warmup Iteration   5: 3595027.775 ops/s
# Warmup Iteration   6: 3596495.550 ops/s
# Warmup Iteration   7: 3607368.156 ops/s
# Warmup Iteration   8: 3623354.985 ops/s
# Warmup Iteration   9: 3526332.868 ops/s
# Warmup Iteration  10: 3596712.837 ops/s
# Warmup Iteration  11: 3476739.486 ops/s
# Warmup Iteration  12: 3674030.671 ops/s
# Warmup Iteration  13: 3580447.461 ops/s
# Warmup Iteration  14: 3591822.920 ops/s
# Warmup Iteration  15: 3737865.001 ops/s
# Warmup Iteration  16: 3571097.802 ops/s
# Warmup Iteration  17: 3756908.767 ops/s
# Warmup Iteration  18: 3522275.440 ops/s
# Warmup Iteration  19: 3674752.652 ops/s
# Warmup Iteration  20: 3618325.286 ops/s
# Warmup Iteration  21: 3573965.021 ops/s
# Warmup Iteration  22: 3696743.705 ops/s
# Warmup Iteration  23: 3566480.852 ops/s
# Warmup Iteration  24: 3535256.706 ops/s
# Warmup Iteration  25: 3626377.816 ops/s
# Warmup Iteration  26: 3616783.728 ops/s
# Warmup Iteration  27: 3669198.921 ops/s
# Warmup Iteration  28: 3569910.361 ops/s
# Warmup Iteration  29: 3716369.453 ops/s
# Warmup Iteration  30: 3662065.019 ops/s
Iteration   1: 3624285.524 ops/s
Iteration   2: 3704209.482 ops/s
Iteration   3: 3558703.483 ops/s
Iteration   4: 3687402.416 ops/s
Iteration   5: 3617063.731 ops/s
Iteration   6: 3585808.385 ops/s
Iteration   7: 3676735.592 ops/s
Iteration   8: 3601115.557 ops/s
Iteration   9: 3677614.014 ops/s
Iteration  10: 3514445.017 ops/s
Iteration  11: 3642537.139 ops/s
Iteration  12: 3565975.764 ops/s
Iteration  13: 3626053.686 ops/s
Iteration  14: 3707175.239 ops/s
Iteration  15: 3500824.630 ops/s
Iteration  16: 3725037.746 ops/s
Iteration  17: 3584765.969 ops/s
Iteration  18: 3687134.552 ops/s
Iteration  19: 3691029.228 ops/s
Iteration  20: 3508880.013 ops/s
Iteration  21: 3654676.163 ops/s
Iteration  22: 3676726.636 ops/s
Iteration  23: 3618043.865 ops/s
Iteration  24: 3567017.732 ops/s
Iteration  25: 3660582.062 ops/s
Iteration  26: 3522856.545 ops/s
Iteration  27: 3699071.154 ops/s
Iteration  28: 3631158.172 ops/s
Iteration  29: 3603409.718 ops/s
Iteration  30: 3758746.625 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_offlineComplete":
  3629302.861 ±(99.9%) 45700.141 ops/s [Average]
  (min, avg, max) = (3500824.630, 3629302.861, 3758746.625), stdev = 68401.825
  CI (99.9%): [3583602.720, 3675003.003] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MaybeCacheTest._Benchmark.benchmark_offlineComplete  thrpt   30  3629302.861 ± 45700.141  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_successSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_successSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1695318.377 ops/s
# Warmup Iteration   2: 4416703.010 ops/s
# Warmup Iteration   3: 7202193.464 ops/s
# Warmup Iteration   4: 6795699.257 ops/s
# Warmup Iteration   5: 6860232.165 ops/s
# Warmup Iteration   6: 6969914.986 ops/s
# Warmup Iteration   7: 6737246.780 ops/s
# Warmup Iteration   8: 7062585.666 ops/s
# Warmup Iteration   9: 6923980.693 ops/s
# Warmup Iteration  10: 6730743.654 ops/s
# Warmup Iteration  11: 7039183.201 ops/s
# Warmup Iteration  12: 7132978.961 ops/s
# Warmup Iteration  13: 6761694.659 ops/s
# Warmup Iteration  14: 7155507.800 ops/s
# Warmup Iteration  15: 6927827.474 ops/s
# Warmup Iteration  16: 6851956.250 ops/s
# Warmup Iteration  17: 6880490.618 ops/s
# Warmup Iteration  18: 6992880.641 ops/s
# Warmup Iteration  19: 7154784.701 ops/s
# Warmup Iteration  20: 6878977.341 ops/s
# Warmup Iteration  21: 6904374.969 ops/s
# Warmup Iteration  22: 6929044.846 ops/s
# Warmup Iteration  23: 6977687.224 ops/s
# Warmup Iteration  24: 7065315.945 ops/s
# Warmup Iteration  25: 7216869.928 ops/s
# Warmup Iteration  26: 6679148.454 ops/s
# Warmup Iteration  27: 7200939.297 ops/s
# Warmup Iteration  28: 6856606.797 ops/s
# Warmup Iteration  29: 6873482.669 ops/s
# Warmup Iteration  30: 7221472.366 ops/s
Iteration   1: 6861847.834 ops/s
Iteration   2: 7088077.530 ops/s
Iteration   3: 7282431.071 ops/s
Iteration   4: 6824121.303 ops/s
Iteration   5: 6936796.490 ops/s
Iteration   6: 6667137.018 ops/s
Iteration   7: 5460580.868 ops/s
Iteration   8: 6757928.625 ops/s
Iteration   9: 6994116.734 ops/s
Iteration  10: 6782686.281 ops/s
Iteration  11: 7077092.931 ops/s
Iteration  12: 6831169.449 ops/s
Iteration  13: 7087743.470 ops/s
Iteration  14: 7155680.574 ops/s
Iteration  15: 7014595.017 ops/s
Iteration  16: 6762624.739 ops/s
Iteration  17: 7234615.909 ops/s
Iteration  18: 6714980.473 ops/s
Iteration  19: 7197360.666 ops/s
Iteration  20: 6778061.860 ops/s
Iteration  21: 6740635.006 ops/s
Iteration  22: 7184143.315 ops/s
Iteration  23: 6894100.890 ops/s
Iteration  24: 7073697.327 ops/s
Iteration  25: 6837883.606 ops/s
Iteration  26: 7054196.787 ops/s
Iteration  27: 7081871.906 ops/s
Iteration  28: 6974833.888 ops/s
Iteration  29: 7010981.112 ops/s
Iteration  30: 6883448.915 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_successSuccess":
  6908181.386 ±(99.9%) 214550.836 ops/s [Average]
  (min, avg, max) = (5460580.868, 6908181.386, 7282431.071), stdev = 321129.615
  CI (99.9%): [6693630.551, 7122732.222] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
MaybeMapOptionalTest._Benchmark.benchmark_successSuccess  thrpt   30  6908181.386 ± 214550.836  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_nonEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_nonEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1725172.409 ops/s
# Warmup Iteration   2: 4610727.951 ops/s
# Warmup Iteration   3: 6182788.868 ops/s
# Warmup Iteration   4: 6404669.820 ops/s
# Warmup Iteration   5: 6341283.911 ops/s
# Warmup Iteration   6: 6101790.152 ops/s
# Warmup Iteration   7: 6450047.496 ops/s
# Warmup Iteration   8: 6206741.821 ops/s
# Warmup Iteration   9: 6259201.007 ops/s
# Warmup Iteration  10: 6581908.033 ops/s
# Warmup Iteration  11: 6101015.283 ops/s
# Warmup Iteration  12: 6115638.071 ops/s
# Warmup Iteration  13: 6415714.994 ops/s
# Warmup Iteration  14: 6465471.195 ops/s
# Warmup Iteration  15: 6151809.874 ops/s
# Warmup Iteration  16: 6552206.081 ops/s
# Warmup Iteration  17: 6405763.036 ops/s
# Warmup Iteration  18: 6238193.377 ops/s
# Warmup Iteration  19: 6493906.761 ops/s
# Warmup Iteration  20: 6283168.316 ops/s
# Warmup Iteration  21: 6471156.767 ops/s
# Warmup Iteration  22: 6420847.177 ops/s
# Warmup Iteration  23: 6320023.891 ops/s
# Warmup Iteration  24: 6484799.829 ops/s
# Warmup Iteration  25: 6109093.169 ops/s
# Warmup Iteration  26: 6407497.905 ops/s
# Warmup Iteration  27: 6516146.210 ops/s
# Warmup Iteration  28: 6108189.864 ops/s
# Warmup Iteration  29: 6620937.994 ops/s
# Warmup Iteration  30: 6283264.788 ops/s
Iteration   1: 6509453.938 ops/s
Iteration   2: 6534795.835 ops/s
Iteration   3: 6436142.037 ops/s
Iteration   4: 6094160.956 ops/s
Iteration   5: 6418892.162 ops/s
Iteration   6: 6250938.320 ops/s
Iteration   7: 6454864.257 ops/s
Iteration   8: 6696558.059 ops/s
Iteration   9: 6662016.329 ops/s
Iteration  10: 6135049.404 ops/s
Iteration  11: 6548970.837 ops/s
Iteration  12: 6220720.909 ops/s
Iteration  13: 6341478.661 ops/s
Iteration  14: 6430096.183 ops/s
Iteration  15: 6240778.952 ops/s
Iteration  16: 6343218.064 ops/s
Iteration  17: 6272760.697 ops/s
Iteration  18: 6268669.738 ops/s
Iteration  19: 6122094.695 ops/s
Iteration  20: 6494752.360 ops/s
Iteration  21: 6327722.281 ops/s
Iteration  22: 6487826.275 ops/s
Iteration  23: 6503913.617 ops/s
Iteration  24: 6238778.247 ops/s
Iteration  25: 6378135.890 ops/s
Iteration  26: 6274026.466 ops/s
Iteration  27: 6362156.642 ops/s
Iteration  28: 6378227.279 ops/s
Iteration  29: 6190341.141 ops/s
Iteration  30: 6551947.959 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_nonEmpty":
  6372316.273 ±(99.9%) 103525.865 ops/s [Average]
  (min, avg, max) = (6094160.956, 6372316.273, 6696558.059), stdev = 154952.653
  CI (99.9%): [6268790.408, 6475842.138] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
MaybeSwitchIfEmptyTest._Benchmark.benchmark_nonEmpty  thrpt   30  6372316.273 ± 103525.865  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_observerSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_observerSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2606171.240 ops/s
# Warmup Iteration   2: 5560198.955 ops/s
# Warmup Iteration   3: 7435661.211 ops/s
# Warmup Iteration   4: 7126835.957 ops/s
# Warmup Iteration   5: 7695912.314 ops/s
# Warmup Iteration   6: 7303417.514 ops/s
# Warmup Iteration   7: 7407682.783 ops/s
# Warmup Iteration   8: 7619458.387 ops/s
# Warmup Iteration   9: 7322176.387 ops/s
# Warmup Iteration  10: 7539081.849 ops/s
# Warmup Iteration  11: 7173944.017 ops/s
# Warmup Iteration  12: 7196946.294 ops/s
# Warmup Iteration  13: 7547715.958 ops/s
# Warmup Iteration  14: 7181914.429 ops/s
# Warmup Iteration  15: 7650174.063 ops/s
# Warmup Iteration  16: 7259179.415 ops/s
# Warmup Iteration  17: 7462713.085 ops/s
# Warmup Iteration  18: 7505496.222 ops/s
# Warmup Iteration  19: 7138117.439 ops/s
# Warmup Iteration  20: 7700243.081 ops/s
# Warmup Iteration  21: 7202205.629 ops/s
# Warmup Iteration  22: 7606706.216 ops/s
# Warmup Iteration  23: 7730247.672 ops/s
# Warmup Iteration  24: 7331855.094 ops/s
# Warmup Iteration  25: 7214804.930 ops/s
# Warmup Iteration  26: 7476052.776 ops/s
# Warmup Iteration  27: 7296656.221 ops/s
# Warmup Iteration  28: 7423448.341 ops/s
# Warmup Iteration  29: 7254484.106 ops/s
# Warmup Iteration  30: 7288529.666 ops/s
Iteration   1: 6554853.076 ops/s
Iteration   2: 7340222.865 ops/s
Iteration   3: 7274534.014 ops/s
Iteration   4: 7344055.427 ops/s
Iteration   5: 7655158.331 ops/s
Iteration   6: 7228610.250 ops/s
Iteration   7: 7637137.828 ops/s
Iteration   8: 7118924.716 ops/s
Iteration   9: 7218979.958 ops/s
Iteration  10: 7611886.531 ops/s
Iteration  11: 7173106.921 ops/s
Iteration  12: 7307376.728 ops/s
Iteration  13: 7324314.447 ops/s
Iteration  14: 7375482.932 ops/s
Iteration  15: 7434378.398 ops/s
Iteration  16: 7075162.716 ops/s
Iteration  17: 7429561.815 ops/s
Iteration  18: 7674053.531 ops/s
Iteration  19: 7211104.206 ops/s
Iteration  20: 7613989.818 ops/s
Iteration  21: 7254707.896 ops/s
Iteration  22: 7581269.683 ops/s
Iteration  23: 7280198.786 ops/s
Iteration  24: 7600567.701 ops/s
Iteration  25: 7254422.478 ops/s
Iteration  26: 7398396.754 ops/s
Iteration  27: 7651947.237 ops/s
Iteration  28: 7232787.483 ops/s
Iteration  29: 7602388.689 ops/s
Iteration  30: 7168841.771 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeBlockingSubscribeTest._Benchmark.benchmark_observerSuccess":
  7354280.766 ±(99.9%) 158275.213 ops/s [Average]
  (min, avg, max) = (6554853.076, 7354280.766, 7674053.531), stdev = 236898.906
  CI (99.9%): [7196005.553, 7512555.979] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
MaybeBlockingSubscribeTest._Benchmark.benchmark_observerSuccess  thrpt   30  7354280.766 ± 158275.213  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_mapperCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_mapperCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1995383.358 ops/s
# Warmup Iteration   2: 4100149.394 ops/s
# Warmup Iteration   3: 5809550.255 ops/s
# Warmup Iteration   4: 5676441.173 ops/s
# Warmup Iteration   5: 5875969.149 ops/s
# Warmup Iteration   6: 5749998.408 ops/s
# Warmup Iteration   7: 5853981.194 ops/s
# Warmup Iteration   8: 5863968.588 ops/s
# Warmup Iteration   9: 5903923.051 ops/s
# Warmup Iteration  10: 5875986.363 ops/s
# Warmup Iteration  11: 5881806.209 ops/s
# Warmup Iteration  12: 5726918.800 ops/s
# Warmup Iteration  13: 5745740.764 ops/s
# Warmup Iteration  14: 5939081.201 ops/s
# Warmup Iteration  15: 5705647.495 ops/s
# Warmup Iteration  16: 6026217.829 ops/s
# Warmup Iteration  17: 5599140.115 ops/s
# Warmup Iteration  18: 5758079.829 ops/s
# Warmup Iteration  19: 5932202.275 ops/s
# Warmup Iteration  20: 5595135.687 ops/s
# Warmup Iteration  21: 5884054.894 ops/s
# Warmup Iteration  22: 5658573.003 ops/s
# Warmup Iteration  23: 5611005.108 ops/s
# Warmup Iteration  24: 5888252.279 ops/s
# Warmup Iteration  25: 5844951.663 ops/s
# Warmup Iteration  26: 5774071.583 ops/s
# Warmup Iteration  27: 5850659.225 ops/s
# Warmup Iteration  28: 5641132.028 ops/s
# Warmup Iteration  29: 5658073.763 ops/s
# Warmup Iteration  30: 5984437.202 ops/s
Iteration   1: 5538835.021 ops/s
Iteration   2: 5601057.611 ops/s
Iteration   3: 5903893.002 ops/s
Iteration   4: 5657226.488 ops/s
Iteration   5: 5873952.675 ops/s
Iteration   6: 5630203.474 ops/s
Iteration   7: 5781068.369 ops/s
Iteration   8: 5916018.354 ops/s
Iteration   9: 5592599.244 ops/s
Iteration  10: 5928623.617 ops/s
Iteration  11: 5572165.661 ops/s
Iteration  12: 5602383.099 ops/s
Iteration  13: 5882914.130 ops/s
Iteration  14: 5611981.128 ops/s
Iteration  15: 5712761.668 ops/s
Iteration  16: 5954472.172 ops/s
Iteration  17: 5700165.051 ops/s
Iteration  18: 5984497.293 ops/s
Iteration  19: 5880188.162 ops/s
Iteration  20: 5629507.950 ops/s
Iteration  21: 6050501.434 ops/s
Iteration  22: 5945297.882 ops/s
Iteration  23: 5576030.367 ops/s
Iteration  24: 5854802.531 ops/s
Iteration  25: 5668711.813 ops/s
Iteration  26: 5915545.324 ops/s
Iteration  27: 5592685.704 ops/s
Iteration  28: 5863528.946 ops/s
Iteration  29: 5839361.093 ops/s
Iteration  30: 5836153.815 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_mapperCancels":
  5769904.436 ±(99.9%) 102391.096 ops/s [Average]
  (min, avg, max) = (5538835.021, 5769904.436, 6050501.434), stdev = 153254.184
  CI (99.9%): [5667513.340, 5872295.532] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
MaybeFlatMapBiSelectorTest._Benchmark.benchmark_mapperCancels  thrpt   30  5769904.436 ± 102391.096  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1968120.482 ops/s
# Warmup Iteration   2: 4833976.939 ops/s
# Warmup Iteration   3: 6737406.768 ops/s
# Warmup Iteration   4: 6519441.524 ops/s
# Warmup Iteration   5: 6735491.546 ops/s
# Warmup Iteration   6: 6763177.491 ops/s
# Warmup Iteration   7: 6493618.801 ops/s
# Warmup Iteration   8: 6832855.685 ops/s
# Warmup Iteration   9: 6591269.566 ops/s
# Warmup Iteration  10: 6596903.149 ops/s
# Warmup Iteration  11: 6741804.225 ops/s
# Warmup Iteration  12: 6549930.424 ops/s
# Warmup Iteration  13: 6710522.994 ops/s
# Warmup Iteration  14: 6869193.433 ops/s
# Warmup Iteration  15: 6450777.374 ops/s
# Warmup Iteration  16: 6684431.475 ops/s
# Warmup Iteration  17: 6395760.489 ops/s
# Warmup Iteration  18: 6693990.323 ops/s
# Warmup Iteration  19: 6957612.314 ops/s
# Warmup Iteration  20: 6335139.988 ops/s
# Warmup Iteration  21: 6633140.639 ops/s
# Warmup Iteration  22: 6663699.963 ops/s
# Warmup Iteration  23: 7044041.799 ops/s
# Warmup Iteration  24: 6676952.020 ops/s
# Warmup Iteration  25: 6530879.873 ops/s
# Warmup Iteration  26: 5400510.524 ops/s
# Warmup Iteration  27: 6887349.025 ops/s
# Warmup Iteration  28: 6610557.315 ops/s
# Warmup Iteration  29: 6918556.896 ops/s
# Warmup Iteration  30: 6720475.745 ops/s
Iteration   1: 6533442.048 ops/s
Iteration   2: 6812590.850 ops/s
Iteration   3: 6501264.163 ops/s
Iteration   4: 6647772.649 ops/s
Iteration   5: 6617348.211 ops/s
Iteration   6: 6424912.625 ops/s
Iteration   7: 6667781.692 ops/s
Iteration   8: 6910750.939 ops/s
Iteration   9: 6488816.108 ops/s
Iteration  10: 6732074.037 ops/s
Iteration  11: 6607693.478 ops/s
Iteration  12: 6655176.529 ops/s
Iteration  13: 6873380.937 ops/s
Iteration  14: 6525105.069 ops/s
Iteration  15: 6650255.107 ops/s
Iteration  16: 6910556.003 ops/s
Iteration  17: 6475024.709 ops/s
Iteration  18: 6763985.150 ops/s
Iteration  19: 6594086.439 ops/s
Iteration  20: 6829829.693 ops/s
Iteration  21: 6494475.059 ops/s
Iteration  22: 6944478.842 ops/s
Iteration  23: 6684628.345 ops/s
Iteration  24: 6510591.890 ops/s
Iteration  25: 6682817.581 ops/s
Iteration  26: 6656781.336 ops/s
Iteration  27: 6654722.971 ops/s
Iteration  28: 6858375.504 ops/s
Iteration  29: 6569471.522 ops/s
Iteration  30: 6743487.224 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalJust":
  6667389.224 ±(99.9%) 97012.455 ops/s [Average]
  (min, avg, max) = (6424912.625, 6667389.224, 6944478.842), stdev = 145203.686
  CI (99.9%): [6570376.769, 6764401.679] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MaybeDoFinallyTest._Benchmark.benchmark_normalJust  thrpt   30  6667389.224 ± 97012.455  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 585289.701 ops/s
# Warmup Iteration   2: 2614476.944 ops/s
# Warmup Iteration   3: 3940381.410 ops/s
# Warmup Iteration   4: 4610110.345 ops/s
# Warmup Iteration   5: 4809341.780 ops/s
# Warmup Iteration   6: 4794826.250 ops/s
# Warmup Iteration   7: 4611508.525 ops/s
# Warmup Iteration   8: 4843528.911 ops/s
# Warmup Iteration   9: 4678112.620 ops/s
# Warmup Iteration  10: 4770918.974 ops/s
# Warmup Iteration  11: 4837573.745 ops/s
# Warmup Iteration  12: 4667654.006 ops/s
# Warmup Iteration  13: 4832199.491 ops/s
# Warmup Iteration  14: 4695043.698 ops/s
# Warmup Iteration  15: 4869175.910 ops/s
# Warmup Iteration  16: 4731802.316 ops/s
# Warmup Iteration  17: 4541021.793 ops/s
# Warmup Iteration  18: 4873281.859 ops/s
# Warmup Iteration  19: 4709433.791 ops/s
# Warmup Iteration  20: 4718477.421 ops/s
# Warmup Iteration  21: 4793841.694 ops/s
# Warmup Iteration  22: 4781295.264 ops/s
# Warmup Iteration  23: 4576558.827 ops/s
# Warmup Iteration  24: 4609490.615 ops/s
# Warmup Iteration  25: 4694466.296 ops/s
# Warmup Iteration  26: 4893325.518 ops/s
# Warmup Iteration  27: 4854205.276 ops/s
# Warmup Iteration  28: 4612270.604 ops/s
# Warmup Iteration  29: 4733476.403 ops/s
# Warmup Iteration  30: 4931962.149 ops/s
Iteration   1: 4909117.619 ops/s
Iteration   2: 4717767.786 ops/s
Iteration   3: 4938580.915 ops/s
Iteration   4: 4872592.367 ops/s
Iteration   5: 4610202.303 ops/s
Iteration   6: 4561933.259 ops/s
Iteration   7: 4733079.479 ops/s
Iteration   8: 4529169.082 ops/s
Iteration   9: 4830121.780 ops/s
Iteration  10: 4799115.100 ops/s
Iteration  11: 4660212.844 ops/s
Iteration  12: 4781559.178 ops/s
Iteration  13: 4678825.577 ops/s
Iteration  14: 4887824.033 ops/s
Iteration  15: 4650007.834 ops/s
Iteration  16: 4561790.011 ops/s
Iteration  17: 4970714.687 ops/s
Iteration  18: 4700501.274 ops/s
Iteration  19: 4805474.671 ops/s
Iteration  20: 4754191.638 ops/s
Iteration  21: 4642640.935 ops/s
Iteration  22: 4830082.169 ops/s
Iteration  23: 4727079.874 ops/s
Iteration  24: 4816087.599 ops/s
Iteration  25: 4703036.326 ops/s
Iteration  26: 4778409.959 ops/s
Iteration  27: 4728486.186 ops/s
Iteration  28: 4719857.153 ops/s
Iteration  29: 4830871.915 ops/s
Iteration  30: 4638146.767 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_just":
  4745582.677 ±(99.9%) 75285.199 ops/s [Average]
  (min, avg, max) = (4529169.082, 4745582.677, 4970714.687), stdev = 112683.351
  CI (99.9%): [4670297.478, 4820867.877] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MaybeDoAfterSuccessTest._Benchmark.benchmark_just  thrpt   30  4745582.677 ± 75285.199  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStageTest._Benchmark.benchmark_dispose2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStageTest._Benchmark.benchmark_dispose2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3003775.365 ops/s
# Warmup Iteration   2: 6283889.243 ops/s
# Warmup Iteration   3: 8586684.485 ops/s
# Warmup Iteration   4: 7980197.891 ops/s
# Warmup Iteration   5: 8281316.389 ops/s
# Warmup Iteration   6: 8338855.136 ops/s
# Warmup Iteration   7: 8138189.780 ops/s
# Warmup Iteration   8: 8351874.791 ops/s
# Warmup Iteration   9: 8143541.571 ops/s
# Warmup Iteration  10: 8641873.680 ops/s
# Warmup Iteration  11: 8158487.057 ops/s
# Warmup Iteration  12: 8303827.867 ops/s
# Warmup Iteration  13: 8197593.828 ops/s
# Warmup Iteration  14: 8271734.544 ops/s
# Warmup Iteration  15: 8584976.955 ops/s
# Warmup Iteration  16: 8162451.253 ops/s
# Warmup Iteration  17: 8482719.547 ops/s
# Warmup Iteration  18: 8419168.515 ops/s
# Warmup Iteration  19: 8419534.066 ops/s
# Warmup Iteration  20: 8655462.408 ops/s
# Warmup Iteration  21: 7009995.102 ops/s
# Warmup Iteration  22: 8297510.065 ops/s
# Warmup Iteration  23: 8741958.096 ops/s
# Warmup Iteration  24: 8120762.854 ops/s
# Warmup Iteration  25: 8761639.258 ops/s
# Warmup Iteration  26: 8694723.510 ops/s
# Warmup Iteration  27: 8479924.316 ops/s
# Warmup Iteration  28: 8295197.581 ops/s
# Warmup Iteration  29: 8669612.687 ops/s
# Warmup Iteration  30: 8481116.149 ops/s
Iteration   1: 8295311.639 ops/s
Iteration   2: 8281829.052 ops/s
Iteration   3: 8643041.876 ops/s
Iteration   4: 8267765.642 ops/s
Iteration   5: 8054425.504 ops/s
Iteration   6: 8776265.503 ops/s
Iteration   7: 8254140.579 ops/s
Iteration   8: 8755416.757 ops/s
Iteration   9: 8765784.263 ops/s
Iteration  10: 8266945.158 ops/s
Iteration  11: 8547286.371 ops/s
Iteration  12: 8370528.110 ops/s
Iteration  13: 8660619.049 ops/s
Iteration  14: 8331962.133 ops/s
Iteration  15: 8386665.184 ops/s
Iteration  16: 8579726.478 ops/s
Iteration  17: 8267051.018 ops/s
Iteration  18: 8369608.865 ops/s
Iteration  19: 8754252.500 ops/s
Iteration  20: 8357594.063 ops/s
Iteration  21: 8574529.642 ops/s
Iteration  22: 8379531.923 ops/s
Iteration  23: 8496269.711 ops/s
Iteration  24: 8601244.631 ops/s
Iteration  25: 8189469.761 ops/s
Iteration  26: 8585688.208 ops/s
Iteration  27: 8553274.151 ops/s
Iteration  28: 8293532.662 ops/s
Iteration  29: 8653209.832 ops/s
Iteration  30: 8389881.486 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStageTest._Benchmark.benchmark_dispose2":
  8456761.725 ±(99.9%) 129937.362 ops/s [Average]
  (min, avg, max) = (8054425.504, 8456761.725, 8776265.503), stdev = 194484.141
  CI (99.9%): [8326824.363, 8586699.087] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
MaybeFromCompletionStageTest._Benchmark.benchmark_dispose2  thrpt   30  8456761.725 ± 129937.362  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletableTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletableTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 193435.631 ops/s
# Warmup Iteration   2: 493017.420 ops/s
# Warmup Iteration   3: 534082.374 ops/s
# Warmup Iteration   4: 537775.135 ops/s
# Warmup Iteration   5: 560668.327 ops/s
# Warmup Iteration   6: 546244.072 ops/s
# Warmup Iteration   7: 528649.032 ops/s
# Warmup Iteration   8: 563421.038 ops/s
# Warmup Iteration   9: 559242.743 ops/s
# Warmup Iteration  10: 526713.290 ops/s
# Warmup Iteration  11: 552774.275 ops/s
# Warmup Iteration  12: 535896.986 ops/s
# Warmup Iteration  13: 563330.596 ops/s
# Warmup Iteration  14: 524992.533 ops/s
# Warmup Iteration  15: 547811.841 ops/s
# Warmup Iteration  16: 571032.834 ops/s
# Warmup Iteration  17: 587866.610 ops/s
# Warmup Iteration  18: 568533.287 ops/s
# Warmup Iteration  19: 586680.453 ops/s
# Warmup Iteration  20: 567583.493 ops/s
# Warmup Iteration  21: 599013.517 ops/s
# Warmup Iteration  22: 588710.296 ops/s
# Warmup Iteration  23: 571275.723 ops/s
# Warmup Iteration  24: 555395.202 ops/s
# Warmup Iteration  25: 587137.551 ops/s
# Warmup Iteration  26: 564131.146 ops/s
# Warmup Iteration  27: 586312.874 ops/s
# Warmup Iteration  28: 576782.035 ops/s
# Warmup Iteration  29: 556748.568 ops/s
# Warmup Iteration  30: 608239.449 ops/s
Iteration   1: 606172.540 ops/s
Iteration   2: 564977.290 ops/s
Iteration   3: 592348.889 ops/s
Iteration   4: 582043.586 ops/s
Iteration   5: 548545.233 ops/s
Iteration   6: 605202.199 ops/s
Iteration   7: 568866.638 ops/s
Iteration   8: 571632.137 ops/s
Iteration   9: 602734.383 ops/s
Iteration  10: 579630.206 ops/s
Iteration  11: 592298.667 ops/s
Iteration  12: 570136.655 ops/s
Iteration  13: 585376.569 ops/s
Iteration  14: 571684.135 ops/s
Iteration  15: 568053.687 ops/s
Iteration  16: 580026.068 ops/s
Iteration  17: 558324.491 ops/s
Iteration  18: 575364.286 ops/s
Iteration  19: 581597.679 ops/s
Iteration  20: 590216.660 ops/s
Iteration  21: 577956.356 ops/s
Iteration  22: 575495.861 ops/s
Iteration  23: 590455.865 ops/s
Iteration  24: 564067.443 ops/s
Iteration  25: 592686.106 ops/s
Iteration  26: 555007.965 ops/s
Iteration  27: 583842.438 ops/s
Iteration  28: 574481.162 ops/s
Iteration  29: 571012.796 ops/s
Iteration  30: 598421.595 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletableTest._Benchmark.benchmark_mapperThrows":
  579288.653 ±(99.9%) 9700.760 ops/s [Average]
  (min, avg, max) = (548545.233, 579288.653, 606172.540), stdev = 14519.642
  CI (99.9%): [569587.893, 588989.413] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MaybeFlatMapCompletableTest._Benchmark.benchmark_mapperThrows  thrpt   30  579288.653 ± 9700.760  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapCompletableTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapCompletableTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 216769.699 ops/s
# Warmup Iteration   2: 459895.510 ops/s
# Warmup Iteration   3: 537758.574 ops/s
# Warmup Iteration   4: 530966.207 ops/s
# Warmup Iteration   5: 552177.755 ops/s
# Warmup Iteration   6: 540422.064 ops/s
# Warmup Iteration   7: 551080.549 ops/s
# Warmup Iteration   8: 562867.670 ops/s
# Warmup Iteration   9: 520485.586 ops/s
# Warmup Iteration  10: 568853.402 ops/s
# Warmup Iteration  11: 516730.907 ops/s
# Warmup Iteration  12: 512420.938 ops/s
# Warmup Iteration  13: 553507.001 ops/s
# Warmup Iteration  14: 530042.784 ops/s
# Warmup Iteration  15: 532109.159 ops/s
# Warmup Iteration  16: 451994.557 ops/s
# Warmup Iteration  17: 579315.473 ops/s
# Warmup Iteration  18: 587331.302 ops/s
# Warmup Iteration  19: 560320.457 ops/s
# Warmup Iteration  20: 595844.046 ops/s
# Warmup Iteration  21: 549383.164 ops/s
# Warmup Iteration  22: 604000.648 ops/s
# Warmup Iteration  23: 562401.908 ops/s
# Warmup Iteration  24: 578260.605 ops/s
# Warmup Iteration  25: 561703.460 ops/s
# Warmup Iteration  26: 571122.350 ops/s
# Warmup Iteration  27: 578589.933 ops/s
# Warmup Iteration  28: 586727.267 ops/s
# Warmup Iteration  29: 562341.124 ops/s
# Warmup Iteration  30: 565343.244 ops/s
Iteration   1: 586723.229 ops/s
Iteration   2: 569857.791 ops/s
Iteration   3: 579237.423 ops/s
Iteration   4: 557733.738 ops/s
Iteration   5: 578058.747 ops/s
Iteration   6: 554866.216 ops/s
Iteration   7: 569865.300 ops/s
Iteration   8: 593278.166 ops/s
Iteration   9: 569584.974 ops/s
Iteration  10: 586978.065 ops/s
Iteration  11: 548616.205 ops/s
Iteration  12: 582423.566 ops/s
Iteration  13: 572219.997 ops/s
Iteration  14: 580714.737 ops/s
Iteration  15: 577886.872 ops/s
Iteration  16: 573561.683 ops/s
Iteration  17: 571285.774 ops/s
Iteration  18: 578678.656 ops/s
Iteration  19: 584605.437 ops/s
Iteration  20: 554104.951 ops/s
Iteration  21: 574066.790 ops/s
Iteration  22: 585208.431 ops/s
Iteration  23: 559416.828 ops/s
Iteration  24: 584922.556 ops/s
Iteration  25: 584784.883 ops/s
Iteration  26: 558545.282 ops/s
Iteration  27: 575838.575 ops/s
Iteration  28: 552734.956 ops/s
Iteration  29: 592697.668 ops/s
Iteration  30: 567838.315 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapCompletableTest._Benchmark.benchmark_mapperThrows":
  573544.527 ±(99.9%) 8226.195 ops/s [Average]
  (min, avg, max) = (548616.205, 573544.527, 593278.166), stdev = 12312.582
  CI (99.9%): [565318.332, 581770.722] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
MaybeConcatMapCompletableTest._Benchmark.benchmark_mapperThrows  thrpt   30  573544.527 ± 8226.195  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_oneSourceOnly$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_oneSourceOnly

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 787084.818 ops/s
# Warmup Iteration   2: 3457422.350 ops/s
# Warmup Iteration   3: 5483687.048 ops/s
# Warmup Iteration   4: 5350830.755 ops/s
# Warmup Iteration   5: 5380472.644 ops/s
# Warmup Iteration   6: 5286628.255 ops/s
# Warmup Iteration   7: 5604817.345 ops/s
# Warmup Iteration   8: 5485615.050 ops/s
# Warmup Iteration   9: 5222302.830 ops/s
# Warmup Iteration  10: 5411473.071 ops/s
# Warmup Iteration  11: 5258708.156 ops/s
# Warmup Iteration  12: 5214259.867 ops/s
# Warmup Iteration  13: 5549404.665 ops/s
# Warmup Iteration  14: 5466835.677 ops/s
# Warmup Iteration  15: 5389571.996 ops/s
# Warmup Iteration  16: 5551738.282 ops/s
# Warmup Iteration  17: 5682119.421 ops/s
# Warmup Iteration  18: 5386185.746 ops/s
# Warmup Iteration  19: 5229892.483 ops/s
# Warmup Iteration  20: 5430722.242 ops/s
# Warmup Iteration  21: 5344026.929 ops/s
# Warmup Iteration  22: 5384125.302 ops/s
# Warmup Iteration  23: 5560176.380 ops/s
# Warmup Iteration  24: 5315686.212 ops/s
# Warmup Iteration  25: 5252815.937 ops/s
# Warmup Iteration  26: 5514245.552 ops/s
# Warmup Iteration  27: 5302422.215 ops/s
# Warmup Iteration  28: 5207289.272 ops/s
# Warmup Iteration  29: 5517495.626 ops/s
# Warmup Iteration  30: 5263310.185 ops/s
Iteration   1: 5466961.319 ops/s
Iteration   2: 5441355.049 ops/s
Iteration   3: 5354833.834 ops/s
Iteration   4: 5589625.606 ops/s
Iteration   5: 5324805.953 ops/s
Iteration   6: 5290093.736 ops/s
Iteration   7: 5417719.112 ops/s
Iteration   8: 5309423.488 ops/s
Iteration   9: 5345477.858 ops/s
Iteration  10: 5561671.681 ops/s
Iteration  11: 5257485.579 ops/s
Iteration  12: 5564432.706 ops/s
Iteration  13: 5326896.571 ops/s
Iteration  14: 5285276.665 ops/s
Iteration  15: 5446600.319 ops/s
Iteration  16: 5666507.861 ops/s
Iteration  17: 5347799.983 ops/s
Iteration  18: 5460955.256 ops/s
Iteration  19: 5317476.096 ops/s
Iteration  20: 5459933.974 ops/s
Iteration  21: 5316593.309 ops/s
Iteration  22: 5579719.445 ops/s
Iteration  23: 5663620.708 ops/s
Iteration  24: 5201569.878 ops/s
Iteration  25: 5598291.536 ops/s
Iteration  26: 5273695.151 ops/s
Iteration  27: 5571610.191 ops/s
Iteration  28: 5210340.310 ops/s
Iteration  29: 5468892.807 ops/s
Iteration  30: 5361133.100 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_oneSourceOnly":
  5416026.636 ±(99.9%) 89707.071 ops/s [Average]
  (min, avg, max) = (5201569.878, 5416026.636, 5666507.861), stdev = 134269.331
  CI (99.9%): [5326319.565, 5505733.707] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MaybeZipArrayTest._Benchmark.benchmark_oneSourceOnly  thrpt   30  5416026.636 ± 89707.071  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3742105.103 ops/s
# Warmup Iteration   2: 6483965.714 ops/s
# Warmup Iteration   3: 9108667.523 ops/s
# Warmup Iteration   4: 8480263.782 ops/s
# Warmup Iteration   5: 9198681.209 ops/s
# Warmup Iteration   6: 8520540.691 ops/s
# Warmup Iteration   7: 8943333.291 ops/s
# Warmup Iteration   8: 8839142.938 ops/s
# Warmup Iteration   9: 8727835.741 ops/s
# Warmup Iteration  10: 9186337.077 ops/s
# Warmup Iteration  11: 7184145.429 ops/s
# Warmup Iteration  12: 9144090.477 ops/s
# Warmup Iteration  13: 8809666.056 ops/s
# Warmup Iteration  14: 8848544.426 ops/s
# Warmup Iteration  15: 9046131.391 ops/s
# Warmup Iteration  16: 8911668.863 ops/s
# Warmup Iteration  17: 9242014.434 ops/s
# Warmup Iteration  18: 8735394.184 ops/s
# Warmup Iteration  19: 9089880.615 ops/s
# Warmup Iteration  20: 8641606.129 ops/s
# Warmup Iteration  21: 9046539.931 ops/s
# Warmup Iteration  22: 9221568.271 ops/s
# Warmup Iteration  23: 9278820.686 ops/s
# Warmup Iteration  24: 8555312.183 ops/s
# Warmup Iteration  25: 9133098.921 ops/s
# Warmup Iteration  26: 8751891.585 ops/s
# Warmup Iteration  27: 8994243.675 ops/s
# Warmup Iteration  28: 9010786.903 ops/s
# Warmup Iteration  29: 8975589.004 ops/s
# Warmup Iteration  30: 8917835.031 ops/s
Iteration   1: 8932044.403 ops/s
Iteration   2: 9094597.257 ops/s
Iteration   3: 8813927.501 ops/s
Iteration   4: 8891844.721 ops/s
Iteration   5: 8954782.279 ops/s
Iteration   6: 8839587.411 ops/s
Iteration   7: 9057137.016 ops/s
Iteration   8: 8926205.055 ops/s
Iteration   9: 9110262.533 ops/s
Iteration  10: 8867499.126 ops/s
Iteration  11: 8755961.193 ops/s
Iteration  12: 9063505.276 ops/s
Iteration  13: 8873635.485 ops/s
Iteration  14: 9139154.286 ops/s
Iteration  15: 8850934.914 ops/s
Iteration  16: 8577535.552 ops/s
Iteration  17: 9096857.570 ops/s
Iteration  18: 8688652.369 ops/s
Iteration  19: 9131364.243 ops/s
Iteration  20: 8932256.798 ops/s
Iteration  21: 8713259.669 ops/s
Iteration  22: 9024191.835 ops/s
Iteration  23: 8786918.485 ops/s
Iteration  24: 9062315.354 ops/s
Iteration  25: 8929913.543 ops/s
Iteration  26: 8993944.620 ops/s
Iteration  27: 8876129.391 ops/s
Iteration  28: 8866469.408 ops/s
Iteration  29: 9354958.936 ops/s
Iteration  30: 9060983.996 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_empty":
  8942227.674 ±(99.9%) 107706.419 ops/s [Average]
  (min, avg, max) = (8577535.552, 8942227.674, 9354958.936), stdev = 161209.909
  CI (99.9%): [8834521.255, 9049934.093] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
MaybeDematerializeTest._Benchmark.benchmark_empty  thrpt   30  8942227.674 ± 107706.419  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_selectorDifferentType$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_selectorDifferentType

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1856517.332 ops/s
# Warmup Iteration   2: 4911536.873 ops/s
# Warmup Iteration   3: 6998052.375 ops/s
# Warmup Iteration   4: 6634125.024 ops/s
# Warmup Iteration   5: 6836077.126 ops/s
# Warmup Iteration   6: 6890985.828 ops/s
# Warmup Iteration   7: 6629207.080 ops/s
# Warmup Iteration   8: 6867286.297 ops/s
# Warmup Iteration   9: 6722667.562 ops/s
# Warmup Iteration  10: 6605759.041 ops/s
# Warmup Iteration  11: 6710410.038 ops/s
# Warmup Iteration  12: 6983424.169 ops/s
# Warmup Iteration  13: 6599080.449 ops/s
# Warmup Iteration  14: 7078130.246 ops/s
# Warmup Iteration  15: 6685399.855 ops/s
# Warmup Iteration  16: 6901045.989 ops/s
# Warmup Iteration  17: 6623935.456 ops/s
# Warmup Iteration  18: 6905139.544 ops/s
# Warmup Iteration  19: 6973706.976 ops/s
# Warmup Iteration  20: 6654536.872 ops/s
# Warmup Iteration  21: 6949154.191 ops/s
# Warmup Iteration  22: 6690649.838 ops/s
# Warmup Iteration  23: 6697192.482 ops/s
# Warmup Iteration  24: 6694905.815 ops/s
# Warmup Iteration  25: 6653002.592 ops/s
# Warmup Iteration  26: 7103513.151 ops/s
# Warmup Iteration  27: 6498109.670 ops/s
# Warmup Iteration  28: 6725692.018 ops/s
# Warmup Iteration  29: 6923362.717 ops/s
# Warmup Iteration  30: 6769636.261 ops/s
Iteration   1: 6999091.826 ops/s
Iteration   2: 6591696.777 ops/s
Iteration   3: 6674298.665 ops/s
Iteration   4: 6953410.525 ops/s
Iteration   5: 6818962.900 ops/s
Iteration   6: 6685884.634 ops/s
Iteration   7: 6974809.257 ops/s
Iteration   8: 6646932.672 ops/s
Iteration   9: 7185131.473 ops/s
Iteration  10: 6481940.455 ops/s
Iteration  11: 6895175.646 ops/s
Iteration  12: 6627710.055 ops/s
Iteration  13: 6765292.065 ops/s
Iteration  14: 7151286.021 ops/s
Iteration  15: 6577403.598 ops/s
Iteration  16: 6774002.132 ops/s
Iteration  17: 7115779.781 ops/s
Iteration  18: 6759307.882 ops/s
Iteration  19: 6879333.299 ops/s
Iteration  20: 6664292.398 ops/s
Iteration  21: 6979617.420 ops/s
Iteration  22: 6667795.157 ops/s
Iteration  23: 6900088.662 ops/s
Iteration  24: 6676991.441 ops/s
Iteration  25: 6614775.404 ops/s
Iteration  26: 7113171.133 ops/s
Iteration  27: 6540771.061 ops/s
Iteration  28: 6755257.445 ops/s
Iteration  29: 6881057.916 ops/s
Iteration  30: 6810992.277 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_selectorDifferentType":
  6805408.666 ±(99.9%) 127803.491 ops/s [Average]
  (min, avg, max) = (6481940.455, 6805408.666, 7185131.473), stdev = 191290.264
  CI (99.9%): [6677605.174, 6933212.157] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
MaybeDematerializeTest._Benchmark.benchmark_selectorDifferentType  thrpt   30  6805408.666 ± 127803.491  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccessCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccessCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 311693.324 ops/s
# Warmup Iteration   2: 544530.671 ops/s
# Warmup Iteration   3: 669368.133 ops/s
# Warmup Iteration   4: 606883.761 ops/s
# Warmup Iteration   5: 650412.884 ops/s
# Warmup Iteration   6: 491903.322 ops/s
# Warmup Iteration   7: 638177.576 ops/s
# Warmup Iteration   8: 649410.926 ops/s
# Warmup Iteration   9: 657124.871 ops/s
# Warmup Iteration  10: 653044.884 ops/s
# Warmup Iteration  11: 624726.573 ops/s
# Warmup Iteration  12: 637541.268 ops/s
# Warmup Iteration  13: 656831.976 ops/s
# Warmup Iteration  14: 624189.886 ops/s
# Warmup Iteration  15: 637012.302 ops/s
# Warmup Iteration  16: 649226.421 ops/s
# Warmup Iteration  17: 646843.075 ops/s
# Warmup Iteration  18: 702302.424 ops/s
# Warmup Iteration  19: 691585.493 ops/s
# Warmup Iteration  20: 656865.201 ops/s
# Warmup Iteration  21: 701526.672 ops/s
# Warmup Iteration  22: 643746.500 ops/s
# Warmup Iteration  23: 702178.451 ops/s
# Warmup Iteration  24: 666460.490 ops/s
# Warmup Iteration  25: 672869.861 ops/s
# Warmup Iteration  26: 694725.176 ops/s
# Warmup Iteration  27: 684707.003 ops/s
# Warmup Iteration  28: 652967.925 ops/s
# Warmup Iteration  29: 684327.152 ops/s
# Warmup Iteration  30: 674385.718 ops/s
Iteration   1: 664278.817 ops/s
Iteration   2: 672291.464 ops/s
Iteration   3: 667027.437 ops/s
Iteration   4: 661768.021 ops/s
Iteration   5: 702714.905 ops/s
Iteration   6: 695388.309 ops/s
Iteration   7: 651629.578 ops/s
Iteration   8: 685858.572 ops/s
Iteration   9: 665822.177 ops/s
Iteration  10: 679790.908 ops/s
Iteration  11: 698909.496 ops/s
Iteration  12: 649543.782 ops/s
Iteration  13: 682865.186 ops/s
Iteration  14: 707757.717 ops/s
Iteration  15: 649637.970 ops/s
Iteration  16: 629324.954 ops/s
Iteration  17: 683166.314 ops/s
Iteration  18: 664909.820 ops/s
Iteration  19: 705558.362 ops/s
Iteration  20: 661723.028 ops/s
Iteration  21: 664719.953 ops/s
Iteration  22: 690435.648 ops/s
Iteration  23: 667137.362 ops/s
Iteration  24: 668420.561 ops/s
Iteration  25: 654961.397 ops/s
Iteration  26: 687842.794 ops/s
Iteration  27: 680051.822 ops/s
Iteration  28: 660670.560 ops/s
Iteration  29: 668897.624 ops/s
Iteration  30: 688444.757 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccessCrash":
  673718.310 ±(99.9%) 12464.563 ops/s [Average]
  (min, avg, max) = (629324.954, 673718.310, 707757.717), stdev = 18656.373
  CI (99.9%): [661253.747, 686182.873] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccessCrash  thrpt   30  673718.310 ± 12464.563  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2042431.554 ops/s
# Warmup Iteration   2: 4529345.307 ops/s
# Warmup Iteration   3: 6517597.807 ops/s
# Warmup Iteration   4: 6469154.896 ops/s
# Warmup Iteration   5: 6725988.458 ops/s
# Warmup Iteration   6: 6429559.225 ops/s
# Warmup Iteration   7: 6646890.072 ops/s
# Warmup Iteration   8: 6446329.421 ops/s
# Warmup Iteration   9: 6562189.330 ops/s
# Warmup Iteration  10: 6646920.828 ops/s
# Warmup Iteration  11: 6284338.257 ops/s
# Warmup Iteration  12: 6396443.323 ops/s
# Warmup Iteration  13: 6827094.784 ops/s
# Warmup Iteration  14: 6489095.537 ops/s
# Warmup Iteration  15: 6463192.767 ops/s
# Warmup Iteration  16: 6694197.108 ops/s
# Warmup Iteration  17: 6486786.220 ops/s
# Warmup Iteration  18: 6683112.575 ops/s
# Warmup Iteration  19: 6444556.832 ops/s
# Warmup Iteration  20: 6615426.194 ops/s
# Warmup Iteration  21: 6399820.146 ops/s
# Warmup Iteration  22: 6417892.475 ops/s
# Warmup Iteration  23: 6690633.167 ops/s
# Warmup Iteration  24: 6186348.654 ops/s
# Warmup Iteration  25: 6475944.411 ops/s
# Warmup Iteration  26: 6469814.518 ops/s
# Warmup Iteration  27: 6781361.955 ops/s
# Warmup Iteration  28: 6530539.347 ops/s
# Warmup Iteration  29: 6414768.195 ops/s
# Warmup Iteration  30: 6675433.176 ops/s
Iteration   1: 6461165.535 ops/s
Iteration   2: 6839637.264 ops/s
Iteration   3: 6786934.473 ops/s
Iteration   4: 6506153.406 ops/s
Iteration   5: 6700701.011 ops/s
Iteration   6: 6403180.411 ops/s
Iteration   7: 6515747.662 ops/s
Iteration   8: 6657339.240 ops/s
Iteration   9: 6378061.747 ops/s
Iteration  10: 6783049.164 ops/s
Iteration  11: 6314034.544 ops/s
Iteration  12: 6558259.341 ops/s
Iteration  13: 6358099.577 ops/s
Iteration  14: 6600348.275 ops/s
Iteration  15: 6234143.559 ops/s
Iteration  16: 6269790.625 ops/s
Iteration  17: 6763981.783 ops/s
Iteration  18: 6381981.207 ops/s
Iteration  19: 6654597.341 ops/s
Iteration  20: 6464176.783 ops/s
Iteration  21: 6676501.365 ops/s
Iteration  22: 6473537.553 ops/s
Iteration  23: 6311018.046 ops/s
Iteration  24: 6554826.653 ops/s
Iteration  25: 6336572.966 ops/s
Iteration  26: 6547892.438 ops/s
Iteration  27: 6573773.331 ops/s
Iteration  28: 6368289.913 ops/s
Iteration  29: 6672166.326 ops/s
Iteration  30: 6721999.539 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_empty":
  6528932.036 ±(99.9%) 114093.737 ops/s [Average]
  (min, avg, max) = (6234143.559, 6528932.036, 6839637.264), stdev = 170770.148
  CI (99.9%): [6414838.299, 6643025.773] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
MaybeSwitchIfEmptyTest._Benchmark.benchmark_empty  thrpt   30  6528932.036 ± 114093.737  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilFirstMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilFirstMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1499007.616 ops/s
# Warmup Iteration   2: 4312442.714 ops/s
# Warmup Iteration   3: 5091141.781 ops/s
# Warmup Iteration   4: 5717313.222 ops/s
# Warmup Iteration   5: 5585176.392 ops/s
# Warmup Iteration   6: 5535245.539 ops/s
# Warmup Iteration   7: 5475462.976 ops/s
# Warmup Iteration   8: 5720586.764 ops/s
# Warmup Iteration   9: 5542355.872 ops/s
# Warmup Iteration  10: 5624427.722 ops/s
# Warmup Iteration  11: 5792856.040 ops/s
# Warmup Iteration  12: 5486230.777 ops/s
# Warmup Iteration  13: 5801724.593 ops/s
# Warmup Iteration  14: 5588360.275 ops/s
# Warmup Iteration  15: 5584171.229 ops/s
# Warmup Iteration  16: 5633971.462 ops/s
# Warmup Iteration  17: 5753140.512 ops/s
# Warmup Iteration  18: 5677202.143 ops/s
# Warmup Iteration  19: 5600658.322 ops/s
# Warmup Iteration  20: 5777717.871 ops/s
# Warmup Iteration  21: 5377068.091 ops/s
# Warmup Iteration  22: 5636601.898 ops/s
# Warmup Iteration  23: 5581668.959 ops/s
# Warmup Iteration  24: 5525983.998 ops/s
# Warmup Iteration  25: 5730290.728 ops/s
# Warmup Iteration  26: 5322802.245 ops/s
# Warmup Iteration  27: 5622918.037 ops/s
# Warmup Iteration  28: 5521050.449 ops/s
# Warmup Iteration  29: 5564987.157 ops/s
# Warmup Iteration  30: 5757371.794 ops/s
Iteration   1: 5371966.498 ops/s
Iteration   2: 5665614.555 ops/s
Iteration   3: 5469601.981 ops/s
Iteration   4: 5506434.809 ops/s
Iteration   5: 5730152.745 ops/s
Iteration   6: 5737006.258 ops/s
Iteration   7: 5698306.507 ops/s
Iteration   8: 5629462.006 ops/s
Iteration   9: 5718908.184 ops/s
Iteration  10: 5673343.287 ops/s
Iteration  11: 5530229.764 ops/s
Iteration  12: 5857515.859 ops/s
Iteration  13: 5604483.450 ops/s
Iteration  14: 5711695.237 ops/s
Iteration  15: 5639328.962 ops/s
Iteration  16: 5657222.436 ops/s
Iteration  17: 5675081.591 ops/s
Iteration  18: 5607939.821 ops/s
Iteration  19: 5748262.395 ops/s
Iteration  20: 5443881.933 ops/s
Iteration  21: 5759064.735 ops/s
Iteration  22: 5616586.522 ops/s
Iteration  23: 5592201.424 ops/s
Iteration  24: 5888498.252 ops/s
Iteration  25: 5382468.963 ops/s
Iteration  26: 5719332.898 ops/s
Iteration  27: 5727366.488 ops/s
Iteration  28: 5544241.738 ops/s
Iteration  29: 5772200.119 ops/s
Iteration  30: 5384216.855 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilFirstMaybe":
  5635420.542 ±(99.9%) 89181.815 ops/s [Average]
  (min, avg, max) = (5371966.498, 5635420.542, 5888498.252), stdev = 133483.152
  CI (99.9%): [5546238.728, 5724602.357] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilFirstMaybe  thrpt   30  5635420.542 ± 89181.815  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualTest._Benchmark.benchmark_predicateThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualTest._Benchmark.benchmark_predicateThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 172393.563 ops/s
# Warmup Iteration   2: 510532.649 ops/s
# Warmup Iteration   3: 544862.728 ops/s
# Warmup Iteration   4: 515994.193 ops/s
# Warmup Iteration   5: 582112.889 ops/s
# Warmup Iteration   6: 574733.113 ops/s
# Warmup Iteration   7: 593910.425 ops/s
# Warmup Iteration   8: 575179.559 ops/s
# Warmup Iteration   9: 564204.945 ops/s
# Warmup Iteration  10: 587872.733 ops/s
# Warmup Iteration  11: 561229.465 ops/s
# Warmup Iteration  12: 579464.594 ops/s
# Warmup Iteration  13: 584335.985 ops/s
# Warmup Iteration  14: 563975.041 ops/s
# Warmup Iteration  15: 603704.030 ops/s
# Warmup Iteration  16: 572976.070 ops/s
# Warmup Iteration  17: 557965.571 ops/s
# Warmup Iteration  18: 621773.344 ops/s
# Warmup Iteration  19: 617204.906 ops/s
# Warmup Iteration  20: 611691.041 ops/s
# Warmup Iteration  21: 611949.068 ops/s
# Warmup Iteration  22: 583376.062 ops/s
# Warmup Iteration  23: 630994.546 ops/s
# Warmup Iteration  24: 601003.205 ops/s
# Warmup Iteration  25: 586313.448 ops/s
# Warmup Iteration  26: 627317.157 ops/s
# Warmup Iteration  27: 592472.439 ops/s
# Warmup Iteration  28: 612028.172 ops/s
# Warmup Iteration  29: 617252.113 ops/s
# Warmup Iteration  30: 621680.882 ops/s
Iteration   1: 628472.189 ops/s
Iteration   2: 617417.520 ops/s
Iteration   3: 585139.074 ops/s
Iteration   4: 623166.631 ops/s
Iteration   5: 608349.649 ops/s
Iteration   6: 573043.046 ops/s
Iteration   7: 617842.180 ops/s
Iteration   8: 599329.712 ops/s
Iteration   9: 633891.726 ops/s
Iteration  10: 615165.357 ops/s
Iteration  11: 591692.061 ops/s
Iteration  12: 616528.511 ops/s
Iteration  13: 625786.866 ops/s
Iteration  14: 619241.190 ops/s
Iteration  15: 583604.569 ops/s
Iteration  16: 621056.726 ops/s
Iteration  17: 600358.907 ops/s
Iteration  18: 602226.587 ops/s
Iteration  19: 597656.920 ops/s
Iteration  20: 609055.547 ops/s
Iteration  21: 611332.560 ops/s
Iteration  22: 619781.154 ops/s
Iteration  23: 615022.428 ops/s
Iteration  24: 597909.162 ops/s
Iteration  25: 613967.647 ops/s
Iteration  26: 631205.340 ops/s
Iteration  27: 436126.099 ops/s
Iteration  28: 612568.674 ops/s
Iteration  29: 590269.461 ops/s
Iteration  30: 627132.042 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualTest._Benchmark.benchmark_predicateThrows":
  604144.651 ±(99.9%) 23472.423 ops/s [Average]
  (min, avg, max) = (436126.099, 604144.651, 633891.726), stdev = 35132.421
  CI (99.9%): [580672.228, 627617.074] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
MaybeEqualTest._Benchmark.benchmark_predicateThrows  thrpt   30  604144.651 ± 23472.423  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 299760.508 ops/s
# Warmup Iteration   2: 580173.026 ops/s
# Warmup Iteration   3: 734112.559 ops/s
# Warmup Iteration   4: 737705.091 ops/s
# Warmup Iteration   5: 693159.657 ops/s
# Warmup Iteration   6: 693193.279 ops/s
# Warmup Iteration   7: 736403.985 ops/s
# Warmup Iteration   8: 693801.393 ops/s
# Warmup Iteration   9: 683143.484 ops/s
# Warmup Iteration  10: 730024.291 ops/s
# Warmup Iteration  11: 672223.945 ops/s
# Warmup Iteration  12: 705024.867 ops/s
# Warmup Iteration  13: 737702.233 ops/s
# Warmup Iteration  14: 686395.724 ops/s
# Warmup Iteration  15: 722801.447 ops/s
# Warmup Iteration  16: 707658.789 ops/s
# Warmup Iteration  17: 724529.868 ops/s
# Warmup Iteration  18: 752057.917 ops/s
# Warmup Iteration  19: 747530.187 ops/s
# Warmup Iteration  20: 787884.444 ops/s
# Warmup Iteration  21: 714856.904 ops/s
# Warmup Iteration  22: 774793.492 ops/s
# Warmup Iteration  23: 769643.472 ops/s
# Warmup Iteration  24: 734684.234 ops/s
# Warmup Iteration  25: 729143.772 ops/s
# Warmup Iteration  26: 776364.060 ops/s
# Warmup Iteration  27: 731147.361 ops/s
# Warmup Iteration  28: 770667.956 ops/s
# Warmup Iteration  29: 781490.009 ops/s
# Warmup Iteration  30: 725435.070 ops/s
Iteration   1: 783287.070 ops/s
Iteration   2: 783200.891 ops/s
Iteration   3: 724722.059 ops/s
Iteration   4: 766063.017 ops/s
Iteration   5: 735727.607 ops/s
Iteration   6: 750317.479 ops/s
Iteration   7: 764951.330 ops/s
Iteration   8: 734779.983 ops/s
Iteration   9: 772782.933 ops/s
Iteration  10: 728943.253 ops/s
Iteration  11: 752615.654 ops/s
Iteration  12: 741013.480 ops/s
Iteration  13: 773415.138 ops/s
Iteration  14: 767779.574 ops/s
Iteration  15: 750960.568 ops/s
Iteration  16: 732982.811 ops/s
Iteration  17: 779111.846 ops/s
Iteration  18: 728896.212 ops/s
Iteration  19: 776595.078 ops/s
Iteration  20: 754383.941 ops/s
Iteration  21: 748444.763 ops/s
Iteration  22: 731367.486 ops/s
Iteration  23: 788113.678 ops/s
Iteration  24: 762953.508 ops/s
Iteration  25: 736588.816 ops/s
Iteration  26: 746362.706 ops/s
Iteration  27: 776127.864 ops/s
Iteration  28: 743629.280 ops/s
Iteration  29: 759676.985 ops/s
Iteration  30: 742978.441 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_error":
  754625.782 ±(99.9%) 12638.870 ops/s [Average]
  (min, avg, max) = (724722.059, 754625.782, 788113.678), stdev = 18917.267
  CI (99.9%): [741986.912, 767264.652] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_error  thrpt   30  754625.782 ± 12638.870  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValueNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValueNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 231866.198 ops/s
# Warmup Iteration   2: 527139.218 ops/s
# Warmup Iteration   3: 547832.529 ops/s
# Warmup Iteration   4: 530449.730 ops/s
# Warmup Iteration   5: 563558.126 ops/s
# Warmup Iteration   6: 547131.601 ops/s
# Warmup Iteration   7: 518173.704 ops/s
# Warmup Iteration   8: 554326.222 ops/s
# Warmup Iteration   9: 532259.686 ops/s
# Warmup Iteration  10: 545752.045 ops/s
# Warmup Iteration  11: 565892.706 ops/s
# Warmup Iteration  12: 545361.308 ops/s
# Warmup Iteration  13: 572140.364 ops/s
# Warmup Iteration  14: 549472.181 ops/s
# Warmup Iteration  15: 543798.093 ops/s
# Warmup Iteration  16: 572043.887 ops/s
# Warmup Iteration  17: 577949.314 ops/s
# Warmup Iteration  18: 595870.743 ops/s
# Warmup Iteration  19: 560506.819 ops/s
# Warmup Iteration  20: 573339.579 ops/s
# Warmup Iteration  21: 588182.388 ops/s
# Warmup Iteration  22: 566661.786 ops/s
# Warmup Iteration  23: 587039.447 ops/s
# Warmup Iteration  24: 573117.118 ops/s
# Warmup Iteration  25: 558339.821 ops/s
# Warmup Iteration  26: 573750.842 ops/s
# Warmup Iteration  27: 573145.914 ops/s
# Warmup Iteration  28: 580459.961 ops/s
# Warmup Iteration  29: 594931.795 ops/s
# Warmup Iteration  30: 538602.299 ops/s
Iteration   1: 576985.867 ops/s
Iteration   2: 569779.008 ops/s
Iteration   3: 581556.039 ops/s
Iteration   4: 600579.130 ops/s
Iteration   5: 584529.727 ops/s
Iteration   6: 581654.811 ops/s
Iteration   7: 580509.116 ops/s
Iteration   8: 603362.384 ops/s
Iteration   9: 552890.905 ops/s
Iteration  10: 607754.104 ops/s
Iteration  11: 587613.227 ops/s
Iteration  12: 570747.888 ops/s
Iteration  13: 601393.679 ops/s
Iteration  14: 594364.766 ops/s
Iteration  15: 560414.409 ops/s
Iteration  16: 591363.036 ops/s
Iteration  17: 569434.262 ops/s
Iteration  18: 576032.883 ops/s
Iteration  19: 568094.585 ops/s
Iteration  20: 586717.476 ops/s
Iteration  21: 558350.798 ops/s
Iteration  22: 478774.348 ops/s
Iteration  23: 591241.817 ops/s
Iteration  24: 559152.228 ops/s
Iteration  25: 597800.518 ops/s
Iteration  26: 540690.067 ops/s
Iteration  27: 579940.821 ops/s
Iteration  28: 589019.020 ops/s
Iteration  29: 563638.661 ops/s
Iteration  30: 608240.377 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValueNull":
  577087.532 ±(99.9%) 16773.666 ops/s [Average]
  (min, avg, max) = (478774.348, 577087.532, 608240.377), stdev = 25106.035
  CI (99.9%): [560313.866, 593861.198] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValueNull  thrpt   30  577087.532 ± 16773.666  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValueErrorThrown$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValueErrorThrown

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 169578.684 ops/s
# Warmup Iteration   2: 474728.487 ops/s
# Warmup Iteration   3: 537729.288 ops/s
# Warmup Iteration   4: 528274.501 ops/s
# Warmup Iteration   5: 566717.214 ops/s
# Warmup Iteration   6: 554431.271 ops/s
# Warmup Iteration   7: 528626.482 ops/s
# Warmup Iteration   8: 584660.180 ops/s
# Warmup Iteration   9: 539831.918 ops/s
# Warmup Iteration  10: 537281.580 ops/s
# Warmup Iteration  11: 536614.066 ops/s
# Warmup Iteration  12: 566833.546 ops/s
# Warmup Iteration  13: 549780.467 ops/s
# Warmup Iteration  14: 571960.537 ops/s
# Warmup Iteration  15: 550486.827 ops/s
# Warmup Iteration  16: 542246.510 ops/s
# Warmup Iteration  17: 587335.448 ops/s
# Warmup Iteration  18: 584101.766 ops/s
# Warmup Iteration  19: 575618.739 ops/s
# Warmup Iteration  20: 561571.734 ops/s
# Warmup Iteration  21: 587995.707 ops/s
# Warmup Iteration  22: 561377.915 ops/s
# Warmup Iteration  23: 598210.568 ops/s
# Warmup Iteration  24: 595740.147 ops/s
# Warmup Iteration  25: 565406.317 ops/s
# Warmup Iteration  26: 609872.426 ops/s
# Warmup Iteration  27: 570820.055 ops/s
# Warmup Iteration  28: 577969.874 ops/s
# Warmup Iteration  29: 601313.470 ops/s
# Warmup Iteration  30: 569692.682 ops/s
Iteration   1: 592347.182 ops/s
Iteration   2: 563213.200 ops/s
Iteration   3: 583946.771 ops/s
Iteration   4: 578049.965 ops/s
Iteration   5: 568937.785 ops/s
Iteration   6: 575580.486 ops/s
Iteration   7: 599106.459 ops/s
Iteration   8: 548012.903 ops/s
Iteration   9: 579194.559 ops/s
Iteration  10: 573978.261 ops/s
Iteration  11: 584222.567 ops/s
Iteration  12: 576931.905 ops/s
Iteration  13: 557453.348 ops/s
Iteration  14: 593651.673 ops/s
Iteration  15: 595330.111 ops/s
Iteration  16: 530855.273 ops/s
Iteration  17: 600107.126 ops/s
Iteration  18: 573520.545 ops/s
Iteration  19: 595679.767 ops/s
Iteration  20: 599150.630 ops/s
Iteration  21: 574225.850 ops/s
Iteration  22: 604128.031 ops/s
Iteration  23: 589782.966 ops/s
Iteration  24: 574987.815 ops/s
Iteration  25: 586008.784 ops/s
Iteration  26: 586520.429 ops/s
Iteration  27: 595910.350 ops/s
Iteration  28: 580254.666 ops/s
Iteration  29: 562685.934 ops/s
Iteration  30: 587862.641 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValueErrorThrown":
  580387.933 ±(99.9%) 11011.098 ops/s [Average]
  (min, avg, max) = (530855.273, 580387.933, 604128.031), stdev = 16480.894
  CI (99.9%): [569376.835, 591399.030] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValueErrorThrown  thrpt   30  580387.933 ± 11011.098  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValueNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValueNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 140465.779 ops/s
# Warmup Iteration   2: 477585.275 ops/s
# Warmup Iteration   3: 573354.361 ops/s
# Warmup Iteration   4: 590893.568 ops/s
# Warmup Iteration   5: 534223.159 ops/s
# Warmup Iteration   6: 529044.937 ops/s
# Warmup Iteration   7: 593745.374 ops/s
# Warmup Iteration   8: 511617.724 ops/s
# Warmup Iteration   9: 597330.059 ops/s
# Warmup Iteration  10: 586475.516 ops/s
# Warmup Iteration  11: 586319.117 ops/s
# Warmup Iteration  12: 583576.809 ops/s
# Warmup Iteration  13: 592430.215 ops/s
# Warmup Iteration  14: 568825.823 ops/s
# Warmup Iteration  15: 593477.991 ops/s
# Warmup Iteration  16: 582159.589 ops/s
# Warmup Iteration  17: 604881.675 ops/s
# Warmup Iteration  18: 629551.304 ops/s
# Warmup Iteration  19: 609747.950 ops/s
# Warmup Iteration  20: 630976.800 ops/s
# Warmup Iteration  21: 598741.981 ops/s
# Warmup Iteration  22: 623144.294 ops/s
# Warmup Iteration  23: 607291.394 ops/s
# Warmup Iteration  24: 593666.088 ops/s
# Warmup Iteration  25: 626934.957 ops/s
# Warmup Iteration  26: 618817.765 ops/s
# Warmup Iteration  27: 631056.618 ops/s
# Warmup Iteration  28: 606798.410 ops/s
# Warmup Iteration  29: 614797.298 ops/s
# Warmup Iteration  30: 629540.880 ops/s
Iteration   1: 615884.527 ops/s
Iteration   2: 624937.184 ops/s
Iteration   3: 609668.230 ops/s
Iteration   4: 606045.568 ops/s
Iteration   5: 631990.614 ops/s
Iteration   6: 602593.497 ops/s
Iteration   7: 635384.879 ops/s
Iteration   8: 599291.319 ops/s
Iteration   9: 614970.668 ops/s
Iteration  10: 635711.459 ops/s
Iteration  11: 601112.366 ops/s
Iteration  12: 624186.635 ops/s
Iteration  13: 619984.357 ops/s
Iteration  14: 604103.522 ops/s
Iteration  15: 623361.539 ops/s
Iteration  16: 611822.141 ops/s
Iteration  17: 418142.985 ops/s
Iteration  18: 624724.115 ops/s
Iteration  19: 612777.291 ops/s
Iteration  20: 620253.903 ops/s
Iteration  21: 631009.004 ops/s
Iteration  22: 588281.191 ops/s
Iteration  23: 638600.667 ops/s
Iteration  24: 595993.666 ops/s
Iteration  25: 626503.000 ops/s
Iteration  26: 608742.248 ops/s
Iteration  27: 616315.305 ops/s
Iteration  28: 603668.387 ops/s
Iteration  29: 624918.248 ops/s
Iteration  30: 587783.986 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValueNull":
  608625.417 ±(99.9%) 25706.620 ops/s [Average]
  (min, avg, max) = (418142.985, 608625.417, 638600.667), stdev = 38476.461
  CI (99.9%): [582918.797, 634332.037] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleValueNull  thrpt   30  608625.417 ± 25706.620  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValueErrorThrown$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValueErrorThrown

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 279158.019 ops/s
# Warmup Iteration   2: 499663.647 ops/s
# Warmup Iteration   3: 593212.195 ops/s
# Warmup Iteration   4: 567849.275 ops/s
# Warmup Iteration   5: 580033.526 ops/s
# Warmup Iteration   6: 599766.174 ops/s
# Warmup Iteration   7: 572611.116 ops/s
# Warmup Iteration   8: 574058.967 ops/s
# Warmup Iteration   9: 544535.587 ops/s
# Warmup Iteration  10: 578548.143 ops/s
# Warmup Iteration  11: 547327.072 ops/s
# Warmup Iteration  12: 592347.153 ops/s
# Warmup Iteration  13: 591500.865 ops/s
# Warmup Iteration  14: 586348.504 ops/s
# Warmup Iteration  15: 601869.119 ops/s
# Warmup Iteration  16: 608356.536 ops/s
# Warmup Iteration  17: 596068.721 ops/s
# Warmup Iteration  18: 653979.297 ops/s
# Warmup Iteration  19: 609380.531 ops/s
# Warmup Iteration  20: 639644.538 ops/s
# Warmup Iteration  21: 607628.821 ops/s
# Warmup Iteration  22: 621029.331 ops/s
# Warmup Iteration  23: 649808.266 ops/s
# Warmup Iteration  24: 625778.229 ops/s
# Warmup Iteration  25: 600398.030 ops/s
# Warmup Iteration  26: 634711.211 ops/s
# Warmup Iteration  27: 613211.828 ops/s
# Warmup Iteration  28: 618599.038 ops/s
# Warmup Iteration  29: 636567.147 ops/s
# Warmup Iteration  30: 589227.924 ops/s
Iteration   1: 625585.933 ops/s
Iteration   2: 618996.211 ops/s
Iteration   3: 647600.136 ops/s
Iteration   4: 617568.145 ops/s
Iteration   5: 613439.116 ops/s
Iteration   6: 624331.367 ops/s
Iteration   7: 614970.570 ops/s
Iteration   8: 646435.331 ops/s
Iteration   9: 648199.696 ops/s
Iteration  10: 588897.461 ops/s
Iteration  11: 629374.880 ops/s
Iteration  12: 630008.140 ops/s
Iteration  13: 617388.308 ops/s
Iteration  14: 626681.456 ops/s
Iteration  15: 597492.637 ops/s
Iteration  16: 624966.359 ops/s
Iteration  17: 635649.288 ops/s
Iteration  18: 605328.912 ops/s
Iteration  19: 646316.174 ops/s
Iteration  20: 604882.854 ops/s
Iteration  21: 620594.581 ops/s
Iteration  22: 638991.480 ops/s
Iteration  23: 601549.926 ops/s
Iteration  24: 624131.887 ops/s
Iteration  25: 615185.985 ops/s
Iteration  26: 630744.266 ops/s
Iteration  27: 615248.155 ops/s
Iteration  28: 625326.545 ops/s
Iteration  29: 641785.189 ops/s
Iteration  30: 608370.450 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValueErrorThrown":
  622868.048 ±(99.9%) 10209.255 ops/s [Average]
  (min, avg, max) = (588897.461, 622868.048, 648199.696), stdev = 15280.734
  CI (99.9%): [612658.792, 633077.303] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score       Error  Units
MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValueErrorThrown  thrpt   30  622868.048 ± 10209.255  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18303.242 ops/s
# Warmup Iteration   2: 17764.211 ops/s
# Warmup Iteration   3: 24951.943 ops/s
# Warmup Iteration   4: 24527.202 ops/s
# Warmup Iteration   5: 21328.753 ops/s
# Warmup Iteration   6: 21460.204 ops/s
# Warmup Iteration   7: 21642.928 ops/s
# Warmup Iteration   8: 21550.947 ops/s
# Warmup Iteration   9: 21464.930 ops/s
# Warmup Iteration  10: 21497.944 ops/s
# Warmup Iteration  11: 21441.056 ops/s
# Warmup Iteration  12: 21141.759 ops/s
# Warmup Iteration  13: 25025.387 ops/s
# Warmup Iteration  14: 20944.230 ops/s
# Warmup Iteration  15: 21672.221 ops/s
# Warmup Iteration  16: 21377.333 ops/s
# Warmup Iteration  17: 21235.747 ops/s
# Warmup Iteration  18: 21305.130 ops/s
# Warmup Iteration  19: 22250.049 ops/s
# Warmup Iteration  20: 21925.459 ops/s
# Warmup Iteration  21: 21697.169 ops/s
# Warmup Iteration  22: 21928.017 ops/s
# Warmup Iteration  23: 21311.380 ops/s
# Warmup Iteration  24: 21634.688 ops/s
# Warmup Iteration  25: 20592.113 ops/s
# Warmup Iteration  26: 21893.703 ops/s
# Warmup Iteration  27: 21375.645 ops/s
# Warmup Iteration  28: 22088.747 ops/s
# Warmup Iteration  29: 21311.248 ops/s
# Warmup Iteration  30: 21137.003 ops/s
Iteration   1: 21769.315 ops/s
Iteration   2: 21666.962 ops/s
Iteration   3: 21827.279 ops/s
Iteration   4: 21255.245 ops/s
Iteration   5: 22445.012 ops/s
Iteration   6: 22206.954 ops/s
Iteration   7: 21858.214 ops/s
Iteration   8: 21340.178 ops/s
Iteration   9: 21117.250 ops/s
Iteration  10: 21925.935 ops/s
Iteration  11: 21681.887 ops/s
Iteration  12: 20386.044 ops/s
Iteration  13: 20886.568 ops/s
Iteration  14: 21234.291 ops/s
Iteration  15: 21978.733 ops/s
Iteration  16: 21150.208 ops/s
Iteration  17: 21296.358 ops/s
Iteration  18: 21472.305 ops/s
Iteration  19: 22190.289 ops/s
Iteration  20: 21215.669 ops/s
Iteration  21: 21952.275 ops/s
Iteration  22: 21848.166 ops/s
Iteration  23: 21605.358 ops/s
Iteration  24: 21758.813 ops/s
Iteration  25: 21182.133 ops/s
Iteration  26: 21137.017 ops/s
Iteration  27: 20890.360 ops/s
Iteration  28: 21664.452 ops/s
Iteration  29: 21143.182 ops/s
Iteration  30: 20756.056 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingFirst":
  21494.750 ±(99.9%) 317.019 ops/s [Average]
  (min, avg, max) = (20386.044, 21494.750, 22445.012), stdev = 474.499
  CI (99.9%): [21177.731, 21811.769] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt      Score     Error  Units
ObservableBlockingTest._Benchmark.benchmark_blockingFirst  thrpt   30  21494.750 ± 317.019  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 908801.254 ops/s
# Warmup Iteration   2: 3710501.925 ops/s
# Warmup Iteration   3: 4029539.543 ops/s
# Warmup Iteration   4: 4731246.149 ops/s
# Warmup Iteration   5: 4868586.709 ops/s
# Warmup Iteration   6: 4708941.225 ops/s
# Warmup Iteration   7: 4926705.389 ops/s
# Warmup Iteration   8: 4882340.827 ops/s
# Warmup Iteration   9: 4697790.953 ops/s
# Warmup Iteration  10: 4844988.611 ops/s
# Warmup Iteration  11: 4863902.017 ops/s
# Warmup Iteration  12: 4621406.617 ops/s
# Warmup Iteration  13: 4897914.999 ops/s
# Warmup Iteration  14: 4790973.166 ops/s
# Warmup Iteration  15: 4745890.487 ops/s
# Warmup Iteration  16: 4948634.514 ops/s
# Warmup Iteration  17: 4706464.823 ops/s
# Warmup Iteration  18: 4633411.360 ops/s
# Warmup Iteration  19: 4939961.224 ops/s
# Warmup Iteration  20: 4685316.689 ops/s
# Warmup Iteration  21: 4784849.295 ops/s
# Warmup Iteration  22: 4848878.427 ops/s
# Warmup Iteration  23: 4655076.228 ops/s
# Warmup Iteration  24: 4893664.001 ops/s
# Warmup Iteration  25: 4910321.588 ops/s
# Warmup Iteration  26: 4526473.667 ops/s
# Warmup Iteration  27: 4807064.160 ops/s
# Warmup Iteration  28: 4750602.337 ops/s
# Warmup Iteration  29: 4641596.825 ops/s
# Warmup Iteration  30: 4968461.578 ops/s
Iteration   1: 4608378.993 ops/s
Iteration   2: 4814965.457 ops/s
Iteration   3: 4743652.958 ops/s
Iteration   4: 4982777.925 ops/s
Iteration   5: 4659599.103 ops/s
Iteration   6: 4867514.335 ops/s
Iteration   7: 5002964.133 ops/s
Iteration   8: 4655486.429 ops/s
Iteration   9: 4876412.037 ops/s
Iteration  10: 4718635.368 ops/s
Iteration  11: 4894658.210 ops/s
Iteration  12: 4754954.592 ops/s
Iteration  13: 4877082.402 ops/s
Iteration  14: 4601565.968 ops/s
Iteration  15: 4640892.834 ops/s
Iteration  16: 4984893.091 ops/s
Iteration  17: 4700875.113 ops/s
Iteration  18: 4767815.124 ops/s
Iteration  19: 4878305.250 ops/s
Iteration  20: 4731064.092 ops/s
Iteration  21: 4860332.254 ops/s
Iteration  22: 4613671.753 ops/s
Iteration  23: 4797324.343 ops/s
Iteration  24: 4712857.630 ops/s
Iteration  25: 4985302.719 ops/s
Iteration  26: 4964278.453 ops/s
Iteration  27: 4720849.923 ops/s
Iteration  28: 4903405.110 ops/s
Iteration  29: 4841480.152 ops/s
Iteration  30: 4804550.733 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_isDisposed":
  4798884.883 ±(99.9%) 81904.963 ops/s [Average]
  (min, avg, max) = (4601565.968, 4798884.883, 5002964.133), stdev = 122591.502
  CI (99.9%): [4716979.920, 4880789.846] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
MaybeDelayTest._Benchmark.benchmark_isDisposed  thrpt   30  4798884.883 ± 81904.963  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeOnSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeOnSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20243.358 ops/s
# Warmup Iteration   2: 29260.681 ops/s
# Warmup Iteration   3: 31534.258 ops/s
# Warmup Iteration   4: 19463.748 ops/s
# Warmup Iteration   5: 21244.922 ops/s
# Warmup Iteration   6: 20150.943 ops/s
# Warmup Iteration   7: 20079.168 ops/s
# Warmup Iteration   8: 20633.842 ops/s
# Warmup Iteration   9: 20376.250 ops/s
# Warmup Iteration  10: 28559.564 ops/s
# Warmup Iteration  11: 20179.615 ops/s
# Warmup Iteration  12: 20324.209 ops/s
# Warmup Iteration  13: 20148.873 ops/s
# Warmup Iteration  14: 20125.299 ops/s
# Warmup Iteration  15: 21581.311 ops/s
# Warmup Iteration  16: 20395.936 ops/s
# Warmup Iteration  17: 20508.477 ops/s
# Warmup Iteration  18: 20306.520 ops/s
# Warmup Iteration  19: 20673.837 ops/s
# Warmup Iteration  20: 20614.248 ops/s
# Warmup Iteration  21: 19981.187 ops/s
# Warmup Iteration  22: 20816.839 ops/s
# Warmup Iteration  23: 20157.554 ops/s
# Warmup Iteration  24: 20645.349 ops/s
# Warmup Iteration  25: 20642.945 ops/s
# Warmup Iteration  26: 20915.231 ops/s
# Warmup Iteration  27: 19948.558 ops/s
# Warmup Iteration  28: 20163.416 ops/s
# Warmup Iteration  29: 19732.970 ops/s
# Warmup Iteration  30: 20751.688 ops/s
Iteration   1: 20157.025 ops/s
Iteration   2: 20666.711 ops/s
Iteration   3: 20012.210 ops/s
Iteration   4: 20492.352 ops/s
Iteration   5: 20645.684 ops/s
Iteration   6: 20248.377 ops/s
Iteration   7: 25717.073 ops/s
Iteration   8: 20319.547 ops/s
Iteration   9: 20547.341 ops/s
Iteration  10: 20435.347 ops/s
Iteration  11: 21030.584 ops/s
Iteration  12: 19974.281 ops/s
Iteration  13: 20236.312 ops/s
Iteration  14: 20249.974 ops/s
Iteration  15: 20101.588 ops/s
Iteration  16: 20189.026 ops/s
Iteration  17: 20290.962 ops/s
Iteration  18: 20817.536 ops/s
Iteration  19: 20342.963 ops/s
Iteration  20: 20310.738 ops/s
Iteration  21: 19840.964 ops/s
Iteration  22: 19923.083 ops/s
Iteration  23: 20376.594 ops/s
Iteration  24: 21206.274 ops/s
Iteration  25: 20111.820 ops/s
Iteration  26: 20362.127 ops/s
Iteration  27: 20588.639 ops/s
Iteration  28: 20372.698 ops/s
Iteration  29: 20741.930 ops/s
Iteration  30: 19616.222 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_subscribeOnSuccess":
  20530.866 ±(99.9%) 692.560 ops/s [Average]
  (min, avg, max) = (19616.222, 20530.866, 25717.073), stdev = 1036.592
  CI (99.9%): [19838.306, 21223.427] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt      Score     Error  Units
MaybeTest._Benchmark.benchmark_subscribeOnSuccess  thrpt   30  20530.866 ± 692.560  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_comeAndGo$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_comeAndGo

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 274324.807 ops/s
# Warmup Iteration   2: 610222.964 ops/s
# Warmup Iteration   3: 858220.803 ops/s
# Warmup Iteration   4: 909336.433 ops/s
# Warmup Iteration   5: 1009041.262 ops/s
# Warmup Iteration   6: 1010438.114 ops/s
# Warmup Iteration   7: 1001657.137 ops/s
# Warmup Iteration   8: 966810.127 ops/s
# Warmup Iteration   9: 984285.020 ops/s
# Warmup Iteration  10: 979203.489 ops/s
# Warmup Iteration  11: 946552.775 ops/s
# Warmup Iteration  12: 1054293.965 ops/s
# Warmup Iteration  13: 1002120.953 ops/s
# Warmup Iteration  14: 1018329.273 ops/s
# Warmup Iteration  15: 1009367.741 ops/s
# Warmup Iteration  16: 1006980.185 ops/s
# Warmup Iteration  17: 1047200.435 ops/s
# Warmup Iteration  18: 995623.293 ops/s
# Warmup Iteration  19: 1059554.578 ops/s
# Warmup Iteration  20: 987268.203 ops/s
# Warmup Iteration  21: 993602.659 ops/s
# Warmup Iteration  22: 1060072.090 ops/s
# Warmup Iteration  23: 996959.405 ops/s
# Warmup Iteration  24: 1026084.350 ops/s
# Warmup Iteration  25: 1002608.714 ops/s
# Warmup Iteration  26: 1046889.405 ops/s
# Warmup Iteration  27: 1044084.287 ops/s
# Warmup Iteration  28: 1013068.355 ops/s
# Warmup Iteration  29: 1050068.363 ops/s
# Warmup Iteration  30: 1030789.574 ops/s
Iteration   1: 1001598.596 ops/s
Iteration   2: 1058768.095 ops/s
Iteration   3: 965992.096 ops/s
Iteration   4: 1062747.988 ops/s
Iteration   5: 1031928.604 ops/s
Iteration   6: 1010647.747 ops/s
Iteration   7: 1032802.748 ops/s
Iteration   8: 1008531.131 ops/s
Iteration   9: 1022349.352 ops/s
Iteration  10: 1033102.839 ops/s
Iteration  11: 990369.025 ops/s
Iteration  12: 1032239.435 ops/s
Iteration  13: 995012.662 ops/s
Iteration  14: 1043328.788 ops/s
Iteration  15: 1001917.265 ops/s
Iteration  16: 1000261.073 ops/s
Iteration  17: 1031803.087 ops/s
Iteration  18: 1016098.839 ops/s
Iteration  19: 1036672.114 ops/s
Iteration  20: 985553.843 ops/s
Iteration  21: 1003341.594 ops/s
Iteration  22: 1037635.750 ops/s
Iteration  23: 991725.504 ops/s
Iteration  24: 1028816.099 ops/s
Iteration  25: 980686.947 ops/s
Iteration  26: 1026200.520 ops/s
Iteration  27: 1007118.340 ops/s
Iteration  28: 1041618.599 ops/s
Iteration  29: 1020372.684 ops/s
Iteration  30: 998179.624 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_comeAndGo":
  1016580.700 ±(99.9%) 15510.037 ops/s [Average]
  (min, avg, max) = (965992.096, 1016580.700, 1062747.988), stdev = 23214.695
  CI (99.9%): [1001070.663, 1032090.736] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ObservableRefCountTest._Benchmark.benchmark_comeAndGo  thrpt   30  1016580.700 ± 15510.037  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_fromCallable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_fromCallable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2535475.457 ops/s
# Warmup Iteration   2: 6159108.127 ops/s
# Warmup Iteration   3: 8839036.717 ops/s
# Warmup Iteration   4: 8388498.624 ops/s
# Warmup Iteration   5: 8714057.517 ops/s
# Warmup Iteration   6: 8487553.539 ops/s
# Warmup Iteration   7: 8351731.989 ops/s
# Warmup Iteration   8: 8596423.193 ops/s
# Warmup Iteration   9: 8591553.514 ops/s
# Warmup Iteration  10: 8759133.428 ops/s
# Warmup Iteration  11: 8675428.774 ops/s
# Warmup Iteration  12: 8599738.585 ops/s
# Warmup Iteration  13: 8897252.733 ops/s
# Warmup Iteration  14: 8516435.986 ops/s
# Warmup Iteration  15: 8541851.297 ops/s
# Warmup Iteration  16: 8581472.049 ops/s
# Warmup Iteration  17: 8208149.465 ops/s
# Warmup Iteration  18: 8884478.858 ops/s
# Warmup Iteration  19: 8842905.862 ops/s
# Warmup Iteration  20: 8352467.280 ops/s
# Warmup Iteration  21: 8361824.376 ops/s
# Warmup Iteration  22: 8855654.699 ops/s
# Warmup Iteration  23: 8332527.724 ops/s
# Warmup Iteration  24: 8619214.889 ops/s
# Warmup Iteration  25: 8654764.526 ops/s
# Warmup Iteration  26: 8283920.258 ops/s
# Warmup Iteration  27: 8457642.884 ops/s
# Warmup Iteration  28: 8785463.774 ops/s
# Warmup Iteration  29: 8351453.907 ops/s
# Warmup Iteration  30: 8609883.346 ops/s
Iteration   1: 8459255.049 ops/s
Iteration   2: 7165150.234 ops/s
Iteration   3: 8850591.400 ops/s
Iteration   4: 8252767.435 ops/s
Iteration   5: 8801853.332 ops/s
Iteration   6: 8367475.422 ops/s
Iteration   7: 8716897.669 ops/s
Iteration   8: 8379303.962 ops/s
Iteration   9: 8600967.688 ops/s
Iteration  10: 8719492.296 ops/s
Iteration  11: 8610180.806 ops/s
Iteration  12: 8789921.739 ops/s
Iteration  13: 8321697.294 ops/s
Iteration  14: 8548864.351 ops/s
Iteration  15: 8852947.334 ops/s
Iteration  16: 8598240.638 ops/s
Iteration  17: 8347277.368 ops/s
Iteration  18: 8566496.074 ops/s
Iteration  19: 8388918.623 ops/s
Iteration  20: 8839559.777 ops/s
Iteration  21: 8519633.206 ops/s
Iteration  22: 8627524.569 ops/s
Iteration  23: 8527525.461 ops/s
Iteration  24: 8724416.040 ops/s
Iteration  25: 8621067.039 ops/s
Iteration  26: 8439746.188 ops/s
Iteration  27: 8900997.858 ops/s
Iteration  28: 9049483.554 ops/s
Iteration  29: 8418375.242 ops/s
Iteration  30: 8600154.804 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_fromCallable":
  8553559.415 ±(99.9%) 218284.319 ops/s [Average]
  (min, avg, max) = (7165150.234, 8553559.415, 9049483.554), stdev = 326717.717
  CI (99.9%): [8335275.096, 8771843.734] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
MaybeFromCallableTest._Benchmark.benchmark_fromCallable  thrpt   30  8553559.415 ± 218284.319  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_fromCallableInvokesLazy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_fromCallableInvokesLazy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4075582.937 ops/s
# Warmup Iteration   2: 8015259.766 ops/s
# Warmup Iteration   3: 10904749.744 ops/s
# Warmup Iteration   4: 11285676.312 ops/s
# Warmup Iteration   5: 11306005.567 ops/s
# Warmup Iteration   6: 10790144.225 ops/s
# Warmup Iteration   7: 11422326.685 ops/s
# Warmup Iteration   8: 11075726.738 ops/s
# Warmup Iteration   9: 11634472.503 ops/s
# Warmup Iteration  10: 10884120.264 ops/s
# Warmup Iteration  11: 11040562.284 ops/s
# Warmup Iteration  12: 11810265.851 ops/s
# Warmup Iteration  13: 11086302.310 ops/s
# Warmup Iteration  14: 11614469.750 ops/s
# Warmup Iteration  15: 11162916.826 ops/s
# Warmup Iteration  16: 11377349.784 ops/s
# Warmup Iteration  17: 11487556.255 ops/s
# Warmup Iteration  18: 10922552.566 ops/s
# Warmup Iteration  19: 11541840.230 ops/s
# Warmup Iteration  20: 11740023.794 ops/s
# Warmup Iteration  21: 11076812.204 ops/s
# Warmup Iteration  22: 11481704.173 ops/s
# Warmup Iteration  23: 10988884.091 ops/s
# Warmup Iteration  24: 10790407.119 ops/s
# Warmup Iteration  25: 11219438.562 ops/s
# Warmup Iteration  26: 11274162.528 ops/s
# Warmup Iteration  27: 11315484.832 ops/s
# Warmup Iteration  28: 10951590.267 ops/s
# Warmup Iteration  29: 11283403.684 ops/s
# Warmup Iteration  30: 11491975.025 ops/s
Iteration   1: 11410615.173 ops/s
Iteration   2: 11123722.509 ops/s
Iteration   3: 11518281.198 ops/s
Iteration   4: 10880318.322 ops/s
Iteration   5: 11370282.637 ops/s
Iteration   6: 10814904.749 ops/s
Iteration   7: 11687253.462 ops/s
Iteration   8: 11151292.171 ops/s
Iteration   9: 11077084.606 ops/s
Iteration  10: 11728734.554 ops/s
Iteration  11: 10875140.856 ops/s
Iteration  12: 11590132.130 ops/s
Iteration  13: 11131610.035 ops/s
Iteration  14: 10793994.961 ops/s
Iteration  15: 11591928.502 ops/s
Iteration  16: 11182437.923 ops/s
Iteration  17: 11219842.494 ops/s
Iteration  18: 11471933.580 ops/s
Iteration  19: 11104775.791 ops/s
Iteration  20: 11022114.991 ops/s
Iteration  21: 11429802.639 ops/s
Iteration  22: 11477806.776 ops/s
Iteration  23: 11304217.315 ops/s
Iteration  24: 10868219.784 ops/s
Iteration  25: 11213712.301 ops/s
Iteration  26: 11148872.209 ops/s
Iteration  27: 11131071.179 ops/s
Iteration  28: 11567876.997 ops/s
Iteration  29: 10703876.620 ops/s
Iteration  30: 11535926.850 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_fromCallableInvokesLazy":
  11237592.777 ±(99.9%) 191078.953 ops/s [Average]
  (min, avg, max) = (10703876.620, 11237592.777, 11728734.554), stdev = 285998.003
  CI (99.9%): [11046513.824, 11428671.730] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
MaybeFromCallableTest._Benchmark.benchmark_fromCallableInvokesLazy  thrpt   30  11237592.777 ± 191078.953  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_schedule$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_schedule

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24236875.724 ops/s
# Warmup Iteration   2: 36642257.122 ops/s
# Warmup Iteration   3: 43386873.454 ops/s
# Warmup Iteration   4: 40476684.268 ops/s
# Warmup Iteration   5: 41774689.452 ops/s
# Warmup Iteration   6: 40822504.108 ops/s
# Warmup Iteration   7: 42792366.011 ops/s
# Warmup Iteration   8: 41827956.981 ops/s
# Warmup Iteration   9: 41929143.084 ops/s
# Warmup Iteration  10: 42819280.269 ops/s
# Warmup Iteration  11: 40679537.127 ops/s
# Warmup Iteration  12: 42645018.999 ops/s
# Warmup Iteration  13: 40537886.179 ops/s
# Warmup Iteration  14: 43857869.423 ops/s
# Warmup Iteration  15: 42321029.655 ops/s
# Warmup Iteration  16: 41107579.850 ops/s
# Warmup Iteration  17: 43430784.994 ops/s
# Warmup Iteration  18: 41079574.557 ops/s
# Warmup Iteration  19: 42259638.849 ops/s
# Warmup Iteration  20: 42267906.836 ops/s
# Warmup Iteration  21: 41786989.898 ops/s
# Warmup Iteration  22: 42923220.932 ops/s
# Warmup Iteration  23: 43567267.778 ops/s
# Warmup Iteration  24: 41596285.746 ops/s
# Warmup Iteration  25: 40059710.878 ops/s
# Warmup Iteration  26: 42785187.564 ops/s
# Warmup Iteration  27: 34111263.047 ops/s
# Warmup Iteration  28: 41749622.849 ops/s
# Warmup Iteration  29: 43610251.637 ops/s
# Warmup Iteration  30: 41626266.816 ops/s
Iteration   1: 41255822.163 ops/s
Iteration   2: 42128807.102 ops/s
Iteration   3: 43370300.666 ops/s
Iteration   4: 42552373.163 ops/s
Iteration   5: 39743372.543 ops/s
Iteration   6: 42625271.698 ops/s
Iteration   7: 41313609.717 ops/s
Iteration   8: 42920910.824 ops/s
Iteration   9: 41648233.601 ops/s
Iteration  10: 41610046.387 ops/s
Iteration  11: 39746745.572 ops/s
Iteration  12: 41216967.606 ops/s
Iteration  13: 42902296.971 ops/s
Iteration  14: 40810551.662 ops/s
Iteration  15: 42211220.592 ops/s
Iteration  16: 41252455.677 ops/s
Iteration  17: 43330101.280 ops/s
Iteration  18: 41602997.596 ops/s
Iteration  19: 40347437.702 ops/s
Iteration  20: 42697649.498 ops/s
Iteration  21: 43538147.225 ops/s
Iteration  22: 41110219.290 ops/s
Iteration  23: 44032403.872 ops/s
Iteration  24: 41396971.021 ops/s
Iteration  25: 42135398.799 ops/s
Iteration  26: 43159630.699 ops/s
Iteration  27: 40281994.317 ops/s
Iteration  28: 42572540.170 ops/s
Iteration  29: 42052587.046 ops/s
Iteration  30: 41446878.978 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_schedule":
  41900464.781 ±(99.9%) 742368.927 ops/s [Average]
  (min, avg, max) = (39743372.543, 41900464.781, 44032403.872), stdev = 1111142.946
  CI (99.9%): [41158095.854, 42642833.708] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmediateThinSchedulerTest._Benchmark.benchmark_schedule  thrpt   30  41900464.781 ± 742368.927  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_fromCallableTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_fromCallableTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 762831.531 ops/s
# Warmup Iteration   2: 1536488.066 ops/s
# Warmup Iteration   3: 3578206.902 ops/s
# Warmup Iteration   4: 4756308.200 ops/s
# Warmup Iteration   5: 4777318.115 ops/s
# Warmup Iteration   6: 4881055.114 ops/s
# Warmup Iteration   7: 4692213.323 ops/s
# Warmup Iteration   8: 4698889.101 ops/s
# Warmup Iteration   9: 4936469.883 ops/s
# Warmup Iteration  10: 4633992.478 ops/s
# Warmup Iteration  11: 4711132.485 ops/s
# Warmup Iteration  12: 4926380.961 ops/s
# Warmup Iteration  13: 4566962.958 ops/s
# Warmup Iteration  14: 4955284.718 ops/s
# Warmup Iteration  15: 4805773.394 ops/s
# Warmup Iteration  16: 4863292.276 ops/s
# Warmup Iteration  17: 4706369.174 ops/s
# Warmup Iteration  18: 4833665.793 ops/s
# Warmup Iteration  19: 4839581.308 ops/s
# Warmup Iteration  20: 4713629.429 ops/s
# Warmup Iteration  21: 4936856.099 ops/s
# Warmup Iteration  22: 4702013.589 ops/s
# Warmup Iteration  23: 4925196.410 ops/s
# Warmup Iteration  24: 4870406.414 ops/s
# Warmup Iteration  25: 4617063.818 ops/s
# Warmup Iteration  26: 4919820.138 ops/s
# Warmup Iteration  27: 4653249.318 ops/s
# Warmup Iteration  28: 5006879.202 ops/s
# Warmup Iteration  29: 4742979.001 ops/s
# Warmup Iteration  30: 4994926.866 ops/s
Iteration   1: 4879739.994 ops/s
Iteration   2: 4936981.930 ops/s
Iteration   3: 4687653.027 ops/s
Iteration   4: 5007535.146 ops/s
Iteration   5: 4652617.216 ops/s
Iteration   6: 4820749.260 ops/s
Iteration   7: 4888598.260 ops/s
Iteration   8: 4634065.960 ops/s
Iteration   9: 4838797.620 ops/s
Iteration  10: 4796952.566 ops/s
Iteration  11: 4749754.063 ops/s
Iteration  12: 4888081.061 ops/s
Iteration  13: 4859726.330 ops/s
Iteration  14: 4771962.958 ops/s
Iteration  15: 4973120.262 ops/s
Iteration  16: 4716619.162 ops/s
Iteration  17: 4912838.107 ops/s
Iteration  18: 4745600.009 ops/s
Iteration  19: 4838804.125 ops/s
Iteration  20: 4895811.200 ops/s
Iteration  21: 4654168.194 ops/s
Iteration  22: 4946274.088 ops/s
Iteration  23: 4588469.086 ops/s
Iteration  24: 4776392.741 ops/s
Iteration  25: 4868892.212 ops/s
Iteration  26: 4738417.066 ops/s
Iteration  27: 4945828.282 ops/s
Iteration  28: 4810876.634 ops/s
Iteration  29: 4905430.489 ops/s
Iteration  30: 4844572.265 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_fromCallableTwice":
  4819177.644 ±(99.9%) 72103.220 ops/s [Average]
  (min, avg, max) = (4588469.086, 4819177.644, 5007535.146), stdev = 107920.714
  CI (99.9%): [4747074.423, 4891280.864] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MaybeFromCallableTest._Benchmark.benchmark_fromCallableTwice  thrpt   30  4819177.644 ± 72103.220  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSkipDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSkipDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.830 ops/s
# Warmup Iteration   2: 14267.543 ops/s
# Warmup Iteration   3: 29765.772 ops/s
# Warmup Iteration   4: 14405.030 ops/s
# Warmup Iteration   5: 3501.263 ops/s
# Warmup Iteration   6: 11450.590 ops/s
# Warmup Iteration   7: 23671.274 ops/s
# Warmup Iteration   8: 5708.813 ops/s
# Warmup Iteration   9: 9020.902 ops/s
# Warmup Iteration  10: 17647.588 ops/s
# Warmup Iteration  11: 10159.617 ops/s
# Warmup Iteration  12: 9462.731 ops/s
# Warmup Iteration  13: 13619.402 ops/s
# Warmup Iteration  14: 17647.123 ops/s
# Warmup Iteration  15: 9495.002 ops/s
# Warmup Iteration  16: 517.671 ops/s
# Warmup Iteration  17: 9186.283 ops/s
# Warmup Iteration  18: 8820.930 ops/s
# Warmup Iteration  19: 6295.394 ops/s
# Warmup Iteration  20: 5210.102 ops/s
# Warmup Iteration  21: 11189.968 ops/s
# Warmup Iteration  22: 6149.179 ops/s
# Warmup Iteration  23: 6450.979 ops/s
# Warmup Iteration  24: 13039.902 ops/s
# Warmup Iteration  25: 11411.292 ops/s
# Warmup Iteration  26: 2136.009 ops/s
# Warmup Iteration  27: 6261.618 ops/s
# Warmup Iteration  28: 9801.285 ops/s
# Warmup Iteration  29: 10833.673 ops/s
# Warmup Iteration  30: 289.904 ops/s
Iteration   1: 6139.470 ops/s
Iteration   2: 9207.286 ops/s
Iteration   3: 8589.479 ops/s
Iteration   4: 3482.627 ops/s
Iteration   5: 8047.805 ops/s
Iteration   6: 10466.004 ops/s
Iteration   7: 8491.671 ops/s
Iteration   8: 1122.824 ops/s
Iteration   9: 7729.360 ops/s
Iteration  10: 7629.973 ops/s
Iteration  11: 9564.774 ops/s
Iteration  12: 312.766 ops/s
Iteration  13: 6873.181 ops/s
Iteration  14: 6422.807 ops/s
Iteration  15: 8965.392 ops/s
Iteration  16: 3125.216 ops/s
Iteration  17: 7603.771 ops/s
Iteration  18: 7383.476 ops/s
Iteration  19: 8316.513 ops/s
Iteration  20: 3310.389 ops/s
Iteration  21: 5967.512 ops/s
Iteration  22: 6513.981 ops/s
Iteration  23: 7289.942 ops/s
Iteration  24: 523.914 ops/s
Iteration  25: 8680.174 ops/s
Iteration  26: 8206.235 ops/s
Iteration  27: 8910.997 ops/s
Iteration  28: 3318.065 ops/s
Iteration  29: 7545.410 ops/s
Iteration  30: 5631.323 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSkipDoubleOnSubscribe":
  6512.411 ±(99.9%) 1829.910 ops/s [Average]
  (min, avg, max) = (312.766, 6512.411, 10466.004), stdev = 2738.923
  CI (99.9%): [4682.501, 8342.321] (assumes normal distribution)


# Run complete. Total time: 00:01:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt     Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_timedSkipDoubleOnSubscribe  thrpt   30  6512.411 ± 1829.910  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_fromActionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_fromActionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 326071.112 ops/s
# Warmup Iteration   2: 558950.263 ops/s
# Warmup Iteration   3: 653862.242 ops/s
# Warmup Iteration   4: 593696.734 ops/s
# Warmup Iteration   5: 645984.610 ops/s
# Warmup Iteration   6: 602938.270 ops/s
# Warmup Iteration   7: 668923.229 ops/s
# Warmup Iteration   8: 651694.728 ops/s
# Warmup Iteration   9: 657746.521 ops/s
# Warmup Iteration  10: 664032.466 ops/s
# Warmup Iteration  11: 656355.983 ops/s
# Warmup Iteration  12: 686823.496 ops/s
# Warmup Iteration  13: 644928.969 ops/s
# Warmup Iteration  14: 656476.580 ops/s
# Warmup Iteration  15: 684836.812 ops/s
# Warmup Iteration  16: 662434.124 ops/s
# Warmup Iteration  17: 713354.059 ops/s
# Warmup Iteration  18: 697589.611 ops/s
# Warmup Iteration  19: 696787.243 ops/s
# Warmup Iteration  20: 732879.085 ops/s
# Warmup Iteration  21: 694969.586 ops/s
# Warmup Iteration  22: 722615.733 ops/s
# Warmup Iteration  23: 718560.085 ops/s
# Warmup Iteration  24: 669594.686 ops/s
# Warmup Iteration  25: 699109.494 ops/s
# Warmup Iteration  26: 717126.099 ops/s
# Warmup Iteration  27: 693446.797 ops/s
# Warmup Iteration  28: 712259.535 ops/s
# Warmup Iteration  29: 716154.163 ops/s
# Warmup Iteration  30: 725357.018 ops/s
Iteration   1: 688225.668 ops/s
Iteration   2: 715061.812 ops/s
Iteration   3: 695415.322 ops/s
Iteration   4: 710600.507 ops/s
Iteration   5: 670695.872 ops/s
Iteration   6: 697805.111 ops/s
Iteration   7: 706828.176 ops/s
Iteration   8: 699408.276 ops/s
Iteration   9: 700288.230 ops/s
Iteration  10: 717456.090 ops/s
Iteration  11: 696012.853 ops/s
Iteration  12: 725939.174 ops/s
Iteration  13: 687194.538 ops/s
Iteration  14: 712723.364 ops/s
Iteration  15: 714957.822 ops/s
Iteration  16: 680973.707 ops/s
Iteration  17: 701715.430 ops/s
Iteration  18: 704874.476 ops/s
Iteration  19: 710197.650 ops/s
Iteration  20: 710337.698 ops/s
Iteration  21: 582128.254 ops/s
Iteration  22: 701517.835 ops/s
Iteration  23: 731152.271 ops/s
Iteration  24: 678601.755 ops/s
Iteration  25: 692472.095 ops/s
Iteration  26: 725222.015 ops/s
Iteration  27: 680388.837 ops/s
Iteration  28: 721045.263 ops/s
Iteration  29: 701793.115 ops/s
Iteration  30: 708102.306 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_fromActionThrows":
  698971.184 ±(99.9%) 17734.824 ops/s [Average]
  (min, avg, max) = (582128.254, 698971.184, 731152.271), stdev = 26544.651
  CI (99.9%): [681236.360, 716706.008] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
MaybeFromActionTest._Benchmark.benchmark_fromActionThrows  thrpt   30  698971.184 ± 17734.824  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_fromRunnableThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_fromRunnableThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 274137.899 ops/s
# Warmup Iteration   2: 574456.795 ops/s
# Warmup Iteration   3: 665318.797 ops/s
# Warmup Iteration   4: 672754.959 ops/s
# Warmup Iteration   5: 692345.679 ops/s
# Warmup Iteration   6: 674397.923 ops/s
# Warmup Iteration   7: 636473.825 ops/s
# Warmup Iteration   8: 660167.111 ops/s
# Warmup Iteration   9: 698732.461 ops/s
# Warmup Iteration  10: 677596.730 ops/s
# Warmup Iteration  11: 658916.565 ops/s
# Warmup Iteration  12: 699920.452 ops/s
# Warmup Iteration  13: 670021.738 ops/s
# Warmup Iteration  14: 695156.854 ops/s
# Warmup Iteration  15: 681086.153 ops/s
# Warmup Iteration  16: 662479.625 ops/s
# Warmup Iteration  17: 731143.630 ops/s
# Warmup Iteration  18: 742885.518 ops/s
# Warmup Iteration  19: 682020.956 ops/s
# Warmup Iteration  20: 719543.096 ops/s
# Warmup Iteration  21: 719988.684 ops/s
# Warmup Iteration  22: 699174.158 ops/s
# Warmup Iteration  23: 750629.403 ops/s
# Warmup Iteration  24: 728716.352 ops/s
# Warmup Iteration  25: 719412.935 ops/s
# Warmup Iteration  26: 721334.097 ops/s
# Warmup Iteration  27: 675786.673 ops/s
# Warmup Iteration  28: 727050.542 ops/s
# Warmup Iteration  29: 722971.271 ops/s
# Warmup Iteration  30: 718592.408 ops/s
Iteration   1: 746140.841 ops/s
Iteration   2: 689404.793 ops/s
Iteration   3: 740333.418 ops/s
Iteration   4: 704496.497 ops/s
Iteration   5: 707454.657 ops/s
Iteration   6: 733427.565 ops/s
Iteration   7: 705033.486 ops/s
Iteration   8: 741286.220 ops/s
Iteration   9: 700474.121 ops/s
Iteration  10: 732113.737 ops/s
Iteration  11: 711432.443 ops/s
Iteration  12: 722413.580 ops/s
Iteration  13: 712423.095 ops/s
Iteration  14: 710738.661 ops/s
Iteration  15: 722097.146 ops/s
Iteration  16: 711517.691 ops/s
Iteration  17: 731321.173 ops/s
Iteration  18: 710236.814 ops/s
Iteration  19: 716952.228 ops/s
Iteration  20: 737047.626 ops/s
Iteration  21: 700611.626 ops/s
Iteration  22: 726285.986 ops/s
Iteration  23: 712545.569 ops/s
Iteration  24: 729738.450 ops/s
Iteration  25: 706702.346 ops/s
Iteration  26: 723501.552 ops/s
Iteration  27: 726874.692 ops/s
Iteration  28: 726948.845 ops/s
Iteration  29: 727194.673 ops/s
Iteration  30: 716784.827 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_fromRunnableThrows":
  719451.145 ±(99.9%) 9235.745 ops/s [Average]
  (min, avg, max) = (689404.793, 719451.145, 746140.841), stdev = 13823.630
  CI (99.9%): [710215.400, 728686.891] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MaybeFromRunnableTest._Benchmark.benchmark_fromRunnableThrows  thrpt   30  719451.145 ± 9235.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_doubleComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_doubleComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1683530.159 ops/s
# Warmup Iteration   2: 5231285.510 ops/s
# Warmup Iteration   3: 6996300.779 ops/s
# Warmup Iteration   4: 7173055.581 ops/s
# Warmup Iteration   5: 7003969.225 ops/s
# Warmup Iteration   6: 7036337.051 ops/s
# Warmup Iteration   7: 7266317.631 ops/s
# Warmup Iteration   8: 6861064.458 ops/s
# Warmup Iteration   9: 7214970.902 ops/s
# Warmup Iteration  10: 7106773.410 ops/s
# Warmup Iteration  11: 7209315.038 ops/s
# Warmup Iteration  12: 6970039.700 ops/s
# Warmup Iteration  13: 7292106.742 ops/s
# Warmup Iteration  14: 7157464.479 ops/s
# Warmup Iteration  15: 7097232.432 ops/s
# Warmup Iteration  16: 7550833.783 ops/s
# Warmup Iteration  17: 7006941.482 ops/s
# Warmup Iteration  18: 7105321.494 ops/s
# Warmup Iteration  19: 7287945.751 ops/s
# Warmup Iteration  20: 7139997.796 ops/s
# Warmup Iteration  21: 7291976.979 ops/s
# Warmup Iteration  22: 7195317.529 ops/s
# Warmup Iteration  23: 7141776.464 ops/s
# Warmup Iteration  24: 7286881.007 ops/s
# Warmup Iteration  25: 6926738.153 ops/s
# Warmup Iteration  26: 7522647.014 ops/s
# Warmup Iteration  27: 7216686.366 ops/s
# Warmup Iteration  28: 6857015.357 ops/s
# Warmup Iteration  29: 7484783.607 ops/s
# Warmup Iteration  30: 7001459.452 ops/s
Iteration   1: 7360223.218 ops/s
Iteration   2: 7218465.928 ops/s
Iteration   3: 7492731.709 ops/s
Iteration   4: 6994557.653 ops/s
Iteration   5: 7477569.663 ops/s
Iteration   6: 7396065.264 ops/s
Iteration   7: 6933751.383 ops/s
Iteration   8: 7329291.470 ops/s
Iteration   9: 7091961.175 ops/s
Iteration  10: 7157039.983 ops/s
Iteration  11: 6971021.972 ops/s
Iteration  12: 7327506.111 ops/s
Iteration  13: 7147137.794 ops/s
Iteration  14: 7001475.981 ops/s
Iteration  15: 6954327.972 ops/s
Iteration  16: 5827391.870 ops/s
Iteration  17: 7138250.070 ops/s
Iteration  18: 7266793.845 ops/s
Iteration  19: 6964507.056 ops/s
Iteration  20: 7277661.492 ops/s
Iteration  21: 6983952.935 ops/s
Iteration  22: 6934642.985 ops/s
Iteration  23: 7344443.551 ops/s
Iteration  24: 7258480.612 ops/s
Iteration  25: 7188828.990 ops/s
Iteration  26: 6996680.293 ops/s
Iteration  27: 7359003.358 ops/s
Iteration  28: 7215554.448 ops/s
Iteration  29: 7245228.424 ops/s
Iteration  30: 6909392.892 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_doubleComplete":
  7125464.670 ±(99.9%) 200962.300 ops/s [Average]
  (min, avg, max) = (5827391.870, 7125464.670, 7492731.709), stdev = 300790.932
  CI (99.9%): [6924502.370, 7326426.970] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
MaybePeekTest._Benchmark.benchmark_doubleComplete  thrpt   30  7125464.670 ± 200962.300  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_fromSupplierThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_fromSupplierThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 312250.111 ops/s
# Warmup Iteration   2: 521763.722 ops/s
# Warmup Iteration   3: 660786.715 ops/s
# Warmup Iteration   4: 629295.111 ops/s
# Warmup Iteration   5: 640089.918 ops/s
# Warmup Iteration   6: 644233.974 ops/s
# Warmup Iteration   7: 626603.029 ops/s
# Warmup Iteration   8: 638035.447 ops/s
# Warmup Iteration   9: 655233.511 ops/s
# Warmup Iteration  10: 632730.118 ops/s
# Warmup Iteration  11: 614634.202 ops/s
# Warmup Iteration  12: 638565.928 ops/s
# Warmup Iteration  13: 630480.916 ops/s
# Warmup Iteration  14: 658718.315 ops/s
# Warmup Iteration  15: 654068.146 ops/s
# Warmup Iteration  16: 631406.605 ops/s
# Warmup Iteration  17: 659710.754 ops/s
# Warmup Iteration  18: 633838.037 ops/s
# Warmup Iteration  19: 652529.525 ops/s
# Warmup Iteration  20: 634617.424 ops/s
# Warmup Iteration  21: 632644.449 ops/s
# Warmup Iteration  22: 680495.930 ops/s
# Warmup Iteration  23: 622664.122 ops/s
# Warmup Iteration  24: 641204.901 ops/s
# Warmup Iteration  25: 660097.905 ops/s
# Warmup Iteration  26: 628566.984 ops/s
# Warmup Iteration  27: 650712.878 ops/s
# Warmup Iteration  28: 621328.625 ops/s
# Warmup Iteration  29: 668922.359 ops/s
# Warmup Iteration  30: 635282.458 ops/s
Iteration   1: 645069.549 ops/s
Iteration   2: 655796.017 ops/s
Iteration   3: 637940.318 ops/s
Iteration   4: 665788.363 ops/s
Iteration   5: 623981.332 ops/s
Iteration   6: 652537.023 ops/s
Iteration   7: 634813.815 ops/s
Iteration   8: 638257.952 ops/s
Iteration   9: 642681.112 ops/s
Iteration  10: 657435.020 ops/s
Iteration  11: 620604.375 ops/s
Iteration  12: 663909.802 ops/s
Iteration  13: 632869.338 ops/s
Iteration  14: 644593.214 ops/s
Iteration  15: 647541.540 ops/s
Iteration  16: 649391.858 ops/s
Iteration  17: 639182.542 ops/s
Iteration  18: 669127.398 ops/s
Iteration  19: 648493.655 ops/s
Iteration  20: 623811.107 ops/s
Iteration  21: 649041.634 ops/s
Iteration  22: 637125.960 ops/s
Iteration  23: 661247.206 ops/s
Iteration  24: 631000.940 ops/s
Iteration  25: 659019.974 ops/s
Iteration  26: 667424.414 ops/s
Iteration  27: 636660.131 ops/s
Iteration  28: 645732.319 ops/s
Iteration  29: 654825.661 ops/s
Iteration  30: 657197.996 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_fromSupplierThrows":
  646436.719 ±(99.9%) 8860.482 ops/s [Average]
  (min, avg, max) = (620604.375, 646436.719, 669127.398), stdev = 13261.953
  CI (99.9%): [637576.237, 655297.200] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MaybeFromSupplierTest._Benchmark.benchmark_fromSupplierThrows  thrpt   30  646436.719 ± 8860.482  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFutureTest._Benchmark.benchmark_timedWait$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFutureTest._Benchmark.benchmark_timedWait

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1106307.357 ops/s
# Warmup Iteration   2: 3863559.890 ops/s
# Warmup Iteration   3: 4540899.016 ops/s
# Warmup Iteration   4: 4628276.358 ops/s
# Warmup Iteration   5: 5123456.138 ops/s
# Warmup Iteration   6: 5232121.592 ops/s
# Warmup Iteration   7: 5050661.594 ops/s
# Warmup Iteration   8: 5080554.262 ops/s
# Warmup Iteration   9: 5224092.456 ops/s
# Warmup Iteration  10: 4989231.208 ops/s
# Warmup Iteration  11: 5208375.413 ops/s
# Warmup Iteration  12: 5089236.316 ops/s
# Warmup Iteration  13: 5081243.274 ops/s
# Warmup Iteration  14: 5075610.447 ops/s
# Warmup Iteration  15: 5232908.648 ops/s
# Warmup Iteration  16: 5052380.062 ops/s
# Warmup Iteration  17: 5229473.324 ops/s
# Warmup Iteration  18: 4945352.400 ops/s
# Warmup Iteration  19: 5229431.482 ops/s
# Warmup Iteration  20: 5186043.249 ops/s
# Warmup Iteration  21: 5146455.959 ops/s
# Warmup Iteration  22: 5136267.651 ops/s
# Warmup Iteration  23: 5074473.999 ops/s
# Warmup Iteration  24: 5094413.860 ops/s
# Warmup Iteration  25: 5182295.341 ops/s
# Warmup Iteration  26: 5047163.966 ops/s
# Warmup Iteration  27: 5264149.663 ops/s
# Warmup Iteration  28: 5175344.881 ops/s
# Warmup Iteration  29: 4975862.964 ops/s
# Warmup Iteration  30: 5328813.163 ops/s
Iteration   1: 5129394.875 ops/s
Iteration   2: 5127482.377 ops/s
Iteration   3: 5276978.886 ops/s
Iteration   4: 5140428.347 ops/s
Iteration   5: 5106234.109 ops/s
Iteration   6: 5260834.737 ops/s
Iteration   7: 4988375.650 ops/s
Iteration   8: 5213568.845 ops/s
Iteration   9: 5104338.148 ops/s
Iteration  10: 4911469.632 ops/s
Iteration  11: 4416089.237 ops/s
Iteration  12: 5280050.739 ops/s
Iteration  13: 4916811.075 ops/s
Iteration  14: 5273183.262 ops/s
Iteration  15: 5156347.238 ops/s
Iteration  16: 5033300.529 ops/s
Iteration  17: 5353954.340 ops/s
Iteration  18: 4943300.373 ops/s
Iteration  19: 5135994.550 ops/s
Iteration  20: 5070790.334 ops/s
Iteration  21: 5109679.400 ops/s
Iteration  22: 5167588.787 ops/s
Iteration  23: 5232161.869 ops/s
Iteration  24: 4880905.859 ops/s
Iteration  25: 5190008.037 ops/s
Iteration  26: 5109036.049 ops/s
Iteration  27: 5234857.773 ops/s
Iteration  28: 5024991.787 ops/s
Iteration  29: 5091791.209 ops/s
Iteration  30: 5329459.434 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFutureTest._Benchmark.benchmark_timedWait":
  5106980.249 ±(99.9%) 120113.657 ops/s [Average]
  (min, avg, max) = (4416089.237, 5106980.249, 5353954.340), stdev = 179780.481
  CI (99.9%): [4986866.592, 5227093.907] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score        Error  Units
MaybeFromFutureTest._Benchmark.benchmark_timedWait  thrpt   30  5106980.249 ± 120113.657  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFutureTest._Benchmark.benchmark_interrupt$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFutureTest._Benchmark.benchmark_interrupt

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 163303.750 ops/s
# Warmup Iteration   2: 369738.320 ops/s
# Warmup Iteration   3: 379048.859 ops/s
# Warmup Iteration   4: 395735.749 ops/s
# Warmup Iteration   5: 419202.291 ops/s
# Warmup Iteration   6: 401626.054 ops/s
# Warmup Iteration   7: 407648.318 ops/s
# Warmup Iteration   8: 413608.160 ops/s
# Warmup Iteration   9: 401499.241 ops/s
# Warmup Iteration  10: 410381.172 ops/s
# Warmup Iteration  11: 414388.855 ops/s
# Warmup Iteration  12: 396747.589 ops/s
# Warmup Iteration  13: 412583.298 ops/s
# Warmup Iteration  14: 399099.747 ops/s
# Warmup Iteration  15: 422605.517 ops/s
# Warmup Iteration  16: 412823.166 ops/s
# Warmup Iteration  17: 417619.415 ops/s
# Warmup Iteration  18: 426839.927 ops/s
# Warmup Iteration  19: 419380.586 ops/s
# Warmup Iteration  20: 430764.945 ops/s
# Warmup Iteration  21: 410870.443 ops/s
# Warmup Iteration  22: 433262.574 ops/s
# Warmup Iteration  23: 413627.531 ops/s
# Warmup Iteration  24: 426301.432 ops/s
# Warmup Iteration  25: 412322.397 ops/s
# Warmup Iteration  26: 416275.377 ops/s
# Warmup Iteration  27: 416223.723 ops/s
# Warmup Iteration  28: 415711.715 ops/s
# Warmup Iteration  29: 442738.323 ops/s
# Warmup Iteration  30: 404214.191 ops/s
Iteration   1: 430539.106 ops/s
Iteration   2: 437123.850 ops/s
Iteration   3: 418211.917 ops/s
Iteration   4: 433166.609 ops/s
Iteration   5: 401580.178 ops/s
Iteration   6: 433808.901 ops/s
Iteration   7: 415477.964 ops/s
Iteration   8: 418505.753 ops/s
Iteration   9: 434392.547 ops/s
Iteration  10: 434704.449 ops/s
Iteration  11: 414724.621 ops/s
Iteration  12: 439747.877 ops/s
Iteration  13: 402638.382 ops/s
Iteration  14: 421796.318 ops/s
Iteration  15: 421785.813 ops/s
Iteration  16: 412066.954 ops/s
Iteration  17: 428000.316 ops/s
Iteration  18: 420548.986 ops/s
Iteration  19: 431307.559 ops/s
Iteration  20: 413166.888 ops/s
Iteration  21: 432438.959 ops/s
Iteration  22: 415171.252 ops/s
Iteration  23: 425005.344 ops/s
Iteration  24: 416765.274 ops/s
Iteration  25: 421596.644 ops/s
Iteration  26: 419189.110 ops/s
Iteration  27: 413840.358 ops/s
Iteration  28: 420539.827 ops/s
Iteration  29: 411422.655 ops/s
Iteration  30: 413941.127 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFutureTest._Benchmark.benchmark_interrupt":
  421773.518 ±(99.9%) 6629.371 ops/s [Average]
  (min, avg, max) = (401580.178, 421773.518, 439747.877), stdev = 9922.531
  CI (99.9%): [415144.147, 428402.889] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
MaybeFromFutureTest._Benchmark.benchmark_interrupt  thrpt   30  421773.518 ± 6629.371  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_withOtherPublisherDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_withOtherPublisherDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 114884.703 ops/s
# Warmup Iteration   2: 416464.484 ops/s
# Warmup Iteration   3: 479872.530 ops/s
# Warmup Iteration   4: 496243.999 ops/s
# Warmup Iteration   5: 532946.339 ops/s
# Warmup Iteration   6: 518241.222 ops/s
# Warmup Iteration   7: 498670.207 ops/s
# Warmup Iteration   8: 525903.691 ops/s
# Warmup Iteration   9: 507028.348 ops/s
# Warmup Iteration  10: 512583.827 ops/s
# Warmup Iteration  11: 507879.641 ops/s
# Warmup Iteration  12: 512180.874 ops/s
# Warmup Iteration  13: 534030.574 ops/s
# Warmup Iteration  14: 488564.734 ops/s
# Warmup Iteration  15: 524021.694 ops/s
# Warmup Iteration  16: 506856.374 ops/s
# Warmup Iteration  17: 529992.972 ops/s
# Warmup Iteration  18: 523121.701 ops/s
# Warmup Iteration  19: 540138.747 ops/s
# Warmup Iteration  20: 525582.714 ops/s
# Warmup Iteration  21: 522718.895 ops/s
# Warmup Iteration  22: 540661.241 ops/s
# Warmup Iteration  23: 531532.940 ops/s
# Warmup Iteration  24: 551784.782 ops/s
# Warmup Iteration  25: 561090.526 ops/s
# Warmup Iteration  26: 522354.446 ops/s
# Warmup Iteration  27: 542481.578 ops/s
# Warmup Iteration  28: 553084.508 ops/s
# Warmup Iteration  29: 521239.456 ops/s
# Warmup Iteration  30: 564981.744 ops/s
Iteration   1: 526779.642 ops/s
Iteration   2: 545230.141 ops/s
Iteration   3: 515211.164 ops/s
Iteration   4: 549974.511 ops/s
Iteration   5: 502268.217 ops/s
Iteration   6: 494737.303 ops/s
Iteration   7: 513160.122 ops/s
Iteration   8: 540077.441 ops/s
Iteration   9: 543030.655 ops/s
Iteration  10: 534840.837 ops/s
Iteration  11: 549589.330 ops/s
Iteration  12: 527252.778 ops/s
Iteration  13: 554800.090 ops/s
Iteration  14: 542096.605 ops/s
Iteration  15: 539381.958 ops/s
Iteration  16: 544398.902 ops/s
Iteration  17: 530561.038 ops/s
Iteration  18: 523847.577 ops/s
Iteration  19: 540878.877 ops/s
Iteration  20: 559828.640 ops/s
Iteration  21: 538371.290 ops/s
Iteration  22: 531407.492 ops/s
Iteration  23: 547042.702 ops/s
Iteration  24: 532550.657 ops/s
Iteration  25: 564867.109 ops/s
Iteration  26: 523541.755 ops/s
Iteration  27: 537728.377 ops/s
Iteration  28: 528110.574 ops/s
Iteration  29: 539427.421 ops/s
Iteration  30: 552133.425 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_withOtherPublisherDoubleOnSubscribe":
  535770.888 ±(99.9%) 10537.958 ops/s [Average]
  (min, avg, max) = (494737.303, 535770.888, 564867.109), stdev = 15772.721
  CI (99.9%): [525232.929, 546308.846] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_withOtherPublisherDoubleOnSubscribe  thrpt   30  535770.888 ± 10537.958  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_doubleOnSubscribeToMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_doubleOnSubscribeToMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107390.465 ops/s
# Warmup Iteration   2: 424910.181 ops/s
# Warmup Iteration   3: 512013.417 ops/s
# Warmup Iteration   4: 477579.854 ops/s
# Warmup Iteration   5: 532250.008 ops/s
# Warmup Iteration   6: 467464.910 ops/s
# Warmup Iteration   7: 529230.828 ops/s
# Warmup Iteration   8: 556731.272 ops/s
# Warmup Iteration   9: 473372.404 ops/s
# Warmup Iteration  10: 550280.785 ops/s
# Warmup Iteration  11: 527804.227 ops/s
# Warmup Iteration  12: 549443.024 ops/s
# Warmup Iteration  13: 522213.340 ops/s
# Warmup Iteration  14: 531719.364 ops/s
# Warmup Iteration  15: 535941.779 ops/s
# Warmup Iteration  16: 539537.223 ops/s
# Warmup Iteration  17: 583161.085 ops/s
# Warmup Iteration  18: 548448.511 ops/s
# Warmup Iteration  19: 568989.622 ops/s
# Warmup Iteration  20: 563001.367 ops/s
# Warmup Iteration  21: 555180.870 ops/s
# Warmup Iteration  22: 557684.362 ops/s
# Warmup Iteration  23: 555226.767 ops/s
# Warmup Iteration  24: 570787.987 ops/s
# Warmup Iteration  25: 554192.960 ops/s
# Warmup Iteration  26: 551396.664 ops/s
# Warmup Iteration  27: 576262.544 ops/s
# Warmup Iteration  28: 546704.662 ops/s
# Warmup Iteration  29: 571974.715 ops/s
# Warmup Iteration  30: 555170.839 ops/s
Iteration   1: 565519.210 ops/s
Iteration   2: 547729.394 ops/s
Iteration   3: 575302.329 ops/s
Iteration   4: 553198.363 ops/s
Iteration   5: 541857.003 ops/s
Iteration   6: 577984.569 ops/s
Iteration   7: 548717.206 ops/s
Iteration   8: 577938.094 ops/s
Iteration   9: 547480.677 ops/s
Iteration  10: 554050.970 ops/s
Iteration  11: 576151.410 ops/s
Iteration  12: 536282.549 ops/s
Iteration  13: 573106.984 ops/s
Iteration  14: 547206.078 ops/s
Iteration  15: 550075.298 ops/s
Iteration  16: 571138.761 ops/s
Iteration  17: 533390.163 ops/s
Iteration  18: 567000.790 ops/s
Iteration  19: 575409.786 ops/s
Iteration  20: 550899.764 ops/s
Iteration  21: 578569.810 ops/s
Iteration  22: 531258.597 ops/s
Iteration  23: 545161.324 ops/s
Iteration  24: 574613.368 ops/s
Iteration  25: 551493.285 ops/s
Iteration  26: 565957.329 ops/s
Iteration  27: 531529.974 ops/s
Iteration  28: 564976.598 ops/s
Iteration  29: 579816.939 ops/s
Iteration  30: 532366.539 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_doubleOnSubscribeToMaybe":
  557539.439 ±(99.9%) 10912.518 ops/s [Average]
  (min, avg, max) = (531258.597, 557539.439, 579816.939), stdev = 16333.345
  CI (99.9%): [546626.921, 568451.957] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
MaybeIsEmptyTest._Benchmark.benchmark_doubleOnSubscribeToMaybe  thrpt   30  557539.439 ± 10912.518  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 190812.290 ops/s
# Warmup Iteration   2: 441799.626 ops/s
# Warmup Iteration   3: 481214.089 ops/s
# Warmup Iteration   4: 432512.314 ops/s
# Warmup Iteration   5: 530842.806 ops/s
# Warmup Iteration   6: 461841.474 ops/s
# Warmup Iteration   7: 465220.230 ops/s
# Warmup Iteration   8: 512777.529 ops/s
# Warmup Iteration   9: 507348.446 ops/s
# Warmup Iteration  10: 524413.838 ops/s
# Warmup Iteration  11: 518318.396 ops/s
# Warmup Iteration  12: 496373.029 ops/s
# Warmup Iteration  13: 520070.051 ops/s
# Warmup Iteration  14: 510129.728 ops/s
# Warmup Iteration  15: 524847.963 ops/s
# Warmup Iteration  16: 521766.340 ops/s
# Warmup Iteration  17: 523562.036 ops/s
# Warmup Iteration  18: 551797.824 ops/s
# Warmup Iteration  19: 544018.943 ops/s
# Warmup Iteration  20: 536945.023 ops/s
# Warmup Iteration  21: 563184.545 ops/s
# Warmup Iteration  22: 536278.029 ops/s
# Warmup Iteration  23: 532443.351 ops/s
# Warmup Iteration  24: 532568.359 ops/s
# Warmup Iteration  25: 534322.516 ops/s
# Warmup Iteration  26: 527309.252 ops/s
# Warmup Iteration  27: 555860.857 ops/s
# Warmup Iteration  28: 521067.212 ops/s
# Warmup Iteration  29: 548851.947 ops/s
# Warmup Iteration  30: 474289.454 ops/s
Iteration   1: 509106.706 ops/s
Iteration   2: 552061.027 ops/s
Iteration   3: 515871.629 ops/s
Iteration   4: 548554.857 ops/s
Iteration   5: 522272.358 ops/s
Iteration   6: 541981.132 ops/s
Iteration   7: 567736.228 ops/s
Iteration   8: 517839.768 ops/s
Iteration   9: 555933.383 ops/s
Iteration  10: 538915.935 ops/s
Iteration  11: 551692.602 ops/s
Iteration  12: 520410.220 ops/s
Iteration  13: 536074.308 ops/s
Iteration  14: 543460.470 ops/s
Iteration  15: 565369.714 ops/s
Iteration  16: 517238.316 ops/s
Iteration  17: 553358.670 ops/s
Iteration  18: 516999.009 ops/s
Iteration  19: 561741.072 ops/s
Iteration  20: 552328.556 ops/s
Iteration  21: 520738.624 ops/s
Iteration  22: 538971.788 ops/s
Iteration  23: 541078.204 ops/s
Iteration  24: 559214.743 ops/s
Iteration  25: 526039.441 ops/s
Iteration  26: 530602.568 ops/s
Iteration  27: 545800.847 ops/s
Iteration  28: 521644.028 ops/s
Iteration  29: 562060.943 ops/s
Iteration  30: 523489.608 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_doubleOnSubscribe":
  538619.559 ±(99.9%) 11591.277 ops/s [Average]
  (min, avg, max) = (509106.706, 538619.559, 567736.228), stdev = 17349.279
  CI (99.9%): [527028.281, 550210.836] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
MaybeSwitchIfEmptyTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  538619.559 ± 11591.277  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 154773.270 ops/s
# Warmup Iteration   2: 454528.409 ops/s
# Warmup Iteration   3: 457434.168 ops/s
# Warmup Iteration   4: 459001.456 ops/s
# Warmup Iteration   5: 529016.685 ops/s
# Warmup Iteration   6: 476383.619 ops/s
# Warmup Iteration   7: 496809.551 ops/s
# Warmup Iteration   8: 539343.296 ops/s
# Warmup Iteration   9: 515005.066 ops/s
# Warmup Iteration  10: 524686.881 ops/s
# Warmup Iteration  11: 529212.620 ops/s
# Warmup Iteration  12: 520283.858 ops/s
# Warmup Iteration  13: 512535.213 ops/s
# Warmup Iteration  14: 540959.569 ops/s
# Warmup Iteration  15: 512043.260 ops/s
# Warmup Iteration  16: 528992.921 ops/s
# Warmup Iteration  17: 560016.745 ops/s
# Warmup Iteration  18: 552148.578 ops/s
# Warmup Iteration  19: 532557.444 ops/s
# Warmup Iteration  20: 542982.348 ops/s
# Warmup Iteration  21: 543964.467 ops/s
# Warmup Iteration  22: 544603.799 ops/s
# Warmup Iteration  23: 537570.742 ops/s
# Warmup Iteration  24: 532607.003 ops/s
# Warmup Iteration  25: 565916.006 ops/s
# Warmup Iteration  26: 529912.456 ops/s
# Warmup Iteration  27: 552048.858 ops/s
# Warmup Iteration  28: 531585.683 ops/s
# Warmup Iteration  29: 568187.701 ops/s
# Warmup Iteration  30: 552884.604 ops/s
Iteration   1: 532977.030 ops/s
Iteration   2: 549300.825 ops/s
Iteration   3: 550731.069 ops/s
Iteration   4: 524031.143 ops/s
Iteration   5: 544617.037 ops/s
Iteration   6: 538390.853 ops/s
Iteration   7: 547089.664 ops/s
Iteration   8: 552453.564 ops/s
Iteration   9: 535211.374 ops/s
Iteration  10: 555912.428 ops/s
Iteration  11: 533334.856 ops/s
Iteration  12: 540430.760 ops/s
Iteration  13: 525668.920 ops/s
Iteration  14: 550297.184 ops/s
Iteration  15: 555431.928 ops/s
Iteration  16: 533876.546 ops/s
Iteration  17: 545873.564 ops/s
Iteration  18: 526984.823 ops/s
Iteration  19: 551255.527 ops/s
Iteration  20: 539794.218 ops/s
Iteration  21: 535693.840 ops/s
Iteration  22: 547419.907 ops/s
Iteration  23: 530963.582 ops/s
Iteration  24: 559264.549 ops/s
Iteration  25: 528212.833 ops/s
Iteration  26: 552999.980 ops/s
Iteration  27: 549761.045 ops/s
Iteration  28: 528149.194 ops/s
Iteration  29: 556859.644 ops/s
Iteration  30: 525993.973 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_doubleOnSubscribe":
  541632.729 ±(99.9%) 7281.011 ops/s [Average]
  (min, avg, max) = (524031.143, 541632.729, 559264.549), stdev = 10897.875
  CI (99.9%): [534351.718, 548913.740] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MaybeFlatMapBiSelectorTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  541632.729 ± 7281.011  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 177914.460 ops/s
# Warmup Iteration   2: 436940.556 ops/s
# Warmup Iteration   3: 468265.769 ops/s
# Warmup Iteration   4: 513988.557 ops/s
# Warmup Iteration   5: 535503.793 ops/s
# Warmup Iteration   6: 544280.797 ops/s
# Warmup Iteration   7: 507478.499 ops/s
# Warmup Iteration   8: 536510.444 ops/s
# Warmup Iteration   9: 487451.173 ops/s
# Warmup Iteration  10: 512520.816 ops/s
# Warmup Iteration  11: 525358.201 ops/s
# Warmup Iteration  12: 510363.495 ops/s
# Warmup Iteration  13: 531586.845 ops/s
# Warmup Iteration  14: 518246.790 ops/s
# Warmup Iteration  15: 526598.478 ops/s
# Warmup Iteration  16: 536520.051 ops/s
# Warmup Iteration  17: 517750.047 ops/s
# Warmup Iteration  18: 544073.620 ops/s
# Warmup Iteration  19: 545672.336 ops/s
# Warmup Iteration  20: 556777.039 ops/s
# Warmup Iteration  21: 550126.970 ops/s
# Warmup Iteration  22: 519181.040 ops/s
# Warmup Iteration  23: 567495.917 ops/s
# Warmup Iteration  24: 529203.017 ops/s
# Warmup Iteration  25: 422580.745 ops/s
# Warmup Iteration  26: 547754.040 ops/s
# Warmup Iteration  27: 535476.245 ops/s
# Warmup Iteration  28: 551328.421 ops/s
# Warmup Iteration  29: 548360.516 ops/s
# Warmup Iteration  30: 540792.078 ops/s
Iteration   1: 550539.901 ops/s
Iteration   2: 525670.062 ops/s
Iteration   3: 543944.311 ops/s
Iteration   4: 538253.564 ops/s
Iteration   5: 546483.417 ops/s
Iteration   6: 544003.043 ops/s
Iteration   7: 538195.412 ops/s
Iteration   8: 543742.355 ops/s
Iteration   9: 537434.751 ops/s
Iteration  10: 557457.061 ops/s
Iteration  11: 540493.624 ops/s
Iteration  12: 545202.940 ops/s
Iteration  13: 562050.190 ops/s
Iteration  14: 553715.472 ops/s
Iteration  15: 532126.558 ops/s
Iteration  16: 544853.477 ops/s
Iteration  17: 547654.410 ops/s
Iteration  18: 553515.044 ops/s
Iteration  19: 545283.743 ops/s
Iteration  20: 543679.119 ops/s
Iteration  21: 543569.291 ops/s
Iteration  22: 556800.246 ops/s
Iteration  23: 541496.127 ops/s
Iteration  24: 528427.795 ops/s
Iteration  25: 548437.628 ops/s
Iteration  26: 534513.916 ops/s
Iteration  27: 563900.152 ops/s
Iteration  28: 538264.615 ops/s
Iteration  29: 532329.972 ops/s
Iteration  30: 574576.785 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe":
  545220.499 ±(99.9%) 7164.732 ops/s [Average]
  (min, avg, max) = (525670.062, 545220.499, 574576.785), stdev = 10723.835
  CI (99.9%): [538055.767, 552385.232] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
MaybeConcatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  545220.499 ± 7164.732  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 219517.501 ops/s
# Warmup Iteration   2: 452903.597 ops/s
# Warmup Iteration   3: 457213.469 ops/s
# Warmup Iteration   4: 474524.176 ops/s
# Warmup Iteration   5: 509809.297 ops/s
# Warmup Iteration   6: 506731.824 ops/s
# Warmup Iteration   7: 499024.435 ops/s
# Warmup Iteration   8: 492425.462 ops/s
# Warmup Iteration   9: 528914.587 ops/s
# Warmup Iteration  10: 486024.432 ops/s
# Warmup Iteration  11: 504763.686 ops/s
# Warmup Iteration  12: 494119.708 ops/s
# Warmup Iteration  13: 503326.249 ops/s
# Warmup Iteration  14: 506085.605 ops/s
# Warmup Iteration  15: 476179.560 ops/s
# Warmup Iteration  16: 513328.985 ops/s
# Warmup Iteration  17: 492989.318 ops/s
# Warmup Iteration  18: 504392.900 ops/s
# Warmup Iteration  19: 536075.233 ops/s
# Warmup Iteration  20: 535010.728 ops/s
# Warmup Iteration  21: 512879.562 ops/s
# Warmup Iteration  22: 522125.349 ops/s
# Warmup Iteration  23: 523663.921 ops/s
# Warmup Iteration  24: 540013.233 ops/s
# Warmup Iteration  25: 559084.773 ops/s
# Warmup Iteration  26: 525944.986 ops/s
# Warmup Iteration  27: 541953.306 ops/s
# Warmup Iteration  28: 532104.017 ops/s
# Warmup Iteration  29: 536337.654 ops/s
# Warmup Iteration  30: 546747.241 ops/s
Iteration   1: 524670.698 ops/s
Iteration   2: 562422.766 ops/s
Iteration   3: 519974.823 ops/s
Iteration   4: 540564.648 ops/s
Iteration   5: 541603.728 ops/s
Iteration   6: 531920.205 ops/s
Iteration   7: 545272.289 ops/s
Iteration   8: 530900.684 ops/s
Iteration   9: 530629.871 ops/s
Iteration  10: 555478.359 ops/s
Iteration  11: 517033.988 ops/s
Iteration  12: 542054.038 ops/s
Iteration  13: 529286.538 ops/s
Iteration  14: 555487.720 ops/s
Iteration  15: 543608.677 ops/s
Iteration  16: 528221.453 ops/s
Iteration  17: 525755.275 ops/s
Iteration  18: 551079.034 ops/s
Iteration  19: 521261.272 ops/s
Iteration  20: 548488.052 ops/s
Iteration  21: 531243.120 ops/s
Iteration  22: 529998.840 ops/s
Iteration  23: 553763.185 ops/s
Iteration  24: 527459.494 ops/s
Iteration  25: 540846.956 ops/s
Iteration  26: 527110.407 ops/s
Iteration  27: 545819.727 ops/s
Iteration  28: 554616.329 ops/s
Iteration  29: 528267.761 ops/s
Iteration  30: 532070.994 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_doubleOnSubscribe":
  537230.364 ±(99.9%) 8173.246 ops/s [Average]
  (min, avg, max) = (517033.988, 537230.364, 562422.766), stdev = 12233.331
  CI (99.9%): [529057.118, 545403.611] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MaybeToCompletionStageTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  537230.364 ± 8173.246  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 140022.615 ops/s
# Warmup Iteration   2: 448017.432 ops/s
# Warmup Iteration   3: 525105.875 ops/s
# Warmup Iteration   4: 490483.080 ops/s
# Warmup Iteration   5: 516579.416 ops/s
# Warmup Iteration   6: 497688.454 ops/s
# Warmup Iteration   7: 525965.540 ops/s
# Warmup Iteration   8: 480266.578 ops/s
# Warmup Iteration   9: 528436.523 ops/s
# Warmup Iteration  10: 518354.087 ops/s
# Warmup Iteration  11: 514068.382 ops/s
# Warmup Iteration  12: 540217.604 ops/s
# Warmup Iteration  13: 521895.588 ops/s
# Warmup Iteration  14: 535207.022 ops/s
# Warmup Iteration  15: 504694.101 ops/s
# Warmup Iteration  16: 521812.697 ops/s
# Warmup Iteration  17: 560781.691 ops/s
# Warmup Iteration  18: 536963.953 ops/s
# Warmup Iteration  19: 549845.414 ops/s
# Warmup Iteration  20: 426611.859 ops/s
# Warmup Iteration  21: 535004.818 ops/s
# Warmup Iteration  22: 545645.268 ops/s
# Warmup Iteration  23: 549530.332 ops/s
# Warmup Iteration  24: 532599.092 ops/s
# Warmup Iteration  25: 540955.597 ops/s
# Warmup Iteration  26: 525538.059 ops/s
# Warmup Iteration  27: 534606.655 ops/s
# Warmup Iteration  28: 558909.182 ops/s
# Warmup Iteration  29: 537413.648 ops/s
# Warmup Iteration  30: 565536.475 ops/s
Iteration   1: 555687.669 ops/s
Iteration   2: 530040.752 ops/s
Iteration   3: 555484.782 ops/s
Iteration   4: 530269.310 ops/s
Iteration   5: 554024.269 ops/s
Iteration   6: 556315.083 ops/s
Iteration   7: 544630.238 ops/s
Iteration   8: 561782.698 ops/s
Iteration   9: 533630.158 ops/s
Iteration  10: 564193.813 ops/s
Iteration  11: 536659.311 ops/s
Iteration  12: 533771.391 ops/s
Iteration  13: 558947.840 ops/s
Iteration  14: 603372.995 ops/s
Iteration  15: 549815.244 ops/s
Iteration  16: 559742.875 ops/s
Iteration  17: 540540.037 ops/s
Iteration  18: 559832.071 ops/s
Iteration  19: 526545.140 ops/s
Iteration  20: 546826.625 ops/s
Iteration  21: 570940.861 ops/s
Iteration  22: 532214.917 ops/s
Iteration  23: 559086.670 ops/s
Iteration  24: 535560.422 ops/s
Iteration  25: 560103.110 ops/s
Iteration  26: 569278.194 ops/s
Iteration  27: 559522.414 ops/s
Iteration  28: 542798.907 ops/s
Iteration  29: 543459.144 ops/s
Iteration  30: 561191.547 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_doubleOnSubscribe":
  551208.950 ±(99.9%) 10773.726 ops/s [Average]
  (min, avg, max) = (526545.140, 551208.950, 603372.995), stdev = 16125.607
  CI (99.9%): [540435.223, 561982.676] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
MaybeDematerializeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  551208.950 ± 10773.726  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 92090.529 ops/s
# Warmup Iteration   2: 206911.784 ops/s
# Warmup Iteration   3: 210898.768 ops/s
# Warmup Iteration   4: 215133.971 ops/s
# Warmup Iteration   5: 236796.073 ops/s
# Warmup Iteration   6: 208531.869 ops/s
# Warmup Iteration   7: 224743.765 ops/s
# Warmup Iteration   8: 230934.597 ops/s
# Warmup Iteration   9: 223357.326 ops/s
# Warmup Iteration  10: 223376.157 ops/s
# Warmup Iteration  11: 238256.176 ops/s
# Warmup Iteration  12: 233208.587 ops/s
# Warmup Iteration  13: 228463.047 ops/s
# Warmup Iteration  14: 239758.056 ops/s
# Warmup Iteration  15: 232139.113 ops/s
# Warmup Iteration  16: 236056.298 ops/s
# Warmup Iteration  17: 240695.310 ops/s
# Warmup Iteration  18: 240136.078 ops/s
# Warmup Iteration  19: 251359.775 ops/s
# Warmup Iteration  20: 244693.101 ops/s
# Warmup Iteration  21: 255363.028 ops/s
# Warmup Iteration  22: 241187.747 ops/s
# Warmup Iteration  23: 245794.305 ops/s
# Warmup Iteration  24: 239404.514 ops/s
# Warmup Iteration  25: 241853.561 ops/s
# Warmup Iteration  26: 250767.951 ops/s
# Warmup Iteration  27: 238871.863 ops/s
# Warmup Iteration  28: 252673.338 ops/s
# Warmup Iteration  29: 238776.788 ops/s
# Warmup Iteration  30: 243758.605 ops/s
Iteration   1: 234533.926 ops/s
Iteration   2: 247350.436 ops/s
Iteration   3: 245000.470 ops/s
Iteration   4: 239241.977 ops/s
Iteration   5: 249463.801 ops/s
Iteration   6: 241976.274 ops/s
Iteration   7: 246591.496 ops/s
Iteration   8: 240694.802 ops/s
Iteration   9: 252953.162 ops/s
Iteration  10: 249361.379 ops/s
Iteration  11: 241061.686 ops/s
Iteration  12: 250850.182 ops/s
Iteration  13: 251303.044 ops/s
Iteration  14: 238844.357 ops/s
Iteration  15: 242369.719 ops/s
Iteration  16: 238954.429 ops/s
Iteration  17: 235235.388 ops/s
Iteration  18: 243045.373 ops/s
Iteration  19: 240056.323 ops/s
Iteration  20: 243022.805 ops/s
Iteration  21: 241104.393 ops/s
Iteration  22: 238061.945 ops/s
Iteration  23: 247495.474 ops/s
Iteration  24: 240652.666 ops/s
Iteration  25: 249347.446 ops/s
Iteration  26: 236506.872 ops/s
Iteration  27: 246058.365 ops/s
Iteration  28: 244684.079 ops/s
Iteration  29: 244371.812 ops/s
Iteration  30: 249446.589 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe":
  243654.689 ±(99.9%) 3341.790 ops/s [Average]
  (min, avg, max) = (234533.926, 243654.689, 252953.162), stdev = 5001.834
  CI (99.9%): [240312.899, 246996.479] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
MaybeDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  243654.689 ± 3341.790  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 77100.710 ops/s
# Warmup Iteration   2: 403577.198 ops/s
# Warmup Iteration   3: 476752.637 ops/s
# Warmup Iteration   4: 455579.253 ops/s
# Warmup Iteration   5: 477095.038 ops/s
# Warmup Iteration   6: 491303.289 ops/s
# Warmup Iteration   7: 485635.292 ops/s
# Warmup Iteration   8: 520318.879 ops/s
# Warmup Iteration   9: 459060.782 ops/s
# Warmup Iteration  10: 488650.305 ops/s
# Warmup Iteration  11: 507235.636 ops/s
# Warmup Iteration  12: 496240.545 ops/s
# Warmup Iteration  13: 505058.311 ops/s
# Warmup Iteration  14: 512817.007 ops/s
# Warmup Iteration  15: 407751.463 ops/s
# Warmup Iteration  16: 522483.526 ops/s
# Warmup Iteration  17: 513544.972 ops/s
# Warmup Iteration  18: 513388.065 ops/s
# Warmup Iteration  19: 544933.269 ops/s
# Warmup Iteration  20: 521376.119 ops/s
# Warmup Iteration  21: 525176.467 ops/s
# Warmup Iteration  22: 507599.138 ops/s
# Warmup Iteration  23: 542097.861 ops/s
# Warmup Iteration  24: 542237.715 ops/s
# Warmup Iteration  25: 511027.918 ops/s
# Warmup Iteration  26: 536552.479 ops/s
# Warmup Iteration  27: 520352.309 ops/s
# Warmup Iteration  28: 524481.954 ops/s
# Warmup Iteration  29: 527240.379 ops/s
# Warmup Iteration  30: 528424.132 ops/s
Iteration   1: 529591.943 ops/s
Iteration   2: 522537.186 ops/s
Iteration   3: 530580.418 ops/s
Iteration   4: 510843.747 ops/s
Iteration   5: 528653.874 ops/s
Iteration   6: 544205.457 ops/s
Iteration   7: 511386.217 ops/s
Iteration   8: 531217.362 ops/s
Iteration   9: 515141.326 ops/s
Iteration  10: 544874.746 ops/s
Iteration  11: 514711.993 ops/s
Iteration  12: 538202.292 ops/s
Iteration  13: 506657.429 ops/s
Iteration  14: 523761.230 ops/s
Iteration  15: 521253.858 ops/s
Iteration  16: 516277.016 ops/s
Iteration  17: 537158.587 ops/s
Iteration  18: 524470.156 ops/s
Iteration  19: 511886.221 ops/s
Iteration  20: 521326.996 ops/s
Iteration  21: 517111.288 ops/s
Iteration  22: 538932.890 ops/s
Iteration  23: 510862.242 ops/s
Iteration  24: 539191.500 ops/s
Iteration  25: 528250.910 ops/s
Iteration  26: 522714.465 ops/s
Iteration  27: 536900.178 ops/s
Iteration  28: 541289.162 ops/s
Iteration  29: 515834.484 ops/s
Iteration  30: 540379.964 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_doubleOnSubscribe":
  525873.505 ±(99.9%) 7624.670 ops/s [Average]
  (min, avg, max) = (506657.429, 525873.505, 544874.746), stdev = 11412.249
  CI (99.9%): [518248.834, 533498.175] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
MaybeDoAfterSuccessTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  525873.505 ± 7624.670  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 112444.768 ops/s
# Warmup Iteration   2: 370835.569 ops/s
# Warmup Iteration   3: 443275.490 ops/s
# Warmup Iteration   4: 463495.063 ops/s
# Warmup Iteration   5: 483877.307 ops/s
# Warmup Iteration   6: 471769.749 ops/s
# Warmup Iteration   7: 409918.816 ops/s
# Warmup Iteration   8: 483395.998 ops/s
# Warmup Iteration   9: 485857.525 ops/s
# Warmup Iteration  10: 512871.596 ops/s
# Warmup Iteration  11: 481736.383 ops/s
# Warmup Iteration  12: 484584.214 ops/s
# Warmup Iteration  13: 499818.106 ops/s
# Warmup Iteration  14: 476183.688 ops/s
# Warmup Iteration  15: 507914.847 ops/s
# Warmup Iteration  16: 482505.238 ops/s
# Warmup Iteration  17: 512377.014 ops/s
# Warmup Iteration  18: 505729.357 ops/s
# Warmup Iteration  19: 507135.463 ops/s
# Warmup Iteration  20: 495563.681 ops/s
# Warmup Iteration  21: 509635.207 ops/s
# Warmup Iteration  22: 517835.065 ops/s
# Warmup Iteration  23: 501567.537 ops/s
# Warmup Iteration  24: 515580.841 ops/s
# Warmup Iteration  25: 520868.138 ops/s
# Warmup Iteration  26: 495610.393 ops/s
# Warmup Iteration  27: 508802.409 ops/s
# Warmup Iteration  28: 518415.914 ops/s
# Warmup Iteration  29: 506562.591 ops/s
# Warmup Iteration  30: 517390.554 ops/s
Iteration   1: 492368.696 ops/s
Iteration   2: 520780.695 ops/s
Iteration   3: 495734.985 ops/s
Iteration   4: 509032.229 ops/s
Iteration   5: 517377.562 ops/s
Iteration   6: 497736.931 ops/s
Iteration   7: 502088.837 ops/s
Iteration   8: 522285.189 ops/s
Iteration   9: 477790.078 ops/s
Iteration  10: 517497.430 ops/s
Iteration  11: 492280.369 ops/s
Iteration  12: 502820.182 ops/s
Iteration  13: 495458.408 ops/s
Iteration  14: 503582.466 ops/s
Iteration  15: 526941.847 ops/s
Iteration  16: 503993.660 ops/s
Iteration  17: 495640.950 ops/s
Iteration  18: 524254.442 ops/s
Iteration  19: 496493.594 ops/s
Iteration  20: 530718.833 ops/s
Iteration  21: 502831.963 ops/s
Iteration  22: 507585.830 ops/s
Iteration  23: 502424.743 ops/s
Iteration  24: 505993.577 ops/s
Iteration  25: 520687.961 ops/s
Iteration  26: 494294.355 ops/s
Iteration  27: 527754.049 ops/s
Iteration  28: 495545.775 ops/s
Iteration  29: 514992.282 ops/s
Iteration  30: 489977.719 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_doubleOnSubscribe":
  506232.188 ±(99.9%) 8878.675 ops/s [Average]
  (min, avg, max) = (477790.078, 506232.188, 530718.833), stdev = 13289.184
  CI (99.9%): [497353.513, 515110.863] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
MaybeOfTypeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  506232.188 ± 8878.675  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhileTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhileTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.731 ops/s
# Warmup Iteration   2: 46831.254 ops/s
# Warmup Iteration   3: 90304.326 ops/s
# Warmup Iteration   4: 91750.220 ops/s
# Warmup Iteration   5: 93492.255 ops/s
# Warmup Iteration   6: 131134.918 ops/s
# Warmup Iteration   7: 304817.897 ops/s
# Warmup Iteration   8: 247059.968 ops/s
# Warmup Iteration   9: 315353.611 ops/s
# Warmup Iteration  10: 252313.963 ops/s
# Warmup Iteration  11: 303420.416 ops/s
# Warmup Iteration  12: 313722.072 ops/s
# Warmup Iteration  13: 308261.779 ops/s
# Warmup Iteration  14: 314533.581 ops/s
# Warmup Iteration  15: 313138.498 ops/s
# Warmup Iteration  16: 301096.128 ops/s
# Warmup Iteration  17: 322104.858 ops/s
# Warmup Iteration  18: 302171.291 ops/s
# Warmup Iteration  19: 325604.329 ops/s
# Warmup Iteration  20: 310699.028 ops/s
# Warmup Iteration  21: 318150.465 ops/s
# Warmup Iteration  22: 296838.112 ops/s
# Warmup Iteration  23: 313854.674 ops/s
# Warmup Iteration  24: 306759.896 ops/s
# Warmup Iteration  25: 314389.452 ops/s
# Warmup Iteration  26: 317967.903 ops/s
# Warmup Iteration  27: 308542.968 ops/s
# Warmup Iteration  28: 319735.839 ops/s
# Warmup Iteration  29: 323263.623 ops/s
# Warmup Iteration  30: 305103.315 ops/s
Iteration   1: 315743.875 ops/s
Iteration   2: 306698.936 ops/s
Iteration   3: 328818.225 ops/s
Iteration   4: 322392.476 ops/s
Iteration   5: 305632.336 ops/s
Iteration   6: 318486.155 ops/s
Iteration   7: 305076.830 ops/s
Iteration   8: 316749.745 ops/s
Iteration   9: 324038.967 ops/s
Iteration  10: 302234.449 ops/s
Iteration  11: 312530.216 ops/s
Iteration  12: 308509.161 ops/s
Iteration  13: 308882.921 ops/s
Iteration  14: 314854.379 ops/s
Iteration  15: 301257.308 ops/s
Iteration  16: 306091.394 ops/s
Iteration  17: 313539.990 ops/s
Iteration  18: 320352.238 ops/s
Iteration  19: 306720.332 ops/s
Iteration  20: 320894.562 ops/s
Iteration  21: 304269.673 ops/s
Iteration  22: 320865.608 ops/s
Iteration  23: 324439.403 ops/s
Iteration  24: 308136.688 ops/s
Iteration  25: 320854.261 ops/s
Iteration  26: 323446.555 ops/s
Iteration  27: 305094.038 ops/s
Iteration  28: 318238.789 ops/s
Iteration  29: 300170.116 ops/s
Iteration  30: 319751.115 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhileTest._Benchmark.benchmark_doubleOnSubscribe":
  313492.358 ±(99.9%) 5441.117 ops/s [Average]
  (min, avg, max) = (300170.116, 313492.358, 328818.225), stdev = 8144.008
  CI (99.9%): [308051.241, 318933.475] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableSkipWhileTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  313492.358 ± 5441.117  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 171228.377 ops/s
# Warmup Iteration   2: 430493.050 ops/s
# Warmup Iteration   3: 505246.644 ops/s
# Warmup Iteration   4: 499834.914 ops/s
# Warmup Iteration   5: 487467.151 ops/s
# Warmup Iteration   6: 493866.724 ops/s
# Warmup Iteration   7: 501927.260 ops/s
# Warmup Iteration   8: 543243.589 ops/s
# Warmup Iteration   9: 493650.153 ops/s
# Warmup Iteration  10: 498125.528 ops/s
# Warmup Iteration  11: 525873.457 ops/s
# Warmup Iteration  12: 510226.344 ops/s
# Warmup Iteration  13: 515597.269 ops/s
# Warmup Iteration  14: 536686.624 ops/s
# Warmup Iteration  15: 499034.732 ops/s
# Warmup Iteration  16: 532616.408 ops/s
# Warmup Iteration  17: 517025.445 ops/s
# Warmup Iteration  18: 547426.414 ops/s
# Warmup Iteration  19: 524104.263 ops/s
# Warmup Iteration  20: 553631.962 ops/s
# Warmup Iteration  21: 525672.676 ops/s
# Warmup Iteration  22: 535593.353 ops/s
# Warmup Iteration  23: 554421.883 ops/s
# Warmup Iteration  24: 507337.612 ops/s
# Warmup Iteration  25: 539720.924 ops/s
# Warmup Iteration  26: 539947.643 ops/s
# Warmup Iteration  27: 525898.836 ops/s
# Warmup Iteration  28: 544650.600 ops/s
# Warmup Iteration  29: 558106.462 ops/s
# Warmup Iteration  30: 514253.750 ops/s
Iteration   1: 554402.379 ops/s
Iteration   2: 523893.083 ops/s
Iteration   3: 524427.017 ops/s
Iteration   4: 549003.262 ops/s
Iteration   5: 530504.143 ops/s
Iteration   6: 539866.850 ops/s
Iteration   7: 538867.191 ops/s
Iteration   8: 525367.015 ops/s
Iteration   9: 544315.170 ops/s
Iteration  10: 523440.724 ops/s
Iteration  11: 522453.031 ops/s
Iteration  12: 547027.786 ops/s
Iteration  13: 515437.398 ops/s
Iteration  14: 537018.069 ops/s
Iteration  15: 531099.125 ops/s
Iteration  16: 526001.751 ops/s
Iteration  17: 558120.145 ops/s
Iteration  18: 521205.447 ops/s
Iteration  19: 534598.189 ops/s
Iteration  20: 517826.559 ops/s
Iteration  21: 548274.369 ops/s
Iteration  22: 558871.219 ops/s
Iteration  23: 512204.186 ops/s
Iteration  24: 556327.339 ops/s
Iteration  25: 521348.272 ops/s
Iteration  26: 537597.369 ops/s
Iteration  27: 543922.516 ops/s
Iteration  28: 532220.344 ops/s
Iteration  29: 530185.080 ops/s
Iteration  30: 544006.238 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_doubleOnSubscribe":
  534994.375 ±(99.9%) 8851.352 ops/s [Average]
  (min, avg, max) = (512204.186, 534994.375, 558871.219), stdev = 13248.288
  CI (99.9%): [526143.024, 543845.727] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableDematerializeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  534994.375 ± 8851.352  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 74247.069 ops/s
# Warmup Iteration   2: 403936.052 ops/s
# Warmup Iteration   3: 446240.558 ops/s
# Warmup Iteration   4: 435864.551 ops/s
# Warmup Iteration   5: 410461.018 ops/s
# Warmup Iteration   6: 527592.255 ops/s
# Warmup Iteration   7: 522981.032 ops/s
# Warmup Iteration   8: 508553.269 ops/s
# Warmup Iteration   9: 529273.896 ops/s
# Warmup Iteration  10: 492767.514 ops/s
# Warmup Iteration  11: 506905.577 ops/s
# Warmup Iteration  12: 528124.165 ops/s
# Warmup Iteration  13: 499058.026 ops/s
# Warmup Iteration  14: 517092.750 ops/s
# Warmup Iteration  15: 516504.996 ops/s
# Warmup Iteration  16: 528678.786 ops/s
# Warmup Iteration  17: 554577.049 ops/s
# Warmup Iteration  18: 527487.584 ops/s
# Warmup Iteration  19: 531901.075 ops/s
# Warmup Iteration  20: 533820.642 ops/s
# Warmup Iteration  21: 540449.115 ops/s
# Warmup Iteration  22: 560076.552 ops/s
# Warmup Iteration  23: 516562.974 ops/s
# Warmup Iteration  24: 528672.562 ops/s
# Warmup Iteration  25: 541621.191 ops/s
# Warmup Iteration  26: 524640.162 ops/s
# Warmup Iteration  27: 545104.921 ops/s
# Warmup Iteration  28: 537610.399 ops/s
# Warmup Iteration  29: 534907.609 ops/s
# Warmup Iteration  30: 554305.825 ops/s
Iteration   1: 520093.455 ops/s
Iteration   2: 562872.169 ops/s
Iteration   3: 550926.068 ops/s
Iteration   4: 516188.777 ops/s
Iteration   5: 550661.975 ops/s
Iteration   6: 539339.080 ops/s
Iteration   7: 537998.191 ops/s
Iteration   8: 548639.191 ops/s
Iteration   9: 531234.618 ops/s
Iteration  10: 547458.437 ops/s
Iteration  11: 532884.832 ops/s
Iteration  12: 544902.208 ops/s
Iteration  13: 539943.926 ops/s
Iteration  14: 519087.379 ops/s
Iteration  15: 521846.211 ops/s
Iteration  16: 556168.440 ops/s
Iteration  17: 520667.508 ops/s
Iteration  18: 545458.159 ops/s
Iteration  19: 531670.898 ops/s
Iteration  20: 530184.782 ops/s
Iteration  21: 536790.858 ops/s
Iteration  22: 535503.471 ops/s
Iteration  23: 539345.675 ops/s
Iteration  24: 536533.832 ops/s
Iteration  25: 508997.734 ops/s
Iteration  26: 536574.968 ops/s
Iteration  27: 538867.207 ops/s
Iteration  28: 553553.797 ops/s
Iteration  29: 527388.370 ops/s
Iteration  30: 542346.100 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_doubleOnSubscribe":
  536804.277 ±(99.9%) 8471.228 ops/s [Average]
  (min, avg, max) = (508997.734, 536804.277, 562872.169), stdev = 12679.336
  CI (99.9%): [528333.049, 545275.505] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableFilterTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  536804.277 ± 8471.228  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109474.529 ops/s
# Warmup Iteration   2: 475016.092 ops/s
# Warmup Iteration   3: 485475.377 ops/s
# Warmup Iteration   4: 502805.878 ops/s
# Warmup Iteration   5: 512524.004 ops/s
# Warmup Iteration   6: 526687.683 ops/s
# Warmup Iteration   7: 497624.131 ops/s
# Warmup Iteration   8: 529109.759 ops/s
# Warmup Iteration   9: 510306.811 ops/s
# Warmup Iteration  10: 522168.358 ops/s
# Warmup Iteration  11: 514174.817 ops/s
# Warmup Iteration  12: 507311.549 ops/s
# Warmup Iteration  13: 503799.950 ops/s
# Warmup Iteration  14: 514932.977 ops/s
# Warmup Iteration  15: 522261.176 ops/s
# Warmup Iteration  16: 529722.711 ops/s
# Warmup Iteration  17: 547440.607 ops/s
# Warmup Iteration  18: 530534.412 ops/s
# Warmup Iteration  19: 560095.945 ops/s
# Warmup Iteration  20: 525813.468 ops/s
# Warmup Iteration  21: 555899.588 ops/s
# Warmup Iteration  22: 552177.748 ops/s
# Warmup Iteration  23: 533998.790 ops/s
# Warmup Iteration  24: 536200.535 ops/s
# Warmup Iteration  25: 553640.059 ops/s
# Warmup Iteration  26: 532742.086 ops/s
# Warmup Iteration  27: 555167.964 ops/s
# Warmup Iteration  28: 537331.311 ops/s
# Warmup Iteration  29: 547569.179 ops/s
# Warmup Iteration  30: 560585.394 ops/s
Iteration   1: 526973.972 ops/s
Iteration   2: 562286.349 ops/s
Iteration   3: 573190.408 ops/s
Iteration   4: 527626.424 ops/s
Iteration   5: 543609.098 ops/s
Iteration   6: 562537.899 ops/s
Iteration   7: 529517.825 ops/s
Iteration   8: 557422.694 ops/s
Iteration   9: 523630.475 ops/s
Iteration  10: 554905.127 ops/s
Iteration  11: 542699.190 ops/s
Iteration  12: 537030.922 ops/s
Iteration  13: 552187.832 ops/s
Iteration  14: 502548.342 ops/s
Iteration  15: 558049.383 ops/s
Iteration  16: 547575.195 ops/s
Iteration  17: 542247.814 ops/s
Iteration  18: 546776.168 ops/s
Iteration  19: 523306.783 ops/s
Iteration  20: 541535.868 ops/s
Iteration  21: 573494.083 ops/s
Iteration  22: 538952.863 ops/s
Iteration  23: 539148.598 ops/s
Iteration  24: 546911.976 ops/s
Iteration  25: 534654.659 ops/s
Iteration  26: 569631.579 ops/s
Iteration  27: 525374.689 ops/s
Iteration  28: 552795.367 ops/s
Iteration  29: 531693.747 ops/s
Iteration  30: 546516.150 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipTest._Benchmark.benchmark_doubleOnSubscribe":
  543827.716 ±(99.9%) 10925.943 ops/s [Average]
  (min, avg, max) = (502548.342, 543827.716, 573494.083), stdev = 16353.438
  CI (99.9%): [532901.773, 554753.659] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
ObservableSkipTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  543827.716 ± 10925.943  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.883 ops/s
# Warmup Iteration   2: 22861.329 ops/s
# Warmup Iteration   3: 61412.788 ops/s
# Warmup Iteration   4: 61899.442 ops/s
# Warmup Iteration   5: 52907.346 ops/s
# Warmup Iteration   6: 109736.329 ops/s
# Warmup Iteration   7: 166525.381 ops/s
# Warmup Iteration   8: 159864.595 ops/s
# Warmup Iteration   9: 179189.814 ops/s
# Warmup Iteration  10: 176099.516 ops/s
# Warmup Iteration  11: 177867.564 ops/s
# Warmup Iteration  12: 178749.401 ops/s
# Warmup Iteration  13: 173602.955 ops/s
# Warmup Iteration  14: 181482.948 ops/s
# Warmup Iteration  15: 172994.567 ops/s
# Warmup Iteration  16: 183719.205 ops/s
# Warmup Iteration  17: 176742.610 ops/s
# Warmup Iteration  18: 185649.481 ops/s
# Warmup Iteration  19: 178142.169 ops/s
# Warmup Iteration  20: 182099.607 ops/s
# Warmup Iteration  21: 189562.791 ops/s
# Warmup Iteration  22: 188567.407 ops/s
# Warmup Iteration  23: 175972.720 ops/s
# Warmup Iteration  24: 179866.808 ops/s
# Warmup Iteration  25: 177742.150 ops/s
# Warmup Iteration  26: 180358.428 ops/s
# Warmup Iteration  27: 184099.578 ops/s
# Warmup Iteration  28: 174915.023 ops/s
# Warmup Iteration  29: 186391.984 ops/s
# Warmup Iteration  30: 179200.733 ops/s
Iteration   1: 179280.753 ops/s
Iteration   2: 181623.934 ops/s
Iteration   3: 173893.942 ops/s
Iteration   4: 184364.726 ops/s
Iteration   5: 181019.868 ops/s
Iteration   6: 178462.063 ops/s
Iteration   7: 186470.279 ops/s
Iteration   8: 175371.095 ops/s
Iteration   9: 183995.694 ops/s
Iteration  10: 183703.532 ops/s
Iteration  11: 172748.392 ops/s
Iteration  12: 179086.112 ops/s
Iteration  13: 179781.542 ops/s
Iteration  14: 177445.285 ops/s
Iteration  15: 181622.550 ops/s
Iteration  16: 179846.079 ops/s
Iteration  17: 189236.814 ops/s
Iteration  18: 179449.168 ops/s
Iteration  19: 182735.693 ops/s
Iteration  20: 179753.207 ops/s
Iteration  21: 180879.461 ops/s
Iteration  22: 186271.459 ops/s
Iteration  23: 176414.530 ops/s
Iteration  24: 184890.802 ops/s
Iteration  25: 184267.064 ops/s
Iteration  26: 179969.701 ops/s
Iteration  27: 181515.841 ops/s
Iteration  28: 179092.906 ops/s
Iteration  29: 181128.512 ops/s
Iteration  30: 183537.829 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_badSource":
  180928.628 ±(99.9%) 2474.523 ops/s [Average]
  (min, avg, max) = (172748.392, 180928.628, 189236.814), stdev = 3703.750
  CI (99.9%): [178454.105, 183403.151] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ObservableDebounceTest._Benchmark.benchmark_badSource  thrpt   30  180928.628 ± 2474.523  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_wrapCustom$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_wrapCustom

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2520366.700 ops/s
# Warmup Iteration   2: 5249362.313 ops/s
# Warmup Iteration   3: 7243209.363 ops/s
# Warmup Iteration   4: 7400946.849 ops/s
# Warmup Iteration   5: 7201804.885 ops/s
# Warmup Iteration   6: 7583233.760 ops/s
# Warmup Iteration   7: 7032880.227 ops/s
# Warmup Iteration   8: 7501654.899 ops/s
# Warmup Iteration   9: 7149630.300 ops/s
# Warmup Iteration  10: 7374093.223 ops/s
# Warmup Iteration  11: 7217810.053 ops/s
# Warmup Iteration  12: 7314248.896 ops/s
# Warmup Iteration  13: 7376259.139 ops/s
# Warmup Iteration  14: 7208619.754 ops/s
# Warmup Iteration  15: 7463233.943 ops/s
# Warmup Iteration  16: 7178965.096 ops/s
# Warmup Iteration  17: 7173660.225 ops/s
# Warmup Iteration  18: 7337589.931 ops/s
# Warmup Iteration  19: 7050042.536 ops/s
# Warmup Iteration  20: 7412458.437 ops/s
# Warmup Iteration  21: 7270236.450 ops/s
# Warmup Iteration  22: 7138021.032 ops/s
# Warmup Iteration  23: 7482233.767 ops/s
# Warmup Iteration  24: 7327712.082 ops/s
# Warmup Iteration  25: 7151990.863 ops/s
# Warmup Iteration  26: 7285926.872 ops/s
# Warmup Iteration  27: 7178616.994 ops/s
# Warmup Iteration  28: 7307045.733 ops/s
# Warmup Iteration  29: 7489981.563 ops/s
# Warmup Iteration  30: 7284314.088 ops/s
Iteration   1: 7370609.299 ops/s
Iteration   2: 7323822.985 ops/s
Iteration   3: 7454154.812 ops/s
Iteration   4: 7132131.705 ops/s
Iteration   5: 7357355.572 ops/s
Iteration   6: 7214194.441 ops/s
Iteration   7: 7225860.774 ops/s
Iteration   8: 7402748.471 ops/s
Iteration   9: 7198388.270 ops/s
Iteration  10: 7507284.917 ops/s
Iteration  11: 7174706.728 ops/s
Iteration  12: 7312452.538 ops/s
Iteration  13: 7140053.751 ops/s
Iteration  14: 7339767.920 ops/s
Iteration  15: 7574434.260 ops/s
Iteration  16: 7219625.828 ops/s
Iteration  17: 7118201.439 ops/s
Iteration  18: 7692697.985 ops/s
Iteration  19: 7128414.747 ops/s
Iteration  20: 7524011.578 ops/s
Iteration  21: 7110464.142 ops/s
Iteration  22: 7725552.259 ops/s
Iteration  23: 7513618.145 ops/s
Iteration  24: 7143227.100 ops/s
Iteration  25: 6009682.228 ops/s
Iteration  26: 7166940.192 ops/s
Iteration  27: 7521782.380 ops/s
Iteration  28: 7248244.765 ops/s
Iteration  29: 7569232.963 ops/s
Iteration  30: 7406098.875 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_wrapCustom":
  7294192.036 ±(99.9%) 201338.889 ops/s [Average]
  (min, avg, max) = (6009682.228, 7294192.036, 7725552.259), stdev = 301354.593
  CI (99.9%): [7092853.147, 7495530.924] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_wrapCustom  thrpt   30  7294192.036 ± 201338.889  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_unsafeCreate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_unsafeCreate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1917299.131 ops/s
# Warmup Iteration   2: 5051743.239 ops/s
# Warmup Iteration   3: 6736031.313 ops/s
# Warmup Iteration   4: 7107665.154 ops/s
# Warmup Iteration   5: 7121797.736 ops/s
# Warmup Iteration   6: 7039032.194 ops/s
# Warmup Iteration   7: 7084804.228 ops/s
# Warmup Iteration   8: 7422664.604 ops/s
# Warmup Iteration   9: 7245137.852 ops/s
# Warmup Iteration  10: 7107119.675 ops/s
# Warmup Iteration  11: 6855425.111 ops/s
# Warmup Iteration  12: 6838679.838 ops/s
# Warmup Iteration  13: 7010367.373 ops/s
# Warmup Iteration  14: 7475390.695 ops/s
# Warmup Iteration  15: 7017269.654 ops/s
# Warmup Iteration  16: 7343547.820 ops/s
# Warmup Iteration  17: 7118652.139 ops/s
# Warmup Iteration  18: 6974809.695 ops/s
# Warmup Iteration  19: 7117636.019 ops/s
# Warmup Iteration  20: 7247668.002 ops/s
# Warmup Iteration  21: 6791219.513 ops/s
# Warmup Iteration  22: 7013518.044 ops/s
# Warmup Iteration  23: 7304084.233 ops/s
# Warmup Iteration  24: 7090161.846 ops/s
# Warmup Iteration  25: 6843274.311 ops/s
# Warmup Iteration  26: 7276619.182 ops/s
# Warmup Iteration  27: 6889243.396 ops/s
# Warmup Iteration  28: 7007334.920 ops/s
# Warmup Iteration  29: 7252568.302 ops/s
# Warmup Iteration  30: 6993554.763 ops/s
Iteration   1: 7190566.689 ops/s
Iteration   2: 7042122.230 ops/s
Iteration   3: 6760880.814 ops/s
Iteration   4: 7269423.245 ops/s
Iteration   5: 6639585.951 ops/s
Iteration   6: 7039450.453 ops/s
Iteration   7: 7153516.876 ops/s
Iteration   8: 6769183.705 ops/s
Iteration   9: 6932802.617 ops/s
Iteration  10: 7013949.591 ops/s
Iteration  11: 6929926.798 ops/s
Iteration  12: 7133882.104 ops/s
Iteration  13: 6916792.264 ops/s
Iteration  14: 6908482.368 ops/s
Iteration  15: 7205171.095 ops/s
Iteration  16: 6929252.990 ops/s
Iteration  17: 7304071.545 ops/s
Iteration  18: 7008152.828 ops/s
Iteration  19: 7176592.509 ops/s
Iteration  20: 6785168.809 ops/s
Iteration  21: 7427521.056 ops/s
Iteration  22: 7303854.442 ops/s
Iteration  23: 6988392.799 ops/s
Iteration  24: 7265867.004 ops/s
Iteration  25: 6716159.593 ops/s
Iteration  26: 7181385.328 ops/s
Iteration  27: 6926219.356 ops/s
Iteration  28: 6866328.651 ops/s
Iteration  29: 7175108.761 ops/s
Iteration  30: 6837181.787 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_unsafeCreate":
  7026566.475 ±(99.9%) 133314.739 ops/s [Average]
  (min, avg, max) = (6639585.951, 7026566.475, 7427521.056), stdev = 199539.241
  CI (99.9%): [6893251.736, 7159881.214] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_unsafeCreate  thrpt   30  7026566.475 ± 133314.739  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.835 ops/s
# Warmup Iteration   2: 22777.161 ops/s
# Warmup Iteration   3: 63311.744 ops/s
# Warmup Iteration   4: 74527.640 ops/s
# Warmup Iteration   5: 149272.179 ops/s
# Warmup Iteration   6: 245604.180 ops/s
# Warmup Iteration   7: 241908.912 ops/s
# Warmup Iteration   8: 236606.633 ops/s
# Warmup Iteration   9: 231054.569 ops/s
# Warmup Iteration  10: 249059.174 ops/s
# Warmup Iteration  11: 257179.784 ops/s
# Warmup Iteration  12: 252155.433 ops/s
# Warmup Iteration  13: 224450.097 ops/s
# Warmup Iteration  14: 253798.864 ops/s
# Warmup Iteration  15: 250186.640 ops/s
# Warmup Iteration  16: 250317.683 ops/s
# Warmup Iteration  17: 250349.237 ops/s
# Warmup Iteration  18: 253442.457 ops/s
# Warmup Iteration  19: 262322.920 ops/s
# Warmup Iteration  20: 246495.970 ops/s
# Warmup Iteration  21: 259653.773 ops/s
# Warmup Iteration  22: 246787.731 ops/s
# Warmup Iteration  23: 251648.332 ops/s
# Warmup Iteration  24: 260671.929 ops/s
# Warmup Iteration  25: 250455.568 ops/s
# Warmup Iteration  26: 250972.050 ops/s
# Warmup Iteration  27: 265623.438 ops/s
# Warmup Iteration  28: 247163.612 ops/s
# Warmup Iteration  29: 257676.947 ops/s
# Warmup Iteration  30: 264793.378 ops/s
Iteration   1: 254904.296 ops/s
Iteration   2: 252708.279 ops/s
Iteration   3: 251083.864 ops/s
Iteration   4: 258486.788 ops/s
Iteration   5: 248236.092 ops/s
Iteration   6: 252985.412 ops/s
Iteration   7: 249584.650 ops/s
Iteration   8: 244636.247 ops/s
Iteration   9: 256946.015 ops/s
Iteration  10: 246942.482 ops/s
Iteration  11: 259789.348 ops/s
Iteration  12: 246885.910 ops/s
Iteration  13: 257101.595 ops/s
Iteration  14: 250583.791 ops/s
Iteration  15: 252315.552 ops/s
Iteration  16: 245799.051 ops/s
Iteration  17: 260919.900 ops/s
Iteration  18: 250684.682 ops/s
Iteration  19: 236606.465 ops/s
Iteration  20: 246116.386 ops/s
Iteration  21: 249226.588 ops/s
Iteration  22: 258375.197 ops/s
Iteration  23: 254411.836 ops/s
Iteration  24: 258287.221 ops/s
Iteration  25: 263124.252 ops/s
Iteration  26: 250549.398 ops/s
Iteration  27: 266192.852 ops/s
Iteration  28: 244154.861 ops/s
Iteration  29: 258535.682 ops/s
Iteration  30: 249317.699 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_doubleOnSubscribe":
  252516.413 ±(99.9%) 4311.704 ops/s [Average]
  (min, avg, max) = (236606.465, 252516.413, 266192.852), stdev = 6453.556
  CI (99.9%): [248204.709, 256828.117] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableDoOnEachTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  252516.413 ± 4311.704  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DisposableLambdaObserverTest._Benchmark.benchmark_disposeCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DisposableLambdaObserverTest._Benchmark.benchmark_disposeCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 80767.524 ops/s
# Warmup Iteration   2: 224393.415 ops/s
# Warmup Iteration   3: 240419.875 ops/s
# Warmup Iteration   4: 224572.323 ops/s
# Warmup Iteration   5: 259058.093 ops/s
# Warmup Iteration   6: 265772.225 ops/s
# Warmup Iteration   7: 266714.145 ops/s
# Warmup Iteration   8: 275042.720 ops/s
# Warmup Iteration   9: 249797.572 ops/s
# Warmup Iteration  10: 269006.955 ops/s
# Warmup Iteration  11: 266640.164 ops/s
# Warmup Iteration  12: 273847.480 ops/s
# Warmup Iteration  13: 257881.835 ops/s
# Warmup Iteration  14: 268641.288 ops/s
# Warmup Iteration  15: 263252.920 ops/s
# Warmup Iteration  16: 260242.668 ops/s
# Warmup Iteration  17: 269854.509 ops/s
# Warmup Iteration  18: 285268.449 ops/s
# Warmup Iteration  19: 271706.504 ops/s
# Warmup Iteration  20: 275617.567 ops/s
# Warmup Iteration  21: 279400.378 ops/s
# Warmup Iteration  22: 273026.299 ops/s
# Warmup Iteration  23: 275970.302 ops/s
# Warmup Iteration  24: 269562.809 ops/s
# Warmup Iteration  25: 274600.274 ops/s
# Warmup Iteration  26: 286433.391 ops/s
# Warmup Iteration  27: 272068.174 ops/s
# Warmup Iteration  28: 282120.561 ops/s
# Warmup Iteration  29: 272410.530 ops/s
# Warmup Iteration  30: 280290.527 ops/s
Iteration   1: 280542.200 ops/s
Iteration   2: 265571.801 ops/s
Iteration   3: 277593.976 ops/s
Iteration   4: 273779.154 ops/s
Iteration   5: 294001.662 ops/s
Iteration   6: 261319.934 ops/s
Iteration   7: 274814.538 ops/s
Iteration   8: 282757.200 ops/s
Iteration   9: 272146.750 ops/s
Iteration  10: 277084.453 ops/s
Iteration  11: 266922.558 ops/s
Iteration  12: 283625.667 ops/s
Iteration  13: 278969.653 ops/s
Iteration  14: 277921.464 ops/s
Iteration  15: 280053.639 ops/s
Iteration  16: 278120.059 ops/s
Iteration  17: 270962.210 ops/s
Iteration  18: 287641.502 ops/s
Iteration  19: 273021.987 ops/s
Iteration  20: 279821.052 ops/s
Iteration  21: 272187.306 ops/s
Iteration  22: 288945.491 ops/s
Iteration  23: 277699.895 ops/s
Iteration  24: 273476.853 ops/s
Iteration  25: 276864.369 ops/s
Iteration  26: 269682.262 ops/s
Iteration  27: 289666.551 ops/s
Iteration  28: 272312.259 ops/s
Iteration  29: 273810.839 ops/s
Iteration  30: 281933.507 ops/s


Result "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserverTest._Benchmark.benchmark_disposeCrash":
  277108.360 ±(99.9%) 4858.274 ops/s [Average]
  (min, avg, max) = (261319.934, 277108.360, 294001.662), stdev = 7271.636
  CI (99.9%): [272250.086, 281966.634] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
DisposableLambdaObserverTest._Benchmark.benchmark_disposeCrash  thrpt   30  277108.360 ± 4858.274  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapValueDifferentType$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapValueDifferentType

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1117176.575 ops/s
# Warmup Iteration   2: 4097714.694 ops/s
# Warmup Iteration   3: 5999849.885 ops/s
# Warmup Iteration   4: 5839054.943 ops/s
# Warmup Iteration   5: 6117747.864 ops/s
# Warmup Iteration   6: 5915580.996 ops/s
# Warmup Iteration   7: 6014149.075 ops/s
# Warmup Iteration   8: 6099256.180 ops/s
# Warmup Iteration   9: 5836237.966 ops/s
# Warmup Iteration  10: 5845082.310 ops/s
# Warmup Iteration  11: 6075331.673 ops/s
# Warmup Iteration  12: 5940124.430 ops/s
# Warmup Iteration  13: 6131032.996 ops/s
# Warmup Iteration  14: 6016458.716 ops/s
# Warmup Iteration  15: 5880501.396 ops/s
# Warmup Iteration  16: 6157645.358 ops/s
# Warmup Iteration  17: 5828355.567 ops/s
# Warmup Iteration  18: 6066919.896 ops/s
# Warmup Iteration  19: 5792693.050 ops/s
# Warmup Iteration  20: 6016889.810 ops/s
# Warmup Iteration  21: 6102406.521 ops/s
# Warmup Iteration  22: 5999743.661 ops/s
# Warmup Iteration  23: 6055183.096 ops/s
# Warmup Iteration  24: 6087997.047 ops/s
# Warmup Iteration  25: 6291334.845 ops/s
# Warmup Iteration  26: 5775036.710 ops/s
# Warmup Iteration  27: 6212499.218 ops/s
# Warmup Iteration  28: 6272728.618 ops/s
# Warmup Iteration  29: 5814760.022 ops/s
# Warmup Iteration  30: 6114034.975 ops/s
Iteration   1: 5893811.357 ops/s
Iteration   2: 6180206.054 ops/s
Iteration   3: 6124786.523 ops/s
Iteration   4: 5873377.222 ops/s
Iteration   5: 6176272.710 ops/s
Iteration   6: 5936753.023 ops/s
Iteration   7: 6111732.679 ops/s
Iteration   8: 6090899.918 ops/s
Iteration   9: 6301340.331 ops/s
Iteration  10: 6073839.741 ops/s
Iteration  11: 6019694.389 ops/s
Iteration  12: 6078505.151 ops/s
Iteration  13: 5970754.950 ops/s
Iteration  14: 4985011.580 ops/s
Iteration  15: 6139191.556 ops/s
Iteration  16: 6055163.082 ops/s
Iteration  17: 5916148.758 ops/s
Iteration  18: 6146131.425 ops/s
Iteration  19: 5955181.025 ops/s
Iteration  20: 6271146.451 ops/s
Iteration  21: 5898447.572 ops/s
Iteration  22: 6192147.760 ops/s
Iteration  23: 6014340.232 ops/s
Iteration  24: 6145713.440 ops/s
Iteration  25: 6132222.847 ops/s
Iteration  26: 5860872.830 ops/s
Iteration  27: 6130818.204 ops/s
Iteration  28: 5853050.366 ops/s
Iteration  29: 5966287.412 ops/s
Iteration  30: 5932440.196 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapValueDifferentType":
  6014209.626 ±(99.9%) 153722.765 ops/s [Average]
  (min, avg, max) = (4985011.580, 6014209.626, 6301340.331), stdev = 230085.016
  CI (99.9%): [5860486.861, 6167932.391] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
SingleConcatMapTest._Benchmark.benchmark_concatMapValueDifferentType  thrpt   30  6014209.626 ± 153722.765  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 959632.023 ops/s
# Warmup Iteration   2: 4217580.816 ops/s
# Warmup Iteration   3: 5880142.389 ops/s
# Warmup Iteration   4: 5783921.729 ops/s
# Warmup Iteration   5: 6296670.732 ops/s
# Warmup Iteration   6: 6014705.966 ops/s
# Warmup Iteration   7: 6046512.689 ops/s
# Warmup Iteration   8: 6026831.480 ops/s
# Warmup Iteration   9: 5932663.703 ops/s
# Warmup Iteration  10: 6033677.290 ops/s
# Warmup Iteration  11: 6073489.993 ops/s
# Warmup Iteration  12: 5840707.988 ops/s
# Warmup Iteration  13: 6132584.317 ops/s
# Warmup Iteration  14: 6034206.963 ops/s
# Warmup Iteration  15: 6050403.563 ops/s
# Warmup Iteration  16: 6238710.255 ops/s
# Warmup Iteration  17: 6001321.550 ops/s
# Warmup Iteration  18: 5973972.703 ops/s
# Warmup Iteration  19: 6185392.672 ops/s
# Warmup Iteration  20: 5915183.689 ops/s
# Warmup Iteration  21: 5976072.588 ops/s
# Warmup Iteration  22: 6174983.539 ops/s
# Warmup Iteration  23: 6129969.081 ops/s
# Warmup Iteration  24: 6157191.153 ops/s
# Warmup Iteration  25: 6058099.167 ops/s
# Warmup Iteration  26: 5858297.218 ops/s
# Warmup Iteration  27: 6046097.405 ops/s
# Warmup Iteration  28: 6291205.514 ops/s
# Warmup Iteration  29: 5947470.928 ops/s
# Warmup Iteration  30: 6189763.426 ops/s
Iteration   1: 5964311.288 ops/s
Iteration   2: 6243912.831 ops/s
Iteration   3: 6107098.854 ops/s
Iteration   4: 5996293.584 ops/s
Iteration   5: 6224951.313 ops/s
Iteration   6: 5861909.851 ops/s
Iteration   7: 5916608.314 ops/s
Iteration   8: 6239028.442 ops/s
Iteration   9: 5900324.139 ops/s
Iteration  10: 6317293.200 ops/s
Iteration  11: 5929919.084 ops/s
Iteration  12: 6014843.745 ops/s
Iteration  13: 5970960.708 ops/s
Iteration  14: 5867258.347 ops/s
Iteration  15: 6130336.632 ops/s
Iteration  16: 6133528.522 ops/s
Iteration  17: 5925685.955 ops/s
Iteration  18: 6241644.573 ops/s
Iteration  19: 5986556.534 ops/s
Iteration  20: 6285813.943 ops/s
Iteration  21: 5951600.941 ops/s
Iteration  22: 5937148.761 ops/s
Iteration  23: 6203577.349 ops/s
Iteration  24: 5822314.634 ops/s
Iteration  25: 6023057.773 ops/s
Iteration  26: 5885479.174 ops/s
Iteration  27: 6333531.161 ops/s
Iteration  28: 6069114.016 ops/s
Iteration  29: 5895953.156 ops/s
Iteration  30: 6328000.825 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapValue":
  6056935.255 ±(99.9%) 107512.323 ops/s [Average]
  (min, avg, max) = (5822314.634, 6056935.255, 6333531.161), stdev = 160919.395
  CI (99.9%): [5949422.932, 6164447.577] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
SingleConcatMapTest._Benchmark.benchmark_concatMapValue  thrpt   30  6056935.255 ± 107512.323  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapValueDifferentType$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapValueDifferentType

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1018458.451 ops/s
# Warmup Iteration   2: 4073914.735 ops/s
# Warmup Iteration   3: 5703812.731 ops/s
# Warmup Iteration   4: 5924316.140 ops/s
# Warmup Iteration   5: 5984149.664 ops/s
# Warmup Iteration   6: 5954284.767 ops/s
# Warmup Iteration   7: 6068070.818 ops/s
# Warmup Iteration   8: 5914414.385 ops/s
# Warmup Iteration   9: 6241730.325 ops/s
# Warmup Iteration  10: 5860322.582 ops/s
# Warmup Iteration  11: 5873182.643 ops/s
# Warmup Iteration  12: 6248735.072 ops/s
# Warmup Iteration  13: 5835619.510 ops/s
# Warmup Iteration  14: 6219587.735 ops/s
# Warmup Iteration  15: 5943949.636 ops/s
# Warmup Iteration  16: 6031494.000 ops/s
# Warmup Iteration  17: 5891694.443 ops/s
# Warmup Iteration  18: 6082223.673 ops/s
# Warmup Iteration  19: 6184258.855 ops/s
# Warmup Iteration  20: 5914046.472 ops/s
# Warmup Iteration  21: 5995202.841 ops/s
# Warmup Iteration  22: 6008031.269 ops/s
# Warmup Iteration  23: 6240348.232 ops/s
# Warmup Iteration  24: 5894840.048 ops/s
# Warmup Iteration  25: 5888283.943 ops/s
# Warmup Iteration  26: 6140698.813 ops/s
# Warmup Iteration  27: 6039707.666 ops/s
# Warmup Iteration  28: 5988241.260 ops/s
# Warmup Iteration  29: 6197923.459 ops/s
# Warmup Iteration  30: 5702868.975 ops/s
Iteration   1: 6175691.916 ops/s
Iteration   2: 6160285.016 ops/s
Iteration   3: 5853569.941 ops/s
Iteration   4: 6157121.114 ops/s
Iteration   5: 5963661.182 ops/s
Iteration   6: 5997503.516 ops/s
Iteration   7: 5922455.540 ops/s
Iteration   8: 5989721.916 ops/s
Iteration   9: 4548987.077 ops/s
Iteration  10: 5839638.856 ops/s
Iteration  11: 6286744.903 ops/s
Iteration  12: 6155202.983 ops/s
Iteration  13: 5995522.912 ops/s
Iteration  14: 6062388.959 ops/s
Iteration  15: 5867177.184 ops/s
Iteration  16: 5942195.165 ops/s
Iteration  17: 6309410.792 ops/s
Iteration  18: 6048737.601 ops/s
Iteration  19: 5872019.118 ops/s
Iteration  20: 6147401.635 ops/s
Iteration  21: 5921736.337 ops/s
Iteration  22: 5941265.361 ops/s
Iteration  23: 6146750.501 ops/s
Iteration  24: 5744730.143 ops/s
Iteration  25: 6375117.104 ops/s
Iteration  26: 6260032.738 ops/s
Iteration  27: 5813099.754 ops/s
Iteration  28: 5958615.507 ops/s
Iteration  29: 5978943.593 ops/s
Iteration  30: 6054058.290 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapValueDifferentType":
  5982992.888 ±(99.9%) 209249.780 ops/s [Average]
  (min, avg, max) = (4548987.077, 5982992.888, 6375117.104), stdev = 313195.244
  CI (99.9%): [5773743.108, 6192242.669] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
SingleFlatMapTest._Benchmark.benchmark_flatMapValueDifferentType  thrpt   30  5982992.888 ± 209249.780  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1033407.373 ops/s
# Warmup Iteration   2: 4055204.175 ops/s
# Warmup Iteration   3: 5683789.744 ops/s
# Warmup Iteration   4: 6004824.050 ops/s
# Warmup Iteration   5: 6090162.677 ops/s
# Warmup Iteration   6: 5754313.724 ops/s
# Warmup Iteration   7: 6249931.694 ops/s
# Warmup Iteration   8: 6248593.806 ops/s
# Warmup Iteration   9: 5829898.061 ops/s
# Warmup Iteration  10: 6157380.801 ops/s
# Warmup Iteration  11: 6100485.832 ops/s
# Warmup Iteration  12: 5973120.854 ops/s
# Warmup Iteration  13: 6144052.523 ops/s
# Warmup Iteration  14: 5880922.461 ops/s
# Warmup Iteration  15: 6225385.925 ops/s
# Warmup Iteration  16: 6153863.910 ops/s
# Warmup Iteration  17: 5894989.877 ops/s
# Warmup Iteration  18: 6103446.144 ops/s
# Warmup Iteration  19: 6235661.582 ops/s
# Warmup Iteration  20: 5955623.233 ops/s
# Warmup Iteration  21: 6063851.012 ops/s
# Warmup Iteration  22: 6028380.583 ops/s
# Warmup Iteration  23: 6180790.962 ops/s
# Warmup Iteration  24: 5894644.548 ops/s
# Warmup Iteration  25: 5927061.262 ops/s
# Warmup Iteration  26: 6085145.616 ops/s
# Warmup Iteration  27: 5920231.987 ops/s
# Warmup Iteration  28: 6429258.212 ops/s
# Warmup Iteration  29: 5956185.371 ops/s
# Warmup Iteration  30: 5973755.307 ops/s
Iteration   1: 6152012.052 ops/s
Iteration   2: 5889371.548 ops/s
Iteration   3: 6213271.802 ops/s
Iteration   4: 6081389.049 ops/s
Iteration   5: 5941839.105 ops/s
Iteration   6: 6053893.619 ops/s
Iteration   7: 6065481.390 ops/s
Iteration   8: 6339622.468 ops/s
Iteration   9: 5871034.013 ops/s
Iteration  10: 6099722.387 ops/s
Iteration  11: 6089944.411 ops/s
Iteration  12: 6177933.045 ops/s
Iteration  13: 6112048.088 ops/s
Iteration  14: 6146308.862 ops/s
Iteration  15: 6013329.823 ops/s
Iteration  16: 6101707.284 ops/s
Iteration  17: 6175382.513 ops/s
Iteration  18: 5899877.978 ops/s
Iteration  19: 5984147.582 ops/s
Iteration  20: 6124071.807 ops/s
Iteration  21: 5813458.851 ops/s
Iteration  22: 6175859.253 ops/s
Iteration  23: 5889672.533 ops/s
Iteration  24: 6037758.352 ops/s
Iteration  25: 5849337.179 ops/s
Iteration  26: 5972794.193 ops/s
Iteration  27: 6153791.606 ops/s
Iteration  28: 5897970.674 ops/s
Iteration  29: 5979577.061 ops/s
Iteration  30: 6196360.128 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapValue":
  6049965.622 ±(99.9%) 86090.437 ops/s [Average]
  (min, avg, max) = (5813458.851, 6049965.622, 6339622.468), stdev = 128856.124
  CI (99.9%): [5963875.184, 6136056.059] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
SingleFlatMapTest._Benchmark.benchmark_flatMapValue  thrpt   30  6049965.622 ± 86090.437  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeSingleSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeSingleSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2134078.491 ops/s
# Warmup Iteration   2: 4421471.531 ops/s
# Warmup Iteration   3: 5952244.277 ops/s
# Warmup Iteration   4: 6050124.199 ops/s
# Warmup Iteration   5: 6229441.017 ops/s
# Warmup Iteration   6: 5910476.583 ops/s
# Warmup Iteration   7: 6132052.149 ops/s
# Warmup Iteration   8: 6074780.677 ops/s
# Warmup Iteration   9: 6131057.557 ops/s
# Warmup Iteration  10: 6224338.077 ops/s
# Warmup Iteration  11: 5853582.142 ops/s
# Warmup Iteration  12: 6409303.339 ops/s
# Warmup Iteration  13: 5883832.033 ops/s
# Warmup Iteration  14: 6329402.653 ops/s
# Warmup Iteration  15: 5931865.420 ops/s
# Warmup Iteration  16: 6159607.659 ops/s
# Warmup Iteration  17: 6097282.976 ops/s
# Warmup Iteration  18: 6059890.621 ops/s
# Warmup Iteration  19: 6258585.144 ops/s
# Warmup Iteration  20: 6009383.808 ops/s
# Warmup Iteration  21: 6291417.700 ops/s
# Warmup Iteration  22: 6041739.108 ops/s
# Warmup Iteration  23: 6066157.613 ops/s
# Warmup Iteration  24: 6225546.569 ops/s
# Warmup Iteration  25: 6101793.236 ops/s
# Warmup Iteration  26: 6189092.164 ops/s
# Warmup Iteration  27: 6177132.182 ops/s
# Warmup Iteration  28: 6112861.082 ops/s
# Warmup Iteration  29: 6046992.587 ops/s
# Warmup Iteration  30: 6343408.986 ops/s
Iteration   1: 5904439.740 ops/s
Iteration   2: 6226635.890 ops/s
Iteration   3: 6007148.944 ops/s
Iteration   4: 5021349.872 ops/s
Iteration   5: 6243453.554 ops/s
Iteration   6: 6077850.212 ops/s
Iteration   7: 6086247.244 ops/s
Iteration   8: 6254940.577 ops/s
Iteration   9: 5932490.405 ops/s
Iteration  10: 6235785.788 ops/s
Iteration  11: 5942919.773 ops/s
Iteration  12: 6141286.778 ops/s
Iteration  13: 6053656.548 ops/s
Iteration  14: 6030696.234 ops/s
Iteration  15: 6252855.049 ops/s
Iteration  16: 6123058.698 ops/s
Iteration  17: 6237288.235 ops/s
Iteration  18: 5889645.279 ops/s
Iteration  19: 6150301.090 ops/s
Iteration  20: 6018878.020 ops/s
Iteration  21: 6169278.445 ops/s
Iteration  22: 6084227.544 ops/s
Iteration  23: 6179034.399 ops/s
Iteration  24: 6248396.757 ops/s
Iteration  25: 6114333.916 ops/s
Iteration  26: 5963312.067 ops/s
Iteration  27: 6192393.628 ops/s
Iteration  28: 5925220.971 ops/s
Iteration  29: 6382959.446 ops/s
Iteration  30: 5952692.344 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeSingleSingle":
  6068092.582 ±(99.9%) 157426.158 ops/s [Average]
  (min, avg, max) = (5021349.872, 6068092.582, 6382959.446), stdev = 235628.079
  CI (99.9%): [5910666.424, 6225518.739] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
SingleMergeTest._Benchmark.benchmark_mergeSingleSingle  thrpt   30  6068092.582 ± 157426.158  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_mappedSingleOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_mappedSingleOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 251007.655 ops/s
# Warmup Iteration   2: 515913.525 ops/s
# Warmup Iteration   3: 615596.092 ops/s
# Warmup Iteration   4: 606648.277 ops/s
# Warmup Iteration   5: 626018.457 ops/s
# Warmup Iteration   6: 592893.009 ops/s
# Warmup Iteration   7: 611179.066 ops/s
# Warmup Iteration   8: 619982.479 ops/s
# Warmup Iteration   9: 630675.978 ops/s
# Warmup Iteration  10: 606330.624 ops/s
# Warmup Iteration  11: 606343.894 ops/s
# Warmup Iteration  12: 571815.602 ops/s
# Warmup Iteration  13: 598351.005 ops/s
# Warmup Iteration  14: 609004.132 ops/s
# Warmup Iteration  15: 624129.243 ops/s
# Warmup Iteration  16: 647258.992 ops/s
# Warmup Iteration  17: 637013.760 ops/s
# Warmup Iteration  18: 625079.969 ops/s
# Warmup Iteration  19: 652935.366 ops/s
# Warmup Iteration  20: 640462.180 ops/s
# Warmup Iteration  21: 664739.097 ops/s
# Warmup Iteration  22: 595681.316 ops/s
# Warmup Iteration  23: 651876.903 ops/s
# Warmup Iteration  24: 616063.319 ops/s
# Warmup Iteration  25: 628973.607 ops/s
# Warmup Iteration  26: 647535.207 ops/s
# Warmup Iteration  27: 632537.079 ops/s
# Warmup Iteration  28: 619860.062 ops/s
# Warmup Iteration  29: 630048.953 ops/s
# Warmup Iteration  30: 653309.113 ops/s
Iteration   1: 650440.714 ops/s
Iteration   2: 662907.134 ops/s
Iteration   3: 604828.922 ops/s
Iteration   4: 653157.948 ops/s
Iteration   5: 668686.106 ops/s
Iteration   6: 627367.551 ops/s
Iteration   7: 655250.504 ops/s
Iteration   8: 650749.220 ops/s
Iteration   9: 650506.633 ops/s
Iteration  10: 672818.199 ops/s
Iteration  11: 632870.281 ops/s
Iteration  12: 658791.987 ops/s
Iteration  13: 631038.714 ops/s
Iteration  14: 643441.309 ops/s
Iteration  15: 651288.248 ops/s
Iteration  16: 629627.758 ops/s
Iteration  17: 654955.360 ops/s
Iteration  18: 627131.546 ops/s
Iteration  19: 665384.396 ops/s
Iteration  20: 632760.982 ops/s
Iteration  21: 653929.627 ops/s
Iteration  22: 629508.774 ops/s
Iteration  23: 639634.634 ops/s
Iteration  24: 656221.359 ops/s
Iteration  25: 622095.298 ops/s
Iteration  26: 673422.608 ops/s
Iteration  27: 638835.906 ops/s
Iteration  28: 636156.276 ops/s
Iteration  29: 668139.772 ops/s
Iteration  30: 634120.207 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_mappedSingleOnError":
  645868.932 ±(99.9%) 11230.007 ops/s [Average]
  (min, avg, max) = (604828.922, 645868.932, 673422.608), stdev = 16808.547
  CI (99.9%): [634638.925, 657098.939] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
SingleConcatMapTest._Benchmark.benchmark_mappedSingleOnError  thrpt   30  645868.932 ± 11230.007  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_mappedSingleOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_mappedSingleOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 272694.702 ops/s
# Warmup Iteration   2: 512272.706 ops/s
# Warmup Iteration   3: 617421.664 ops/s
# Warmup Iteration   4: 577079.233 ops/s
# Warmup Iteration   5: 563319.467 ops/s
# Warmup Iteration   6: 632135.544 ops/s
# Warmup Iteration   7: 588776.575 ops/s
# Warmup Iteration   8: 631903.279 ops/s
# Warmup Iteration   9: 588397.467 ops/s
# Warmup Iteration  10: 591122.087 ops/s
# Warmup Iteration  11: 620081.444 ops/s
# Warmup Iteration  12: 588340.884 ops/s
# Warmup Iteration  13: 611902.393 ops/s
# Warmup Iteration  14: 586318.470 ops/s
# Warmup Iteration  15: 609577.694 ops/s
# Warmup Iteration  16: 607064.094 ops/s
# Warmup Iteration  17: 612818.031 ops/s
# Warmup Iteration  18: 639671.118 ops/s
# Warmup Iteration  19: 612046.624 ops/s
# Warmup Iteration  20: 630454.634 ops/s
# Warmup Iteration  21: 626718.391 ops/s
# Warmup Iteration  22: 643132.415 ops/s
# Warmup Iteration  23: 641964.664 ops/s
# Warmup Iteration  24: 614696.800 ops/s
# Warmup Iteration  25: 636004.978 ops/s
# Warmup Iteration  26: 634264.307 ops/s
# Warmup Iteration  27: 634415.239 ops/s
# Warmup Iteration  28: 521028.461 ops/s
# Warmup Iteration  29: 601422.843 ops/s
# Warmup Iteration  30: 641141.127 ops/s
Iteration   1: 606102.181 ops/s
Iteration   2: 648687.156 ops/s
Iteration   3: 643109.634 ops/s
Iteration   4: 636261.517 ops/s
Iteration   5: 639566.295 ops/s
Iteration   6: 621123.122 ops/s
Iteration   7: 651712.148 ops/s
Iteration   8: 630511.963 ops/s
Iteration   9: 612237.965 ops/s
Iteration  10: 654302.106 ops/s
Iteration  11: 622743.905 ops/s
Iteration  12: 650514.911 ops/s
Iteration  13: 628497.670 ops/s
Iteration  14: 632739.867 ops/s
Iteration  15: 648089.559 ops/s
Iteration  16: 625532.864 ops/s
Iteration  17: 628501.141 ops/s
Iteration  18: 642363.127 ops/s
Iteration  19: 636184.837 ops/s
Iteration  20: 655400.036 ops/s
Iteration  21: 658634.102 ops/s
Iteration  22: 607297.907 ops/s
Iteration  23: 652888.034 ops/s
Iteration  24: 607698.639 ops/s
Iteration  25: 656808.840 ops/s
Iteration  26: 628253.505 ops/s
Iteration  27: 639862.524 ops/s
Iteration  28: 641827.972 ops/s
Iteration  29: 618705.051 ops/s
Iteration  30: 628913.004 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_mappedSingleOnError":
  635169.053 ±(99.9%) 10373.429 ops/s [Average]
  (min, avg, max) = (606102.181, 635169.053, 658634.102), stdev = 15526.461
  CI (99.9%): [624795.624, 645542.482] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
SingleFlatMapTest._Benchmark.benchmark_mappedSingleOnError  thrpt   30  635169.053 ± 10373.429  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapValueErrorThrown$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapValueErrorThrown

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 221548.318 ops/s
# Warmup Iteration   2: 491891.082 ops/s
# Warmup Iteration   3: 575627.938 ops/s
# Warmup Iteration   4: 577687.392 ops/s
# Warmup Iteration   5: 602519.785 ops/s
# Warmup Iteration   6: 566922.616 ops/s
# Warmup Iteration   7: 570885.729 ops/s
# Warmup Iteration   8: 602106.142 ops/s
# Warmup Iteration   9: 571552.163 ops/s
# Warmup Iteration  10: 599068.491 ops/s
# Warmup Iteration  11: 563271.543 ops/s
# Warmup Iteration  12: 554341.963 ops/s
# Warmup Iteration  13: 576894.582 ops/s
# Warmup Iteration  14: 581647.714 ops/s
# Warmup Iteration  15: 557702.784 ops/s
# Warmup Iteration  16: 582716.692 ops/s
# Warmup Iteration  17: 582557.094 ops/s
# Warmup Iteration  18: 627261.062 ops/s
# Warmup Iteration  19: 617304.583 ops/s
# Warmup Iteration  20: 642010.335 ops/s
# Warmup Iteration  21: 594626.488 ops/s
# Warmup Iteration  22: 639854.551 ops/s
# Warmup Iteration  23: 627682.190 ops/s
# Warmup Iteration  24: 607009.388 ops/s
# Warmup Iteration  25: 621355.814 ops/s
# Warmup Iteration  26: 625488.912 ops/s
# Warmup Iteration  27: 612903.154 ops/s
# Warmup Iteration  28: 619329.777 ops/s
# Warmup Iteration  29: 618846.532 ops/s
# Warmup Iteration  30: 637514.038 ops/s
Iteration   1: 608442.943 ops/s
Iteration   2: 608371.763 ops/s
Iteration   3: 600357.837 ops/s
Iteration   4: 619677.779 ops/s
Iteration   5: 631691.047 ops/s
Iteration   6: 603104.877 ops/s
Iteration   7: 622578.789 ops/s
Iteration   8: 609572.980 ops/s
Iteration   9: 624634.673 ops/s
Iteration  10: 612117.199 ops/s
Iteration  11: 633137.349 ops/s
Iteration  12: 619270.679 ops/s
Iteration  13: 616668.039 ops/s
Iteration  14: 635923.445 ops/s
Iteration  15: 633820.908 ops/s
Iteration  16: 605118.075 ops/s
Iteration  17: 634843.519 ops/s
Iteration  18: 614151.445 ops/s
Iteration  19: 613450.471 ops/s
Iteration  20: 633037.141 ops/s
Iteration  21: 597090.653 ops/s
Iteration  22: 639665.375 ops/s
Iteration  23: 613031.180 ops/s
Iteration  24: 613544.822 ops/s
Iteration  25: 629513.711 ops/s
Iteration  26: 594255.570 ops/s
Iteration  27: 607975.006 ops/s
Iteration  28: 641287.702 ops/s
Iteration  29: 604764.224 ops/s
Iteration  30: 609158.335 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapValueErrorThrown":
  617675.251 ±(99.9%) 8889.421 ops/s [Average]
  (min, avg, max) = (594255.570, 617675.251, 641287.702), stdev = 13305.268
  CI (99.9%): [608785.830, 626564.672] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
SingleConcatMapTest._Benchmark.benchmark_concatMapValueErrorThrown  thrpt   30  617675.251 ± 8889.421  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapValueNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapValueNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 287472.139 ops/s
# Warmup Iteration   2: 502224.920 ops/s
# Warmup Iteration   3: 569797.443 ops/s
# Warmup Iteration   4: 580350.804 ops/s
# Warmup Iteration   5: 603842.188 ops/s
# Warmup Iteration   6: 578147.530 ops/s
# Warmup Iteration   7: 537225.213 ops/s
# Warmup Iteration   8: 554651.814 ops/s
# Warmup Iteration   9: 565652.855 ops/s
# Warmup Iteration  10: 603289.428 ops/s
# Warmup Iteration  11: 584472.781 ops/s
# Warmup Iteration  12: 583654.971 ops/s
# Warmup Iteration  13: 587803.046 ops/s
# Warmup Iteration  14: 571132.425 ops/s
# Warmup Iteration  15: 603833.770 ops/s
# Warmup Iteration  16: 584150.342 ops/s
# Warmup Iteration  17: 603346.367 ops/s
# Warmup Iteration  18: 623973.073 ops/s
# Warmup Iteration  19: 593319.251 ops/s
# Warmup Iteration  20: 623503.481 ops/s
# Warmup Iteration  21: 631660.471 ops/s
# Warmup Iteration  22: 602607.936 ops/s
# Warmup Iteration  23: 549935.640 ops/s
# Warmup Iteration  24: 597133.340 ops/s
# Warmup Iteration  25: 600311.468 ops/s
# Warmup Iteration  26: 631890.164 ops/s
# Warmup Iteration  27: 626552.938 ops/s
# Warmup Iteration  28: 593821.013 ops/s
# Warmup Iteration  29: 625907.727 ops/s
# Warmup Iteration  30: 606518.335 ops/s
Iteration   1: 631924.074 ops/s
Iteration   2: 602950.042 ops/s
Iteration   3: 606521.109 ops/s
Iteration   4: 612663.011 ops/s
Iteration   5: 603644.146 ops/s
Iteration   6: 620216.846 ops/s
Iteration   7: 595080.839 ops/s
Iteration   8: 619823.177 ops/s
Iteration   9: 596044.615 ops/s
Iteration  10: 624711.055 ops/s
Iteration  11: 613586.566 ops/s
Iteration  12: 618663.350 ops/s
Iteration  13: 615732.418 ops/s
Iteration  14: 610180.707 ops/s
Iteration  15: 628588.059 ops/s
Iteration  16: 612743.807 ops/s
Iteration  17: 612157.337 ops/s
Iteration  18: 626847.673 ops/s
Iteration  19: 599655.963 ops/s
Iteration  20: 641847.147 ops/s
Iteration  21: 593463.420 ops/s
Iteration  22: 626346.766 ops/s
Iteration  23: 614774.077 ops/s
Iteration  24: 632526.479 ops/s
Iteration  25: 599068.854 ops/s
Iteration  26: 619560.182 ops/s
Iteration  27: 623964.102 ops/s
Iteration  28: 617122.642 ops/s
Iteration  29: 593746.872 ops/s
Iteration  30: 620596.401 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapValueNull":
  614491.725 ±(99.9%) 8420.822 ops/s [Average]
  (min, avg, max) = (593463.420, 614491.725, 641847.147), stdev = 12603.891
  CI (99.9%): [606070.903, 622912.546] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SingleConcatMapTest._Benchmark.benchmark_concatMapValueNull  thrpt   30  614491.725 ± 8420.822  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapValueErrorThrown$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapValueErrorThrown

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 186250.487 ops/s
# Warmup Iteration   2: 500459.793 ops/s
# Warmup Iteration   3: 536964.487 ops/s
# Warmup Iteration   4: 534660.658 ops/s
# Warmup Iteration   5: 569844.187 ops/s
# Warmup Iteration   6: 491981.314 ops/s
# Warmup Iteration   7: 599665.909 ops/s
# Warmup Iteration   8: 571104.895 ops/s
# Warmup Iteration   9: 598124.840 ops/s
# Warmup Iteration  10: 563742.439 ops/s
# Warmup Iteration  11: 588928.394 ops/s
# Warmup Iteration  12: 584906.747 ops/s
# Warmup Iteration  13: 604958.599 ops/s
# Warmup Iteration  14: 565876.263 ops/s
# Warmup Iteration  15: 609755.463 ops/s
# Warmup Iteration  16: 563573.288 ops/s
# Warmup Iteration  17: 603387.872 ops/s
# Warmup Iteration  18: 617748.351 ops/s
# Warmup Iteration  19: 603126.851 ops/s
# Warmup Iteration  20: 613959.032 ops/s
# Warmup Iteration  21: 594265.945 ops/s
# Warmup Iteration  22: 601491.309 ops/s
# Warmup Iteration  23: 635626.769 ops/s
# Warmup Iteration  24: 582341.433 ops/s
# Warmup Iteration  25: 620445.332 ops/s
# Warmup Iteration  26: 597000.542 ops/s
# Warmup Iteration  27: 628658.236 ops/s
# Warmup Iteration  28: 621300.596 ops/s
# Warmup Iteration  29: 596816.417 ops/s
# Warmup Iteration  30: 619923.419 ops/s
Iteration   1: 596716.028 ops/s
Iteration   2: 602035.081 ops/s
Iteration   3: 621892.929 ops/s
Iteration   4: 599370.703 ops/s
Iteration   5: 606619.301 ops/s
Iteration   6: 608465.480 ops/s
Iteration   7: 623317.082 ops/s
Iteration   8: 615948.651 ops/s
Iteration   9: 608875.008 ops/s
Iteration  10: 603797.934 ops/s
Iteration  11: 615999.617 ops/s
Iteration  12: 603293.470 ops/s
Iteration  13: 609269.385 ops/s
Iteration  14: 620725.570 ops/s
Iteration  15: 598349.046 ops/s
Iteration  16: 597960.706 ops/s
Iteration  17: 609949.321 ops/s
Iteration  18: 591281.789 ops/s
Iteration  19: 634945.087 ops/s
Iteration  20: 592889.371 ops/s
Iteration  21: 589596.654 ops/s
Iteration  22: 607142.984 ops/s
Iteration  23: 584667.874 ops/s
Iteration  24: 600735.778 ops/s
Iteration  25: 633434.645 ops/s
Iteration  26: 584310.615 ops/s
Iteration  27: 624197.800 ops/s
Iteration  28: 603391.984 ops/s
Iteration  29: 603599.323 ops/s
Iteration  30: 609540.383 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapValueErrorThrown":
  606743.987 ±(99.9%) 8624.749 ops/s [Average]
  (min, avg, max) = (584310.615, 606743.987, 634945.087), stdev = 12909.120
  CI (99.9%): [598119.237, 615368.736] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SingleFlatMapTest._Benchmark.benchmark_flatMapValueErrorThrown  thrpt   30  606743.987 ± 8624.749  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapValueNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapValueNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 180166.499 ops/s
# Warmup Iteration   2: 526407.372 ops/s
# Warmup Iteration   3: 540816.743 ops/s
# Warmup Iteration   4: 529560.146 ops/s
# Warmup Iteration   5: 605356.247 ops/s
# Warmup Iteration   6: 512415.899 ops/s
# Warmup Iteration   7: 576123.815 ops/s
# Warmup Iteration   8: 607599.161 ops/s
# Warmup Iteration   9: 582505.278 ops/s
# Warmup Iteration  10: 599295.902 ops/s
# Warmup Iteration  11: 580577.089 ops/s
# Warmup Iteration  12: 606762.437 ops/s
# Warmup Iteration  13: 597321.584 ops/s
# Warmup Iteration  14: 588157.914 ops/s
# Warmup Iteration  15: 590624.050 ops/s
# Warmup Iteration  16: 580473.962 ops/s
# Warmup Iteration  17: 632072.277 ops/s
# Warmup Iteration  18: 591251.850 ops/s
# Warmup Iteration  19: 510195.166 ops/s
# Warmup Iteration  20: 637240.795 ops/s
# Warmup Iteration  21: 616686.399 ops/s
# Warmup Iteration  22: 606862.721 ops/s
# Warmup Iteration  23: 622346.337 ops/s
# Warmup Iteration  24: 607398.320 ops/s
# Warmup Iteration  25: 629878.245 ops/s
# Warmup Iteration  26: 615513.177 ops/s
# Warmup Iteration  27: 641862.463 ops/s
# Warmup Iteration  28: 631516.832 ops/s
# Warmup Iteration  29: 604625.471 ops/s
# Warmup Iteration  30: 636108.083 ops/s
Iteration   1: 591145.350 ops/s
Iteration   2: 651180.855 ops/s
Iteration   3: 605887.153 ops/s
Iteration   4: 602916.117 ops/s
Iteration   5: 636370.412 ops/s
Iteration   6: 592831.432 ops/s
Iteration   7: 640740.558 ops/s
Iteration   8: 609875.464 ops/s
Iteration   9: 634416.308 ops/s
Iteration  10: 601083.916 ops/s
Iteration  11: 613751.203 ops/s
Iteration  12: 637579.809 ops/s
Iteration  13: 605630.134 ops/s
Iteration  14: 630561.567 ops/s
Iteration  15: 622979.490 ops/s
Iteration  16: 608483.419 ops/s
Iteration  17: 627573.165 ops/s
Iteration  18: 612553.473 ops/s
Iteration  19: 616271.106 ops/s
Iteration  20: 635217.365 ops/s
Iteration  21: 600182.331 ops/s
Iteration  22: 615061.866 ops/s
Iteration  23: 612851.155 ops/s
Iteration  24: 613688.314 ops/s
Iteration  25: 618910.431 ops/s
Iteration  26: 617405.926 ops/s
Iteration  27: 634773.980 ops/s
Iteration  28: 611066.683 ops/s
Iteration  29: 598767.915 ops/s
Iteration  30: 629550.415 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapValueNull":
  617643.577 ±(99.9%) 10197.340 ops/s [Average]
  (min, avg, max) = (591145.350, 617643.577, 651180.855), stdev = 15262.899
  CI (99.9%): [607446.237, 627840.917] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
SingleFlatMapTest._Benchmark.benchmark_flatMapValueNull  thrpt   30  617643.577 ± 10197.340  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 303687.164 ops/s
# Warmup Iteration   2: 604901.272 ops/s
# Warmup Iteration   3: 735103.046 ops/s
# Warmup Iteration   4: 699828.409 ops/s
# Warmup Iteration   5: 736777.862 ops/s
# Warmup Iteration   6: 745320.175 ops/s
# Warmup Iteration   7: 674924.476 ops/s
# Warmup Iteration   8: 745106.809 ops/s
# Warmup Iteration   9: 691942.772 ops/s
# Warmup Iteration  10: 715941.079 ops/s
# Warmup Iteration  11: 723968.991 ops/s
# Warmup Iteration  12: 705469.028 ops/s
# Warmup Iteration  13: 731222.255 ops/s
# Warmup Iteration  14: 713488.080 ops/s
# Warmup Iteration  15: 725666.902 ops/s
# Warmup Iteration  16: 684649.291 ops/s
# Warmup Iteration  17: 790022.304 ops/s
# Warmup Iteration  18: 720266.853 ops/s
# Warmup Iteration  19: 761812.206 ops/s
# Warmup Iteration  20: 775697.190 ops/s
# Warmup Iteration  21: 748850.108 ops/s
# Warmup Iteration  22: 788442.799 ops/s
# Warmup Iteration  23: 756605.347 ops/s
# Warmup Iteration  24: 754444.477 ops/s
# Warmup Iteration  25: 753571.767 ops/s
# Warmup Iteration  26: 771646.591 ops/s
# Warmup Iteration  27: 759219.233 ops/s
# Warmup Iteration  28: 749462.143 ops/s
# Warmup Iteration  29: 796706.380 ops/s
# Warmup Iteration  30: 734129.065 ops/s
Iteration   1: 771775.592 ops/s
Iteration   2: 757364.995 ops/s
Iteration   3: 759383.398 ops/s
Iteration   4: 757824.141 ops/s
Iteration   5: 778981.103 ops/s
Iteration   6: 759737.913 ops/s
Iteration   7: 788536.139 ops/s
Iteration   8: 783787.139 ops/s
Iteration   9: 747735.260 ops/s
Iteration  10: 743229.574 ops/s
Iteration  11: 779074.725 ops/s
Iteration  12: 730897.607 ops/s
Iteration  13: 778901.196 ops/s
Iteration  14: 790025.406 ops/s
Iteration  15: 736857.522 ops/s
Iteration  16: 778765.679 ops/s
Iteration  17: 716265.614 ops/s
Iteration  18: 763587.401 ops/s
Iteration  19: 759333.044 ops/s
Iteration  20: 765258.590 ops/s
Iteration  21: 768523.771 ops/s
Iteration  22: 757902.685 ops/s
Iteration  23: 730283.464 ops/s
Iteration  24: 790534.252 ops/s
Iteration  25: 786796.294 ops/s
Iteration  26: 741236.007 ops/s
Iteration  27: 764780.950 ops/s
Iteration  28: 761153.235 ops/s
Iteration  29: 741537.984 ops/s
Iteration  30: 780375.201 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapError":
  762348.196 ±(99.9%) 13136.418 ops/s [Average]
  (min, avg, max) = (716265.614, 762348.196, 790534.252), stdev = 19661.974
  CI (99.9%): [749211.778, 775484.614] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
SingleFlatMapTest._Benchmark.benchmark_flatMapError  thrpt   30  762348.196 ± 13136.418  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 352270.070 ops/s
# Warmup Iteration   2: 617397.395 ops/s
# Warmup Iteration   3: 729491.017 ops/s
# Warmup Iteration   4: 707888.688 ops/s
# Warmup Iteration   5: 725049.125 ops/s
# Warmup Iteration   6: 714744.988 ops/s
# Warmup Iteration   7: 692057.472 ops/s
# Warmup Iteration   8: 698864.842 ops/s
# Warmup Iteration   9: 727777.398 ops/s
# Warmup Iteration  10: 689346.449 ops/s
# Warmup Iteration  11: 692980.166 ops/s
# Warmup Iteration  12: 742041.943 ops/s
# Warmup Iteration  13: 560699.655 ops/s
# Warmup Iteration  14: 735503.250 ops/s
# Warmup Iteration  15: 696955.489 ops/s
# Warmup Iteration  16: 706599.337 ops/s
# Warmup Iteration  17: 771039.278 ops/s
# Warmup Iteration  18: 746951.940 ops/s
# Warmup Iteration  19: 760296.399 ops/s
# Warmup Iteration  20: 772302.504 ops/s
# Warmup Iteration  21: 741527.678 ops/s
# Warmup Iteration  22: 781009.717 ops/s
# Warmup Iteration  23: 730667.916 ops/s
# Warmup Iteration  24: 763499.340 ops/s
# Warmup Iteration  25: 738769.318 ops/s
# Warmup Iteration  26: 732509.605 ops/s
# Warmup Iteration  27: 769138.262 ops/s
# Warmup Iteration  28: 762957.600 ops/s
# Warmup Iteration  29: 741213.459 ops/s
# Warmup Iteration  30: 768391.877 ops/s
Iteration   1: 747969.384 ops/s
Iteration   2: 750287.298 ops/s
Iteration   3: 767096.594 ops/s
Iteration   4: 726157.419 ops/s
Iteration   5: 770220.960 ops/s
Iteration   6: 748085.441 ops/s
Iteration   7: 782741.907 ops/s
Iteration   8: 774652.196 ops/s
Iteration   9: 737466.067 ops/s
Iteration  10: 766243.264 ops/s
Iteration  11: 759035.259 ops/s
Iteration  12: 792304.399 ops/s
Iteration  13: 742534.737 ops/s
Iteration  14: 764298.068 ops/s
Iteration  15: 740638.860 ops/s
Iteration  16: 767240.579 ops/s
Iteration  17: 767121.231 ops/s
Iteration  18: 748022.772 ops/s
Iteration  19: 766112.324 ops/s
Iteration  20: 735198.848 ops/s
Iteration  21: 748677.902 ops/s
Iteration  22: 758732.871 ops/s
Iteration  23: 748490.652 ops/s
Iteration  24: 761517.032 ops/s
Iteration  25: 739850.954 ops/s
Iteration  26: 800612.393 ops/s
Iteration  27: 751107.633 ops/s
Iteration  28: 739598.720 ops/s
Iteration  29: 793224.893 ops/s
Iteration  30: 687587.573 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_concatMapError":
  756094.274 ±(99.9%) 14839.568 ops/s [Average]
  (min, avg, max) = (687587.573, 756094.274, 800612.393), stdev = 22211.169
  CI (99.9%): [741254.706, 770933.843] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
SingleConcatMapTest._Benchmark.benchmark_concatMapError  thrpt   30  756094.274 ± 14839.568  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 456245.885 ops/s
# Warmup Iteration   2: 2232494.035 ops/s
# Warmup Iteration   3: 4480861.134 ops/s
# Warmup Iteration   4: 3671625.382 ops/s
# Warmup Iteration   5: 4479669.420 ops/s
# Warmup Iteration   6: 4338435.727 ops/s
# Warmup Iteration   7: 4387281.273 ops/s
# Warmup Iteration   8: 4395947.287 ops/s
# Warmup Iteration   9: 4410833.178 ops/s
# Warmup Iteration  10: 4301835.996 ops/s
# Warmup Iteration  11: 4427280.196 ops/s
# Warmup Iteration  12: 4565196.215 ops/s
# Warmup Iteration  13: 4293064.045 ops/s
# Warmup Iteration  14: 4578710.120 ops/s
# Warmup Iteration  15: 4210344.473 ops/s
# Warmup Iteration  16: 4401239.771 ops/s
# Warmup Iteration  17: 4529997.956 ops/s
# Warmup Iteration  18: 4181374.349 ops/s
# Warmup Iteration  19: 4450274.334 ops/s
# Warmup Iteration  20: 4407250.177 ops/s
# Warmup Iteration  21: 4646588.178 ops/s
# Warmup Iteration  22: 4546577.621 ops/s
# Warmup Iteration  23: 4250640.594 ops/s
# Warmup Iteration  24: 4324895.271 ops/s
# Warmup Iteration  25: 4519897.096 ops/s
# Warmup Iteration  26: 4289404.940 ops/s
# Warmup Iteration  27: 4622324.649 ops/s
# Warmup Iteration  28: 4500141.282 ops/s
# Warmup Iteration  29: 4300527.052 ops/s
# Warmup Iteration  30: 4521473.993 ops/s
Iteration   1: 4416687.154 ops/s
Iteration   2: 4345691.905 ops/s
Iteration   3: 4603463.947 ops/s
Iteration   4: 4428222.682 ops/s
Iteration   5: 4407786.526 ops/s
Iteration   6: 4382766.136 ops/s
Iteration   7: 4530856.651 ops/s
Iteration   8: 4401715.505 ops/s
Iteration   9: 4513715.787 ops/s
Iteration  10: 4569641.053 ops/s
Iteration  11: 4331382.189 ops/s
Iteration  12: 4400439.789 ops/s
Iteration  13: 4477873.535 ops/s
Iteration  14: 4426885.928 ops/s
Iteration  15: 4564822.265 ops/s
Iteration  16: 4398093.302 ops/s
Iteration  17: 4356156.951 ops/s
Iteration  18: 4597409.063 ops/s
Iteration  19: 4371080.968 ops/s
Iteration  20: 4528280.833 ops/s
Iteration  21: 4342255.917 ops/s
Iteration  22: 4303510.477 ops/s
Iteration  23: 4535250.133 ops/s
Iteration  24: 4188748.699 ops/s
Iteration  25: 4479002.291 ops/s
Iteration  26: 4353630.442 ops/s
Iteration  27: 4364817.058 ops/s
Iteration  28: 4548407.308 ops/s
Iteration  29: 4431344.379 ops/s
Iteration  30: 4510413.909 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_normal":
  4437011.759 ±(99.9%) 65738.522 ops/s [Average]
  (min, avg, max) = (4188748.699, 4437011.759, 4603463.947), stdev = 98394.333
  CI (99.9%): [4371273.237, 4502750.282] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SingleFlatMapBiSelectorTest._Benchmark.benchmark_normal  thrpt   30  4437011.759 ± 65738.522  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 216850.234 ops/s
# Warmup Iteration   2: 520078.566 ops/s
# Warmup Iteration   3: 570814.023 ops/s
# Warmup Iteration   4: 569695.035 ops/s
# Warmup Iteration   5: 582321.688 ops/s
# Warmup Iteration   6: 556343.287 ops/s
# Warmup Iteration   7: 555274.412 ops/s
# Warmup Iteration   8: 487345.668 ops/s
# Warmup Iteration   9: 534579.985 ops/s
# Warmup Iteration  10: 568266.599 ops/s
# Warmup Iteration  11: 569973.329 ops/s
# Warmup Iteration  12: 564458.097 ops/s
# Warmup Iteration  13: 587663.575 ops/s
# Warmup Iteration  14: 552365.093 ops/s
# Warmup Iteration  15: 579814.174 ops/s
# Warmup Iteration  16: 569396.558 ops/s
# Warmup Iteration  17: 595009.033 ops/s
# Warmup Iteration  18: 589039.556 ops/s
# Warmup Iteration  19: 595144.306 ops/s
# Warmup Iteration  20: 609181.690 ops/s
# Warmup Iteration  21: 576284.901 ops/s
# Warmup Iteration  22: 606615.637 ops/s
# Warmup Iteration  23: 593848.177 ops/s
# Warmup Iteration  24: 585966.646 ops/s
# Warmup Iteration  25: 597005.558 ops/s
# Warmup Iteration  26: 593115.313 ops/s
# Warmup Iteration  27: 617172.139 ops/s
# Warmup Iteration  28: 578024.990 ops/s
# Warmup Iteration  29: 621270.162 ops/s
# Warmup Iteration  30: 599021.631 ops/s
Iteration   1: 597729.298 ops/s
Iteration   2: 594972.642 ops/s
Iteration   3: 597711.915 ops/s
Iteration   4: 600097.353 ops/s
Iteration   5: 610044.702 ops/s
Iteration   6: 599445.394 ops/s
Iteration   7: 615616.354 ops/s
Iteration   8: 614071.132 ops/s
Iteration   9: 591740.297 ops/s
Iteration  10: 619327.504 ops/s
Iteration  11: 586832.904 ops/s
Iteration  12: 610790.144 ops/s
Iteration  13: 594915.133 ops/s
Iteration  14: 607447.254 ops/s
Iteration  15: 610021.279 ops/s
Iteration  16: 595378.252 ops/s
Iteration  17: 616852.691 ops/s
Iteration  18: 589706.425 ops/s
Iteration  19: 610617.551 ops/s
Iteration  20: 593652.772 ops/s
Iteration  21: 609386.918 ops/s
Iteration  22: 593297.656 ops/s
Iteration  23: 602377.011 ops/s
Iteration  24: 621704.330 ops/s
Iteration  25: 597224.034 ops/s
Iteration  26: 615136.540 ops/s
Iteration  27: 589387.912 ops/s
Iteration  28: 599662.293 ops/s
Iteration  29: 589284.178 ops/s
Iteration  30: 604659.542 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorReturnsNull":
  602636.380 ±(99.9%) 6731.343 ops/s [Average]
  (min, avg, max) = (586832.904, 602636.380, 621704.330), stdev = 10075.158
  CI (99.9%): [595905.037, 609367.724] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
SingleFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorReturnsNull  thrpt   30  602636.380 ± 6731.343  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 234381.964 ops/s
# Warmup Iteration   2: 466058.375 ops/s
# Warmup Iteration   3: 555938.257 ops/s
# Warmup Iteration   4: 537524.527 ops/s
# Warmup Iteration   5: 558745.167 ops/s
# Warmup Iteration   6: 565129.450 ops/s
# Warmup Iteration   7: 546667.637 ops/s
# Warmup Iteration   8: 569283.290 ops/s
# Warmup Iteration   9: 541304.780 ops/s
# Warmup Iteration  10: 551272.725 ops/s
# Warmup Iteration  11: 562254.099 ops/s
# Warmup Iteration  12: 543030.491 ops/s
# Warmup Iteration  13: 554993.337 ops/s
# Warmup Iteration  14: 562867.785 ops/s
# Warmup Iteration  15: 535557.189 ops/s
# Warmup Iteration  16: 570624.232 ops/s
# Warmup Iteration  17: 566105.557 ops/s
# Warmup Iteration  18: 554700.476 ops/s
# Warmup Iteration  19: 586290.596 ops/s
# Warmup Iteration  20: 559590.007 ops/s
# Warmup Iteration  21: 596077.633 ops/s
# Warmup Iteration  22: 594461.141 ops/s
# Warmup Iteration  23: 572205.796 ops/s
# Warmup Iteration  24: 590800.552 ops/s
# Warmup Iteration  25: 586326.474 ops/s
# Warmup Iteration  26: 560435.989 ops/s
# Warmup Iteration  27: 591314.295 ops/s
# Warmup Iteration  28: 581902.277 ops/s
# Warmup Iteration  29: 575437.162 ops/s
# Warmup Iteration  30: 578972.589 ops/s
Iteration   1: 573931.219 ops/s
Iteration   2: 591101.434 ops/s
Iteration   3: 578048.204 ops/s
Iteration   4: 577816.544 ops/s
Iteration   5: 587282.551 ops/s
Iteration   6: 567458.008 ops/s
Iteration   7: 601838.995 ops/s
Iteration   8: 570933.961 ops/s
Iteration   9: 589966.485 ops/s
Iteration  10: 603407.453 ops/s
Iteration  11: 566314.771 ops/s
Iteration  12: 582628.727 ops/s
Iteration  13: 569065.757 ops/s
Iteration  14: 601202.231 ops/s
Iteration  15: 546215.699 ops/s
Iteration  16: 591743.382 ops/s
Iteration  17: 592000.258 ops/s
Iteration  18: 572565.330 ops/s
Iteration  19: 605194.695 ops/s
Iteration  20: 574089.981 ops/s
Iteration  21: 590080.544 ops/s
Iteration  22: 571688.207 ops/s
Iteration  23: 593722.054 ops/s
Iteration  24: 590044.601 ops/s
Iteration  25: 575654.451 ops/s
Iteration  26: 590191.297 ops/s
Iteration  27: 599080.458 ops/s
Iteration  28: 562278.945 ops/s
Iteration  29: 600082.874 ops/s
Iteration  30: 581187.740 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorThrows":
  583227.229 ±(99.9%) 9489.131 ops/s [Average]
  (min, avg, max) = (546215.699, 583227.229, 605194.695), stdev = 14202.885
  CI (99.9%): [573738.098, 592716.359] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
SingleFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorThrows  thrpt   30  583227.229 ± 9489.131  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_mapperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_mapperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 264616.559 ops/s
# Warmup Iteration   2: 509649.995 ops/s
# Warmup Iteration   3: 510286.333 ops/s
# Warmup Iteration   4: 585925.986 ops/s
# Warmup Iteration   5: 548347.784 ops/s
# Warmup Iteration   6: 597979.523 ops/s
# Warmup Iteration   7: 619763.282 ops/s
# Warmup Iteration   8: 635000.130 ops/s
# Warmup Iteration   9: 633944.494 ops/s
# Warmup Iteration  10: 621830.194 ops/s
# Warmup Iteration  11: 632282.791 ops/s
# Warmup Iteration  12: 617462.079 ops/s
# Warmup Iteration  13: 644634.314 ops/s
# Warmup Iteration  14: 611520.835 ops/s
# Warmup Iteration  15: 646761.325 ops/s
# Warmup Iteration  16: 621110.826 ops/s
# Warmup Iteration  17: 645984.900 ops/s
# Warmup Iteration  18: 666050.084 ops/s
# Warmup Iteration  19: 649972.525 ops/s
# Warmup Iteration  20: 679952.951 ops/s
# Warmup Iteration  21: 646736.746 ops/s
# Warmup Iteration  22: 662291.062 ops/s
# Warmup Iteration  23: 687699.897 ops/s
# Warmup Iteration  24: 662100.287 ops/s
# Warmup Iteration  25: 670254.635 ops/s
# Warmup Iteration  26: 637104.916 ops/s
# Warmup Iteration  27: 678945.913 ops/s
# Warmup Iteration  28: 646551.471 ops/s
# Warmup Iteration  29: 668341.175 ops/s
# Warmup Iteration  30: 644116.464 ops/s
Iteration   1: 688673.103 ops/s
Iteration   2: 676284.331 ops/s
Iteration   3: 651010.198 ops/s
Iteration   4: 665909.525 ops/s
Iteration   5: 655489.726 ops/s
Iteration   6: 663851.754 ops/s
Iteration   7: 669051.866 ops/s
Iteration   8: 668889.289 ops/s
Iteration   9: 668941.146 ops/s
Iteration  10: 648706.797 ops/s
Iteration  11: 693132.586 ops/s
Iteration  12: 645596.136 ops/s
Iteration  13: 673561.584 ops/s
Iteration  14: 662281.629 ops/s
Iteration  15: 647531.077 ops/s
Iteration  16: 664056.203 ops/s
Iteration  17: 686325.813 ops/s
Iteration  18: 637741.617 ops/s
Iteration  19: 668533.476 ops/s
Iteration  20: 652025.251 ops/s
Iteration  21: 672946.524 ops/s
Iteration  22: 653002.392 ops/s
Iteration  23: 659563.548 ops/s
Iteration  24: 683785.622 ops/s
Iteration  25: 639812.333 ops/s
Iteration  26: 681094.672 ops/s
Iteration  27: 689545.058 ops/s
Iteration  28: 635616.121 ops/s
Iteration  29: 655665.509 ops/s
Iteration  30: 695872.282 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_mapperReturnsNull":
  665149.906 ±(99.9%) 11241.705 ops/s [Average]
  (min, avg, max) = (635616.121, 665149.906, 695872.282), stdev = 16826.056
  CI (99.9%): [653908.201, 676391.611] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
SingleFlatMapBiSelectorTest._Benchmark.benchmark_mapperReturnsNull  thrpt   30  665149.906 ± 11241.705  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_bothSucceed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_bothSucceed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1030558.655 ops/s
# Warmup Iteration   2: 2489884.438 ops/s
# Warmup Iteration   3: 3621397.850 ops/s
# Warmup Iteration   4: 3721751.407 ops/s
# Warmup Iteration   5: 3820172.370 ops/s
# Warmup Iteration   6: 3668554.626 ops/s
# Warmup Iteration   7: 3685255.629 ops/s
# Warmup Iteration   8: 3741931.274 ops/s
# Warmup Iteration   9: 3845368.488 ops/s
# Warmup Iteration  10: 3665741.946 ops/s
# Warmup Iteration  11: 3810486.655 ops/s
# Warmup Iteration  12: 3758278.352 ops/s
# Warmup Iteration  13: 3676788.318 ops/s
# Warmup Iteration  14: 3870563.354 ops/s
# Warmup Iteration  15: 3695762.633 ops/s
# Warmup Iteration  16: 3916943.430 ops/s
# Warmup Iteration  17: 3729940.786 ops/s
# Warmup Iteration  18: 3822825.775 ops/s
# Warmup Iteration  19: 3904014.024 ops/s
# Warmup Iteration  20: 3770060.803 ops/s
# Warmup Iteration  21: 3798455.257 ops/s
# Warmup Iteration  22: 3622919.701 ops/s
# Warmup Iteration  23: 3796489.040 ops/s
# Warmup Iteration  24: 3786437.950 ops/s
# Warmup Iteration  25: 3782853.603 ops/s
# Warmup Iteration  26: 3854949.659 ops/s
# Warmup Iteration  27: 3879690.158 ops/s
# Warmup Iteration  28: 3807023.058 ops/s
# Warmup Iteration  29: 3783766.557 ops/s
# Warmup Iteration  30: 3797914.973 ops/s
Iteration   1: 3698535.718 ops/s
Iteration   2: 3865267.432 ops/s
Iteration   3: 3844965.575 ops/s
Iteration   4: 3685985.758 ops/s
Iteration   5: 3744011.588 ops/s
Iteration   6: 3833763.550 ops/s
Iteration   7: 3716772.593 ops/s
Iteration   8: 3770635.798 ops/s
Iteration   9: 3697662.912 ops/s
Iteration  10: 3918129.746 ops/s
Iteration  11: 3653666.164 ops/s
Iteration  12: 3689570.141 ops/s
Iteration  13: 3802323.333 ops/s
Iteration  14: 3667702.943 ops/s
Iteration  15: 3773459.950 ops/s
Iteration  16: 3730112.769 ops/s
Iteration  17: 3798228.433 ops/s
Iteration  18: 3799171.979 ops/s
Iteration  19: 3793273.911 ops/s
Iteration  20: 3832191.710 ops/s
Iteration  21: 3659016.124 ops/s
Iteration  22: 3794201.336 ops/s
Iteration  23: 3670621.283 ops/s
Iteration  24: 3843430.417 ops/s
Iteration  25: 3881442.080 ops/s
Iteration  26: 3655624.448 ops/s
Iteration  27: 3918762.868 ops/s
Iteration  28: 3705382.182 ops/s
Iteration  29: 3874061.903 ops/s
Iteration  30: 3018383.415 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_bothSucceed":
  3744545.269 ±(99.9%) 106514.339 ops/s [Average]
  (min, avg, max) = (3018383.415, 3744545.269, 3918762.868), stdev = 159425.660
  CI (99.9%): [3638030.930, 3851059.608] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
SingleZipArrayTest._Benchmark.benchmark_bothSucceed  thrpt   30  3744545.269 ± 106514.339  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 266520.326 ops/s
# Warmup Iteration   2: 538523.547 ops/s
# Warmup Iteration   3: 559311.836 ops/s
# Warmup Iteration   4: 585068.156 ops/s
# Warmup Iteration   5: 558432.945 ops/s
# Warmup Iteration   6: 596662.229 ops/s
# Warmup Iteration   7: 538540.730 ops/s
# Warmup Iteration   8: 616306.552 ops/s
# Warmup Iteration   9: 608601.293 ops/s
# Warmup Iteration  10: 625350.481 ops/s
# Warmup Iteration  11: 594976.769 ops/s
# Warmup Iteration  12: 614859.000 ops/s
# Warmup Iteration  13: 601633.537 ops/s
# Warmup Iteration  14: 620425.696 ops/s
# Warmup Iteration  15: 616966.211 ops/s
# Warmup Iteration  16: 597834.610 ops/s
# Warmup Iteration  17: 638842.199 ops/s
# Warmup Iteration  18: 641468.694 ops/s
# Warmup Iteration  19: 638617.690 ops/s
# Warmup Iteration  20: 632914.767 ops/s
# Warmup Iteration  21: 635064.341 ops/s
# Warmup Iteration  22: 646104.842 ops/s
# Warmup Iteration  23: 629619.777 ops/s
# Warmup Iteration  24: 644217.387 ops/s
# Warmup Iteration  25: 628882.368 ops/s
# Warmup Iteration  26: 627411.874 ops/s
# Warmup Iteration  27: 646677.295 ops/s
# Warmup Iteration  28: 624279.062 ops/s
# Warmup Iteration  29: 630189.424 ops/s
# Warmup Iteration  30: 635598.805 ops/s
Iteration   1: 614252.716 ops/s
Iteration   2: 648867.853 ops/s
Iteration   3: 631014.243 ops/s
Iteration   4: 636355.065 ops/s
Iteration   5: 640221.023 ops/s
Iteration   6: 637659.584 ops/s
Iteration   7: 665646.375 ops/s
Iteration   8: 642756.871 ops/s
Iteration   9: 642065.159 ops/s
Iteration  10: 647397.078 ops/s
Iteration  11: 622719.452 ops/s
Iteration  12: 653613.239 ops/s
Iteration  13: 606803.444 ops/s
Iteration  14: 640349.953 ops/s
Iteration  15: 651719.474 ops/s
Iteration  16: 646108.722 ops/s
Iteration  17: 630759.330 ops/s
Iteration  18: 594624.875 ops/s
Iteration  19: 650076.403 ops/s
Iteration  20: 624269.782 ops/s
Iteration  21: 641866.558 ops/s
Iteration  22: 621774.673 ops/s
Iteration  23: 645173.989 ops/s
Iteration  24: 650959.253 ops/s
Iteration  25: 624320.432 ops/s
Iteration  26: 661949.002 ops/s
Iteration  27: 622883.779 ops/s
Iteration  28: 659834.658 ops/s
Iteration  29: 668984.623 ops/s
Iteration  30: 617542.064 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_mapperThrows":
  638085.656 ±(99.9%) 11737.450 ops/s [Average]
  (min, avg, max) = (594624.875, 638085.656, 668984.623), stdev = 17568.064
  CI (99.9%): [626348.206, 649823.106] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
SingleFlatMapBiSelectorTest._Benchmark.benchmark_mapperThrows  thrpt   30  638085.656 ± 11737.450  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_justWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_justWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 245688.672 ops/s
# Warmup Iteration   2: 527933.883 ops/s
# Warmup Iteration   3: 658248.667 ops/s
# Warmup Iteration   4: 654986.333 ops/s
# Warmup Iteration   5: 605760.750 ops/s
# Warmup Iteration   6: 646772.674 ops/s
# Warmup Iteration   7: 624901.042 ops/s
# Warmup Iteration   8: 638520.697 ops/s
# Warmup Iteration   9: 647784.955 ops/s
# Warmup Iteration  10: 591055.616 ops/s
# Warmup Iteration  11: 640503.860 ops/s
# Warmup Iteration  12: 625480.391 ops/s
# Warmup Iteration  13: 606135.561 ops/s
# Warmup Iteration  14: 634031.184 ops/s
# Warmup Iteration  15: 609565.479 ops/s
# Warmup Iteration  16: 642603.399 ops/s
# Warmup Iteration  17: 638696.757 ops/s
# Warmup Iteration  18: 679152.950 ops/s
# Warmup Iteration  19: 655834.384 ops/s
# Warmup Iteration  20: 662991.280 ops/s
# Warmup Iteration  21: 682639.163 ops/s
# Warmup Iteration  22: 636159.544 ops/s
# Warmup Iteration  23: 669472.494 ops/s
# Warmup Iteration  24: 660951.539 ops/s
# Warmup Iteration  25: 626798.267 ops/s
# Warmup Iteration  26: 680681.828 ops/s
# Warmup Iteration  27: 648702.548 ops/s
# Warmup Iteration  28: 648652.477 ops/s
# Warmup Iteration  29: 665595.974 ops/s
# Warmup Iteration  30: 680023.099 ops/s
Iteration   1: 658053.951 ops/s
Iteration   2: 654792.200 ops/s
Iteration   3: 684933.254 ops/s
Iteration   4: 645560.774 ops/s
Iteration   5: 675006.034 ops/s
Iteration   6: 674525.198 ops/s
Iteration   7: 671932.695 ops/s
Iteration   8: 662893.119 ops/s
Iteration   9: 652962.154 ops/s
Iteration  10: 689528.305 ops/s
Iteration  11: 684308.875 ops/s
Iteration  12: 655852.013 ops/s
Iteration  13: 685467.639 ops/s
Iteration  14: 685628.798 ops/s
Iteration  15: 652630.014 ops/s
Iteration  16: 657281.403 ops/s
Iteration  17: 688375.731 ops/s
Iteration  18: 692550.027 ops/s
Iteration  19: 642089.380 ops/s
Iteration  20: 682657.838 ops/s
Iteration  21: 650941.936 ops/s
Iteration  22: 679999.115 ops/s
Iteration  23: 670688.854 ops/s
Iteration  24: 659565.426 ops/s
Iteration  25: 543800.575 ops/s
Iteration  26: 670075.437 ops/s
Iteration  27: 669676.346 ops/s
Iteration  28: 657285.831 ops/s
Iteration  29: 673850.149 ops/s
Iteration  30: 677868.719 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_justWithError":
  665026.060 ±(99.9%) 18020.744 ops/s [Average]
  (min, avg, max) = (543800.575, 665026.060, 692550.027), stdev = 26972.603
  CI (99.9%): [647005.316, 683046.803] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
SingleFlatMapBiSelectorTest._Benchmark.benchmark_justWithError  thrpt   30  665026.060 ± 18020.744  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_singleSourcesInIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_singleSourcesInIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 528948.961 ops/s
# Warmup Iteration   2: 2990666.796 ops/s
# Warmup Iteration   3: 3851835.081 ops/s
# Warmup Iteration   4: 3108377.495 ops/s
# Warmup Iteration   5: 3875473.268 ops/s
# Warmup Iteration   6: 3638316.429 ops/s
# Warmup Iteration   7: 3598276.549 ops/s
# Warmup Iteration   8: 3893820.425 ops/s
# Warmup Iteration   9: 3693759.653 ops/s
# Warmup Iteration  10: 3760263.480 ops/s
# Warmup Iteration  11: 3849302.708 ops/s
# Warmup Iteration  12: 3733222.010 ops/s
# Warmup Iteration  13: 3830014.733 ops/s
# Warmup Iteration  14: 3908931.818 ops/s
# Warmup Iteration  15: 3714371.664 ops/s
# Warmup Iteration  16: 3964961.013 ops/s
# Warmup Iteration  17: 3646671.250 ops/s
# Warmup Iteration  18: 3715289.109 ops/s
# Warmup Iteration  19: 3897173.159 ops/s
# Warmup Iteration  20: 3685991.067 ops/s
# Warmup Iteration  21: 3771106.110 ops/s
# Warmup Iteration  22: 3800230.162 ops/s
# Warmup Iteration  23: 3716247.820 ops/s
# Warmup Iteration  24: 3740016.633 ops/s
# Warmup Iteration  25: 3660334.191 ops/s
# Warmup Iteration  26: 3882265.566 ops/s
# Warmup Iteration  27: 3697244.124 ops/s
# Warmup Iteration  28: 3779793.286 ops/s
# Warmup Iteration  29: 3816190.360 ops/s
# Warmup Iteration  30: 3767966.940 ops/s
Iteration   1: 3839565.002 ops/s
Iteration   2: 3617105.276 ops/s
Iteration   3: 3897592.425 ops/s
Iteration   4: 3708656.364 ops/s
Iteration   5: 3743648.097 ops/s
Iteration   6: 3964018.287 ops/s
Iteration   7: 3662552.310 ops/s
Iteration   8: 3829529.550 ops/s
Iteration   9: 3653391.891 ops/s
Iteration  10: 3852467.205 ops/s
Iteration  11: 3655347.400 ops/s
Iteration  12: 3795265.680 ops/s
Iteration  13: 3793515.368 ops/s
Iteration  14: 3703547.429 ops/s
Iteration  15: 3784471.828 ops/s
Iteration  16: 3882160.554 ops/s
Iteration  17: 3718340.703 ops/s
Iteration  18: 3893268.461 ops/s
Iteration  19: 3674007.085 ops/s
Iteration  20: 3929440.692 ops/s
Iteration  21: 3859434.983 ops/s
Iteration  22: 3774072.206 ops/s
Iteration  23: 3795372.330 ops/s
Iteration  24: 3833915.705 ops/s
Iteration  25: 3738394.943 ops/s
Iteration  26: 3736152.881 ops/s
Iteration  27: 3692356.472 ops/s
Iteration  28: 3810620.840 ops/s
Iteration  29: 3938388.028 ops/s
Iteration  30: 3784115.707 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_singleSourcesInIterable":
  3785357.190 ±(99.9%) 62053.930 ops/s [Average]
  (min, avg, max) = (3617105.276, 3785357.190, 3964018.287), stdev = 92879.409
  CI (99.9%): [3723303.260, 3847411.121] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SingleZipIterableTest._Benchmark.benchmark_singleSourcesInIterable  thrpt   30  3785357.190 ± 62053.930  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_onErrorResumeWith$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_onErrorResumeWith

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 242307.325 ops/s
# Warmup Iteration   2: 602420.081 ops/s
# Warmup Iteration   3: 651331.332 ops/s
# Warmup Iteration   4: 621986.322 ops/s
# Warmup Iteration   5: 656845.534 ops/s
# Warmup Iteration   6: 726475.451 ops/s
# Warmup Iteration   7: 672420.211 ops/s
# Warmup Iteration   8: 691899.415 ops/s
# Warmup Iteration   9: 699867.417 ops/s
# Warmup Iteration  10: 672096.156 ops/s
# Warmup Iteration  11: 688392.705 ops/s
# Warmup Iteration  12: 686647.362 ops/s
# Warmup Iteration  13: 676904.063 ops/s
# Warmup Iteration  14: 708592.738 ops/s
# Warmup Iteration  15: 680456.392 ops/s
# Warmup Iteration  16: 711597.813 ops/s
# Warmup Iteration  17: 702294.284 ops/s
# Warmup Iteration  18: 678904.971 ops/s
# Warmup Iteration  19: 737296.332 ops/s
# Warmup Iteration  20: 696598.608 ops/s
# Warmup Iteration  21: 735816.969 ops/s
# Warmup Iteration  22: 735167.339 ops/s
# Warmup Iteration  23: 701046.262 ops/s
# Warmup Iteration  24: 696120.080 ops/s
# Warmup Iteration  25: 736640.802 ops/s
# Warmup Iteration  26: 709070.421 ops/s
# Warmup Iteration  27: 728987.509 ops/s
# Warmup Iteration  28: 699170.692 ops/s
# Warmup Iteration  29: 682443.836 ops/s
# Warmup Iteration  30: 722305.291 ops/s
Iteration   1: 700391.563 ops/s
Iteration   2: 721772.929 ops/s
Iteration   3: 723998.560 ops/s
Iteration   4: 689907.616 ops/s
Iteration   5: 725214.680 ops/s
Iteration   6: 699184.118 ops/s
Iteration   7: 719151.487 ops/s
Iteration   8: 721296.425 ops/s
Iteration   9: 708421.732 ops/s
Iteration  10: 740872.346 ops/s
Iteration  11: 695700.629 ops/s
Iteration  12: 705633.713 ops/s
Iteration  13: 734648.981 ops/s
Iteration  14: 703488.179 ops/s
Iteration  15: 685790.478 ops/s
Iteration  16: 707998.270 ops/s
Iteration  17: 739210.184 ops/s
Iteration  18: 694482.502 ops/s
Iteration  19: 682690.116 ops/s
Iteration  20: 652749.569 ops/s
Iteration  21: 695361.366 ops/s
Iteration  22: 735233.614 ops/s
Iteration  23: 708304.723 ops/s
Iteration  24: 747460.519 ops/s
Iteration  25: 688456.019 ops/s
Iteration  26: 733662.797 ops/s
Iteration  27: 711571.317 ops/s
Iteration  28: 705508.843 ops/s
Iteration  29: 735995.928 ops/s
Iteration  30: 704149.831 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_onErrorResumeWith":
  710610.301 ±(99.9%) 14107.413 ops/s [Average]
  (min, avg, max) = (652749.569, 710610.301, 747460.519), stdev = 21115.313
  CI (99.9%): [696502.888, 724717.714] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
SingleMiscTest._Benchmark.benchmark_onErrorResumeWith  thrpt   30  710610.301 ± 14107.413  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_delayedErrorOnSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_delayedErrorOnSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 444426.943 ops/s
# Warmup Iteration   2: 1595697.743 ops/s
# Warmup Iteration   3: 2015538.479 ops/s
# Warmup Iteration   4: 2327821.577 ops/s
# Warmup Iteration   5: 2416445.320 ops/s
# Warmup Iteration   6: 2375433.356 ops/s
# Warmup Iteration   7: 2444896.579 ops/s
# Warmup Iteration   8: 2306675.892 ops/s
# Warmup Iteration   9: 2310575.939 ops/s
# Warmup Iteration  10: 2447198.179 ops/s
# Warmup Iteration  11: 2449315.919 ops/s
# Warmup Iteration  12: 2329535.123 ops/s
# Warmup Iteration  13: 2374417.843 ops/s
# Warmup Iteration  14: 2413959.090 ops/s
# Warmup Iteration  15: 2304758.400 ops/s
# Warmup Iteration  16: 2412766.296 ops/s
# Warmup Iteration  17: 2398491.275 ops/s
# Warmup Iteration  18: 2380907.005 ops/s
# Warmup Iteration  19: 2379488.779 ops/s
# Warmup Iteration  20: 2446333.425 ops/s
# Warmup Iteration  21: 2331691.777 ops/s
# Warmup Iteration  22: 2424950.432 ops/s
# Warmup Iteration  23: 2381773.388 ops/s
# Warmup Iteration  24: 2336401.130 ops/s
# Warmup Iteration  25: 2384224.372 ops/s
# Warmup Iteration  26: 2310109.784 ops/s
# Warmup Iteration  27: 2439847.431 ops/s
# Warmup Iteration  28: 2362704.262 ops/s
# Warmup Iteration  29: 2444905.738 ops/s
# Warmup Iteration  30: 2437764.390 ops/s
Iteration   1: 2337767.775 ops/s
Iteration   2: 2399404.450 ops/s
Iteration   3: 2296618.552 ops/s
Iteration   4: 2488093.510 ops/s
Iteration   5: 2436092.110 ops/s
Iteration   6: 2339854.832 ops/s
Iteration   7: 2438950.237 ops/s
Iteration   8: 2456332.331 ops/s
Iteration   9: 2420121.059 ops/s
Iteration  10: 2427654.841 ops/s
Iteration  11: 2377057.034 ops/s
Iteration  12: 2450449.872 ops/s
Iteration  13: 2321820.874 ops/s
Iteration  14: 2339913.385 ops/s
Iteration  15: 2402178.598 ops/s
Iteration  16: 2349272.124 ops/s
Iteration  17: 2380682.455 ops/s
Iteration  18: 2447135.979 ops/s
Iteration  19: 2402040.233 ops/s
Iteration  20: 2323010.715 ops/s
Iteration  21: 2453198.323 ops/s
Iteration  22: 2343893.724 ops/s
Iteration  23: 2444002.220 ops/s
Iteration  24: 2304483.821 ops/s
Iteration  25: 2379043.601 ops/s
Iteration  26: 2413807.159 ops/s
Iteration  27: 2327485.983 ops/s
Iteration  28: 2484675.628 ops/s
Iteration  29: 2319719.464 ops/s
Iteration  30: 2428968.844 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_delayedErrorOnSuccess":
  2391124.324 ±(99.9%) 37634.280 ops/s [Average]
  (min, avg, max) = (2296618.552, 2391124.324, 2488093.510), stdev = 56329.224
  CI (99.9%): [2353490.044, 2428758.605] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SingleDelayTest._Benchmark.benchmark_delayedErrorOnSuccess  thrpt   30  2391124.324 ± 37634.280  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_delayOnSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_delayOnSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 462439.424 ops/s
# Warmup Iteration   2: 1630341.131 ops/s
# Warmup Iteration   3: 2097756.427 ops/s
# Warmup Iteration   4: 2316056.041 ops/s
# Warmup Iteration   5: 2336554.805 ops/s
# Warmup Iteration   6: 2410166.229 ops/s
# Warmup Iteration   7: 2323390.281 ops/s
# Warmup Iteration   8: 2427082.126 ops/s
# Warmup Iteration   9: 2416180.016 ops/s
# Warmup Iteration  10: 2282967.778 ops/s
# Warmup Iteration  11: 2349151.045 ops/s
# Warmup Iteration  12: 2336036.913 ops/s
# Warmup Iteration  13: 2400089.029 ops/s
# Warmup Iteration  14: 2371863.092 ops/s
# Warmup Iteration  15: 2377004.232 ops/s
# Warmup Iteration  16: 2386751.478 ops/s
# Warmup Iteration  17: 2307348.254 ops/s
# Warmup Iteration  18: 2438603.348 ops/s
# Warmup Iteration  19: 2352854.969 ops/s
# Warmup Iteration  20: 2387026.727 ops/s
# Warmup Iteration  21: 2371564.002 ops/s
# Warmup Iteration  22: 2403813.139 ops/s
# Warmup Iteration  23: 2342618.610 ops/s
# Warmup Iteration  24: 2307507.180 ops/s
# Warmup Iteration  25: 2424152.497 ops/s
# Warmup Iteration  26: 2569863.085 ops/s
# Warmup Iteration  27: 2295646.998 ops/s
# Warmup Iteration  28: 2420506.925 ops/s
# Warmup Iteration  29: 2334261.872 ops/s
# Warmup Iteration  30: 2391480.084 ops/s
Iteration   1: 2458858.321 ops/s
Iteration   2: 2365768.162 ops/s
Iteration   3: 2415738.929 ops/s
Iteration   4: 2463750.139 ops/s
Iteration   5: 2308657.813 ops/s
Iteration   6: 2385029.081 ops/s
Iteration   7: 2433491.785 ops/s
Iteration   8: 2305797.376 ops/s
Iteration   9: 2391442.274 ops/s
Iteration  10: 2309465.730 ops/s
Iteration  11: 2431446.796 ops/s
Iteration  12: 2286466.943 ops/s
Iteration  13: 2437508.551 ops/s
Iteration  14: 2436896.770 ops/s
Iteration  15: 2017440.858 ops/s
Iteration  16: 2309711.278 ops/s
Iteration  17: 2413817.181 ops/s
Iteration  18: 2471749.350 ops/s
Iteration  19: 2297684.659 ops/s
Iteration  20: 2456095.795 ops/s
Iteration  21: 2325753.734 ops/s
Iteration  22: 2297995.873 ops/s
Iteration  23: 2482665.705 ops/s
Iteration  24: 2297266.388 ops/s
Iteration  25: 2486551.030 ops/s
Iteration  26: 2491510.630 ops/s
Iteration  27: 2345981.561 ops/s
Iteration  28: 2361167.921 ops/s
Iteration  29: 2310353.315 ops/s
Iteration  30: 2436966.662 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_delayOnSuccess":
  2374434.354 ±(99.9%) 64379.908 ops/s [Average]
  (min, avg, max) = (2017440.858, 2374434.354, 2491510.630), stdev = 96360.823
  CI (99.9%): [2310054.446, 2438814.262] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
SingleDelayTest._Benchmark.benchmark_delayOnSuccess  thrpt   30  2374434.354 ± 64379.908  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_singleSourceZipperReturnsNull2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_singleSourceZipperReturnsNull2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 163893.087 ops/s
# Warmup Iteration   2: 452093.932 ops/s
# Warmup Iteration   3: 512389.595 ops/s
# Warmup Iteration   4: 499058.850 ops/s
# Warmup Iteration   5: 516531.343 ops/s
# Warmup Iteration   6: 448248.191 ops/s
# Warmup Iteration   7: 541608.571 ops/s
# Warmup Iteration   8: 491866.532 ops/s
# Warmup Iteration   9: 551487.430 ops/s
# Warmup Iteration  10: 514898.292 ops/s
# Warmup Iteration  11: 515894.150 ops/s
# Warmup Iteration  12: 537400.386 ops/s
# Warmup Iteration  13: 529063.368 ops/s
# Warmup Iteration  14: 529069.178 ops/s
# Warmup Iteration  15: 527346.352 ops/s
# Warmup Iteration  16: 552587.928 ops/s
# Warmup Iteration  17: 532881.699 ops/s
# Warmup Iteration  18: 561169.354 ops/s
# Warmup Iteration  19: 549820.707 ops/s
# Warmup Iteration  20: 545993.640 ops/s
# Warmup Iteration  21: 547316.420 ops/s
# Warmup Iteration  22: 534752.853 ops/s
# Warmup Iteration  23: 558177.145 ops/s
# Warmup Iteration  24: 536094.471 ops/s
# Warmup Iteration  25: 547523.934 ops/s
# Warmup Iteration  26: 536534.159 ops/s
# Warmup Iteration  27: 575091.906 ops/s
# Warmup Iteration  28: 545431.956 ops/s
# Warmup Iteration  29: 533826.124 ops/s
# Warmup Iteration  30: 567757.649 ops/s
Iteration   1: 549667.767 ops/s
Iteration   2: 537892.443 ops/s
Iteration   3: 567055.804 ops/s
Iteration   4: 566524.884 ops/s
Iteration   5: 543977.276 ops/s
Iteration   6: 562746.154 ops/s
Iteration   7: 547274.932 ops/s
Iteration   8: 539148.615 ops/s
Iteration   9: 547196.447 ops/s
Iteration  10: 540902.739 ops/s
Iteration  11: 549568.899 ops/s
Iteration  12: 551479.537 ops/s
Iteration  13: 567431.761 ops/s
Iteration  14: 547907.191 ops/s
Iteration  15: 526361.929 ops/s
Iteration  16: 548810.068 ops/s
Iteration  17: 551302.890 ops/s
Iteration  18: 535889.566 ops/s
Iteration  19: 567099.380 ops/s
Iteration  20: 533703.422 ops/s
Iteration  21: 571717.684 ops/s
Iteration  22: 536092.311 ops/s
Iteration  23: 535170.252 ops/s
Iteration  24: 571906.143 ops/s
Iteration  25: 559917.762 ops/s
Iteration  26: 531900.070 ops/s
Iteration  27: 571639.458 ops/s
Iteration  28: 539554.380 ops/s
Iteration  29: 538960.484 ops/s
Iteration  30: 557325.629 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_singleSourceZipperReturnsNull2":
  549870.863 ±(99.9%) 9030.431 ops/s [Average]
  (min, avg, max) = (526361.929, 549870.863, 571906.143), stdev = 13516.325
  CI (99.9%): [540840.431, 558901.294] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
SingleZipArrayTest._Benchmark.benchmark_singleSourceZipperReturnsNull2  thrpt   30  549870.863 ± 9030.431  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 188671.160 ops/s
# Warmup Iteration   2: 447517.413 ops/s
# Warmup Iteration   3: 468659.090 ops/s
# Warmup Iteration   4: 505258.203 ops/s
# Warmup Iteration   5: 537607.204 ops/s
# Warmup Iteration   6: 510880.528 ops/s
# Warmup Iteration   7: 506657.258 ops/s
# Warmup Iteration   8: 536206.574 ops/s
# Warmup Iteration   9: 519913.459 ops/s
# Warmup Iteration  10: 499780.418 ops/s
# Warmup Iteration  11: 519422.859 ops/s
# Warmup Iteration  12: 515554.518 ops/s
# Warmup Iteration  13: 508900.688 ops/s
# Warmup Iteration  14: 521260.342 ops/s
# Warmup Iteration  15: 518014.807 ops/s
# Warmup Iteration  16: 538756.215 ops/s
# Warmup Iteration  17: 532266.038 ops/s
# Warmup Iteration  18: 535717.767 ops/s
# Warmup Iteration  19: 520934.229 ops/s
# Warmup Iteration  20: 547321.863 ops/s
# Warmup Iteration  21: 559504.850 ops/s
# Warmup Iteration  22: 541555.220 ops/s
# Warmup Iteration  23: 526253.318 ops/s
# Warmup Iteration  24: 528048.049 ops/s
# Warmup Iteration  25: 573434.000 ops/s
# Warmup Iteration  26: 525445.340 ops/s
# Warmup Iteration  27: 536713.529 ops/s
# Warmup Iteration  28: 548681.443 ops/s
# Warmup Iteration  29: 532277.926 ops/s
# Warmup Iteration  30: 551503.320 ops/s
Iteration   1: 535679.372 ops/s
Iteration   2: 549990.923 ops/s
Iteration   3: 540808.155 ops/s
Iteration   4: 546700.520 ops/s
Iteration   5: 552094.150 ops/s
Iteration   6: 521925.469 ops/s
Iteration   7: 562717.025 ops/s
Iteration   8: 529980.196 ops/s
Iteration   9: 433721.844 ops/s
Iteration  10: 532648.135 ops/s
Iteration  11: 528796.689 ops/s
Iteration  12: 545764.180 ops/s
Iteration  13: 527184.174 ops/s
Iteration  14: 538590.593 ops/s
Iteration  15: 548022.909 ops/s
Iteration  16: 536822.548 ops/s
Iteration  17: 570336.056 ops/s
Iteration  18: 533461.127 ops/s
Iteration  19: 528737.373 ops/s
Iteration  20: 551061.696 ops/s
Iteration  21: 539778.362 ops/s
Iteration  22: 551020.306 ops/s
Iteration  23: 541442.222 ops/s
Iteration  24: 554528.824 ops/s
Iteration  25: 556867.286 ops/s
Iteration  26: 524236.087 ops/s
Iteration  27: 557728.967 ops/s
Iteration  28: 525699.080 ops/s
Iteration  29: 551705.782 ops/s
Iteration  30: 558209.177 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_doubleOnSubscribe":
  539208.641 ±(99.9%) 15717.942 ops/s [Average]
  (min, avg, max) = (433721.844, 539208.641, 570336.056), stdev = 23525.877
  CI (99.9%): [523490.699, 554926.583] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
SingleFlatMapTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  539208.641 ± 15717.942  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161577.755 ops/s
# Warmup Iteration   2: 463484.970 ops/s
# Warmup Iteration   3: 510066.706 ops/s
# Warmup Iteration   4: 480444.346 ops/s
# Warmup Iteration   5: 522561.616 ops/s
# Warmup Iteration   6: 525140.881 ops/s
# Warmup Iteration   7: 518432.417 ops/s
# Warmup Iteration   8: 508499.883 ops/s
# Warmup Iteration   9: 533122.004 ops/s
# Warmup Iteration  10: 509373.822 ops/s
# Warmup Iteration  11: 499362.672 ops/s
# Warmup Iteration  12: 527361.107 ops/s
# Warmup Iteration  13: 498532.107 ops/s
# Warmup Iteration  14: 525625.879 ops/s
# Warmup Iteration  15: 507125.400 ops/s
# Warmup Iteration  16: 537009.732 ops/s
# Warmup Iteration  17: 521281.496 ops/s
# Warmup Iteration  18: 549240.542 ops/s
# Warmup Iteration  19: 557376.910 ops/s
# Warmup Iteration  20: 518794.010 ops/s
# Warmup Iteration  21: 556051.995 ops/s
# Warmup Iteration  22: 519998.830 ops/s
# Warmup Iteration  23: 548148.888 ops/s
# Warmup Iteration  24: 533491.689 ops/s
# Warmup Iteration  25: 537554.627 ops/s
# Warmup Iteration  26: 557403.331 ops/s
# Warmup Iteration  27: 521285.071 ops/s
# Warmup Iteration  28: 555776.088 ops/s
# Warmup Iteration  29: 529877.562 ops/s
# Warmup Iteration  30: 542881.081 ops/s
Iteration   1: 534084.144 ops/s
Iteration   2: 544261.571 ops/s
Iteration   3: 530851.151 ops/s
Iteration   4: 536463.645 ops/s
Iteration   5: 538055.035 ops/s
Iteration   6: 541625.133 ops/s
Iteration   7: 540936.373 ops/s
Iteration   8: 534348.500 ops/s
Iteration   9: 538022.833 ops/s
Iteration  10: 508037.055 ops/s
Iteration  11: 540700.895 ops/s
Iteration  12: 563366.697 ops/s
Iteration  13: 526149.119 ops/s
Iteration  14: 554270.205 ops/s
Iteration  15: 542636.043 ops/s
Iteration  16: 518004.214 ops/s
Iteration  17: 550784.168 ops/s
Iteration  18: 548400.058 ops/s
Iteration  19: 555690.567 ops/s
Iteration  20: 526862.107 ops/s
Iteration  21: 556638.233 ops/s
Iteration  22: 532291.522 ops/s
Iteration  23: 544361.662 ops/s
Iteration  24: 525747.856 ops/s
Iteration  25: 557072.272 ops/s
Iteration  26: 549465.597 ops/s
Iteration  27: 528647.624 ops/s
Iteration  28: 557716.133 ops/s
Iteration  29: 549022.231 ops/s
Iteration  30: 542189.678 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_doubleOnSubscribe":
  540556.744 ±(99.9%) 8516.023 ops/s [Average]
  (min, avg, max) = (508037.055, 540556.744, 563366.697), stdev = 12746.383
  CI (99.9%): [532040.721, 549072.767] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SingleConcatMapTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  540556.744 ± 8516.023  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_secondError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_secondError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 94804.734 ops/s
# Warmup Iteration   2: 479245.215 ops/s
# Warmup Iteration   3: 571935.605 ops/s
# Warmup Iteration   4: 611443.245 ops/s
# Warmup Iteration   5: 602910.105 ops/s
# Warmup Iteration   6: 636109.293 ops/s
# Warmup Iteration   7: 641998.790 ops/s
# Warmup Iteration   8: 659317.952 ops/s
# Warmup Iteration   9: 625917.750 ops/s
# Warmup Iteration  10: 666692.726 ops/s
# Warmup Iteration  11: 636551.080 ops/s
# Warmup Iteration  12: 671808.466 ops/s
# Warmup Iteration  13: 631824.744 ops/s
# Warmup Iteration  14: 659195.203 ops/s
# Warmup Iteration  15: 633222.541 ops/s
# Warmup Iteration  16: 629349.736 ops/s
# Warmup Iteration  17: 691999.763 ops/s
# Warmup Iteration  18: 665608.347 ops/s
# Warmup Iteration  19: 708119.754 ops/s
# Warmup Iteration  20: 675320.068 ops/s
# Warmup Iteration  21: 674088.995 ops/s
# Warmup Iteration  22: 697690.413 ops/s
# Warmup Iteration  23: 667472.744 ops/s
# Warmup Iteration  24: 698352.172 ops/s
# Warmup Iteration  25: 681060.459 ops/s
# Warmup Iteration  26: 675016.548 ops/s
# Warmup Iteration  27: 704927.191 ops/s
# Warmup Iteration  28: 682641.339 ops/s
# Warmup Iteration  29: 686403.377 ops/s
# Warmup Iteration  30: 656782.139 ops/s
Iteration   1: 693566.420 ops/s
Iteration   2: 703569.730 ops/s
Iteration   3: 664095.857 ops/s
Iteration   4: 581198.836 ops/s
Iteration   5: 720731.575 ops/s
Iteration   6: 655192.103 ops/s
Iteration   7: 712035.531 ops/s
Iteration   8: 654036.802 ops/s
Iteration   9: 695717.382 ops/s
Iteration  10: 686152.297 ops/s
Iteration  11: 666962.921 ops/s
Iteration  12: 708426.116 ops/s
Iteration  13: 674213.466 ops/s
Iteration  14: 700692.815 ops/s
Iteration  15: 690718.779 ops/s
Iteration  16: 697659.828 ops/s
Iteration  17: 668549.683 ops/s
Iteration  18: 694199.015 ops/s
Iteration  19: 666253.604 ops/s
Iteration  20: 673998.978 ops/s
Iteration  21: 678164.982 ops/s
Iteration  22: 699433.488 ops/s
Iteration  23: 707600.733 ops/s
Iteration  24: 657627.775 ops/s
Iteration  25: 694373.501 ops/s
Iteration  26: 683018.626 ops/s
Iteration  27: 689708.052 ops/s
Iteration  28: 684323.599 ops/s
Iteration  29: 697544.687 ops/s
Iteration  30: 696650.766 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_secondError":
  683213.932 ±(99.9%) 17406.899 ops/s [Average]
  (min, avg, max) = (581198.836, 683213.932, 720731.575), stdev = 26053.828
  CI (99.9%): [665807.033, 700620.830] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
SingleZipArrayTest._Benchmark.benchmark_secondError  thrpt   30  683213.932 ± 17406.899  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOnTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOnTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 324601.508 ops/s
# Warmup Iteration   2: 582400.224 ops/s
# Warmup Iteration   3: 750443.050 ops/s
# Warmup Iteration   4: 707369.439 ops/s
# Warmup Iteration   5: 747560.965 ops/s
# Warmup Iteration   6: 697608.343 ops/s
# Warmup Iteration   7: 745306.663 ops/s
# Warmup Iteration   8: 694797.636 ops/s
# Warmup Iteration   9: 725265.398 ops/s
# Warmup Iteration  10: 723111.647 ops/s
# Warmup Iteration  11: 690550.634 ops/s
# Warmup Iteration  12: 705118.375 ops/s
# Warmup Iteration  13: 704207.798 ops/s
# Warmup Iteration  14: 722764.427 ops/s
# Warmup Iteration  15: 737108.461 ops/s
# Warmup Iteration  16: 721252.787 ops/s
# Warmup Iteration  17: 770040.911 ops/s
# Warmup Iteration  18: 793233.354 ops/s
# Warmup Iteration  19: 716315.891 ops/s
# Warmup Iteration  20: 779310.203 ops/s
# Warmup Iteration  21: 759539.059 ops/s
# Warmup Iteration  22: 788971.200 ops/s
# Warmup Iteration  23: 773084.521 ops/s
# Warmup Iteration  24: 757927.110 ops/s
# Warmup Iteration  25: 801596.740 ops/s
# Warmup Iteration  26: 762101.767 ops/s
# Warmup Iteration  27: 776827.454 ops/s
# Warmup Iteration  28: 761807.952 ops/s
# Warmup Iteration  29: 788137.357 ops/s
# Warmup Iteration  30: 758884.839 ops/s
Iteration   1: 766130.479 ops/s
Iteration   2: 779113.930 ops/s
Iteration   3: 775923.640 ops/s
Iteration   4: 773520.832 ops/s
Iteration   5: 766651.832 ops/s
Iteration   6: 790271.183 ops/s
Iteration   7: 795673.440 ops/s
Iteration   8: 727650.338 ops/s
Iteration   9: 751043.016 ops/s
Iteration  10: 770221.787 ops/s
Iteration  11: 714719.443 ops/s
Iteration  12: 788004.849 ops/s
Iteration  13: 751479.024 ops/s
Iteration  14: 800480.086 ops/s
Iteration  15: 768585.881 ops/s
Iteration  16: 752931.553 ops/s
Iteration  17: 793750.407 ops/s
Iteration  18: 754383.792 ops/s
Iteration  19: 811239.044 ops/s
Iteration  20: 758314.379 ops/s
Iteration  21: 791794.468 ops/s
Iteration  22: 763337.906 ops/s
Iteration  23: 786924.837 ops/s
Iteration  24: 790329.777 ops/s
Iteration  25: 752155.431 ops/s
Iteration  26: 796113.560 ops/s
Iteration  27: 756972.432 ops/s
Iteration  28: 773109.402 ops/s
Iteration  29: 782551.913 ops/s
Iteration  30: 761541.072 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOnTest._Benchmark.benchmark_error":
  771497.324 ±(99.9%) 14431.680 ops/s [Average]
  (min, avg, max) = (714719.443, 771497.324, 811239.044), stdev = 21600.661
  CI (99.9%): [757065.645, 785929.004] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
SingleUnsubscribeOnTest._Benchmark.benchmark_error  thrpt   30  771497.324 ± 14431.680  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32908.454 ops/s
# Warmup Iteration   2: 134194.804 ops/s
# Warmup Iteration   3: 101069.254 ops/s
# Warmup Iteration   4: 68476.712 ops/s
# Warmup Iteration   5: 140277.426 ops/s
# Warmup Iteration   6: 159368.244 ops/s
# Warmup Iteration   7: 126834.108 ops/s
# Warmup Iteration   8: 182011.763 ops/s
# Warmup Iteration   9: 141667.807 ops/s
# Warmup Iteration  10: 141699.487 ops/s
# Warmup Iteration  11: 130279.095 ops/s
# Warmup Iteration  12: 139240.765 ops/s
# Warmup Iteration  13: 135388.670 ops/s
# Warmup Iteration  14: 132430.901 ops/s
# Warmup Iteration  15: 114736.600 ops/s
# Warmup Iteration  16: 138517.460 ops/s
# Warmup Iteration  17: 161906.060 ops/s
# Warmup Iteration  18: 157831.091 ops/s
# Warmup Iteration  19: 116953.875 ops/s
# Warmup Iteration  20: 126940.248 ops/s
# Warmup Iteration  21: 156493.010 ops/s
# Warmup Iteration  22: 133563.307 ops/s
# Warmup Iteration  23: 125363.304 ops/s
# Warmup Iteration  24: 148310.057 ops/s
# Warmup Iteration  25: 166602.708 ops/s
# Warmup Iteration  26: 128348.275 ops/s
# Warmup Iteration  27: 148619.274 ops/s
# Warmup Iteration  28: 133407.605 ops/s
# Warmup Iteration  29: 127045.343 ops/s
# Warmup Iteration  30: 126262.953 ops/s
Iteration   1: 134567.544 ops/s
Iteration   2: 123569.114 ops/s
Iteration   3: 123188.199 ops/s
Iteration   4: 149547.266 ops/s
Iteration   5: 138067.187 ops/s
Iteration   6: 137542.543 ops/s
Iteration   7: 120388.298 ops/s
Iteration   8: 133163.117 ops/s
Iteration   9: 120959.731 ops/s
Iteration  10: 129098.005 ops/s
Iteration  11: 134642.027 ops/s
Iteration  12: 140340.043 ops/s
Iteration  13: 144161.346 ops/s
Iteration  14: 128726.620 ops/s
Iteration  15: 118025.278 ops/s
Iteration  16: 149867.443 ops/s
Iteration  17: 138246.835 ops/s
Iteration  18: 134239.011 ops/s
Iteration  19: 125676.303 ops/s
Iteration  20: 174144.129 ops/s
Iteration  21: 137266.154 ops/s
Iteration  22: 151639.425 ops/s
Iteration  23: 154683.321 ops/s
Iteration  24: 156590.237 ops/s
Iteration  25: 130336.969 ops/s
Iteration  26: 139275.261 ops/s
Iteration  27: 147189.236 ops/s
Iteration  28: 141767.013 ops/s
Iteration  29: 150073.125 ops/s
Iteration  30: 123236.251 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_isDisposed":
  137673.901 ±(99.9%) 8558.891 ops/s [Average]
  (min, avg, max) = (118025.278, 137673.901, 174144.129), stdev = 12810.547
  CI (99.9%): [129115.010, 146232.792] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
SingleTimeoutTest._Benchmark.benchmark_isDisposed  thrpt   30  137673.901 ± 8558.891  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_signalAfterDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_signalAfterDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14541.979 ops/s
# Warmup Iteration   2: 36432.911 ops/s
# Warmup Iteration   3: 64775.941 ops/s
# Warmup Iteration   4: 77861.212 ops/s
# Warmup Iteration   5: 69289.417 ops/s
# Warmup Iteration   6: 76718.043 ops/s
# Warmup Iteration   7: 69414.894 ops/s
# Warmup Iteration   8: 77932.614 ops/s
# Warmup Iteration   9: 80092.577 ops/s
# Warmup Iteration  10: 77009.719 ops/s
# Warmup Iteration  11: 77056.373 ops/s
# Warmup Iteration  12: 80373.601 ops/s
# Warmup Iteration  13: 76426.956 ops/s
# Warmup Iteration  14: 79368.165 ops/s
# Warmup Iteration  15: 78239.216 ops/s
# Warmup Iteration  16: 80863.726 ops/s
# Warmup Iteration  17: 80204.287 ops/s
# Warmup Iteration  18: 78599.587 ops/s
# Warmup Iteration  19: 73010.197 ops/s
# Warmup Iteration  20: 78037.418 ops/s
# Warmup Iteration  21: 74013.597 ops/s
# Warmup Iteration  22: 72713.474 ops/s
# Warmup Iteration  23: 74765.607 ops/s
# Warmup Iteration  24: 77029.972 ops/s
# Warmup Iteration  25: 73798.627 ops/s
# Warmup Iteration  26: 73099.413 ops/s
# Warmup Iteration  27: 80458.794 ops/s
# Warmup Iteration  28: 76439.598 ops/s
# Warmup Iteration  29: 77485.984 ops/s
# Warmup Iteration  30: 81439.615 ops/s
Iteration   1: 76578.042 ops/s
Iteration   2: 75360.470 ops/s
Iteration   3: 75567.668 ops/s
Iteration   4: 72955.457 ops/s
Iteration   5: 76188.418 ops/s
Iteration   6: 71455.186 ops/s
Iteration   7: 79300.101 ops/s
Iteration   8: 76323.022 ops/s
Iteration   9: 75256.449 ops/s
Iteration  10: 80616.254 ops/s
Iteration  11: 77393.081 ops/s
Iteration  12: 79441.071 ops/s
Iteration  13: 76238.663 ops/s
Iteration  14: 74808.519 ops/s
Iteration  15: 78695.276 ops/s
Iteration  16: 78097.654 ops/s
Iteration  17: 79318.767 ops/s
Iteration  18: 74641.212 ops/s
Iteration  19: 76498.299 ops/s
Iteration  20: 80760.335 ops/s
Iteration  21: 74686.222 ops/s
Iteration  22: 79533.082 ops/s
Iteration  23: 77125.512 ops/s
Iteration  24: 75337.971 ops/s
Iteration  25: 74858.939 ops/s
Iteration  26: 71664.464 ops/s
Iteration  27: 80756.280 ops/s
Iteration  28: 79272.541 ops/s
Iteration  29: 68845.724 ops/s
Iteration  30: 74103.706 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_signalAfterDispose":
  76389.280 ±(99.9%) 1945.962 ops/s [Average]
  (min, avg, max) = (68845.724, 76389.280, 80760.335), stdev = 2912.625
  CI (99.9%): [74443.317, 78335.242] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt      Score      Error  Units
ObservableUnsubscribeOnTest._Benchmark.benchmark_signalAfterDispose  thrpt   30  76389.280 ± 1945.962  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_firstWindowMissingBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_firstWindowMissingBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 92355.731 ops/s
# Warmup Iteration   2: 366097.455 ops/s
# Warmup Iteration   3: 469826.537 ops/s
# Warmup Iteration   4: 493232.627 ops/s
# Warmup Iteration   5: 474591.714 ops/s
# Warmup Iteration   6: 489135.917 ops/s
# Warmup Iteration   7: 473556.093 ops/s
# Warmup Iteration   8: 481018.468 ops/s
# Warmup Iteration   9: 465857.802 ops/s
# Warmup Iteration  10: 477143.253 ops/s
# Warmup Iteration  11: 495535.036 ops/s
# Warmup Iteration  12: 458112.501 ops/s
# Warmup Iteration  13: 482643.843 ops/s
# Warmup Iteration  14: 474237.307 ops/s
# Warmup Iteration  15: 489538.358 ops/s
# Warmup Iteration  16: 465113.520 ops/s
# Warmup Iteration  17: 495508.355 ops/s
# Warmup Iteration  18: 497383.488 ops/s
# Warmup Iteration  19: 492385.826 ops/s
# Warmup Iteration  20: 442217.940 ops/s
# Warmup Iteration  21: 478318.941 ops/s
# Warmup Iteration  22: 498600.524 ops/s
# Warmup Iteration  23: 515452.539 ops/s
# Warmup Iteration  24: 474656.046 ops/s
# Warmup Iteration  25: 495596.163 ops/s
# Warmup Iteration  26: 503139.302 ops/s
# Warmup Iteration  27: 483889.759 ops/s
# Warmup Iteration  28: 505607.753 ops/s
# Warmup Iteration  29: 504820.562 ops/s
# Warmup Iteration  30: 472355.669 ops/s
Iteration   1: 513491.466 ops/s
Iteration   2: 483761.609 ops/s
Iteration   3: 501245.411 ops/s
Iteration   4: 510321.386 ops/s
Iteration   5: 465798.729 ops/s
Iteration   6: 520711.807 ops/s
Iteration   7: 485792.992 ops/s
Iteration   8: 502526.750 ops/s
Iteration   9: 506480.154 ops/s
Iteration  10: 495079.298 ops/s
Iteration  11: 498642.205 ops/s
Iteration  12: 497739.678 ops/s
Iteration  13: 491891.441 ops/s
Iteration  14: 489399.914 ops/s
Iteration  15: 515493.340 ops/s
Iteration  16: 491460.727 ops/s
Iteration  17: 492368.097 ops/s
Iteration  18: 499939.897 ops/s
Iteration  19: 493468.793 ops/s
Iteration  20: 508145.713 ops/s
Iteration  21: 479689.694 ops/s
Iteration  22: 493483.902 ops/s
Iteration  23: 490504.225 ops/s
Iteration  24: 516502.757 ops/s
Iteration  25: 497975.735 ops/s
Iteration  26: 496200.751 ops/s
Iteration  27: 517257.242 ops/s
Iteration  28: 509059.200 ops/s
Iteration  29: 484505.923 ops/s
Iteration  30: 493484.862 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_firstWindowMissingBackpressure":
  498080.790 ±(99.9%) 8304.152 ops/s [Average]
  (min, avg, max) = (465798.729, 498080.790, 520711.807), stdev = 12429.264
  CI (99.9%): [489776.638, 506384.942] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_firstWindowMissingBackpressure  thrpt   30  498080.790 ± 8304.152  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9147.637 ops/s
# Warmup Iteration   2: 65399.100 ops/s
# Warmup Iteration   3: 89097.791 ops/s
# Warmup Iteration   4: 75440.990 ops/s
# Warmup Iteration   5: 91887.620 ops/s
# Warmup Iteration   6: 120987.055 ops/s
# Warmup Iteration   7: 116483.000 ops/s
# Warmup Iteration   8: 110505.713 ops/s
# Warmup Iteration   9: 117004.876 ops/s
# Warmup Iteration  10: 104400.704 ops/s
# Warmup Iteration  11: 109929.578 ops/s
# Warmup Iteration  12: 104459.812 ops/s
# Warmup Iteration  13: 120454.061 ops/s
# Warmup Iteration  14: 110619.965 ops/s
# Warmup Iteration  15: 119475.137 ops/s
# Warmup Iteration  16: 96181.517 ops/s
# Warmup Iteration  17: 113166.095 ops/s
# Warmup Iteration  18: 126829.210 ops/s
# Warmup Iteration  19: 127597.920 ops/s
# Warmup Iteration  20: 125416.103 ops/s
# Warmup Iteration  21: 104959.332 ops/s
# Warmup Iteration  22: 108349.045 ops/s
# Warmup Iteration  23: 119297.963 ops/s
# Warmup Iteration  24: 113031.032 ops/s
# Warmup Iteration  25: 120044.597 ops/s
# Warmup Iteration  26: 115400.831 ops/s
# Warmup Iteration  27: 136537.646 ops/s
# Warmup Iteration  28: 110967.010 ops/s
# Warmup Iteration  29: 117988.959 ops/s
# Warmup Iteration  30: 111009.690 ops/s
Iteration   1: 108064.144 ops/s
Iteration   2: 99650.353 ops/s
Iteration   3: 104079.363 ops/s
Iteration   4: 125392.861 ops/s
Iteration   5: 112705.082 ops/s
Iteration   6: 107486.768 ops/s
Iteration   7: 134585.469 ops/s
Iteration   8: 101979.542 ops/s
Iteration   9: 119982.139 ops/s
Iteration  10: 116551.224 ops/s
Iteration  11: 116452.177 ops/s
Iteration  12: 121876.844 ops/s
Iteration  13: 123758.710 ops/s
Iteration  14: 121494.015 ops/s
Iteration  15: 117221.418 ops/s
Iteration  16: 115031.505 ops/s
Iteration  17: 107607.901 ops/s
Iteration  18: 115653.703 ops/s
Iteration  19: 108146.813 ops/s
Iteration  20: 112951.722 ops/s
Iteration  21: 116776.317 ops/s
Iteration  22: 110318.901 ops/s
Iteration  23: 99089.401 ops/s
Iteration  24: 134870.167 ops/s
Iteration  25: 124824.578 ops/s
Iteration  26: 103248.875 ops/s
Iteration  27: 115755.404 ops/s
Iteration  28: 117511.331 ops/s
Iteration  29: 115816.644 ops/s
Iteration  30: 107331.217 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTime":
  114540.486 ±(99.9%) 6078.170 ops/s [Average]
  (min, avg, max) = (99089.401, 114540.486, 134870.167), stdev = 9097.519
  CI (99.9%): [108462.317, 120618.656] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTime  thrpt   30  114540.486 ± 6078.170  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeAndSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeAndSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16347.156 ops/s
# Warmup Iteration   2: 49680.510 ops/s
# Warmup Iteration   3: 65563.382 ops/s
# Warmup Iteration   4: 70307.255 ops/s
# Warmup Iteration   5: 122049.080 ops/s
# Warmup Iteration   6: 114897.183 ops/s
# Warmup Iteration   7: 108791.774 ops/s
# Warmup Iteration   8: 114468.490 ops/s
# Warmup Iteration   9: 113168.097 ops/s
# Warmup Iteration  10: 118029.275 ops/s
# Warmup Iteration  11: 130209.932 ops/s
# Warmup Iteration  12: 129535.277 ops/s
# Warmup Iteration  13: 118313.404 ops/s
# Warmup Iteration  14: 117127.722 ops/s
# Warmup Iteration  15: 105948.598 ops/s
# Warmup Iteration  16: 127588.220 ops/s
# Warmup Iteration  17: 129342.512 ops/s
# Warmup Iteration  18: 108228.123 ops/s
# Warmup Iteration  19: 111216.311 ops/s
# Warmup Iteration  20: 118493.374 ops/s
# Warmup Iteration  21: 107051.831 ops/s
# Warmup Iteration  22: 129769.347 ops/s
# Warmup Iteration  23: 111581.471 ops/s
# Warmup Iteration  24: 111402.635 ops/s
# Warmup Iteration  25: 122410.206 ops/s
# Warmup Iteration  26: 133594.598 ops/s
# Warmup Iteration  27: 116639.250 ops/s
# Warmup Iteration  28: 113899.049 ops/s
# Warmup Iteration  29: 103879.596 ops/s
# Warmup Iteration  30: 117883.093 ops/s
Iteration   1: 130484.367 ops/s
Iteration   2: 103555.420 ops/s
Iteration   3: 147175.220 ops/s
Iteration   4: 112786.675 ops/s
Iteration   5: 111474.213 ops/s
Iteration   6: 96542.400 ops/s
Iteration   7: 119372.254 ops/s
Iteration   8: 106568.719 ops/s
Iteration   9: 127520.428 ops/s
Iteration  10: 111010.032 ops/s
Iteration  11: 101941.036 ops/s
Iteration  12: 107305.551 ops/s
Iteration  13: 114223.530 ops/s
Iteration  14: 136282.169 ops/s
Iteration  15: 123224.668 ops/s
Iteration  16: 124858.034 ops/s
Iteration  17: 117526.864 ops/s
Iteration  18: 103493.442 ops/s
Iteration  19: 115740.708 ops/s
Iteration  20: 117055.504 ops/s
Iteration  21: 123721.583 ops/s
Iteration  22: 110727.696 ops/s
Iteration  23: 102164.972 ops/s
Iteration  24: 99095.553 ops/s
Iteration  25: 123528.045 ops/s
Iteration  26: 119595.220 ops/s
Iteration  27: 109858.357 ops/s
Iteration  28: 104366.543 ops/s
Iteration  29: 117273.175 ops/s
Iteration  30: 114210.962 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeAndSize":
  115089.445 ±(99.9%) 7617.108 ops/s [Average]
  (min, avg, max) = (96542.400, 115089.445, 147175.220), stdev = 11400.930
  CI (99.9%): [107472.337, 122706.553] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt       Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamExactTimeAndSize  thrpt   30  115089.445 ± 7617.108  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStageTest._Benchmark.benchmark_syncFailure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStageTest._Benchmark.benchmark_syncFailure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 132098.717 ops/s
# Warmup Iteration   2: 315454.477 ops/s
# Warmup Iteration   3: 324913.250 ops/s
# Warmup Iteration   4: 324470.168 ops/s
# Warmup Iteration   5: 336080.141 ops/s
# Warmup Iteration   6: 323940.467 ops/s
# Warmup Iteration   7: 333303.928 ops/s
# Warmup Iteration   8: 322698.650 ops/s
# Warmup Iteration   9: 334207.996 ops/s
# Warmup Iteration  10: 331749.415 ops/s
# Warmup Iteration  11: 321440.742 ops/s
# Warmup Iteration  12: 337295.058 ops/s
# Warmup Iteration  13: 308622.921 ops/s
# Warmup Iteration  14: 347865.799 ops/s
# Warmup Iteration  15: 325313.393 ops/s
# Warmup Iteration  16: 338384.072 ops/s
# Warmup Iteration  17: 346913.677 ops/s
# Warmup Iteration  18: 356536.510 ops/s
# Warmup Iteration  19: 358557.540 ops/s
# Warmup Iteration  20: 334006.971 ops/s
# Warmup Iteration  21: 357840.012 ops/s
# Warmup Iteration  22: 343890.336 ops/s
# Warmup Iteration  23: 360441.637 ops/s
# Warmup Iteration  24: 347804.365 ops/s
# Warmup Iteration  25: 357623.109 ops/s
# Warmup Iteration  26: 363640.631 ops/s
# Warmup Iteration  27: 342431.225 ops/s
# Warmup Iteration  28: 367166.105 ops/s
# Warmup Iteration  29: 338284.627 ops/s
# Warmup Iteration  30: 353163.838 ops/s
Iteration   1: 366612.090 ops/s
Iteration   2: 345656.780 ops/s
Iteration   3: 356281.328 ops/s
Iteration   4: 365528.183 ops/s
Iteration   5: 339721.968 ops/s
Iteration   6: 364770.276 ops/s
Iteration   7: 342109.253 ops/s
Iteration   8: 350763.775 ops/s
Iteration   9: 360321.092 ops/s
Iteration  10: 337671.501 ops/s
Iteration  11: 365767.102 ops/s
Iteration  12: 343031.129 ops/s
Iteration  13: 336184.493 ops/s
Iteration  14: 356921.878 ops/s
Iteration  15: 353063.925 ops/s
Iteration  16: 343229.247 ops/s
Iteration  17: 364350.278 ops/s
Iteration  18: 331395.324 ops/s
Iteration  19: 355670.355 ops/s
Iteration  20: 358531.622 ops/s
Iteration  21: 357094.403 ops/s
Iteration  22: 370256.837 ops/s
Iteration  23: 341641.761 ops/s
Iteration  24: 365888.430 ops/s
Iteration  25: 348847.780 ops/s
Iteration  26: 351541.084 ops/s
Iteration  27: 365602.238 ops/s
Iteration  28: 337578.838 ops/s
Iteration  29: 366430.220 ops/s
Iteration  30: 340700.584 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStageTest._Benchmark.benchmark_syncFailure":
  352772.126 ±(99.9%) 7626.779 ops/s [Average]
  (min, avg, max) = (331395.324, 352772.126, 370256.837), stdev = 11415.405
  CI (99.9%): [345145.347, 360398.905] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SingleFromCompletionStageTest._Benchmark.benchmark_syncFailure  thrpt   30  352772.126 ± 7626.779  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingCancelUpfront$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingCancelUpfront

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 121522.936 ops/s
# Warmup Iteration   2: 197499.792 ops/s
# Warmup Iteration   3: 215804.731 ops/s
# Warmup Iteration   4: 212586.325 ops/s
# Warmup Iteration   5: 228333.922 ops/s
# Warmup Iteration   6: 224867.417 ops/s
# Warmup Iteration   7: 157912.721 ops/s
# Warmup Iteration   8: 225021.653 ops/s
# Warmup Iteration   9: 236606.022 ops/s
# Warmup Iteration  10: 234262.760 ops/s
# Warmup Iteration  11: 222754.385 ops/s
# Warmup Iteration  12: 227781.259 ops/s
# Warmup Iteration  13: 234532.893 ops/s
# Warmup Iteration  14: 222360.947 ops/s
# Warmup Iteration  15: 235312.366 ops/s
# Warmup Iteration  16: 222882.981 ops/s
# Warmup Iteration  17: 238541.037 ops/s
# Warmup Iteration  18: 241169.687 ops/s
# Warmup Iteration  19: 241580.456 ops/s
# Warmup Iteration  20: 235333.103 ops/s
# Warmup Iteration  21: 240215.359 ops/s
# Warmup Iteration  22: 240116.686 ops/s
# Warmup Iteration  23: 234545.721 ops/s
# Warmup Iteration  24: 244699.121 ops/s
# Warmup Iteration  25: 234555.998 ops/s
# Warmup Iteration  26: 240402.815 ops/s
# Warmup Iteration  27: 242490.703 ops/s
# Warmup Iteration  28: 234335.689 ops/s
# Warmup Iteration  29: 240298.284 ops/s
# Warmup Iteration  30: 238590.501 ops/s
Iteration   1: 238600.897 ops/s
Iteration   2: 245474.353 ops/s
Iteration   3: 233195.638 ops/s
Iteration   4: 242101.432 ops/s
Iteration   5: 232325.797 ops/s
Iteration   6: 241510.514 ops/s
Iteration   7: 237760.523 ops/s
Iteration   8: 239111.348 ops/s
Iteration   9: 249599.573 ops/s
Iteration  10: 235421.014 ops/s
Iteration  11: 243080.138 ops/s
Iteration  12: 246429.753 ops/s
Iteration  13: 237396.224 ops/s
Iteration  14: 244210.169 ops/s
Iteration  15: 247048.284 ops/s
Iteration  16: 233400.441 ops/s
Iteration  17: 245596.790 ops/s
Iteration  18: 235413.995 ops/s
Iteration  19: 238846.802 ops/s
Iteration  20: 240202.991 ops/s
Iteration  21: 239021.191 ops/s
Iteration  22: 233552.184 ops/s
Iteration  23: 239018.847 ops/s
Iteration  24: 239656.750 ops/s
Iteration  25: 235825.286 ops/s
Iteration  26: 239033.424 ops/s
Iteration  27: 245557.102 ops/s
Iteration  28: 231245.802 ops/s
Iteration  29: 246465.557 ops/s
Iteration  30: 239544.612 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingCancelUpfront":
  239854.914 ±(99.9%) 3272.849 ops/s [Average]
  (min, avg, max) = (231245.802, 239854.914, 249599.573), stdev = 4898.647
  CI (99.9%): [236582.065, 243127.764] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableBlockingTest._Benchmark.benchmark_blockingCancelUpfront  thrpt   30  239854.914 ± 3272.849  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_constructorAndAddVarargs$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_constructorAndAddVarargs

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1861622.366 ops/s
# Warmup Iteration   2: 4677859.370 ops/s
# Warmup Iteration   3: 5486033.955 ops/s
# Warmup Iteration   4: 6087768.204 ops/s
# Warmup Iteration   5: 6314258.741 ops/s
# Warmup Iteration   6: 6282739.798 ops/s
# Warmup Iteration   7: 6109653.952 ops/s
# Warmup Iteration   8: 6266816.411 ops/s
# Warmup Iteration   9: 6187410.627 ops/s
# Warmup Iteration  10: 6307073.177 ops/s
# Warmup Iteration  11: 5903922.767 ops/s
# Warmup Iteration  12: 6432733.147 ops/s
# Warmup Iteration  13: 6101456.277 ops/s
# Warmup Iteration  14: 6247021.270 ops/s
# Warmup Iteration  15: 6143534.622 ops/s
# Warmup Iteration  16: 6336708.731 ops/s
# Warmup Iteration  17: 6505315.188 ops/s
# Warmup Iteration  18: 6062012.691 ops/s
# Warmup Iteration  19: 6416941.081 ops/s
# Warmup Iteration  20: 6127223.099 ops/s
# Warmup Iteration  21: 6461054.761 ops/s
# Warmup Iteration  22: 6148408.930 ops/s
# Warmup Iteration  23: 6396676.105 ops/s
# Warmup Iteration  24: 6216901.371 ops/s
# Warmup Iteration  25: 6053269.749 ops/s
# Warmup Iteration  26: 6299841.130 ops/s
# Warmup Iteration  27: 6427502.709 ops/s
# Warmup Iteration  28: 6171374.013 ops/s
# Warmup Iteration  29: 6073544.493 ops/s
# Warmup Iteration  30: 6344030.922 ops/s
Iteration   1: 6220584.153 ops/s
Iteration   2: 6399087.964 ops/s
Iteration   3: 6624649.585 ops/s
Iteration   4: 5946821.579 ops/s
Iteration   5: 6189819.100 ops/s
Iteration   6: 6280631.287 ops/s
Iteration   7: 6469539.166 ops/s
Iteration   8: 6045678.097 ops/s
Iteration   9: 6399814.905 ops/s
Iteration  10: 6249634.665 ops/s
Iteration  11: 6241952.071 ops/s
Iteration  12: 6528608.747 ops/s
Iteration  13: 5966057.902 ops/s
Iteration  14: 6392985.658 ops/s
Iteration  15: 6374324.194 ops/s
Iteration  16: 6113959.605 ops/s
Iteration  17: 6175153.205 ops/s
Iteration  18: 6542247.569 ops/s
Iteration  19: 6034876.868 ops/s
Iteration  20: 6435410.928 ops/s
Iteration  21: 6212395.575 ops/s
Iteration  22: 6424514.178 ops/s
Iteration  23: 6201121.800 ops/s
Iteration  24: 6289992.155 ops/s
Iteration  25: 6368367.835 ops/s
Iteration  26: 6072187.158 ops/s
Iteration  27: 6208584.696 ops/s
Iteration  28: 6384630.307 ops/s
Iteration  29: 6128869.779 ops/s
Iteration  30: 6217053.014 ops/s


Result "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_constructorAndAddVarargs":
  6271318.458 ±(99.9%) 115064.057 ops/s [Average]
  (min, avg, max) = (5946821.579, 6271318.458, 6624649.585), stdev = 172222.477
  CI (99.9%): [6156254.401, 6386382.515] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
ListCompositeDisposableTest._Benchmark.benchmark_constructorAndAddVarargs  thrpt   30  6271318.458 ± 115064.057  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_eagerMapperThrowsDisposerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_eagerMapperThrowsDisposerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40202.309 ops/s
# Warmup Iteration   2: 145334.050 ops/s
# Warmup Iteration   3: 177558.974 ops/s
# Warmup Iteration   4: 179108.126 ops/s
# Warmup Iteration   5: 205835.951 ops/s
# Warmup Iteration   6: 190101.635 ops/s
# Warmup Iteration   7: 177861.728 ops/s
# Warmup Iteration   8: 196493.374 ops/s
# Warmup Iteration   9: 192613.379 ops/s
# Warmup Iteration  10: 202939.906 ops/s
# Warmup Iteration  11: 196811.602 ops/s
# Warmup Iteration  12: 200425.669 ops/s
# Warmup Iteration  13: 197795.809 ops/s
# Warmup Iteration  14: 207593.704 ops/s
# Warmup Iteration  15: 194287.714 ops/s
# Warmup Iteration  16: 201878.138 ops/s
# Warmup Iteration  17: 215354.674 ops/s
# Warmup Iteration  18: 207508.550 ops/s
# Warmup Iteration  19: 212996.572 ops/s
# Warmup Iteration  20: 204551.292 ops/s
# Warmup Iteration  21: 211529.906 ops/s
# Warmup Iteration  22: 206864.166 ops/s
# Warmup Iteration  23: 212813.501 ops/s
# Warmup Iteration  24: 220826.591 ops/s
# Warmup Iteration  25: 211779.882 ops/s
# Warmup Iteration  26: 207480.296 ops/s
# Warmup Iteration  27: 218941.620 ops/s
# Warmup Iteration  28: 212700.190 ops/s
# Warmup Iteration  29: 205800.473 ops/s
# Warmup Iteration  30: 217801.621 ops/s
Iteration   1: 202484.932 ops/s
Iteration   2: 212126.179 ops/s
Iteration   3: 202648.247 ops/s
Iteration   4: 209091.949 ops/s
Iteration   5: 211891.249 ops/s
Iteration   6: 204717.877 ops/s
Iteration   7: 211593.543 ops/s
Iteration   8: 213157.790 ops/s
Iteration   9: 202738.561 ops/s
Iteration  10: 207630.489 ops/s
Iteration  11: 206856.786 ops/s
Iteration  12: 212720.318 ops/s
Iteration  13: 211332.027 ops/s
Iteration  14: 208225.416 ops/s
Iteration  15: 209264.394 ops/s
Iteration  16: 206263.655 ops/s
Iteration  17: 215896.665 ops/s
Iteration  18: 203051.445 ops/s
Iteration  19: 212362.084 ops/s
Iteration  20: 201903.491 ops/s
Iteration  21: 208013.037 ops/s
Iteration  22: 210754.429 ops/s
Iteration  23: 206562.303 ops/s
Iteration  24: 209343.077 ops/s
Iteration  25: 202358.336 ops/s
Iteration  26: 205234.572 ops/s
Iteration  27: 213065.078 ops/s
Iteration  28: 202226.414 ops/s
Iteration  29: 201093.949 ops/s
Iteration  30: 219986.552 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_eagerMapperThrowsDisposerThrows":
  208153.161 ±(99.9%) 3171.592 ops/s [Average]
  (min, avg, max) = (201093.949, 208153.161, 219986.552), stdev = 4747.090
  CI (99.9%): [204981.570, 211324.753] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SingleUsingTest._Benchmark.benchmark_eagerMapperThrowsDisposerThrows  thrpt   30  208153.161 ± 3171.592  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 108805.048 ops/s
# Warmup Iteration   2: 302719.539 ops/s
# Warmup Iteration   3: 503692.882 ops/s
# Warmup Iteration   4: 501542.032 ops/s
# Warmup Iteration   5: 503194.213 ops/s
# Warmup Iteration   6: 529182.262 ops/s
# Warmup Iteration   7: 493817.596 ops/s
# Warmup Iteration   8: 498902.963 ops/s
# Warmup Iteration   9: 502953.948 ops/s
# Warmup Iteration  10: 509769.632 ops/s
# Warmup Iteration  11: 499216.766 ops/s
# Warmup Iteration  12: 530378.927 ops/s
# Warmup Iteration  13: 501008.614 ops/s
# Warmup Iteration  14: 508724.193 ops/s
# Warmup Iteration  15: 512063.273 ops/s
# Warmup Iteration  16: 528122.845 ops/s
# Warmup Iteration  17: 520283.463 ops/s
# Warmup Iteration  18: 529105.870 ops/s
# Warmup Iteration  19: 525231.296 ops/s
# Warmup Iteration  20: 518328.172 ops/s
# Warmup Iteration  21: 543143.887 ops/s
# Warmup Iteration  22: 512633.883 ops/s
# Warmup Iteration  23: 531000.444 ops/s
# Warmup Iteration  24: 523737.979 ops/s
# Warmup Iteration  25: 528497.337 ops/s
# Warmup Iteration  26: 535823.224 ops/s
# Warmup Iteration  27: 551467.080 ops/s
# Warmup Iteration  28: 516915.330 ops/s
# Warmup Iteration  29: 539254.038 ops/s
# Warmup Iteration  30: 523246.401 ops/s
Iteration   1: 550167.141 ops/s
Iteration   2: 545851.075 ops/s
Iteration   3: 513390.058 ops/s
Iteration   4: 541770.339 ops/s
Iteration   5: 542441.930 ops/s
Iteration   6: 518609.582 ops/s
Iteration   7: 528370.306 ops/s
Iteration   8: 560844.061 ops/s
Iteration   9: 536143.848 ops/s
Iteration  10: 520916.121 ops/s
Iteration  11: 544354.544 ops/s
Iteration  12: 536495.322 ops/s
Iteration  13: 507327.947 ops/s
Iteration  14: 534829.004 ops/s
Iteration  15: 547929.473 ops/s
Iteration  16: 508722.005 ops/s
Iteration  17: 543993.929 ops/s
Iteration  18: 527981.390 ops/s
Iteration  19: 543845.632 ops/s
Iteration  20: 549727.850 ops/s
Iteration  21: 515653.551 ops/s
Iteration  22: 545367.052 ops/s
Iteration  23: 521802.049 ops/s
Iteration  24: 552728.487 ops/s
Iteration  25: 517606.211 ops/s
Iteration  26: 533405.162 ops/s
Iteration  27: 552986.377 ops/s
Iteration  28: 445530.466 ops/s
Iteration  29: 525450.585 ops/s
Iteration  30: 551864.238 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe":
  532203.525 ±(99.9%) 14668.780 ops/s [Average]
  (min, avg, max) = (445530.466, 532203.525, 560844.061), stdev = 21955.541
  CI (99.9%): [517534.744, 546872.305] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
SingleFlatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  532203.525 ± 14668.780  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161832.564 ops/s
# Warmup Iteration   2: 465644.093 ops/s
# Warmup Iteration   3: 492537.280 ops/s
# Warmup Iteration   4: 517113.735 ops/s
# Warmup Iteration   5: 496526.482 ops/s
# Warmup Iteration   6: 511627.001 ops/s
# Warmup Iteration   7: 511843.116 ops/s
# Warmup Iteration   8: 494937.335 ops/s
# Warmup Iteration   9: 488913.502 ops/s
# Warmup Iteration  10: 480951.564 ops/s
# Warmup Iteration  11: 530825.432 ops/s
# Warmup Iteration  12: 503192.861 ops/s
# Warmup Iteration  13: 523696.040 ops/s
# Warmup Iteration  14: 500137.653 ops/s
# Warmup Iteration  15: 514192.561 ops/s
# Warmup Iteration  16: 525283.769 ops/s
# Warmup Iteration  17: 529871.768 ops/s
# Warmup Iteration  18: 529184.537 ops/s
# Warmup Iteration  19: 558867.758 ops/s
# Warmup Iteration  20: 519745.765 ops/s
# Warmup Iteration  21: 540900.907 ops/s
# Warmup Iteration  22: 523676.730 ops/s
# Warmup Iteration  23: 529330.823 ops/s
# Warmup Iteration  24: 545041.290 ops/s
# Warmup Iteration  25: 517923.715 ops/s
# Warmup Iteration  26: 549394.615 ops/s
# Warmup Iteration  27: 534355.160 ops/s
# Warmup Iteration  28: 535924.124 ops/s
# Warmup Iteration  29: 537715.640 ops/s
# Warmup Iteration  30: 536737.576 ops/s
Iteration   1: 524215.598 ops/s
Iteration   2: 544762.000 ops/s
Iteration   3: 528806.479 ops/s
Iteration   4: 530484.597 ops/s
Iteration   5: 544567.414 ops/s
Iteration   6: 516038.769 ops/s
Iteration   7: 547549.175 ops/s
Iteration   8: 530284.730 ops/s
Iteration   9: 549434.039 ops/s
Iteration  10: 542340.194 ops/s
Iteration  11: 516632.696 ops/s
Iteration  12: 558749.230 ops/s
Iteration  13: 519282.031 ops/s
Iteration  14: 536703.217 ops/s
Iteration  15: 543253.173 ops/s
Iteration  16: 520988.109 ops/s
Iteration  17: 550655.106 ops/s
Iteration  18: 524267.502 ops/s
Iteration  19: 530746.057 ops/s
Iteration  20: 546115.603 ops/s
Iteration  21: 515912.193 ops/s
Iteration  22: 531459.073 ops/s
Iteration  23: 523373.651 ops/s
Iteration  24: 537440.030 ops/s
Iteration  25: 528847.092 ops/s
Iteration  26: 517389.848 ops/s
Iteration  27: 533778.414 ops/s
Iteration  28: 523623.061 ops/s
Iteration  29: 545589.231 ops/s
Iteration  30: 528243.456 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_doubleOnSubscribe":
  533051.059 ±(99.9%) 7965.156 ops/s [Average]
  (min, avg, max) = (515912.193, 533051.059, 558749.230), stdev = 11921.871
  CI (99.9%): [525085.903, 541016.214] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MaybeContainsTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  533051.059 ± 7965.156  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 208993.241 ops/s
# Warmup Iteration   2: 466177.081 ops/s
# Warmup Iteration   3: 517244.822 ops/s
# Warmup Iteration   4: 515410.759 ops/s
# Warmup Iteration   5: 517672.167 ops/s
# Warmup Iteration   6: 513238.210 ops/s
# Warmup Iteration   7: 498017.825 ops/s
# Warmup Iteration   8: 515515.598 ops/s
# Warmup Iteration   9: 495235.581 ops/s
# Warmup Iteration  10: 525516.893 ops/s
# Warmup Iteration  11: 491980.092 ops/s
# Warmup Iteration  12: 501475.291 ops/s
# Warmup Iteration  13: 530936.560 ops/s
# Warmup Iteration  14: 504693.269 ops/s
# Warmup Iteration  15: 517443.317 ops/s
# Warmup Iteration  16: 497305.051 ops/s
# Warmup Iteration  17: 548322.522 ops/s
# Warmup Iteration  18: 537985.497 ops/s
# Warmup Iteration  19: 548964.246 ops/s
# Warmup Iteration  20: 565254.287 ops/s
# Warmup Iteration  21: 527939.332 ops/s
# Warmup Iteration  22: 538009.916 ops/s
# Warmup Iteration  23: 575334.710 ops/s
# Warmup Iteration  24: 533364.867 ops/s
# Warmup Iteration  25: 567812.060 ops/s
# Warmup Iteration  26: 550056.798 ops/s
# Warmup Iteration  27: 529900.117 ops/s
# Warmup Iteration  28: 549153.235 ops/s
# Warmup Iteration  29: 541766.528 ops/s
# Warmup Iteration  30: 557843.159 ops/s
Iteration   1: 533744.635 ops/s
Iteration   2: 548549.221 ops/s
Iteration   3: 530730.757 ops/s
Iteration   4: 541181.040 ops/s
Iteration   5: 563564.540 ops/s
Iteration   6: 531152.912 ops/s
Iteration   7: 547559.707 ops/s
Iteration   8: 560060.464 ops/s
Iteration   9: 533772.802 ops/s
Iteration  10: 547744.846 ops/s
Iteration  11: 533935.084 ops/s
Iteration  12: 566278.342 ops/s
Iteration  13: 520019.151 ops/s
Iteration  14: 538658.409 ops/s
Iteration  15: 558071.324 ops/s
Iteration  16: 526473.147 ops/s
Iteration  17: 549281.388 ops/s
Iteration  18: 548018.204 ops/s
Iteration  19: 561729.951 ops/s
Iteration  20: 559000.446 ops/s
Iteration  21: 518630.176 ops/s
Iteration  22: 557216.702 ops/s
Iteration  23: 449485.163 ops/s
Iteration  24: 560146.760 ops/s
Iteration  25: 530015.480 ops/s
Iteration  26: 549060.343 ops/s
Iteration  27: 556959.100 ops/s
Iteration  28: 530699.790 ops/s
Iteration  29: 564013.282 ops/s
Iteration  30: 569133.372 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe":
  542829.551 ±(99.9%) 15248.437 ops/s [Average]
  (min, avg, max) = (449485.163, 542829.551, 569133.372), stdev = 22823.144
  CI (99.9%): [527581.115, 558077.988] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
SingleDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  542829.551 ± 15248.437  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 188985.437 ops/s
# Warmup Iteration   2: 444553.550 ops/s
# Warmup Iteration   3: 469823.732 ops/s
# Warmup Iteration   4: 493854.247 ops/s
# Warmup Iteration   5: 499340.922 ops/s
# Warmup Iteration   6: 541472.793 ops/s
# Warmup Iteration   7: 490900.674 ops/s
# Warmup Iteration   8: 529071.887 ops/s
# Warmup Iteration   9: 491234.698 ops/s
# Warmup Iteration  10: 517828.597 ops/s
# Warmup Iteration  11: 520253.734 ops/s
# Warmup Iteration  12: 497479.532 ops/s
# Warmup Iteration  13: 499654.903 ops/s
# Warmup Iteration  14: 507828.078 ops/s
# Warmup Iteration  15: 491852.044 ops/s
# Warmup Iteration  16: 495194.254 ops/s
# Warmup Iteration  17: 512680.307 ops/s
# Warmup Iteration  18: 551126.146 ops/s
# Warmup Iteration  19: 527650.148 ops/s
# Warmup Iteration  20: 548205.280 ops/s
# Warmup Iteration  21: 519227.143 ops/s
# Warmup Iteration  22: 540793.797 ops/s
# Warmup Iteration  23: 554753.135 ops/s
# Warmup Iteration  24: 530925.489 ops/s
# Warmup Iteration  25: 531491.283 ops/s
# Warmup Iteration  26: 534262.413 ops/s
# Warmup Iteration  27: 530864.246 ops/s
# Warmup Iteration  28: 547081.814 ops/s
# Warmup Iteration  29: 521053.364 ops/s
# Warmup Iteration  30: 553739.293 ops/s
Iteration   1: 524587.973 ops/s
Iteration   2: 529977.292 ops/s
Iteration   3: 534864.903 ops/s
Iteration   4: 526443.778 ops/s
Iteration   5: 523559.774 ops/s
Iteration   6: 531485.648 ops/s
Iteration   7: 543321.583 ops/s
Iteration   8: 534383.857 ops/s
Iteration   9: 529379.986 ops/s
Iteration  10: 542787.524 ops/s
Iteration  11: 538552.861 ops/s
Iteration  12: 543012.848 ops/s
Iteration  13: 538076.134 ops/s
Iteration  14: 516654.533 ops/s
Iteration  15: 543568.452 ops/s
Iteration  16: 532671.633 ops/s
Iteration  17: 536538.770 ops/s
Iteration  18: 553697.638 ops/s
Iteration  19: 516174.013 ops/s
Iteration  20: 559469.537 ops/s
Iteration  21: 512264.150 ops/s
Iteration  22: 552477.433 ops/s
Iteration  23: 518892.684 ops/s
Iteration  24: 527259.215 ops/s
Iteration  25: 557324.837 ops/s
Iteration  26: 518752.427 ops/s
Iteration  27: 547728.230 ops/s
Iteration  28: 527832.909 ops/s
Iteration  29: 544430.386 ops/s
Iteration  30: 533006.367 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_doubleOnSubscribe":
  534639.246 ±(99.9%) 8345.917 ops/s [Average]
  (min, avg, max) = (512264.150, 534639.246, 559469.537), stdev = 12491.776
  CI (99.9%): [526293.329, 542985.163] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MaybeIsEmptyTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  534639.246 ± 8345.917  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withObservableDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withObservableDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124179.440 ops/s
# Warmup Iteration   2: 344616.302 ops/s
# Warmup Iteration   3: 457748.540 ops/s
# Warmup Iteration   4: 483799.901 ops/s
# Warmup Iteration   5: 490277.747 ops/s
# Warmup Iteration   6: 514663.919 ops/s
# Warmup Iteration   7: 494191.184 ops/s
# Warmup Iteration   8: 512582.699 ops/s
# Warmup Iteration   9: 499892.476 ops/s
# Warmup Iteration  10: 519316.609 ops/s
# Warmup Iteration  11: 494863.957 ops/s
# Warmup Iteration  12: 500911.119 ops/s
# Warmup Iteration  13: 520857.943 ops/s
# Warmup Iteration  14: 502761.061 ops/s
# Warmup Iteration  15: 521341.324 ops/s
# Warmup Iteration  16: 487398.828 ops/s
# Warmup Iteration  17: 531266.276 ops/s
# Warmup Iteration  18: 543157.664 ops/s
# Warmup Iteration  19: 503686.965 ops/s
# Warmup Iteration  20: 547069.799 ops/s
# Warmup Iteration  21: 505481.814 ops/s
# Warmup Iteration  22: 535449.109 ops/s
# Warmup Iteration  23: 520880.615 ops/s
# Warmup Iteration  24: 534602.669 ops/s
# Warmup Iteration  25: 540568.646 ops/s
# Warmup Iteration  26: 508943.525 ops/s
# Warmup Iteration  27: 517662.786 ops/s
# Warmup Iteration  28: 549976.875 ops/s
# Warmup Iteration  29: 509928.265 ops/s
# Warmup Iteration  30: 528744.512 ops/s
Iteration   1: 523638.969 ops/s
Iteration   2: 539194.287 ops/s
Iteration   3: 541998.185 ops/s
Iteration   4: 520094.317 ops/s
Iteration   5: 538164.756 ops/s
Iteration   6: 538268.072 ops/s
Iteration   7: 504309.722 ops/s
Iteration   8: 544173.694 ops/s
Iteration   9: 540304.181 ops/s
Iteration  10: 519301.263 ops/s
Iteration  11: 540947.353 ops/s
Iteration  12: 525202.040 ops/s
Iteration  13: 532607.252 ops/s
Iteration  14: 510810.761 ops/s
Iteration  15: 515807.608 ops/s
Iteration  16: 543865.510 ops/s
Iteration  17: 514573.292 ops/s
Iteration  18: 471237.214 ops/s
Iteration  19: 499376.091 ops/s
Iteration  20: 506800.680 ops/s
Iteration  21: 534759.529 ops/s
Iteration  22: 519647.654 ops/s
Iteration  23: 544466.499 ops/s
Iteration  24: 522332.196 ops/s
Iteration  25: 518378.522 ops/s
Iteration  26: 535641.222 ops/s
Iteration  27: 527182.979 ops/s
Iteration  28: 528830.168 ops/s
Iteration  29: 504131.379 ops/s
Iteration  30: 533226.650 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withObservableDoubleOnSubscribe":
  524642.401 ±(99.9%) 11134.718 ops/s [Average]
  (min, avg, max) = (471237.214, 524642.401, 544466.499), stdev = 16665.923
  CI (99.9%): [513507.683, 535777.120] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
SingleDelayTest._Benchmark.benchmark_withObservableDoubleOnSubscribe  thrpt   30  524642.401 ± 11134.718  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_onSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_onSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78981.402 ops/s
# Warmup Iteration   2: 348333.217 ops/s
# Warmup Iteration   3: 452576.155 ops/s
# Warmup Iteration   4: 471568.988 ops/s
# Warmup Iteration   5: 493498.607 ops/s
# Warmup Iteration   6: 459532.633 ops/s
# Warmup Iteration   7: 512666.711 ops/s
# Warmup Iteration   8: 447792.437 ops/s
# Warmup Iteration   9: 515442.177 ops/s
# Warmup Iteration  10: 494892.231 ops/s
# Warmup Iteration  11: 511118.941 ops/s
# Warmup Iteration  12: 527244.003 ops/s
# Warmup Iteration  13: 502108.706 ops/s
# Warmup Iteration  14: 524708.129 ops/s
# Warmup Iteration  15: 491564.646 ops/s
# Warmup Iteration  16: 493185.763 ops/s
# Warmup Iteration  17: 548634.759 ops/s
# Warmup Iteration  18: 511830.591 ops/s
# Warmup Iteration  19: 534194.445 ops/s
# Warmup Iteration  20: 549816.137 ops/s
# Warmup Iteration  21: 514061.634 ops/s
# Warmup Iteration  22: 529495.313 ops/s
# Warmup Iteration  23: 541448.253 ops/s
# Warmup Iteration  24: 500986.853 ops/s
# Warmup Iteration  25: 549408.662 ops/s
# Warmup Iteration  26: 509043.537 ops/s
# Warmup Iteration  27: 525371.875 ops/s
# Warmup Iteration  28: 525963.159 ops/s
# Warmup Iteration  29: 527277.642 ops/s
# Warmup Iteration  30: 537449.018 ops/s
Iteration   1: 525386.579 ops/s
Iteration   2: 522490.813 ops/s
Iteration   3: 538221.945 ops/s
Iteration   4: 501833.755 ops/s
Iteration   5: 541763.350 ops/s
Iteration   6: 515470.991 ops/s
Iteration   7: 534365.774 ops/s
Iteration   8: 524763.193 ops/s
Iteration   9: 523328.391 ops/s
Iteration  10: 541008.541 ops/s
Iteration  11: 511483.086 ops/s
Iteration  12: 536737.152 ops/s
Iteration  13: 516141.120 ops/s
Iteration  14: 543793.746 ops/s
Iteration  15: 534322.318 ops/s
Iteration  16: 513697.096 ops/s
Iteration  17: 548923.396 ops/s
Iteration  18: 541608.643 ops/s
Iteration  19: 515123.478 ops/s
Iteration  20: 527735.705 ops/s
Iteration  21: 519226.133 ops/s
Iteration  22: 528922.214 ops/s
Iteration  23: 537516.325 ops/s
Iteration  24: 512604.285 ops/s
Iteration  25: 530823.383 ops/s
Iteration  26: 515594.454 ops/s
Iteration  27: 530027.011 ops/s
Iteration  28: 523391.512 ops/s
Iteration  29: 535499.716 ops/s
Iteration  30: 508240.126 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_onSubscribe":
  526668.141 ±(99.9%) 8014.990 ops/s [Average]
  (min, avg, max) = (501833.755, 526668.141, 548923.396), stdev = 11996.461
  CI (99.9%): [518653.151, 534683.131] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_onSubscribe  thrpt   30  526668.141 ± 8014.990  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41416.898 ops/s
# Warmup Iteration   2: 179810.786 ops/s
# Warmup Iteration   3: 223984.743 ops/s
# Warmup Iteration   4: 242923.207 ops/s
# Warmup Iteration   5: 228609.723 ops/s
# Warmup Iteration   6: 253491.265 ops/s
# Warmup Iteration   7: 212274.315 ops/s
# Warmup Iteration   8: 260056.999 ops/s
# Warmup Iteration   9: 254934.550 ops/s
# Warmup Iteration  10: 248920.176 ops/s
# Warmup Iteration  11: 247478.447 ops/s
# Warmup Iteration  12: 255358.909 ops/s
# Warmup Iteration  13: 248784.992 ops/s
# Warmup Iteration  14: 250501.561 ops/s
# Warmup Iteration  15: 248897.138 ops/s
# Warmup Iteration  16: 258492.737 ops/s
# Warmup Iteration  17: 266829.544 ops/s
# Warmup Iteration  18: 254215.139 ops/s
# Warmup Iteration  19: 265015.834 ops/s
# Warmup Iteration  20: 266381.346 ops/s
# Warmup Iteration  21: 253444.005 ops/s
# Warmup Iteration  22: 266915.222 ops/s
# Warmup Iteration  23: 253104.126 ops/s
# Warmup Iteration  24: 257296.801 ops/s
# Warmup Iteration  25: 264584.864 ops/s
# Warmup Iteration  26: 257900.598 ops/s
# Warmup Iteration  27: 256590.831 ops/s
# Warmup Iteration  28: 261352.685 ops/s
# Warmup Iteration  29: 252718.880 ops/s
# Warmup Iteration  30: 264935.336 ops/s
Iteration   1: 256306.761 ops/s
Iteration   2: 262244.438 ops/s
Iteration   3: 255518.274 ops/s
Iteration   4: 254860.767 ops/s
Iteration   5: 269665.650 ops/s
Iteration   6: 251270.732 ops/s
Iteration   7: 268353.723 ops/s
Iteration   8: 253057.296 ops/s
Iteration   9: 259012.438 ops/s
Iteration  10: 268366.872 ops/s
Iteration  11: 253247.819 ops/s
Iteration  12: 262559.426 ops/s
Iteration  13: 209805.624 ops/s
Iteration  14: 259365.861 ops/s
Iteration  15: 258920.867 ops/s
Iteration  16: 265768.871 ops/s
Iteration  17: 257413.595 ops/s
Iteration  18: 260560.416 ops/s
Iteration  19: 249791.208 ops/s
Iteration  20: 252253.593 ops/s
Iteration  21: 261314.857 ops/s
Iteration  22: 253775.323 ops/s
Iteration  23: 263831.549 ops/s
Iteration  24: 250793.985 ops/s
Iteration  25: 268811.133 ops/s
Iteration  26: 253873.301 ops/s
Iteration  27: 261194.928 ops/s
Iteration  28: 263923.847 ops/s
Iteration  29: 252825.785 ops/s
Iteration  30: 267307.844 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_doubleOnSubscribe":
  257533.226 ±(99.9%) 7229.608 ops/s [Average]
  (min, avg, max) = (209805.624, 257533.226, 269665.650), stdev = 10820.938
  CI (99.9%): [250303.618, 264762.835] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableCollectTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  257533.226 ± 7229.608  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106951.790 ops/s
# Warmup Iteration   2: 428604.811 ops/s
# Warmup Iteration   3: 476777.817 ops/s
# Warmup Iteration   4: 439414.072 ops/s
# Warmup Iteration   5: 521377.790 ops/s
# Warmup Iteration   6: 516347.202 ops/s
# Warmup Iteration   7: 481541.303 ops/s
# Warmup Iteration   8: 530989.229 ops/s
# Warmup Iteration   9: 523080.943 ops/s
# Warmup Iteration  10: 535689.427 ops/s
# Warmup Iteration  11: 535870.929 ops/s
# Warmup Iteration  12: 514230.667 ops/s
# Warmup Iteration  13: 523054.213 ops/s
# Warmup Iteration  14: 528631.060 ops/s
# Warmup Iteration  15: 549550.940 ops/s
# Warmup Iteration  16: 521716.571 ops/s
# Warmup Iteration  17: 547992.410 ops/s
# Warmup Iteration  18: 555244.152 ops/s
# Warmup Iteration  19: 535848.107 ops/s
# Warmup Iteration  20: 558312.768 ops/s
# Warmup Iteration  21: 546147.829 ops/s
# Warmup Iteration  22: 544180.614 ops/s
# Warmup Iteration  23: 549843.701 ops/s
# Warmup Iteration  24: 579464.580 ops/s
# Warmup Iteration  25: 529232.737 ops/s
# Warmup Iteration  26: 559477.623 ops/s
# Warmup Iteration  27: 532013.555 ops/s
# Warmup Iteration  28: 547982.613 ops/s
# Warmup Iteration  29: 539210.198 ops/s
# Warmup Iteration  30: 551919.882 ops/s
Iteration   1: 532348.796 ops/s
Iteration   2: 548691.432 ops/s
Iteration   3: 560630.570 ops/s
Iteration   4: 531908.394 ops/s
Iteration   5: 565778.847 ops/s
Iteration   6: 530278.357 ops/s
Iteration   7: 537934.735 ops/s
Iteration   8: 532059.110 ops/s
Iteration   9: 551683.319 ops/s
Iteration  10: 539402.680 ops/s
Iteration  11: 523675.904 ops/s
Iteration  12: 546115.191 ops/s
Iteration  13: 538899.168 ops/s
Iteration  14: 561225.364 ops/s
Iteration  15: 549114.537 ops/s
Iteration  16: 530637.133 ops/s
Iteration  17: 546471.025 ops/s
Iteration  18: 552848.756 ops/s
Iteration  19: 540812.813 ops/s
Iteration  20: 557921.073 ops/s
Iteration  21: 542463.434 ops/s
Iteration  22: 548589.238 ops/s
Iteration  23: 561705.985 ops/s
Iteration  24: 538611.484 ops/s
Iteration  25: 560795.771 ops/s
Iteration  26: 535349.341 ops/s
Iteration  27: 558881.005 ops/s
Iteration  28: 544920.840 ops/s
Iteration  29: 540201.309 ops/s
Iteration  30: 546839.147 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_doubleOnSubscribe":
  545226.492 ±(99.9%) 7504.260 ops/s [Average]
  (min, avg, max) = (523675.904, 545226.492, 565778.847), stdev = 11232.024
  CI (99.9%): [537722.232, 552730.752] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableTakeLastTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  545226.492 ± 7504.260  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableResourceWrapperTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableResourceWrapperTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 274041.635 ops/s
# Warmup Iteration   2: 485836.020 ops/s
# Warmup Iteration   3: 522405.653 ops/s
# Warmup Iteration   4: 496047.020 ops/s
# Warmup Iteration   5: 537113.725 ops/s
# Warmup Iteration   6: 517684.044 ops/s
# Warmup Iteration   7: 508135.999 ops/s
# Warmup Iteration   8: 516225.111 ops/s
# Warmup Iteration   9: 521899.725 ops/s
# Warmup Iteration  10: 515774.114 ops/s
# Warmup Iteration  11: 525187.090 ops/s
# Warmup Iteration  12: 524873.345 ops/s
# Warmup Iteration  13: 538295.045 ops/s
# Warmup Iteration  14: 516516.141 ops/s
# Warmup Iteration  15: 524329.553 ops/s
# Warmup Iteration  16: 539982.629 ops/s
# Warmup Iteration  17: 550180.176 ops/s
# Warmup Iteration  18: 561292.252 ops/s
# Warmup Iteration  19: 545644.480 ops/s
# Warmup Iteration  20: 544972.084 ops/s
# Warmup Iteration  21: 567506.068 ops/s
# Warmup Iteration  22: 567702.879 ops/s
# Warmup Iteration  23: 526855.613 ops/s
# Warmup Iteration  24: 564949.935 ops/s
# Warmup Iteration  25: 537483.044 ops/s
# Warmup Iteration  26: 572956.207 ops/s
# Warmup Iteration  27: 565626.370 ops/s
# Warmup Iteration  28: 529278.290 ops/s
# Warmup Iteration  29: 564971.046 ops/s
# Warmup Iteration  30: 535263.851 ops/s
Iteration   1: 548849.236 ops/s
Iteration   2: 570522.667 ops/s
Iteration   3: 538216.536 ops/s
Iteration   4: 571313.162 ops/s
Iteration   5: 505461.368 ops/s
Iteration   6: 561412.713 ops/s
Iteration   7: 544138.166 ops/s
Iteration   8: 359202.932 ops/s
Iteration   9: 527883.193 ops/s
Iteration  10: 545050.321 ops/s
Iteration  11: 553219.415 ops/s
Iteration  12: 537388.568 ops/s
Iteration  13: 542412.453 ops/s
Iteration  14: 532153.015 ops/s
Iteration  15: 555060.784 ops/s
Iteration  16: 573378.649 ops/s
Iteration  17: 545827.728 ops/s
Iteration  18: 553008.360 ops/s
Iteration  19: 550467.799 ops/s
Iteration  20: 574255.289 ops/s
Iteration  21: 578698.009 ops/s
Iteration  22: 522927.140 ops/s
Iteration  23: 574778.585 ops/s
Iteration  24: 526788.844 ops/s
Iteration  25: 565543.324 ops/s
Iteration  26: 539533.340 ops/s
Iteration  27: 564359.549 ops/s
Iteration  28: 542522.335 ops/s
Iteration  29: 553442.861 ops/s
Iteration  30: 557414.894 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableResourceWrapperTest._Benchmark.benchmark_doubleOnSubscribe":
  543841.041 ±(99.9%) 26043.435 ops/s [Average]
  (min, avg, max) = (359202.932, 543841.041, 578698.009), stdev = 38980.591
  CI (99.9%): [517797.606, 569884.476] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableResourceWrapperTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  543841.041 ± 26043.435  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.828 ops/s
# Warmup Iteration   2: 15049.913 ops/s
# Warmup Iteration   3: 70984.025 ops/s
# Warmup Iteration   4: 109651.433 ops/s
# Warmup Iteration   5: 133309.924 ops/s
# Warmup Iteration   6: 126740.895 ops/s
# Warmup Iteration   7: 230668.419 ops/s
# Warmup Iteration   8: 302091.662 ops/s
# Warmup Iteration   9: 317161.124 ops/s
# Warmup Iteration  10: 306318.718 ops/s
# Warmup Iteration  11: 306918.833 ops/s
# Warmup Iteration  12: 307071.366 ops/s
# Warmup Iteration  13: 302694.517 ops/s
# Warmup Iteration  14: 323604.452 ops/s
# Warmup Iteration  15: 309474.760 ops/s
# Warmup Iteration  16: 317119.720 ops/s
# Warmup Iteration  17: 315244.154 ops/s
# Warmup Iteration  18: 309005.126 ops/s
# Warmup Iteration  19: 318852.417 ops/s
# Warmup Iteration  20: 297282.032 ops/s
# Warmup Iteration  21: 330754.762 ops/s
# Warmup Iteration  22: 322928.069 ops/s
# Warmup Iteration  23: 313830.901 ops/s
# Warmup Iteration  24: 314735.459 ops/s
# Warmup Iteration  25: 315185.407 ops/s
# Warmup Iteration  26: 319884.087 ops/s
# Warmup Iteration  27: 318487.036 ops/s
# Warmup Iteration  28: 304362.754 ops/s
# Warmup Iteration  29: 318330.594 ops/s
# Warmup Iteration  30: 335746.963 ops/s
Iteration   1: 308238.215 ops/s
Iteration   2: 304654.839 ops/s
Iteration   3: 291399.754 ops/s
Iteration   4: 327574.487 ops/s
Iteration   5: 329791.595 ops/s
Iteration   6: 305951.892 ops/s
Iteration   7: 330355.466 ops/s
Iteration   8: 311269.328 ops/s
Iteration   9: 329347.748 ops/s
Iteration  10: 318710.694 ops/s
Iteration  11: 301615.206 ops/s
Iteration  12: 335378.909 ops/s
Iteration  13: 331040.445 ops/s
Iteration  14: 335325.685 ops/s
Iteration  15: 308576.670 ops/s
Iteration  16: 324913.237 ops/s
Iteration  17: 324070.973 ops/s
Iteration  18: 333807.538 ops/s
Iteration  19: 308595.658 ops/s
Iteration  20: 330080.529 ops/s
Iteration  21: 327457.745 ops/s
Iteration  22: 313940.527 ops/s
Iteration  23: 329690.839 ops/s
Iteration  24: 311504.087 ops/s
Iteration  25: 325938.678 ops/s
Iteration  26: 319516.524 ops/s
Iteration  27: 321192.706 ops/s
Iteration  28: 329450.832 ops/s
Iteration  29: 304985.496 ops/s
Iteration  30: 327974.940 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipDoubleOnSubscribe":
  320078.375 ±(99.9%) 7859.542 ops/s [Average]
  (min, avg, max) = (291399.754, 320078.375, 335378.909), stdev = 11763.793
  CI (99.9%): [312218.833, 327937.917] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferSkipDoubleOnSubscribe  thrpt   30  320078.375 ± 7859.542  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43849.915 ops/s
# Warmup Iteration   2: 88084.177 ops/s
# Warmup Iteration   3: 236717.570 ops/s
# Warmup Iteration   4: 237397.668 ops/s
# Warmup Iteration   5: 253270.938 ops/s
# Warmup Iteration   6: 239896.362 ops/s
# Warmup Iteration   7: 247476.019 ops/s
# Warmup Iteration   8: 253411.503 ops/s
# Warmup Iteration   9: 241502.926 ops/s
# Warmup Iteration  10: 251000.208 ops/s
# Warmup Iteration  11: 247485.537 ops/s
# Warmup Iteration  12: 244911.078 ops/s
# Warmup Iteration  13: 248410.978 ops/s
# Warmup Iteration  14: 240375.486 ops/s
# Warmup Iteration  15: 248501.610 ops/s
# Warmup Iteration  16: 250090.302 ops/s
# Warmup Iteration  17: 253085.039 ops/s
# Warmup Iteration  18: 260797.274 ops/s
# Warmup Iteration  19: 254738.423 ops/s
# Warmup Iteration  20: 272551.390 ops/s
# Warmup Iteration  21: 254739.441 ops/s
# Warmup Iteration  22: 252301.296 ops/s
# Warmup Iteration  23: 269233.649 ops/s
# Warmup Iteration  24: 270000.490 ops/s
# Warmup Iteration  25: 248797.985 ops/s
# Warmup Iteration  26: 259512.340 ops/s
# Warmup Iteration  27: 257153.616 ops/s
# Warmup Iteration  28: 257323.654 ops/s
# Warmup Iteration  29: 258545.984 ops/s
# Warmup Iteration  30: 265073.243 ops/s
Iteration   1: 258032.033 ops/s
Iteration   2: 209155.712 ops/s
Iteration   3: 233473.299 ops/s
Iteration   4: 268159.157 ops/s
Iteration   5: 269444.412 ops/s
Iteration   6: 253582.398 ops/s
Iteration   7: 264144.119 ops/s
Iteration   8: 253759.154 ops/s
Iteration   9: 266075.393 ops/s
Iteration  10: 257811.305 ops/s
Iteration  11: 251743.647 ops/s
Iteration  12: 269350.885 ops/s
Iteration  13: 253054.784 ops/s
Iteration  14: 258219.646 ops/s
Iteration  15: 245753.815 ops/s
Iteration  16: 264201.971 ops/s
Iteration  17: 259970.610 ops/s
Iteration  18: 271503.155 ops/s
Iteration  19: 249673.769 ops/s
Iteration  20: 265591.368 ops/s
Iteration  21: 255639.769 ops/s
Iteration  22: 262635.513 ops/s
Iteration  23: 262525.104 ops/s
Iteration  24: 253208.964 ops/s
Iteration  25: 263996.061 ops/s
Iteration  26: 254039.273 ops/s
Iteration  27: 268373.004 ops/s
Iteration  28: 258837.840 ops/s
Iteration  29: 251432.042 ops/s
Iteration  30: 254950.107 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_doubleOnSubscribe":
  256944.610 ±(99.9%) 8140.769 ops/s [Average]
  (min, avg, max) = (209155.712, 256944.610, 271503.155), stdev = 12184.721
  CI (99.9%): [248803.841, 265085.379] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObservableScanTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  256944.610 ± 8140.769  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DisposableLambdaObserverTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DisposableLambdaObserverTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 219286.372 ops/s
# Warmup Iteration   2: 479644.260 ops/s
# Warmup Iteration   3: 495660.586 ops/s
# Warmup Iteration   4: 473954.941 ops/s
# Warmup Iteration   5: 481522.540 ops/s
# Warmup Iteration   6: 504007.860 ops/s
# Warmup Iteration   7: 522793.766 ops/s
# Warmup Iteration   8: 522682.925 ops/s
# Warmup Iteration   9: 544188.751 ops/s
# Warmup Iteration  10: 505286.309 ops/s
# Warmup Iteration  11: 539104.802 ops/s
# Warmup Iteration  12: 518164.529 ops/s
# Warmup Iteration  13: 525093.958 ops/s
# Warmup Iteration  14: 530424.658 ops/s
# Warmup Iteration  15: 501887.342 ops/s
# Warmup Iteration  16: 515748.275 ops/s
# Warmup Iteration  17: 555056.630 ops/s
# Warmup Iteration  18: 544325.258 ops/s
# Warmup Iteration  19: 546946.940 ops/s
# Warmup Iteration  20: 551160.720 ops/s
# Warmup Iteration  21: 545642.979 ops/s
# Warmup Iteration  22: 550777.586 ops/s
# Warmup Iteration  23: 536771.488 ops/s
# Warmup Iteration  24: 540821.992 ops/s
# Warmup Iteration  25: 544744.500 ops/s
# Warmup Iteration  26: 523838.011 ops/s
# Warmup Iteration  27: 554562.127 ops/s
# Warmup Iteration  28: 564822.758 ops/s
# Warmup Iteration  29: 534877.958 ops/s
# Warmup Iteration  30: 556876.465 ops/s
Iteration   1: 543985.888 ops/s
Iteration   2: 538200.912 ops/s
Iteration   3: 551161.491 ops/s
Iteration   4: 533781.461 ops/s
Iteration   5: 564839.562 ops/s
Iteration   6: 564620.475 ops/s
Iteration   7: 531524.679 ops/s
Iteration   8: 562657.649 ops/s
Iteration   9: 530640.790 ops/s
Iteration  10: 565544.711 ops/s
Iteration  11: 551566.183 ops/s
Iteration  12: 556825.505 ops/s
Iteration  13: 552185.484 ops/s
Iteration  14: 518426.890 ops/s
Iteration  15: 554288.223 ops/s
Iteration  16: 568454.258 ops/s
Iteration  17: 524145.042 ops/s
Iteration  18: 558740.229 ops/s
Iteration  19: 552460.424 ops/s
Iteration  20: 551181.760 ops/s
Iteration  21: 564025.150 ops/s
Iteration  22: 534669.882 ops/s
Iteration  23: 567225.324 ops/s
Iteration  24: 554217.254 ops/s
Iteration  25: 551412.506 ops/s
Iteration  26: 556154.082 ops/s
Iteration  27: 532376.173 ops/s
Iteration  28: 554436.596 ops/s
Iteration  29: 568932.400 ops/s
Iteration  30: 520745.636 ops/s


Result "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserverTest._Benchmark.benchmark_doubleOnSubscribe":
  549314.221 ±(99.9%) 9979.503 ops/s [Average]
  (min, avg, max) = (518426.890, 549314.221, 568932.400), stdev = 14936.852
  CI (99.9%): [539334.717, 559293.724] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
DisposableLambdaObserverTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  549314.221 ± 9979.503  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_predicateThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_predicateThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 34164.259 ops/s
# Warmup Iteration   2: 137233.057 ops/s
# Warmup Iteration   3: 157404.187 ops/s
# Warmup Iteration   4: 177454.424 ops/s
# Warmup Iteration   5: 156684.049 ops/s
# Warmup Iteration   6: 173962.548 ops/s
# Warmup Iteration   7: 182629.821 ops/s
# Warmup Iteration   8: 184186.852 ops/s
# Warmup Iteration   9: 173868.087 ops/s
# Warmup Iteration  10: 181747.856 ops/s
# Warmup Iteration  11: 177576.590 ops/s
# Warmup Iteration  12: 181086.700 ops/s
# Warmup Iteration  13: 177265.821 ops/s
# Warmup Iteration  14: 178469.278 ops/s
# Warmup Iteration  15: 183693.829 ops/s
# Warmup Iteration  16: 178261.299 ops/s
# Warmup Iteration  17: 184026.431 ops/s
# Warmup Iteration  18: 185265.495 ops/s
# Warmup Iteration  19: 192092.158 ops/s
# Warmup Iteration  20: 184308.544 ops/s
# Warmup Iteration  21: 191305.643 ops/s
# Warmup Iteration  22: 187529.546 ops/s
# Warmup Iteration  23: 185204.727 ops/s
# Warmup Iteration  24: 182670.526 ops/s
# Warmup Iteration  25: 191225.198 ops/s
# Warmup Iteration  26: 182695.149 ops/s
# Warmup Iteration  27: 150185.511 ops/s
# Warmup Iteration  28: 190075.433 ops/s
# Warmup Iteration  29: 180615.424 ops/s
# Warmup Iteration  30: 191281.516 ops/s
Iteration   1: 185230.018 ops/s
Iteration   2: 189291.568 ops/s
Iteration   3: 183878.737 ops/s
Iteration   4: 184519.127 ops/s
Iteration   5: 190443.147 ops/s
Iteration   6: 182610.749 ops/s
Iteration   7: 186353.170 ops/s
Iteration   8: 187427.128 ops/s
Iteration   9: 183121.766 ops/s
Iteration  10: 185863.377 ops/s
Iteration  11: 178255.996 ops/s
Iteration  12: 188163.198 ops/s
Iteration  13: 185092.534 ops/s
Iteration  14: 186322.277 ops/s
Iteration  15: 180753.173 ops/s
Iteration  16: 186538.702 ops/s
Iteration  17: 182943.394 ops/s
Iteration  18: 188619.388 ops/s
Iteration  19: 185458.278 ops/s
Iteration  20: 183728.802 ops/s
Iteration  21: 191567.737 ops/s
Iteration  22: 185522.168 ops/s
Iteration  23: 191269.674 ops/s
Iteration  24: 182552.433 ops/s
Iteration  25: 189771.561 ops/s
Iteration  26: 195245.184 ops/s
Iteration  27: 178409.665 ops/s
Iteration  28: 193386.756 ops/s
Iteration  29: 178803.095 ops/s
Iteration  30: 191135.706 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_predicateThrows":
  186075.950 ±(99.9%) 2871.307 ops/s [Average]
  (min, avg, max) = (178255.996, 186075.950, 195245.184), stdev = 4297.638
  CI (99.9%): [183204.643, 188947.258] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableAllTest._Benchmark.benchmark_predicateThrows  thrpt   30  186075.950 ± 2871.307  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_badSource2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_badSource2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31686.197 ops/s
# Warmup Iteration   2: 150619.547 ops/s
# Warmup Iteration   3: 232288.413 ops/s
# Warmup Iteration   4: 231825.754 ops/s
# Warmup Iteration   5: 243701.917 ops/s
# Warmup Iteration   6: 228905.668 ops/s
# Warmup Iteration   7: 239099.106 ops/s
# Warmup Iteration   8: 255501.701 ops/s
# Warmup Iteration   9: 243175.122 ops/s
# Warmup Iteration  10: 248927.951 ops/s
# Warmup Iteration  11: 249342.652 ops/s
# Warmup Iteration  12: 244982.222 ops/s
# Warmup Iteration  13: 243731.037 ops/s
# Warmup Iteration  14: 246061.013 ops/s
# Warmup Iteration  15: 239558.378 ops/s
# Warmup Iteration  16: 250162.483 ops/s
# Warmup Iteration  17: 257414.478 ops/s
# Warmup Iteration  18: 264658.530 ops/s
# Warmup Iteration  19: 251758.409 ops/s
# Warmup Iteration  20: 265390.903 ops/s
# Warmup Iteration  21: 254451.710 ops/s
# Warmup Iteration  22: 258571.539 ops/s
# Warmup Iteration  23: 258011.080 ops/s
# Warmup Iteration  24: 252598.828 ops/s
# Warmup Iteration  25: 248189.387 ops/s
# Warmup Iteration  26: 261445.853 ops/s
# Warmup Iteration  27: 246210.608 ops/s
# Warmup Iteration  28: 265326.076 ops/s
# Warmup Iteration  29: 247957.438 ops/s
# Warmup Iteration  30: 257487.803 ops/s
Iteration   1: 260993.153 ops/s
Iteration   2: 250141.699 ops/s
Iteration   3: 261628.438 ops/s
Iteration   4: 252677.437 ops/s
Iteration   5: 255807.399 ops/s
Iteration   6: 256411.311 ops/s
Iteration   7: 241440.844 ops/s
Iteration   8: 255446.006 ops/s
Iteration   9: 256712.638 ops/s
Iteration  10: 249545.226 ops/s
Iteration  11: 261250.213 ops/s
Iteration  12: 254398.188 ops/s
Iteration  13: 256291.461 ops/s
Iteration  14: 261738.311 ops/s
Iteration  15: 249121.683 ops/s
Iteration  16: 254044.509 ops/s
Iteration  17: 266390.228 ops/s
Iteration  18: 254491.836 ops/s
Iteration  19: 251408.226 ops/s
Iteration  20: 263815.061 ops/s
Iteration  21: 254723.729 ops/s
Iteration  22: 258350.814 ops/s
Iteration  23: 255643.938 ops/s
Iteration  24: 261251.594 ops/s
Iteration  25: 253734.297 ops/s
Iteration  26: 251582.535 ops/s
Iteration  27: 260273.370 ops/s
Iteration  28: 251382.802 ops/s
Iteration  29: 260672.795 ops/s
Iteration  30: 252701.906 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_badSource2":
  255802.388 ±(99.9%) 3495.749 ops/s [Average]
  (min, avg, max) = (241440.844, 255802.388, 266390.228), stdev = 5232.273
  CI (99.9%): [252306.639, 259298.137] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableElementAtTest._Benchmark.benchmark_badSource2  thrpt   30  255802.388 ± 3495.749  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_takeLastZeroProcessesAllItemsButIgnoresThem$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_takeLastZeroProcessesAllItemsButIgnoresThem

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1346901.153 ops/s
# Warmup Iteration   2: 3969928.110 ops/s
# Warmup Iteration   3: 4494661.597 ops/s
# Warmup Iteration   4: 4828383.326 ops/s
# Warmup Iteration   5: 5208005.496 ops/s
# Warmup Iteration   6: 4897843.904 ops/s
# Warmup Iteration   7: 5065360.996 ops/s
# Warmup Iteration   8: 5155354.145 ops/s
# Warmup Iteration   9: 4698649.436 ops/s
# Warmup Iteration  10: 5089055.044 ops/s
# Warmup Iteration  11: 4914974.283 ops/s
# Warmup Iteration  12: 5114757.189 ops/s
# Warmup Iteration  13: 4927017.844 ops/s
# Warmup Iteration  14: 5072986.817 ops/s
# Warmup Iteration  15: 5116870.380 ops/s
# Warmup Iteration  16: 4844363.239 ops/s
# Warmup Iteration  17: 5057705.781 ops/s
# Warmup Iteration  18: 5070517.719 ops/s
# Warmup Iteration  19: 4866955.133 ops/s
# Warmup Iteration  20: 5128605.032 ops/s
# Warmup Iteration  21: 4906156.348 ops/s
# Warmup Iteration  22: 4117939.415 ops/s
# Warmup Iteration  23: 5127354.143 ops/s
# Warmup Iteration  24: 4922173.636 ops/s
# Warmup Iteration  25: 5174285.594 ops/s
# Warmup Iteration  26: 5106511.754 ops/s
# Warmup Iteration  27: 4854351.007 ops/s
# Warmup Iteration  28: 5135623.915 ops/s
# Warmup Iteration  29: 5251154.345 ops/s
# Warmup Iteration  30: 4839285.745 ops/s
Iteration   1: 5201804.272 ops/s
Iteration   2: 4736311.684 ops/s
Iteration   3: 4982267.067 ops/s
Iteration   4: 5231235.392 ops/s
Iteration   5: 4851724.390 ops/s
Iteration   6: 5096535.462 ops/s
Iteration   7: 4919579.851 ops/s
Iteration   8: 4903643.622 ops/s
Iteration   9: 5135433.154 ops/s
Iteration  10: 5025550.286 ops/s
Iteration  11: 5032441.080 ops/s
Iteration  12: 4963456.980 ops/s
Iteration  13: 5189459.390 ops/s
Iteration  14: 5024469.616 ops/s
Iteration  15: 4831780.522 ops/s
Iteration  16: 5100968.866 ops/s
Iteration  17: 4938204.525 ops/s
Iteration  18: 4925036.510 ops/s
Iteration  19: 5139396.924 ops/s
Iteration  20: 4888657.110 ops/s
Iteration  21: 5081272.817 ops/s
Iteration  22: 5095592.544 ops/s
Iteration  23: 5044487.578 ops/s
Iteration  24: 4808876.357 ops/s
Iteration  25: 5189308.732 ops/s
Iteration  26: 5127896.266 ops/s
Iteration  27: 4892516.903 ops/s
Iteration  28: 5135525.741 ops/s
Iteration  29: 4929278.944 ops/s
Iteration  30: 4950191.720 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_takeLastZeroProcessesAllItemsButIgnoresThem":
  5012430.143 ±(99.9%) 86663.608 ops/s [Average]
  (min, avg, max) = (4736311.684, 5012430.143, 5231235.392), stdev = 129714.019
  CI (99.9%): [4925766.535, 5099093.752] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score       Error  Units
ObservableTakeLastOneTest._Benchmark.benchmark_takeLastZeroProcessesAllItemsButIgnoresThem  thrpt   30  5012430.143 ± 86663.608  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnoredObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnoredObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 927022.862 ops/s
# Warmup Iteration   2: 3608719.350 ops/s
# Warmup Iteration   3: 4649982.071 ops/s
# Warmup Iteration   4: 5148368.431 ops/s
# Warmup Iteration   5: 5006642.744 ops/s
# Warmup Iteration   6: 4983114.021 ops/s
# Warmup Iteration   7: 5139894.943 ops/s
# Warmup Iteration   8: 4815563.209 ops/s
# Warmup Iteration   9: 5227718.712 ops/s
# Warmup Iteration  10: 4841334.078 ops/s
# Warmup Iteration  11: 4855999.044 ops/s
# Warmup Iteration  12: 5147789.476 ops/s
# Warmup Iteration  13: 4840595.190 ops/s
# Warmup Iteration  14: 4953501.469 ops/s
# Warmup Iteration  15: 4976870.013 ops/s
# Warmup Iteration  16: 5040756.319 ops/s
# Warmup Iteration  17: 5025759.329 ops/s
# Warmup Iteration  18: 5144415.696 ops/s
# Warmup Iteration  19: 5024437.544 ops/s
# Warmup Iteration  20: 5253850.928 ops/s
# Warmup Iteration  21: 4870695.225 ops/s
# Warmup Iteration  22: 5112265.068 ops/s
# Warmup Iteration  23: 5125788.762 ops/s
# Warmup Iteration  24: 4913229.249 ops/s
# Warmup Iteration  25: 5073282.731 ops/s
# Warmup Iteration  26: 5014091.374 ops/s
# Warmup Iteration  27: 4905345.109 ops/s
# Warmup Iteration  28: 5137761.110 ops/s
# Warmup Iteration  29: 4922270.471 ops/s
# Warmup Iteration  30: 5019604.454 ops/s
Iteration   1: 5210067.704 ops/s
Iteration   2: 4924866.258 ops/s
Iteration   3: 5083187.243 ops/s
Iteration   4: 4946548.055 ops/s
Iteration   5: 4956540.667 ops/s
Iteration   6: 5353520.791 ops/s
Iteration   7: 5229307.944 ops/s
Iteration   8: 4818085.191 ops/s
Iteration   9: 4973726.951 ops/s
Iteration  10: 5146007.476 ops/s
Iteration  11: 4850564.171 ops/s
Iteration  12: 5108236.693 ops/s
Iteration  13: 4976322.751 ops/s
Iteration  14: 4926803.302 ops/s
Iteration  15: 5062995.193 ops/s
Iteration  16: 5001406.810 ops/s
Iteration  17: 5008634.551 ops/s
Iteration  18: 5156032.897 ops/s
Iteration  19: 4914567.787 ops/s
Iteration  20: 5158841.803 ops/s
Iteration  21: 5005849.369 ops/s
Iteration  22: 5047593.531 ops/s
Iteration  23: 5014676.256 ops/s
Iteration  24: 5075856.837 ops/s
Iteration  25: 5091693.658 ops/s
Iteration  26: 4952912.661 ops/s
Iteration  27: 5199284.159 ops/s
Iteration  28: 5052523.170 ops/s
Iteration  29: 4917279.444 ops/s
Iteration  30: 5086500.297 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnoredObservable":
  5041681.121 ±(99.9%) 80265.410 ops/s [Average]
  (min, avg, max) = (4818085.191, 5041681.121, 5353520.791), stdev = 120137.496
  CI (99.9%): [4961415.711, 5121946.531] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnoredObservable  thrpt   30  5041681.121 ± 80265.410  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableError2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableError2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 285990.660 ops/s
# Warmup Iteration   2: 1999383.488 ops/s
# Warmup Iteration   3: 2783865.721 ops/s
# Warmup Iteration   4: 3293246.134 ops/s
# Warmup Iteration   5: 3489812.811 ops/s
# Warmup Iteration   6: 3247646.132 ops/s
# Warmup Iteration   7: 3247191.797 ops/s
# Warmup Iteration   8: 3388781.730 ops/s
# Warmup Iteration   9: 3332094.787 ops/s
# Warmup Iteration  10: 3313003.515 ops/s
# Warmup Iteration  11: 3397636.229 ops/s
# Warmup Iteration  12: 3250066.410 ops/s
# Warmup Iteration  13: 3308270.691 ops/s
# Warmup Iteration  14: 3360877.914 ops/s
# Warmup Iteration  15: 3293379.448 ops/s
# Warmup Iteration  16: 3412766.964 ops/s
# Warmup Iteration  17: 2635756.606 ops/s
# Warmup Iteration  18: 3449445.132 ops/s
# Warmup Iteration  19: 3304682.313 ops/s
# Warmup Iteration  20: 3458515.218 ops/s
# Warmup Iteration  21: 3270067.727 ops/s
# Warmup Iteration  22: 3394755.796 ops/s
# Warmup Iteration  23: 3379513.397 ops/s
# Warmup Iteration  24: 3287481.475 ops/s
# Warmup Iteration  25: 3331850.996 ops/s
# Warmup Iteration  26: 3357359.301 ops/s
# Warmup Iteration  27: 3290985.238 ops/s
# Warmup Iteration  28: 3336217.526 ops/s
# Warmup Iteration  29: 3259560.221 ops/s
# Warmup Iteration  30: 3366081.976 ops/s
Iteration   1: 3248612.795 ops/s
Iteration   2: 3347529.787 ops/s
Iteration   3: 3430775.624 ops/s
Iteration   4: 3313214.743 ops/s
Iteration   5: 3435872.868 ops/s
Iteration   6: 3359971.670 ops/s
Iteration   7: 3352350.137 ops/s
Iteration   8: 3330167.478 ops/s
Iteration   9: 3420344.370 ops/s
Iteration  10: 3362384.069 ops/s
Iteration  11: 3435453.050 ops/s
Iteration  12: 3276101.851 ops/s
Iteration  13: 3430568.078 ops/s
Iteration  14: 3453753.979 ops/s
Iteration  15: 3195692.601 ops/s
Iteration  16: 3293413.683 ops/s
Iteration  17: 3406756.870 ops/s
Iteration  18: 3264046.860 ops/s
Iteration  19: 3388882.448 ops/s
Iteration  20: 3283928.829 ops/s
Iteration  21: 3286470.702 ops/s
Iteration  22: 3355961.827 ops/s
Iteration  23: 3353104.983 ops/s
Iteration  24: 3487718.639 ops/s
Iteration  25: 3440589.171 ops/s
Iteration  26: 3317743.913 ops/s
Iteration  27: 3434312.301 ops/s
Iteration  28: 3250373.670 ops/s
Iteration  29: 3314872.385 ops/s
Iteration  30: 3478868.726 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableError2":
  3358327.937 ±(99.9%) 51115.100 ops/s [Average]
  (min, avg, max) = (3195692.601, 3358327.937, 3487718.639), stdev = 76506.681
  CI (99.9%): [3307212.837, 3409443.037] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableToXTest._Benchmark.benchmark_toFlowableError2  thrpt   30  3358327.937 ± 51115.100  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableDrop$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableDrop

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 415998.961 ops/s
# Warmup Iteration   2: 2905843.063 ops/s
# Warmup Iteration   3: 3657146.407 ops/s
# Warmup Iteration   4: 4022448.728 ops/s
# Warmup Iteration   5: 4271754.416 ops/s
# Warmup Iteration   6: 4001025.959 ops/s
# Warmup Iteration   7: 4299879.134 ops/s
# Warmup Iteration   8: 4203622.106 ops/s
# Warmup Iteration   9: 4097693.394 ops/s
# Warmup Iteration  10: 4143274.244 ops/s
# Warmup Iteration  11: 4156424.825 ops/s
# Warmup Iteration  12: 4180488.967 ops/s
# Warmup Iteration  13: 4096453.439 ops/s
# Warmup Iteration  14: 4039601.182 ops/s
# Warmup Iteration  15: 4198018.649 ops/s
# Warmup Iteration  16: 3985410.777 ops/s
# Warmup Iteration  17: 4257727.341 ops/s
# Warmup Iteration  18: 3941108.068 ops/s
# Warmup Iteration  19: 4199529.553 ops/s
# Warmup Iteration  20: 4031990.554 ops/s
# Warmup Iteration  21: 4060287.411 ops/s
# Warmup Iteration  22: 4305792.990 ops/s
# Warmup Iteration  23: 4076699.579 ops/s
# Warmup Iteration  24: 4041285.820 ops/s
# Warmup Iteration  25: 4227506.760 ops/s
# Warmup Iteration  26: 4082084.306 ops/s
# Warmup Iteration  27: 4156240.336 ops/s
# Warmup Iteration  28: 3898436.305 ops/s
# Warmup Iteration  29: 4060370.927 ops/s
# Warmup Iteration  30: 4097575.771 ops/s
Iteration   1: 4136886.706 ops/s
Iteration   2: 4141773.748 ops/s
Iteration   3: 4057310.406 ops/s
Iteration   4: 4237985.635 ops/s
Iteration   5: 4048531.539 ops/s
Iteration   6: 4263864.123 ops/s
Iteration   7: 4288618.679 ops/s
Iteration   8: 4033288.087 ops/s
Iteration   9: 4233660.097 ops/s
Iteration  10: 4010053.025 ops/s
Iteration  11: 4074637.930 ops/s
Iteration  12: 4168918.498 ops/s
Iteration  13: 4022556.704 ops/s
Iteration  14: 4200348.221 ops/s
Iteration  15: 4120179.438 ops/s
Iteration  16: 3959490.937 ops/s
Iteration  17: 4127803.730 ops/s
Iteration  18: 4210730.557 ops/s
Iteration  19: 4105709.044 ops/s
Iteration  20: 4213913.551 ops/s
Iteration  21: 4114773.996 ops/s
Iteration  22: 4089288.151 ops/s
Iteration  23: 4151466.909 ops/s
Iteration  24: 4077006.323 ops/s
Iteration  25: 4282703.216 ops/s
Iteration  26: 4093454.975 ops/s
Iteration  27: 4269138.212 ops/s
Iteration  28: 4146962.727 ops/s
Iteration  29: 4124403.147 ops/s
Iteration  30: 4155213.869 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableDrop":
  4138689.073 ±(99.9%) 57337.946 ops/s [Average]
  (min, avg, max) = (3959490.937, 4138689.073, 4288618.679), stdev = 85820.746
  CI (99.9%): [4081351.126, 4196027.019] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ObservableToXTest._Benchmark.benchmark_toFlowableDrop  thrpt   30  4138689.073 ± 57337.946  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_capacityHintFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_capacityHintFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 261741.641 ops/s
# Warmup Iteration   2: 1230287.966 ops/s
# Warmup Iteration   3: 1504451.264 ops/s
# Warmup Iteration   4: 1867760.208 ops/s
# Warmup Iteration   5: 1817901.178 ops/s
# Warmup Iteration   6: 1862239.177 ops/s
# Warmup Iteration   7: 1809334.329 ops/s
# Warmup Iteration   8: 1882057.444 ops/s
# Warmup Iteration   9: 1859397.116 ops/s
# Warmup Iteration  10: 1814995.295 ops/s
# Warmup Iteration  11: 1831032.661 ops/s
# Warmup Iteration  12: 1574934.650 ops/s
# Warmup Iteration  13: 1746632.350 ops/s
# Warmup Iteration  14: 1893823.737 ops/s
# Warmup Iteration  15: 1868026.099 ops/s
# Warmup Iteration  16: 1762816.430 ops/s
# Warmup Iteration  17: 1840488.855 ops/s
# Warmup Iteration  18: 1791229.905 ops/s
# Warmup Iteration  19: 1748476.110 ops/s
# Warmup Iteration  20: 1847494.435 ops/s
# Warmup Iteration  21: 1876570.981 ops/s
# Warmup Iteration  22: 1816710.065 ops/s
# Warmup Iteration  23: 1871515.967 ops/s
# Warmup Iteration  24: 1892893.255 ops/s
# Warmup Iteration  25: 1813157.246 ops/s
# Warmup Iteration  26: 1856497.445 ops/s
# Warmup Iteration  27: 1868646.409 ops/s
# Warmup Iteration  28: 1824476.005 ops/s
# Warmup Iteration  29: 1815005.197 ops/s
# Warmup Iteration  30: 1868963.154 ops/s
Iteration   1: 1759508.212 ops/s
Iteration   2: 1912644.367 ops/s
Iteration   3: 1797083.890 ops/s
Iteration   4: 1796852.670 ops/s
Iteration   5: 1861368.486 ops/s
Iteration   6: 1859649.824 ops/s
Iteration   7: 1869766.813 ops/s
Iteration   8: 1810009.221 ops/s
Iteration   9: 1878255.389 ops/s
Iteration  10: 1794394.235 ops/s
Iteration  11: 1840275.050 ops/s
Iteration  12: 1822028.639 ops/s
Iteration  13: 1758695.661 ops/s
Iteration  14: 1844956.881 ops/s
Iteration  15: 1858695.592 ops/s
Iteration  16: 1864728.078 ops/s
Iteration  17: 1795946.029 ops/s
Iteration  18: 1884174.550 ops/s
Iteration  19: 1816357.935 ops/s
Iteration  20: 1835658.856 ops/s
Iteration  21: 1868727.667 ops/s
Iteration  22: 1807908.722 ops/s
Iteration  23: 1876954.348 ops/s
Iteration  24: 1827623.102 ops/s
Iteration  25: 1889205.093 ops/s
Iteration  26: 1840415.854 ops/s
Iteration  27: 1872103.288 ops/s
Iteration  28: 1852749.037 ops/s
Iteration  29: 1838930.686 ops/s
Iteration  30: 1867425.546 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_capacityHintFlowable":
  1840103.124 ±(99.9%) 25353.577 ops/s [Average]
  (min, avg, max) = (1758695.661, 1840103.124, 1912644.367), stdev = 37948.043
  CI (99.9%): [1814749.547, 1865456.701] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableToListTest._Benchmark.benchmark_capacityHintFlowable  thrpt   30  1840103.124 ± 25353.577  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_nearMaxValueWithoutBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_nearMaxValueWithoutBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1338571.855 ops/s
# Warmup Iteration   2: 3248351.564 ops/s
# Warmup Iteration   3: 4813427.704 ops/s
# Warmup Iteration   4: 4618972.258 ops/s
# Warmup Iteration   5: 4857128.091 ops/s
# Warmup Iteration   6: 4646953.379 ops/s
# Warmup Iteration   7: 4740738.531 ops/s
# Warmup Iteration   8: 4802564.400 ops/s
# Warmup Iteration   9: 4598703.108 ops/s
# Warmup Iteration  10: 4865824.664 ops/s
# Warmup Iteration  11: 4723788.820 ops/s
# Warmup Iteration  12: 4869618.179 ops/s
# Warmup Iteration  13: 4890428.659 ops/s
# Warmup Iteration  14: 4682730.473 ops/s
# Warmup Iteration  15: 4854790.436 ops/s
# Warmup Iteration  16: 4690301.072 ops/s
# Warmup Iteration  17: 4838212.945 ops/s
# Warmup Iteration  18: 4972094.438 ops/s
# Warmup Iteration  19: 4689986.471 ops/s
# Warmup Iteration  20: 4847814.970 ops/s
# Warmup Iteration  21: 4767529.263 ops/s
# Warmup Iteration  22: 4758771.611 ops/s
# Warmup Iteration  23: 4593227.344 ops/s
# Warmup Iteration  24: 4727959.270 ops/s
# Warmup Iteration  25: 4729529.772 ops/s
# Warmup Iteration  26: 4786746.236 ops/s
# Warmup Iteration  27: 4966855.002 ops/s
# Warmup Iteration  28: 4637291.254 ops/s
# Warmup Iteration  29: 4913955.203 ops/s
# Warmup Iteration  30: 4753870.684 ops/s
Iteration   1: 4883468.894 ops/s
Iteration   2: 4906746.287 ops/s
Iteration   3: 4619666.973 ops/s
Iteration   4: 4840140.008 ops/s
Iteration   5: 4935453.022 ops/s
Iteration   6: 4651828.703 ops/s
Iteration   7: 4849292.585 ops/s
Iteration   8: 4748122.041 ops/s
Iteration   9: 4955744.349 ops/s
Iteration  10: 4904414.135 ops/s
Iteration  11: 4708365.677 ops/s
Iteration  12: 4945306.020 ops/s
Iteration  13: 4665559.597 ops/s
Iteration  14: 4842435.014 ops/s
Iteration  15: 4853846.440 ops/s
Iteration  16: 4747430.539 ops/s
Iteration  17: 4833906.406 ops/s
Iteration  18: 4721602.635 ops/s
Iteration  19: 4973565.694 ops/s
Iteration  20: 4898752.023 ops/s
Iteration  21: 4756208.197 ops/s
Iteration  22: 4940074.789 ops/s
Iteration  23: 4624991.725 ops/s
Iteration  24: 4834052.350 ops/s
Iteration  25: 4933981.739 ops/s
Iteration  26: 4627300.337 ops/s
Iteration  27: 4938407.535 ops/s
Iteration  28: 4797092.224 ops/s
Iteration  29: 4817866.038 ops/s
Iteration  30: 4776215.759 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_nearMaxValueWithoutBackpressure":
  4817727.924 ±(99.9%) 73085.022 ops/s [Average]
  (min, avg, max) = (4619666.973, 4817727.924, 4973565.694), stdev = 109390.229
  CI (99.9%): [4744642.902, 4890812.947] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_nearMaxValueWithoutBackpressure  thrpt   30  4817727.924 ± 73085.022  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 139179.079 ops/s
# Warmup Iteration   2: 477572.566 ops/s
# Warmup Iteration   3: 538007.405 ops/s
# Warmup Iteration   4: 538686.931 ops/s
# Warmup Iteration   5: 524431.866 ops/s
# Warmup Iteration   6: 494376.742 ops/s
# Warmup Iteration   7: 555519.427 ops/s
# Warmup Iteration   8: 540826.657 ops/s
# Warmup Iteration   9: 572689.073 ops/s
# Warmup Iteration  10: 559883.238 ops/s
# Warmup Iteration  11: 548191.827 ops/s
# Warmup Iteration  12: 557825.730 ops/s
# Warmup Iteration  13: 572135.526 ops/s
# Warmup Iteration  14: 540922.339 ops/s
# Warmup Iteration  15: 538768.494 ops/s
# Warmup Iteration  16: 528382.486 ops/s
# Warmup Iteration  17: 562277.872 ops/s
# Warmup Iteration  18: 599634.086 ops/s
# Warmup Iteration  19: 581588.530 ops/s
# Warmup Iteration  20: 589645.991 ops/s
# Warmup Iteration  21: 581657.629 ops/s
# Warmup Iteration  22: 581077.518 ops/s
# Warmup Iteration  23: 605421.771 ops/s
# Warmup Iteration  24: 565421.765 ops/s
# Warmup Iteration  25: 599781.786 ops/s
# Warmup Iteration  26: 570011.857 ops/s
# Warmup Iteration  27: 581525.104 ops/s
# Warmup Iteration  28: 575147.140 ops/s
# Warmup Iteration  29: 587978.048 ops/s
# Warmup Iteration  30: 591476.938 ops/s
Iteration   1: 572256.019 ops/s
Iteration   2: 604859.801 ops/s
Iteration   3: 566482.116 ops/s
Iteration   4: 581564.969 ops/s
Iteration   5: 597146.935 ops/s
Iteration   6: 569574.451 ops/s
Iteration   7: 591935.216 ops/s
Iteration   8: 574726.765 ops/s
Iteration   9: 613885.435 ops/s
Iteration  10: 595964.610 ops/s
Iteration  11: 572925.678 ops/s
Iteration  12: 572844.110 ops/s
Iteration  13: 592328.296 ops/s
Iteration  14: 568429.954 ops/s
Iteration  15: 602382.767 ops/s
Iteration  16: 581003.693 ops/s
Iteration  17: 586374.290 ops/s
Iteration  18: 588709.030 ops/s
Iteration  19: 575729.076 ops/s
Iteration  20: 592129.425 ops/s
Iteration  21: 587879.456 ops/s
Iteration  22: 598256.449 ops/s
Iteration  23: 571944.770 ops/s
Iteration  24: 581862.818 ops/s
Iteration  25: 601119.429 ops/s
Iteration  26: 581536.723 ops/s
Iteration  27: 587404.024 ops/s
Iteration  28: 577582.025 ops/s
Iteration  29: 581098.395 ops/s
Iteration  30: 611998.999 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrash":
  586064.524 ±(99.9%) 8688.790 ops/s [Average]
  (min, avg, max) = (566482.116, 586064.524, 613885.435), stdev = 13004.972
  CI (99.9%): [577375.735, 594753.314] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrash  thrpt   30  586064.524 ± 8688.790  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83481.592 ops/s
# Warmup Iteration   2: 430458.862 ops/s
# Warmup Iteration   3: 530776.472 ops/s
# Warmup Iteration   4: 535940.514 ops/s
# Warmup Iteration   5: 502207.265 ops/s
# Warmup Iteration   6: 594995.582 ops/s
# Warmup Iteration   7: 606337.676 ops/s
# Warmup Iteration   8: 586700.124 ops/s
# Warmup Iteration   9: 607443.485 ops/s
# Warmup Iteration  10: 583851.511 ops/s
# Warmup Iteration  11: 598843.067 ops/s
# Warmup Iteration  12: 599724.640 ops/s
# Warmup Iteration  13: 596376.773 ops/s
# Warmup Iteration  14: 587636.438 ops/s
# Warmup Iteration  15: 617618.220 ops/s
# Warmup Iteration  16: 577073.747 ops/s
# Warmup Iteration  17: 617969.886 ops/s
# Warmup Iteration  18: 628881.525 ops/s
# Warmup Iteration  19: 618693.501 ops/s
# Warmup Iteration  20: 624269.415 ops/s
# Warmup Iteration  21: 637100.771 ops/s
# Warmup Iteration  22: 633168.921 ops/s
# Warmup Iteration  23: 654329.729 ops/s
# Warmup Iteration  24: 584472.866 ops/s
# Warmup Iteration  25: 646820.831 ops/s
# Warmup Iteration  26: 629274.307 ops/s
# Warmup Iteration  27: 617240.073 ops/s
# Warmup Iteration  28: 639137.450 ops/s
# Warmup Iteration  29: 620437.328 ops/s
# Warmup Iteration  30: 620686.890 ops/s
Iteration   1: 620222.018 ops/s
Iteration   2: 622023.241 ops/s
Iteration   3: 649155.786 ops/s
Iteration   4: 598854.117 ops/s
Iteration   5: 643005.767 ops/s
Iteration   6: 615095.506 ops/s
Iteration   7: 639039.114 ops/s
Iteration   8: 610036.851 ops/s
Iteration   9: 639218.719 ops/s
Iteration  10: 639045.411 ops/s
Iteration  11: 593010.737 ops/s
Iteration  12: 631462.551 ops/s
Iteration  13: 594023.686 ops/s
Iteration  14: 642844.985 ops/s
Iteration  15: 656028.172 ops/s
Iteration  16: 599698.680 ops/s
Iteration  17: 640851.093 ops/s
Iteration  18: 618537.953 ops/s
Iteration  19: 631378.496 ops/s
Iteration  20: 648625.220 ops/s
Iteration  21: 619935.227 ops/s
Iteration  22: 644179.710 ops/s
Iteration  23: 633826.333 ops/s
Iteration  24: 607603.522 ops/s
Iteration  25: 651441.068 ops/s
Iteration  26: 609369.818 ops/s
Iteration  27: 644468.797 ops/s
Iteration  28: 636080.722 ops/s
Iteration  29: 616490.619 ops/s
Iteration  30: 632384.831 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_otherError":
  627597.958 ±(99.9%) 12107.110 ops/s [Average]
  (min, avg, max) = (593010.737, 627597.958, 656028.172), stdev = 18121.354
  CI (99.9%): [615490.848, 639705.068] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableConcatWithSingleTest._Benchmark.benchmark_otherError  thrpt   30  627597.958 ± 12107.110  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_simpleBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_simpleBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 557535.753 ops/s
# Warmup Iteration   2: 1673248.194 ops/s
# Warmup Iteration   3: 1850052.748 ops/s
# Warmup Iteration   4: 1836352.226 ops/s
# Warmup Iteration   5: 2118648.457 ops/s
# Warmup Iteration   6: 2116498.242 ops/s
# Warmup Iteration   7: 2079625.313 ops/s
# Warmup Iteration   8: 2217096.352 ops/s
# Warmup Iteration   9: 2063880.032 ops/s
# Warmup Iteration  10: 2064308.221 ops/s
# Warmup Iteration  11: 2148528.504 ops/s
# Warmup Iteration  12: 2057152.139 ops/s
# Warmup Iteration  13: 2057408.208 ops/s
# Warmup Iteration  14: 2122967.998 ops/s
# Warmup Iteration  15: 2047226.415 ops/s
# Warmup Iteration  16: 2161373.284 ops/s
# Warmup Iteration  17: 2072619.603 ops/s
# Warmup Iteration  18: 2188720.035 ops/s
# Warmup Iteration  19: 2183660.593 ops/s
# Warmup Iteration  20: 2174993.237 ops/s
# Warmup Iteration  21: 2095056.607 ops/s
# Warmup Iteration  22: 2094201.586 ops/s
# Warmup Iteration  23: 2158027.387 ops/s
# Warmup Iteration  24: 2121175.689 ops/s
# Warmup Iteration  25: 2142589.867 ops/s
# Warmup Iteration  26: 2065831.960 ops/s
# Warmup Iteration  27: 2163674.779 ops/s
# Warmup Iteration  28: 2216219.844 ops/s
# Warmup Iteration  29: 1992739.135 ops/s
# Warmup Iteration  30: 2134489.809 ops/s
Iteration   1: 2072631.651 ops/s
Iteration   2: 2125973.738 ops/s
Iteration   3: 2078820.623 ops/s
Iteration   4: 2141221.668 ops/s
Iteration   5: 2131068.460 ops/s
Iteration   6: 2086005.896 ops/s
Iteration   7: 2154019.448 ops/s
Iteration   8: 2112755.513 ops/s
Iteration   9: 2069594.307 ops/s
Iteration  10: 2135108.837 ops/s
Iteration  11: 2135016.316 ops/s
Iteration  12: 2094630.469 ops/s
Iteration  13: 2151609.700 ops/s
Iteration  14: 2034178.943 ops/s
Iteration  15: 2143377.726 ops/s
Iteration  16: 2139772.138 ops/s
Iteration  17: 2047524.039 ops/s
Iteration  18: 2147639.029 ops/s
Iteration  19: 2110312.167 ops/s
Iteration  20: 2200525.086 ops/s
Iteration  21: 2078616.077 ops/s
Iteration  22: 2144002.786 ops/s
Iteration  23: 2084023.330 ops/s
Iteration  24: 2130317.179 ops/s
Iteration  25: 2065607.994 ops/s
Iteration  26: 2133864.047 ops/s
Iteration  27: 2170643.848 ops/s
Iteration  28: 2092172.345 ops/s
Iteration  29: 2139166.940 ops/s
Iteration  30: 2127087.090 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_simpleBackpressure":
  2115909.580 ±(99.9%) 25589.786 ops/s [Average]
  (min, avg, max) = (2034178.943, 2115909.580, 2200525.086), stdev = 38301.590
  CI (99.9%): [2090319.794, 2141499.366] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableOnBackpressureLatestTest._Benchmark.benchmark_simpleBackpressure  thrpt   30  2115909.580 ± 25589.786  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 133107.817 ops/s
# Warmup Iteration   2: 378235.326 ops/s
# Warmup Iteration   3: 414182.277 ops/s
# Warmup Iteration   4: 398968.388 ops/s
# Warmup Iteration   5: 493198.674 ops/s
# Warmup Iteration   6: 477359.117 ops/s
# Warmup Iteration   7: 487097.665 ops/s
# Warmup Iteration   8: 500252.396 ops/s
# Warmup Iteration   9: 469681.662 ops/s
# Warmup Iteration  10: 492293.804 ops/s
# Warmup Iteration  11: 495560.402 ops/s
# Warmup Iteration  12: 465429.321 ops/s
# Warmup Iteration  13: 488955.213 ops/s
# Warmup Iteration  14: 481118.227 ops/s
# Warmup Iteration  15: 491477.428 ops/s
# Warmup Iteration  16: 482876.527 ops/s
# Warmup Iteration  17: 485479.329 ops/s
# Warmup Iteration  18: 516507.401 ops/s
# Warmup Iteration  19: 492934.967 ops/s
# Warmup Iteration  20: 493816.243 ops/s
# Warmup Iteration  21: 514639.997 ops/s
# Warmup Iteration  22: 508664.833 ops/s
# Warmup Iteration  23: 502813.290 ops/s
# Warmup Iteration  24: 503496.079 ops/s
# Warmup Iteration  25: 491863.957 ops/s
# Warmup Iteration  26: 502867.199 ops/s
# Warmup Iteration  27: 516450.740 ops/s
# Warmup Iteration  28: 484634.530 ops/s
# Warmup Iteration  29: 519686.203 ops/s
# Warmup Iteration  30: 516708.852 ops/s
Iteration   1: 491437.798 ops/s
Iteration   2: 511116.264 ops/s
Iteration   3: 485450.209 ops/s
Iteration   4: 499685.033 ops/s
Iteration   5: 513637.979 ops/s
Iteration   6: 502711.189 ops/s
Iteration   7: 503085.478 ops/s
Iteration   8: 501883.337 ops/s
Iteration   9: 498819.623 ops/s
Iteration  10: 516566.464 ops/s
Iteration  11: 492030.780 ops/s
Iteration  12: 519263.451 ops/s
Iteration  13: 522771.094 ops/s
Iteration  14: 496936.320 ops/s
Iteration  15: 497544.204 ops/s
Iteration  16: 493590.848 ops/s
Iteration  17: 508965.070 ops/s
Iteration  18: 499138.365 ops/s
Iteration  19: 486635.475 ops/s
Iteration  20: 511867.976 ops/s
Iteration  21: 503560.218 ops/s
Iteration  22: 514197.662 ops/s
Iteration  23: 497306.946 ops/s
Iteration  24: 496128.753 ops/s
Iteration  25: 521176.237 ops/s
Iteration  26: 497043.715 ops/s
Iteration  27: 508506.400 ops/s
Iteration  28: 418206.423 ops/s
Iteration  29: 507424.310 ops/s
Iteration  30: 493324.088 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_badRequest":
  500333.724 ±(99.9%) 12315.436 ops/s [Average]
  (min, avg, max) = (418206.423, 500333.724, 522771.094), stdev = 18433.167
  CI (99.9%): [488018.287, 512649.160] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
FlowableTakeTest2._Benchmark.benchmark_badRequest  thrpt   30  500333.724 ± 12315.436  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.SubscribeWithTest._Benchmark.benchmark_withObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.SubscribeWithTest._Benchmark.benchmark_withObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1423612.718 ops/s
# Warmup Iteration   2: 3209462.174 ops/s
# Warmup Iteration   3: 3424150.185 ops/s
# Warmup Iteration   4: 3800600.916 ops/s
# Warmup Iteration   5: 3819621.833 ops/s
# Warmup Iteration   6: 3897146.079 ops/s
# Warmup Iteration   7: 3757985.841 ops/s
# Warmup Iteration   8: 3967089.271 ops/s
# Warmup Iteration   9: 3919202.896 ops/s
# Warmup Iteration  10: 3749135.471 ops/s
# Warmup Iteration  11: 3795987.691 ops/s
# Warmup Iteration  12: 4041651.766 ops/s
# Warmup Iteration  13: 3958556.304 ops/s
# Warmup Iteration  14: 3803416.147 ops/s
# Warmup Iteration  15: 3915880.105 ops/s
# Warmup Iteration  16: 3862785.378 ops/s
# Warmup Iteration  17: 3812674.957 ops/s
# Warmup Iteration  18: 4000563.459 ops/s
# Warmup Iteration  19: 3829260.453 ops/s
# Warmup Iteration  20: 3841848.137 ops/s
# Warmup Iteration  21: 3925222.620 ops/s
# Warmup Iteration  22: 3791438.258 ops/s
# Warmup Iteration  23: 3853555.061 ops/s
# Warmup Iteration  24: 3690271.919 ops/s
# Warmup Iteration  25: 3829895.355 ops/s
# Warmup Iteration  26: 3968607.106 ops/s
# Warmup Iteration  27: 3740386.530 ops/s
# Warmup Iteration  28: 3886122.885 ops/s
# Warmup Iteration  29: 3826524.728 ops/s
# Warmup Iteration  30: 3871409.524 ops/s
Iteration   1: 3925859.693 ops/s
Iteration   2: 3805955.807 ops/s
Iteration   3: 3937546.741 ops/s
Iteration   4: 3817421.705 ops/s
Iteration   5: 3887098.283 ops/s
Iteration   6: 3742841.199 ops/s
Iteration   7: 3921769.271 ops/s
Iteration   8: 3857262.473 ops/s
Iteration   9: 3822129.261 ops/s
Iteration  10: 3968759.466 ops/s
Iteration  11: 3778860.913 ops/s
Iteration  12: 3931828.968 ops/s
Iteration  13: 3810940.091 ops/s
Iteration  14: 3936331.996 ops/s
Iteration  15: 3888755.138 ops/s
Iteration  16: 3681126.997 ops/s
Iteration  17: 4055028.487 ops/s
Iteration  18: 3748064.643 ops/s
Iteration  19: 3947265.698 ops/s
Iteration  20: 3789215.655 ops/s
Iteration  21: 3918844.899 ops/s
Iteration  22: 4010088.107 ops/s
Iteration  23: 3726996.088 ops/s
Iteration  24: 3960118.643 ops/s
Iteration  25: 3859436.482 ops/s
Iteration  26: 3924365.760 ops/s
Iteration  27: 3824559.533 ops/s
Iteration  28: 3901534.373 ops/s
Iteration  29: 3953354.063 ops/s
Iteration  30: 3828673.793 ops/s


Result "io.reactivex.rxjava3.internal.SubscribeWithTest._Benchmark.benchmark_withObservable":
  3872067.807 ±(99.9%) 59341.142 ops/s [Average]
  (min, avg, max) = (3681126.997, 3872067.807, 4055028.487), stdev = 88819.034
  CI (99.9%): [3812726.666, 3931408.949] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SubscribeWithTest._Benchmark.benchmark_withObservable  thrpt   30  3872067.807 ± 59341.142  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_range$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_range

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 280674.917 ops/s
# Warmup Iteration   2: 1545505.416 ops/s
# Warmup Iteration   3: 2107228.575 ops/s
# Warmup Iteration   4: 2118504.465 ops/s
# Warmup Iteration   5: 1992195.626 ops/s
# Warmup Iteration   6: 2058508.310 ops/s
# Warmup Iteration   7: 1979246.430 ops/s
# Warmup Iteration   8: 2256772.950 ops/s
# Warmup Iteration   9: 2087524.603 ops/s
# Warmup Iteration  10: 2228480.315 ops/s
# Warmup Iteration  11: 2267698.166 ops/s
# Warmup Iteration  12: 2060318.236 ops/s
# Warmup Iteration  13: 2132759.005 ops/s
# Warmup Iteration  14: 2169422.417 ops/s
# Warmup Iteration  15: 2152275.345 ops/s
# Warmup Iteration  16: 2202892.194 ops/s
# Warmup Iteration  17: 2160801.214 ops/s
# Warmup Iteration  18: 2206806.908 ops/s
# Warmup Iteration  19: 2069182.496 ops/s
# Warmup Iteration  20: 2180663.997 ops/s
# Warmup Iteration  21: 2207060.058 ops/s
# Warmup Iteration  22: 2145583.656 ops/s
# Warmup Iteration  23: 2155759.050 ops/s
# Warmup Iteration  24: 2135540.076 ops/s
# Warmup Iteration  25: 2147898.991 ops/s
# Warmup Iteration  26: 2146259.767 ops/s
# Warmup Iteration  27: 2095900.390 ops/s
# Warmup Iteration  28: 2228783.580 ops/s
# Warmup Iteration  29: 2192881.822 ops/s
# Warmup Iteration  30: 2148000.688 ops/s
Iteration   1: 2218853.170 ops/s
Iteration   2: 2133741.157 ops/s
Iteration   3: 2201484.390 ops/s
Iteration   4: 2184281.971 ops/s
Iteration   5: 2142447.690 ops/s
Iteration   6: 2204704.704 ops/s
Iteration   7: 2085059.344 ops/s
Iteration   8: 2129849.098 ops/s
Iteration   9: 2116633.301 ops/s
Iteration  10: 2187030.112 ops/s
Iteration  11: 2150927.698 ops/s
Iteration  12: 2159489.226 ops/s
Iteration  13: 2219794.539 ops/s
Iteration  14: 2139918.751 ops/s
Iteration  15: 2117466.204 ops/s
Iteration  16: 2257344.731 ops/s
Iteration  17: 2141321.816 ops/s
Iteration  18: 2227441.128 ops/s
Iteration  19: 2159062.654 ops/s
Iteration  20: 2246453.820 ops/s
Iteration  21: 2199546.736 ops/s
Iteration  22: 2139776.589 ops/s
Iteration  23: 1564714.552 ops/s
Iteration  24: 2082277.067 ops/s
Iteration  25: 2093487.102 ops/s
Iteration  26: 2274661.664 ops/s
Iteration  27: 2230579.806 ops/s
Iteration  28: 2112684.344 ops/s
Iteration  29: 2173097.996 ops/s
Iteration  30: 2155532.840 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_range":
  2148322.140 ±(99.9%) 81250.646 ops/s [Average]
  (min, avg, max) = (1564714.552, 2148322.140, 2274661.664), stdev = 121612.152
  CI (99.9%): [2067071.494, 2229572.786] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_range  thrpt   30  2148322.140 ± 81250.646  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_withEmptyFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_withEmptyFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1277025.629 ops/s
# Warmup Iteration   2: 7962418.772 ops/s
# Warmup Iteration   3: 12013499.878 ops/s
# Warmup Iteration   4: 12842503.242 ops/s
# Warmup Iteration   5: 13277514.157 ops/s
# Warmup Iteration   6: 13382993.445 ops/s
# Warmup Iteration   7: 13380708.956 ops/s
# Warmup Iteration   8: 13713649.925 ops/s
# Warmup Iteration   9: 13134012.900 ops/s
# Warmup Iteration  10: 13138136.977 ops/s
# Warmup Iteration  11: 13418907.274 ops/s
# Warmup Iteration  12: 13411018.814 ops/s
# Warmup Iteration  13: 13444869.740 ops/s
# Warmup Iteration  14: 13922466.565 ops/s
# Warmup Iteration  15: 12993910.619 ops/s
# Warmup Iteration  16: 13780001.935 ops/s
# Warmup Iteration  17: 13880351.490 ops/s
# Warmup Iteration  18: 12966266.597 ops/s
# Warmup Iteration  19: 13659950.399 ops/s
# Warmup Iteration  20: 12955103.658 ops/s
# Warmup Iteration  21: 13556036.340 ops/s
# Warmup Iteration  22: 13408520.960 ops/s
# Warmup Iteration  23: 13464354.241 ops/s
# Warmup Iteration  24: 13101233.615 ops/s
# Warmup Iteration  25: 13312073.872 ops/s
# Warmup Iteration  26: 13506920.438 ops/s
# Warmup Iteration  27: 13240957.130 ops/s
# Warmup Iteration  28: 13198594.452 ops/s
# Warmup Iteration  29: 13161145.170 ops/s
# Warmup Iteration  30: 13457411.863 ops/s
Iteration   1: 12804450.040 ops/s
Iteration   2: 13690125.366 ops/s
Iteration   3: 13007999.190 ops/s
Iteration   4: 14073829.704 ops/s
Iteration   5: 13318027.743 ops/s
Iteration   6: 13188259.941 ops/s
Iteration   7: 13264768.128 ops/s
Iteration   8: 12913616.919 ops/s
Iteration   9: 13535254.163 ops/s
Iteration  10: 13211902.859 ops/s
Iteration  11: 13532423.056 ops/s
Iteration  12: 13552995.760 ops/s
Iteration  13: 13691666.379 ops/s
Iteration  14: 13256180.290 ops/s
Iteration  15: 13860729.190 ops/s
Iteration  16: 13014135.249 ops/s
Iteration  17: 13731395.128 ops/s
Iteration  18: 13436617.133 ops/s
Iteration  19: 13286167.696 ops/s
Iteration  20: 13949578.214 ops/s
Iteration  21: 12987002.875 ops/s
Iteration  22: 13580813.571 ops/s
Iteration  23: 13059651.262 ops/s
Iteration  24: 13672232.604 ops/s
Iteration  25: 13781691.246 ops/s
Iteration  26: 12800567.814 ops/s
Iteration  27: 13896364.697 ops/s
Iteration  28: 13417378.251 ops/s
Iteration  29: 13805009.189 ops/s
Iteration  30: 13403584.266 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_withEmptyFlowable":
  13424147.264 ±(99.9%) 236445.197 ops/s [Average]
  (min, avg, max) = (12800567.814, 13424147.264, 14073829.704), stdev = 353900.066
  CI (99.9%): [13187702.067, 13660592.461] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_withEmptyFlowable  thrpt   30  13424147.264 ± 236445.197  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapJustRange$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapJustRange

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 844276.943 ops/s
# Warmup Iteration   2: 3025829.001 ops/s
# Warmup Iteration   3: 3475078.374 ops/s
# Warmup Iteration   4: 3784602.185 ops/s
# Warmup Iteration   5: 3899358.317 ops/s
# Warmup Iteration   6: 3939464.941 ops/s
# Warmup Iteration   7: 3842702.329 ops/s
# Warmup Iteration   8: 3995283.388 ops/s
# Warmup Iteration   9: 3753760.094 ops/s
# Warmup Iteration  10: 3945596.925 ops/s
# Warmup Iteration  11: 3995169.095 ops/s
# Warmup Iteration  12: 4069535.120 ops/s
# Warmup Iteration  13: 3801724.904 ops/s
# Warmup Iteration  14: 3925291.149 ops/s
# Warmup Iteration  15: 3818116.551 ops/s
# Warmup Iteration  16: 3906606.167 ops/s
# Warmup Iteration  17: 3817724.362 ops/s
# Warmup Iteration  18: 3935668.343 ops/s
# Warmup Iteration  19: 3921873.636 ops/s
# Warmup Iteration  20: 3916697.465 ops/s
# Warmup Iteration  21: 4033168.076 ops/s
# Warmup Iteration  22: 3900943.612 ops/s
# Warmup Iteration  23: 3937974.571 ops/s
# Warmup Iteration  24: 3816074.223 ops/s
# Warmup Iteration  25: 4006199.035 ops/s
# Warmup Iteration  26: 4067589.377 ops/s
# Warmup Iteration  27: 3835283.990 ops/s
# Warmup Iteration  28: 3978543.841 ops/s
# Warmup Iteration  29: 3796200.607 ops/s
# Warmup Iteration  30: 3926467.923 ops/s
Iteration   1: 3799738.479 ops/s
Iteration   2: 3787525.152 ops/s
Iteration   3: 4083082.514 ops/s
Iteration   4: 3907954.826 ops/s
Iteration   5: 3815336.017 ops/s
Iteration   6: 3888379.993 ops/s
Iteration   7: 3951138.541 ops/s
Iteration   8: 4001344.840 ops/s
Iteration   9: 4050029.017 ops/s
Iteration  10: 3758378.187 ops/s
Iteration  11: 4071311.028 ops/s
Iteration  12: 3785541.564 ops/s
Iteration  13: 4032432.778 ops/s
Iteration  14: 3858601.551 ops/s
Iteration  15: 3760162.103 ops/s
Iteration  16: 3946150.157 ops/s
Iteration  17: 3864607.240 ops/s
Iteration  18: 3172846.487 ops/s
Iteration  19: 4003288.720 ops/s
Iteration  20: 3759432.626 ops/s
Iteration  21: 3902062.593 ops/s
Iteration  22: 4023618.462 ops/s
Iteration  23: 3805079.330 ops/s
Iteration  24: 3888852.129 ops/s
Iteration  25: 4022388.365 ops/s
Iteration  26: 3788107.175 ops/s
Iteration  27: 4063606.383 ops/s
Iteration  28: 3839619.629 ops/s
Iteration  29: 3937109.003 ops/s
Iteration  30: 4054966.485 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapJustRange":
  3887423.046 ±(99.9%) 115443.247 ops/s [Average]
  (min, avg, max) = (3172846.487, 3887423.046, 4083082.514), stdev = 172790.031
  CI (99.9%): [3771979.799, 4002866.293] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapJustRange  thrpt   30  3887423.046 ± 115443.247  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustRange$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustRange

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 899723.258 ops/s
# Warmup Iteration   2: 3055733.833 ops/s
# Warmup Iteration   3: 3358564.831 ops/s
# Warmup Iteration   4: 3755004.061 ops/s
# Warmup Iteration   5: 3983220.511 ops/s
# Warmup Iteration   6: 4014570.141 ops/s
# Warmup Iteration   7: 3752777.189 ops/s
# Warmup Iteration   8: 3809672.300 ops/s
# Warmup Iteration   9: 3959461.728 ops/s
# Warmup Iteration  10: 3921257.887 ops/s
# Warmup Iteration  11: 3741141.684 ops/s
# Warmup Iteration  12: 3911962.190 ops/s
# Warmup Iteration  13: 3825528.701 ops/s
# Warmup Iteration  14: 3896514.700 ops/s
# Warmup Iteration  15: 3951566.887 ops/s
# Warmup Iteration  16: 3785695.949 ops/s
# Warmup Iteration  17: 3912096.077 ops/s
# Warmup Iteration  18: 3789107.738 ops/s
# Warmup Iteration  19: 3753068.480 ops/s
# Warmup Iteration  20: 3914334.917 ops/s
# Warmup Iteration  21: 3896489.942 ops/s
# Warmup Iteration  22: 3805795.679 ops/s
# Warmup Iteration  23: 3836041.573 ops/s
# Warmup Iteration  24: 3989502.671 ops/s
# Warmup Iteration  25: 3783746.073 ops/s
# Warmup Iteration  26: 3811952.938 ops/s
# Warmup Iteration  27: 3925443.355 ops/s
# Warmup Iteration  28: 3920518.910 ops/s
# Warmup Iteration  29: 3888549.582 ops/s
# Warmup Iteration  30: 3775573.844 ops/s
Iteration   1: 3875149.398 ops/s
Iteration   2: 3729811.352 ops/s
Iteration   3: 3868686.892 ops/s
Iteration   4: 3910589.919 ops/s
Iteration   5: 3750360.821 ops/s
Iteration   6: 3961644.716 ops/s
Iteration   7: 3807210.515 ops/s
Iteration   8: 3992661.591 ops/s
Iteration   9: 4017274.757 ops/s
Iteration  10: 3792276.279 ops/s
Iteration  11: 3866779.893 ops/s
Iteration  12: 3761914.911 ops/s
Iteration  13: 3864906.832 ops/s
Iteration  14: 3727039.250 ops/s
Iteration  15: 3804314.810 ops/s
Iteration  16: 3967104.892 ops/s
Iteration  17: 3768063.245 ops/s
Iteration  18: 4008672.357 ops/s
Iteration  19: 3797873.595 ops/s
Iteration  20: 3940145.405 ops/s
Iteration  21: 3828631.384 ops/s
Iteration  22: 3938539.174 ops/s
Iteration  23: 3871596.874 ops/s
Iteration  24: 3865298.087 ops/s
Iteration  25: 3822876.887 ops/s
Iteration  26: 3875973.626 ops/s
Iteration  27: 3913451.216 ops/s
Iteration  28: 3900078.861 ops/s
Iteration  29: 3905484.234 ops/s
Iteration  30: 3822321.044 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustRange":
  3865224.427 ±(99.9%) 54183.393 ops/s [Average]
  (min, avg, max) = (3727039.250, 3865224.427, 4017274.757), stdev = 81099.157
  CI (99.9%): [3811041.035, 3919407.820] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustRange  thrpt   30  3865224.427 ± 54183.393  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 794305.172 ops/s
# Warmup Iteration   2: 3211848.320 ops/s
# Warmup Iteration   3: 4760591.759 ops/s
# Warmup Iteration   4: 5017844.428 ops/s
# Warmup Iteration   5: 5157246.325 ops/s
# Warmup Iteration   6: 4925608.235 ops/s
# Warmup Iteration   7: 5133777.675 ops/s
# Warmup Iteration   8: 5242461.076 ops/s
# Warmup Iteration   9: 4967442.680 ops/s
# Warmup Iteration  10: 5164090.045 ops/s
# Warmup Iteration  11: 4951444.784 ops/s
# Warmup Iteration  12: 5142454.884 ops/s
# Warmup Iteration  13: 4979497.511 ops/s
# Warmup Iteration  14: 5219341.112 ops/s
# Warmup Iteration  15: 4950979.161 ops/s
# Warmup Iteration  16: 4977387.749 ops/s
# Warmup Iteration  17: 5159474.611 ops/s
# Warmup Iteration  18: 5016507.109 ops/s
# Warmup Iteration  19: 5221740.354 ops/s
# Warmup Iteration  20: 4959265.990 ops/s
# Warmup Iteration  21: 5176818.256 ops/s
# Warmup Iteration  22: 5098324.702 ops/s
# Warmup Iteration  23: 5047255.506 ops/s
# Warmup Iteration  24: 4993457.472 ops/s
# Warmup Iteration  25: 5128215.209 ops/s
# Warmup Iteration  26: 5052528.969 ops/s
# Warmup Iteration  27: 5188615.435 ops/s
# Warmup Iteration  28: 5020463.112 ops/s
# Warmup Iteration  29: 5021376.701 ops/s
# Warmup Iteration  30: 4994084.820 ops/s
Iteration   1: 5195474.302 ops/s
Iteration   2: 5128120.786 ops/s
Iteration   3: 4954422.798 ops/s
Iteration   4: 5231944.957 ops/s
Iteration   5: 5220496.621 ops/s
Iteration   6: 5067744.594 ops/s
Iteration   7: 5183745.955 ops/s
Iteration   8: 4961231.892 ops/s
Iteration   9: 5264421.559 ops/s
Iteration  10: 5252117.904 ops/s
Iteration  11: 5059673.629 ops/s
Iteration  12: 4328248.487 ops/s
Iteration  13: 4844734.411 ops/s
Iteration  14: 5087104.432 ops/s
Iteration  15: 4821260.603 ops/s
Iteration  16: 5049697.932 ops/s
Iteration  17: 5115982.124 ops/s
Iteration  18: 5129841.039 ops/s
Iteration  19: 5166088.595 ops/s
Iteration  20: 4952290.028 ops/s
Iteration  21: 5225253.589 ops/s
Iteration  22: 4891318.800 ops/s
Iteration  23: 5116343.177 ops/s
Iteration  24: 5221497.685 ops/s
Iteration  25: 4912654.590 ops/s
Iteration  26: 5199021.456 ops/s
Iteration  27: 5052120.168 ops/s
Iteration  28: 4876389.572 ops/s
Iteration  29: 5120972.983 ops/s
Iteration  30: 5154825.071 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_dispose":
  5059501.325 ±(99.9%) 126298.859 ops/s [Average]
  (min, avg, max) = (4328248.487, 5059501.325, 5264421.559), stdev = 189038.200
  CI (99.9%): [4933202.466, 5185800.183] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score        Error  Units
ObservableCollectTest._Benchmark.benchmark_dispose  thrpt   30  5059501.325 ± 126298.859  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_overflowNullAction$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_overflowNullAction

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 578763.287 ops/s
# Warmup Iteration   2: 1683254.518 ops/s
# Warmup Iteration   3: 2006467.066 ops/s
# Warmup Iteration   4: 2930756.795 ops/s
# Warmup Iteration   5: 3097507.701 ops/s
# Warmup Iteration   6: 2805537.441 ops/s
# Warmup Iteration   7: 3341016.228 ops/s
# Warmup Iteration   8: 3326613.623 ops/s
# Warmup Iteration   9: 3328504.396 ops/s
# Warmup Iteration  10: 3196346.448 ops/s
# Warmup Iteration  11: 3183199.124 ops/s
# Warmup Iteration  12: 3497942.181 ops/s
# Warmup Iteration  13: 3178549.731 ops/s
# Warmup Iteration  14: 3294523.485 ops/s
# Warmup Iteration  15: 3327030.452 ops/s
# Warmup Iteration  16: 3222574.163 ops/s
# Warmup Iteration  17: 3362845.848 ops/s
# Warmup Iteration  18: 3260070.129 ops/s
# Warmup Iteration  19: 3362272.215 ops/s
# Warmup Iteration  20: 3233075.238 ops/s
# Warmup Iteration  21: 3343269.134 ops/s
# Warmup Iteration  22: 3381317.802 ops/s
# Warmup Iteration  23: 3279245.884 ops/s
# Warmup Iteration  24: 3248859.791 ops/s
# Warmup Iteration  25: 3230123.233 ops/s
# Warmup Iteration  26: 3283583.300 ops/s
# Warmup Iteration  27: 3353343.909 ops/s
# Warmup Iteration  28: 3178603.399 ops/s
# Warmup Iteration  29: 3358157.203 ops/s
# Warmup Iteration  30: 3253502.678 ops/s
Iteration   1: 3324949.747 ops/s
Iteration   2: 3246125.999 ops/s
Iteration   3: 3311338.449 ops/s
Iteration   4: 3334029.766 ops/s
Iteration   5: 3126162.839 ops/s
Iteration   6: 3272921.462 ops/s
Iteration   7: 3349923.958 ops/s
Iteration   8: 3169504.392 ops/s
Iteration   9: 3485555.452 ops/s
Iteration  10: 3169979.898 ops/s
Iteration  11: 3323783.612 ops/s
Iteration  12: 3350389.469 ops/s
Iteration  13: 3281082.625 ops/s
Iteration  14: 3321871.548 ops/s
Iteration  15: 3233220.770 ops/s
Iteration  16: 3250620.533 ops/s
Iteration  17: 3217192.839 ops/s
Iteration  18: 3381258.731 ops/s
Iteration  19: 3171517.571 ops/s
Iteration  20: 3365901.782 ops/s
Iteration  21: 3257081.725 ops/s
Iteration  22: 3354133.795 ops/s
Iteration  23: 3199872.993 ops/s
Iteration  24: 3266469.038 ops/s
Iteration  25: 3395822.397 ops/s
Iteration  26: 3261999.568 ops/s
Iteration  27: 3256664.850 ops/s
Iteration  28: 3209375.545 ops/s
Iteration  29: 3378368.275 ops/s
Iteration  30: 3303617.421 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_overflowNullAction":
  3285691.235 ±(99.9%) 53853.917 ops/s [Average]
  (min, avg, max) = (3126162.839, 3285691.235, 3485555.452), stdev = 80606.013
  CI (99.9%): [3231837.318, 3339545.152] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_overflowNullAction  thrpt   30  3285691.235 ± 53853.917  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableMissing$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableMissing

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 585649.198 ops/s
# Warmup Iteration   2: 2599748.360 ops/s
# Warmup Iteration   3: 3494068.334 ops/s
# Warmup Iteration   4: 4003292.230 ops/s
# Warmup Iteration   5: 4255967.951 ops/s
# Warmup Iteration   6: 4080612.631 ops/s
# Warmup Iteration   7: 4129577.702 ops/s
# Warmup Iteration   8: 4103320.296 ops/s
# Warmup Iteration   9: 4088145.984 ops/s
# Warmup Iteration  10: 4337355.162 ops/s
# Warmup Iteration  11: 4131021.653 ops/s
# Warmup Iteration  12: 4115506.288 ops/s
# Warmup Iteration  13: 4168126.079 ops/s
# Warmup Iteration  14: 4029830.536 ops/s
# Warmup Iteration  15: 4255810.999 ops/s
# Warmup Iteration  16: 4156040.911 ops/s
# Warmup Iteration  17: 4042280.603 ops/s
# Warmup Iteration  18: 4272754.962 ops/s
# Warmup Iteration  19: 3963649.948 ops/s
# Warmup Iteration  20: 4256155.379 ops/s
# Warmup Iteration  21: 3963126.616 ops/s
# Warmup Iteration  22: 4119422.293 ops/s
# Warmup Iteration  23: 4182127.368 ops/s
# Warmup Iteration  24: 4059480.334 ops/s
# Warmup Iteration  25: 4181669.929 ops/s
# Warmup Iteration  26: 4240652.888 ops/s
# Warmup Iteration  27: 4051943.478 ops/s
# Warmup Iteration  28: 4215129.682 ops/s
# Warmup Iteration  29: 4299589.007 ops/s
# Warmup Iteration  30: 4019236.580 ops/s
Iteration   1: 4284375.030 ops/s
Iteration   2: 4192486.556 ops/s
Iteration   3: 4119945.675 ops/s
Iteration   4: 4167114.211 ops/s
Iteration   5: 3971379.003 ops/s
Iteration   6: 4267987.316 ops/s
Iteration   7: 3198765.006 ops/s
Iteration   8: 4112082.193 ops/s
Iteration   9: 4174549.813 ops/s
Iteration  10: 4222119.962 ops/s
Iteration  11: 4054564.687 ops/s
Iteration  12: 4212465.296 ops/s
Iteration  13: 4097352.222 ops/s
Iteration  14: 4044283.794 ops/s
Iteration  15: 4022121.219 ops/s
Iteration  16: 4275577.068 ops/s
Iteration  17: 3951829.565 ops/s
Iteration  18: 4109586.841 ops/s
Iteration  19: 4304621.010 ops/s
Iteration  20: 4111872.348 ops/s
Iteration  21: 4286739.195 ops/s
Iteration  22: 4034866.223 ops/s
Iteration  23: 4239186.596 ops/s
Iteration  24: 4132006.133 ops/s
Iteration  25: 3982001.570 ops/s
Iteration  26: 4260799.951 ops/s
Iteration  27: 4024068.103 ops/s
Iteration  28: 4003564.682 ops/s
Iteration  29: 4265333.823 ops/s
Iteration  30: 4030122.758 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableMissing":
  4105125.595 ±(99.9%) 135317.538 ops/s [Average]
  (min, avg, max) = (3198765.006, 4105125.595, 4304621.010), stdev = 202536.936
  CI (99.9%): [3969808.057, 4240443.133] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
ObservableToXTest._Benchmark.benchmark_toFlowableMissing  thrpt   30  4105125.595 ± 135317.538  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableBuffer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableBuffer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 145021.726 ops/s
# Warmup Iteration   2: 983768.204 ops/s
# Warmup Iteration   3: 1296438.574 ops/s
# Warmup Iteration   4: 1516582.759 ops/s
# Warmup Iteration   5: 1502033.256 ops/s
# Warmup Iteration   6: 1568296.714 ops/s
# Warmup Iteration   7: 1534950.477 ops/s
# Warmup Iteration   8: 1509878.030 ops/s
# Warmup Iteration   9: 1538978.178 ops/s
# Warmup Iteration  10: 1504864.797 ops/s
# Warmup Iteration  11: 1511174.763 ops/s
# Warmup Iteration  12: 1514741.675 ops/s
# Warmup Iteration  13: 1466463.836 ops/s
# Warmup Iteration  14: 1589637.461 ops/s
# Warmup Iteration  15: 1508327.728 ops/s
# Warmup Iteration  16: 1552388.003 ops/s
# Warmup Iteration  17: 1591757.366 ops/s
# Warmup Iteration  18: 1458525.530 ops/s
# Warmup Iteration  19: 1569308.387 ops/s
# Warmup Iteration  20: 1499175.563 ops/s
# Warmup Iteration  21: 1554027.839 ops/s
# Warmup Iteration  22: 1542489.275 ops/s
# Warmup Iteration  23: 1531014.861 ops/s
# Warmup Iteration  24: 1567260.711 ops/s
# Warmup Iteration  25: 1497786.371 ops/s
# Warmup Iteration  26: 1531299.334 ops/s
# Warmup Iteration  27: 1563144.720 ops/s
# Warmup Iteration  28: 1462191.969 ops/s
# Warmup Iteration  29: 1574297.463 ops/s
# Warmup Iteration  30: 1473697.788 ops/s
Iteration   1: 1574147.625 ops/s
Iteration   2: 1487161.836 ops/s
Iteration   3: 1531855.076 ops/s
Iteration   4: 1536662.895 ops/s
Iteration   5: 1455742.916 ops/s
Iteration   6: 1570877.592 ops/s
Iteration   7: 1487777.713 ops/s
Iteration   8: 1529309.209 ops/s
Iteration   9: 1535001.951 ops/s
Iteration  10: 1523993.627 ops/s
Iteration  11: 1522330.209 ops/s
Iteration  12: 1554217.057 ops/s
Iteration  13: 1472765.488 ops/s
Iteration  14: 1503267.157 ops/s
Iteration  15: 1513750.805 ops/s
Iteration  16: 1502575.060 ops/s
Iteration  17: 1561161.566 ops/s
Iteration  18: 1525025.851 ops/s
Iteration  19: 1508761.962 ops/s
Iteration  20: 1466539.166 ops/s
Iteration  21: 1513175.295 ops/s
Iteration  22: 1505170.594 ops/s
Iteration  23: 1592663.608 ops/s
Iteration  24: 1526173.850 ops/s
Iteration  25: 1574919.239 ops/s
Iteration  26: 1497015.647 ops/s
Iteration  27: 1554727.654 ops/s
Iteration  28: 1530973.799 ops/s
Iteration  29: 1514792.884 ops/s
Iteration  30: 1572715.983 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableBuffer":
  1524841.777 ±(99.9%) 22810.536 ops/s [Average]
  (min, avg, max) = (1455742.916, 1524841.777, 1592663.608), stdev = 34141.739
  CI (99.9%): [1502031.241, 1547652.313] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableToXTest._Benchmark.benchmark_toFlowableBuffer  thrpt   30  1524841.777 ± 22810.536  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 214982.970 ops/s
# Warmup Iteration   2: 514400.924 ops/s
# Warmup Iteration   3: 574337.584 ops/s
# Warmup Iteration   4: 545743.072 ops/s
# Warmup Iteration   5: 559272.119 ops/s
# Warmup Iteration   6: 553347.881 ops/s
# Warmup Iteration   7: 589191.615 ops/s
# Warmup Iteration   8: 605101.687 ops/s
# Warmup Iteration   9: 579579.555 ops/s
# Warmup Iteration  10: 582675.211 ops/s
# Warmup Iteration  11: 619486.561 ops/s
# Warmup Iteration  12: 568078.391 ops/s
# Warmup Iteration  13: 619419.245 ops/s
# Warmup Iteration  14: 585010.481 ops/s
# Warmup Iteration  15: 594924.071 ops/s
# Warmup Iteration  16: 607943.523 ops/s
# Warmup Iteration  17: 617768.887 ops/s
# Warmup Iteration  18: 637108.479 ops/s
# Warmup Iteration  19: 629885.958 ops/s
# Warmup Iteration  20: 619789.035 ops/s
# Warmup Iteration  21: 648265.784 ops/s
# Warmup Iteration  22: 632887.493 ops/s
# Warmup Iteration  23: 607216.632 ops/s
# Warmup Iteration  24: 623431.495 ops/s
# Warmup Iteration  25: 625176.613 ops/s
# Warmup Iteration  26: 624532.222 ops/s
# Warmup Iteration  27: 638813.237 ops/s
# Warmup Iteration  28: 617390.078 ops/s
# Warmup Iteration  29: 621846.447 ops/s
# Warmup Iteration  30: 649442.334 ops/s
Iteration   1: 612022.099 ops/s
Iteration   2: 514617.375 ops/s
Iteration   3: 642945.917 ops/s
Iteration   4: 616085.263 ops/s
Iteration   5: 628687.828 ops/s
Iteration   6: 612352.210 ops/s
Iteration   7: 624825.674 ops/s
Iteration   8: 646462.324 ops/s
Iteration   9: 610937.190 ops/s
Iteration  10: 628133.446 ops/s
Iteration  11: 608650.427 ops/s
Iteration  12: 649943.542 ops/s
Iteration  13: 605529.440 ops/s
Iteration  14: 627058.127 ops/s
Iteration  15: 634497.985 ops/s
Iteration  16: 608984.504 ops/s
Iteration  17: 650899.925 ops/s
Iteration  18: 645537.696 ops/s
Iteration  19: 612816.071 ops/s
Iteration  20: 641811.746 ops/s
Iteration  21: 612496.610 ops/s
Iteration  22: 644273.660 ops/s
Iteration  23: 652125.286 ops/s
Iteration  24: 600711.653 ops/s
Iteration  25: 633224.708 ops/s
Iteration  26: 630237.167 ops/s
Iteration  27: 628259.594 ops/s
Iteration  28: 608620.690 ops/s
Iteration  29: 625147.007 ops/s
Iteration  30: 623986.309 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrash":
  622729.382 ±(99.9%) 17016.960 ops/s [Average]
  (min, avg, max) = (514617.375, 622729.382, 652125.286), stdev = 25470.186
  CI (99.9%): [605712.423, 639746.342] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrash  thrpt   30  622729.382 ± 17016.960  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_overflowError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_overflowError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65705.173 ops/s
# Warmup Iteration   2: 343966.396 ops/s
# Warmup Iteration   3: 337329.075 ops/s
# Warmup Iteration   4: 413425.197 ops/s
# Warmup Iteration   5: 474330.818 ops/s
# Warmup Iteration   6: 435966.618 ops/s
# Warmup Iteration   7: 471058.870 ops/s
# Warmup Iteration   8: 472672.369 ops/s
# Warmup Iteration   9: 495305.369 ops/s
# Warmup Iteration  10: 482371.944 ops/s
# Warmup Iteration  11: 487358.952 ops/s
# Warmup Iteration  12: 463239.175 ops/s
# Warmup Iteration  13: 487374.203 ops/s
# Warmup Iteration  14: 477617.647 ops/s
# Warmup Iteration  15: 461886.983 ops/s
# Warmup Iteration  16: 484706.422 ops/s
# Warmup Iteration  17: 492833.400 ops/s
# Warmup Iteration  18: 499586.909 ops/s
# Warmup Iteration  19: 521077.019 ops/s
# Warmup Iteration  20: 488372.819 ops/s
# Warmup Iteration  21: 511827.205 ops/s
# Warmup Iteration  22: 480567.176 ops/s
# Warmup Iteration  23: 515564.444 ops/s
# Warmup Iteration  24: 504943.542 ops/s
# Warmup Iteration  25: 496463.414 ops/s
# Warmup Iteration  26: 499815.352 ops/s
# Warmup Iteration  27: 512980.412 ops/s
# Warmup Iteration  28: 492718.410 ops/s
# Warmup Iteration  29: 512144.688 ops/s
# Warmup Iteration  30: 487660.911 ops/s
Iteration   1: 495563.252 ops/s
Iteration   2: 491687.671 ops/s
Iteration   3: 497403.804 ops/s
Iteration   4: 492697.416 ops/s
Iteration   5: 508449.980 ops/s
Iteration   6: 489743.182 ops/s
Iteration   7: 494007.792 ops/s
Iteration   8: 515710.889 ops/s
Iteration   9: 484487.856 ops/s
Iteration  10: 519202.657 ops/s
Iteration  11: 513632.425 ops/s
Iteration  12: 477428.097 ops/s
Iteration  13: 512353.978 ops/s
Iteration  14: 479261.773 ops/s
Iteration  15: 506185.955 ops/s
Iteration  16: 467238.651 ops/s
Iteration  17: 499520.965 ops/s
Iteration  18: 498192.814 ops/s
Iteration  19: 481026.394 ops/s
Iteration  20: 491367.993 ops/s
Iteration  21: 481375.480 ops/s
Iteration  22: 499326.807 ops/s
Iteration  23: 486420.094 ops/s
Iteration  24: 509257.836 ops/s
Iteration  25: 516984.374 ops/s
Iteration  26: 491804.919 ops/s
Iteration  27: 503393.769 ops/s
Iteration  28: 522859.160 ops/s
Iteration  29: 491024.669 ops/s
Iteration  30: 510496.179 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_overflowError":
  497603.561 ±(99.9%) 9259.920 ops/s [Average]
  (min, avg, max) = (467238.651, 497603.561, 522859.160), stdev = 13859.813
  CI (99.9%): [488343.641, 506863.481] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_overflowError  thrpt   30  497603.561 ± 9259.920  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureNone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureNone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1546951.573 ops/s
# Warmup Iteration   2: 3755659.751 ops/s
# Warmup Iteration   3: 4952128.068 ops/s
# Warmup Iteration   4: 4894714.272 ops/s
# Warmup Iteration   5: 5165325.314 ops/s
# Warmup Iteration   6: 5196644.960 ops/s
# Warmup Iteration   7: 4787978.316 ops/s
# Warmup Iteration   8: 5146336.557 ops/s
# Warmup Iteration   9: 5020776.463 ops/s
# Warmup Iteration  10: 5034426.431 ops/s
# Warmup Iteration  11: 4844407.987 ops/s
# Warmup Iteration  12: 4964484.039 ops/s
# Warmup Iteration  13: 5075472.782 ops/s
# Warmup Iteration  14: 4783730.089 ops/s
# Warmup Iteration  15: 5126340.349 ops/s
# Warmup Iteration  16: 4840712.715 ops/s
# Warmup Iteration  17: 5074366.181 ops/s
# Warmup Iteration  18: 4946317.808 ops/s
# Warmup Iteration  19: 5022177.396 ops/s
# Warmup Iteration  20: 5070554.208 ops/s
# Warmup Iteration  21: 4911022.894 ops/s
# Warmup Iteration  22: 5025459.257 ops/s
# Warmup Iteration  23: 4981590.357 ops/s
# Warmup Iteration  24: 4849689.713 ops/s
# Warmup Iteration  25: 4970191.139 ops/s
# Warmup Iteration  26: 4935872.008 ops/s
# Warmup Iteration  27: 3691351.045 ops/s
# Warmup Iteration  28: 5212126.720 ops/s
# Warmup Iteration  29: 4933728.309 ops/s
# Warmup Iteration  30: 5186077.235 ops/s
Iteration   1: 4932007.009 ops/s
Iteration   2: 4878082.314 ops/s
Iteration   3: 5027658.008 ops/s
Iteration   4: 4818868.444 ops/s
Iteration   5: 5174210.451 ops/s
Iteration   6: 4904220.866 ops/s
Iteration   7: 5158036.157 ops/s
Iteration   8: 5097173.045 ops/s
Iteration   9: 4917322.876 ops/s
Iteration  10: 5152290.001 ops/s
Iteration  11: 4840088.105 ops/s
Iteration  12: 5171609.167 ops/s
Iteration  13: 5164228.178 ops/s
Iteration  14: 4767952.777 ops/s
Iteration  15: 4902312.445 ops/s
Iteration  16: 5080802.131 ops/s
Iteration  17: 4897106.297 ops/s
Iteration  18: 5067894.761 ops/s
Iteration  19: 4972593.026 ops/s
Iteration  20: 5042435.877 ops/s
Iteration  21: 4878415.904 ops/s
Iteration  22: 4998306.180 ops/s
Iteration  23: 4955885.209 ops/s
Iteration  24: 4933631.326 ops/s
Iteration  25: 5019058.965 ops/s
Iteration  26: 4947128.329 ops/s
Iteration  27: 4974046.841 ops/s
Iteration  28: 5072149.146 ops/s
Iteration  29: 4924805.189 ops/s
Iteration  30: 4923974.819 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureNone":
  4986476.461 ±(99.9%) 74729.216 ops/s [Average]
  (min, avg, max) = (4767952.777, 4986476.461, 5174210.451), stdev = 111851.181
  CI (99.9%): [4911747.246, 5061205.677] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_backpressureNone  thrpt   30  4986476.461 ± 74729.216  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fusedNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fusedNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 272473.642 ops/s
# Warmup Iteration   2: 1227003.878 ops/s
# Warmup Iteration   3: 1341532.493 ops/s
# Warmup Iteration   4: 1655895.340 ops/s
# Warmup Iteration   5: 1641959.722 ops/s
# Warmup Iteration   6: 1630319.340 ops/s
# Warmup Iteration   7: 1662449.354 ops/s
# Warmup Iteration   8: 1593903.150 ops/s
# Warmup Iteration   9: 1690941.645 ops/s
# Warmup Iteration  10: 1610782.305 ops/s
# Warmup Iteration  11: 1611726.307 ops/s
# Warmup Iteration  12: 1641394.687 ops/s
# Warmup Iteration  13: 1629361.518 ops/s
# Warmup Iteration  14: 1684591.681 ops/s
# Warmup Iteration  15: 1592454.000 ops/s
# Warmup Iteration  16: 1659998.697 ops/s
# Warmup Iteration  17: 1632190.424 ops/s
# Warmup Iteration  18: 1675259.477 ops/s
# Warmup Iteration  19: 1645688.221 ops/s
# Warmup Iteration  20: 1627774.359 ops/s
# Warmup Iteration  21: 1670146.985 ops/s
# Warmup Iteration  22: 1617739.306 ops/s
# Warmup Iteration  23: 1670998.458 ops/s
# Warmup Iteration  24: 1606028.210 ops/s
# Warmup Iteration  25: 1616534.391 ops/s
# Warmup Iteration  26: 1696115.045 ops/s
# Warmup Iteration  27: 1655507.754 ops/s
# Warmup Iteration  28: 1608699.060 ops/s
# Warmup Iteration  29: 1670082.066 ops/s
# Warmup Iteration  30: 1617229.064 ops/s
Iteration   1: 1673499.121 ops/s
Iteration   2: 1618417.857 ops/s
Iteration   3: 1617592.242 ops/s
Iteration   4: 1702927.317 ops/s
Iteration   5: 1568655.710 ops/s
Iteration   6: 1626276.811 ops/s
Iteration   7: 1615540.769 ops/s
Iteration   8: 1534552.480 ops/s
Iteration   9: 1682819.981 ops/s
Iteration  10: 1613880.064 ops/s
Iteration  11: 1674032.198 ops/s
Iteration  12: 1590185.468 ops/s
Iteration  13: 1648198.303 ops/s
Iteration  14: 1668040.822 ops/s
Iteration  15: 1602195.668 ops/s
Iteration  16: 1684641.102 ops/s
Iteration  17: 1617129.443 ops/s
Iteration  18: 1616164.246 ops/s
Iteration  19: 1662040.136 ops/s
Iteration  20: 1575097.044 ops/s
Iteration  21: 1620770.411 ops/s
Iteration  22: 1674093.774 ops/s
Iteration  23: 1611651.392 ops/s
Iteration  24: 1649930.346 ops/s
Iteration  25: 1694315.045 ops/s
Iteration  26: 1573754.184 ops/s
Iteration  27: 1718982.471 ops/s
Iteration  28: 1575112.838 ops/s
Iteration  29: 1579904.116 ops/s
Iteration  30: 1641260.771 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_fusedNormal":
  1631055.404 ±(99.9%) 30566.615 ops/s [Average]
  (min, avg, max) = (1534552.480, 1631055.404, 1718982.471), stdev = 45750.674
  CI (99.9%): [1600488.790, 1661622.019] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_fusedNormal  thrpt   30  1631055.404 ± 30566.615  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_fusedReject$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_fusedReject

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 619053.869 ops/s
# Warmup Iteration   2: 2621102.628 ops/s
# Warmup Iteration   3: 3107405.914 ops/s
# Warmup Iteration   4: 3434000.551 ops/s
# Warmup Iteration   5: 3685071.184 ops/s
# Warmup Iteration   6: 3639018.504 ops/s
# Warmup Iteration   7: 3523127.525 ops/s
# Warmup Iteration   8: 3654156.818 ops/s
# Warmup Iteration   9: 3589162.349 ops/s
# Warmup Iteration  10: 3504351.377 ops/s
# Warmup Iteration  11: 3600102.702 ops/s
# Warmup Iteration  12: 3569163.092 ops/s
# Warmup Iteration  13: 3548934.661 ops/s
# Warmup Iteration  14: 3657841.473 ops/s
# Warmup Iteration  15: 3515620.768 ops/s
# Warmup Iteration  16: 3668672.272 ops/s
# Warmup Iteration  17: 3581659.167 ops/s
# Warmup Iteration  18: 3660497.210 ops/s
# Warmup Iteration  19: 3710549.193 ops/s
# Warmup Iteration  20: 3358883.450 ops/s
# Warmup Iteration  21: 3364952.224 ops/s
# Warmup Iteration  22: 3337861.774 ops/s
# Warmup Iteration  23: 3495601.592 ops/s
# Warmup Iteration  24: 3483864.327 ops/s
# Warmup Iteration  25: 3612064.208 ops/s
# Warmup Iteration  26: 3521760.741 ops/s
# Warmup Iteration  27: 3597825.460 ops/s
# Warmup Iteration  28: 3649677.486 ops/s
# Warmup Iteration  29: 3467023.138 ops/s
# Warmup Iteration  30: 3722089.568 ops/s
Iteration   1: 3532255.938 ops/s
Iteration   2: 3521453.722 ops/s
Iteration   3: 3686373.523 ops/s
Iteration   4: 3558199.507 ops/s
Iteration   5: 3662619.637 ops/s
Iteration   6: 3456212.132 ops/s
Iteration   7: 3614086.206 ops/s
Iteration   8: 3658537.426 ops/s
Iteration   9: 3399156.139 ops/s
Iteration  10: 3691465.020 ops/s
Iteration  11: 3476318.185 ops/s
Iteration  12: 3693288.234 ops/s
Iteration  13: 3539309.481 ops/s
Iteration  14: 3530545.882 ops/s
Iteration  15: 3600273.397 ops/s
Iteration  16: 3523792.542 ops/s
Iteration  17: 3644149.188 ops/s
Iteration  18: 3663883.431 ops/s
Iteration  19: 3474290.762 ops/s
Iteration  20: 3617591.364 ops/s
Iteration  21: 3531269.346 ops/s
Iteration  22: 3592689.776 ops/s
Iteration  23: 3519509.708 ops/s
Iteration  24: 3582481.216 ops/s
Iteration  25: 3627152.119 ops/s
Iteration  26: 3564737.543 ops/s
Iteration  27: 3678891.157 ops/s
Iteration  28: 3668944.130 ops/s
Iteration  29: 3495009.625 ops/s
Iteration  30: 3679460.636 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_fusedReject":
  3582798.232 ±(99.9%) 54125.776 ops/s [Average]
  (min, avg, max) = (3399156.139, 3582798.232, 3693288.234), stdev = 81012.920
  CI (99.9%): [3528672.456, 3636924.009] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_fusedReject  thrpt   30  3582798.232 ± 54125.776  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_allPresent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_allPresent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 623683.573 ops/s
# Warmup Iteration   2: 2512122.197 ops/s
# Warmup Iteration   3: 3135069.023 ops/s
# Warmup Iteration   4: 3529389.792 ops/s
# Warmup Iteration   5: 3520858.981 ops/s
# Warmup Iteration   6: 3608306.913 ops/s
# Warmup Iteration   7: 3502007.048 ops/s
# Warmup Iteration   8: 3542106.327 ops/s
# Warmup Iteration   9: 3566992.441 ops/s
# Warmup Iteration  10: 3467777.539 ops/s
# Warmup Iteration  11: 3514894.333 ops/s
# Warmup Iteration  12: 3703760.353 ops/s
# Warmup Iteration  13: 3478765.796 ops/s
# Warmup Iteration  14: 3624656.225 ops/s
# Warmup Iteration  15: 3470492.374 ops/s
# Warmup Iteration  16: 3642314.696 ops/s
# Warmup Iteration  17: 3537384.949 ops/s
# Warmup Iteration  18: 3530774.624 ops/s
# Warmup Iteration  19: 3483813.882 ops/s
# Warmup Iteration  20: 3604037.283 ops/s
# Warmup Iteration  21: 3646990.245 ops/s
# Warmup Iteration  22: 3504122.654 ops/s
# Warmup Iteration  23: 3653349.220 ops/s
# Warmup Iteration  24: 3467069.922 ops/s
# Warmup Iteration  25: 3514932.846 ops/s
# Warmup Iteration  26: 3630932.519 ops/s
# Warmup Iteration  27: 3398425.417 ops/s
# Warmup Iteration  28: 3684271.569 ops/s
# Warmup Iteration  29: 3661088.128 ops/s
# Warmup Iteration  30: 3483653.968 ops/s
Iteration   1: 3566494.916 ops/s
Iteration   2: 3496150.941 ops/s
Iteration   3: 3621395.748 ops/s
Iteration   4: 3580592.089 ops/s
Iteration   5: 3479968.119 ops/s
Iteration   6: 3569803.500 ops/s
Iteration   7: 3618067.574 ops/s
Iteration   8: 3500128.012 ops/s
Iteration   9: 3677147.536 ops/s
Iteration  10: 3403222.623 ops/s
Iteration  11: 3634913.285 ops/s
Iteration  12: 3608019.624 ops/s
Iteration  13: 3525725.528 ops/s
Iteration  14: 3501679.100 ops/s
Iteration  15: 3538600.871 ops/s
Iteration  16: 3620301.338 ops/s
Iteration  17: 3470087.167 ops/s
Iteration  18: 3616604.608 ops/s
Iteration  19: 3455754.057 ops/s
Iteration  20: 3535545.578 ops/s
Iteration  21: 3597315.072 ops/s
Iteration  22: 3473348.967 ops/s
Iteration  23: 3645097.623 ops/s
Iteration  24: 3441914.954 ops/s
Iteration  25: 3681578.728 ops/s
Iteration  26: 3470610.251 ops/s
Iteration  27: 3496477.454 ops/s
Iteration  28: 3684630.672 ops/s
Iteration  29: 3530371.590 ops/s
Iteration  30: 3655375.080 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_allPresent":
  3556564.087 ±(99.9%) 52849.688 ops/s [Average]
  (min, avg, max) = (3403222.623, 3556564.087, 3684630.672), stdev = 79102.930
  CI (99.9%): [3503714.399, 3609413.774] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_allPresent  thrpt   30  3556564.087 ± 52849.688  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalFastPathCancelExact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalFastPathCancelExact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 416382.777 ops/s
# Warmup Iteration   2: 2499225.307 ops/s
# Warmup Iteration   3: 3164759.797 ops/s
# Warmup Iteration   4: 3489124.207 ops/s
# Warmup Iteration   5: 3733670.051 ops/s
# Warmup Iteration   6: 3648741.610 ops/s
# Warmup Iteration   7: 3590791.612 ops/s
# Warmup Iteration   8: 3721785.382 ops/s
# Warmup Iteration   9: 3707980.875 ops/s
# Warmup Iteration  10: 3517632.344 ops/s
# Warmup Iteration  11: 3672815.346 ops/s
# Warmup Iteration  12: 3696495.487 ops/s
# Warmup Iteration  13: 3537214.380 ops/s
# Warmup Iteration  14: 3653189.754 ops/s
# Warmup Iteration  15: 3567256.850 ops/s
# Warmup Iteration  16: 3087125.226 ops/s
# Warmup Iteration  17: 3599108.087 ops/s
# Warmup Iteration  18: 3551480.567 ops/s
# Warmup Iteration  19: 3581812.840 ops/s
# Warmup Iteration  20: 3717941.196 ops/s
# Warmup Iteration  21: 3472371.683 ops/s
# Warmup Iteration  22: 3703386.021 ops/s
# Warmup Iteration  23: 3583006.287 ops/s
# Warmup Iteration  24: 3516652.337 ops/s
# Warmup Iteration  25: 3712991.789 ops/s
# Warmup Iteration  26: 3566110.445 ops/s
# Warmup Iteration  27: 3715777.057 ops/s
# Warmup Iteration  28: 3481372.945 ops/s
# Warmup Iteration  29: 3589619.083 ops/s
# Warmup Iteration  30: 3703103.037 ops/s
Iteration   1: 3646849.269 ops/s
Iteration   2: 3642894.424 ops/s
Iteration   3: 3664186.624 ops/s
Iteration   4: 3578551.822 ops/s
Iteration   5: 3614162.354 ops/s
Iteration   6: 3662340.457 ops/s
Iteration   7: 3607546.494 ops/s
Iteration   8: 3664889.758 ops/s
Iteration   9: 3686839.881 ops/s
Iteration  10: 3694767.370 ops/s
Iteration  11: 3839773.605 ops/s
Iteration  12: 3439806.481 ops/s
Iteration  13: 3668198.844 ops/s
Iteration  14: 3730174.256 ops/s
Iteration  15: 3574856.643 ops/s
Iteration  16: 3516187.092 ops/s
Iteration  17: 3740403.872 ops/s
Iteration  18: 3776958.623 ops/s
Iteration  19: 3540447.175 ops/s
Iteration  20: 3610984.773 ops/s
Iteration  21: 3695434.122 ops/s
Iteration  22: 3665882.941 ops/s
Iteration  23: 3661250.133 ops/s
Iteration  24: 3590683.307 ops/s
Iteration  25: 3679088.304 ops/s
Iteration  26: 3686774.424 ops/s
Iteration  27: 3696413.992 ops/s
Iteration  28: 3539140.517 ops/s
Iteration  29: 3578174.457 ops/s
Iteration  30: 3731814.736 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalFastPathCancelExact":
  3647515.892 ±(99.9%) 54755.220 ops/s [Average]
  (min, avg, max) = (3439806.481, 3647515.892, 3839773.605), stdev = 81955.042
  CI (99.9%): [3592760.671, 3702271.112] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_conditionalFastPathCancelExact  thrpt   30  3647515.892 ± 54755.220  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 456824.309 ops/s
# Warmup Iteration   2: 2395774.087 ops/s
# Warmup Iteration   3: 2805573.052 ops/s
# Warmup Iteration   4: 3305188.693 ops/s
# Warmup Iteration   5: 3409188.162 ops/s
# Warmup Iteration   6: 3218245.370 ops/s
# Warmup Iteration   7: 3184682.995 ops/s
# Warmup Iteration   8: 3360698.246 ops/s
# Warmup Iteration   9: 3401320.079 ops/s
# Warmup Iteration  10: 3199608.321 ops/s
# Warmup Iteration  11: 3254875.200 ops/s
# Warmup Iteration  12: 3397368.533 ops/s
# Warmup Iteration  13: 3227887.499 ops/s
# Warmup Iteration  14: 3340793.078 ops/s
# Warmup Iteration  15: 3205997.893 ops/s
# Warmup Iteration  16: 3335722.503 ops/s
# Warmup Iteration  17: 3328341.414 ops/s
# Warmup Iteration  18: 3143475.334 ops/s
# Warmup Iteration  19: 3348654.059 ops/s
# Warmup Iteration  20: 3157051.302 ops/s
# Warmup Iteration  21: 3263967.512 ops/s
# Warmup Iteration  22: 3180092.529 ops/s
# Warmup Iteration  23: 3280464.677 ops/s
# Warmup Iteration  24: 3284210.811 ops/s
# Warmup Iteration  25: 3131086.035 ops/s
# Warmup Iteration  26: 3300046.978 ops/s
# Warmup Iteration  27: 3172279.464 ops/s
# Warmup Iteration  28: 3348852.151 ops/s
# Warmup Iteration  29: 3216430.772 ops/s
# Warmup Iteration  30: 3281175.624 ops/s
Iteration   1: 3337268.702 ops/s
Iteration   2: 3153623.559 ops/s
Iteration   3: 3261139.450 ops/s
Iteration   4: 3209062.547 ops/s
Iteration   5: 3225414.878 ops/s
Iteration   6: 3343891.454 ops/s
Iteration   7: 3145454.575 ops/s
Iteration   8: 3342539.888 ops/s
Iteration   9: 3336820.793 ops/s
Iteration  10: 3252728.878 ops/s
Iteration  11: 3382351.026 ops/s
Iteration  12: 3270320.952 ops/s
Iteration  13: 3206725.598 ops/s
Iteration  14: 3396676.124 ops/s
Iteration  15: 3267302.001 ops/s
Iteration  16: 3225570.209 ops/s
Iteration  17: 3285069.562 ops/s
Iteration  18: 3293039.287 ops/s
Iteration  19: 3158711.169 ops/s
Iteration  20: 3200028.934 ops/s
Iteration  21: 3204540.554 ops/s
Iteration  22: 3239448.944 ops/s
Iteration  23: 3334839.912 ops/s
Iteration  24: 3168765.733 ops/s
Iteration  25: 3309745.486 ops/s
Iteration  26: 3267256.594 ops/s
Iteration  27: 3270802.749 ops/s
Iteration  28: 3395829.905 ops/s
Iteration  29: 3123684.232 ops/s
Iteration  30: 3402199.041 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mixed":
  3267028.424 ±(99.9%) 53109.683 ops/s [Average]
  (min, avg, max) = (3123684.232, 3267028.424, 3402199.041), stdev = 79492.079
  CI (99.9%): [3213918.741, 3320138.108] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_mixed  thrpt   30  3267028.424 ± 53109.683  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_overflowCrashes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_overflowCrashes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 154494.199 ops/s
# Warmup Iteration   2: 344412.597 ops/s
# Warmup Iteration   3: 392319.646 ops/s
# Warmup Iteration   4: 416822.000 ops/s
# Warmup Iteration   5: 470676.704 ops/s
# Warmup Iteration   6: 458033.281 ops/s
# Warmup Iteration   7: 463997.730 ops/s
# Warmup Iteration   8: 476178.383 ops/s
# Warmup Iteration   9: 446112.291 ops/s
# Warmup Iteration  10: 459189.289 ops/s
# Warmup Iteration  11: 377173.530 ops/s
# Warmup Iteration  12: 457138.677 ops/s
# Warmup Iteration  13: 470888.947 ops/s
# Warmup Iteration  14: 460442.738 ops/s
# Warmup Iteration  15: 478645.113 ops/s
# Warmup Iteration  16: 478252.522 ops/s
# Warmup Iteration  17: 470896.070 ops/s
# Warmup Iteration  18: 488719.721 ops/s
# Warmup Iteration  19: 474939.279 ops/s
# Warmup Iteration  20: 492803.818 ops/s
# Warmup Iteration  21: 493763.732 ops/s
# Warmup Iteration  22: 460206.251 ops/s
# Warmup Iteration  23: 489401.605 ops/s
# Warmup Iteration  24: 478393.911 ops/s
# Warmup Iteration  25: 476060.065 ops/s
# Warmup Iteration  26: 492300.449 ops/s
# Warmup Iteration  27: 449846.468 ops/s
# Warmup Iteration  28: 505081.290 ops/s
# Warmup Iteration  29: 488178.043 ops/s
# Warmup Iteration  30: 475469.734 ops/s
Iteration   1: 486018.617 ops/s
Iteration   2: 479419.340 ops/s
Iteration   3: 496145.316 ops/s
Iteration   4: 501991.134 ops/s
Iteration   5: 479620.330 ops/s
Iteration   6: 485114.284 ops/s
Iteration   7: 487822.650 ops/s
Iteration   8: 474887.214 ops/s
Iteration   9: 490323.384 ops/s
Iteration  10: 487142.475 ops/s
Iteration  11: 476353.825 ops/s
Iteration  12: 481113.812 ops/s
Iteration  13: 469834.366 ops/s
Iteration  14: 490830.223 ops/s
Iteration  15: 483753.518 ops/s
Iteration  16: 486702.209 ops/s
Iteration  17: 491392.872 ops/s
Iteration  18: 476452.020 ops/s
Iteration  19: 501000.225 ops/s
Iteration  20: 503276.931 ops/s
Iteration  21: 487357.820 ops/s
Iteration  22: 479576.044 ops/s
Iteration  23: 514340.836 ops/s
Iteration  24: 468939.803 ops/s
Iteration  25: 484730.172 ops/s
Iteration  26: 485150.109 ops/s
Iteration  27: 491258.272 ops/s
Iteration  28: 484112.923 ops/s
Iteration  29: 505419.325 ops/s
Iteration  30: 479367.905 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_overflowCrashes":
  486981.598 ±(99.9%) 7022.820 ops/s [Average]
  (min, avg, max) = (468939.803, 486981.598, 514340.836), stdev = 10511.428
  CI (99.9%): [479958.778, 494004.419] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_overflowCrashes  thrpt   30  486981.598 ± 7022.820  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_allEmptyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_allEmptyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 785458.570 ops/s
# Warmup Iteration   2: 3820121.182 ops/s
# Warmup Iteration   3: 4849267.214 ops/s
# Warmup Iteration   4: 4812426.686 ops/s
# Warmup Iteration   5: 4870905.490 ops/s
# Warmup Iteration   6: 4631043.482 ops/s
# Warmup Iteration   7: 4244438.322 ops/s
# Warmup Iteration   8: 5085728.930 ops/s
# Warmup Iteration   9: 4759847.319 ops/s
# Warmup Iteration  10: 4930436.006 ops/s
# Warmup Iteration  11: 4766765.211 ops/s
# Warmup Iteration  12: 4911263.343 ops/s
# Warmup Iteration  13: 4847131.977 ops/s
# Warmup Iteration  14: 5045136.722 ops/s
# Warmup Iteration  15: 4868357.599 ops/s
# Warmup Iteration  16: 4750023.838 ops/s
# Warmup Iteration  17: 4979123.104 ops/s
# Warmup Iteration  18: 4797031.199 ops/s
# Warmup Iteration  19: 4975445.035 ops/s
# Warmup Iteration  20: 4861681.442 ops/s
# Warmup Iteration  21: 4950788.452 ops/s
# Warmup Iteration  22: 5065397.428 ops/s
# Warmup Iteration  23: 4805177.678 ops/s
# Warmup Iteration  24: 4929504.287 ops/s
# Warmup Iteration  25: 5036723.370 ops/s
# Warmup Iteration  26: 4822923.101 ops/s
# Warmup Iteration  27: 5098746.637 ops/s
# Warmup Iteration  28: 4803633.996 ops/s
# Warmup Iteration  29: 4831623.218 ops/s
# Warmup Iteration  30: 5056874.990 ops/s
Iteration   1: 4762847.182 ops/s
Iteration   2: 5115136.150 ops/s
Iteration   3: 4945574.406 ops/s
Iteration   4: 4729218.044 ops/s
Iteration   5: 4973903.456 ops/s
Iteration   6: 4940834.388 ops/s
Iteration   7: 4841613.547 ops/s
Iteration   8: 4966185.770 ops/s
Iteration   9: 4867083.060 ops/s
Iteration  10: 4903773.281 ops/s
Iteration  11: 4978687.579 ops/s
Iteration  12: 4782599.546 ops/s
Iteration  13: 4921538.708 ops/s
Iteration  14: 4984537.828 ops/s
Iteration  15: 4815790.800 ops/s
Iteration  16: 5008843.612 ops/s
Iteration  17: 4940940.277 ops/s
Iteration  18: 4646974.413 ops/s
Iteration  19: 4943635.567 ops/s
Iteration  20: 4848390.217 ops/s
Iteration  21: 5011706.798 ops/s
Iteration  22: 4728156.411 ops/s
Iteration  23: 5027064.017 ops/s
Iteration  24: 4879840.201 ops/s
Iteration  25: 4827764.613 ops/s
Iteration  26: 4797663.905 ops/s
Iteration  27: 4836741.783 ops/s
Iteration  28: 5039490.452 ops/s
Iteration  29: 4820457.902 ops/s
Iteration  30: 4820664.871 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_allEmptyConditional":
  4890255.293 ±(99.9%) 71982.101 ops/s [Average]
  (min, avg, max) = (4646974.413, 4890255.293, 5115136.150), stdev = 107739.429
  CI (99.9%): [4818273.192, 4962237.394] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_allEmptyConditional  thrpt   30  4890255.293 ± 71982.101  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservableTest._Benchmark.benchmark_all$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservableTest._Benchmark.benchmark_all

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19359.429 ops/s
# Warmup Iteration   2: 235081.931 ops/s
# Warmup Iteration   3: 412131.159 ops/s
# Warmup Iteration   4: 445201.972 ops/s
# Warmup Iteration   5: 409004.761 ops/s
# Warmup Iteration   6: 340036.534 ops/s
# Warmup Iteration   7: 458577.016 ops/s
# Warmup Iteration   8: 482836.317 ops/s
# Warmup Iteration   9: 459946.494 ops/s
# Warmup Iteration  10: 470724.788 ops/s
# Warmup Iteration  11: 447724.364 ops/s
# Warmup Iteration  12: 459748.546 ops/s
# Warmup Iteration  13: 478185.496 ops/s
# Warmup Iteration  14: 455739.859 ops/s
# Warmup Iteration  15: 470698.937 ops/s
# Warmup Iteration  16: 473289.200 ops/s
# Warmup Iteration  17: 460753.666 ops/s
# Warmup Iteration  18: 450241.315 ops/s
# Warmup Iteration  19: 480702.384 ops/s
# Warmup Iteration  20: 446130.451 ops/s
# Warmup Iteration  21: 476102.832 ops/s
# Warmup Iteration  22: 450701.963 ops/s
# Warmup Iteration  23: 466558.771 ops/s
# Warmup Iteration  24: 470742.794 ops/s
# Warmup Iteration  25: 455216.523 ops/s
# Warmup Iteration  26: 461022.421 ops/s
# Warmup Iteration  27: 461548.011 ops/s
# Warmup Iteration  28: 467131.159 ops/s
# Warmup Iteration  29: 460043.107 ops/s
# Warmup Iteration  30: 472467.769 ops/s
Iteration   1: 458074.176 ops/s
Iteration   2: 475239.196 ops/s
Iteration   3: 457280.339 ops/s
Iteration   4: 462990.731 ops/s
Iteration   5: 468748.338 ops/s
Iteration   6: 454879.161 ops/s
Iteration   7: 466903.778 ops/s
Iteration   8: 465918.325 ops/s
Iteration   9: 474679.467 ops/s
Iteration  10: 477410.065 ops/s
Iteration  11: 459919.724 ops/s
Iteration  12: 466684.382 ops/s
Iteration  13: 460655.959 ops/s
Iteration  14: 451282.868 ops/s
Iteration  15: 475499.118 ops/s
Iteration  16: 482941.711 ops/s
Iteration  17: 456963.105 ops/s
Iteration  18: 454862.522 ops/s
Iteration  19: 469589.861 ops/s
Iteration  20: 457956.214 ops/s
Iteration  21: 459330.513 ops/s
Iteration  22: 468133.236 ops/s
Iteration  23: 476337.084 ops/s
Iteration  24: 449241.236 ops/s
Iteration  25: 465383.266 ops/s
Iteration  26: 477225.494 ops/s
Iteration  27: 460239.234 ops/s
Iteration  28: 473870.950 ops/s
Iteration  29: 451577.016 ops/s
Iteration  30: 464240.688 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservableTest._Benchmark.benchmark_all":
  464801.925 ±(99.9%) 6001.893 ops/s [Average]
  (min, avg, max) = (449241.236, 464801.925, 482941.711), stdev = 8983.351
  CI (99.9%): [458800.033, 470803.818] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FlowableFromObservableTest._Benchmark.benchmark_all  thrpt   30  464801.925 ± 6001.893  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_successError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_successError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32909.765 ops/s
# Warmup Iteration   2: 137184.984 ops/s
# Warmup Iteration   3: 369968.683 ops/s
# Warmup Iteration   4: 354287.807 ops/s
# Warmup Iteration   5: 413856.466 ops/s
# Warmup Iteration   6: 404310.903 ops/s
# Warmup Iteration   7: 413737.512 ops/s
# Warmup Iteration   8: 439060.036 ops/s
# Warmup Iteration   9: 411984.749 ops/s
# Warmup Iteration  10: 431053.758 ops/s
# Warmup Iteration  11: 433837.592 ops/s
# Warmup Iteration  12: 412646.934 ops/s
# Warmup Iteration  13: 418641.663 ops/s
# Warmup Iteration  14: 407236.978 ops/s
# Warmup Iteration  15: 430392.213 ops/s
# Warmup Iteration  16: 410277.956 ops/s
# Warmup Iteration  17: 416689.294 ops/s
# Warmup Iteration  18: 409558.682 ops/s
# Warmup Iteration  19: 440553.715 ops/s
# Warmup Iteration  20: 443438.263 ops/s
# Warmup Iteration  21: 420043.911 ops/s
# Warmup Iteration  22: 450934.007 ops/s
# Warmup Iteration  23: 425054.666 ops/s
# Warmup Iteration  24: 420008.234 ops/s
# Warmup Iteration  25: 448776.693 ops/s
# Warmup Iteration  26: 428783.594 ops/s
# Warmup Iteration  27: 442099.407 ops/s
# Warmup Iteration  28: 426261.511 ops/s
# Warmup Iteration  29: 434585.062 ops/s
# Warmup Iteration  30: 441601.127 ops/s
Iteration   1: 422266.947 ops/s
Iteration   2: 448791.151 ops/s
Iteration   3: 425822.301 ops/s
Iteration   4: 442438.045 ops/s
Iteration   5: 426815.642 ops/s
Iteration   6: 426822.636 ops/s
Iteration   7: 429887.198 ops/s
Iteration   8: 449436.770 ops/s
Iteration   9: 424617.133 ops/s
Iteration  10: 447576.426 ops/s
Iteration  11: 439377.851 ops/s
Iteration  12: 433141.919 ops/s
Iteration  13: 439178.399 ops/s
Iteration  14: 429036.383 ops/s
Iteration  15: 425630.837 ops/s
Iteration  16: 418197.506 ops/s
Iteration  17: 438586.080 ops/s
Iteration  18: 428944.213 ops/s
Iteration  19: 432021.257 ops/s
Iteration  20: 442060.158 ops/s
Iteration  21: 422689.868 ops/s
Iteration  22: 435337.744 ops/s
Iteration  23: 423450.706 ops/s
Iteration  24: 443641.383 ops/s
Iteration  25: 433252.020 ops/s
Iteration  26: 437940.552 ops/s
Iteration  27: 438142.769 ops/s
Iteration  28: 415966.971 ops/s
Iteration  29: 454875.125 ops/s
Iteration  30: 422611.795 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_successError":
  433285.259 ±(99.9%) 6662.777 ops/s [Average]
  (min, avg, max) = (415966.971, 433285.259, 454875.125), stdev = 9972.532
  CI (99.9%): [426622.482, 439948.037] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_successError  thrpt   30  433285.259 ± 6662.777  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnUnsubscribeTest._Benchmark.benchmark_noReentrantDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnUnsubscribeTest._Benchmark.benchmark_noReentrantDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 251684.251 ops/s
# Warmup Iteration   2: 1877969.182 ops/s
# Warmup Iteration   3: 2528056.067 ops/s
# Warmup Iteration   4: 2797737.256 ops/s
# Warmup Iteration   5: 3331530.420 ops/s
# Warmup Iteration   6: 3347558.683 ops/s
# Warmup Iteration   7: 3173041.546 ops/s
# Warmup Iteration   8: 3375770.511 ops/s
# Warmup Iteration   9: 3184862.265 ops/s
# Warmup Iteration  10: 3361145.611 ops/s
# Warmup Iteration  11: 3347682.389 ops/s
# Warmup Iteration  12: 3229088.286 ops/s
# Warmup Iteration  13: 3359298.191 ops/s
# Warmup Iteration  14: 3163945.221 ops/s
# Warmup Iteration  15: 3287977.626 ops/s
# Warmup Iteration  16: 3242990.322 ops/s
# Warmup Iteration  17: 3197115.898 ops/s
# Warmup Iteration  18: 3297401.365 ops/s
# Warmup Iteration  19: 3228698.280 ops/s
# Warmup Iteration  20: 3339255.892 ops/s
# Warmup Iteration  21: 3154002.949 ops/s
# Warmup Iteration  22: 3170273.027 ops/s
# Warmup Iteration  23: 3427272.751 ops/s
# Warmup Iteration  24: 3231919.185 ops/s
# Warmup Iteration  25: 3199311.806 ops/s
# Warmup Iteration  26: 3321513.704 ops/s
# Warmup Iteration  27: 3160300.741 ops/s
# Warmup Iteration  28: 3304628.213 ops/s
# Warmup Iteration  29: 3194908.159 ops/s
# Warmup Iteration  30: 3203860.234 ops/s
Iteration   1: 3299253.919 ops/s
Iteration   2: 3141432.286 ops/s
Iteration   3: 3402991.989 ops/s
Iteration   4: 3205669.587 ops/s
Iteration   5: 3212870.529 ops/s
Iteration   6: 3382224.053 ops/s
Iteration   7: 3263965.068 ops/s
Iteration   8: 3344607.654 ops/s
Iteration   9: 3192276.365 ops/s
Iteration  10: 3368655.192 ops/s
Iteration  11: 3270379.150 ops/s
Iteration  12: 3345735.404 ops/s
Iteration  13: 3319333.301 ops/s
Iteration  14: 3202592.360 ops/s
Iteration  15: 3248739.392 ops/s
Iteration  16: 3302013.972 ops/s
Iteration  17: 3279191.152 ops/s
Iteration  18: 3327182.172 ops/s
Iteration  19: 3224260.907 ops/s
Iteration  20: 3397695.610 ops/s
Iteration  21: 3142596.653 ops/s
Iteration  22: 3411701.540 ops/s
Iteration  23: 3326898.200 ops/s
Iteration  24: 3199989.786 ops/s
Iteration  25: 3373307.716 ops/s
Iteration  26: 3183939.700 ops/s
Iteration  27: 3458819.015 ops/s
Iteration  28: 3184709.195 ops/s
Iteration  29: 3285428.077 ops/s
Iteration  30: 3314819.098 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnUnsubscribeTest._Benchmark.benchmark_noReentrantDispose":
  3287109.301 ±(99.9%) 57030.844 ops/s [Average]
  (min, avg, max) = (3141432.286, 3287109.301, 3458819.015), stdev = 85361.090
  CI (99.9%): [3230078.457, 3344140.146] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableDoOnUnsubscribeTest._Benchmark.benchmark_noReentrantDispose  thrpt   30  3287109.301 ± 57030.844  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_collectionSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_collectionSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 119289.940 ops/s
# Warmup Iteration   2: 425775.236 ops/s
# Warmup Iteration   3: 461936.754 ops/s
# Warmup Iteration   4: 512714.324 ops/s
# Warmup Iteration   5: 432579.613 ops/s
# Warmup Iteration   6: 515321.130 ops/s
# Warmup Iteration   7: 515532.241 ops/s
# Warmup Iteration   8: 495615.907 ops/s
# Warmup Iteration   9: 517395.515 ops/s
# Warmup Iteration  10: 495198.680 ops/s
# Warmup Iteration  11: 511913.204 ops/s
# Warmup Iteration  12: 502222.717 ops/s
# Warmup Iteration  13: 517199.452 ops/s
# Warmup Iteration  14: 512636.885 ops/s
# Warmup Iteration  15: 492250.236 ops/s
# Warmup Iteration  16: 516629.656 ops/s
# Warmup Iteration  17: 532747.363 ops/s
# Warmup Iteration  18: 506079.205 ops/s
# Warmup Iteration  19: 549012.090 ops/s
# Warmup Iteration  20: 509820.598 ops/s
# Warmup Iteration  21: 533698.499 ops/s
# Warmup Iteration  22: 509836.511 ops/s
# Warmup Iteration  23: 532497.595 ops/s
# Warmup Iteration  24: 523881.192 ops/s
# Warmup Iteration  25: 506885.893 ops/s
# Warmup Iteration  26: 547764.367 ops/s
# Warmup Iteration  27: 514907.344 ops/s
# Warmup Iteration  28: 534447.336 ops/s
# Warmup Iteration  29: 525097.549 ops/s
# Warmup Iteration  30: 525154.883 ops/s
Iteration   1: 555787.361 ops/s
Iteration   2: 511900.763 ops/s
Iteration   3: 522636.953 ops/s
Iteration   4: 519136.726 ops/s
Iteration   5: 527390.981 ops/s
Iteration   6: 547135.511 ops/s
Iteration   7: 517403.502 ops/s
Iteration   8: 549831.329 ops/s
Iteration   9: 505771.784 ops/s
Iteration  10: 518905.218 ops/s
Iteration  11: 539552.042 ops/s
Iteration  12: 520567.316 ops/s
Iteration  13: 533674.578 ops/s
Iteration  14: 535515.140 ops/s
Iteration  15: 533651.613 ops/s
Iteration  16: 509890.634 ops/s
Iteration  17: 535865.833 ops/s
Iteration  18: 515441.198 ops/s
Iteration  19: 538319.600 ops/s
Iteration  20: 523323.912 ops/s
Iteration  21: 527818.239 ops/s
Iteration  22: 521565.875 ops/s
Iteration  23: 523940.612 ops/s
Iteration  24: 538650.059 ops/s
Iteration  25: 520376.354 ops/s
Iteration  26: 534190.424 ops/s
Iteration  27: 428274.714 ops/s
Iteration  28: 528510.035 ops/s
Iteration  29: 523602.652 ops/s
Iteration  30: 523320.509 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_collectionSupplierReturnsNull":
  524398.382 ±(99.9%) 14426.498 ops/s [Average]
  (min, avg, max) = (428274.714, 524398.382, 555787.361), stdev = 21592.905
  CI (99.9%): [509971.884, 538824.880] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
FlowableToListTest._Benchmark.benchmark_collectionSupplierReturnsNull  thrpt   30  524398.382 ± 14426.498  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_delaySupplierSimple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_delaySupplierSimple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.787 ops/s
# Warmup Iteration   2: 32522.756 ops/s
# Warmup Iteration   3: 99000.697 ops/s
# Warmup Iteration   4: 152888.284 ops/s
# Warmup Iteration   5: 230093.402 ops/s
# Warmup Iteration   6: 477695.604 ops/s
# Warmup Iteration   7: 507593.324 ops/s
# Warmup Iteration   8: 496360.235 ops/s
# Warmup Iteration   9: 475865.685 ops/s
# Warmup Iteration  10: 502488.282 ops/s
# Warmup Iteration  11: 477100.795 ops/s
# Warmup Iteration  12: 514040.903 ops/s
# Warmup Iteration  13: 501258.334 ops/s
# Warmup Iteration  14: 495653.151 ops/s
# Warmup Iteration  15: 503475.938 ops/s
# Warmup Iteration  16: 483453.571 ops/s
# Warmup Iteration  17: 490877.056 ops/s
# Warmup Iteration  18: 506039.887 ops/s
# Warmup Iteration  19: 487712.508 ops/s
# Warmup Iteration  20: 499228.447 ops/s
# Warmup Iteration  21: 478665.787 ops/s
# Warmup Iteration  22: 486082.147 ops/s
# Warmup Iteration  23: 502350.170 ops/s
# Warmup Iteration  24: 478682.024 ops/s
# Warmup Iteration  25: 485653.508 ops/s
# Warmup Iteration  26: 509269.747 ops/s
# Warmup Iteration  27: 478363.765 ops/s
# Warmup Iteration  28: 495775.947 ops/s
# Warmup Iteration  29: 513990.714 ops/s
# Warmup Iteration  30: 482138.081 ops/s
Iteration   1: 488264.428 ops/s
Iteration   2: 479581.615 ops/s
Iteration   3: 503461.953 ops/s
Iteration   4: 487371.908 ops/s
Iteration   5: 478853.965 ops/s
Iteration   6: 522391.526 ops/s
Iteration   7: 481702.122 ops/s
Iteration   8: 504011.042 ops/s
Iteration   9: 478206.615 ops/s
Iteration  10: 505314.411 ops/s
Iteration  11: 493042.892 ops/s
Iteration  12: 492523.028 ops/s
Iteration  13: 509326.200 ops/s
Iteration  14: 507536.028 ops/s
Iteration  15: 495249.939 ops/s
Iteration  16: 488694.146 ops/s
Iteration  17: 500638.115 ops/s
Iteration  18: 488386.671 ops/s
Iteration  19: 484206.475 ops/s
Iteration  20: 510235.906 ops/s
Iteration  21: 484338.428 ops/s
Iteration  22: 512417.506 ops/s
Iteration  23: 480631.272 ops/s
Iteration  24: 507512.719 ops/s
Iteration  25: 494372.145 ops/s
Iteration  26: 499660.260 ops/s
Iteration  27: 488575.942 ops/s
Iteration  28: 514728.427 ops/s
Iteration  29: 468115.923 ops/s
Iteration  30: 500355.225 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_delaySupplierSimple":
  494990.228 ±(99.9%) 8676.375 ops/s [Average]
  (min, avg, max) = (468115.923, 494990.228, 522391.526), stdev = 12986.390
  CI (99.9%): [486313.853, 503666.602] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableDelayTest._Benchmark.benchmark_delaySupplierSimple  thrpt   30  494990.228 ± 8676.375  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetryUntil$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetryUntil

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42528.432 ops/s
# Warmup Iteration   2: 124780.823 ops/s
# Warmup Iteration   3: 135298.811 ops/s
# Warmup Iteration   4: 132612.518 ops/s
# Warmup Iteration   5: 140699.255 ops/s
# Warmup Iteration   6: 144635.064 ops/s
# Warmup Iteration   7: 120330.582 ops/s
# Warmup Iteration   8: 150405.111 ops/s
# Warmup Iteration   9: 139096.420 ops/s
# Warmup Iteration  10: 146068.729 ops/s
# Warmup Iteration  11: 144403.600 ops/s
# Warmup Iteration  12: 143681.324 ops/s
# Warmup Iteration  13: 151152.553 ops/s
# Warmup Iteration  14: 140435.906 ops/s
# Warmup Iteration  15: 149442.036 ops/s
# Warmup Iteration  16: 148465.197 ops/s
# Warmup Iteration  17: 145694.579 ops/s
# Warmup Iteration  18: 156349.319 ops/s
# Warmup Iteration  19: 150601.937 ops/s
# Warmup Iteration  20: 154345.502 ops/s
# Warmup Iteration  21: 155529.122 ops/s
# Warmup Iteration  22: 150278.287 ops/s
# Warmup Iteration  23: 156187.334 ops/s
# Warmup Iteration  24: 157153.680 ops/s
# Warmup Iteration  25: 152362.838 ops/s
# Warmup Iteration  26: 150593.732 ops/s
# Warmup Iteration  27: 154893.004 ops/s
# Warmup Iteration  28: 155376.709 ops/s
# Warmup Iteration  29: 148374.626 ops/s
# Warmup Iteration  30: 158206.869 ops/s
Iteration   1: 153581.603 ops/s
Iteration   2: 151341.666 ops/s
Iteration   3: 154419.972 ops/s
Iteration   4: 152990.230 ops/s
Iteration   5: 151259.350 ops/s
Iteration   6: 150156.919 ops/s
Iteration   7: 154666.646 ops/s
Iteration   8: 156905.014 ops/s
Iteration   9: 156660.924 ops/s
Iteration  10: 150367.545 ops/s
Iteration  11: 150429.355 ops/s
Iteration  12: 151958.398 ops/s
Iteration  13: 150451.085 ops/s
Iteration  14: 150782.525 ops/s
Iteration  15: 150670.399 ops/s
Iteration  16: 156618.000 ops/s
Iteration  17: 149318.121 ops/s
Iteration  18: 151042.825 ops/s
Iteration  19: 153496.136 ops/s
Iteration  20: 151461.125 ops/s
Iteration  21: 159840.258 ops/s
Iteration  22: 120935.033 ops/s
Iteration  23: 157654.635 ops/s
Iteration  24: 145474.934 ops/s
Iteration  25: 152884.278 ops/s
Iteration  26: 157095.114 ops/s
Iteration  27: 155235.209 ops/s
Iteration  28: 150916.688 ops/s
Iteration  29: 145470.621 ops/s
Iteration  30: 161798.438 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetryUntil":
  151862.768 ±(99.9%) 4620.285 ops/s [Average]
  (min, avg, max) = (120935.033, 151862.768, 161798.438), stdev = 6915.426
  CI (99.9%): [147242.483, 156483.054] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetryUntil  thrpt   30  151862.768 ± 4620.285  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 238775.851 ops/s
# Warmup Iteration   2: 1613766.071 ops/s
# Warmup Iteration   3: 1643304.350 ops/s
# Warmup Iteration   4: 2141949.643 ops/s
# Warmup Iteration   5: 2112569.509 ops/s
# Warmup Iteration   6: 2103630.293 ops/s
# Warmup Iteration   7: 2198212.238 ops/s
# Warmup Iteration   8: 2150444.458 ops/s
# Warmup Iteration   9: 2214165.984 ops/s
# Warmup Iteration  10: 2197483.144 ops/s
# Warmup Iteration  11: 2076078.989 ops/s
# Warmup Iteration  12: 2105047.382 ops/s
# Warmup Iteration  13: 2181328.949 ops/s
# Warmup Iteration  14: 2096356.223 ops/s
# Warmup Iteration  15: 2103475.515 ops/s
# Warmup Iteration  16: 2197432.590 ops/s
# Warmup Iteration  17: 2177568.129 ops/s
# Warmup Iteration  18: 2156037.405 ops/s
# Warmup Iteration  19: 2141811.197 ops/s
# Warmup Iteration  20: 2202113.416 ops/s
# Warmup Iteration  21: 2138689.904 ops/s
# Warmup Iteration  22: 2113334.208 ops/s
# Warmup Iteration  23: 2155193.578 ops/s
# Warmup Iteration  24: 2046134.644 ops/s
# Warmup Iteration  25: 2067455.989 ops/s
# Warmup Iteration  26: 2146726.071 ops/s
# Warmup Iteration  27: 2144159.061 ops/s
# Warmup Iteration  28: 2253065.415 ops/s
# Warmup Iteration  29: 2078476.395 ops/s
# Warmup Iteration  30: 2193638.218 ops/s
Iteration   1: 2117839.038 ops/s
Iteration   2: 2164074.011 ops/s
Iteration   3: 2228963.690 ops/s
Iteration   4: 2098969.415 ops/s
Iteration   5: 2008760.528 ops/s
Iteration   6: 2232269.579 ops/s
Iteration   7: 2117445.384 ops/s
Iteration   8: 2149215.414 ops/s
Iteration   9: 2139385.638 ops/s
Iteration  10: 2118886.746 ops/s
Iteration  11: 2212122.964 ops/s
Iteration  12: 2147924.968 ops/s
Iteration  13: 2235052.100 ops/s
Iteration  14: 2133275.028 ops/s
Iteration  15: 2074359.440 ops/s
Iteration  16: 2156678.259 ops/s
Iteration  17: 2149819.278 ops/s
Iteration  18: 2091814.643 ops/s
Iteration  19: 2185562.078 ops/s
Iteration  20: 2078576.128 ops/s
Iteration  21: 2146238.431 ops/s
Iteration  22: 2140819.347 ops/s
Iteration  23: 2144072.934 ops/s
Iteration  24: 2221243.992 ops/s
Iteration  25: 2095975.387 ops/s
Iteration  26: 2247521.894 ops/s
Iteration  27: 2163092.091 ops/s
Iteration  28: 2122602.765 ops/s
Iteration  29: 2062206.363 ops/s
Iteration  30: 2250383.942 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_take":
  2147838.382 ±(99.9%) 39629.069 ops/s [Average]
  (min, avg, max) = (2008760.528, 2147838.382, 2250383.942), stdev = 59314.930
  CI (99.9%): [2108209.313, 2187467.452] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_take  thrpt   30  2147838.382 ± 39629.069  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 212492.197 ops/s
# Warmup Iteration   2: 513992.950 ops/s
# Warmup Iteration   3: 583432.776 ops/s
# Warmup Iteration   4: 628675.634 ops/s
# Warmup Iteration   5: 608334.568 ops/s
# Warmup Iteration   6: 642363.811 ops/s
# Warmup Iteration   7: 665929.871 ops/s
# Warmup Iteration   8: 678929.532 ops/s
# Warmup Iteration   9: 640983.708 ops/s
# Warmup Iteration  10: 673914.960 ops/s
# Warmup Iteration  11: 644678.008 ops/s
# Warmup Iteration  12: 668009.254 ops/s
# Warmup Iteration  13: 649858.106 ops/s
# Warmup Iteration  14: 669683.748 ops/s
# Warmup Iteration  15: 662770.393 ops/s
# Warmup Iteration  16: 659809.743 ops/s
# Warmup Iteration  17: 722472.314 ops/s
# Warmup Iteration  18: 718760.548 ops/s
# Warmup Iteration  19: 693424.527 ops/s
# Warmup Iteration  20: 691924.775 ops/s
# Warmup Iteration  21: 691332.619 ops/s
# Warmup Iteration  22: 720400.850 ops/s
# Warmup Iteration  23: 692298.556 ops/s
# Warmup Iteration  24: 691930.540 ops/s
# Warmup Iteration  25: 708799.639 ops/s
# Warmup Iteration  26: 678414.916 ops/s
# Warmup Iteration  27: 716966.953 ops/s
# Warmup Iteration  28: 679473.510 ops/s
# Warmup Iteration  29: 719406.973 ops/s
# Warmup Iteration  30: 726464.796 ops/s
Iteration   1: 678577.066 ops/s
Iteration   2: 698344.984 ops/s
Iteration   3: 707219.815 ops/s
Iteration   4: 724575.541 ops/s
Iteration   5: 716857.532 ops/s
Iteration   6: 689776.148 ops/s
Iteration   7: 714665.374 ops/s
Iteration   8: 687014.378 ops/s
Iteration   9: 716258.099 ops/s
Iteration  10: 693650.814 ops/s
Iteration  11: 685021.449 ops/s
Iteration  12: 699700.873 ops/s
Iteration  13: 681955.825 ops/s
Iteration  14: 714310.553 ops/s
Iteration  15: 671914.698 ops/s
Iteration  16: 598634.568 ops/s
Iteration  17: 569800.593 ops/s
Iteration  18: 700234.060 ops/s
Iteration  19: 683428.945 ops/s
Iteration  20: 714830.795 ops/s
Iteration  21: 681913.890 ops/s
Iteration  22: 720481.738 ops/s
Iteration  23: 697125.516 ops/s
Iteration  24: 682300.120 ops/s
Iteration  25: 731891.418 ops/s
Iteration  26: 681597.092 ops/s
Iteration  27: 679982.839 ops/s
Iteration  28: 720184.441 ops/s
Iteration  29: 682421.595 ops/s
Iteration  30: 693703.773 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mainError":
  690612.484 ±(99.9%) 22330.653 ops/s [Average]
  (min, avg, max) = (569800.593, 690612.484, 731891.418), stdev = 33423.473
  CI (99.9%): [668281.831, 712943.138] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_mainError  thrpt   30  690612.484 ± 22330.653  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_basicAsyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_basicAsyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32662.156 ops/s
# Warmup Iteration   2: 471314.713 ops/s
# Warmup Iteration   3: 615640.116 ops/s
# Warmup Iteration   4: 700370.650 ops/s
# Warmup Iteration   5: 749528.909 ops/s
# Warmup Iteration   6: 713128.904 ops/s
# Warmup Iteration   7: 720384.297 ops/s
# Warmup Iteration   8: 733416.163 ops/s
# Warmup Iteration   9: 725912.383 ops/s
# Warmup Iteration  10: 707993.190 ops/s
# Warmup Iteration  11: 715285.161 ops/s
# Warmup Iteration  12: 714008.624 ops/s
# Warmup Iteration  13: 752447.783 ops/s
# Warmup Iteration  14: 695292.798 ops/s
# Warmup Iteration  15: 744499.589 ops/s
# Warmup Iteration  16: 749469.788 ops/s
# Warmup Iteration  17: 737410.830 ops/s
# Warmup Iteration  18: 728564.544 ops/s
# Warmup Iteration  19: 714286.633 ops/s
# Warmup Iteration  20: 760619.708 ops/s
# Warmup Iteration  21: 687048.827 ops/s
# Warmup Iteration  22: 749688.335 ops/s
# Warmup Iteration  23: 722509.639 ops/s
# Warmup Iteration  24: 786225.221 ops/s
# Warmup Iteration  25: 744710.816 ops/s
# Warmup Iteration  26: 729162.471 ops/s
# Warmup Iteration  27: 732696.418 ops/s
# Warmup Iteration  28: 731104.645 ops/s
# Warmup Iteration  29: 761305.425 ops/s
# Warmup Iteration  30: 775787.615 ops/s
Iteration   1: 706344.014 ops/s
Iteration   2: 769113.023 ops/s
Iteration   3: 759672.238 ops/s
Iteration   4: 763148.994 ops/s
Iteration   5: 753560.353 ops/s
Iteration   6: 715986.457 ops/s
Iteration   7: 740580.626 ops/s
Iteration   8: 745015.470 ops/s
Iteration   9: 765517.126 ops/s
Iteration  10: 775005.659 ops/s
Iteration  11: 731473.748 ops/s
Iteration  12: 745312.372 ops/s
Iteration  13: 749538.928 ops/s
Iteration  14: 712996.089 ops/s
Iteration  15: 709278.209 ops/s
Iteration  16: 746582.171 ops/s
Iteration  17: 733999.265 ops/s
Iteration  18: 764767.214 ops/s
Iteration  19: 735075.355 ops/s
Iteration  20: 757846.730 ops/s
Iteration  21: 774558.728 ops/s
Iteration  22: 733434.618 ops/s
Iteration  23: 747195.040 ops/s
Iteration  24: 761656.114 ops/s
Iteration  25: 746646.214 ops/s
Iteration  26: 750899.134 ops/s
Iteration  27: 769521.116 ops/s
Iteration  28: 708743.624 ops/s
Iteration  29: 815446.842 ops/s
Iteration  30: 766475.399 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_basicAsyncFused":
  748513.029 ±(99.9%) 15914.641 ops/s [Average]
  (min, avg, max) = (706344.014, 748513.029, 815446.842), stdev = 23820.287
  CI (99.9%): [732598.388, 764427.670] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_basicAsyncFused  thrpt   30  748513.029 ± 15914.641  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatPublisherDelayErrorPrefetch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatPublisherDelayErrorPrefetch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29385.345 ops/s
# Warmup Iteration   2: 131491.162 ops/s
# Warmup Iteration   3: 259766.434 ops/s
# Warmup Iteration   4: 244949.210 ops/s
# Warmup Iteration   5: 259805.353 ops/s
# Warmup Iteration   6: 243375.035 ops/s
# Warmup Iteration   7: 254527.939 ops/s
# Warmup Iteration   8: 258106.673 ops/s
# Warmup Iteration   9: 248400.486 ops/s
# Warmup Iteration  10: 250800.319 ops/s
# Warmup Iteration  11: 257774.052 ops/s
# Warmup Iteration  12: 243708.646 ops/s
# Warmup Iteration  13: 255080.896 ops/s
# Warmup Iteration  14: 254593.640 ops/s
# Warmup Iteration  15: 256995.244 ops/s
# Warmup Iteration  16: 261051.506 ops/s
# Warmup Iteration  17: 263257.367 ops/s
# Warmup Iteration  18: 260929.724 ops/s
# Warmup Iteration  19: 267168.324 ops/s
# Warmup Iteration  20: 267453.468 ops/s
# Warmup Iteration  21: 273086.314 ops/s
# Warmup Iteration  22: 263889.337 ops/s
# Warmup Iteration  23: 265576.788 ops/s
# Warmup Iteration  24: 269188.932 ops/s
# Warmup Iteration  25: 260462.401 ops/s
# Warmup Iteration  26: 272918.788 ops/s
# Warmup Iteration  27: 259538.575 ops/s
# Warmup Iteration  28: 272558.710 ops/s
# Warmup Iteration  29: 276847.120 ops/s
# Warmup Iteration  30: 263496.137 ops/s
Iteration   1: 261281.226 ops/s
Iteration   2: 275780.350 ops/s
Iteration   3: 260013.817 ops/s
Iteration   4: 277437.419 ops/s
Iteration   5: 258704.723 ops/s
Iteration   6: 271337.205 ops/s
Iteration   7: 267356.264 ops/s
Iteration   8: 253713.606 ops/s
Iteration   9: 260360.583 ops/s
Iteration  10: 267649.297 ops/s
Iteration  11: 223198.589 ops/s
Iteration  12: 267565.094 ops/s
Iteration  13: 273009.610 ops/s
Iteration  14: 267685.579 ops/s
Iteration  15: 271251.662 ops/s
Iteration  16: 263734.911 ops/s
Iteration  17: 267141.761 ops/s
Iteration  18: 267426.195 ops/s
Iteration  19: 271165.684 ops/s
Iteration  20: 272634.304 ops/s
Iteration  21: 263275.776 ops/s
Iteration  22: 272095.796 ops/s
Iteration  23: 275287.044 ops/s
Iteration  24: 265367.770 ops/s
Iteration  25: 272039.462 ops/s
Iteration  26: 263702.797 ops/s
Iteration  27: 278392.175 ops/s
Iteration  28: 269111.073 ops/s
Iteration  29: 260700.618 ops/s
Iteration  30: 276297.788 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatPublisherDelayErrorPrefetch":
  266490.606 ±(99.9%) 6806.504 ops/s [Average]
  (min, avg, max) = (223198.589, 266490.606, 278392.175), stdev = 10187.656
  CI (99.9%): [259684.102, 273297.110] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_concatPublisherDelayErrorPrefetch  thrpt   30  266490.606 ± 6806.504  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71445.044 ops/s
# Warmup Iteration   2: 180167.801 ops/s
# Warmup Iteration   3: 480162.517 ops/s
# Warmup Iteration   4: 492873.084 ops/s
# Warmup Iteration   5: 501259.751 ops/s
# Warmup Iteration   6: 475410.757 ops/s
# Warmup Iteration   7: 500959.398 ops/s
# Warmup Iteration   8: 508494.522 ops/s
# Warmup Iteration   9: 499094.773 ops/s
# Warmup Iteration  10: 501611.621 ops/s
# Warmup Iteration  11: 515064.921 ops/s
# Warmup Iteration  12: 492400.456 ops/s
# Warmup Iteration  13: 494020.850 ops/s
# Warmup Iteration  14: 506011.304 ops/s
# Warmup Iteration  15: 491438.655 ops/s
# Warmup Iteration  16: 493704.397 ops/s
# Warmup Iteration  17: 500038.994 ops/s
# Warmup Iteration  18: 538488.054 ops/s
# Warmup Iteration  19: 538997.777 ops/s
# Warmup Iteration  20: 519084.348 ops/s
# Warmup Iteration  21: 554333.638 ops/s
# Warmup Iteration  22: 519272.470 ops/s
# Warmup Iteration  23: 553845.999 ops/s
# Warmup Iteration  24: 528173.085 ops/s
# Warmup Iteration  25: 517321.548 ops/s
# Warmup Iteration  26: 531033.369 ops/s
# Warmup Iteration  27: 539445.658 ops/s
# Warmup Iteration  28: 524502.457 ops/s
# Warmup Iteration  29: 517960.866 ops/s
# Warmup Iteration  30: 535830.203 ops/s
Iteration   1: 509550.666 ops/s
Iteration   2: 541228.599 ops/s
Iteration   3: 516671.522 ops/s
Iteration   4: 536800.481 ops/s
Iteration   5: 519158.124 ops/s
Iteration   6: 514154.863 ops/s
Iteration   7: 537714.201 ops/s
Iteration   8: 560723.417 ops/s
Iteration   9: 516557.764 ops/s
Iteration  10: 518176.140 ops/s
Iteration  11: 528108.761 ops/s
Iteration  12: 547050.262 ops/s
Iteration  13: 524722.866 ops/s
Iteration  14: 546002.270 ops/s
Iteration  15: 532020.806 ops/s
Iteration  16: 522447.650 ops/s
Iteration  17: 556718.048 ops/s
Iteration  18: 524129.438 ops/s
Iteration  19: 528752.365 ops/s
Iteration  20: 542545.368 ops/s
Iteration  21: 533844.797 ops/s
Iteration  22: 546693.576 ops/s
Iteration  23: 503932.629 ops/s
Iteration  24: 547519.259 ops/s
Iteration  25: 544014.961 ops/s
Iteration  26: 516183.027 ops/s
Iteration  27: 542375.180 ops/s
Iteration  28: 506698.080 ops/s
Iteration  29: 526114.646 ops/s
Iteration  30: 541350.916 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerEmpty":
  531065.356 ±(99.9%) 9987.480 ops/s [Average]
  (min, avg, max) = (503932.629, 531065.356, 560723.417), stdev = 14948.791
  CI (99.9%): [521077.876, 541052.836] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerEmpty  thrpt   30  531065.356 ± 9987.480  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_cancelNoConcurrentClean$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_cancelNoConcurrentClean

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 512333.314 ops/s
# Warmup Iteration   2: 1908026.299 ops/s
# Warmup Iteration   3: 2787805.835 ops/s
# Warmup Iteration   4: 2364802.483 ops/s
# Warmup Iteration   5: 2891399.967 ops/s
# Warmup Iteration   6: 2842270.957 ops/s
# Warmup Iteration   7: 2970795.825 ops/s
# Warmup Iteration   8: 2872684.791 ops/s
# Warmup Iteration   9: 2898786.680 ops/s
# Warmup Iteration  10: 2974625.291 ops/s
# Warmup Iteration  11: 2806474.423 ops/s
# Warmup Iteration  12: 3031242.471 ops/s
# Warmup Iteration  13: 3022304.393 ops/s
# Warmup Iteration  14: 2866768.585 ops/s
# Warmup Iteration  15: 2954749.035 ops/s
# Warmup Iteration  16: 2894284.686 ops/s
# Warmup Iteration  17: 2996306.861 ops/s
# Warmup Iteration  18: 2975815.951 ops/s
# Warmup Iteration  19: 2800947.836 ops/s
# Warmup Iteration  20: 2996351.244 ops/s
# Warmup Iteration  21: 2937822.745 ops/s
# Warmup Iteration  22: 2954468.834 ops/s
# Warmup Iteration  23: 2828595.607 ops/s
# Warmup Iteration  24: 2866549.881 ops/s
# Warmup Iteration  25: 3033277.299 ops/s
# Warmup Iteration  26: 2809110.227 ops/s
# Warmup Iteration  27: 2908772.852 ops/s
# Warmup Iteration  28: 2880139.315 ops/s
# Warmup Iteration  29: 2895523.747 ops/s
# Warmup Iteration  30: 2977003.494 ops/s
Iteration   1: 2735989.641 ops/s
Iteration   2: 2978394.936 ops/s
Iteration   3: 2798893.002 ops/s
Iteration   4: 2966069.712 ops/s
Iteration   5: 2945640.106 ops/s
Iteration   6: 2252948.844 ops/s
Iteration   7: 2836974.274 ops/s
Iteration   8: 2981946.429 ops/s
Iteration   9: 2774203.477 ops/s
Iteration  10: 2966515.931 ops/s
Iteration  11: 2775534.936 ops/s
Iteration  12: 3030623.269 ops/s
Iteration  13: 2933890.165 ops/s
Iteration  14: 2788112.026 ops/s
Iteration  15: 2958719.346 ops/s
Iteration  16: 2867170.975 ops/s
Iteration  17: 2944686.193 ops/s
Iteration  18: 2904803.162 ops/s
Iteration  19: 2897052.168 ops/s
Iteration  20: 2972469.931 ops/s
Iteration  21: 2853545.882 ops/s
Iteration  22: 2956413.140 ops/s
Iteration  23: 2929241.910 ops/s
Iteration  24: 2963182.139 ops/s
Iteration  25: 2822372.953 ops/s
Iteration  26: 2989773.723 ops/s
Iteration  27: 2906379.806 ops/s
Iteration  28: 2786206.951 ops/s
Iteration  29: 2916535.584 ops/s
Iteration  30: 2855846.336 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_cancelNoConcurrentClean":
  2876337.898 ±(99.9%) 94489.010 ops/s [Average]
  (min, avg, max) = (2252948.844, 2876337.898, 3030623.269), stdev = 141426.712
  CI (99.9%): [2781848.889, 2970826.908] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_cancelNoConcurrentClean  thrpt   30  2876337.898 ± 94489.010  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81049.661 ops/s
# Warmup Iteration   2: 338707.008 ops/s
# Warmup Iteration   3: 491477.096 ops/s
# Warmup Iteration   4: 540546.070 ops/s
# Warmup Iteration   5: 527379.471 ops/s
# Warmup Iteration   6: 514042.217 ops/s
# Warmup Iteration   7: 527029.706 ops/s
# Warmup Iteration   8: 534237.234 ops/s
# Warmup Iteration   9: 498337.868 ops/s
# Warmup Iteration  10: 522893.931 ops/s
# Warmup Iteration  11: 498070.532 ops/s
# Warmup Iteration  12: 506703.613 ops/s
# Warmup Iteration  13: 541664.891 ops/s
# Warmup Iteration  14: 524307.304 ops/s
# Warmup Iteration  15: 535174.645 ops/s
# Warmup Iteration  16: 529774.177 ops/s
# Warmup Iteration  17: 580165.130 ops/s
# Warmup Iteration  18: 566029.530 ops/s
# Warmup Iteration  19: 541850.094 ops/s
# Warmup Iteration  20: 571315.944 ops/s
# Warmup Iteration  21: 543780.167 ops/s
# Warmup Iteration  22: 562303.969 ops/s
# Warmup Iteration  23: 541604.093 ops/s
# Warmup Iteration  24: 562123.496 ops/s
# Warmup Iteration  25: 553117.701 ops/s
# Warmup Iteration  26: 548214.170 ops/s
# Warmup Iteration  27: 560939.623 ops/s
# Warmup Iteration  28: 570563.246 ops/s
# Warmup Iteration  29: 543874.152 ops/s
# Warmup Iteration  30: 551808.710 ops/s
Iteration   1: 540925.109 ops/s
Iteration   2: 556486.191 ops/s
Iteration   3: 556696.092 ops/s
Iteration   4: 548488.177 ops/s
Iteration   5: 531778.814 ops/s
Iteration   6: 552424.687 ops/s
Iteration   7: 557880.320 ops/s
Iteration   8: 566767.476 ops/s
Iteration   9: 574129.748 ops/s
Iteration  10: 540843.549 ops/s
Iteration  11: 557261.111 ops/s
Iteration  12: 572541.381 ops/s
Iteration  13: 554574.750 ops/s
Iteration  14: 552744.212 ops/s
Iteration  15: 559668.001 ops/s
Iteration  16: 564192.703 ops/s
Iteration  17: 558635.812 ops/s
Iteration  18: 564081.400 ops/s
Iteration  19: 568753.065 ops/s
Iteration  20: 548975.961 ops/s
Iteration  21: 569736.189 ops/s
Iteration  22: 544565.299 ops/s
Iteration  23: 571400.748 ops/s
Iteration  24: 545728.390 ops/s
Iteration  25: 577168.563 ops/s
Iteration  26: 555989.573 ops/s
Iteration  27: 554802.554 ops/s
Iteration  28: 572720.923 ops/s
Iteration  29: 548180.946 ops/s
Iteration  30: 547471.893 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mapperCrash":
  557187.121 ±(99.9%) 7543.773 ops/s [Average]
  (min, avg, max) = (531778.814, 557187.121, 577168.563), stdev = 11291.165
  CI (99.9%): [549643.349, 564730.894] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_mapperCrash  thrpt   30  557187.121 ± 7543.773  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39012.548 ops/s
# Warmup Iteration   2: 166787.593 ops/s
# Warmup Iteration   3: 386337.031 ops/s
# Warmup Iteration   4: 433387.019 ops/s
# Warmup Iteration   5: 514826.805 ops/s
# Warmup Iteration   6: 398826.970 ops/s
# Warmup Iteration   7: 502836.202 ops/s
# Warmup Iteration   8: 520905.447 ops/s
# Warmup Iteration   9: 485059.732 ops/s
# Warmup Iteration  10: 503509.866 ops/s
# Warmup Iteration  11: 488921.080 ops/s
# Warmup Iteration  12: 507677.416 ops/s
# Warmup Iteration  13: 488127.335 ops/s
# Warmup Iteration  14: 483429.417 ops/s
# Warmup Iteration  15: 530999.603 ops/s
# Warmup Iteration  16: 488719.131 ops/s
# Warmup Iteration  17: 512583.656 ops/s
# Warmup Iteration  18: 515843.171 ops/s
# Warmup Iteration  19: 529959.861 ops/s
# Warmup Iteration  20: 530769.916 ops/s
# Warmup Iteration  21: 532599.469 ops/s
# Warmup Iteration  22: 517208.407 ops/s
# Warmup Iteration  23: 517030.161 ops/s
# Warmup Iteration  24: 506885.566 ops/s
# Warmup Iteration  25: 521400.592 ops/s
# Warmup Iteration  26: 526440.540 ops/s
# Warmup Iteration  27: 504837.626 ops/s
# Warmup Iteration  28: 531831.423 ops/s
# Warmup Iteration  29: 503886.384 ops/s
# Warmup Iteration  30: 495935.317 ops/s
Iteration   1: 465974.110 ops/s
Iteration   2: 527323.624 ops/s
Iteration   3: 506653.543 ops/s
Iteration   4: 530269.162 ops/s
Iteration   5: 507839.103 ops/s
Iteration   6: 515304.641 ops/s
Iteration   7: 522558.447 ops/s
Iteration   8: 505893.848 ops/s
Iteration   9: 527195.189 ops/s
Iteration  10: 504881.709 ops/s
Iteration  11: 503472.516 ops/s
Iteration  12: 519318.893 ops/s
Iteration  13: 503536.653 ops/s
Iteration  14: 527508.456 ops/s
Iteration  15: 503846.134 ops/s
Iteration  16: 521989.867 ops/s
Iteration  17: 515130.188 ops/s
Iteration  18: 540895.155 ops/s
Iteration  19: 513513.672 ops/s
Iteration  20: 513997.250 ops/s
Iteration  21: 547104.337 ops/s
Iteration  22: 508207.478 ops/s
Iteration  23: 541772.179 ops/s
Iteration  24: 524996.662 ops/s
Iteration  25: 512851.903 ops/s
Iteration  26: 541698.876 ops/s
Iteration  27: 509920.723 ops/s
Iteration  28: 509691.369 ops/s
Iteration  29: 536198.941 ops/s
Iteration  30: 506630.868 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess":
  517205.850 ±(99.9%) 10833.982 ops/s [Average]
  (min, avg, max) = (465974.110, 517205.850, 547104.337), stdev = 16215.795
  CI (99.9%): [506371.868, 528039.832] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess  thrpt   30  517205.850 ± 10833.982  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31676.699 ops/s
# Warmup Iteration   2: 127778.640 ops/s
# Warmup Iteration   3: 152753.088 ops/s
# Warmup Iteration   4: 156542.897 ops/s
# Warmup Iteration   5: 178002.254 ops/s
# Warmup Iteration   6: 174751.423 ops/s
# Warmup Iteration   7: 181766.344 ops/s
# Warmup Iteration   8: 177878.790 ops/s
# Warmup Iteration   9: 184523.680 ops/s
# Warmup Iteration  10: 176091.916 ops/s
# Warmup Iteration  11: 175521.842 ops/s
# Warmup Iteration  12: 186430.296 ops/s
# Warmup Iteration  13: 174022.702 ops/s
# Warmup Iteration  14: 184564.346 ops/s
# Warmup Iteration  15: 176397.382 ops/s
# Warmup Iteration  16: 178066.413 ops/s
# Warmup Iteration  17: 199092.381 ops/s
# Warmup Iteration  18: 185152.467 ops/s
# Warmup Iteration  19: 198330.548 ops/s
# Warmup Iteration  20: 198719.470 ops/s
# Warmup Iteration  21: 186414.476 ops/s
# Warmup Iteration  22: 196683.419 ops/s
# Warmup Iteration  23: 187576.902 ops/s
# Warmup Iteration  24: 191315.511 ops/s
# Warmup Iteration  25: 196093.494 ops/s
# Warmup Iteration  26: 190203.780 ops/s
# Warmup Iteration  27: 197652.895 ops/s
# Warmup Iteration  28: 187462.154 ops/s
# Warmup Iteration  29: 198216.083 ops/s
# Warmup Iteration  30: 186127.596 ops/s
Iteration   1: 189341.656 ops/s
Iteration   2: 178973.694 ops/s
Iteration   3: 182217.764 ops/s
Iteration   4: 195686.972 ops/s
Iteration   5: 192627.067 ops/s
Iteration   6: 191837.822 ops/s
Iteration   7: 195455.958 ops/s
Iteration   8: 182256.350 ops/s
Iteration   9: 199961.927 ops/s
Iteration  10: 188283.451 ops/s
Iteration  11: 192413.149 ops/s
Iteration  12: 186840.268 ops/s
Iteration  13: 189892.797 ops/s
Iteration  14: 197884.334 ops/s
Iteration  15: 185140.236 ops/s
Iteration  16: 197971.994 ops/s
Iteration  17: 195043.024 ops/s
Iteration  18: 188968.387 ops/s
Iteration  19: 194768.570 ops/s
Iteration  20: 191093.149 ops/s
Iteration  21: 194523.680 ops/s
Iteration  22: 185702.221 ops/s
Iteration  23: 200160.193 ops/s
Iteration  24: 196269.815 ops/s
Iteration  25: 178873.555 ops/s
Iteration  26: 193836.926 ops/s
Iteration  27: 194966.150 ops/s
Iteration  28: 186210.822 ops/s
Iteration  29: 184515.237 ops/s
Iteration  30: 195336.869 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel":
  190901.801 ±(99.9%) 3973.736 ops/s [Average]
  (min, avg, max) = (178873.555, 190901.801, 200160.193), stdev = 5947.701
  CI (99.9%): [186928.065, 194875.537] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  190901.801 ± 3973.736  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 373248.952 ops/s
# Warmup Iteration   2: 1586423.856 ops/s
# Warmup Iteration   3: 1851207.301 ops/s
# Warmup Iteration   4: 2183414.331 ops/s
# Warmup Iteration   5: 2296952.074 ops/s
# Warmup Iteration   6: 2197517.872 ops/s
# Warmup Iteration   7: 2251791.067 ops/s
# Warmup Iteration   8: 2190553.321 ops/s
# Warmup Iteration   9: 2229409.578 ops/s
# Warmup Iteration  10: 2282773.126 ops/s
# Warmup Iteration  11: 2240482.660 ops/s
# Warmup Iteration  12: 2137628.382 ops/s
# Warmup Iteration  13: 2225133.034 ops/s
# Warmup Iteration  14: 2259628.616 ops/s
# Warmup Iteration  15: 2163269.158 ops/s
# Warmup Iteration  16: 2301237.962 ops/s
# Warmup Iteration  17: 2351337.722 ops/s
# Warmup Iteration  18: 2186606.741 ops/s
# Warmup Iteration  19: 2294929.462 ops/s
# Warmup Iteration  20: 2220654.911 ops/s
# Warmup Iteration  21: 2235078.442 ops/s
# Warmup Iteration  22: 2331777.261 ops/s
# Warmup Iteration  23: 2207308.414 ops/s
# Warmup Iteration  24: 2289590.197 ops/s
# Warmup Iteration  25: 1844903.270 ops/s
# Warmup Iteration  26: 2184067.874 ops/s
# Warmup Iteration  27: 2284178.080 ops/s
# Warmup Iteration  28: 2211267.873 ops/s
# Warmup Iteration  29: 2259530.135 ops/s
# Warmup Iteration  30: 2241349.693 ops/s
Iteration   1: 2236735.448 ops/s
Iteration   2: 2313752.593 ops/s
Iteration   3: 2208981.922 ops/s
Iteration   4: 2283664.581 ops/s
Iteration   5: 2263087.145 ops/s
Iteration   6: 2182426.111 ops/s
Iteration   7: 2323269.198 ops/s
Iteration   8: 2218090.097 ops/s
Iteration   9: 2229300.065 ops/s
Iteration  10: 2291073.298 ops/s
Iteration  11: 2263119.415 ops/s
Iteration  12: 2239519.049 ops/s
Iteration  13: 2270351.292 ops/s
Iteration  14: 2154127.546 ops/s
Iteration  15: 2236144.583 ops/s
Iteration  16: 2278331.010 ops/s
Iteration  17: 2186411.485 ops/s
Iteration  18: 2203843.284 ops/s
Iteration  19: 2292817.414 ops/s
Iteration  20: 2223250.920 ops/s
Iteration  21: 2227799.272 ops/s
Iteration  22: 2220315.679 ops/s
Iteration  23: 2313763.301 ops/s
Iteration  24: 2247111.808 ops/s
Iteration  25: 2237180.215 ops/s
Iteration  26: 2332285.785 ops/s
Iteration  27: 2222377.565 ops/s
Iteration  28: 2235430.614 ops/s
Iteration  29: 2184129.762 ops/s
Iteration  30: 2276410.706 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_cancel":
  2246503.372 ±(99.9%) 29860.661 ops/s [Average]
  (min, avg, max) = (2154127.546, 2246503.372, 2332285.785), stdev = 44694.035
  CI (99.9%): [2216642.711, 2276364.033] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_cancel  thrpt   30  2246503.372 ± 29860.661  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58821.714 ops/s
# Warmup Iteration   2: 219218.242 ops/s
# Warmup Iteration   3: 426920.952 ops/s
# Warmup Iteration   4: 458319.066 ops/s
# Warmup Iteration   5: 487829.149 ops/s
# Warmup Iteration   6: 466303.665 ops/s
# Warmup Iteration   7: 462207.625 ops/s
# Warmup Iteration   8: 480702.568 ops/s
# Warmup Iteration   9: 470861.190 ops/s
# Warmup Iteration  10: 483042.324 ops/s
# Warmup Iteration  11: 448126.848 ops/s
# Warmup Iteration  12: 468574.767 ops/s
# Warmup Iteration  13: 468655.645 ops/s
# Warmup Iteration  14: 478208.838 ops/s
# Warmup Iteration  15: 495028.165 ops/s
# Warmup Iteration  16: 472176.010 ops/s
# Warmup Iteration  17: 496796.078 ops/s
# Warmup Iteration  18: 502694.132 ops/s
# Warmup Iteration  19: 483169.268 ops/s
# Warmup Iteration  20: 503117.510 ops/s
# Warmup Iteration  21: 497721.623 ops/s
# Warmup Iteration  22: 488527.560 ops/s
# Warmup Iteration  23: 510142.140 ops/s
# Warmup Iteration  24: 496354.074 ops/s
# Warmup Iteration  25: 475019.021 ops/s
# Warmup Iteration  26: 499529.488 ops/s
# Warmup Iteration  27: 474330.950 ops/s
# Warmup Iteration  28: 512519.206 ops/s
# Warmup Iteration  29: 486815.388 ops/s
# Warmup Iteration  30: 482621.654 ops/s
Iteration   1: 510817.507 ops/s
Iteration   2: 509682.927 ops/s
Iteration   3: 516614.844 ops/s
Iteration   4: 508039.127 ops/s
Iteration   5: 493109.109 ops/s
Iteration   6: 510869.992 ops/s
Iteration   7: 488295.748 ops/s
Iteration   8: 502945.582 ops/s
Iteration   9: 496097.473 ops/s
Iteration  10: 514136.831 ops/s
Iteration  11: 501490.026 ops/s
Iteration  12: 497353.252 ops/s
Iteration  13: 508745.301 ops/s
Iteration  14: 512365.448 ops/s
Iteration  15: 522128.615 ops/s
Iteration  16: 479344.669 ops/s
Iteration  17: 512607.135 ops/s
Iteration  18: 492993.798 ops/s
Iteration  19: 520408.961 ops/s
Iteration  20: 495562.869 ops/s
Iteration  21: 514036.045 ops/s
Iteration  22: 514105.820 ops/s
Iteration  23: 499867.981 ops/s
Iteration  24: 516198.733 ops/s
Iteration  25: 484146.788 ops/s
Iteration  26: 515266.198 ops/s
Iteration  27: 494672.986 ops/s
Iteration  28: 500577.032 ops/s
Iteration  29: 484533.955 ops/s
Iteration  30: 513997.519 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_badRequest":
  504367.076 ±(99.9%) 7759.294 ops/s [Average]
  (min, avg, max) = (479344.669, 504367.076, 522128.615), stdev = 11613.747
  CI (99.9%): [496607.781, 512126.370] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MaybeConcatIterableTest._Benchmark.benchmark_badRequest  thrpt   30  504367.076 ± 7759.294  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27326.532 ops/s
# Warmup Iteration   2: 129011.683 ops/s
# Warmup Iteration   3: 163259.747 ops/s
# Warmup Iteration   4: 163843.918 ops/s
# Warmup Iteration   5: 166229.286 ops/s
# Warmup Iteration   6: 181993.293 ops/s
# Warmup Iteration   7: 180558.219 ops/s
# Warmup Iteration   8: 188927.350 ops/s
# Warmup Iteration   9: 174148.736 ops/s
# Warmup Iteration  10: 178238.639 ops/s
# Warmup Iteration  11: 165368.525 ops/s
# Warmup Iteration  12: 176695.215 ops/s
# Warmup Iteration  13: 180291.952 ops/s
# Warmup Iteration  14: 188598.378 ops/s
# Warmup Iteration  15: 174853.065 ops/s
# Warmup Iteration  16: 187935.859 ops/s
# Warmup Iteration  17: 181564.927 ops/s
# Warmup Iteration  18: 190537.540 ops/s
# Warmup Iteration  19: 201333.360 ops/s
# Warmup Iteration  20: 161401.043 ops/s
# Warmup Iteration  21: 191813.542 ops/s
# Warmup Iteration  22: 186358.395 ops/s
# Warmup Iteration  23: 200524.512 ops/s
# Warmup Iteration  24: 193272.871 ops/s
# Warmup Iteration  25: 188814.116 ops/s
# Warmup Iteration  26: 198725.065 ops/s
# Warmup Iteration  27: 191238.403 ops/s
# Warmup Iteration  28: 192833.344 ops/s
# Warmup Iteration  29: 196315.534 ops/s
# Warmup Iteration  30: 188240.638 ops/s
Iteration   1: 201217.050 ops/s
Iteration   2: 190561.410 ops/s
Iteration   3: 199561.795 ops/s
Iteration   4: 179832.791 ops/s
Iteration   5: 195256.547 ops/s
Iteration   6: 194661.630 ops/s
Iteration   7: 188823.265 ops/s
Iteration   8: 201385.803 ops/s
Iteration   9: 197264.707 ops/s
Iteration  10: 189269.063 ops/s
Iteration  11: 189375.822 ops/s
Iteration  12: 194091.474 ops/s
Iteration  13: 186811.802 ops/s
Iteration  14: 195036.408 ops/s
Iteration  15: 190115.829 ops/s
Iteration  16: 191101.547 ops/s
Iteration  17: 193107.213 ops/s
Iteration  18: 189161.653 ops/s
Iteration  19: 195883.451 ops/s
Iteration  20: 196290.831 ops/s
Iteration  21: 189689.995 ops/s
Iteration  22: 195120.784 ops/s
Iteration  23: 191359.993 ops/s
Iteration  24: 202729.791 ops/s
Iteration  25: 201843.269 ops/s
Iteration  26: 187661.892 ops/s
Iteration  27: 200445.005 ops/s
Iteration  28: 189980.025 ops/s
Iteration  29: 196331.099 ops/s
Iteration  30: 199052.883 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd":
  193767.494 ±(99.9%) 3583.593 ops/s [Average]
  (min, avg, max) = (179832.791, 193767.494, 202729.791), stdev = 5363.754
  CI (99.9%): [190183.901, 197351.087] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score      Error  Units
FlowableConcatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd  thrpt   30  193767.494 ± 3583.593  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat2Empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat2Empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1284848.248 ops/s
# Warmup Iteration   2: 3158558.651 ops/s
# Warmup Iteration   3: 3177627.780 ops/s
# Warmup Iteration   4: 4006621.922 ops/s
# Warmup Iteration   5: 3763730.077 ops/s
# Warmup Iteration   6: 3811629.954 ops/s
# Warmup Iteration   7: 3751418.358 ops/s
# Warmup Iteration   8: 3652949.064 ops/s
# Warmup Iteration   9: 3936348.514 ops/s
# Warmup Iteration  10: 3786765.774 ops/s
# Warmup Iteration  11: 3876169.955 ops/s
# Warmup Iteration  12: 3787609.057 ops/s
# Warmup Iteration  13: 3768714.391 ops/s
# Warmup Iteration  14: 3865963.984 ops/s
# Warmup Iteration  15: 3699872.154 ops/s
# Warmup Iteration  16: 3870401.353 ops/s
# Warmup Iteration  17: 3742119.190 ops/s
# Warmup Iteration  18: 3954698.252 ops/s
# Warmup Iteration  19: 3922451.120 ops/s
# Warmup Iteration  20: 3795256.032 ops/s
# Warmup Iteration  21: 3909336.660 ops/s
# Warmup Iteration  22: 3822021.193 ops/s
# Warmup Iteration  23: 3858488.236 ops/s
# Warmup Iteration  24: 3776018.221 ops/s
# Warmup Iteration  25: 3834969.866 ops/s
# Warmup Iteration  26: 3881681.316 ops/s
# Warmup Iteration  27: 3658787.217 ops/s
# Warmup Iteration  28: 3953361.074 ops/s
# Warmup Iteration  29: 3899516.514 ops/s
# Warmup Iteration  30: 3662874.176 ops/s
Iteration   1: 3862390.992 ops/s
Iteration   2: 3852245.410 ops/s
Iteration   3: 3942502.822 ops/s
Iteration   4: 3770678.035 ops/s
Iteration   5: 3821344.603 ops/s
Iteration   6: 3824313.692 ops/s
Iteration   7: 3779527.197 ops/s
Iteration   8: 3991877.658 ops/s
Iteration   9: 3899295.247 ops/s
Iteration  10: 3825121.134 ops/s
Iteration  11: 3773990.083 ops/s
Iteration  12: 3981250.304 ops/s
Iteration  13: 3873839.770 ops/s
Iteration  14: 3665271.170 ops/s
Iteration  15: 3818037.812 ops/s
Iteration  16: 3986644.333 ops/s
Iteration  17: 3741839.337 ops/s
Iteration  18: 3914188.484 ops/s
Iteration  19: 3923444.131 ops/s
Iteration  20: 3764717.278 ops/s
Iteration  21: 3988000.027 ops/s
Iteration  22: 3775326.848 ops/s
Iteration  23: 3900172.164 ops/s
Iteration  24: 3764451.824 ops/s
Iteration  25: 3822804.995 ops/s
Iteration  26: 4048420.215 ops/s
Iteration  27: 3705444.739 ops/s
Iteration  28: 3907030.428 ops/s
Iteration  29: 3781133.786 ops/s
Iteration  30: 3973398.284 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat2Empty":
  3855956.760 ±(99.9%) 64242.586 ops/s [Average]
  (min, avg, max) = (3665271.170, 3855956.760, 4048420.215), stdev = 96155.286
  CI (99.9%): [3791714.174, 3920199.346] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concat2Empty  thrpt   30  3855956.760 ± 64242.586  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 843135.915 ops/s
# Warmup Iteration   2: 2265097.522 ops/s
# Warmup Iteration   3: 3145437.728 ops/s
# Warmup Iteration   4: 3372082.930 ops/s
# Warmup Iteration   5: 3289723.859 ops/s
# Warmup Iteration   6: 3331762.706 ops/s
# Warmup Iteration   7: 3352214.344 ops/s
# Warmup Iteration   8: 3364362.225 ops/s
# Warmup Iteration   9: 3389749.396 ops/s
# Warmup Iteration  10: 3240022.237 ops/s
# Warmup Iteration  11: 3256725.868 ops/s
# Warmup Iteration  12: 3487600.300 ops/s
# Warmup Iteration  13: 3275652.226 ops/s
# Warmup Iteration  14: 3372530.062 ops/s
# Warmup Iteration  15: 2722934.209 ops/s
# Warmup Iteration  16: 3351246.714 ops/s
# Warmup Iteration  17: 3329062.496 ops/s
# Warmup Iteration  18: 3319277.378 ops/s
# Warmup Iteration  19: 3532776.644 ops/s
# Warmup Iteration  20: 3296655.383 ops/s
# Warmup Iteration  21: 3472871.208 ops/s
# Warmup Iteration  22: 3267812.569 ops/s
# Warmup Iteration  23: 3402901.182 ops/s
# Warmup Iteration  24: 3279371.333 ops/s
# Warmup Iteration  25: 3361815.342 ops/s
# Warmup Iteration  26: 3363072.640 ops/s
# Warmup Iteration  27: 3380528.692 ops/s
# Warmup Iteration  28: 3293864.827 ops/s
# Warmup Iteration  29: 3378318.017 ops/s
# Warmup Iteration  30: 3417428.078 ops/s
Iteration   1: 3471904.764 ops/s
Iteration   2: 3278276.756 ops/s
Iteration   3: 3478016.841 ops/s
Iteration   4: 3289332.455 ops/s
Iteration   5: 3314400.783 ops/s
Iteration   6: 3390810.475 ops/s
Iteration   7: 3335487.491 ops/s
Iteration   8: 3340698.936 ops/s
Iteration   9: 3483360.425 ops/s
Iteration  10: 3285662.147 ops/s
Iteration  11: 3339419.318 ops/s
Iteration  12: 3322951.276 ops/s
Iteration  13: 3404452.168 ops/s
Iteration  14: 3307741.512 ops/s
Iteration  15: 3310204.785 ops/s
Iteration  16: 3451469.627 ops/s
Iteration  17: 3345240.300 ops/s
Iteration  18: 3388341.244 ops/s
Iteration  19: 3327287.366 ops/s
Iteration  20: 3296851.408 ops/s
Iteration  21: 3484090.551 ops/s
Iteration  22: 3308351.546 ops/s
Iteration  23: 3527023.118 ops/s
Iteration  24: 3483585.766 ops/s
Iteration  25: 3291546.536 ops/s
Iteration  26: 3531566.334 ops/s
Iteration  27: 3358371.246 ops/s
Iteration  28: 3314245.855 ops/s
Iteration  29: 3485289.080 ops/s
Iteration  30: 3317609.633 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatIterableEmpty":
  3375452.991 ±(99.9%) 54656.575 ops/s [Average]
  (min, avg, max) = (3278276.756, 3375452.991, 3531566.334), stdev = 81807.395
  CI (99.9%): [3320796.416, 3430109.567] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concatIterableEmpty  thrpt   30  3375452.991 ± 54656.575  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3Empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3Empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 753218.798 ops/s
# Warmup Iteration   2: 2584097.264 ops/s
# Warmup Iteration   3: 2887927.123 ops/s
# Warmup Iteration   4: 3273956.729 ops/s
# Warmup Iteration   5: 3462739.408 ops/s
# Warmup Iteration   6: 3514629.828 ops/s
# Warmup Iteration   7: 3323065.920 ops/s
# Warmup Iteration   8: 3433549.239 ops/s
# Warmup Iteration   9: 3278016.447 ops/s
# Warmup Iteration  10: 3379939.673 ops/s
# Warmup Iteration  11: 3321975.247 ops/s
# Warmup Iteration  12: 3337515.196 ops/s
# Warmup Iteration  13: 3250110.171 ops/s
# Warmup Iteration  14: 3337519.403 ops/s
# Warmup Iteration  15: 3296888.343 ops/s
# Warmup Iteration  16: 3341691.408 ops/s
# Warmup Iteration  17: 3328789.515 ops/s
# Warmup Iteration  18: 3393236.056 ops/s
# Warmup Iteration  19: 3355907.573 ops/s
# Warmup Iteration  20: 3345996.154 ops/s
# Warmup Iteration  21: 3515725.444 ops/s
# Warmup Iteration  22: 3387276.604 ops/s
# Warmup Iteration  23: 3482112.082 ops/s
# Warmup Iteration  24: 3332894.405 ops/s
# Warmup Iteration  25: 3296486.150 ops/s
# Warmup Iteration  26: 3392404.108 ops/s
# Warmup Iteration  27: 3353824.915 ops/s
# Warmup Iteration  28: 3552669.612 ops/s
# Warmup Iteration  29: 3254413.159 ops/s
# Warmup Iteration  30: 3388611.904 ops/s
Iteration   1: 3581288.563 ops/s
Iteration   2: 3413690.144 ops/s
Iteration   3: 3392965.472 ops/s
Iteration   4: 3379488.344 ops/s
Iteration   5: 3342570.747 ops/s
Iteration   6: 3513264.501 ops/s
Iteration   7: 3237179.640 ops/s
Iteration   8: 3403946.955 ops/s
Iteration   9: 3269177.722 ops/s
Iteration  10: 3333079.025 ops/s
Iteration  11: 3412080.302 ops/s
Iteration  12: 3231476.866 ops/s
Iteration  13: 3456921.798 ops/s
Iteration  14: 3550466.867 ops/s
Iteration  15: 3260690.341 ops/s
Iteration  16: 3485367.029 ops/s
Iteration  17: 3396985.762 ops/s
Iteration  18: 3307938.836 ops/s
Iteration  19: 3481499.855 ops/s
Iteration  20: 3358472.511 ops/s
Iteration  21: 3455008.745 ops/s
Iteration  22: 3292558.706 ops/s
Iteration  23: 3360578.716 ops/s
Iteration  24: 3364698.830 ops/s
Iteration  25: 3447120.597 ops/s
Iteration  26: 3298355.540 ops/s
Iteration  27: 3466245.382 ops/s
Iteration  28: 3430834.740 ops/s
Iteration  29: 3355036.766 ops/s
Iteration  30: 3420663.525 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3Empty":
  3389988.428 ±(99.9%) 59557.095 ops/s [Average]
  (min, avg, max) = (3231476.866, 3389988.428, 3581288.563), stdev = 89142.263
  CI (99.9%): [3330431.333, 3449545.522] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concat3Empty  thrpt   30  3389988.428 ± 59557.095  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 169443.045 ops/s
# Warmup Iteration   2: 592480.853 ops/s
# Warmup Iteration   3: 685665.273 ops/s
# Warmup Iteration   4: 754446.559 ops/s
# Warmup Iteration   5: 803976.461 ops/s
# Warmup Iteration   6: 792600.332 ops/s
# Warmup Iteration   7: 769981.631 ops/s
# Warmup Iteration   8: 739704.608 ops/s
# Warmup Iteration   9: 787720.547 ops/s
# Warmup Iteration  10: 619771.262 ops/s
# Warmup Iteration  11: 781608.281 ops/s
# Warmup Iteration  12: 786494.256 ops/s
# Warmup Iteration  13: 783099.825 ops/s
# Warmup Iteration  14: 810284.555 ops/s
# Warmup Iteration  15: 790546.430 ops/s
# Warmup Iteration  16: 800091.258 ops/s
# Warmup Iteration  17: 829316.385 ops/s
# Warmup Iteration  18: 804970.594 ops/s
# Warmup Iteration  19: 817413.447 ops/s
# Warmup Iteration  20: 792748.713 ops/s
# Warmup Iteration  21: 813147.978 ops/s
# Warmup Iteration  22: 788705.447 ops/s
# Warmup Iteration  23: 800361.433 ops/s
# Warmup Iteration  24: 811004.149 ops/s
# Warmup Iteration  25: 810427.395 ops/s
# Warmup Iteration  26: 804711.410 ops/s
# Warmup Iteration  27: 820424.419 ops/s
# Warmup Iteration  28: 798803.780 ops/s
# Warmup Iteration  29: 816623.416 ops/s
# Warmup Iteration  30: 818331.020 ops/s
Iteration   1: 787885.831 ops/s
Iteration   2: 812444.906 ops/s
Iteration   3: 790482.139 ops/s
Iteration   4: 803825.088 ops/s
Iteration   5: 823336.502 ops/s
Iteration   6: 810869.945 ops/s
Iteration   7: 819127.868 ops/s
Iteration   8: 776615.690 ops/s
Iteration   9: 832994.625 ops/s
Iteration  10: 791554.941 ops/s
Iteration  11: 818450.498 ops/s
Iteration  12: 796724.840 ops/s
Iteration  13: 835427.921 ops/s
Iteration  14: 843484.592 ops/s
Iteration  15: 780992.575 ops/s
Iteration  16: 774450.658 ops/s
Iteration  17: 839449.983 ops/s
Iteration  18: 778368.706 ops/s
Iteration  19: 830800.609 ops/s
Iteration  20: 779839.565 ops/s
Iteration  21: 828825.391 ops/s
Iteration  22: 804641.502 ops/s
Iteration  23: 802768.394 ops/s
Iteration  24: 818638.954 ops/s
Iteration  25: 779063.653 ops/s
Iteration  26: 822519.194 ops/s
Iteration  27: 760376.228 ops/s
Iteration  28: 812289.358 ops/s
Iteration  29: 790830.058 ops/s
Iteration  30: 820268.037 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normal":
  805578.275 ±(99.9%) 14923.092 ops/s [Average]
  (min, avg, max) = (760376.228, 805578.275, 843484.592), stdev = 22336.184
  CI (99.9%): [790655.183, 820501.368] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_normal  thrpt   30  805578.275 ± 14923.092  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 208130.377 ops/s
# Warmup Iteration   2: 596544.248 ops/s
# Warmup Iteration   3: 686577.192 ops/s
# Warmup Iteration   4: 709144.510 ops/s
# Warmup Iteration   5: 689941.678 ops/s
# Warmup Iteration   6: 799717.262 ops/s
# Warmup Iteration   7: 757442.412 ops/s
# Warmup Iteration   8: 827513.967 ops/s
# Warmup Iteration   9: 787737.464 ops/s
# Warmup Iteration  10: 830028.144 ops/s
# Warmup Iteration  11: 806772.343 ops/s
# Warmup Iteration  12: 792192.397 ops/s
# Warmup Iteration  13: 783488.582 ops/s
# Warmup Iteration  14: 837212.319 ops/s
# Warmup Iteration  15: 783059.650 ops/s
# Warmup Iteration  16: 810811.320 ops/s
# Warmup Iteration  17: 808681.163 ops/s
# Warmup Iteration  18: 818702.432 ops/s
# Warmup Iteration  19: 790411.201 ops/s
# Warmup Iteration  20: 835055.379 ops/s
# Warmup Iteration  21: 760276.730 ops/s
# Warmup Iteration  22: 806857.903 ops/s
# Warmup Iteration  23: 802633.348 ops/s
# Warmup Iteration  24: 789095.529 ops/s
# Warmup Iteration  25: 817052.999 ops/s
# Warmup Iteration  26: 776096.756 ops/s
# Warmup Iteration  27: 826773.091 ops/s
# Warmup Iteration  28: 789507.704 ops/s
# Warmup Iteration  29: 800603.758 ops/s
# Warmup Iteration  30: 816159.671 ops/s
Iteration   1: 810535.644 ops/s
Iteration   2: 783771.579 ops/s
Iteration   3: 783664.806 ops/s
Iteration   4: 846004.683 ops/s
Iteration   5: 768298.227 ops/s
Iteration   6: 812034.184 ops/s
Iteration   7: 796955.887 ops/s
Iteration   8: 794874.388 ops/s
Iteration   9: 820579.584 ops/s
Iteration  10: 787768.009 ops/s
Iteration  11: 822111.693 ops/s
Iteration  12: 784232.628 ops/s
Iteration  13: 829197.884 ops/s
Iteration  14: 802728.536 ops/s
Iteration  15: 766891.149 ops/s
Iteration  16: 791770.970 ops/s
Iteration  17: 818981.675 ops/s
Iteration  18: 799917.986 ops/s
Iteration  19: 838196.275 ops/s
Iteration  20: 794965.861 ops/s
Iteration  21: 806996.925 ops/s
Iteration  22: 804647.975 ops/s
Iteration  23: 818332.969 ops/s
Iteration  24: 771912.955 ops/s
Iteration  25: 818787.074 ops/s
Iteration  26: 805290.418 ops/s
Iteration  27: 773181.851 ops/s
Iteration  28: 840964.415 ops/s
Iteration  29: 772263.632 ops/s
Iteration  30: 787795.387 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalDelayError":
  801788.508 ±(99.9%) 14636.689 ops/s [Average]
  (min, avg, max) = (766891.149, 801788.508, 846004.683), stdev = 21907.509
  CI (99.9%): [787151.819, 816425.198] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_normalDelayError  thrpt   30  801788.508 ± 14636.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_fusedInternalsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_fusedInternalsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 268676.596 ops/s
# Warmup Iteration   2: 631646.333 ops/s
# Warmup Iteration   3: 728014.900 ops/s
# Warmup Iteration   4: 730044.642 ops/s
# Warmup Iteration   5: 673690.066 ops/s
# Warmup Iteration   6: 765977.722 ops/s
# Warmup Iteration   7: 823952.600 ops/s
# Warmup Iteration   8: 881762.163 ops/s
# Warmup Iteration   9: 820231.464 ops/s
# Warmup Iteration  10: 918622.812 ops/s
# Warmup Iteration  11: 883231.378 ops/s
# Warmup Iteration  12: 892623.036 ops/s
# Warmup Iteration  13: 849166.211 ops/s
# Warmup Iteration  14: 848368.403 ops/s
# Warmup Iteration  15: 882582.915 ops/s
# Warmup Iteration  16: 836597.144 ops/s
# Warmup Iteration  17: 891707.148 ops/s
# Warmup Iteration  18: 850676.589 ops/s
# Warmup Iteration  19: 894074.221 ops/s
# Warmup Iteration  20: 869138.334 ops/s
# Warmup Iteration  21: 899528.151 ops/s
# Warmup Iteration  22: 919217.339 ops/s
# Warmup Iteration  23: 870972.099 ops/s
# Warmup Iteration  24: 869245.507 ops/s
# Warmup Iteration  25: 918409.625 ops/s
# Warmup Iteration  26: 872091.282 ops/s
# Warmup Iteration  27: 869783.998 ops/s
# Warmup Iteration  28: 867243.857 ops/s
# Warmup Iteration  29: 863860.149 ops/s
# Warmup Iteration  30: 879140.918 ops/s
Iteration   1: 881733.454 ops/s
Iteration   2: 886094.316 ops/s
Iteration   3: 869913.840 ops/s
Iteration   4: 896554.284 ops/s
Iteration   5: 842238.209 ops/s
Iteration   6: 894916.912 ops/s
Iteration   7: 887873.918 ops/s
Iteration   8: 845877.404 ops/s
Iteration   9: 900774.828 ops/s
Iteration  10: 858472.597 ops/s
Iteration  11: 896819.939 ops/s
Iteration  12: 920296.639 ops/s
Iteration  13: 887814.663 ops/s
Iteration  14: 829518.647 ops/s
Iteration  15: 877344.777 ops/s
Iteration  16: 810162.960 ops/s
Iteration  17: 883149.342 ops/s
Iteration  18: 911137.059 ops/s
Iteration  19: 902737.222 ops/s
Iteration  20: 875187.567 ops/s
Iteration  21: 858912.618 ops/s
Iteration  22: 929306.139 ops/s
Iteration  23: 858564.987 ops/s
Iteration  24: 912882.171 ops/s
Iteration  25: 859594.584 ops/s
Iteration  26: 843856.460 ops/s
Iteration  27: 900619.579 ops/s
Iteration  28: 853148.346 ops/s
Iteration  29: 895840.979 ops/s
Iteration  30: 845365.719 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_fusedInternalsFlowable":
  877223.672 ±(99.9%) 19063.486 ops/s [Average]
  (min, avg, max) = (810162.960, 877223.672, 929306.139), stdev = 28533.331
  CI (99.9%): [858160.186, 896287.158] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_fusedInternalsFlowable  thrpt   30  877223.672 ± 19063.486  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_delayErrorMaxConcurrencyCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_delayErrorMaxConcurrencyCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 73671.647 ops/s
# Warmup Iteration   2: 252828.440 ops/s
# Warmup Iteration   3: 401598.598 ops/s
# Warmup Iteration   4: 398828.323 ops/s
# Warmup Iteration   5: 447758.334 ops/s
# Warmup Iteration   6: 393449.717 ops/s
# Warmup Iteration   7: 434343.874 ops/s
# Warmup Iteration   8: 434911.622 ops/s
# Warmup Iteration   9: 448043.074 ops/s
# Warmup Iteration  10: 475199.132 ops/s
# Warmup Iteration  11: 425109.558 ops/s
# Warmup Iteration  12: 445823.313 ops/s
# Warmup Iteration  13: 460688.874 ops/s
# Warmup Iteration  14: 423386.929 ops/s
# Warmup Iteration  15: 457824.093 ops/s
# Warmup Iteration  16: 435747.950 ops/s
# Warmup Iteration  17: 455055.734 ops/s
# Warmup Iteration  18: 466920.680 ops/s
# Warmup Iteration  19: 446012.590 ops/s
# Warmup Iteration  20: 471412.720 ops/s
# Warmup Iteration  21: 446408.253 ops/s
# Warmup Iteration  22: 459120.590 ops/s
# Warmup Iteration  23: 464538.755 ops/s
# Warmup Iteration  24: 450042.049 ops/s
# Warmup Iteration  25: 480624.951 ops/s
# Warmup Iteration  26: 454962.192 ops/s
# Warmup Iteration  27: 444506.613 ops/s
# Warmup Iteration  28: 456892.178 ops/s
# Warmup Iteration  29: 456209.513 ops/s
# Warmup Iteration  30: 456148.405 ops/s
Iteration   1: 470025.826 ops/s
Iteration   2: 436823.833 ops/s
Iteration   3: 472366.773 ops/s
Iteration   4: 447682.523 ops/s
Iteration   5: 460611.981 ops/s
Iteration   6: 465355.647 ops/s
Iteration   7: 460782.690 ops/s
Iteration   8: 457696.801 ops/s
Iteration   9: 453148.690 ops/s
Iteration  10: 468731.778 ops/s
Iteration  11: 464294.919 ops/s
Iteration  12: 453769.550 ops/s
Iteration  13: 466581.780 ops/s
Iteration  14: 445913.412 ops/s
Iteration  15: 462933.952 ops/s
Iteration  16: 455895.876 ops/s
Iteration  17: 461993.369 ops/s
Iteration  18: 462368.833 ops/s
Iteration  19: 444799.634 ops/s
Iteration  20: 461951.558 ops/s
Iteration  21: 444959.680 ops/s
Iteration  22: 476731.550 ops/s
Iteration  23: 455845.257 ops/s
Iteration  24: 457576.079 ops/s
Iteration  25: 476529.189 ops/s
Iteration  26: 469608.652 ops/s
Iteration  27: 443894.881 ops/s
Iteration  28: 461819.406 ops/s
Iteration  29: 470736.832 ops/s
Iteration  30: 449130.906 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_delayErrorMaxConcurrencyCompletable":
  459352.062 ±(99.9%) 6849.179 ops/s [Average]
  (min, avg, max) = (436823.833, 459352.062, 476731.550), stdev = 10251.530
  CI (99.9%): [452502.882, 466201.241] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_delayErrorMaxConcurrencyCompletable  thrpt   30  459352.062 ± 6849.179  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuter$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuter

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75627.213 ops/s
# Warmup Iteration   2: 272276.377 ops/s
# Warmup Iteration   3: 328730.301 ops/s
# Warmup Iteration   4: 330090.313 ops/s
# Warmup Iteration   5: 329960.179 ops/s
# Warmup Iteration   6: 322450.483 ops/s
# Warmup Iteration   7: 352139.692 ops/s
# Warmup Iteration   8: 349490.953 ops/s
# Warmup Iteration   9: 339462.597 ops/s
# Warmup Iteration  10: 360599.533 ops/s
# Warmup Iteration  11: 344800.530 ops/s
# Warmup Iteration  12: 346900.128 ops/s
# Warmup Iteration  13: 353175.830 ops/s
# Warmup Iteration  14: 333816.244 ops/s
# Warmup Iteration  15: 365016.076 ops/s
# Warmup Iteration  16: 356064.906 ops/s
# Warmup Iteration  17: 362829.415 ops/s
# Warmup Iteration  18: 355977.879 ops/s
# Warmup Iteration  19: 353621.473 ops/s
# Warmup Iteration  20: 342498.818 ops/s
# Warmup Iteration  21: 375226.824 ops/s
# Warmup Iteration  22: 362885.929 ops/s
# Warmup Iteration  23: 373290.908 ops/s
# Warmup Iteration  24: 339605.949 ops/s
# Warmup Iteration  25: 358688.802 ops/s
# Warmup Iteration  26: 366477.709 ops/s
# Warmup Iteration  27: 361111.281 ops/s
# Warmup Iteration  28: 355455.509 ops/s
# Warmup Iteration  29: 364971.953 ops/s
# Warmup Iteration  30: 343896.728 ops/s
Iteration   1: 372756.128 ops/s
Iteration   2: 366349.347 ops/s
Iteration   3: 339642.288 ops/s
Iteration   4: 372716.328 ops/s
Iteration   5: 358061.684 ops/s
Iteration   6: 359131.903 ops/s
Iteration   7: 369734.103 ops/s
Iteration   8: 350216.985 ops/s
Iteration   9: 346802.368 ops/s
Iteration  10: 371370.238 ops/s
Iteration  11: 347702.296 ops/s
Iteration  12: 361447.756 ops/s
Iteration  13: 348078.569 ops/s
Iteration  14: 352801.365 ops/s
Iteration  15: 362870.374 ops/s
Iteration  16: 347535.698 ops/s
Iteration  17: 342343.994 ops/s
Iteration  18: 351015.218 ops/s
Iteration  19: 347414.630 ops/s
Iteration  20: 370299.071 ops/s
Iteration  21: 348435.579 ops/s
Iteration  22: 356297.507 ops/s
Iteration  23: 347274.010 ops/s
Iteration  24: 361368.204 ops/s
Iteration  25: 360537.912 ops/s
Iteration  26: 345726.942 ops/s
Iteration  27: 353948.001 ops/s
Iteration  28: 352441.702 ops/s
Iteration  29: 358695.661 ops/s
Iteration  30: 350175.441 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuter":
  355773.043 ±(99.9%) 6346.328 ops/s [Average]
  (min, avg, max) = (339642.288, 355773.043, 372756.128), stdev = 9498.886
  CI (99.9%): [349426.715, 362119.371] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuter  thrpt   30  355773.043 ± 6346.328  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_delayErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_delayErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 57958.918 ops/s
# Warmup Iteration   2: 270180.946 ops/s
# Warmup Iteration   3: 437930.460 ops/s
# Warmup Iteration   4: 421776.516 ops/s
# Warmup Iteration   5: 428821.716 ops/s
# Warmup Iteration   6: 433201.570 ops/s
# Warmup Iteration   7: 425814.942 ops/s
# Warmup Iteration   8: 418395.758 ops/s
# Warmup Iteration   9: 432112.258 ops/s
# Warmup Iteration  10: 420021.854 ops/s
# Warmup Iteration  11: 434293.418 ops/s
# Warmup Iteration  12: 434727.972 ops/s
# Warmup Iteration  13: 442227.895 ops/s
# Warmup Iteration  14: 447545.271 ops/s
# Warmup Iteration  15: 430172.911 ops/s
# Warmup Iteration  16: 442300.219 ops/s
# Warmup Iteration  17: 451466.198 ops/s
# Warmup Iteration  18: 461300.038 ops/s
# Warmup Iteration  19: 447171.609 ops/s
# Warmup Iteration  20: 448025.657 ops/s
# Warmup Iteration  21: 467282.723 ops/s
# Warmup Iteration  22: 435201.998 ops/s
# Warmup Iteration  23: 442434.256 ops/s
# Warmup Iteration  24: 446911.106 ops/s
# Warmup Iteration  25: 442349.101 ops/s
# Warmup Iteration  26: 466613.190 ops/s
# Warmup Iteration  27: 428647.196 ops/s
# Warmup Iteration  28: 446006.440 ops/s
# Warmup Iteration  29: 462841.771 ops/s
# Warmup Iteration  30: 446083.576 ops/s
Iteration   1: 450801.726 ops/s
Iteration   2: 451584.874 ops/s
Iteration   3: 463665.175 ops/s
Iteration   4: 461249.711 ops/s
Iteration   5: 436828.298 ops/s
Iteration   6: 462931.927 ops/s
Iteration   7: 444658.371 ops/s
Iteration   8: 452816.258 ops/s
Iteration   9: 442185.943 ops/s
Iteration  10: 463057.618 ops/s
Iteration  11: 464169.391 ops/s
Iteration  12: 451560.566 ops/s
Iteration  13: 455598.608 ops/s
Iteration  14: 449072.973 ops/s
Iteration  15: 453461.660 ops/s
Iteration  16: 470191.744 ops/s
Iteration  17: 451786.179 ops/s
Iteration  18: 451176.115 ops/s
Iteration  19: 473087.918 ops/s
Iteration  20: 437350.766 ops/s
Iteration  21: 468028.025 ops/s
Iteration  22: 445319.269 ops/s
Iteration  23: 456261.336 ops/s
Iteration  24: 456849.122 ops/s
Iteration  25: 444789.488 ops/s
Iteration  26: 389354.343 ops/s
Iteration  27: 442839.444 ops/s
Iteration  28: 442299.980 ops/s
Iteration  29: 470111.729 ops/s
Iteration  30: 468154.195 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_delayErrorMaxConcurrency":
  452374.758 ±(99.9%) 10447.641 ops/s [Average]
  (min, avg, max) = (389354.343, 452374.758, 473087.918), stdev = 15637.538
  CI (99.9%): [441927.118, 462822.399] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_delayErrorMaxConcurrency  thrpt   30  452374.758 ± 10447.641  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerErrorDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerErrorDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93325.726 ops/s
# Warmup Iteration   2: 327252.004 ops/s
# Warmup Iteration   3: 531625.319 ops/s
# Warmup Iteration   4: 512779.243 ops/s
# Warmup Iteration   5: 501890.729 ops/s
# Warmup Iteration   6: 574018.289 ops/s
# Warmup Iteration   7: 569941.173 ops/s
# Warmup Iteration   8: 601119.572 ops/s
# Warmup Iteration   9: 588427.107 ops/s
# Warmup Iteration  10: 568452.691 ops/s
# Warmup Iteration  11: 574213.673 ops/s
# Warmup Iteration  12: 601630.661 ops/s
# Warmup Iteration  13: 560597.765 ops/s
# Warmup Iteration  14: 597584.962 ops/s
# Warmup Iteration  15: 572328.929 ops/s
# Warmup Iteration  16: 594635.138 ops/s
# Warmup Iteration  17: 583785.886 ops/s
# Warmup Iteration  18: 597284.719 ops/s
# Warmup Iteration  19: 622590.487 ops/s
# Warmup Iteration  20: 593654.226 ops/s
# Warmup Iteration  21: 606206.445 ops/s
# Warmup Iteration  22: 617499.727 ops/s
# Warmup Iteration  23: 594975.964 ops/s
# Warmup Iteration  24: 621955.562 ops/s
# Warmup Iteration  25: 610426.589 ops/s
# Warmup Iteration  26: 594468.011 ops/s
# Warmup Iteration  27: 618388.183 ops/s
# Warmup Iteration  28: 592272.658 ops/s
# Warmup Iteration  29: 628215.785 ops/s
# Warmup Iteration  30: 582085.486 ops/s
Iteration   1: 620306.207 ops/s
Iteration   2: 594314.446 ops/s
Iteration   3: 606775.601 ops/s
Iteration   4: 598168.670 ops/s
Iteration   5: 629235.390 ops/s
Iteration   6: 588330.843 ops/s
Iteration   7: 608026.569 ops/s
Iteration   8: 598734.710 ops/s
Iteration   9: 594160.186 ops/s
Iteration  10: 609654.480 ops/s
Iteration  11: 594517.117 ops/s
Iteration  12: 631562.818 ops/s
Iteration  13: 610085.767 ops/s
Iteration  14: 591397.673 ops/s
Iteration  15: 613447.565 ops/s
Iteration  16: 594051.584 ops/s
Iteration  17: 600996.061 ops/s
Iteration  18: 608611.091 ops/s
Iteration  19: 595619.613 ops/s
Iteration  20: 606332.128 ops/s
Iteration  21: 601882.760 ops/s
Iteration  22: 627573.659 ops/s
Iteration  23: 593300.709 ops/s
Iteration  24: 601865.618 ops/s
Iteration  25: 617195.276 ops/s
Iteration  26: 596774.253 ops/s
Iteration  27: 628790.922 ops/s
Iteration  28: 601003.054 ops/s
Iteration  29: 593027.210 ops/s
Iteration  30: 622578.698 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerErrorDelayError":
  605944.023 ±(99.9%) 8485.101 ops/s [Average]
  (min, avg, max) = (588330.843, 605944.023, 631562.818), stdev = 12700.101
  CI (99.9%): [597458.922, 614429.124] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
CompletableMergeTest._Benchmark.benchmark_innerErrorDelayError  thrpt   30  605944.023 ± 8485.101  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuterFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuterFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35680.381 ops/s
# Warmup Iteration   2: 164862.193 ops/s
# Warmup Iteration   3: 308341.938 ops/s
# Warmup Iteration   4: 308479.952 ops/s
# Warmup Iteration   5: 320808.792 ops/s
# Warmup Iteration   6: 336965.561 ops/s
# Warmup Iteration   7: 351766.812 ops/s
# Warmup Iteration   8: 331168.544 ops/s
# Warmup Iteration   9: 337487.820 ops/s
# Warmup Iteration  10: 347241.494 ops/s
# Warmup Iteration  11: 332516.218 ops/s
# Warmup Iteration  12: 336138.802 ops/s
# Warmup Iteration  13: 352326.061 ops/s
# Warmup Iteration  14: 331533.037 ops/s
# Warmup Iteration  15: 323226.892 ops/s
# Warmup Iteration  16: 348980.482 ops/s
# Warmup Iteration  17: 344645.729 ops/s
# Warmup Iteration  18: 360375.289 ops/s
# Warmup Iteration  19: 357827.215 ops/s
# Warmup Iteration  20: 348594.311 ops/s
# Warmup Iteration  21: 357413.449 ops/s
# Warmup Iteration  22: 349254.105 ops/s
# Warmup Iteration  23: 368789.892 ops/s
# Warmup Iteration  24: 356752.309 ops/s
# Warmup Iteration  25: 344220.751 ops/s
# Warmup Iteration  26: 363201.979 ops/s
# Warmup Iteration  27: 345946.936 ops/s
# Warmup Iteration  28: 341018.753 ops/s
# Warmup Iteration  29: 355826.805 ops/s
# Warmup Iteration  30: 342583.364 ops/s
Iteration   1: 350302.654 ops/s
Iteration   2: 361704.044 ops/s
Iteration   3: 338102.223 ops/s
Iteration   4: 359948.358 ops/s
Iteration   5: 339593.056 ops/s
Iteration   6: 371659.626 ops/s
Iteration   7: 353869.417 ops/s
Iteration   8: 352889.015 ops/s
Iteration   9: 361111.976 ops/s
Iteration  10: 342138.754 ops/s
Iteration  11: 365758.634 ops/s
Iteration  12: 349539.055 ops/s
Iteration  13: 359756.830 ops/s
Iteration  14: 353714.439 ops/s
Iteration  15: 315559.522 ops/s
Iteration  16: 366337.512 ops/s
Iteration  17: 360777.810 ops/s
Iteration  18: 354059.244 ops/s
Iteration  19: 347204.269 ops/s
Iteration  20: 363059.024 ops/s
Iteration  21: 274381.796 ops/s
Iteration  22: 357185.811 ops/s
Iteration  23: 353025.443 ops/s
Iteration  24: 352266.851 ops/s
Iteration  25: 348552.823 ops/s
Iteration  26: 348711.840 ops/s
Iteration  27: 373001.953 ops/s
Iteration  28: 343544.437 ops/s
Iteration  29: 359577.502 ops/s
Iteration  30: 360679.049 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuterFlowable":
  351267.099 ±(99.9%) 12282.728 ops/s [Average]
  (min, avg, max) = (274381.796, 351267.099, 373001.953), stdev = 18384.211
  CI (99.9%): [338984.370, 363549.827] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score       Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuterFlowable  thrpt   30  351267.099 ± 12282.728  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_errorAfterMainDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_errorAfterMainDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 80861.253 ops/s
# Warmup Iteration   2: 344652.204 ops/s
# Warmup Iteration   3: 504300.282 ops/s
# Warmup Iteration   4: 524079.309 ops/s
# Warmup Iteration   5: 581694.139 ops/s
# Warmup Iteration   6: 515394.000 ops/s
# Warmup Iteration   7: 572339.187 ops/s
# Warmup Iteration   8: 571677.633 ops/s
# Warmup Iteration   9: 562065.597 ops/s
# Warmup Iteration  10: 593977.490 ops/s
# Warmup Iteration  11: 553931.536 ops/s
# Warmup Iteration  12: 583123.824 ops/s
# Warmup Iteration  13: 574024.570 ops/s
# Warmup Iteration  14: 571549.646 ops/s
# Warmup Iteration  15: 579041.216 ops/s
# Warmup Iteration  16: 566313.762 ops/s
# Warmup Iteration  17: 604839.163 ops/s
# Warmup Iteration  18: 614243.241 ops/s
# Warmup Iteration  19: 606034.471 ops/s
# Warmup Iteration  20: 586695.278 ops/s
# Warmup Iteration  21: 628264.436 ops/s
# Warmup Iteration  22: 617384.967 ops/s
# Warmup Iteration  23: 590216.253 ops/s
# Warmup Iteration  24: 589264.484 ops/s
# Warmup Iteration  25: 592516.134 ops/s
# Warmup Iteration  26: 616664.103 ops/s
# Warmup Iteration  27: 604563.198 ops/s
# Warmup Iteration  28: 573874.894 ops/s
# Warmup Iteration  29: 623254.817 ops/s
# Warmup Iteration  30: 589111.471 ops/s
Iteration   1: 602186.927 ops/s
Iteration   2: 616849.234 ops/s
Iteration   3: 598454.731 ops/s
Iteration   4: 607345.937 ops/s
Iteration   5: 599332.389 ops/s
Iteration   6: 592972.612 ops/s
Iteration   7: 629176.156 ops/s
Iteration   8: 618803.566 ops/s
Iteration   9: 613901.555 ops/s
Iteration  10: 590586.995 ops/s
Iteration  11: 608376.889 ops/s
Iteration  12: 576984.378 ops/s
Iteration  13: 594197.251 ops/s
Iteration  14: 599367.571 ops/s
Iteration  15: 595260.041 ops/s
Iteration  16: 588416.946 ops/s
Iteration  17: 622158.856 ops/s
Iteration  18: 579509.660 ops/s
Iteration  19: 593082.259 ops/s
Iteration  20: 573997.199 ops/s
Iteration  21: 604535.001 ops/s
Iteration  22: 623624.485 ops/s
Iteration  23: 586451.108 ops/s
Iteration  24: 611236.621 ops/s
Iteration  25: 592566.566 ops/s
Iteration  26: 612153.440 ops/s
Iteration  27: 590464.675 ops/s
Iteration  28: 589503.389 ops/s
Iteration  29: 632555.685 ops/s
Iteration  30: 572619.752 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_errorAfterMainDelayError":
  600555.729 ±(99.9%) 10672.422 ops/s [Average]
  (min, avg, max) = (572619.752, 600555.729, 632555.685), stdev = 15973.980
  CI (99.9%): [589883.308, 611228.151] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_errorAfterMainDelayError  thrpt   30  600555.729 ± 10672.422  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_onErrorAfterComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_onErrorAfterComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61934.886 ops/s
# Warmup Iteration   2: 186176.528 ops/s
# Warmup Iteration   3: 211565.487 ops/s
# Warmup Iteration   4: 214788.944 ops/s
# Warmup Iteration   5: 248994.189 ops/s
# Warmup Iteration   6: 238022.344 ops/s
# Warmup Iteration   7: 232615.431 ops/s
# Warmup Iteration   8: 250995.427 ops/s
# Warmup Iteration   9: 235509.198 ops/s
# Warmup Iteration  10: 236697.985 ops/s
# Warmup Iteration  11: 246716.385 ops/s
# Warmup Iteration  12: 238567.865 ops/s
# Warmup Iteration  13: 251508.805 ops/s
# Warmup Iteration  14: 239080.475 ops/s
# Warmup Iteration  15: 244375.969 ops/s
# Warmup Iteration  16: 231360.630 ops/s
# Warmup Iteration  17: 258822.232 ops/s
# Warmup Iteration  18: 250708.734 ops/s
# Warmup Iteration  19: 251596.819 ops/s
# Warmup Iteration  20: 255003.433 ops/s
# Warmup Iteration  21: 251220.943 ops/s
# Warmup Iteration  22: 247193.043 ops/s
# Warmup Iteration  23: 254124.598 ops/s
# Warmup Iteration  24: 253106.026 ops/s
# Warmup Iteration  25: 244328.501 ops/s
# Warmup Iteration  26: 253042.523 ops/s
# Warmup Iteration  27: 246243.458 ops/s
# Warmup Iteration  28: 257578.278 ops/s
# Warmup Iteration  29: 247362.680 ops/s
# Warmup Iteration  30: 250467.567 ops/s
Iteration   1: 251091.032 ops/s
Iteration   2: 243549.972 ops/s
Iteration   3: 259475.130 ops/s
Iteration   4: 249566.070 ops/s
Iteration   5: 255128.331 ops/s
Iteration   6: 255550.263 ops/s
Iteration   7: 243982.419 ops/s
Iteration   8: 260044.132 ops/s
Iteration   9: 241901.600 ops/s
Iteration  10: 254627.994 ops/s
Iteration  11: 242231.464 ops/s
Iteration  12: 262695.593 ops/s
Iteration  13: 255292.431 ops/s
Iteration  14: 243660.869 ops/s
Iteration  15: 194810.749 ops/s
Iteration  16: 256125.337 ops/s
Iteration  17: 260996.759 ops/s
Iteration  18: 243426.250 ops/s
Iteration  19: 255482.291 ops/s
Iteration  20: 247261.580 ops/s
Iteration  21: 259717.576 ops/s
Iteration  22: 246733.102 ops/s
Iteration  23: 244710.576 ops/s
Iteration  24: 254331.755 ops/s
Iteration  25: 250015.823 ops/s
Iteration  26: 256825.080 ops/s
Iteration  27: 239074.957 ops/s
Iteration  28: 248947.754 ops/s
Iteration  29: 237914.556 ops/s
Iteration  30: 253514.951 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_onErrorAfterComplete":
  248956.213 ±(99.9%) 8260.725 ops/s [Average]
  (min, avg, max) = (194810.749, 248956.213, 262695.593), stdev = 12364.265
  CI (99.9%): [240695.489, 257216.938] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
CompletableMergeTest._Benchmark.benchmark_onErrorAfterComplete  thrpt   30  248956.213 ± 8260.725  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29030.768 ops/s
# Warmup Iteration   2: 152122.712 ops/s
# Warmup Iteration   3: 173317.214 ops/s
# Warmup Iteration   4: 178454.129 ops/s
# Warmup Iteration   5: 181841.209 ops/s
# Warmup Iteration   6: 199132.678 ops/s
# Warmup Iteration   7: 190499.788 ops/s
# Warmup Iteration   8: 197285.009 ops/s
# Warmup Iteration   9: 192776.424 ops/s
# Warmup Iteration  10: 195794.887 ops/s
# Warmup Iteration  11: 189355.349 ops/s
# Warmup Iteration  12: 201799.675 ops/s
# Warmup Iteration  13: 183800.652 ops/s
# Warmup Iteration  14: 199805.865 ops/s
# Warmup Iteration  15: 190326.056 ops/s
# Warmup Iteration  16: 198288.147 ops/s
# Warmup Iteration  17: 197344.637 ops/s
# Warmup Iteration  18: 200943.881 ops/s
# Warmup Iteration  19: 196560.670 ops/s
# Warmup Iteration  20: 198411.722 ops/s
# Warmup Iteration  21: 205931.562 ops/s
# Warmup Iteration  22: 193747.901 ops/s
# Warmup Iteration  23: 205951.225 ops/s
# Warmup Iteration  24: 191655.258 ops/s
# Warmup Iteration  25: 191898.426 ops/s
# Warmup Iteration  26: 200072.369 ops/s
# Warmup Iteration  27: 195769.558 ops/s
# Warmup Iteration  28: 196622.119 ops/s
# Warmup Iteration  29: 201071.882 ops/s
# Warmup Iteration  30: 201764.587 ops/s
Iteration   1: 206613.057 ops/s
Iteration   2: 195394.394 ops/s
Iteration   3: 203107.754 ops/s
Iteration   4: 202473.361 ops/s
Iteration   5: 202361.116 ops/s
Iteration   6: 205090.499 ops/s
Iteration   7: 193981.492 ops/s
Iteration   8: 210323.527 ops/s
Iteration   9: 198011.166 ops/s
Iteration  10: 201614.759 ops/s
Iteration  11: 195846.232 ops/s
Iteration  12: 202338.462 ops/s
Iteration  13: 203671.519 ops/s
Iteration  14: 191565.205 ops/s
Iteration  15: 196061.329 ops/s
Iteration  16: 205757.931 ops/s
Iteration  17: 193191.844 ops/s
Iteration  18: 203003.514 ops/s
Iteration  19: 196304.699 ops/s
Iteration  20: 194438.762 ops/s
Iteration  21: 206151.080 ops/s
Iteration  22: 203667.162 ops/s
Iteration  23: 197357.669 ops/s
Iteration  24: 205496.369 ops/s
Iteration  25: 196323.500 ops/s
Iteration  26: 200715.724 ops/s
Iteration  27: 196850.068 ops/s
Iteration  28: 205251.118 ops/s
Iteration  29: 206562.919 ops/s
Iteration  30: 204983.654 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd":
  200816.996 ±(99.9%) 3295.154 ops/s [Average]
  (min, avg, max) = (191565.205, 200816.996, 210323.527), stdev = 4932.032
  CI (99.9%): [197521.842, 204112.150] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd  thrpt   30  200816.996 ± 3295.154  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_cancelAfterOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_cancelAfterOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 629274.206 ops/s
# Warmup Iteration   2: 3549232.625 ops/s
# Warmup Iteration   3: 4343776.008 ops/s
# Warmup Iteration   4: 5424029.559 ops/s
# Warmup Iteration   5: 5152113.014 ops/s
# Warmup Iteration   6: 5464294.168 ops/s
# Warmup Iteration   7: 5532230.153 ops/s
# Warmup Iteration   8: 5249762.078 ops/s
# Warmup Iteration   9: 5374502.026 ops/s
# Warmup Iteration  10: 5215015.908 ops/s
# Warmup Iteration  11: 5200251.973 ops/s
# Warmup Iteration  12: 5458563.113 ops/s
# Warmup Iteration  13: 4961307.466 ops/s
# Warmup Iteration  14: 5475701.385 ops/s
# Warmup Iteration  15: 5138292.782 ops/s
# Warmup Iteration  16: 5301368.431 ops/s
# Warmup Iteration  17: 5181176.553 ops/s
# Warmup Iteration  18: 5289875.875 ops/s
# Warmup Iteration  19: 5406657.102 ops/s
# Warmup Iteration  20: 5379565.963 ops/s
# Warmup Iteration  21: 5127914.494 ops/s
# Warmup Iteration  22: 5421679.112 ops/s
# Warmup Iteration  23: 5072248.452 ops/s
# Warmup Iteration  24: 5124595.852 ops/s
# Warmup Iteration  25: 5397526.449 ops/s
# Warmup Iteration  26: 5103885.588 ops/s
# Warmup Iteration  27: 5285540.786 ops/s
# Warmup Iteration  28: 5204850.693 ops/s
# Warmup Iteration  29: 5316776.719 ops/s
# Warmup Iteration  30: 5193661.947 ops/s
Iteration   1: 5365490.840 ops/s
Iteration   2: 5274031.467 ops/s
Iteration   3: 5255137.910 ops/s
Iteration   4: 5419967.061 ops/s
Iteration   5: 5254248.314 ops/s
Iteration   6: 5193037.992 ops/s
Iteration   7: 5514920.931 ops/s
Iteration   8: 5060448.000 ops/s
Iteration   9: 5303883.868 ops/s
Iteration  10: 4544948.032 ops/s
Iteration  11: 5222487.103 ops/s
Iteration  12: 5056552.652 ops/s
Iteration  13: 5257531.817 ops/s
Iteration  14: 5458250.086 ops/s
Iteration  15: 5297583.953 ops/s
Iteration  16: 5258711.702 ops/s
Iteration  17: 5329257.986 ops/s
Iteration  18: 5116336.021 ops/s
Iteration  19: 5288464.064 ops/s
Iteration  20: 5189623.921 ops/s
Iteration  21: 5155294.712 ops/s
Iteration  22: 5189599.351 ops/s
Iteration  23: 5155395.859 ops/s
Iteration  24: 5322473.831 ops/s
Iteration  25: 5150212.767 ops/s
Iteration  26: 5448713.893 ops/s
Iteration  27: 5196288.525 ops/s
Iteration  28: 5202214.305 ops/s
Iteration  29: 5348997.699 ops/s
Iteration  30: 5098621.292 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_cancelAfterOnComplete":
  5230957.532 ±(99.9%) 115633.739 ops/s [Average]
  (min, avg, max) = (4544948.032, 5230957.532, 5514920.931), stdev = 173075.150
  CI (99.9%): [5115323.792, 5346591.271] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
StrictSubscriberTest._Benchmark.benchmark_cancelAfterOnComplete  thrpt   30  5230957.532 ± 115633.739  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_cancelAfterOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_cancelAfterOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 237359.500 ops/s
# Warmup Iteration   2: 604086.220 ops/s
# Warmup Iteration   3: 654252.105 ops/s
# Warmup Iteration   4: 616554.128 ops/s
# Warmup Iteration   5: 658327.101 ops/s
# Warmup Iteration   6: 623280.724 ops/s
# Warmup Iteration   7: 650891.854 ops/s
# Warmup Iteration   8: 656297.688 ops/s
# Warmup Iteration   9: 624551.217 ops/s
# Warmup Iteration  10: 659235.054 ops/s
# Warmup Iteration  11: 634996.106 ops/s
# Warmup Iteration  12: 663778.511 ops/s
# Warmup Iteration  13: 657590.676 ops/s
# Warmup Iteration  14: 640775.063 ops/s
# Warmup Iteration  15: 653902.634 ops/s
# Warmup Iteration  16: 668406.144 ops/s
# Warmup Iteration  17: 656341.011 ops/s
# Warmup Iteration  18: 714656.270 ops/s
# Warmup Iteration  19: 644096.252 ops/s
# Warmup Iteration  20: 693013.999 ops/s
# Warmup Iteration  21: 672249.696 ops/s
# Warmup Iteration  22: 691142.388 ops/s
# Warmup Iteration  23: 673129.225 ops/s
# Warmup Iteration  24: 688834.051 ops/s
# Warmup Iteration  25: 697798.019 ops/s
# Warmup Iteration  26: 673770.371 ops/s
# Warmup Iteration  27: 699203.667 ops/s
# Warmup Iteration  28: 678775.030 ops/s
# Warmup Iteration  29: 685700.196 ops/s
# Warmup Iteration  30: 679227.980 ops/s
Iteration   1: 681368.677 ops/s
Iteration   2: 692486.796 ops/s
Iteration   3: 680871.262 ops/s
Iteration   4: 697151.019 ops/s
Iteration   5: 705355.669 ops/s
Iteration   6: 682530.179 ops/s
Iteration   7: 680346.584 ops/s
Iteration   8: 705034.406 ops/s
Iteration   9: 662089.726 ops/s
Iteration  10: 693364.986 ops/s
Iteration  11: 670776.090 ops/s
Iteration  12: 684883.386 ops/s
Iteration  13: 698774.543 ops/s
Iteration  14: 677663.217 ops/s
Iteration  15: 671769.806 ops/s
Iteration  16: 708369.043 ops/s
Iteration  17: 673614.771 ops/s
Iteration  18: 687437.568 ops/s
Iteration  19: 677001.947 ops/s
Iteration  20: 704692.756 ops/s
Iteration  21: 663385.096 ops/s
Iteration  22: 687770.224 ops/s
Iteration  23: 689693.295 ops/s
Iteration  24: 681448.919 ops/s
Iteration  25: 693531.001 ops/s
Iteration  26: 659082.724 ops/s
Iteration  27: 711042.141 ops/s
Iteration  28: 668215.088 ops/s
Iteration  29: 655395.168 ops/s
Iteration  30: 705149.774 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_cancelAfterOnError":
  685009.862 ±(99.9%) 10322.843 ops/s [Average]
  (min, avg, max) = (655395.168, 685009.862, 711042.141), stdev = 15450.746
  CI (99.9%): [674687.019, 695332.705] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
StrictSubscriberTest._Benchmark.benchmark_cancelAfterOnError  thrpt   30  685009.862 ± 10322.843  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_normalOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_normalOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 353192.651 ops/s
# Warmup Iteration   2: 1272864.539 ops/s
# Warmup Iteration   3: 2073893.560 ops/s
# Warmup Iteration   4: 1833135.739 ops/s
# Warmup Iteration   5: 1762730.861 ops/s
# Warmup Iteration   6: 1911160.803 ops/s
# Warmup Iteration   7: 1942231.502 ops/s
# Warmup Iteration   8: 2015265.182 ops/s
# Warmup Iteration   9: 2052357.305 ops/s
# Warmup Iteration  10: 1977874.315 ops/s
# Warmup Iteration  11: 2011607.391 ops/s
# Warmup Iteration  12: 2020702.603 ops/s
# Warmup Iteration  13: 1983493.576 ops/s
# Warmup Iteration  14: 2028965.977 ops/s
# Warmup Iteration  15: 1984223.685 ops/s
# Warmup Iteration  16: 1967653.001 ops/s
# Warmup Iteration  17: 2023669.797 ops/s
# Warmup Iteration  18: 1996524.528 ops/s
# Warmup Iteration  19: 2039554.473 ops/s
# Warmup Iteration  20: 2124501.614 ops/s
# Warmup Iteration  21: 2068700.102 ops/s
# Warmup Iteration  22: 1995808.904 ops/s
# Warmup Iteration  23: 2021777.593 ops/s
# Warmup Iteration  24: 1990367.742 ops/s
# Warmup Iteration  25: 2011344.092 ops/s
# Warmup Iteration  26: 2013278.321 ops/s
# Warmup Iteration  27: 2064289.890 ops/s
# Warmup Iteration  28: 2013326.509 ops/s
# Warmup Iteration  29: 1996779.404 ops/s
# Warmup Iteration  30: 2076973.955 ops/s
Iteration   1: 1953952.548 ops/s
Iteration   2: 2066332.182 ops/s
Iteration   3: 2082735.385 ops/s
Iteration   4: 2082644.957 ops/s
Iteration   5: 1549847.780 ops/s
Iteration   6: 2064383.979 ops/s
Iteration   7: 1953286.944 ops/s
Iteration   8: 2068292.560 ops/s
Iteration   9: 1960256.687 ops/s
Iteration  10: 2028918.032 ops/s
Iteration  11: 2015163.269 ops/s
Iteration  12: 2039060.974 ops/s
Iteration  13: 2101193.891 ops/s
Iteration  14: 2060578.407 ops/s
Iteration  15: 1973600.999 ops/s
Iteration  16: 1915115.939 ops/s
Iteration  17: 2003695.373 ops/s
Iteration  18: 2076865.403 ops/s
Iteration  19: 1931924.071 ops/s
Iteration  20: 2095256.474 ops/s
Iteration  21: 1941406.349 ops/s
Iteration  22: 1982096.486 ops/s
Iteration  23: 2055873.520 ops/s
Iteration  24: 2121942.192 ops/s
Iteration  25: 1919058.892 ops/s
Iteration  26: 2025238.220 ops/s
Iteration  27: 1992677.085 ops/s
Iteration  28: 2026517.889 ops/s
Iteration  29: 1971720.284 ops/s
Iteration  30: 2013896.133 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_normalOnNext":
  2002451.097 ±(99.9%) 69070.148 ops/s [Average]
  (min, avg, max) = (1549847.780, 2002451.097, 2121942.192), stdev = 103380.953
  CI (99.9%): [1933380.949, 2071521.244] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
StrictSubscriberTest._Benchmark.benchmark_normalOnNext  thrpt   30  2002451.097 ± 69070.148  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_normalOnNextBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_normalOnNextBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 312896.885 ops/s
# Warmup Iteration   2: 1232524.601 ops/s
# Warmup Iteration   3: 1665901.801 ops/s
# Warmup Iteration   4: 1531591.600 ops/s
# Warmup Iteration   5: 1873335.474 ops/s
# Warmup Iteration   6: 1907656.681 ops/s
# Warmup Iteration   7: 1783605.770 ops/s
# Warmup Iteration   8: 1901944.709 ops/s
# Warmup Iteration   9: 1752571.478 ops/s
# Warmup Iteration  10: 1824267.084 ops/s
# Warmup Iteration  11: 1876539.214 ops/s
# Warmup Iteration  12: 1758668.594 ops/s
# Warmup Iteration  13: 1817300.007 ops/s
# Warmup Iteration  14: 1791902.328 ops/s
# Warmup Iteration  15: 1854461.613 ops/s
# Warmup Iteration  16: 1876544.503 ops/s
# Warmup Iteration  17: 1698754.847 ops/s
# Warmup Iteration  18: 1855611.972 ops/s
# Warmup Iteration  19: 1812978.226 ops/s
# Warmup Iteration  20: 1810916.227 ops/s
# Warmup Iteration  21: 1877503.229 ops/s
# Warmup Iteration  22: 1793126.840 ops/s
# Warmup Iteration  23: 1866933.001 ops/s
# Warmup Iteration  24: 1764967.592 ops/s
# Warmup Iteration  25: 1841112.014 ops/s
# Warmup Iteration  26: 1813401.894 ops/s
# Warmup Iteration  27: 1811849.514 ops/s
# Warmup Iteration  28: 1894520.190 ops/s
# Warmup Iteration  29: 1740569.900 ops/s
# Warmup Iteration  30: 1937186.497 ops/s
Iteration   1: 1778664.621 ops/s
Iteration   2: 1815056.542 ops/s
Iteration   3: 1882022.540 ops/s
Iteration   4: 1859316.796 ops/s
Iteration   5: 1753524.979 ops/s
Iteration   6: 1894075.158 ops/s
Iteration   7: 1786673.796 ops/s
Iteration   8: 1860166.110 ops/s
Iteration   9: 1728946.791 ops/s
Iteration  10: 1870974.090 ops/s
Iteration  11: 1893118.512 ops/s
Iteration  12: 1780506.018 ops/s
Iteration  13: 1786244.563 ops/s
Iteration  14: 1913280.468 ops/s
Iteration  15: 1871657.304 ops/s
Iteration  16: 1802097.969 ops/s
Iteration  17: 1859409.077 ops/s
Iteration  18: 1845059.188 ops/s
Iteration  19: 1854187.363 ops/s
Iteration  20: 1850505.559 ops/s
Iteration  21: 1773761.951 ops/s
Iteration  22: 1866994.504 ops/s
Iteration  23: 1792012.639 ops/s
Iteration  24: 1837348.345 ops/s
Iteration  25: 1809955.803 ops/s
Iteration  26: 1781368.556 ops/s
Iteration  27: 1910901.206 ops/s
Iteration  28: 1753902.452 ops/s
Iteration  29: 1826480.828 ops/s
Iteration  30: 1821814.856 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_normalOnNextBackpressured":
  1828667.619 ±(99.9%) 33315.257 ops/s [Average]
  (min, avg, max) = (1728946.791, 1828667.619, 1913280.468), stdev = 49864.712
  CI (99.9%): [1795352.363, 1861982.876] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
StrictSubscriberTest._Benchmark.benchmark_normalOnNextBackpressured  thrpt   30  1828667.619 ± 33315.257  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105032.435 ops/s
# Warmup Iteration   2: 390950.923 ops/s
# Warmup Iteration   3: 452337.469 ops/s
# Warmup Iteration   4: 393961.805 ops/s
# Warmup Iteration   5: 513432.034 ops/s
# Warmup Iteration   6: 501761.293 ops/s
# Warmup Iteration   7: 473881.260 ops/s
# Warmup Iteration   8: 493963.710 ops/s
# Warmup Iteration   9: 484010.931 ops/s
# Warmup Iteration  10: 488344.641 ops/s
# Warmup Iteration  11: 494415.774 ops/s
# Warmup Iteration  12: 482686.276 ops/s
# Warmup Iteration  13: 488222.626 ops/s
# Warmup Iteration  14: 480671.685 ops/s
# Warmup Iteration  15: 488380.956 ops/s
# Warmup Iteration  16: 493548.491 ops/s
# Warmup Iteration  17: 508265.694 ops/s
# Warmup Iteration  18: 512055.361 ops/s
# Warmup Iteration  19: 503278.538 ops/s
# Warmup Iteration  20: 518496.613 ops/s
# Warmup Iteration  21: 510348.964 ops/s
# Warmup Iteration  22: 499118.506 ops/s
# Warmup Iteration  23: 513366.033 ops/s
# Warmup Iteration  24: 524984.737 ops/s
# Warmup Iteration  25: 494268.539 ops/s
# Warmup Iteration  26: 513119.057 ops/s
# Warmup Iteration  27: 501211.605 ops/s
# Warmup Iteration  28: 507125.728 ops/s
# Warmup Iteration  29: 489370.705 ops/s
# Warmup Iteration  30: 428128.027 ops/s
Iteration   1: 508151.173 ops/s
Iteration   2: 498485.666 ops/s
Iteration   3: 522802.276 ops/s
Iteration   4: 503364.564 ops/s
Iteration   5: 518597.434 ops/s
Iteration   6: 494694.492 ops/s
Iteration   7: 527956.129 ops/s
Iteration   8: 502116.834 ops/s
Iteration   9: 510855.396 ops/s
Iteration  10: 499030.694 ops/s
Iteration  11: 505378.555 ops/s
Iteration  12: 517084.969 ops/s
Iteration  13: 489288.444 ops/s
Iteration  14: 511450.471 ops/s
Iteration  15: 499092.157 ops/s
Iteration  16: 513802.520 ops/s
Iteration  17: 527552.941 ops/s
Iteration  18: 489802.021 ops/s
Iteration  19: 529460.455 ops/s
Iteration  20: 523860.406 ops/s
Iteration  21: 475003.370 ops/s
Iteration  22: 535871.060 ops/s
Iteration  23: 493637.658 ops/s
Iteration  24: 514309.253 ops/s
Iteration  25: 505337.339 ops/s
Iteration  26: 527160.277 ops/s
Iteration  27: 529142.852 ops/s
Iteration  28: 485207.757 ops/s
Iteration  29: 524015.492 ops/s
Iteration  30: 500282.502 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_doubleOnSubscribe":
  509426.505 ±(99.9%) 10260.268 ops/s [Average]
  (min, avg, max) = (475003.370, 509426.505, 535871.060), stdev = 15357.087
  CI (99.9%): [499166.237, 519686.773] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
StrictSubscriberTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  509426.505 ± 10260.268  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_with2Others$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_with2Others

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161549.458 ops/s
# Warmup Iteration   2: 552481.112 ops/s
# Warmup Iteration   3: 1788597.516 ops/s
# Warmup Iteration   4: 1928804.056 ops/s
# Warmup Iteration   5: 1985454.247 ops/s
# Warmup Iteration   6: 2009892.652 ops/s
# Warmup Iteration   7: 1856244.669 ops/s
# Warmup Iteration   8: 1874177.765 ops/s
# Warmup Iteration   9: 1640221.007 ops/s
# Warmup Iteration  10: 1965750.346 ops/s
# Warmup Iteration  11: 1953971.258 ops/s
# Warmup Iteration  12: 1942807.617 ops/s
# Warmup Iteration  13: 1976142.645 ops/s
# Warmup Iteration  14: 1887219.544 ops/s
# Warmup Iteration  15: 2013148.612 ops/s
# Warmup Iteration  16: 1904774.498 ops/s
# Warmup Iteration  17: 1903915.803 ops/s
# Warmup Iteration  18: 1991931.431 ops/s
# Warmup Iteration  19: 1883817.168 ops/s
# Warmup Iteration  20: 1940510.274 ops/s
# Warmup Iteration  21: 1915893.202 ops/s
# Warmup Iteration  22: 1920443.273 ops/s
# Warmup Iteration  23: 2021614.597 ops/s
# Warmup Iteration  24: 1859713.313 ops/s
# Warmup Iteration  25: 1974785.322 ops/s
# Warmup Iteration  26: 1992258.004 ops/s
# Warmup Iteration  27: 1904296.056 ops/s
# Warmup Iteration  28: 2021660.201 ops/s
# Warmup Iteration  29: 1900468.299 ops/s
# Warmup Iteration  30: 2007097.508 ops/s
Iteration   1: 1942626.832 ops/s
Iteration   2: 1919028.440 ops/s
Iteration   3: 2002605.883 ops/s
Iteration   4: 1939221.550 ops/s
Iteration   5: 1906017.683 ops/s
Iteration   6: 1943329.691 ops/s
Iteration   7: 1986290.877 ops/s
Iteration   8: 1890988.525 ops/s
Iteration   9: 1978584.151 ops/s
Iteration  10: 1927037.398 ops/s
Iteration  11: 1999103.412 ops/s
Iteration  12: 1835558.918 ops/s
Iteration  13: 1922470.541 ops/s
Iteration  14: 1979688.656 ops/s
Iteration  15: 1924122.246 ops/s
Iteration  16: 1855956.580 ops/s
Iteration  17: 1994990.889 ops/s
Iteration  18: 1963094.262 ops/s
Iteration  19: 1902334.527 ops/s
Iteration  20: 2044796.712 ops/s
Iteration  21: 1889718.807 ops/s
Iteration  22: 1975995.767 ops/s
Iteration  23: 1995892.067 ops/s
Iteration  24: 1884927.992 ops/s
Iteration  25: 1960856.392 ops/s
Iteration  26: 1911081.067 ops/s
Iteration  27: 1861166.491 ops/s
Iteration  28: 2005217.965 ops/s
Iteration  29: 1864752.078 ops/s
Iteration  30: 1901880.450 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_with2Others":
  1936977.895 ±(99.9%) 35058.827 ops/s [Average]
  (min, avg, max) = (1835558.918, 1936977.895, 2044796.712), stdev = 52474.405
  CI (99.9%): [1901919.068, 1972036.722] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_with2Others  thrpt   30  1936977.895 ± 35058.827  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_with3Others$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_with3Others

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105050.654 ops/s
# Warmup Iteration   2: 347383.971 ops/s
# Warmup Iteration   3: 1130894.327 ops/s
# Warmup Iteration   4: 1497948.507 ops/s
# Warmup Iteration   5: 1533720.388 ops/s
# Warmup Iteration   6: 1741155.796 ops/s
# Warmup Iteration   7: 1702515.547 ops/s
# Warmup Iteration   8: 1778412.844 ops/s
# Warmup Iteration   9: 1692473.423 ops/s
# Warmup Iteration  10: 1687530.528 ops/s
# Warmup Iteration  11: 1781582.486 ops/s
# Warmup Iteration  12: 1713538.561 ops/s
# Warmup Iteration  13: 1731833.181 ops/s
# Warmup Iteration  14: 1720597.581 ops/s
# Warmup Iteration  15: 1707052.188 ops/s
# Warmup Iteration  16: 1767394.483 ops/s
# Warmup Iteration  17: 1672972.044 ops/s
# Warmup Iteration  18: 1781991.364 ops/s
# Warmup Iteration  19: 1766455.136 ops/s
# Warmup Iteration  20: 1713795.303 ops/s
# Warmup Iteration  21: 1765434.424 ops/s
# Warmup Iteration  22: 1728790.371 ops/s
# Warmup Iteration  23: 1735090.817 ops/s
# Warmup Iteration  24: 1507412.241 ops/s
# Warmup Iteration  25: 1696166.634 ops/s
# Warmup Iteration  26: 1787579.405 ops/s
# Warmup Iteration  27: 1704002.933 ops/s
# Warmup Iteration  28: 1716316.722 ops/s
# Warmup Iteration  29: 1779475.158 ops/s
# Warmup Iteration  30: 1678500.155 ops/s
Iteration   1: 1759417.494 ops/s
Iteration   2: 1708760.896 ops/s
Iteration   3: 1699502.667 ops/s
Iteration   4: 1818415.942 ops/s
Iteration   5: 1654896.706 ops/s
Iteration   6: 1712997.720 ops/s
Iteration   7: 1679782.195 ops/s
Iteration   8: 1740448.427 ops/s
Iteration   9: 1703927.099 ops/s
Iteration  10: 1771510.438 ops/s
Iteration  11: 1790549.244 ops/s
Iteration  12: 1805058.874 ops/s
Iteration  13: 1656342.245 ops/s
Iteration  14: 1777076.532 ops/s
Iteration  15: 1781400.231 ops/s
Iteration  16: 1753744.746 ops/s
Iteration  17: 1684893.903 ops/s
Iteration  18: 1713338.415 ops/s
Iteration  19: 1702963.603 ops/s
Iteration  20: 1749904.124 ops/s
Iteration  21: 1734303.050 ops/s
Iteration  22: 1718196.917 ops/s
Iteration  23: 1768850.671 ops/s
Iteration  24: 1693462.367 ops/s
Iteration  25: 1733487.172 ops/s
Iteration  26: 1703094.818 ops/s
Iteration  27: 1724527.876 ops/s
Iteration  28: 1760974.395 ops/s
Iteration  29: 1671730.882 ops/s
Iteration  30: 1769956.625 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_with3Others":
  1731450.542 ±(99.9%) 28902.343 ops/s [Average]
  (min, avg, max) = (1654896.706, 1731450.542, 1818415.942), stdev = 43259.670
  CI (99.9%): [1702548.199, 1760352.886] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_with3Others  thrpt   30  1731450.542 ± 28902.343  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_with4Others$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_with4Others

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 153438.450 ops/s
# Warmup Iteration   2: 641137.851 ops/s
# Warmup Iteration   3: 1381071.053 ops/s
# Warmup Iteration   4: 1428645.099 ops/s
# Warmup Iteration   5: 1682462.463 ops/s
# Warmup Iteration   6: 1649410.120 ops/s
# Warmup Iteration   7: 1613410.098 ops/s
# Warmup Iteration   8: 1656364.588 ops/s
# Warmup Iteration   9: 1598580.168 ops/s
# Warmup Iteration  10: 1656249.284 ops/s
# Warmup Iteration  11: 1566645.618 ops/s
# Warmup Iteration  12: 1650299.612 ops/s
# Warmup Iteration  13: 1610568.303 ops/s
# Warmup Iteration  14: 1603101.205 ops/s
# Warmup Iteration  15: 1629227.455 ops/s
# Warmup Iteration  16: 1608397.465 ops/s
# Warmup Iteration  17: 1598492.770 ops/s
# Warmup Iteration  18: 1608710.339 ops/s
# Warmup Iteration  19: 1618640.633 ops/s
# Warmup Iteration  20: 1738502.967 ops/s
# Warmup Iteration  21: 1600788.090 ops/s
# Warmup Iteration  22: 1702452.857 ops/s
# Warmup Iteration  23: 1695619.203 ops/s
# Warmup Iteration  24: 1598637.613 ops/s
# Warmup Iteration  25: 1642877.458 ops/s
# Warmup Iteration  26: 1651107.505 ops/s
# Warmup Iteration  27: 1591334.786 ops/s
# Warmup Iteration  28: 1649011.267 ops/s
# Warmup Iteration  29: 1564994.655 ops/s
# Warmup Iteration  30: 1657347.282 ops/s
Iteration   1: 1598231.021 ops/s
Iteration   2: 1620070.887 ops/s
Iteration   3: 1695698.296 ops/s
Iteration   4: 1590302.534 ops/s
Iteration   5: 1606512.545 ops/s
Iteration   6: 1611245.334 ops/s
Iteration   7: 1679296.511 ops/s
Iteration   8: 1590180.288 ops/s
Iteration   9: 1640412.047 ops/s
Iteration  10: 1704279.595 ops/s
Iteration  11: 1643248.734 ops/s
Iteration  12: 1580591.696 ops/s
Iteration  13: 1662351.234 ops/s
Iteration  14: 1644222.273 ops/s
Iteration  15: 1617433.603 ops/s
Iteration  16: 1660363.450 ops/s
Iteration  17: 1635871.608 ops/s
Iteration  18: 1622290.692 ops/s
Iteration  19: 1613633.358 ops/s
Iteration  20: 1659199.066 ops/s
Iteration  21: 1630693.941 ops/s
Iteration  22: 1652434.128 ops/s
Iteration  23: 1613168.247 ops/s
Iteration  24: 1647745.424 ops/s
Iteration  25: 1728450.468 ops/s
Iteration  26: 1591960.895 ops/s
Iteration  27: 1693407.439 ops/s
Iteration  28: 1580315.767 ops/s
Iteration  29: 1574979.376 ops/s
Iteration  30: 1652102.274 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_with4Others":
  1634689.758 ±(99.9%) 26403.294 ops/s [Average]
  (min, avg, max) = (1574979.376, 1634689.758, 1728450.468), stdev = 39519.210
  CI (99.9%): [1608286.464, 1661093.052] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_with4Others  thrpt   30  1634689.758 ± 26403.294  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1620428.512 ops/s
# Warmup Iteration   2: 5366339.848 ops/s
# Warmup Iteration   3: 6049243.054 ops/s
# Warmup Iteration   4: 7266034.571 ops/s
# Warmup Iteration   5: 8078623.898 ops/s
# Warmup Iteration   6: 7385241.814 ops/s
# Warmup Iteration   7: 7393003.369 ops/s
# Warmup Iteration   8: 7713250.264 ops/s
# Warmup Iteration   9: 7485087.306 ops/s
# Warmup Iteration  10: 7574201.369 ops/s
# Warmup Iteration  11: 7649550.532 ops/s
# Warmup Iteration  12: 7585405.813 ops/s
# Warmup Iteration  13: 7910474.518 ops/s
# Warmup Iteration  14: 7493355.734 ops/s
# Warmup Iteration  15: 7525634.347 ops/s
# Warmup Iteration  16: 7485155.347 ops/s
# Warmup Iteration  17: 7682908.712 ops/s
# Warmup Iteration  18: 7476405.777 ops/s
# Warmup Iteration  19: 6381461.022 ops/s
# Warmup Iteration  20: 7638371.263 ops/s
# Warmup Iteration  21: 7479150.070 ops/s
# Warmup Iteration  22: 7747913.836 ops/s
# Warmup Iteration  23: 7491746.111 ops/s
# Warmup Iteration  24: 7356122.657 ops/s
# Warmup Iteration  25: 7791177.667 ops/s
# Warmup Iteration  26: 7410269.160 ops/s
# Warmup Iteration  27: 7752080.790 ops/s
# Warmup Iteration  28: 7696072.257 ops/s
# Warmup Iteration  29: 7430125.502 ops/s
# Warmup Iteration  30: 7645991.888 ops/s
Iteration   1: 7523101.686 ops/s
Iteration   2: 7532503.448 ops/s
Iteration   3: 7441289.915 ops/s
Iteration   4: 7642921.003 ops/s
Iteration   5: 7701874.554 ops/s
Iteration   6: 7530320.222 ops/s
Iteration   7: 7572391.585 ops/s
Iteration   8: 7355221.100 ops/s
Iteration   9: 7829792.233 ops/s
Iteration  10: 7363709.080 ops/s
Iteration  11: 7756483.858 ops/s
Iteration  12: 7620707.969 ops/s
Iteration  13: 7758460.536 ops/s
Iteration  14: 7314978.422 ops/s
Iteration  15: 7603059.068 ops/s
Iteration  16: 7647378.466 ops/s
Iteration  17: 7395173.973 ops/s
Iteration  18: 7800093.798 ops/s
Iteration  19: 7708328.929 ops/s
Iteration  20: 7604992.384 ops/s
Iteration  21: 7777513.216 ops/s
Iteration  22: 7536266.533 ops/s
Iteration  23: 7762930.971 ops/s
Iteration  24: 7610098.713 ops/s
Iteration  25: 7761161.557 ops/s
Iteration  26: 7515516.751 ops/s
Iteration  27: 7846458.032 ops/s
Iteration  28: 7284177.641 ops/s
Iteration  29: 7756675.919 ops/s
Iteration  30: 7354025.499 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_dispose":
  7596920.235 ±(99.9%) 110264.986 ops/s [Average]
  (min, avg, max) = (7284177.641, 7596920.235, 7846458.032), stdev = 165039.453
  CI (99.9%): [7486655.249, 7707185.221] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
CompletableMergeTest._Benchmark.benchmark_dispose  thrpt   30  7596920.235 ± 110264.986  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 396636.195 ops/s
# Warmup Iteration   2: 1762449.424 ops/s
# Warmup Iteration   3: 2230530.393 ops/s
# Warmup Iteration   4: 2479870.910 ops/s
# Warmup Iteration   5: 2697875.589 ops/s
# Warmup Iteration   6: 2663533.509 ops/s
# Warmup Iteration   7: 2537931.760 ops/s
# Warmup Iteration   8: 2688630.396 ops/s
# Warmup Iteration   9: 2559078.939 ops/s
# Warmup Iteration  10: 2717659.608 ops/s
# Warmup Iteration  11: 2665614.722 ops/s
# Warmup Iteration  12: 2537812.239 ops/s
# Warmup Iteration  13: 2624755.631 ops/s
# Warmup Iteration  14: 2513322.516 ops/s
# Warmup Iteration  15: 2550124.655 ops/s
# Warmup Iteration  16: 2643180.469 ops/s
# Warmup Iteration  17: 2576290.583 ops/s
# Warmup Iteration  18: 2587928.952 ops/s
# Warmup Iteration  19: 2654974.857 ops/s
# Warmup Iteration  20: 2553309.081 ops/s
# Warmup Iteration  21: 2563384.651 ops/s
# Warmup Iteration  22: 2601486.346 ops/s
# Warmup Iteration  23: 2588976.470 ops/s
# Warmup Iteration  24: 2503540.588 ops/s
# Warmup Iteration  25: 2611487.164 ops/s
# Warmup Iteration  26: 2593468.447 ops/s
# Warmup Iteration  27: 2686328.969 ops/s
# Warmup Iteration  28: 2495559.594 ops/s
# Warmup Iteration  29: 2690435.778 ops/s
# Warmup Iteration  30: 2627112.783 ops/s
Iteration   1: 2590653.312 ops/s
Iteration   2: 2655293.620 ops/s
Iteration   3: 2511731.348 ops/s
Iteration   4: 2590057.195 ops/s
Iteration   5: 2657781.760 ops/s
Iteration   6: 2553680.010 ops/s
Iteration   7: 2702997.859 ops/s
Iteration   8: 2528277.579 ops/s
Iteration   9: 2639695.335 ops/s
Iteration  10: 2573194.456 ops/s
Iteration  11: 2617692.677 ops/s
Iteration  12: 2671099.941 ops/s
Iteration  13: 2538318.869 ops/s
Iteration  14: 2570981.083 ops/s
Iteration  15: 2663305.257 ops/s
Iteration  16: 2554359.247 ops/s
Iteration  17: 2613734.547 ops/s
Iteration  18: 2566117.050 ops/s
Iteration  19: 2597314.451 ops/s
Iteration  20: 2680153.781 ops/s
Iteration  21: 2586078.567 ops/s
Iteration  22: 2639154.852 ops/s
Iteration  23: 2574861.261 ops/s
Iteration  24: 2622974.052 ops/s
Iteration  25: 2517183.338 ops/s
Iteration  26: 2570327.247 ops/s
Iteration  27: 2578871.921 ops/s
Iteration  28: 2626066.568 ops/s
Iteration  29: 2638096.509 ops/s
Iteration  30: 2574622.031 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete":
  2600155.857 ±(99.9%) 33356.416 ops/s [Average]
  (min, avg, max) = (2511731.348, 2600155.857, 2702997.859), stdev = 49926.316
  CI (99.9%): [2566799.442, 2633512.273] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete  thrpt   30  2600155.857 ± 33356.416  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherMainComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherMainComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 523386.820 ops/s
# Warmup Iteration   2: 1907987.104 ops/s
# Warmup Iteration   3: 2234951.721 ops/s
# Warmup Iteration   4: 2529805.810 ops/s
# Warmup Iteration   5: 2517822.708 ops/s
# Warmup Iteration   6: 2610113.952 ops/s
# Warmup Iteration   7: 2494877.158 ops/s
# Warmup Iteration   8: 2536351.995 ops/s
# Warmup Iteration   9: 2657540.025 ops/s
# Warmup Iteration  10: 2522552.898 ops/s
# Warmup Iteration  11: 2493002.160 ops/s
# Warmup Iteration  12: 2623431.926 ops/s
# Warmup Iteration  13: 2613403.832 ops/s
# Warmup Iteration  14: 2224681.833 ops/s
# Warmup Iteration  15: 2405261.360 ops/s
# Warmup Iteration  16: 2562272.717 ops/s
# Warmup Iteration  17: 2506035.289 ops/s
# Warmup Iteration  18: 2618700.811 ops/s
# Warmup Iteration  19: 2486149.976 ops/s
# Warmup Iteration  20: 2534074.379 ops/s
# Warmup Iteration  21: 2614218.598 ops/s
# Warmup Iteration  22: 2514843.125 ops/s
# Warmup Iteration  23: 2632259.686 ops/s
# Warmup Iteration  24: 2567801.506 ops/s
# Warmup Iteration  25: 2524347.269 ops/s
# Warmup Iteration  26: 2672342.479 ops/s
# Warmup Iteration  27: 2495570.815 ops/s
# Warmup Iteration  28: 2532726.339 ops/s
# Warmup Iteration  29: 2618010.489 ops/s
# Warmup Iteration  30: 2546597.447 ops/s
Iteration   1: 2567871.393 ops/s
Iteration   2: 2547831.399 ops/s
Iteration   3: 2528845.947 ops/s
Iteration   4: 2621142.772 ops/s
Iteration   5: 2497236.129 ops/s
Iteration   6: 2591673.948 ops/s
Iteration   7: 2660665.069 ops/s
Iteration   8: 2486183.815 ops/s
Iteration   9: 2673395.756 ops/s
Iteration  10: 2477442.022 ops/s
Iteration  11: 2564632.727 ops/s
Iteration  12: 2591223.859 ops/s
Iteration  13: 2509759.210 ops/s
Iteration  14: 2559975.097 ops/s
Iteration  15: 2600237.517 ops/s
Iteration  16: 2555178.389 ops/s
Iteration  17: 2507299.524 ops/s
Iteration  18: 2657303.614 ops/s
Iteration  19: 2507518.819 ops/s
Iteration  20: 2593748.688 ops/s
Iteration  21: 2567334.058 ops/s
Iteration  22: 2571741.466 ops/s
Iteration  23: 2538744.813 ops/s
Iteration  24: 2543439.376 ops/s
Iteration  25: 2647768.016 ops/s
Iteration  26: 2476577.104 ops/s
Iteration  27: 2658174.710 ops/s
Iteration  28: 2437088.475 ops/s
Iteration  29: 2559164.840 ops/s
Iteration  30: 2556286.489 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherMainComplete":
  2561849.501 ±(99.9%) 40517.843 ops/s [Average]
  (min, avg, max) = (2437088.475, 2561849.501, 2673395.756), stdev = 60645.205
  CI (99.9%): [2521331.658, 2602367.345] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherMainComplete  thrpt   30  2561849.501 ± 40517.843  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDefaultIfEmptyTest._Benchmark.benchmark_backpressureNonEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDefaultIfEmptyTest._Benchmark.benchmark_backpressureNonEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 331958.258 ops/s
# Warmup Iteration   2: 1604992.128 ops/s
# Warmup Iteration   3: 2647090.595 ops/s
# Warmup Iteration   4: 2492798.400 ops/s
# Warmup Iteration   5: 2767026.996 ops/s
# Warmup Iteration   6: 2741057.905 ops/s
# Warmup Iteration   7: 2814213.391 ops/s
# Warmup Iteration   8: 2949668.031 ops/s
# Warmup Iteration   9: 2755412.328 ops/s
# Warmup Iteration  10: 2955287.650 ops/s
# Warmup Iteration  11: 2882598.497 ops/s
# Warmup Iteration  12: 2792459.645 ops/s
# Warmup Iteration  13: 2885590.395 ops/s
# Warmup Iteration  14: 2728521.765 ops/s
# Warmup Iteration  15: 2946240.208 ops/s
# Warmup Iteration  16: 2721886.466 ops/s
# Warmup Iteration  17: 2829074.551 ops/s
# Warmup Iteration  18: 2947172.376 ops/s
# Warmup Iteration  19: 2740462.756 ops/s
# Warmup Iteration  20: 2906475.949 ops/s
# Warmup Iteration  21: 2834572.921 ops/s
# Warmup Iteration  22: 2799001.573 ops/s
# Warmup Iteration  23: 2916314.006 ops/s
# Warmup Iteration  24: 2817490.193 ops/s
# Warmup Iteration  25: 2879209.930 ops/s
# Warmup Iteration  26: 2733414.966 ops/s
# Warmup Iteration  27: 2920682.298 ops/s
# Warmup Iteration  28: 2780106.048 ops/s
# Warmup Iteration  29: 2847426.084 ops/s
# Warmup Iteration  30: 2956747.565 ops/s
Iteration   1: 2811287.920 ops/s
Iteration   2: 2947413.920 ops/s
Iteration   3: 2805631.215 ops/s
Iteration   4: 2839366.278 ops/s
Iteration   5: 2849024.864 ops/s
Iteration   6: 2885854.975 ops/s
Iteration   7: 2847636.869 ops/s
Iteration   8: 2808706.866 ops/s
Iteration   9: 2859329.722 ops/s
Iteration  10: 2904797.301 ops/s
Iteration  11: 2809418.003 ops/s
Iteration  12: 2921253.378 ops/s
Iteration  13: 2794566.516 ops/s
Iteration  14: 2817374.362 ops/s
Iteration  15: 2842771.655 ops/s
Iteration  16: 2813838.077 ops/s
Iteration  17: 2867091.609 ops/s
Iteration  18: 2948191.445 ops/s
Iteration  19: 2813746.057 ops/s
Iteration  20: 2901857.681 ops/s
Iteration  21: 2750575.100 ops/s
Iteration  22: 2864284.440 ops/s
Iteration  23: 2815614.074 ops/s
Iteration  24: 2889298.857 ops/s
Iteration  25: 2842140.993 ops/s
Iteration  26: 2815245.944 ops/s
Iteration  27: 2982922.442 ops/s
Iteration  28: 2709475.075 ops/s
Iteration  29: 2894642.914 ops/s
Iteration  30: 2782033.897 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDefaultIfEmptyTest._Benchmark.benchmark_backpressureNonEmpty":
  2847846.415 ±(99.9%) 39873.069 ops/s [Average]
  (min, avg, max) = (2709475.075, 2847846.415, 2982922.442), stdev = 59680.138
  CI (99.9%): [2807973.345, 2887719.484] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableDefaultIfEmptyTest._Benchmark.benchmark_backpressureNonEmpty  thrpt   30  2847846.415 ± 39873.069  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 403928.595 ops/s
# Warmup Iteration   2: 1738294.821 ops/s
# Warmup Iteration   3: 2294584.949 ops/s
# Warmup Iteration   4: 2430682.710 ops/s
# Warmup Iteration   5: 2587567.477 ops/s
# Warmup Iteration   6: 2477601.863 ops/s
# Warmup Iteration   7: 2498176.370 ops/s
# Warmup Iteration   8: 2557311.064 ops/s
# Warmup Iteration   9: 1983641.663 ops/s
# Warmup Iteration  10: 2597896.346 ops/s
# Warmup Iteration  11: 2451320.733 ops/s
# Warmup Iteration  12: 2489805.374 ops/s
# Warmup Iteration  13: 2547164.692 ops/s
# Warmup Iteration  14: 2450421.497 ops/s
# Warmup Iteration  15: 2513006.026 ops/s
# Warmup Iteration  16: 2487074.016 ops/s
# Warmup Iteration  17: 2568926.641 ops/s
# Warmup Iteration  18: 2538784.956 ops/s
# Warmup Iteration  19: 2479635.771 ops/s
# Warmup Iteration  20: 2548038.720 ops/s
# Warmup Iteration  21: 2525347.043 ops/s
# Warmup Iteration  22: 2595818.496 ops/s
# Warmup Iteration  23: 2439724.283 ops/s
# Warmup Iteration  24: 2470155.921 ops/s
# Warmup Iteration  25: 2596676.518 ops/s
# Warmup Iteration  26: 2411034.774 ops/s
# Warmup Iteration  27: 2554687.178 ops/s
# Warmup Iteration  28: 2532777.985 ops/s
# Warmup Iteration  29: 2475813.866 ops/s
# Warmup Iteration  30: 2558578.409 ops/s
Iteration   1: 2489717.089 ops/s
Iteration   2: 2484260.935 ops/s
Iteration   3: 2572390.501 ops/s
Iteration   4: 2458194.262 ops/s
Iteration   5: 2544012.196 ops/s
Iteration   6: 2443787.959 ops/s
Iteration   7: 2567958.095 ops/s
Iteration   8: 2416784.054 ops/s
Iteration   9: 2607170.579 ops/s
Iteration  10: 2546857.379 ops/s
Iteration  11: 2477960.502 ops/s
Iteration  12: 2434657.388 ops/s
Iteration  13: 2615949.804 ops/s
Iteration  14: 2488754.050 ops/s
Iteration  15: 2467946.416 ops/s
Iteration  16: 2532665.968 ops/s
Iteration  17: 2460444.730 ops/s
Iteration  18: 2474799.043 ops/s
Iteration  19: 2613945.568 ops/s
Iteration  20: 2484209.054 ops/s
Iteration  21: 2626487.110 ops/s
Iteration  22: 2504980.094 ops/s
Iteration  23: 2466179.502 ops/s
Iteration  24: 2555627.699 ops/s
Iteration  25: 2387883.972 ops/s
Iteration  26: 2568961.522 ops/s
Iteration  27: 2446182.849 ops/s
Iteration  28: 2536889.372 ops/s
Iteration  29: 2505709.404 ops/s
Iteration  30: 2513762.682 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext":
  2509837.659 ±(99.9%) 41646.026 ops/s [Average]
  (min, avg, max) = (2387883.972, 2509837.659, 2626487.110), stdev = 62333.816
  CI (99.9%): [2468191.633, 2551483.685] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext  thrpt   30  2509837.659 ± 41646.026  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1051405.725 ops/s
# Warmup Iteration   2: 3202626.404 ops/s
# Warmup Iteration   3: 3376537.673 ops/s
# Warmup Iteration   4: 4059904.901 ops/s
# Warmup Iteration   5: 3944312.900 ops/s
# Warmup Iteration   6: 3949069.849 ops/s
# Warmup Iteration   7: 3990278.599 ops/s
# Warmup Iteration   8: 4098498.895 ops/s
# Warmup Iteration   9: 4101200.532 ops/s
# Warmup Iteration  10: 3965010.178 ops/s
# Warmup Iteration  11: 3894810.430 ops/s
# Warmup Iteration  12: 3997668.302 ops/s
# Warmup Iteration  13: 3996583.634 ops/s
# Warmup Iteration  14: 4088002.734 ops/s
# Warmup Iteration  15: 4148908.188 ops/s
# Warmup Iteration  16: 3937293.385 ops/s
# Warmup Iteration  17: 4159370.819 ops/s
# Warmup Iteration  18: 3961926.965 ops/s
# Warmup Iteration  19: 3968248.168 ops/s
# Warmup Iteration  20: 4094802.073 ops/s
# Warmup Iteration  21: 3843807.850 ops/s
# Warmup Iteration  22: 4157524.861 ops/s
# Warmup Iteration  23: 3886906.583 ops/s
# Warmup Iteration  24: 4077241.458 ops/s
# Warmup Iteration  25: 4004375.872 ops/s
# Warmup Iteration  26: 3954398.444 ops/s
# Warmup Iteration  27: 4042989.444 ops/s
# Warmup Iteration  28: 3847760.790 ops/s
# Warmup Iteration  29: 4105534.348 ops/s
# Warmup Iteration  30: 3950113.700 ops/s
Iteration   1: 3948260.374 ops/s
Iteration   2: 4119708.498 ops/s
Iteration   3: 4052644.618 ops/s
Iteration   4: 3978062.288 ops/s
Iteration   5: 4050373.311 ops/s
Iteration   6: 4025704.054 ops/s
Iteration   7: 3996578.224 ops/s
Iteration   8: 4035038.835 ops/s
Iteration   9: 3901932.309 ops/s
Iteration  10: 4119921.041 ops/s
Iteration  11: 3987796.696 ops/s
Iteration  12: 3984191.260 ops/s
Iteration  13: 3917493.823 ops/s
Iteration  14: 3939062.295 ops/s
Iteration  15: 3952193.219 ops/s
Iteration  16: 4181340.256 ops/s
Iteration  17: 3975199.501 ops/s
Iteration  18: 4123435.793 ops/s
Iteration  19: 3995351.691 ops/s
Iteration  20: 3974379.216 ops/s
Iteration  21: 4139292.657 ops/s
Iteration  22: 3920870.539 ops/s
Iteration  23: 4042792.314 ops/s
Iteration  24: 4007828.807 ops/s
Iteration  25: 4158740.133 ops/s
Iteration  26: 4122581.150 ops/s
Iteration  27: 3869127.082 ops/s
Iteration  28: 4226556.089 ops/s
Iteration  29: 4115028.920 ops/s
Iteration  30: 3857241.668 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext":
  4023957.555 ±(99.9%) 63739.165 ops/s [Average]
  (min, avg, max) = (3857241.668, 4023957.555, 4226556.089), stdev = 95401.788
  CI (99.9%): [3960218.391, 4087696.720] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_disposeBeforeSwitchInOnNext  thrpt   30  4023957.555 ± 63739.165  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_delayAndTakeUntilNeverSubscribeToSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_delayAndTakeUntilNeverSubscribeToSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 489476.785 ops/s
# Warmup Iteration   2: 1436803.542 ops/s
# Warmup Iteration   3: 1814562.362 ops/s
# Warmup Iteration   4: 1823119.474 ops/s
# Warmup Iteration   5: 2253531.060 ops/s
# Warmup Iteration   6: 2281110.403 ops/s
# Warmup Iteration   7: 2431024.858 ops/s
# Warmup Iteration   8: 2176619.548 ops/s
# Warmup Iteration   9: 2304242.667 ops/s
# Warmup Iteration  10: 2261278.323 ops/s
# Warmup Iteration  11: 2299173.913 ops/s
# Warmup Iteration  12: 2241406.880 ops/s
# Warmup Iteration  13: 2353398.435 ops/s
# Warmup Iteration  14: 2410211.798 ops/s
# Warmup Iteration  15: 2255815.153 ops/s
# Warmup Iteration  16: 2324126.462 ops/s
# Warmup Iteration  17: 2194815.922 ops/s
# Warmup Iteration  18: 2276250.676 ops/s
# Warmup Iteration  19: 2360750.059 ops/s
# Warmup Iteration  20: 2299535.478 ops/s
# Warmup Iteration  21: 2446485.924 ops/s
# Warmup Iteration  22: 2385418.053 ops/s
# Warmup Iteration  23: 2367823.614 ops/s
# Warmup Iteration  24: 2261482.058 ops/s
# Warmup Iteration  25: 2257838.360 ops/s
# Warmup Iteration  26: 2313728.071 ops/s
# Warmup Iteration  27: 2264366.733 ops/s
# Warmup Iteration  28: 2301509.178 ops/s
# Warmup Iteration  29: 2390730.243 ops/s
# Warmup Iteration  30: 2203835.695 ops/s
Iteration   1: 2375927.724 ops/s
Iteration   2: 2379242.828 ops/s
Iteration   3: 2223270.863 ops/s
Iteration   4: 2285895.548 ops/s
Iteration   5: 2290661.359 ops/s
Iteration   6: 2320901.876 ops/s
Iteration   7: 2387974.196 ops/s
Iteration   8: 2238168.390 ops/s
Iteration   9: 2286508.628 ops/s
Iteration  10: 2350519.282 ops/s
Iteration  11: 2188798.820 ops/s
Iteration  12: 2305264.227 ops/s
Iteration  13: 2281175.523 ops/s
Iteration  14: 2258694.883 ops/s
Iteration  15: 2299633.729 ops/s
Iteration  16: 2352551.317 ops/s
Iteration  17: 2383736.557 ops/s
Iteration  18: 2234725.415 ops/s
Iteration  19: 2346107.172 ops/s
Iteration  20: 2190248.846 ops/s
Iteration  21: 2337390.133 ops/s
Iteration  22: 2199771.469 ops/s
Iteration  23: 2370452.881 ops/s
Iteration  24: 2206808.934 ops/s
Iteration  25: 2295996.765 ops/s
Iteration  26: 2364998.732 ops/s
Iteration  27: 2265759.606 ops/s
Iteration  28: 2312720.248 ops/s
Iteration  29: 2274660.931 ops/s
Iteration  30: 2307634.038 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_delayAndTakeUntilNeverSubscribeToSource":
  2297206.697 ±(99.9%) 40534.368 ops/s [Average]
  (min, avg, max) = (2188798.820, 2297206.697, 2387974.196), stdev = 60669.938
  CI (99.9%): [2256672.330, 2337741.065] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt        Score       Error  Units
FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_delayAndTakeUntilNeverSubscribeToSource  thrpt   30  2297206.697 ± 40534.368  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_combineToNull2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_combineToNull2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 59328.984 ops/s
# Warmup Iteration   2: 194974.567 ops/s
# Warmup Iteration   3: 464672.975 ops/s
# Warmup Iteration   4: 450359.732 ops/s
# Warmup Iteration   5: 470081.681 ops/s
# Warmup Iteration   6: 432407.084 ops/s
# Warmup Iteration   7: 457794.305 ops/s
# Warmup Iteration   8: 462800.943 ops/s
# Warmup Iteration   9: 465580.701 ops/s
# Warmup Iteration  10: 451944.975 ops/s
# Warmup Iteration  11: 450344.700 ops/s
# Warmup Iteration  12: 481490.139 ops/s
# Warmup Iteration  13: 451995.745 ops/s
# Warmup Iteration  14: 469874.745 ops/s
# Warmup Iteration  15: 446842.772 ops/s
# Warmup Iteration  16: 468388.983 ops/s
# Warmup Iteration  17: 482914.108 ops/s
# Warmup Iteration  18: 487848.289 ops/s
# Warmup Iteration  19: 477845.016 ops/s
# Warmup Iteration  20: 487974.539 ops/s
# Warmup Iteration  21: 480208.155 ops/s
# Warmup Iteration  22: 480371.862 ops/s
# Warmup Iteration  23: 486474.210 ops/s
# Warmup Iteration  24: 467140.536 ops/s
# Warmup Iteration  25: 502307.507 ops/s
# Warmup Iteration  26: 476502.271 ops/s
# Warmup Iteration  27: 468803.641 ops/s
# Warmup Iteration  28: 507440.563 ops/s
# Warmup Iteration  29: 465507.410 ops/s
# Warmup Iteration  30: 484775.410 ops/s
Iteration   1: 469579.317 ops/s
Iteration   2: 486935.282 ops/s
Iteration   3: 488602.473 ops/s
Iteration   4: 451313.031 ops/s
Iteration   5: 494447.493 ops/s
Iteration   6: 484426.749 ops/s
Iteration   7: 487796.586 ops/s
Iteration   8: 463447.298 ops/s
Iteration   9: 504993.002 ops/s
Iteration  10: 473431.492 ops/s
Iteration  11: 479139.936 ops/s
Iteration  12: 491643.914 ops/s
Iteration  13: 490890.327 ops/s
Iteration  14: 488029.683 ops/s
Iteration  15: 491468.699 ops/s
Iteration  16: 473675.605 ops/s
Iteration  17: 478200.189 ops/s
Iteration  18: 504706.158 ops/s
Iteration  19: 470726.603 ops/s
Iteration  20: 487155.413 ops/s
Iteration  21: 495260.451 ops/s
Iteration  22: 475151.873 ops/s
Iteration  23: 495263.855 ops/s
Iteration  24: 482976.204 ops/s
Iteration  25: 487493.265 ops/s
Iteration  26: 489945.877 ops/s
Iteration  27: 476684.593 ops/s
Iteration  28: 495316.780 ops/s
Iteration  29: 471016.700 ops/s
Iteration  30: 450893.187 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_combineToNull2":
  482687.068 ±(99.9%) 8891.675 ops/s [Average]
  (min, avg, max) = (450893.187, 482687.068, 504993.002), stdev = 13308.641
  CI (99.9%): [473795.393, 491578.742] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_combineToNull2  thrpt   30  482687.068 ± 8891.675  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_normalOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_normalOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106830.225 ops/s
# Warmup Iteration   2: 412971.652 ops/s
# Warmup Iteration   3: 440462.210 ops/s
# Warmup Iteration   4: 498856.186 ops/s
# Warmup Iteration   5: 435963.370 ops/s
# Warmup Iteration   6: 476285.705 ops/s
# Warmup Iteration   7: 488433.482 ops/s
# Warmup Iteration   8: 512619.165 ops/s
# Warmup Iteration   9: 488971.851 ops/s
# Warmup Iteration  10: 483762.684 ops/s
# Warmup Iteration  11: 500001.279 ops/s
# Warmup Iteration  12: 470512.135 ops/s
# Warmup Iteration  13: 500586.236 ops/s
# Warmup Iteration  14: 485662.907 ops/s
# Warmup Iteration  15: 503829.824 ops/s
# Warmup Iteration  16: 484920.991 ops/s
# Warmup Iteration  17: 503108.378 ops/s
# Warmup Iteration  18: 525548.023 ops/s
# Warmup Iteration  19: 503490.618 ops/s
# Warmup Iteration  20: 525717.461 ops/s
# Warmup Iteration  21: 497156.504 ops/s
# Warmup Iteration  22: 506333.259 ops/s
# Warmup Iteration  23: 530009.758 ops/s
# Warmup Iteration  24: 480149.517 ops/s
# Warmup Iteration  25: 523073.926 ops/s
# Warmup Iteration  26: 502059.947 ops/s
# Warmup Iteration  27: 493246.855 ops/s
# Warmup Iteration  28: 519968.846 ops/s
# Warmup Iteration  29: 506576.334 ops/s
# Warmup Iteration  30: 508078.226 ops/s
Iteration   1: 498938.270 ops/s
Iteration   2: 504237.950 ops/s
Iteration   3: 532140.277 ops/s
Iteration   4: 497716.675 ops/s
Iteration   5: 504470.874 ops/s
Iteration   6: 527907.236 ops/s
Iteration   7: 503504.484 ops/s
Iteration   8: 524771.480 ops/s
Iteration   9: 496466.193 ops/s
Iteration  10: 529806.590 ops/s
Iteration  11: 523624.130 ops/s
Iteration  12: 493073.943 ops/s
Iteration  13: 510204.705 ops/s
Iteration  14: 520895.869 ops/s
Iteration  15: 501625.808 ops/s
Iteration  16: 525720.816 ops/s
Iteration  17: 512520.700 ops/s
Iteration  18: 502433.659 ops/s
Iteration  19: 527734.237 ops/s
Iteration  20: 501683.747 ops/s
Iteration  21: 521023.357 ops/s
Iteration  22: 511076.746 ops/s
Iteration  23: 510996.604 ops/s
Iteration  24: 531305.125 ops/s
Iteration  25: 504431.545 ops/s
Iteration  26: 521137.091 ops/s
Iteration  27: 510603.064 ops/s
Iteration  28: 504356.301 ops/s
Iteration  29: 512834.278 ops/s
Iteration  30: 509561.249 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.StrictSubscriberTest._Benchmark.benchmark_normalOnError":
  512560.100 ±(99.9%) 7763.337 ops/s [Average]
  (min, avg, max) = (493073.943, 512560.100, 532140.277), stdev = 11619.799
  CI (99.9%): [504796.763, 520323.437] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
StrictSubscriberTest._Benchmark.benchmark_normalOnError  thrpt   30  512560.100 ± 7763.337  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manyCombinerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manyCombinerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75990.410 ops/s
# Warmup Iteration   2: 337162.616 ops/s
# Warmup Iteration   3: 421924.773 ops/s
# Warmup Iteration   4: 359022.794 ops/s
# Warmup Iteration   5: 460643.941 ops/s
# Warmup Iteration   6: 452560.957 ops/s
# Warmup Iteration   7: 443327.495 ops/s
# Warmup Iteration   8: 466557.016 ops/s
# Warmup Iteration   9: 443246.222 ops/s
# Warmup Iteration  10: 429456.416 ops/s
# Warmup Iteration  11: 451512.900 ops/s
# Warmup Iteration  12: 454308.565 ops/s
# Warmup Iteration  13: 438807.464 ops/s
# Warmup Iteration  14: 463692.856 ops/s
# Warmup Iteration  15: 446323.873 ops/s
# Warmup Iteration  16: 462284.375 ops/s
# Warmup Iteration  17: 413376.454 ops/s
# Warmup Iteration  18: 458680.020 ops/s
# Warmup Iteration  19: 470155.399 ops/s
# Warmup Iteration  20: 445780.760 ops/s
# Warmup Iteration  21: 480653.603 ops/s
# Warmup Iteration  22: 448434.560 ops/s
# Warmup Iteration  23: 470609.009 ops/s
# Warmup Iteration  24: 466787.586 ops/s
# Warmup Iteration  25: 470405.986 ops/s
# Warmup Iteration  26: 448175.801 ops/s
# Warmup Iteration  27: 467439.336 ops/s
# Warmup Iteration  28: 458748.014 ops/s
# Warmup Iteration  29: 466604.393 ops/s
# Warmup Iteration  30: 481516.449 ops/s
Iteration   1: 451988.582 ops/s
Iteration   2: 469074.543 ops/s
Iteration   3: 452596.971 ops/s
Iteration   4: 467413.255 ops/s
Iteration   5: 457657.116 ops/s
Iteration   6: 453598.258 ops/s
Iteration   7: 473057.352 ops/s
Iteration   8: 452970.463 ops/s
Iteration   9: 471023.193 ops/s
Iteration  10: 468970.565 ops/s
Iteration  11: 453559.798 ops/s
Iteration  12: 475829.287 ops/s
Iteration  13: 460255.900 ops/s
Iteration  14: 453883.111 ops/s
Iteration  15: 465550.642 ops/s
Iteration  16: 462653.261 ops/s
Iteration  17: 458899.581 ops/s
Iteration  18: 457189.733 ops/s
Iteration  19: 475903.031 ops/s
Iteration  20: 444606.675 ops/s
Iteration  21: 482226.170 ops/s
Iteration  22: 444556.615 ops/s
Iteration  23: 467988.047 ops/s
Iteration  24: 441638.393 ops/s
Iteration  25: 360251.243 ops/s
Iteration  26: 464415.729 ops/s
Iteration  27: 466838.243 ops/s
Iteration  28: 472809.050 ops/s
Iteration  29: 449475.660 ops/s
Iteration  30: 466775.866 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manyCombinerThrows":
  458121.878 ±(99.9%) 14121.382 ops/s [Average]
  (min, avg, max) = (360251.243, 458121.878, 482226.170), stdev = 21136.221
  CI (99.9%): [444000.496, 472243.259] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_manyCombinerThrows  thrpt   30  458121.878 ± 14121.382  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_timeoutSelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_timeoutSelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 247035.309 ops/s
# Warmup Iteration   2: 487892.993 ops/s
# Warmup Iteration   3: 565282.214 ops/s
# Warmup Iteration   4: 499465.402 ops/s
# Warmup Iteration   5: 570115.947 ops/s
# Warmup Iteration   6: 483869.166 ops/s
# Warmup Iteration   7: 552654.905 ops/s
# Warmup Iteration   8: 595789.758 ops/s
# Warmup Iteration   9: 554025.052 ops/s
# Warmup Iteration  10: 576736.817 ops/s
# Warmup Iteration  11: 570337.290 ops/s
# Warmup Iteration  12: 552834.321 ops/s
# Warmup Iteration  13: 566417.753 ops/s
# Warmup Iteration  14: 578755.465 ops/s
# Warmup Iteration  15: 571653.761 ops/s
# Warmup Iteration  16: 577960.896 ops/s
# Warmup Iteration  17: 598508.434 ops/s
# Warmup Iteration  18: 587535.214 ops/s
# Warmup Iteration  19: 613600.119 ops/s
# Warmup Iteration  20: 576148.524 ops/s
# Warmup Iteration  21: 606831.474 ops/s
# Warmup Iteration  22: 575939.258 ops/s
# Warmup Iteration  23: 605993.968 ops/s
# Warmup Iteration  24: 576116.416 ops/s
# Warmup Iteration  25: 587914.180 ops/s
# Warmup Iteration  26: 597660.600 ops/s
# Warmup Iteration  27: 595359.168 ops/s
# Warmup Iteration  28: 604735.132 ops/s
# Warmup Iteration  29: 576187.470 ops/s
# Warmup Iteration  30: 595116.064 ops/s
Iteration   1: 588265.106 ops/s
Iteration   2: 620033.666 ops/s
Iteration   3: 608093.828 ops/s
Iteration   4: 572000.718 ops/s
Iteration   5: 594816.243 ops/s
Iteration   6: 592745.727 ops/s
Iteration   7: 614272.004 ops/s
Iteration   8: 592404.087 ops/s
Iteration   9: 590482.482 ops/s
Iteration  10: 599390.776 ops/s
Iteration  11: 575906.478 ops/s
Iteration  12: 610149.360 ops/s
Iteration  13: 596489.994 ops/s
Iteration  14: 595871.894 ops/s
Iteration  15: 587731.666 ops/s
Iteration  16: 595822.155 ops/s
Iteration  17: 628211.688 ops/s
Iteration  18: 583965.337 ops/s
Iteration  19: 612315.623 ops/s
Iteration  20: 599749.019 ops/s
Iteration  21: 591507.694 ops/s
Iteration  22: 622381.489 ops/s
Iteration  23: 581164.270 ops/s
Iteration  24: 593791.624 ops/s
Iteration  25: 617595.159 ops/s
Iteration  26: 583721.545 ops/s
Iteration  27: 610862.864 ops/s
Iteration  28: 580206.308 ops/s
Iteration  29: 610874.072 ops/s
Iteration  30: 583461.633 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_timeoutSelectorReturnsNull":
  597809.484 ±(99.9%) 9772.473 ops/s [Average]
  (min, avg, max) = (572000.718, 597809.484, 628211.688), stdev = 14626.979
  CI (99.9%): [588037.011, 607581.957] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_timeoutSelectorReturnsNull  thrpt   30  597809.484 ± 9772.473  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_producerRequestThroughAmb$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_producerRequestThroughAmb

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 344520.983 ops/s
# Warmup Iteration   2: 1579832.951 ops/s
# Warmup Iteration   3: 2907486.171 ops/s
# Warmup Iteration   4: 3013963.743 ops/s
# Warmup Iteration   5: 3102594.231 ops/s
# Warmup Iteration   6: 3092858.969 ops/s
# Warmup Iteration   7: 3200783.585 ops/s
# Warmup Iteration   8: 3061363.328 ops/s
# Warmup Iteration   9: 3185954.036 ops/s
# Warmup Iteration  10: 3222647.374 ops/s
# Warmup Iteration  11: 3089385.635 ops/s
# Warmup Iteration  12: 3024507.854 ops/s
# Warmup Iteration  13: 3217479.046 ops/s
# Warmup Iteration  14: 3111766.928 ops/s
# Warmup Iteration  15: 3263819.877 ops/s
# Warmup Iteration  16: 3138781.962 ops/s
# Warmup Iteration  17: 3051934.746 ops/s
# Warmup Iteration  18: 3190427.543 ops/s
# Warmup Iteration  19: 3295928.484 ops/s
# Warmup Iteration  20: 3209613.512 ops/s
# Warmup Iteration  21: 3133587.544 ops/s
# Warmup Iteration  22: 3216417.034 ops/s
# Warmup Iteration  23: 3157900.182 ops/s
# Warmup Iteration  24: 3108538.120 ops/s
# Warmup Iteration  25: 3249669.112 ops/s
# Warmup Iteration  26: 3149812.188 ops/s
# Warmup Iteration  27: 3181264.676 ops/s
# Warmup Iteration  28: 3120622.203 ops/s
# Warmup Iteration  29: 3044639.469 ops/s
# Warmup Iteration  30: 3239129.687 ops/s
Iteration   1: 3223246.428 ops/s
Iteration   2: 3104053.033 ops/s
Iteration   3: 3205013.009 ops/s
Iteration   4: 3182042.523 ops/s
Iteration   5: 3252785.449 ops/s
Iteration   6: 3304029.705 ops/s
Iteration   7: 3163920.597 ops/s
Iteration   8: 3064044.997 ops/s
Iteration   9: 3300248.842 ops/s
Iteration  10: 3090480.029 ops/s
Iteration  11: 3274509.841 ops/s
Iteration  12: 3246925.268 ops/s
Iteration  13: 2954776.946 ops/s
Iteration  14: 3272317.891 ops/s
Iteration  15: 3160464.859 ops/s
Iteration  16: 3206911.618 ops/s
Iteration  17: 3251395.825 ops/s
Iteration  18: 3042313.663 ops/s
Iteration  19: 3081399.080 ops/s
Iteration  20: 2744456.902 ops/s
Iteration  21: 3200806.974 ops/s
Iteration  22: 3304855.809 ops/s
Iteration  23: 3212963.489 ops/s
Iteration  24: 3132855.540 ops/s
Iteration  25: 3231202.171 ops/s
Iteration  26: 3232797.330 ops/s
Iteration  27: 3180551.823 ops/s
Iteration  28: 3275535.255 ops/s
Iteration  29: 3143804.143 ops/s
Iteration  30: 3303384.616 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_producerRequestThroughAmb":
  3178136.455 ±(99.9%) 79698.311 ops/s [Average]
  (min, avg, max) = (2744456.902, 3178136.455, 3304855.809), stdev = 119288.689
  CI (99.9%): [3098438.144, 3257834.766] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableAmbTest._Benchmark.benchmark_producerRequestThroughAmb  thrpt   30  3178136.455 ± 79698.311  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 207367.750 ops/s
# Warmup Iteration   2: 807754.751 ops/s
# Warmup Iteration   3: 2343109.987 ops/s
# Warmup Iteration   4: 2529508.363 ops/s
# Warmup Iteration   5: 2972433.233 ops/s
# Warmup Iteration   6: 2781681.941 ops/s
# Warmup Iteration   7: 2816092.589 ops/s
# Warmup Iteration   8: 2936531.729 ops/s
# Warmup Iteration   9: 2811126.308 ops/s
# Warmup Iteration  10: 2910777.418 ops/s
# Warmup Iteration  11: 2770071.738 ops/s
# Warmup Iteration  12: 2908880.047 ops/s
# Warmup Iteration  13: 2989801.928 ops/s
# Warmup Iteration  14: 2807476.413 ops/s
# Warmup Iteration  15: 3017992.131 ops/s
# Warmup Iteration  16: 2930431.582 ops/s
# Warmup Iteration  17: 2872760.589 ops/s
# Warmup Iteration  18: 2879696.143 ops/s
# Warmup Iteration  19: 2829639.749 ops/s
# Warmup Iteration  20: 2859346.158 ops/s
# Warmup Iteration  21: 2997037.875 ops/s
# Warmup Iteration  22: 2861939.209 ops/s
# Warmup Iteration  23: 2730653.645 ops/s
# Warmup Iteration  24: 2804923.724 ops/s
# Warmup Iteration  25: 2929049.661 ops/s
# Warmup Iteration  26: 2851389.791 ops/s
# Warmup Iteration  27: 2924375.935 ops/s
# Warmup Iteration  28: 2855729.426 ops/s
# Warmup Iteration  29: 2906228.326 ops/s
# Warmup Iteration  30: 3036925.067 ops/s
Iteration   1: 2833730.706 ops/s
Iteration   2: 2818210.102 ops/s
Iteration   3: 2983684.438 ops/s
Iteration   4: 2754883.296 ops/s
Iteration   5: 2936179.122 ops/s
Iteration   6: 2948178.600 ops/s
Iteration   7: 2841847.784 ops/s
Iteration   8: 2897105.496 ops/s
Iteration   9: 2943168.551 ops/s
Iteration  10: 2877988.548 ops/s
Iteration  11: 2869507.355 ops/s
Iteration  12: 2825556.447 ops/s
Iteration  13: 2908394.082 ops/s
Iteration  14: 2996851.606 ops/s
Iteration  15: 2751145.049 ops/s
Iteration  16: 2847760.662 ops/s
Iteration  17: 2930379.471 ops/s
Iteration  18: 2817079.645 ops/s
Iteration  19: 2961845.465 ops/s
Iteration  20: 2882877.126 ops/s
Iteration  21: 2851744.982 ops/s
Iteration  22: 2981631.859 ops/s
Iteration  23: 2797727.646 ops/s
Iteration  24: 2950407.494 ops/s
Iteration  25: 2871438.098 ops/s
Iteration  26: 2891992.734 ops/s
Iteration  27: 2787658.920 ops/s
Iteration  28: 2852834.308 ops/s
Iteration  29: 2881211.618 ops/s
Iteration  30: 2901448.594 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscription":
  2879815.660 ±(99.9%) 44228.581 ops/s [Average]
  (min, avg, max) = (2751145.049, 2879815.660, 2996851.606), stdev = 66199.262
  CI (99.9%): [2835587.080, 2924044.241] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noPrematureSubscription  thrpt   30  2879815.660 ± 44228.581  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noMultipleSubscriptions$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noMultipleSubscriptions

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 462595.452 ops/s
# Warmup Iteration   2: 1511447.373 ops/s
# Warmup Iteration   3: 2473917.925 ops/s
# Warmup Iteration   4: 2842159.181 ops/s
# Warmup Iteration   5: 3033927.504 ops/s
# Warmup Iteration   6: 2825665.885 ops/s
# Warmup Iteration   7: 2765830.656 ops/s
# Warmup Iteration   8: 2997192.108 ops/s
# Warmup Iteration   9: 2791331.228 ops/s
# Warmup Iteration  10: 2921176.060 ops/s
# Warmup Iteration  11: 2778028.762 ops/s
# Warmup Iteration  12: 2830179.596 ops/s
# Warmup Iteration  13: 3064207.395 ops/s
# Warmup Iteration  14: 2761481.126 ops/s
# Warmup Iteration  15: 2866103.657 ops/s
# Warmup Iteration  16: 2994316.181 ops/s
# Warmup Iteration  17: 2809360.315 ops/s
# Warmup Iteration  18: 2803033.204 ops/s
# Warmup Iteration  19: 3037955.465 ops/s
# Warmup Iteration  20: 2790910.317 ops/s
# Warmup Iteration  21: 3005723.272 ops/s
# Warmup Iteration  22: 2823483.675 ops/s
# Warmup Iteration  23: 2809899.080 ops/s
# Warmup Iteration  24: 2869858.323 ops/s
# Warmup Iteration  25: 3025895.899 ops/s
# Warmup Iteration  26: 2820842.575 ops/s
# Warmup Iteration  27: 2930090.757 ops/s
# Warmup Iteration  28: 2916821.373 ops/s
# Warmup Iteration  29: 2906663.321 ops/s
# Warmup Iteration  30: 2891776.627 ops/s
Iteration   1: 2799087.516 ops/s
Iteration   2: 2902321.589 ops/s
Iteration   3: 2799771.463 ops/s
Iteration   4: 2926174.967 ops/s
Iteration   5: 2896488.538 ops/s
Iteration   6: 2911607.516 ops/s
Iteration   7: 3025598.915 ops/s
Iteration   8: 2839412.944 ops/s
Iteration   9: 2896007.854 ops/s
Iteration  10: 2855557.424 ops/s
Iteration  11: 2909033.965 ops/s
Iteration  12: 2796026.422 ops/s
Iteration  13: 2908371.241 ops/s
Iteration  14: 2531833.708 ops/s
Iteration  15: 2532223.751 ops/s
Iteration  16: 2921755.439 ops/s
Iteration  17: 2797541.387 ops/s
Iteration  18: 2919918.184 ops/s
Iteration  19: 2844056.150 ops/s
Iteration  20: 3011457.368 ops/s
Iteration  21: 2838697.618 ops/s
Iteration  22: 3028338.189 ops/s
Iteration  23: 2859131.828 ops/s
Iteration  24: 2892327.779 ops/s
Iteration  25: 3027151.916 ops/s
Iteration  26: 2855558.560 ops/s
Iteration  27: 2852781.505 ops/s
Iteration  28: 2824412.492 ops/s
Iteration  29: 2767557.330 ops/s
Iteration  30: 2983159.229 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noMultipleSubscriptions":
  2865112.093 ±(99.9%) 77197.911 ops/s [Average]
  (min, avg, max) = (2531833.708, 2865112.093, 3028338.189), stdev = 115546.208
  CI (99.9%): [2787914.181, 2942310.004] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noMultipleSubscriptions  thrpt   30  2865112.093 ± 77197.911  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manySources$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manySources

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106619.778 ops/s
# Warmup Iteration   2: 269778.421 ops/s
# Warmup Iteration   3: 684548.955 ops/s
# Warmup Iteration   4: 795739.200 ops/s
# Warmup Iteration   5: 837729.498 ops/s
# Warmup Iteration   6: 779226.749 ops/s
# Warmup Iteration   7: 821493.705 ops/s
# Warmup Iteration   8: 785651.179 ops/s
# Warmup Iteration   9: 779171.593 ops/s
# Warmup Iteration  10: 822226.090 ops/s
# Warmup Iteration  11: 766124.791 ops/s
# Warmup Iteration  12: 810931.100 ops/s
# Warmup Iteration  13: 807524.543 ops/s
# Warmup Iteration  14: 803289.106 ops/s
# Warmup Iteration  15: 797794.696 ops/s
# Warmup Iteration  16: 761919.816 ops/s
# Warmup Iteration  17: 837640.962 ops/s
# Warmup Iteration  18: 778268.747 ops/s
# Warmup Iteration  19: 827943.224 ops/s
# Warmup Iteration  20: 800269.489 ops/s
# Warmup Iteration  21: 793734.155 ops/s
# Warmup Iteration  22: 822146.537 ops/s
# Warmup Iteration  23: 788280.593 ops/s
# Warmup Iteration  24: 802920.702 ops/s
# Warmup Iteration  25: 783653.226 ops/s
# Warmup Iteration  26: 812011.007 ops/s
# Warmup Iteration  27: 838901.894 ops/s
# Warmup Iteration  28: 786929.509 ops/s
# Warmup Iteration  29: 795514.246 ops/s
# Warmup Iteration  30: 843357.451 ops/s
Iteration   1: 790194.232 ops/s
Iteration   2: 819388.864 ops/s
Iteration   3: 798533.333 ops/s
Iteration   4: 801526.665 ops/s
Iteration   5: 789947.752 ops/s
Iteration   6: 810651.690 ops/s
Iteration   7: 813283.166 ops/s
Iteration   8: 827817.815 ops/s
Iteration   9: 797438.390 ops/s
Iteration  10: 821039.115 ops/s
Iteration  11: 768614.535 ops/s
Iteration  12: 782456.136 ops/s
Iteration  13: 842863.917 ops/s
Iteration  14: 780193.331 ops/s
Iteration  15: 805557.393 ops/s
Iteration  16: 802067.361 ops/s
Iteration  17: 843397.617 ops/s
Iteration  18: 803860.726 ops/s
Iteration  19: 803330.396 ops/s
Iteration  20: 819562.515 ops/s
Iteration  21: 780221.939 ops/s
Iteration  22: 804882.986 ops/s
Iteration  23: 828050.875 ops/s
Iteration  24: 792678.112 ops/s
Iteration  25: 787581.833 ops/s
Iteration  26: 811405.651 ops/s
Iteration  27: 814056.709 ops/s
Iteration  28: 842914.390 ops/s
Iteration  29: 791935.579 ops/s
Iteration  30: 803416.341 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manySources":
  805962.312 ±(99.9%) 12730.740 ops/s [Average]
  (min, avg, max) = (768614.535, 805962.312, 843397.617), stdev = 19054.773
  CI (99.9%): [793231.573, 818693.052] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_manySources  thrpt   30  805962.312 ± 12730.740  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manySourcesIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manySourcesIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 102789.501 ops/s
# Warmup Iteration   2: 407105.236 ops/s
# Warmup Iteration   3: 742495.198 ops/s
# Warmup Iteration   4: 643705.931 ops/s
# Warmup Iteration   5: 815192.420 ops/s
# Warmup Iteration   6: 813087.444 ops/s
# Warmup Iteration   7: 806963.533 ops/s
# Warmup Iteration   8: 825247.828 ops/s
# Warmup Iteration   9: 825973.587 ops/s
# Warmup Iteration  10: 801877.742 ops/s
# Warmup Iteration  11: 789073.446 ops/s
# Warmup Iteration  12: 815575.985 ops/s
# Warmup Iteration  13: 831251.014 ops/s
# Warmup Iteration  14: 786818.498 ops/s
# Warmup Iteration  15: 806336.980 ops/s
# Warmup Iteration  16: 825112.335 ops/s
# Warmup Iteration  17: 794097.126 ops/s
# Warmup Iteration  18: 815750.099 ops/s
# Warmup Iteration  19: 795296.234 ops/s
# Warmup Iteration  20: 790780.461 ops/s
# Warmup Iteration  21: 787776.280 ops/s
# Warmup Iteration  22: 803900.832 ops/s
# Warmup Iteration  23: 818837.734 ops/s
# Warmup Iteration  24: 774443.100 ops/s
# Warmup Iteration  25: 847440.607 ops/s
# Warmup Iteration  26: 832482.559 ops/s
# Warmup Iteration  27: 770975.038 ops/s
# Warmup Iteration  28: 841497.498 ops/s
# Warmup Iteration  29: 783855.956 ops/s
# Warmup Iteration  30: 800304.056 ops/s
Iteration   1: 801855.559 ops/s
Iteration   2: 797302.225 ops/s
Iteration   3: 837318.185 ops/s
Iteration   4: 781824.064 ops/s
Iteration   5: 825059.986 ops/s
Iteration   6: 776955.484 ops/s
Iteration   7: 825711.319 ops/s
Iteration   8: 826731.170 ops/s
Iteration   9: 733327.547 ops/s
Iteration  10: 726856.791 ops/s
Iteration  11: 824354.000 ops/s
Iteration  12: 775301.255 ops/s
Iteration  13: 807131.187 ops/s
Iteration  14: 777337.191 ops/s
Iteration  15: 792123.225 ops/s
Iteration  16: 806546.178 ops/s
Iteration  17: 775063.375 ops/s
Iteration  18: 823221.542 ops/s
Iteration  19: 781161.877 ops/s
Iteration  20: 786819.852 ops/s
Iteration  21: 840767.019 ops/s
Iteration  22: 773365.781 ops/s
Iteration  23: 817497.476 ops/s
Iteration  24: 803261.242 ops/s
Iteration  25: 847893.230 ops/s
Iteration  26: 804587.853 ops/s
Iteration  27: 798395.979 ops/s
Iteration  28: 812786.726 ops/s
Iteration  29: 797847.546 ops/s
Iteration  30: 802169.771 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manySourcesIterable":
  799352.488 ±(99.9%) 18729.979 ops/s [Average]
  (min, avg, max) = (726856.791, 799352.488, 847893.230), stdev = 28034.152
  CI (99.9%): [780622.509, 818082.466] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_manySourcesIterable  thrpt   30  799352.488 ± 18729.979  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_cancelMainOnOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_cancelMainOnOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106322.688 ops/s
# Warmup Iteration   2: 446390.425 ops/s
# Warmup Iteration   3: 510936.356 ops/s
# Warmup Iteration   4: 600568.705 ops/s
# Warmup Iteration   5: 584351.891 ops/s
# Warmup Iteration   6: 571556.315 ops/s
# Warmup Iteration   7: 537882.223 ops/s
# Warmup Iteration   8: 588405.420 ops/s
# Warmup Iteration   9: 527575.366 ops/s
# Warmup Iteration  10: 587455.771 ops/s
# Warmup Iteration  11: 588392.954 ops/s
# Warmup Iteration  12: 606368.645 ops/s
# Warmup Iteration  13: 574164.249 ops/s
# Warmup Iteration  14: 609260.532 ops/s
# Warmup Iteration  15: 574700.813 ops/s
# Warmup Iteration  16: 594111.889 ops/s
# Warmup Iteration  17: 633698.560 ops/s
# Warmup Iteration  18: 600522.176 ops/s
# Warmup Iteration  19: 631815.307 ops/s
# Warmup Iteration  20: 613750.249 ops/s
# Warmup Iteration  21: 628388.361 ops/s
# Warmup Iteration  22: 610315.200 ops/s
# Warmup Iteration  23: 605283.596 ops/s
# Warmup Iteration  24: 628550.863 ops/s
# Warmup Iteration  25: 613253.171 ops/s
# Warmup Iteration  26: 609042.033 ops/s
# Warmup Iteration  27: 646871.308 ops/s
# Warmup Iteration  28: 604421.473 ops/s
# Warmup Iteration  29: 637823.863 ops/s
# Warmup Iteration  30: 597830.803 ops/s
Iteration   1: 639494.773 ops/s
Iteration   2: 613030.574 ops/s
Iteration   3: 622781.133 ops/s
Iteration   4: 640769.270 ops/s
Iteration   5: 633364.971 ops/s
Iteration   6: 598443.249 ops/s
Iteration   7: 633760.801 ops/s
Iteration   8: 614031.036 ops/s
Iteration   9: 607288.568 ops/s
Iteration  10: 654043.376 ops/s
Iteration  11: 615069.385 ops/s
Iteration  12: 608556.082 ops/s
Iteration  13: 639466.156 ops/s
Iteration  14: 603463.335 ops/s
Iteration  15: 610941.332 ops/s
Iteration  16: 636129.162 ops/s
Iteration  17: 642743.268 ops/s
Iteration  18: 618379.758 ops/s
Iteration  19: 629145.399 ops/s
Iteration  20: 621672.971 ops/s
Iteration  21: 626256.555 ops/s
Iteration  22: 630562.635 ops/s
Iteration  23: 623810.715 ops/s
Iteration  24: 627295.042 ops/s
Iteration  25: 620255.107 ops/s
Iteration  26: 635119.233 ops/s
Iteration  27: 615688.689 ops/s
Iteration  28: 619477.982 ops/s
Iteration  29: 624071.123 ops/s
Iteration  30: 606035.908 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_cancelMainOnOtherError":
  623704.920 ±(99.9%) 8841.344 ops/s [Average]
  (min, avg, max) = (598443.249, 623704.920, 654043.376), stdev = 13233.309
  CI (99.9%): [614863.576, 632546.264] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
FlowableMergeWithCompletableTest._Benchmark.benchmark_cancelMainOnOtherError  thrpt   30  623704.920 ± 8841.344  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_cancelOtherOnMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_cancelOtherOnMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 115110.485 ops/s
# Warmup Iteration   2: 412695.529 ops/s
# Warmup Iteration   3: 574364.965 ops/s
# Warmup Iteration   4: 593710.264 ops/s
# Warmup Iteration   5: 592921.940 ops/s
# Warmup Iteration   6: 604203.620 ops/s
# Warmup Iteration   7: 582052.480 ops/s
# Warmup Iteration   8: 595084.878 ops/s
# Warmup Iteration   9: 581741.607 ops/s
# Warmup Iteration  10: 610771.928 ops/s
# Warmup Iteration  11: 563403.997 ops/s
# Warmup Iteration  12: 596876.491 ops/s
# Warmup Iteration  13: 610495.519 ops/s
# Warmup Iteration  14: 578350.034 ops/s
# Warmup Iteration  15: 601122.153 ops/s
# Warmup Iteration  16: 575641.949 ops/s
# Warmup Iteration  17: 632958.045 ops/s
# Warmup Iteration  18: 602145.044 ops/s
# Warmup Iteration  19: 626992.185 ops/s
# Warmup Iteration  20: 625926.630 ops/s
# Warmup Iteration  21: 606061.344 ops/s
# Warmup Iteration  22: 615748.670 ops/s
# Warmup Iteration  23: 625616.277 ops/s
# Warmup Iteration  24: 611879.696 ops/s
# Warmup Iteration  25: 632934.614 ops/s
# Warmup Iteration  26: 613746.584 ops/s
# Warmup Iteration  27: 646379.001 ops/s
# Warmup Iteration  28: 587346.324 ops/s
# Warmup Iteration  29: 598732.199 ops/s
# Warmup Iteration  30: 620851.024 ops/s
Iteration   1: 633509.308 ops/s
Iteration   2: 648711.409 ops/s
Iteration   3: 622419.624 ops/s
Iteration   4: 582865.222 ops/s
Iteration   5: 574547.809 ops/s
Iteration   6: 600625.828 ops/s
Iteration   7: 619388.278 ops/s
Iteration   8: 604769.843 ops/s
Iteration   9: 629403.694 ops/s
Iteration  10: 653619.389 ops/s
Iteration  11: 606997.793 ops/s
Iteration  12: 641211.926 ops/s
Iteration  13: 623411.626 ops/s
Iteration  14: 621495.717 ops/s
Iteration  15: 640809.017 ops/s
Iteration  16: 609681.178 ops/s
Iteration  17: 640028.914 ops/s
Iteration  18: 627179.951 ops/s
Iteration  19: 616535.241 ops/s
Iteration  20: 652401.002 ops/s
Iteration  21: 598028.661 ops/s
Iteration  22: 630808.517 ops/s
Iteration  23: 610649.852 ops/s
Iteration  24: 624305.622 ops/s
Iteration  25: 614810.257 ops/s
Iteration  26: 610624.652 ops/s
Iteration  27: 644578.827 ops/s
Iteration  28: 604663.162 ops/s
Iteration  29: 623191.547 ops/s
Iteration  30: 633073.720 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_cancelOtherOnMainError":
  621478.253 ±(99.9%) 12861.067 ops/s [Average]
  (min, avg, max) = (574547.809, 621478.253, 653619.389), stdev = 19249.842
  CI (99.9%): [608617.185, 634339.320] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
FlowableMergeWithCompletableTest._Benchmark.benchmark_cancelOtherOnMainError  thrpt   30  621478.253 ± 12861.067  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_firstJustError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_firstJustError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 82955.364 ops/s
# Warmup Iteration   2: 326975.379 ops/s
# Warmup Iteration   3: 427485.986 ops/s
# Warmup Iteration   4: 435566.261 ops/s
# Warmup Iteration   5: 479424.906 ops/s
# Warmup Iteration   6: 494513.919 ops/s
# Warmup Iteration   7: 492403.875 ops/s
# Warmup Iteration   8: 508820.466 ops/s
# Warmup Iteration   9: 498614.083 ops/s
# Warmup Iteration  10: 490546.442 ops/s
# Warmup Iteration  11: 502380.530 ops/s
# Warmup Iteration  12: 496547.197 ops/s
# Warmup Iteration  13: 486680.192 ops/s
# Warmup Iteration  14: 513641.695 ops/s
# Warmup Iteration  15: 487040.883 ops/s
# Warmup Iteration  16: 502894.862 ops/s
# Warmup Iteration  17: 510499.491 ops/s
# Warmup Iteration  18: 526682.708 ops/s
# Warmup Iteration  19: 523970.339 ops/s
# Warmup Iteration  20: 523854.330 ops/s
# Warmup Iteration  21: 540049.457 ops/s
# Warmup Iteration  22: 503844.515 ops/s
# Warmup Iteration  23: 505117.365 ops/s
# Warmup Iteration  24: 514083.084 ops/s
# Warmup Iteration  25: 514102.039 ops/s
# Warmup Iteration  26: 543030.067 ops/s
# Warmup Iteration  27: 523546.190 ops/s
# Warmup Iteration  28: 515995.273 ops/s
# Warmup Iteration  29: 488113.237 ops/s
# Warmup Iteration  30: 521450.099 ops/s
Iteration   1: 489251.642 ops/s
Iteration   2: 511230.178 ops/s
Iteration   3: 536739.205 ops/s
Iteration   4: 522704.829 ops/s
Iteration   5: 510640.268 ops/s
Iteration   6: 534818.243 ops/s
Iteration   7: 515120.701 ops/s
Iteration   8: 507926.903 ops/s
Iteration   9: 537956.815 ops/s
Iteration  10: 514536.637 ops/s
Iteration  11: 532755.192 ops/s
Iteration  12: 510992.154 ops/s
Iteration  13: 536428.728 ops/s
Iteration  14: 516199.744 ops/s
Iteration  15: 510415.389 ops/s
Iteration  16: 506404.641 ops/s
Iteration  17: 542448.829 ops/s
Iteration  18: 512979.669 ops/s
Iteration  19: 516167.233 ops/s
Iteration  20: 518854.527 ops/s
Iteration  21: 530711.810 ops/s
Iteration  22: 519780.134 ops/s
Iteration  23: 522373.190 ops/s
Iteration  24: 518057.826 ops/s
Iteration  25: 522399.496 ops/s
Iteration  26: 533082.501 ops/s
Iteration  27: 497175.939 ops/s
Iteration  28: 518771.886 ops/s
Iteration  29: 507280.112 ops/s
Iteration  30: 524538.137 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_firstJustError":
  519291.419 ±(99.9%) 8326.198 ops/s [Average]
  (min, avg, max) = (489251.642, 519291.419, 542448.829), stdev = 12462.262
  CI (99.9%): [510965.221, 527617.617] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_firstJustError  thrpt   30  519291.419 ± 8326.198  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatArrayDelayErrorWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatArrayDelayErrorWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118395.721 ops/s
# Warmup Iteration   2: 393120.470 ops/s
# Warmup Iteration   3: 519217.862 ops/s
# Warmup Iteration   4: 496635.429 ops/s
# Warmup Iteration   5: 499162.212 ops/s
# Warmup Iteration   6: 500788.703 ops/s
# Warmup Iteration   7: 501213.994 ops/s
# Warmup Iteration   8: 501305.018 ops/s
# Warmup Iteration   9: 501098.325 ops/s
# Warmup Iteration  10: 480035.849 ops/s
# Warmup Iteration  11: 505965.380 ops/s
# Warmup Iteration  12: 502011.486 ops/s
# Warmup Iteration  13: 496708.593 ops/s
# Warmup Iteration  14: 502072.689 ops/s
# Warmup Iteration  15: 477342.763 ops/s
# Warmup Iteration  16: 523277.618 ops/s
# Warmup Iteration  17: 551349.667 ops/s
# Warmup Iteration  18: 536501.480 ops/s
# Warmup Iteration  19: 505475.829 ops/s
# Warmup Iteration  20: 537387.378 ops/s
# Warmup Iteration  21: 512078.968 ops/s
# Warmup Iteration  22: 518929.917 ops/s
# Warmup Iteration  23: 520772.146 ops/s
# Warmup Iteration  24: 506138.069 ops/s
# Warmup Iteration  25: 519710.961 ops/s
# Warmup Iteration  26: 510457.190 ops/s
# Warmup Iteration  27: 498294.161 ops/s
# Warmup Iteration  28: 547977.261 ops/s
# Warmup Iteration  29: 401204.967 ops/s
# Warmup Iteration  30: 542422.387 ops/s
Iteration   1: 536472.662 ops/s
Iteration   2: 518777.930 ops/s
Iteration   3: 521883.516 ops/s
Iteration   4: 523955.432 ops/s
Iteration   5: 537460.010 ops/s
Iteration   6: 499446.545 ops/s
Iteration   7: 530043.136 ops/s
Iteration   8: 540796.797 ops/s
Iteration   9: 509469.615 ops/s
Iteration  10: 520718.864 ops/s
Iteration  11: 508286.638 ops/s
Iteration  12: 525889.177 ops/s
Iteration  13: 526824.081 ops/s
Iteration  14: 490547.432 ops/s
Iteration  15: 526525.149 ops/s
Iteration  16: 543453.761 ops/s
Iteration  17: 500958.596 ops/s
Iteration  18: 536126.220 ops/s
Iteration  19: 518771.512 ops/s
Iteration  20: 520248.235 ops/s
Iteration  21: 486104.219 ops/s
Iteration  22: 533609.973 ops/s
Iteration  23: 516312.057 ops/s
Iteration  24: 512968.608 ops/s
Iteration  25: 527792.670 ops/s
Iteration  26: 526448.634 ops/s
Iteration  27: 511898.421 ops/s
Iteration  28: 532070.394 ops/s
Iteration  29: 515627.097 ops/s
Iteration  30: 526390.235 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatArrayDelayErrorWithError":
  520862.587 ±(99.9%) 9379.337 ops/s [Average]
  (min, avg, max) = (486104.219, 520862.587, 543453.761), stdev = 14038.550
  CI (99.9%): [511483.251, 530241.924] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_concatArrayDelayErrorWithError  thrpt   30  520862.587 ± 9379.337  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfOnNextNotWithinTimeout$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfOnNextNotWithinTimeout

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60677.782 ops/s
# Warmup Iteration   2: 197577.716 ops/s
# Warmup Iteration   3: 406014.979 ops/s
# Warmup Iteration   4: 394685.542 ops/s
# Warmup Iteration   5: 408242.466 ops/s
# Warmup Iteration   6: 400554.078 ops/s
# Warmup Iteration   7: 380178.498 ops/s
# Warmup Iteration   8: 396252.011 ops/s
# Warmup Iteration   9: 408763.573 ops/s
# Warmup Iteration  10: 411484.132 ops/s
# Warmup Iteration  11: 400831.176 ops/s
# Warmup Iteration  12: 418012.532 ops/s
# Warmup Iteration  13: 375149.356 ops/s
# Warmup Iteration  14: 401422.613 ops/s
# Warmup Iteration  15: 402334.677 ops/s
# Warmup Iteration  16: 373697.472 ops/s
# Warmup Iteration  17: 413495.045 ops/s
# Warmup Iteration  18: 427400.600 ops/s
# Warmup Iteration  19: 434258.246 ops/s
# Warmup Iteration  20: 416124.127 ops/s
# Warmup Iteration  21: 438128.729 ops/s
# Warmup Iteration  22: 423279.646 ops/s
# Warmup Iteration  23: 408074.730 ops/s
# Warmup Iteration  24: 417095.841 ops/s
# Warmup Iteration  25: 434701.022 ops/s
# Warmup Iteration  26: 408358.169 ops/s
# Warmup Iteration  27: 431444.628 ops/s
# Warmup Iteration  28: 425535.603 ops/s
# Warmup Iteration  29: 426002.177 ops/s
# Warmup Iteration  30: 416419.507 ops/s
Iteration   1: 418446.594 ops/s
Iteration   2: 427494.780 ops/s
Iteration   3: 414793.342 ops/s
Iteration   4: 430622.453 ops/s
Iteration   5: 415372.720 ops/s
Iteration   6: 433350.414 ops/s
Iteration   7: 419361.214 ops/s
Iteration   8: 429717.895 ops/s
Iteration   9: 417668.181 ops/s
Iteration  10: 413672.334 ops/s
Iteration  11: 442675.832 ops/s
Iteration  12: 420626.868 ops/s
Iteration  13: 429215.449 ops/s
Iteration  14: 413249.836 ops/s
Iteration  15: 420857.269 ops/s
Iteration  16: 414253.545 ops/s
Iteration  17: 429504.973 ops/s
Iteration  18: 422860.644 ops/s
Iteration  19: 420976.506 ops/s
Iteration  20: 439733.797 ops/s
Iteration  21: 412100.306 ops/s
Iteration  22: 415664.873 ops/s
Iteration  23: 428681.589 ops/s
Iteration  24: 415062.460 ops/s
Iteration  25: 426495.248 ops/s
Iteration  26: 406772.547 ops/s
Iteration  27: 428249.909 ops/s
Iteration  28: 428455.110 ops/s
Iteration  29: 423029.774 ops/s
Iteration  30: 418399.726 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfOnNextNotWithinTimeout":
  422578.873 ±(99.9%) 5625.665 ops/s [Average]
  (min, avg, max) = (406772.547, 422578.873, 442675.832), stdev = 8420.231
  CI (99.9%): [416953.208, 428204.538] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableTimeoutTests._Benchmark.benchmark_shouldTimeoutIfOnNextNotWithinTimeout  thrpt   30  422578.873 ± 5625.665  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_errorFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_errorFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 268584.449 ops/s
# Warmup Iteration   2: 540692.199 ops/s
# Warmup Iteration   3: 563113.982 ops/s
# Warmup Iteration   4: 564837.658 ops/s
# Warmup Iteration   5: 618332.437 ops/s
# Warmup Iteration   6: 603627.242 ops/s
# Warmup Iteration   7: 619569.907 ops/s
# Warmup Iteration   8: 629361.386 ops/s
# Warmup Iteration   9: 625214.640 ops/s
# Warmup Iteration  10: 568403.202 ops/s
# Warmup Iteration  11: 617186.838 ops/s
# Warmup Iteration  12: 631073.756 ops/s
# Warmup Iteration  13: 614905.625 ops/s
# Warmup Iteration  14: 637023.762 ops/s
# Warmup Iteration  15: 606611.897 ops/s
# Warmup Iteration  16: 642635.581 ops/s
# Warmup Iteration  17: 641935.654 ops/s
# Warmup Iteration  18: 669350.029 ops/s
# Warmup Iteration  19: 641353.343 ops/s
# Warmup Iteration  20: 649468.775 ops/s
# Warmup Iteration  21: 677109.267 ops/s
# Warmup Iteration  22: 639312.502 ops/s
# Warmup Iteration  23: 644808.714 ops/s
# Warmup Iteration  24: 534913.874 ops/s
# Warmup Iteration  25: 654562.142 ops/s
# Warmup Iteration  26: 651598.442 ops/s
# Warmup Iteration  27: 656688.775 ops/s
# Warmup Iteration  28: 643406.424 ops/s
# Warmup Iteration  29: 670047.037 ops/s
# Warmup Iteration  30: 664419.303 ops/s
Iteration   1: 647673.238 ops/s
Iteration   2: 670873.113 ops/s
Iteration   3: 651953.328 ops/s
Iteration   4: 660953.979 ops/s
Iteration   5: 655848.354 ops/s
Iteration   6: 629813.280 ops/s
Iteration   7: 682415.566 ops/s
Iteration   8: 647712.977 ops/s
Iteration   9: 640584.317 ops/s
Iteration  10: 665115.663 ops/s
Iteration  11: 635885.691 ops/s
Iteration  12: 664728.763 ops/s
Iteration  13: 622853.950 ops/s
Iteration  14: 651394.385 ops/s
Iteration  15: 657430.502 ops/s
Iteration  16: 627470.557 ops/s
Iteration  17: 660471.960 ops/s
Iteration  18: 676515.046 ops/s
Iteration  19: 639219.131 ops/s
Iteration  20: 658980.865 ops/s
Iteration  21: 646140.115 ops/s
Iteration  22: 674093.670 ops/s
Iteration  23: 641890.463 ops/s
Iteration  24: 667486.154 ops/s
Iteration  25: 653655.355 ops/s
Iteration  26: 646375.219 ops/s
Iteration  27: 676692.259 ops/s
Iteration  28: 644338.178 ops/s
Iteration  29: 664508.594 ops/s
Iteration  30: 674714.259 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_errorFunctionReturnsNull":
  654592.964 ±(99.9%) 10404.895 ops/s [Average]
  (min, avg, max) = (622853.950, 654592.964, 682415.566), stdev = 15573.558
  CI (99.9%): [644188.070, 664997.859] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_errorFunctionReturnsNull  thrpt   30  654592.964 ± 10404.895  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 207852.910 ops/s
# Warmup Iteration   2: 524404.200 ops/s
# Warmup Iteration   3: 606808.157 ops/s
# Warmup Iteration   4: 582882.579 ops/s
# Warmup Iteration   5: 567983.352 ops/s
# Warmup Iteration   6: 553683.621 ops/s
# Warmup Iteration   7: 582994.669 ops/s
# Warmup Iteration   8: 607469.349 ops/s
# Warmup Iteration   9: 635910.800 ops/s
# Warmup Iteration  10: 598473.989 ops/s
# Warmup Iteration  11: 622942.046 ops/s
# Warmup Iteration  12: 627688.284 ops/s
# Warmup Iteration  13: 602748.819 ops/s
# Warmup Iteration  14: 625037.282 ops/s
# Warmup Iteration  15: 605635.508 ops/s
# Warmup Iteration  16: 633042.671 ops/s
# Warmup Iteration  17: 638158.534 ops/s
# Warmup Iteration  18: 638531.558 ops/s
# Warmup Iteration  19: 648011.038 ops/s
# Warmup Iteration  20: 643077.632 ops/s
# Warmup Iteration  21: 671360.328 ops/s
# Warmup Iteration  22: 627500.223 ops/s
# Warmup Iteration  23: 609143.405 ops/s
# Warmup Iteration  24: 655231.380 ops/s
# Warmup Iteration  25: 660480.670 ops/s
# Warmup Iteration  26: 613689.318 ops/s
# Warmup Iteration  27: 647423.063 ops/s
# Warmup Iteration  28: 622693.957 ops/s
# Warmup Iteration  29: 647253.312 ops/s
# Warmup Iteration  30: 633270.606 ops/s
Iteration   1: 641373.761 ops/s
Iteration   2: 645641.940 ops/s
Iteration   3: 625409.713 ops/s
Iteration   4: 653065.056 ops/s
Iteration   5: 625320.574 ops/s
Iteration   6: 670981.742 ops/s
Iteration   7: 649099.334 ops/s
Iteration   8: 636909.155 ops/s
Iteration   9: 657081.768 ops/s
Iteration  10: 662727.355 ops/s
Iteration  11: 617566.690 ops/s
Iteration  12: 645696.326 ops/s
Iteration  13: 630550.208 ops/s
Iteration  14: 636747.991 ops/s
Iteration  15: 632637.298 ops/s
Iteration  16: 629587.371 ops/s
Iteration  17: 651279.235 ops/s
Iteration  18: 616230.023 ops/s
Iteration  19: 631617.882 ops/s
Iteration  20: 665403.410 ops/s
Iteration  21: 637418.996 ops/s
Iteration  22: 631221.710 ops/s
Iteration  23: 669487.313 ops/s
Iteration  24: 654316.355 ops/s
Iteration  25: 636855.373 ops/s
Iteration  26: 674775.116 ops/s
Iteration  27: 629937.527 ops/s
Iteration  28: 641488.583 ops/s
Iteration  29: 632923.073 ops/s
Iteration  30: 636668.115 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_mapperCrash":
  642333.966 ±(99.9%) 10437.701 ops/s [Average]
  (min, avg, max) = (616230.023, 642333.966, 674775.116), stdev = 15622.660
  CI (99.9%): [631896.266, 652771.667] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
SingleFlatMapObservableTest._Benchmark.benchmark_mapperCrash  thrpt   30  642333.966 ± 10437.701  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_justHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_justHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 308549.942 ops/s
# Warmup Iteration   2: 1758150.312 ops/s
# Warmup Iteration   3: 3228196.565 ops/s
# Warmup Iteration   4: 3569645.915 ops/s
# Warmup Iteration   5: 3769638.954 ops/s
# Warmup Iteration   6: 3709795.408 ops/s
# Warmup Iteration   7: 3577992.052 ops/s
# Warmup Iteration   8: 3810673.819 ops/s
# Warmup Iteration   9: 3757919.383 ops/s
# Warmup Iteration  10: 3623651.839 ops/s
# Warmup Iteration  11: 3685445.853 ops/s
# Warmup Iteration  12: 3644372.910 ops/s
# Warmup Iteration  13: 3727151.680 ops/s
# Warmup Iteration  14: 3682868.161 ops/s
# Warmup Iteration  15: 3687866.701 ops/s
# Warmup Iteration  16: 3862234.974 ops/s
# Warmup Iteration  17: 3709080.281 ops/s
# Warmup Iteration  18: 3760077.513 ops/s
# Warmup Iteration  19: 2991340.217 ops/s
# Warmup Iteration  20: 3780879.006 ops/s
# Warmup Iteration  21: 3669588.618 ops/s
# Warmup Iteration  22: 3679334.688 ops/s
# Warmup Iteration  23: 3858057.932 ops/s
# Warmup Iteration  24: 3747660.628 ops/s
# Warmup Iteration  25: 3614149.607 ops/s
# Warmup Iteration  26: 3820858.297 ops/s
# Warmup Iteration  27: 3838254.555 ops/s
# Warmup Iteration  28: 3588440.022 ops/s
# Warmup Iteration  29: 3622628.380 ops/s
# Warmup Iteration  30: 3721920.921 ops/s
Iteration   1: 3776139.205 ops/s
Iteration   2: 3739656.154 ops/s
Iteration   3: 3527645.373 ops/s
Iteration   4: 3850632.221 ops/s
Iteration   5: 3639883.607 ops/s
Iteration   6: 3659170.390 ops/s
Iteration   7: 3906185.640 ops/s
Iteration   8: 3821177.887 ops/s
Iteration   9: 3593520.341 ops/s
Iteration  10: 3762813.103 ops/s
Iteration  11: 3712313.886 ops/s
Iteration  12: 3658212.461 ops/s
Iteration  13: 3685693.656 ops/s
Iteration  14: 3719363.015 ops/s
Iteration  15: 3712959.324 ops/s
Iteration  16: 3817582.073 ops/s
Iteration  17: 3643236.818 ops/s
Iteration  18: 3680743.259 ops/s
Iteration  19: 3803500.613 ops/s
Iteration  20: 3525305.684 ops/s
Iteration  21: 3810298.307 ops/s
Iteration  22: 3536168.370 ops/s
Iteration  23: 3807059.018 ops/s
Iteration  24: 3653497.754 ops/s
Iteration  25: 3840013.563 ops/s
Iteration  26: 3638862.115 ops/s
Iteration  27: 3648325.249 ops/s
Iteration  28: 3717203.870 ops/s
Iteration  29: 3635583.428 ops/s
Iteration  30: 3637384.629 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_justHidden":
  3705337.700 ±(99.9%) 66229.949 ops/s [Average]
  (min, avg, max) = (3525305.684, 3705337.700, 3906185.640), stdev = 99129.877
  CI (99.9%): [3639107.752, 3771567.649] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_justHidden  thrpt   30  3705337.700 ± 66229.949  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_justHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_justHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 327878.314 ops/s
# Warmup Iteration   2: 1909173.229 ops/s
# Warmup Iteration   3: 3403350.225 ops/s
# Warmup Iteration   4: 3270352.872 ops/s
# Warmup Iteration   5: 2806939.628 ops/s
# Warmup Iteration   6: 3246125.097 ops/s
# Warmup Iteration   7: 3274610.694 ops/s
# Warmup Iteration   8: 3419159.673 ops/s
# Warmup Iteration   9: 3258055.135 ops/s
# Warmup Iteration  10: 3417063.184 ops/s
# Warmup Iteration  11: 3440285.310 ops/s
# Warmup Iteration  12: 3262204.245 ops/s
# Warmup Iteration  13: 3428185.088 ops/s
# Warmup Iteration  14: 3319995.319 ops/s
# Warmup Iteration  15: 3393803.707 ops/s
# Warmup Iteration  16: 3367490.075 ops/s
# Warmup Iteration  17: 3346980.352 ops/s
# Warmup Iteration  18: 3439242.297 ops/s
# Warmup Iteration  19: 3246916.580 ops/s
# Warmup Iteration  20: 3362760.891 ops/s
# Warmup Iteration  21: 3333902.225 ops/s
# Warmup Iteration  22: 3350432.703 ops/s
# Warmup Iteration  23: 3382012.384 ops/s
# Warmup Iteration  24: 3346354.741 ops/s
# Warmup Iteration  25: 3343872.716 ops/s
# Warmup Iteration  26: 3262588.436 ops/s
# Warmup Iteration  27: 3419314.431 ops/s
# Warmup Iteration  28: 3313817.211 ops/s
# Warmup Iteration  29: 3376208.910 ops/s
# Warmup Iteration  30: 3311822.262 ops/s
Iteration   1: 3419306.595 ops/s
Iteration   2: 3339606.955 ops/s
Iteration   3: 3343791.599 ops/s
Iteration   4: 3437625.447 ops/s
Iteration   5: 3249986.902 ops/s
Iteration   6: 3370900.838 ops/s
Iteration   7: 3396117.259 ops/s
Iteration   8: 3264902.052 ops/s
Iteration   9: 3441960.839 ops/s
Iteration  10: 3228992.847 ops/s
Iteration  11: 3299234.114 ops/s
Iteration  12: 3368285.026 ops/s
Iteration  13: 3317173.673 ops/s
Iteration  14: 3304111.730 ops/s
Iteration  15: 3304224.678 ops/s
Iteration  16: 3331206.966 ops/s
Iteration  17: 3347786.084 ops/s
Iteration  18: 3450469.458 ops/s
Iteration  19: 3305595.577 ops/s
Iteration  20: 3502806.582 ops/s
Iteration  21: 3319772.504 ops/s
Iteration  22: 3329027.704 ops/s
Iteration  23: 3376892.451 ops/s
Iteration  24: 3506174.993 ops/s
Iteration  25: 3309983.348 ops/s
Iteration  26: 3291434.119 ops/s
Iteration  27: 3473750.666 ops/s
Iteration  28: 3264012.650 ops/s
Iteration  29: 3452799.854 ops/s
Iteration  30: 3297939.306 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_justHidden":
  3354862.427 ±(99.9%) 50589.987 ops/s [Average]
  (min, avg, max) = (3228992.847, 3354862.427, 3506174.993), stdev = 75720.716
  CI (99.9%): [3304272.441, 3405452.414] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_justHidden  thrpt   30  3354862.427 ± 50589.987  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorMultipleElements$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorMultipleElements

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.664 ops/s
# Warmup Iteration   2: 27894.369 ops/s
# Warmup Iteration   3: 73049.587 ops/s
# Warmup Iteration   4: 146285.734 ops/s
# Warmup Iteration   5: 298077.670 ops/s
# Warmup Iteration   6: 268263.065 ops/s
# Warmup Iteration   7: 306944.984 ops/s
# Warmup Iteration   8: 339711.816 ops/s
# Warmup Iteration   9: 328018.992 ops/s
# Warmup Iteration  10: 338817.893 ops/s
# Warmup Iteration  11: 339629.703 ops/s
# Warmup Iteration  12: 328977.026 ops/s
# Warmup Iteration  13: 284547.201 ops/s
# Warmup Iteration  14: 341834.275 ops/s
# Warmup Iteration  15: 323244.244 ops/s
# Warmup Iteration  16: 342238.758 ops/s
# Warmup Iteration  17: 345125.929 ops/s
# Warmup Iteration  18: 332370.144 ops/s
# Warmup Iteration  19: 321221.530 ops/s
# Warmup Iteration  20: 337886.985 ops/s
# Warmup Iteration  21: 337882.954 ops/s
# Warmup Iteration  22: 334120.555 ops/s
# Warmup Iteration  23: 340695.116 ops/s
# Warmup Iteration  24: 323185.822 ops/s
# Warmup Iteration  25: 335478.738 ops/s
# Warmup Iteration  26: 343818.783 ops/s
# Warmup Iteration  27: 319846.570 ops/s
# Warmup Iteration  28: 341618.379 ops/s
# Warmup Iteration  29: 339368.038 ops/s
# Warmup Iteration  30: 331284.466 ops/s
Iteration   1: 345408.877 ops/s
Iteration   2: 326969.852 ops/s
Iteration   3: 348532.804 ops/s
Iteration   4: 343166.396 ops/s
Iteration   5: 338914.409 ops/s
Iteration   6: 334352.390 ops/s
Iteration   7: 333589.134 ops/s
Iteration   8: 325425.709 ops/s
Iteration   9: 330070.759 ops/s
Iteration  10: 330534.127 ops/s
Iteration  11: 342964.697 ops/s
Iteration  12: 330455.139 ops/s
Iteration  13: 335118.854 ops/s
Iteration  14: 334262.622 ops/s
Iteration  15: 332502.247 ops/s
Iteration  16: 331943.766 ops/s
Iteration  17: 331799.710 ops/s
Iteration  18: 327010.414 ops/s
Iteration  19: 344045.762 ops/s
Iteration  20: 332199.153 ops/s
Iteration  21: 343205.424 ops/s
Iteration  22: 328610.485 ops/s
Iteration  23: 345200.634 ops/s
Iteration  24: 333598.749 ops/s
Iteration  25: 334016.574 ops/s
Iteration  26: 324012.812 ops/s
Iteration  27: 334429.701 ops/s
Iteration  28: 341785.612 ops/s
Iteration  29: 332257.691 ops/s
Iteration  30: 335428.042 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorMultipleElements":
  335060.418 ±(99.9%) 4351.305 ops/s [Average]
  (min, avg, max) = (324012.812, 335060.418, 348532.804), stdev = 6512.830
  CI (99.9%): [330709.113, 339411.724] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableFirstTest._Benchmark.benchmark_firstOrErrorMultipleElements  thrpt   30  335060.418 ± 4351.305  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableHideTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableHideTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1210849.379 ops/s
# Warmup Iteration   2: 4660439.214 ops/s
# Warmup Iteration   3: 6351464.099 ops/s
# Warmup Iteration   4: 6021373.044 ops/s
# Warmup Iteration   5: 6085727.795 ops/s
# Warmup Iteration   6: 6145359.504 ops/s
# Warmup Iteration   7: 5618886.363 ops/s
# Warmup Iteration   8: 5901391.068 ops/s
# Warmup Iteration   9: 5972733.899 ops/s
# Warmup Iteration  10: 6456630.485 ops/s
# Warmup Iteration  11: 6322224.197 ops/s
# Warmup Iteration  12: 5942498.000 ops/s
# Warmup Iteration  13: 6185619.477 ops/s
# Warmup Iteration  14: 6047935.773 ops/s
# Warmup Iteration  15: 6161164.359 ops/s
# Warmup Iteration  16: 5965489.353 ops/s
# Warmup Iteration  17: 6185877.764 ops/s
# Warmup Iteration  18: 6156960.203 ops/s
# Warmup Iteration  19: 6104469.873 ops/s
# Warmup Iteration  20: 6283360.483 ops/s
# Warmup Iteration  21: 6000123.659 ops/s
# Warmup Iteration  22: 6410330.081 ops/s
# Warmup Iteration  23: 6041912.698 ops/s
# Warmup Iteration  24: 5981047.095 ops/s
# Warmup Iteration  25: 6326541.280 ops/s
# Warmup Iteration  26: 6039839.838 ops/s
# Warmup Iteration  27: 6171458.840 ops/s
# Warmup Iteration  28: 6010783.038 ops/s
# Warmup Iteration  29: 6258265.899 ops/s
# Warmup Iteration  30: 6267796.262 ops/s
Iteration   1: 6038489.301 ops/s
Iteration   2: 6351664.102 ops/s
Iteration   3: 6496226.690 ops/s
Iteration   4: 6081129.988 ops/s
Iteration   5: 6294201.488 ops/s
Iteration   6: 6107988.015 ops/s
Iteration   7: 6215021.314 ops/s
Iteration   8: 6378596.922 ops/s
Iteration   9: 6202216.827 ops/s
Iteration  10: 6445902.178 ops/s
Iteration  11: 6393600.162 ops/s
Iteration  12: 6145658.653 ops/s
Iteration  13: 6312568.529 ops/s
Iteration  14: 6117822.132 ops/s
Iteration  15: 6226169.806 ops/s
Iteration  16: 6318657.996 ops/s
Iteration  17: 6054981.319 ops/s
Iteration  18: 6395908.979 ops/s
Iteration  19: 6127988.510 ops/s
Iteration  20: 6062802.506 ops/s
Iteration  21: 6326908.001 ops/s
Iteration  22: 6103974.341 ops/s
Iteration  23: 6447316.712 ops/s
Iteration  24: 6086877.077 ops/s
Iteration  25: 6113635.473 ops/s
Iteration  26: 6134369.267 ops/s
Iteration  27: 6460920.532 ops/s
Iteration  28: 6071389.544 ops/s
Iteration  29: 5985945.276 ops/s
Iteration  30: 6309029.101 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableHideTest._Benchmark.benchmark_disposed":
  6226932.025 ±(99.9%) 100068.498 ops/s [Average]
  (min, avg, max) = (5985945.276, 6226932.025, 6496226.690), stdev = 149777.828
  CI (99.9%): [6126863.527, 6327000.523] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score        Error  Units
ObservableHideTest._Benchmark.benchmark_disposed  thrpt   30  6226932.025 ± 100068.498  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorInvalidIndex$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorInvalidIndex

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 153793.382 ops/s
# Warmup Iteration   2: 526555.224 ops/s
# Warmup Iteration   3: 582429.691 ops/s
# Warmup Iteration   4: 614209.423 ops/s
# Warmup Iteration   5: 593613.659 ops/s
# Warmup Iteration   6: 562017.742 ops/s
# Warmup Iteration   7: 632473.580 ops/s
# Warmup Iteration   8: 506025.657 ops/s
# Warmup Iteration   9: 595306.941 ops/s
# Warmup Iteration  10: 560390.709 ops/s
# Warmup Iteration  11: 609862.718 ops/s
# Warmup Iteration  12: 618791.993 ops/s
# Warmup Iteration  13: 614623.801 ops/s
# Warmup Iteration  14: 609204.850 ops/s
# Warmup Iteration  15: 612547.186 ops/s
# Warmup Iteration  16: 630417.963 ops/s
# Warmup Iteration  17: 640582.234 ops/s
# Warmup Iteration  18: 654540.596 ops/s
# Warmup Iteration  19: 645925.247 ops/s
# Warmup Iteration  20: 652847.545 ops/s
# Warmup Iteration  21: 655934.057 ops/s
# Warmup Iteration  22: 635100.158 ops/s
# Warmup Iteration  23: 641246.459 ops/s
# Warmup Iteration  24: 632672.449 ops/s
# Warmup Iteration  25: 668954.354 ops/s
# Warmup Iteration  26: 639027.413 ops/s
# Warmup Iteration  27: 670410.086 ops/s
# Warmup Iteration  28: 680844.718 ops/s
# Warmup Iteration  29: 634713.647 ops/s
# Warmup Iteration  30: 650420.308 ops/s
Iteration   1: 637468.028 ops/s
Iteration   2: 664436.439 ops/s
Iteration   3: 657533.423 ops/s
Iteration   4: 635209.152 ops/s
Iteration   5: 657640.162 ops/s
Iteration   6: 614766.900 ops/s
Iteration   7: 642609.584 ops/s
Iteration   8: 655888.651 ops/s
Iteration   9: 644784.663 ops/s
Iteration  10: 662405.157 ops/s
Iteration  11: 643830.431 ops/s
Iteration  12: 654097.803 ops/s
Iteration  13: 652223.426 ops/s
Iteration  14: 635704.144 ops/s
Iteration  15: 665049.971 ops/s
Iteration  16: 626864.418 ops/s
Iteration  17: 672022.755 ops/s
Iteration  18: 632153.397 ops/s
Iteration  19: 684926.444 ops/s
Iteration  20: 657997.160 ops/s
Iteration  21: 630157.793 ops/s
Iteration  22: 678647.337 ops/s
Iteration  23: 630820.936 ops/s
Iteration  24: 651181.394 ops/s
Iteration  25: 656687.946 ops/s
Iteration  26: 639511.504 ops/s
Iteration  27: 674273.617 ops/s
Iteration  28: 664408.710 ops/s
Iteration  29: 688309.851 ops/s
Iteration  30: 642167.815 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorInvalidIndex":
  651792.634 ±(99.9%) 11959.358 ops/s [Average]
  (min, avg, max) = (614766.900, 651792.634, 688309.851), stdev = 17900.206
  CI (99.9%): [639833.275, 663751.992] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorInvalidIndex  thrpt   30  651792.634 ± 11959.358  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrErrorMultipleElements$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrErrorMultipleElements

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 198802.010 ops/s
# Warmup Iteration   2: 513727.431 ops/s
# Warmup Iteration   3: 598319.955 ops/s
# Warmup Iteration   4: 541648.742 ops/s
# Warmup Iteration   5: 552536.653 ops/s
# Warmup Iteration   6: 590393.138 ops/s
# Warmup Iteration   7: 602580.952 ops/s
# Warmup Iteration   8: 617609.237 ops/s
# Warmup Iteration   9: 627900.458 ops/s
# Warmup Iteration  10: 615928.235 ops/s
# Warmup Iteration  11: 613150.880 ops/s
# Warmup Iteration  12: 622040.712 ops/s
# Warmup Iteration  13: 617629.675 ops/s
# Warmup Iteration  14: 632386.354 ops/s
# Warmup Iteration  15: 621048.184 ops/s
# Warmup Iteration  16: 629707.515 ops/s
# Warmup Iteration  17: 623401.347 ops/s
# Warmup Iteration  18: 654988.743 ops/s
# Warmup Iteration  19: 639723.355 ops/s
# Warmup Iteration  20: 625138.620 ops/s
# Warmup Iteration  21: 690280.487 ops/s
# Warmup Iteration  22: 646018.990 ops/s
# Warmup Iteration  23: 623008.528 ops/s
# Warmup Iteration  24: 651487.271 ops/s
# Warmup Iteration  25: 637183.531 ops/s
# Warmup Iteration  26: 654382.925 ops/s
# Warmup Iteration  27: 644930.221 ops/s
# Warmup Iteration  28: 640474.573 ops/s
# Warmup Iteration  29: 654437.734 ops/s
# Warmup Iteration  30: 650824.711 ops/s
Iteration   1: 654763.417 ops/s
Iteration   2: 623143.655 ops/s
Iteration   3: 665380.461 ops/s
Iteration   4: 642999.377 ops/s
Iteration   5: 642007.868 ops/s
Iteration   6: 620654.337 ops/s
Iteration   7: 655764.265 ops/s
Iteration   8: 642734.415 ops/s
Iteration   9: 636752.549 ops/s
Iteration  10: 654878.806 ops/s
Iteration  11: 617231.037 ops/s
Iteration  12: 669730.746 ops/s
Iteration  13: 641652.838 ops/s
Iteration  14: 634120.555 ops/s
Iteration  15: 643179.972 ops/s
Iteration  16: 675438.331 ops/s
Iteration  17: 623656.084 ops/s
Iteration  18: 651096.182 ops/s
Iteration  19: 630508.421 ops/s
Iteration  20: 637999.800 ops/s
Iteration  21: 661132.481 ops/s
Iteration  22: 631197.174 ops/s
Iteration  23: 660122.929 ops/s
Iteration  24: 641585.257 ops/s
Iteration  25: 643952.611 ops/s
Iteration  26: 661657.348 ops/s
Iteration  27: 637711.089 ops/s
Iteration  28: 662147.060 ops/s
Iteration  29: 644897.405 ops/s
Iteration  30: 625844.908 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrErrorMultipleElements":
  644464.713 ±(99.9%) 10192.777 ops/s [Average]
  (min, avg, max) = (617231.037, 644464.713, 675438.331), stdev = 15256.070
  CI (99.9%): [634271.936, 654657.490] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
ObservableSingleTest._Benchmark.benchmark_singleOrErrorMultipleElements  thrpt   30  644464.713 ± 10192.777  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1244834.339 ops/s
# Warmup Iteration   2: 8603188.370 ops/s
# Warmup Iteration   3: 7812609.029 ops/s
# Warmup Iteration   4: 11605820.204 ops/s
# Warmup Iteration   5: 12022193.929 ops/s
# Warmup Iteration   6: 11652225.048 ops/s
# Warmup Iteration   7: 11152514.702 ops/s
# Warmup Iteration   8: 11609631.158 ops/s
# Warmup Iteration   9: 11655701.790 ops/s
# Warmup Iteration  10: 11839516.066 ops/s
# Warmup Iteration  11: 11167168.840 ops/s
# Warmup Iteration  12: 12053935.477 ops/s
# Warmup Iteration  13: 11158741.495 ops/s
# Warmup Iteration  14: 11910718.773 ops/s
# Warmup Iteration  15: 11332328.407 ops/s
# Warmup Iteration  16: 11937145.733 ops/s
# Warmup Iteration  17: 11286056.942 ops/s
# Warmup Iteration  18: 11860811.260 ops/s
# Warmup Iteration  19: 11910459.476 ops/s
# Warmup Iteration  20: 11363571.328 ops/s
# Warmup Iteration  21: 11954492.222 ops/s
# Warmup Iteration  22: 11819420.780 ops/s
# Warmup Iteration  23: 11435897.687 ops/s
# Warmup Iteration  24: 11808966.109 ops/s
# Warmup Iteration  25: 11728841.718 ops/s
# Warmup Iteration  26: 11857010.788 ops/s
# Warmup Iteration  27: 12085080.148 ops/s
# Warmup Iteration  28: 11084318.790 ops/s
# Warmup Iteration  29: 12013921.020 ops/s
# Warmup Iteration  30: 11578319.264 ops/s
Iteration   1: 12039994.735 ops/s
Iteration   2: 11801289.496 ops/s
Iteration   3: 11684428.660 ops/s
Iteration   4: 11980277.698 ops/s
Iteration   5: 11551367.345 ops/s
Iteration   6: 11569626.600 ops/s
Iteration   7: 12210630.239 ops/s
Iteration   8: 11232516.514 ops/s
Iteration   9: 11595479.898 ops/s
Iteration  10: 11994786.755 ops/s
Iteration  11: 11564765.842 ops/s
Iteration  12: 11900676.324 ops/s
Iteration  13: 11560191.284 ops/s
Iteration  14: 11837365.861 ops/s
Iteration  15: 11845226.624 ops/s
Iteration  16: 11328326.067 ops/s
Iteration  17: 11847093.519 ops/s
Iteration  18: 11805262.791 ops/s
Iteration  19: 11782892.068 ops/s
Iteration  20: 12101911.967 ops/s
Iteration  21: 11231671.940 ops/s
Iteration  22: 11780567.670 ops/s
Iteration  23: 11430323.488 ops/s
Iteration  24: 11716729.624 ops/s
Iteration  25: 11742467.964 ops/s
Iteration  26: 11931305.865 ops/s
Iteration  27: 11773300.437 ops/s
Iteration  28: 11677872.902 ops/s
Iteration  29: 12061918.926 ops/s
Iteration  30: 11361405.708 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservableTest._Benchmark.benchmark_isDisposed":
  11731389.160 ±(99.9%) 168940.897 ops/s [Average]
  (min, avg, max) = (11231671.940, 11731389.160, 12210630.239), stdev = 252862.801
  CI (99.9%): [11562448.263, 11900330.058] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
CompletableAndThenObservableTest._Benchmark.benchmark_isDisposed  thrpt   30  11731389.160 ± 168940.897  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectInto$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectInto

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 167552.724 ops/s
# Warmup Iteration   2: 923878.909 ops/s
# Warmup Iteration   3: 2192498.149 ops/s
# Warmup Iteration   4: 2223701.851 ops/s
# Warmup Iteration   5: 2309351.383 ops/s
# Warmup Iteration   6: 2259843.684 ops/s
# Warmup Iteration   7: 2041508.825 ops/s
# Warmup Iteration   8: 2209979.168 ops/s
# Warmup Iteration   9: 2254007.067 ops/s
# Warmup Iteration  10: 2386777.656 ops/s
# Warmup Iteration  11: 2251049.770 ops/s
# Warmup Iteration  12: 2295986.702 ops/s
# Warmup Iteration  13: 2393082.147 ops/s
# Warmup Iteration  14: 2229882.890 ops/s
# Warmup Iteration  15: 2337099.440 ops/s
# Warmup Iteration  16: 2252077.255 ops/s
# Warmup Iteration  17: 2336479.313 ops/s
# Warmup Iteration  18: 2268430.030 ops/s
# Warmup Iteration  19: 2295292.230 ops/s
# Warmup Iteration  20: 2387314.882 ops/s
# Warmup Iteration  21: 2290473.900 ops/s
# Warmup Iteration  22: 2318770.833 ops/s
# Warmup Iteration  23: 2230346.274 ops/s
# Warmup Iteration  24: 2295948.572 ops/s
# Warmup Iteration  25: 2431594.782 ops/s
# Warmup Iteration  26: 2272144.473 ops/s
# Warmup Iteration  27: 2337687.380 ops/s
# Warmup Iteration  28: 2349368.714 ops/s
# Warmup Iteration  29: 2282705.614 ops/s
# Warmup Iteration  30: 2325793.931 ops/s
Iteration   1: 2285606.539 ops/s
Iteration   2: 2312405.800 ops/s
Iteration   3: 2392825.257 ops/s
Iteration   4: 2303584.286 ops/s
Iteration   5: 2338509.914 ops/s
Iteration   6: 2314694.070 ops/s
Iteration   7: 2270512.863 ops/s
Iteration   8: 2330657.374 ops/s
Iteration   9: 2260846.110 ops/s
Iteration  10: 2301900.922 ops/s
Iteration  11: 2236335.261 ops/s
Iteration  12: 2314436.727 ops/s
Iteration  13: 2337534.932 ops/s
Iteration  14: 2282746.526 ops/s
Iteration  15: 2277296.836 ops/s
Iteration  16: 2262507.201 ops/s
Iteration  17: 2370920.518 ops/s
Iteration  18: 2285362.028 ops/s
Iteration  19: 2373308.179 ops/s
Iteration  20: 2313162.942 ops/s
Iteration  21: 2273859.546 ops/s
Iteration  22: 2364265.756 ops/s
Iteration  23: 2271093.666 ops/s
Iteration  24: 2304495.467 ops/s
Iteration  25: 2281889.201 ops/s
Iteration  26: 2384178.800 ops/s
Iteration  27: 2253375.667 ops/s
Iteration  28: 2324730.583 ops/s
Iteration  29: 2343735.916 ops/s
Iteration  30: 1895189.259 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectInto":
  2295398.938 ±(99.9%) 57357.192 ops/s [Average]
  (min, avg, max) = (1895189.259, 2295398.938, 2392825.257), stdev = 85849.551
  CI (99.9%): [2238041.747, 2352756.130] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ObservableCollectTest._Benchmark.benchmark_collectInto  thrpt   30  2295398.938 ± 57357.192  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_emptyHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_emptyHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2232211.442 ops/s
# Warmup Iteration   2: 4551693.011 ops/s
# Warmup Iteration   3: 6478703.184 ops/s
# Warmup Iteration   4: 6241590.280 ops/s
# Warmup Iteration   5: 6596853.011 ops/s
# Warmup Iteration   6: 6286147.625 ops/s
# Warmup Iteration   7: 6372568.282 ops/s
# Warmup Iteration   8: 6405138.214 ops/s
# Warmup Iteration   9: 6461356.398 ops/s
# Warmup Iteration  10: 6428131.227 ops/s
# Warmup Iteration  11: 6305432.295 ops/s
# Warmup Iteration  12: 6493973.193 ops/s
# Warmup Iteration  13: 6463433.749 ops/s
# Warmup Iteration  14: 6401023.794 ops/s
# Warmup Iteration  15: 6481314.818 ops/s
# Warmup Iteration  16: 6264260.719 ops/s
# Warmup Iteration  17: 6595943.939 ops/s
# Warmup Iteration  18: 6419758.234 ops/s
# Warmup Iteration  19: 6275280.838 ops/s
# Warmup Iteration  20: 6735335.896 ops/s
# Warmup Iteration  21: 6364995.208 ops/s
# Warmup Iteration  22: 6395527.948 ops/s
# Warmup Iteration  23: 6734700.521 ops/s
# Warmup Iteration  24: 6330932.601 ops/s
# Warmup Iteration  25: 6481893.813 ops/s
# Warmup Iteration  26: 6520736.903 ops/s
# Warmup Iteration  27: 6266769.297 ops/s
# Warmup Iteration  28: 6465619.820 ops/s
# Warmup Iteration  29: 6243479.534 ops/s
# Warmup Iteration  30: 6350014.561 ops/s
Iteration   1: 6635960.200 ops/s
Iteration   2: 6188148.120 ops/s
Iteration   3: 6532476.060 ops/s
Iteration   4: 6460222.430 ops/s
Iteration   5: 6311803.838 ops/s
Iteration   6: 6495017.725 ops/s
Iteration   7: 6212401.054 ops/s
Iteration   8: 6600808.359 ops/s
Iteration   9: 6183987.242 ops/s
Iteration  10: 6371176.816 ops/s
Iteration  11: 6175234.158 ops/s
Iteration  12: 6396937.440 ops/s
Iteration  13: 6538333.028 ops/s
Iteration  14: 6451754.489 ops/s
Iteration  15: 6298090.959 ops/s
Iteration  16: 6364406.555 ops/s
Iteration  17: 6609399.404 ops/s
Iteration  18: 6440953.752 ops/s
Iteration  19: 6453515.149 ops/s
Iteration  20: 6712142.712 ops/s
Iteration  21: 6299027.826 ops/s
Iteration  22: 6397219.800 ops/s
Iteration  23: 6389427.909 ops/s
Iteration  24: 6578454.479 ops/s
Iteration  25: 6461647.934 ops/s
Iteration  26: 6296539.815 ops/s
Iteration  27: 6522943.162 ops/s
Iteration  28: 6311501.538 ops/s
Iteration  29: 6656558.788 ops/s
Iteration  30: 6400619.809 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_emptyHidden":
  6424890.352 ±(99.9%) 97548.834 ops/s [Average]
  (min, avg, max) = (6175234.158, 6424890.352, 6712142.712), stdev = 146006.513
  CI (99.9%): [6327341.518, 6522439.185] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_emptyHidden  thrpt   30  6424890.352 ± 97548.834  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_streamNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_streamNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 120863.722 ops/s
# Warmup Iteration   2: 440506.940 ops/s
# Warmup Iteration   3: 504876.609 ops/s
# Warmup Iteration   4: 493631.601 ops/s
# Warmup Iteration   5: 483831.460 ops/s
# Warmup Iteration   6: 528234.337 ops/s
# Warmup Iteration   7: 535168.461 ops/s
# Warmup Iteration   8: 536568.943 ops/s
# Warmup Iteration   9: 483566.438 ops/s
# Warmup Iteration  10: 551305.225 ops/s
# Warmup Iteration  11: 552834.612 ops/s
# Warmup Iteration  12: 524230.248 ops/s
# Warmup Iteration  13: 562705.388 ops/s
# Warmup Iteration  14: 537606.569 ops/s
# Warmup Iteration  15: 532490.702 ops/s
# Warmup Iteration  16: 553384.482 ops/s
# Warmup Iteration  17: 550295.365 ops/s
# Warmup Iteration  18: 562404.468 ops/s
# Warmup Iteration  19: 533157.142 ops/s
# Warmup Iteration  20: 578404.378 ops/s
# Warmup Iteration  21: 555663.717 ops/s
# Warmup Iteration  22: 555450.578 ops/s
# Warmup Iteration  23: 570170.015 ops/s
# Warmup Iteration  24: 547025.708 ops/s
# Warmup Iteration  25: 568683.977 ops/s
# Warmup Iteration  26: 577531.771 ops/s
# Warmup Iteration  27: 555059.318 ops/s
# Warmup Iteration  28: 557742.336 ops/s
# Warmup Iteration  29: 574907.036 ops/s
# Warmup Iteration  30: 561294.347 ops/s
Iteration   1: 548967.200 ops/s
Iteration   2: 553527.435 ops/s
Iteration   3: 547901.602 ops/s
Iteration   4: 555831.873 ops/s
Iteration   5: 576278.744 ops/s
Iteration   6: 543871.899 ops/s
Iteration   7: 574910.536 ops/s
Iteration   8: 536649.012 ops/s
Iteration   9: 549010.184 ops/s
Iteration  10: 556220.515 ops/s
Iteration  11: 544358.799 ops/s
Iteration  12: 575205.636 ops/s
Iteration  13: 547582.099 ops/s
Iteration  14: 574900.295 ops/s
Iteration  15: 575358.785 ops/s
Iteration  16: 549162.200 ops/s
Iteration  17: 567597.159 ops/s
Iteration  18: 576868.733 ops/s
Iteration  19: 541542.897 ops/s
Iteration  20: 575001.484 ops/s
Iteration  21: 554106.948 ops/s
Iteration  22: 565811.151 ops/s
Iteration  23: 577409.477 ops/s
Iteration  24: 551636.425 ops/s
Iteration  25: 463965.131 ops/s
Iteration  26: 550648.061 ops/s
Iteration  27: 573468.266 ops/s
Iteration  28: 542471.022 ops/s
Iteration  29: 569720.414 ops/s
Iteration  30: 546172.819 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_streamNull":
  555538.560 ±(99.9%) 14573.036 ops/s [Average]
  (min, avg, max) = (463965.131, 555538.560, 577409.477), stdev = 21812.235
  CI (99.9%): [540965.524, 570111.595] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_streamNull  thrpt   30  555538.560 ± 14573.036  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_hasNextThrowsLater$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_hasNextThrowsLater

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 104628.905 ops/s
# Warmup Iteration   2: 433090.668 ops/s
# Warmup Iteration   3: 489206.268 ops/s
# Warmup Iteration   4: 500906.665 ops/s
# Warmup Iteration   5: 540002.057 ops/s
# Warmup Iteration   6: 489584.851 ops/s
# Warmup Iteration   7: 507491.466 ops/s
# Warmup Iteration   8: 508129.930 ops/s
# Warmup Iteration   9: 528154.854 ops/s
# Warmup Iteration  10: 523478.683 ops/s
# Warmup Iteration  11: 522465.805 ops/s
# Warmup Iteration  12: 501595.762 ops/s
# Warmup Iteration  13: 514670.219 ops/s
# Warmup Iteration  14: 531507.748 ops/s
# Warmup Iteration  15: 506119.604 ops/s
# Warmup Iteration  16: 522843.827 ops/s
# Warmup Iteration  17: 559426.796 ops/s
# Warmup Iteration  18: 517551.422 ops/s
# Warmup Iteration  19: 560216.230 ops/s
# Warmup Iteration  20: 501567.559 ops/s
# Warmup Iteration  21: 557794.709 ops/s
# Warmup Iteration  22: 537960.059 ops/s
# Warmup Iteration  23: 544214.919 ops/s
# Warmup Iteration  24: 557264.475 ops/s
# Warmup Iteration  25: 524873.803 ops/s
# Warmup Iteration  26: 549676.369 ops/s
# Warmup Iteration  27: 547352.057 ops/s
# Warmup Iteration  28: 521358.109 ops/s
# Warmup Iteration  29: 557874.394 ops/s
# Warmup Iteration  30: 521673.923 ops/s
Iteration   1: 533038.370 ops/s
Iteration   2: 545052.202 ops/s
Iteration   3: 541900.343 ops/s
Iteration   4: 543758.324 ops/s
Iteration   5: 534359.033 ops/s
Iteration   6: 564125.406 ops/s
Iteration   7: 544351.648 ops/s
Iteration   8: 535601.729 ops/s
Iteration   9: 554228.058 ops/s
Iteration  10: 539667.951 ops/s
Iteration  11: 552967.753 ops/s
Iteration  12: 556098.643 ops/s
Iteration  13: 526373.752 ops/s
Iteration  14: 558275.047 ops/s
Iteration  15: 548442.105 ops/s
Iteration  16: 539163.113 ops/s
Iteration  17: 547449.641 ops/s
Iteration  18: 535254.712 ops/s
Iteration  19: 547347.388 ops/s
Iteration  20: 533146.987 ops/s
Iteration  21: 564477.160 ops/s
Iteration  22: 535439.407 ops/s
Iteration  23: 538869.829 ops/s
Iteration  24: 549449.728 ops/s
Iteration  25: 535989.117 ops/s
Iteration  26: 546883.712 ops/s
Iteration  27: 529951.907 ops/s
Iteration  28: 555672.667 ops/s
Iteration  29: 527016.603 ops/s
Iteration  30: 533510.483 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_hasNextThrowsLater":
  543262.094 ±(99.9%) 6970.163 ops/s [Average]
  (min, avg, max) = (526373.752, 543262.094, 564477.160), stdev = 10432.613
  CI (99.9%): [536291.931, 550232.257] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_hasNextThrowsLater  thrpt   30  543262.094 ± 6970.163  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 846239.479 ops/s
# Warmup Iteration   2: 4386641.855 ops/s
# Warmup Iteration   3: 5801957.077 ops/s
# Warmup Iteration   4: 6047647.729 ops/s
# Warmup Iteration   5: 6420158.287 ops/s
# Warmup Iteration   6: 6278143.620 ops/s
# Warmup Iteration   7: 5992735.119 ops/s
# Warmup Iteration   8: 6289271.144 ops/s
# Warmup Iteration   9: 6025995.260 ops/s
# Warmup Iteration  10: 6283897.372 ops/s
# Warmup Iteration  11: 6135963.497 ops/s
# Warmup Iteration  12: 6359064.480 ops/s
# Warmup Iteration  13: 6181921.361 ops/s
# Warmup Iteration  14: 6053570.093 ops/s
# Warmup Iteration  15: 6385374.537 ops/s
# Warmup Iteration  16: 5929321.921 ops/s
# Warmup Iteration  17: 6322695.649 ops/s
# Warmup Iteration  18: 6042564.206 ops/s
# Warmup Iteration  19: 6098058.055 ops/s
# Warmup Iteration  20: 6488960.408 ops/s
# Warmup Iteration  21: 6065272.455 ops/s
# Warmup Iteration  22: 6220588.890 ops/s
# Warmup Iteration  23: 6442006.825 ops/s
# Warmup Iteration  24: 6221632.569 ops/s
# Warmup Iteration  25: 6233231.589 ops/s
# Warmup Iteration  26: 6261127.893 ops/s
# Warmup Iteration  27: 6319075.670 ops/s
# Warmup Iteration  28: 6263493.451 ops/s
# Warmup Iteration  29: 6090085.463 ops/s
# Warmup Iteration  30: 6338078.475 ops/s
Iteration   1: 6123494.035 ops/s
Iteration   2: 6205299.738 ops/s
Iteration   3: 6425603.715 ops/s
Iteration   4: 6169053.787 ops/s
Iteration   5: 6101038.798 ops/s
Iteration   6: 6270275.837 ops/s
Iteration   7: 6428584.256 ops/s
Iteration   8: 6030598.756 ops/s
Iteration   9: 6434227.030 ops/s
Iteration  10: 6420589.207 ops/s
Iteration  11: 6057016.559 ops/s
Iteration  12: 6268142.723 ops/s
Iteration  13: 6138754.172 ops/s
Iteration  14: 6273798.358 ops/s
Iteration  15: 6206230.625 ops/s
Iteration  16: 6132262.247 ops/s
Iteration  17: 6468236.169 ops/s
Iteration  18: 6047055.893 ops/s
Iteration  19: 6372332.204 ops/s
Iteration  20: 4982734.296 ops/s
Iteration  21: 6476470.263 ops/s
Iteration  22: 5993873.676 ops/s
Iteration  23: 6000709.271 ops/s
Iteration  24: 6371870.861 ops/s
Iteration  25: 6183581.066 ops/s
Iteration  26: 6321016.902 ops/s
Iteration  27: 6205854.327 ops/s
Iteration  28: 6364945.779 ops/s
Iteration  29: 6247467.324 ops/s
Iteration  30: 6372336.173 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_normal":
  6203115.135 ±(99.9%) 182533.309 ops/s [Average]
  (min, avg, max) = (4982734.296, 6203115.135, 6476470.263), stdev = 273207.285
  CI (99.9%): [6020581.826, 6385648.444] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
SingleConcatMapCompletableTest._Benchmark.benchmark_normal  thrpt   30  6203115.135 ± 182533.309  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 206927.203 ops/s
# Warmup Iteration   2: 595156.892 ops/s
# Warmup Iteration   3: 668709.385 ops/s
# Warmup Iteration   4: 609348.121 ops/s
# Warmup Iteration   5: 633226.869 ops/s
# Warmup Iteration   6: 610104.751 ops/s
# Warmup Iteration   7: 607636.002 ops/s
# Warmup Iteration   8: 674272.881 ops/s
# Warmup Iteration   9: 635166.055 ops/s
# Warmup Iteration  10: 634521.799 ops/s
# Warmup Iteration  11: 666120.799 ops/s
# Warmup Iteration  12: 671965.597 ops/s
# Warmup Iteration  13: 618636.628 ops/s
# Warmup Iteration  14: 662194.894 ops/s
# Warmup Iteration  15: 640622.404 ops/s
# Warmup Iteration  16: 651966.967 ops/s
# Warmup Iteration  17: 675241.145 ops/s
# Warmup Iteration  18: 670543.054 ops/s
# Warmup Iteration  19: 693275.645 ops/s
# Warmup Iteration  20: 652258.953 ops/s
# Warmup Iteration  21: 692797.058 ops/s
# Warmup Iteration  22: 666966.754 ops/s
# Warmup Iteration  23: 665832.465 ops/s
# Warmup Iteration  24: 658613.132 ops/s
# Warmup Iteration  25: 638944.090 ops/s
# Warmup Iteration  26: 695787.541 ops/s
# Warmup Iteration  27: 679658.552 ops/s
# Warmup Iteration  28: 690045.106 ops/s
# Warmup Iteration  29: 693558.376 ops/s
# Warmup Iteration  30: 687165.336 ops/s
Iteration   1: 692277.215 ops/s
Iteration   2: 715116.997 ops/s
Iteration   3: 661692.610 ops/s
Iteration   4: 696313.237 ops/s
Iteration   5: 698125.998 ops/s
Iteration   6: 663500.089 ops/s
Iteration   7: 680654.373 ops/s
Iteration   8: 660753.562 ops/s
Iteration   9: 691931.502 ops/s
Iteration  10: 684004.492 ops/s
Iteration  11: 679966.288 ops/s
Iteration  12: 684629.832 ops/s
Iteration  13: 658927.236 ops/s
Iteration  14: 671586.972 ops/s
Iteration  15: 694928.433 ops/s
Iteration  16: 686703.962 ops/s
Iteration  17: 664100.322 ops/s
Iteration  18: 711991.745 ops/s
Iteration  19: 667546.440 ops/s
Iteration  20: 691707.907 ops/s
Iteration  21: 691852.243 ops/s
Iteration  22: 675237.516 ops/s
Iteration  23: 649682.653 ops/s
Iteration  24: 691953.422 ops/s
Iteration  25: 689274.173 ops/s
Iteration  26: 695276.803 ops/s
Iteration  27: 681878.916 ops/s
Iteration  28: 653781.392 ops/s
Iteration  29: 699161.860 ops/s
Iteration  30: 663552.081 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull":
  681603.676 ±(99.9%) 11291.904 ops/s [Average]
  (min, avg, max) = (649682.653, 681603.676, 715116.997), stdev = 16901.192
  CI (99.9%): [670311.772, 692895.580] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
SingleConcatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull  thrpt   30  681603.676 ± 11291.904  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 277803.539 ops/s
# Warmup Iteration   2: 537195.373 ops/s
# Warmup Iteration   3: 587602.644 ops/s
# Warmup Iteration   4: 580702.275 ops/s
# Warmup Iteration   5: 625942.095 ops/s
# Warmup Iteration   6: 585689.274 ops/s
# Warmup Iteration   7: 626842.609 ops/s
# Warmup Iteration   8: 664387.131 ops/s
# Warmup Iteration   9: 650311.578 ops/s
# Warmup Iteration  10: 626589.383 ops/s
# Warmup Iteration  11: 653361.516 ops/s
# Warmup Iteration  12: 614759.111 ops/s
# Warmup Iteration  13: 659605.423 ops/s
# Warmup Iteration  14: 631388.961 ops/s
# Warmup Iteration  15: 649192.226 ops/s
# Warmup Iteration  16: 643144.063 ops/s
# Warmup Iteration  17: 666401.576 ops/s
# Warmup Iteration  18: 691282.122 ops/s
# Warmup Iteration  19: 654846.991 ops/s
# Warmup Iteration  20: 693220.149 ops/s
# Warmup Iteration  21: 666583.394 ops/s
# Warmup Iteration  22: 676205.367 ops/s
# Warmup Iteration  23: 673778.170 ops/s
# Warmup Iteration  24: 669032.574 ops/s
# Warmup Iteration  25: 677992.557 ops/s
# Warmup Iteration  26: 651868.052 ops/s
# Warmup Iteration  27: 680445.913 ops/s
# Warmup Iteration  28: 669792.263 ops/s
# Warmup Iteration  29: 665264.976 ops/s
# Warmup Iteration  30: 688191.387 ops/s
Iteration   1: 648230.965 ops/s
Iteration   2: 704588.940 ops/s
Iteration   3: 663821.489 ops/s
Iteration   4: 653468.390 ops/s
Iteration   5: 700649.694 ops/s
Iteration   6: 650570.080 ops/s
Iteration   7: 687744.880 ops/s
Iteration   8: 653257.244 ops/s
Iteration   9: 686944.443 ops/s
Iteration  10: 677012.687 ops/s
Iteration  11: 631735.128 ops/s
Iteration  12: 681697.263 ops/s
Iteration  13: 663160.183 ops/s
Iteration  14: 657649.604 ops/s
Iteration  15: 545566.738 ops/s
Iteration  16: 652103.071 ops/s
Iteration  17: 687563.652 ops/s
Iteration  18: 661855.473 ops/s
Iteration  19: 651395.480 ops/s
Iteration  20: 683534.579 ops/s
Iteration  21: 644185.723 ops/s
Iteration  22: 705716.706 ops/s
Iteration  23: 645403.893 ops/s
Iteration  24: 685415.176 ops/s
Iteration  25: 686735.098 ops/s
Iteration  26: 675682.439 ops/s
Iteration  27: 686430.707 ops/s
Iteration  28: 658496.900 ops/s
Iteration  29: 672790.290 ops/s
Iteration  30: 688903.135 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_mapperThrows":
  666410.335 ±(99.9%) 20088.040 ops/s [Average]
  (min, avg, max) = (545566.738, 666410.335, 705716.706), stdev = 30066.834
  CI (99.9%): [646322.295, 686498.375] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SingleConcatMapCompletableTest._Benchmark.benchmark_mapperThrows  thrpt   30  666410.335 ± 20088.040  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1432367.439 ops/s
# Warmup Iteration   2: 4371361.851 ops/s
# Warmup Iteration   3: 6743634.101 ops/s
# Warmup Iteration   4: 6607615.037 ops/s
# Warmup Iteration   5: 6728306.943 ops/s
# Warmup Iteration   6: 6614045.552 ops/s
# Warmup Iteration   7: 6586475.451 ops/s
# Warmup Iteration   8: 6954789.408 ops/s
# Warmup Iteration   9: 6642493.489 ops/s
# Warmup Iteration  10: 6815146.485 ops/s
# Warmup Iteration  11: 6867126.290 ops/s
# Warmup Iteration  12: 6740696.418 ops/s
# Warmup Iteration  13: 6880101.601 ops/s
# Warmup Iteration  14: 6559004.569 ops/s
# Warmup Iteration  15: 6745793.887 ops/s
# Warmup Iteration  16: 6738520.535 ops/s
# Warmup Iteration  17: 6546859.362 ops/s
# Warmup Iteration  18: 6727609.398 ops/s
# Warmup Iteration  19: 6694835.614 ops/s
# Warmup Iteration  20: 6870841.336 ops/s
# Warmup Iteration  21: 6658595.150 ops/s
# Warmup Iteration  22: 7027690.515 ops/s
# Warmup Iteration  23: 6878507.160 ops/s
# Warmup Iteration  24: 6543145.919 ops/s
# Warmup Iteration  25: 6883249.922 ops/s
# Warmup Iteration  26: 6485071.407 ops/s
# Warmup Iteration  27: 6618776.558 ops/s
# Warmup Iteration  28: 6510023.189 ops/s
# Warmup Iteration  29: 6679870.387 ops/s
# Warmup Iteration  30: 6880712.402 ops/s
Iteration   1: 6512202.310 ops/s
Iteration   2: 6843629.032 ops/s
Iteration   3: 6680155.609 ops/s
Iteration   4: 6682615.988 ops/s
Iteration   5: 6873818.581 ops/s
Iteration   6: 6831916.620 ops/s
Iteration   7: 6900076.034 ops/s
Iteration   8: 6629698.789 ops/s
Iteration   9: 6756211.110 ops/s
Iteration  10: 6907447.446 ops/s
Iteration  11: 6635604.378 ops/s
Iteration  12: 6949085.267 ops/s
Iteration  13: 6510758.731 ops/s
Iteration  14: 6776601.456 ops/s
Iteration  15: 6823391.534 ops/s
Iteration  16: 6441645.426 ops/s
Iteration  17: 6968882.977 ops/s
Iteration  18: 6758910.745 ops/s
Iteration  19: 6772130.480 ops/s
Iteration  20: 6874160.005 ops/s
Iteration  21: 6739817.206 ops/s
Iteration  22: 6753008.244 ops/s
Iteration  23: 6595349.058 ops/s
Iteration  24: 6960374.585 ops/s
Iteration  25: 6421930.479 ops/s
Iteration  26: 6478651.449 ops/s
Iteration  27: 6811699.369 ops/s
Iteration  28: 6692391.886 ops/s
Iteration  29: 6920642.362 ops/s
Iteration  30: 6630016.127 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_normal":
  6737760.776 ±(99.9%) 105952.177 ops/s [Average]
  (min, avg, max) = (6421930.479, 6737760.776, 6968882.977), stdev = 158584.242
  CI (99.9%): [6631808.599, 6843712.953] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score        Error  Units
SingleFlatMapTest._Benchmark.benchmark_normal  thrpt   30  6737760.776 ± 105952.177  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInAsyncOut$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInAsyncOut

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 288199.741 ops/s
# Warmup Iteration   2: 1568686.241 ops/s
# Warmup Iteration   3: 2014912.787 ops/s
# Warmup Iteration   4: 2171984.264 ops/s
# Warmup Iteration   5: 2390892.295 ops/s
# Warmup Iteration   6: 2281318.240 ops/s
# Warmup Iteration   7: 2142469.689 ops/s
# Warmup Iteration   8: 2310361.993 ops/s
# Warmup Iteration   9: 2185813.811 ops/s
# Warmup Iteration  10: 2281781.539 ops/s
# Warmup Iteration  11: 2251621.084 ops/s
# Warmup Iteration  12: 2187113.622 ops/s
# Warmup Iteration  13: 2343138.876 ops/s
# Warmup Iteration  14: 2170209.430 ops/s
# Warmup Iteration  15: 2204254.859 ops/s
# Warmup Iteration  16: 2189815.264 ops/s
# Warmup Iteration  17: 2213183.033 ops/s
# Warmup Iteration  18: 2295231.227 ops/s
# Warmup Iteration  19: 2243743.906 ops/s
# Warmup Iteration  20: 2291189.650 ops/s
# Warmup Iteration  21: 2200937.741 ops/s
# Warmup Iteration  22: 2244830.699 ops/s
# Warmup Iteration  23: 2176556.275 ops/s
# Warmup Iteration  24: 2145783.725 ops/s
# Warmup Iteration  25: 2211455.263 ops/s
# Warmup Iteration  26: 2284296.793 ops/s
# Warmup Iteration  27: 2161510.285 ops/s
# Warmup Iteration  28: 2366256.747 ops/s
# Warmup Iteration  29: 2199849.718 ops/s
# Warmup Iteration  30: 2289752.947 ops/s
Iteration   1: 2212154.943 ops/s
Iteration   2: 2265721.956 ops/s
Iteration   3: 2317092.977 ops/s
Iteration   4: 2204795.876 ops/s
Iteration   5: 2190285.579 ops/s
Iteration   6: 2273872.115 ops/s
Iteration   7: 2183177.704 ops/s
Iteration   8: 2307923.771 ops/s
Iteration   9: 2174020.050 ops/s
Iteration  10: 1885349.208 ops/s
Iteration  11: 2277390.511 ops/s
Iteration  12: 2187437.125 ops/s
Iteration  13: 2284341.936 ops/s
Iteration  14: 2159984.581 ops/s
Iteration  15: 2139129.593 ops/s
Iteration  16: 2321831.989 ops/s
Iteration  17: 2235566.416 ops/s
Iteration  18: 2253504.055 ops/s
Iteration  19: 2225013.263 ops/s
Iteration  20: 2309717.234 ops/s
Iteration  21: 2285902.208 ops/s
Iteration  22: 2245253.979 ops/s
Iteration  23: 2184682.654 ops/s
Iteration  24: 2156812.334 ops/s
Iteration  25: 2248551.798 ops/s
Iteration  26: 2221679.850 ops/s
Iteration  27: 2254532.771 ops/s
Iteration  28: 2243554.909 ops/s
Iteration  29: 2169203.408 ops/s
Iteration  30: 2241478.348 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInAsyncOut":
  2221998.771 ±(99.9%) 54495.648 ops/s [Average]
  (min, avg, max) = (1885349.208, 2221998.771, 2321831.989), stdev = 81566.527
  CI (99.9%): [2167503.123, 2276494.420] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInAsyncOut  thrpt   30  2221998.771 ± 54495.648  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21099.531 ops/s
# Warmup Iteration   2: 124312.531 ops/s
# Warmup Iteration   3: 133744.860 ops/s
# Warmup Iteration   4: 142529.560 ops/s
# Warmup Iteration   5: 136778.175 ops/s
# Warmup Iteration   6: 147973.428 ops/s
# Warmup Iteration   7: 145506.414 ops/s
# Warmup Iteration   8: 145782.981 ops/s
# Warmup Iteration   9: 144268.257 ops/s
# Warmup Iteration  10: 147074.979 ops/s
# Warmup Iteration  11: 149785.083 ops/s
# Warmup Iteration  12: 144045.941 ops/s
# Warmup Iteration  13: 145477.713 ops/s
# Warmup Iteration  14: 132350.088 ops/s
# Warmup Iteration  15: 149617.358 ops/s
# Warmup Iteration  16: 151604.123 ops/s
# Warmup Iteration  17: 148312.230 ops/s
# Warmup Iteration  18: 149897.946 ops/s
# Warmup Iteration  19: 152414.602 ops/s
# Warmup Iteration  20: 151023.304 ops/s
# Warmup Iteration  21: 154443.460 ops/s
# Warmup Iteration  22: 147406.434 ops/s
# Warmup Iteration  23: 153886.426 ops/s
# Warmup Iteration  24: 155828.127 ops/s
# Warmup Iteration  25: 156076.043 ops/s
# Warmup Iteration  26: 147542.778 ops/s
# Warmup Iteration  27: 155072.511 ops/s
# Warmup Iteration  28: 147017.313 ops/s
# Warmup Iteration  29: 152183.490 ops/s
# Warmup Iteration  30: 149775.281 ops/s
Iteration   1: 154385.724 ops/s
Iteration   2: 151245.939 ops/s
Iteration   3: 155623.547 ops/s
Iteration   4: 148855.817 ops/s
Iteration   5: 152249.281 ops/s
Iteration   6: 148743.676 ops/s
Iteration   7: 148368.357 ops/s
Iteration   8: 159460.264 ops/s
Iteration   9: 145927.733 ops/s
Iteration  10: 153748.437 ops/s
Iteration  11: 150008.650 ops/s
Iteration  12: 150500.449 ops/s
Iteration  13: 145137.393 ops/s
Iteration  14: 150849.152 ops/s
Iteration  15: 150561.000 ops/s
Iteration  16: 147233.911 ops/s
Iteration  17: 154956.439 ops/s
Iteration  18: 148531.946 ops/s
Iteration  19: 155674.097 ops/s
Iteration  20: 148574.720 ops/s
Iteration  21: 148900.602 ops/s
Iteration  22: 153328.677 ops/s
Iteration  23: 149380.802 ops/s
Iteration  24: 145564.605 ops/s
Iteration  25: 154925.432 ops/s
Iteration  26: 147494.035 ops/s
Iteration  27: 158785.020 ops/s
Iteration  28: 145958.178 ops/s
Iteration  29: 148856.052 ops/s
Iteration  30: 151008.295 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile2":
  150827.941 ±(99.9%) 2526.918 ops/s [Average]
  (min, avg, max) = (145137.393, 150827.941, 159460.264), stdev = 3782.172
  CI (99.9%): [148301.023, 153354.859] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile2  thrpt   30  150827.941 ± 2526.918  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_errorHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_errorHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 179446.073 ops/s
# Warmup Iteration   2: 581711.610 ops/s
# Warmup Iteration   3: 686417.989 ops/s
# Warmup Iteration   4: 673045.248 ops/s
# Warmup Iteration   5: 708454.021 ops/s
# Warmup Iteration   6: 697448.184 ops/s
# Warmup Iteration   7: 677770.059 ops/s
# Warmup Iteration   8: 697802.208 ops/s
# Warmup Iteration   9: 664936.494 ops/s
# Warmup Iteration  10: 721115.862 ops/s
# Warmup Iteration  11: 685725.556 ops/s
# Warmup Iteration  12: 657504.751 ops/s
# Warmup Iteration  13: 689895.428 ops/s
# Warmup Iteration  14: 695336.730 ops/s
# Warmup Iteration  15: 672139.642 ops/s
# Warmup Iteration  16: 685468.016 ops/s
# Warmup Iteration  17: 744000.252 ops/s
# Warmup Iteration  18: 732031.312 ops/s
# Warmup Iteration  19: 712929.934 ops/s
# Warmup Iteration  20: 715894.692 ops/s
# Warmup Iteration  21: 703239.427 ops/s
# Warmup Iteration  22: 733365.371 ops/s
# Warmup Iteration  23: 718488.951 ops/s
# Warmup Iteration  24: 722279.711 ops/s
# Warmup Iteration  25: 732979.193 ops/s
# Warmup Iteration  26: 716166.608 ops/s
# Warmup Iteration  27: 724762.701 ops/s
# Warmup Iteration  28: 735142.408 ops/s
# Warmup Iteration  29: 717056.791 ops/s
# Warmup Iteration  30: 724168.940 ops/s
Iteration   1: 738788.304 ops/s
Iteration   2: 733193.412 ops/s
Iteration   3: 708256.856 ops/s
Iteration   4: 628156.116 ops/s
Iteration   5: 719026.889 ops/s
Iteration   6: 703187.228 ops/s
Iteration   7: 769552.837 ops/s
Iteration   8: 725071.071 ops/s
Iteration   9: 723313.087 ops/s
Iteration  10: 729366.792 ops/s
Iteration  11: 711905.280 ops/s
Iteration  12: 729180.406 ops/s
Iteration  13: 751995.716 ops/s
Iteration  14: 726092.811 ops/s
Iteration  15: 718647.969 ops/s
Iteration  16: 728329.188 ops/s
Iteration  17: 728208.646 ops/s
Iteration  18: 758457.087 ops/s
Iteration  19: 710598.926 ops/s
Iteration  20: 747847.569 ops/s
Iteration  21: 731364.747 ops/s
Iteration  22: 737801.760 ops/s
Iteration  23: 728013.339 ops/s
Iteration  24: 722136.577 ops/s
Iteration  25: 750083.081 ops/s
Iteration  26: 691306.611 ops/s
Iteration  27: 747369.559 ops/s
Iteration  28: 713906.541 ops/s
Iteration  29: 709331.174 ops/s
Iteration  30: 735181.563 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_errorHidden":
  725189.038 ±(99.9%) 16747.334 ops/s [Average]
  (min, avg, max) = (628156.116, 725189.038, 769552.837), stdev = 25066.623
  CI (99.9%): [708441.704, 741936.372] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_errorHidden  thrpt   30  725189.038 ± 16747.334  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableHideTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableHideTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 128062.970 ops/s
# Warmup Iteration   2: 448464.039 ops/s
# Warmup Iteration   3: 496293.379 ops/s
# Warmup Iteration   4: 471577.700 ops/s
# Warmup Iteration   5: 500320.778 ops/s
# Warmup Iteration   6: 522993.617 ops/s
# Warmup Iteration   7: 464445.337 ops/s
# Warmup Iteration   8: 543578.188 ops/s
# Warmup Iteration   9: 507619.479 ops/s
# Warmup Iteration  10: 507733.735 ops/s
# Warmup Iteration  11: 546630.720 ops/s
# Warmup Iteration  12: 526142.511 ops/s
# Warmup Iteration  13: 538099.046 ops/s
# Warmup Iteration  14: 540575.987 ops/s
# Warmup Iteration  15: 526875.929 ops/s
# Warmup Iteration  16: 553631.907 ops/s
# Warmup Iteration  17: 557299.718 ops/s
# Warmup Iteration  18: 526426.091 ops/s
# Warmup Iteration  19: 564146.537 ops/s
# Warmup Iteration  20: 531693.462 ops/s
# Warmup Iteration  21: 558616.727 ops/s
# Warmup Iteration  22: 551736.342 ops/s
# Warmup Iteration  23: 532173.071 ops/s
# Warmup Iteration  24: 545910.333 ops/s
# Warmup Iteration  25: 526146.530 ops/s
# Warmup Iteration  26: 547964.685 ops/s
# Warmup Iteration  27: 560348.237 ops/s
# Warmup Iteration  28: 527305.971 ops/s
# Warmup Iteration  29: 566477.757 ops/s
# Warmup Iteration  30: 545967.814 ops/s
Iteration   1: 535724.758 ops/s
Iteration   2: 533001.082 ops/s
Iteration   3: 547796.600 ops/s
Iteration   4: 545687.936 ops/s
Iteration   5: 538747.509 ops/s
Iteration   6: 523886.686 ops/s
Iteration   7: 557947.620 ops/s
Iteration   8: 517048.484 ops/s
Iteration   9: 553953.561 ops/s
Iteration  10: 529125.054 ops/s
Iteration  11: 559838.433 ops/s
Iteration  12: 537357.844 ops/s
Iteration  13: 542684.370 ops/s
Iteration  14: 558966.642 ops/s
Iteration  15: 528355.219 ops/s
Iteration  16: 551997.597 ops/s
Iteration  17: 540027.416 ops/s
Iteration  18: 561636.071 ops/s
Iteration  19: 538392.517 ops/s
Iteration  20: 557114.195 ops/s
Iteration  21: 537830.143 ops/s
Iteration  22: 531086.197 ops/s
Iteration  23: 568732.748 ops/s
Iteration  24: 537191.833 ops/s
Iteration  25: 542941.780 ops/s
Iteration  26: 559624.873 ops/s
Iteration  27: 539017.189 ops/s
Iteration  28: 561634.711 ops/s
Iteration  29: 534190.890 ops/s
Iteration  30: 538637.524 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableHideTest._Benchmark.benchmark_doubleOnSubscribe":
  543672.583 ±(99.9%) 8600.426 ops/s [Average]
  (min, avg, max) = (517048.484, 543672.583, 568732.748), stdev = 12872.713
  CI (99.9%): [535072.157, 552273.008] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObservableHideTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  543672.583 ± 8600.426  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_streamCloseCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_streamCloseCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24360.355 ops/s
# Warmup Iteration   2: 151603.635 ops/s
# Warmup Iteration   3: 194629.492 ops/s
# Warmup Iteration   4: 210986.601 ops/s
# Warmup Iteration   5: 196959.815 ops/s
# Warmup Iteration   6: 209340.060 ops/s
# Warmup Iteration   7: 218666.136 ops/s
# Warmup Iteration   8: 220176.625 ops/s
# Warmup Iteration   9: 220269.716 ops/s
# Warmup Iteration  10: 223804.347 ops/s
# Warmup Iteration  11: 211796.176 ops/s
# Warmup Iteration  12: 222686.702 ops/s
# Warmup Iteration  13: 215175.329 ops/s
# Warmup Iteration  14: 220165.230 ops/s
# Warmup Iteration  15: 223436.546 ops/s
# Warmup Iteration  16: 214292.152 ops/s
# Warmup Iteration  17: 223264.948 ops/s
# Warmup Iteration  18: 237737.877 ops/s
# Warmup Iteration  19: 219793.821 ops/s
# Warmup Iteration  20: 231610.881 ops/s
# Warmup Iteration  21: 219807.052 ops/s
# Warmup Iteration  22: 235513.223 ops/s
# Warmup Iteration  23: 223920.047 ops/s
# Warmup Iteration  24: 219725.583 ops/s
# Warmup Iteration  25: 230410.374 ops/s
# Warmup Iteration  26: 229171.964 ops/s
# Warmup Iteration  27: 222882.365 ops/s
# Warmup Iteration  28: 232154.244 ops/s
# Warmup Iteration  29: 212132.622 ops/s
# Warmup Iteration  30: 199614.463 ops/s
Iteration   1: 223218.114 ops/s
Iteration   2: 228774.409 ops/s
Iteration   3: 223183.725 ops/s
Iteration   4: 223597.946 ops/s
Iteration   5: 236069.407 ops/s
Iteration   6: 220095.493 ops/s
Iteration   7: 228642.109 ops/s
Iteration   8: 222926.470 ops/s
Iteration   9: 231013.646 ops/s
Iteration  10: 224151.981 ops/s
Iteration  11: 224765.006 ops/s
Iteration  12: 228381.196 ops/s
Iteration  13: 223794.102 ops/s
Iteration  14: 220385.796 ops/s
Iteration  15: 223708.999 ops/s
Iteration  16: 220126.928 ops/s
Iteration  17: 228779.074 ops/s
Iteration  18: 224857.730 ops/s
Iteration  19: 226423.930 ops/s
Iteration  20: 216679.720 ops/s
Iteration  21: 231656.969 ops/s
Iteration  22: 223347.812 ops/s
Iteration  23: 223754.746 ops/s
Iteration  24: 232439.007 ops/s
Iteration  25: 217184.714 ops/s
Iteration  26: 236617.292 ops/s
Iteration  27: 218224.266 ops/s
Iteration  28: 223991.524 ops/s
Iteration  29: 235792.591 ops/s
Iteration  30: 217653.728 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_streamCloseCrash":
  225341.281 ±(99.9%) 3686.180 ops/s [Average]
  (min, avg, max) = (216679.720, 225341.281, 236617.292), stdev = 5517.301
  CI (99.9%): [221655.101, 229027.461] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_streamCloseCrash  thrpt   30  225341.281 ± 3686.180  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 63723.367 ops/s
# Warmup Iteration   2: 277392.753 ops/s
# Warmup Iteration   3: 414342.876 ops/s
# Warmup Iteration   4: 439026.309 ops/s
# Warmup Iteration   5: 411555.448 ops/s
# Warmup Iteration   6: 401089.200 ops/s
# Warmup Iteration   7: 419725.401 ops/s
# Warmup Iteration   8: 434337.316 ops/s
# Warmup Iteration   9: 430317.876 ops/s
# Warmup Iteration  10: 447344.966 ops/s
# Warmup Iteration  11: 425396.726 ops/s
# Warmup Iteration  12: 444610.595 ops/s
# Warmup Iteration  13: 428528.529 ops/s
# Warmup Iteration  14: 435011.281 ops/s
# Warmup Iteration  15: 425467.491 ops/s
# Warmup Iteration  16: 425768.342 ops/s
# Warmup Iteration  17: 450377.168 ops/s
# Warmup Iteration  18: 437008.026 ops/s
# Warmup Iteration  19: 455188.157 ops/s
# Warmup Iteration  20: 435872.839 ops/s
# Warmup Iteration  21: 441161.378 ops/s
# Warmup Iteration  22: 466837.765 ops/s
# Warmup Iteration  23: 438144.510 ops/s
# Warmup Iteration  24: 433670.721 ops/s
# Warmup Iteration  25: 455193.442 ops/s
# Warmup Iteration  26: 447806.363 ops/s
# Warmup Iteration  27: 452676.507 ops/s
# Warmup Iteration  28: 469834.116 ops/s
# Warmup Iteration  29: 433604.935 ops/s
# Warmup Iteration  30: 437182.020 ops/s
Iteration   1: 414613.194 ops/s
Iteration   2: 453632.884 ops/s
Iteration   3: 467375.131 ops/s
Iteration   4: 444171.780 ops/s
Iteration   5: 461645.068 ops/s
Iteration   6: 453818.108 ops/s
Iteration   7: 435387.158 ops/s
Iteration   8: 469344.814 ops/s
Iteration   9: 443879.472 ops/s
Iteration  10: 445839.717 ops/s
Iteration  11: 439778.800 ops/s
Iteration  12: 456764.141 ops/s
Iteration  13: 444808.542 ops/s
Iteration  14: 447666.649 ops/s
Iteration  15: 462314.237 ops/s
Iteration  16: 438300.579 ops/s
Iteration  17: 450460.386 ops/s
Iteration  18: 451094.531 ops/s
Iteration  19: 459562.100 ops/s
Iteration  20: 455531.786 ops/s
Iteration  21: 447316.858 ops/s
Iteration  22: 447703.208 ops/s
Iteration  23: 462868.809 ops/s
Iteration  24: 444884.913 ops/s
Iteration  25: 453613.753 ops/s
Iteration  26: 447108.843 ops/s
Iteration  27: 467425.588 ops/s
Iteration  28: 441816.650 ops/s
Iteration  29: 448489.664 ops/s
Iteration  30: 454871.430 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerErrorMaxConcurrency":
  450402.960 ±(99.9%) 7450.132 ops/s [Average]
  (min, avg, max) = (414613.194, 450402.960, 469344.814), stdev = 11151.007
  CI (99.9%): [442952.828, 457853.092] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_innerErrorMaxConcurrency  thrpt   30  450402.960 ± 7450.132  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchRequestAlternativeObservableWithBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchRequestAlternativeObservableWithBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 245400.932 ops/s
# Warmup Iteration   2: 1361514.735 ops/s
# Warmup Iteration   3: 1931190.912 ops/s
# Warmup Iteration   4: 2276776.860 ops/s
# Warmup Iteration   5: 1866250.704 ops/s
# Warmup Iteration   6: 2081692.517 ops/s
# Warmup Iteration   7: 2163636.648 ops/s
# Warmup Iteration   8: 2213708.713 ops/s
# Warmup Iteration   9: 2223351.539 ops/s
# Warmup Iteration  10: 2283097.693 ops/s
# Warmup Iteration  11: 2164678.174 ops/s
# Warmup Iteration  12: 2165216.282 ops/s
# Warmup Iteration  13: 2276259.050 ops/s
# Warmup Iteration  14: 2102429.087 ops/s
# Warmup Iteration  15: 2269039.349 ops/s
# Warmup Iteration  16: 2135810.588 ops/s
# Warmup Iteration  17: 2261624.446 ops/s
# Warmup Iteration  18: 2147978.080 ops/s
# Warmup Iteration  19: 2173062.351 ops/s
# Warmup Iteration  20: 2274259.218 ops/s
# Warmup Iteration  21: 2130672.577 ops/s
# Warmup Iteration  22: 2240246.591 ops/s
# Warmup Iteration  23: 2133676.746 ops/s
# Warmup Iteration  24: 1847422.647 ops/s
# Warmup Iteration  25: 2227285.681 ops/s
# Warmup Iteration  26: 2228866.851 ops/s
# Warmup Iteration  27: 2083759.531 ops/s
# Warmup Iteration  28: 2230843.993 ops/s
# Warmup Iteration  29: 2190808.134 ops/s
# Warmup Iteration  30: 2210675.078 ops/s
Iteration   1: 2188606.568 ops/s
Iteration   2: 2151425.567 ops/s
Iteration   3: 2264426.559 ops/s
Iteration   4: 2135207.035 ops/s
Iteration   5: 2205527.144 ops/s
Iteration   6: 2161232.230 ops/s
Iteration   7: 2166663.708 ops/s
Iteration   8: 2210468.775 ops/s
Iteration   9: 2118520.399 ops/s
Iteration  10: 2225456.676 ops/s
Iteration  11: 2296191.223 ops/s
Iteration  12: 2138349.623 ops/s
Iteration  13: 2260242.106 ops/s
Iteration  14: 2170422.024 ops/s
Iteration  15: 2191152.211 ops/s
Iteration  16: 2168661.375 ops/s
Iteration  17: 2243391.438 ops/s
Iteration  18: 2142516.793 ops/s
Iteration  19: 2167014.990 ops/s
Iteration  20: 2156229.165 ops/s
Iteration  21: 2176667.691 ops/s
Iteration  22: 2185248.736 ops/s
Iteration  23: 2107957.597 ops/s
Iteration  24: 2308785.241 ops/s
Iteration  25: 2124143.161 ops/s
Iteration  26: 2249615.940 ops/s
Iteration  27: 2115304.558 ops/s
Iteration  28: 2226028.380 ops/s
Iteration  29: 2264946.145 ops/s
Iteration  30: 2138666.817 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchRequestAlternativeObservableWithBackpressure":
  2188635.662 ±(99.9%) 36997.434 ops/s [Average]
  (min, avg, max) = (2107957.597, 2188635.662, 2308785.241), stdev = 55376.022
  CI (99.9%): [2151638.228, 2225633.097] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt        Score       Error  Units
FlowableSwitchIfEmptyTest._Benchmark.benchmark_switchRequestAlternativeObservableWithBackpressure  thrpt   30  2188635.662 ± 36997.434  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressureNoError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressureNoError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 240019.111 ops/s
# Warmup Iteration   2: 2005088.586 ops/s
# Warmup Iteration   3: 2102654.859 ops/s
# Warmup Iteration   4: 2828139.829 ops/s
# Warmup Iteration   5: 2829888.006 ops/s
# Warmup Iteration   6: 2908175.797 ops/s
# Warmup Iteration   7: 2827712.896 ops/s
# Warmup Iteration   8: 2836067.217 ops/s
# Warmup Iteration   9: 2927234.257 ops/s
# Warmup Iteration  10: 2742332.195 ops/s
# Warmup Iteration  11: 2845138.004 ops/s
# Warmup Iteration  12: 2927345.093 ops/s
# Warmup Iteration  13: 2728876.966 ops/s
# Warmup Iteration  14: 2996256.157 ops/s
# Warmup Iteration  15: 2754453.367 ops/s
# Warmup Iteration  16: 2836272.536 ops/s
# Warmup Iteration  17: 2901589.632 ops/s
# Warmup Iteration  18: 2722508.392 ops/s
# Warmup Iteration  19: 2838821.410 ops/s
# Warmup Iteration  20: 2691121.142 ops/s
# Warmup Iteration  21: 2854880.650 ops/s
# Warmup Iteration  22: 2767711.601 ops/s
# Warmup Iteration  23: 2826647.348 ops/s
# Warmup Iteration  24: 2781397.141 ops/s
# Warmup Iteration  25: 2741831.535 ops/s
# Warmup Iteration  26: 2819922.448 ops/s
# Warmup Iteration  27: 2914468.398 ops/s
# Warmup Iteration  28: 2722515.955 ops/s
# Warmup Iteration  29: 2898725.200 ops/s
# Warmup Iteration  30: 2804829.185 ops/s
Iteration   1: 2833433.276 ops/s
Iteration   2: 2806236.156 ops/s
Iteration   3: 2976506.471 ops/s
Iteration   4: 2747484.540 ops/s
Iteration   5: 2862868.002 ops/s
Iteration   6: 2809128.519 ops/s
Iteration   7: 2881792.910 ops/s
Iteration   8: 2842278.774 ops/s
Iteration   9: 2837563.520 ops/s
Iteration  10: 2886451.600 ops/s
Iteration  11: 2818879.322 ops/s
Iteration  12: 2871072.204 ops/s
Iteration  13: 2814036.785 ops/s
Iteration  14: 2829746.871 ops/s
Iteration  15: 2873633.429 ops/s
Iteration  16: 2792513.616 ops/s
Iteration  17: 2869884.675 ops/s
Iteration  18: 2851868.010 ops/s
Iteration  19: 2825785.744 ops/s
Iteration  20: 2964180.549 ops/s
Iteration  21: 2749336.718 ops/s
Iteration  22: 2810692.443 ops/s
Iteration  23: 2897645.020 ops/s
Iteration  24: 2792181.041 ops/s
Iteration  25: 2941984.824 ops/s
Iteration  26: 2771752.487 ops/s
Iteration  27: 2931696.036 ops/s
Iteration  28: 2757254.909 ops/s
Iteration  29: 2776747.684 ops/s
Iteration  30: 2900053.987 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressureNoError":
  2844156.337 ±(99.9%) 40789.523 ops/s [Average]
  (min, avg, max) = (2747484.540, 2844156.337, 2976506.471), stdev = 61051.843
  CI (99.9%): [2803366.814, 2884945.860] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableMaterializeTest._Benchmark.benchmark_backpressureNoError  thrpt   30  2844156.337 ± 40789.523  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapNotificationOnNextReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapNotificationOnNextReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105255.592 ops/s
# Warmup Iteration   2: 352875.847 ops/s
# Warmup Iteration   3: 408748.801 ops/s
# Warmup Iteration   4: 390549.143 ops/s
# Warmup Iteration   5: 377040.627 ops/s
# Warmup Iteration   6: 419829.046 ops/s
# Warmup Iteration   7: 436911.996 ops/s
# Warmup Iteration   8: 424293.166 ops/s
# Warmup Iteration   9: 442644.669 ops/s
# Warmup Iteration  10: 415575.588 ops/s
# Warmup Iteration  11: 423943.139 ops/s
# Warmup Iteration  12: 434176.234 ops/s
# Warmup Iteration  13: 430017.377 ops/s
# Warmup Iteration  14: 438136.962 ops/s
# Warmup Iteration  15: 426133.128 ops/s
# Warmup Iteration  16: 429991.774 ops/s
# Warmup Iteration  17: 450578.183 ops/s
# Warmup Iteration  18: 435317.757 ops/s
# Warmup Iteration  19: 366114.342 ops/s
# Warmup Iteration  20: 454280.006 ops/s
# Warmup Iteration  21: 420928.622 ops/s
# Warmup Iteration  22: 450806.176 ops/s
# Warmup Iteration  23: 451143.472 ops/s
# Warmup Iteration  24: 426158.759 ops/s
# Warmup Iteration  25: 462087.313 ops/s
# Warmup Iteration  26: 422249.852 ops/s
# Warmup Iteration  27: 448736.610 ops/s
# Warmup Iteration  28: 451662.072 ops/s
# Warmup Iteration  29: 438821.104 ops/s
# Warmup Iteration  30: 454811.531 ops/s
Iteration   1: 436823.723 ops/s
Iteration   2: 446548.582 ops/s
Iteration   3: 433780.119 ops/s
Iteration   4: 446241.289 ops/s
Iteration   5: 451719.000 ops/s
Iteration   6: 429421.035 ops/s
Iteration   7: 461091.698 ops/s
Iteration   8: 429981.852 ops/s
Iteration   9: 454946.496 ops/s
Iteration  10: 464342.193 ops/s
Iteration  11: 430025.993 ops/s
Iteration  12: 463261.520 ops/s
Iteration  13: 437713.041 ops/s
Iteration  14: 426327.811 ops/s
Iteration  15: 461062.442 ops/s
Iteration  16: 466549.805 ops/s
Iteration  17: 439275.838 ops/s
Iteration  18: 446743.381 ops/s
Iteration  19: 429340.590 ops/s
Iteration  20: 457739.176 ops/s
Iteration  21: 429852.095 ops/s
Iteration  22: 449306.526 ops/s
Iteration  23: 456747.490 ops/s
Iteration  24: 439513.736 ops/s
Iteration  25: 444130.387 ops/s
Iteration  26: 436612.994 ops/s
Iteration  27: 458528.918 ops/s
Iteration  28: 432430.798 ops/s
Iteration  29: 427682.575 ops/s
Iteration  30: 442262.257 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapNotificationOnNextReturnsNull":
  444333.445 ±(99.9%) 8495.999 ops/s [Average]
  (min, avg, max) = (426327.811, 444333.445, 466549.805), stdev = 12716.413
  CI (99.9%): [435837.446, 452829.445] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_flatMapNotificationOnNextReturnsNull  thrpt   30  444333.445 ± 8495.999  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_castCrashUnsubscribes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_castCrashUnsubscribes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130381.371 ops/s
# Warmup Iteration   2: 452571.952 ops/s
# Warmup Iteration   3: 486357.528 ops/s
# Warmup Iteration   4: 501986.855 ops/s
# Warmup Iteration   5: 455820.136 ops/s
# Warmup Iteration   6: 524820.202 ops/s
# Warmup Iteration   7: 539046.972 ops/s
# Warmup Iteration   8: 544519.543 ops/s
# Warmup Iteration   9: 520212.059 ops/s
# Warmup Iteration  10: 545006.420 ops/s
# Warmup Iteration  11: 519672.837 ops/s
# Warmup Iteration  12: 552696.090 ops/s
# Warmup Iteration  13: 523637.016 ops/s
# Warmup Iteration  14: 535108.908 ops/s
# Warmup Iteration  15: 550593.520 ops/s
# Warmup Iteration  16: 531203.128 ops/s
# Warmup Iteration  17: 532350.464 ops/s
# Warmup Iteration  18: 560306.541 ops/s
# Warmup Iteration  19: 574513.827 ops/s
# Warmup Iteration  20: 542463.885 ops/s
# Warmup Iteration  21: 577686.156 ops/s
# Warmup Iteration  22: 564017.335 ops/s
# Warmup Iteration  23: 545828.054 ops/s
# Warmup Iteration  24: 563138.538 ops/s
# Warmup Iteration  25: 561177.388 ops/s
# Warmup Iteration  26: 554400.451 ops/s
# Warmup Iteration  27: 568175.366 ops/s
# Warmup Iteration  28: 554966.582 ops/s
# Warmup Iteration  29: 574527.477 ops/s
# Warmup Iteration  30: 548331.911 ops/s
Iteration   1: 563620.024 ops/s
Iteration   2: 577158.277 ops/s
Iteration   3: 548686.094 ops/s
Iteration   4: 564159.183 ops/s
Iteration   5: 536808.430 ops/s
Iteration   6: 567047.892 ops/s
Iteration   7: 561685.057 ops/s
Iteration   8: 562386.498 ops/s
Iteration   9: 560984.523 ops/s
Iteration  10: 550408.881 ops/s
Iteration  11: 574771.623 ops/s
Iteration  12: 556106.425 ops/s
Iteration  13: 569677.253 ops/s
Iteration  14: 550752.256 ops/s
Iteration  15: 564552.346 ops/s
Iteration  16: 566515.274 ops/s
Iteration  17: 549664.944 ops/s
Iteration  18: 592927.420 ops/s
Iteration  19: 545332.143 ops/s
Iteration  20: 574742.253 ops/s
Iteration  21: 554813.776 ops/s
Iteration  22: 572593.275 ops/s
Iteration  23: 557905.441 ops/s
Iteration  24: 585940.414 ops/s
Iteration  25: 549375.228 ops/s
Iteration  26: 568215.038 ops/s
Iteration  27: 552986.044 ops/s
Iteration  28: 570478.163 ops/s
Iteration  29: 583177.827 ops/s
Iteration  30: 542190.821 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_castCrashUnsubscribes":
  562522.094 ±(99.9%) 8865.890 ops/s [Average]
  (min, avg, max) = (536808.430, 562522.094, 592927.420), stdev = 13270.048
  CI (99.9%): [553656.204, 571387.984] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_castCrashUnsubscribes  thrpt   30  562522.094 ± 8865.890  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_delayBothItemSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_delayBothItemSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43701.802 ops/s
# Warmup Iteration   2: 269197.643 ops/s
# Warmup Iteration   3: 353250.714 ops/s
# Warmup Iteration   4: 379278.221 ops/s
# Warmup Iteration   5: 371059.796 ops/s
# Warmup Iteration   6: 350798.033 ops/s
# Warmup Iteration   7: 370050.629 ops/s
# Warmup Iteration   8: 364910.226 ops/s
# Warmup Iteration   9: 346840.233 ops/s
# Warmup Iteration  10: 342382.891 ops/s
# Warmup Iteration  11: 368914.682 ops/s
# Warmup Iteration  12: 358913.126 ops/s
# Warmup Iteration  13: 335599.355 ops/s
# Warmup Iteration  14: 330889.015 ops/s
# Warmup Iteration  15: 372607.684 ops/s
# Warmup Iteration  16: 365543.083 ops/s
# Warmup Iteration  17: 386994.369 ops/s
# Warmup Iteration  18: 354659.079 ops/s
# Warmup Iteration  19: 390397.577 ops/s
# Warmup Iteration  20: 370465.472 ops/s
# Warmup Iteration  21: 389237.502 ops/s
# Warmup Iteration  22: 395787.880 ops/s
# Warmup Iteration  23: 363205.784 ops/s
# Warmup Iteration  24: 380366.665 ops/s
# Warmup Iteration  25: 382271.204 ops/s
# Warmup Iteration  26: 371853.196 ops/s
# Warmup Iteration  27: 380848.951 ops/s
# Warmup Iteration  28: 373444.001 ops/s
# Warmup Iteration  29: 370888.186 ops/s
# Warmup Iteration  30: 402073.881 ops/s
Iteration   1: 369087.699 ops/s
Iteration   2: 372829.682 ops/s
Iteration   3: 365160.750 ops/s
Iteration   4: 369601.127 ops/s
Iteration   5: 388593.720 ops/s
Iteration   6: 374161.711 ops/s
Iteration   7: 390093.565 ops/s
Iteration   8: 391485.826 ops/s
Iteration   9: 369691.327 ops/s
Iteration  10: 382551.300 ops/s
Iteration  11: 380114.013 ops/s
Iteration  12: 381757.542 ops/s
Iteration  13: 372061.772 ops/s
Iteration  14: 370816.083 ops/s
Iteration  15: 384684.506 ops/s
Iteration  16: 385530.272 ops/s
Iteration  17: 384165.945 ops/s
Iteration  18: 374567.342 ops/s
Iteration  19: 361720.114 ops/s
Iteration  20: 390772.943 ops/s
Iteration  21: 368973.220 ops/s
Iteration  22: 395575.278 ops/s
Iteration  23: 381636.892 ops/s
Iteration  24: 377826.885 ops/s
Iteration  25: 384208.521 ops/s
Iteration  26: 396950.333 ops/s
Iteration  27: 372472.918 ops/s
Iteration  28: 380458.153 ops/s
Iteration  29: 373562.528 ops/s
Iteration  30: 396028.718 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_delayBothItemSupplierReturnsNull":
  379571.356 ±(99.9%) 6422.401 ops/s [Average]
  (min, avg, max) = (361720.114, 379571.356, 396950.333), stdev = 9612.749
  CI (99.9%): [373148.955, 385993.758] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_delayBothItemSupplierReturnsNull  thrpt   30  379571.356 ± 6422.401  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeRequestOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeRequestOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 598495.220 ops/s
# Warmup Iteration   2: 2268567.425 ops/s
# Warmup Iteration   3: 2798234.479 ops/s
# Warmup Iteration   4: 3214369.143 ops/s
# Warmup Iteration   5: 3353992.188 ops/s
# Warmup Iteration   6: 3332348.964 ops/s
# Warmup Iteration   7: 3110431.085 ops/s
# Warmup Iteration   8: 3310959.221 ops/s
# Warmup Iteration   9: 3338608.065 ops/s
# Warmup Iteration  10: 3173511.601 ops/s
# Warmup Iteration  11: 3232615.660 ops/s
# Warmup Iteration  12: 3209191.730 ops/s
# Warmup Iteration  13: 3282274.220 ops/s
# Warmup Iteration  14: 3081394.134 ops/s
# Warmup Iteration  15: 3238537.698 ops/s
# Warmup Iteration  16: 3352168.669 ops/s
# Warmup Iteration  17: 3192643.019 ops/s
# Warmup Iteration  18: 3354953.047 ops/s
# Warmup Iteration  19: 3175301.893 ops/s
# Warmup Iteration  20: 3417533.965 ops/s
# Warmup Iteration  21: 3209601.652 ops/s
# Warmup Iteration  22: 3255096.796 ops/s
# Warmup Iteration  23: 3235327.414 ops/s
# Warmup Iteration  24: 3187529.169 ops/s
# Warmup Iteration  25: 3286860.250 ops/s
# Warmup Iteration  26: 3253269.625 ops/s
# Warmup Iteration  27: 3294210.314 ops/s
# Warmup Iteration  28: 3178795.422 ops/s
# Warmup Iteration  29: 3286434.952 ops/s
# Warmup Iteration  30: 3217474.325 ops/s
Iteration   1: 3177327.785 ops/s
Iteration   2: 3283216.666 ops/s
Iteration   3: 3279207.987 ops/s
Iteration   4: 3342422.211 ops/s
Iteration   5: 3293996.772 ops/s
Iteration   6: 3174508.136 ops/s
Iteration   7: 3327517.206 ops/s
Iteration   8: 3234252.233 ops/s
Iteration   9: 3271290.618 ops/s
Iteration  10: 3131684.321 ops/s
Iteration  11: 3177927.059 ops/s
Iteration  12: 3343119.191 ops/s
Iteration  13: 3080074.873 ops/s
Iteration  14: 3253189.931 ops/s
Iteration  15: 3284788.689 ops/s
Iteration  16: 3215157.415 ops/s
Iteration  17: 3308050.702 ops/s
Iteration  18: 3107326.844 ops/s
Iteration  19: 3180193.182 ops/s
Iteration  20: 3346100.221 ops/s
Iteration  21: 3130666.637 ops/s
Iteration  22: 3224605.501 ops/s
Iteration  23: 3149530.155 ops/s
Iteration  24: 3229270.884 ops/s
Iteration  25: 3219887.906 ops/s
Iteration  26: 3196886.767 ops/s
Iteration  27: 3328822.421 ops/s
Iteration  28: 3233558.135 ops/s
Iteration  29: 3433619.149 ops/s
Iteration  30: 3236132.202 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeRequestOverflow":
  3239811.060 ±(99.9%) 54581.141 ops/s [Average]
  (min, avg, max) = (3080074.873, 3239811.060, 3433619.149), stdev = 81694.488
  CI (99.9%): [3185229.919, 3294392.201] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableTakeTest._Benchmark.benchmark_takeRequestOverflow  thrpt   30  3239811.060 ± 54581.141  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2632284.242 ops/s
# Warmup Iteration   2: 6465043.887 ops/s
# Warmup Iteration   3: 9104695.046 ops/s
# Warmup Iteration   4: 9016372.178 ops/s
# Warmup Iteration   5: 9030087.618 ops/s
# Warmup Iteration   6: 9230059.476 ops/s
# Warmup Iteration   7: 8707148.568 ops/s
# Warmup Iteration   8: 7373493.007 ops/s
# Warmup Iteration   9: 9319942.494 ops/s
# Warmup Iteration  10: 8801900.535 ops/s
# Warmup Iteration  11: 8771457.891 ops/s
# Warmup Iteration  12: 8875655.770 ops/s
# Warmup Iteration  13: 8565089.224 ops/s
# Warmup Iteration  14: 9210848.543 ops/s
# Warmup Iteration  15: 8759566.043 ops/s
# Warmup Iteration  16: 9088104.901 ops/s
# Warmup Iteration  17: 8772360.614 ops/s
# Warmup Iteration  18: 9022286.048 ops/s
# Warmup Iteration  19: 9137084.643 ops/s
# Warmup Iteration  20: 8656876.555 ops/s
# Warmup Iteration  21: 9131949.819 ops/s
# Warmup Iteration  22: 8369948.469 ops/s
# Warmup Iteration  23: 8671057.821 ops/s
# Warmup Iteration  24: 8716294.701 ops/s
# Warmup Iteration  25: 8926841.185 ops/s
# Warmup Iteration  26: 9370373.995 ops/s
# Warmup Iteration  27: 8677683.499 ops/s
# Warmup Iteration  28: 8925144.414 ops/s
# Warmup Iteration  29: 9247887.270 ops/s
# Warmup Iteration  30: 9111659.570 ops/s
Iteration   1: 8617188.897 ops/s
Iteration   2: 8799754.152 ops/s
Iteration   3: 9163844.560 ops/s
Iteration   4: 9016713.189 ops/s
Iteration   5: 9353408.121 ops/s
Iteration   6: 8802580.016 ops/s
Iteration   7: 9157218.919 ops/s
Iteration   8: 8906727.105 ops/s
Iteration   9: 8864421.114 ops/s
Iteration  10: 8868034.182 ops/s
Iteration  11: 9351480.502 ops/s
Iteration  12: 8669839.663 ops/s
Iteration  13: 9092631.763 ops/s
Iteration  14: 8871930.478 ops/s
Iteration  15: 9012786.930 ops/s
Iteration  16: 9190200.127 ops/s
Iteration  17: 8848922.523 ops/s
Iteration  18: 8988568.524 ops/s
Iteration  19: 8910015.251 ops/s
Iteration  20: 8879082.011 ops/s
Iteration  21: 8752591.033 ops/s
Iteration  22: 8726881.797 ops/s
Iteration  23: 9583398.009 ops/s
Iteration  24: 8806048.089 ops/s
Iteration  25: 9013205.222 ops/s
Iteration  26: 8788283.945 ops/s
Iteration  27: 8882643.617 ops/s
Iteration  28: 9152743.722 ops/s
Iteration  29: 8772806.001 ops/s
Iteration  30: 9277545.381 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_empty":
  8970716.495 ±(99.9%) 151196.677 ops/s [Average]
  (min, avg, max) = (8617188.897, 8970716.495, 9583398.009), stdev = 226304.085
  CI (99.9%): [8819519.818, 9121913.171] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_empty  thrpt   30  8970716.495 ± 151196.677  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_emptyHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_emptyHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 620833.081 ops/s
# Warmup Iteration   2: 1635462.042 ops/s
# Warmup Iteration   3: 2137951.744 ops/s
# Warmup Iteration   4: 2119300.365 ops/s
# Warmup Iteration   5: 2175182.514 ops/s
# Warmup Iteration   6: 2166418.120 ops/s
# Warmup Iteration   7: 2124854.750 ops/s
# Warmup Iteration   8: 2167830.824 ops/s
# Warmup Iteration   9: 2262197.069 ops/s
# Warmup Iteration  10: 2117021.879 ops/s
# Warmup Iteration  11: 2144298.400 ops/s
# Warmup Iteration  12: 2209244.241 ops/s
# Warmup Iteration  13: 2107723.539 ops/s
# Warmup Iteration  14: 2222186.067 ops/s
# Warmup Iteration  15: 2102883.369 ops/s
# Warmup Iteration  16: 2131288.582 ops/s
# Warmup Iteration  17: 2157674.195 ops/s
# Warmup Iteration  18: 2221710.094 ops/s
# Warmup Iteration  19: 2094805.082 ops/s
# Warmup Iteration  20: 2132939.190 ops/s
# Warmup Iteration  21: 2096885.814 ops/s
# Warmup Iteration  22: 2151913.759 ops/s
# Warmup Iteration  23: 2154834.072 ops/s
# Warmup Iteration  24: 2125541.287 ops/s
# Warmup Iteration  25: 2236413.165 ops/s
# Warmup Iteration  26: 2169289.065 ops/s
# Warmup Iteration  27: 2322368.154 ops/s
# Warmup Iteration  28: 2130224.773 ops/s
# Warmup Iteration  29: 2201369.624 ops/s
# Warmup Iteration  30: 2126852.380 ops/s
Iteration   1: 2230719.053 ops/s
Iteration   2: 2201982.856 ops/s
Iteration   3: 2125241.058 ops/s
Iteration   4: 2194832.885 ops/s
Iteration   5: 2177613.223 ops/s
Iteration   6: 2101697.391 ops/s
Iteration   7: 2257503.389 ops/s
Iteration   8: 2271635.297 ops/s
Iteration   9: 2099306.458 ops/s
Iteration  10: 2249103.133 ops/s
Iteration  11: 2144312.790 ops/s
Iteration  12: 2218195.240 ops/s
Iteration  13: 2166924.850 ops/s
Iteration  14: 2134603.796 ops/s
Iteration  15: 2164548.174 ops/s
Iteration  16: 2262021.974 ops/s
Iteration  17: 2164942.089 ops/s
Iteration  18: 2251394.762 ops/s
Iteration  19: 2125815.458 ops/s
Iteration  20: 2156705.266 ops/s
Iteration  21: 2192032.607 ops/s
Iteration  22: 2236635.886 ops/s
Iteration  23: 2128707.223 ops/s
Iteration  24: 2059479.160 ops/s
Iteration  25: 2225248.040 ops/s
Iteration  26: 2150633.357 ops/s
Iteration  27: 2184758.354 ops/s
Iteration  28: 2121053.798 ops/s
Iteration  29: 2156128.251 ops/s
Iteration  30: 2248603.784 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_emptyHidden":
  2180079.320 ±(99.9%) 37431.335 ops/s [Average]
  (min, avg, max) = (2059479.160, 2180079.320, 2271635.297), stdev = 56025.465
  CI (99.9%): [2142647.985, 2217510.655] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_emptyHidden  thrpt   30  2180079.320 ± 37431.335  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_backpressureIfNoneRequestedNoneShouldBeDeliveredFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_backpressureIfNoneRequestedNoneShouldBeDeliveredFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1829967.036 ops/s
# Warmup Iteration   2: 5027348.404 ops/s
# Warmup Iteration   3: 6068771.382 ops/s
# Warmup Iteration   4: 6978936.703 ops/s
# Warmup Iteration   5: 7065266.276 ops/s
# Warmup Iteration   6: 7269095.198 ops/s
# Warmup Iteration   7: 7130706.983 ops/s
# Warmup Iteration   8: 6994899.156 ops/s
# Warmup Iteration   9: 7253795.504 ops/s
# Warmup Iteration  10: 7273654.158 ops/s
# Warmup Iteration  11: 6681930.375 ops/s
# Warmup Iteration  12: 7303949.041 ops/s
# Warmup Iteration  13: 6928607.088 ops/s
# Warmup Iteration  14: 6986693.405 ops/s
# Warmup Iteration  15: 7427877.479 ops/s
# Warmup Iteration  16: 6984628.745 ops/s
# Warmup Iteration  17: 6919681.401 ops/s
# Warmup Iteration  18: 7093242.866 ops/s
# Warmup Iteration  19: 7129009.332 ops/s
# Warmup Iteration  20: 7236881.527 ops/s
# Warmup Iteration  21: 6913536.640 ops/s
# Warmup Iteration  22: 7263125.135 ops/s
# Warmup Iteration  23: 7253958.940 ops/s
# Warmup Iteration  24: 6995377.719 ops/s
# Warmup Iteration  25: 6933016.792 ops/s
# Warmup Iteration  26: 7350562.301 ops/s
# Warmup Iteration  27: 6958970.809 ops/s
# Warmup Iteration  28: 7386711.946 ops/s
# Warmup Iteration  29: 7068274.197 ops/s
# Warmup Iteration  30: 7130494.782 ops/s
Iteration   1: 7208031.441 ops/s
Iteration   2: 7110893.322 ops/s
Iteration   3: 6951754.249 ops/s
Iteration   4: 7347849.219 ops/s
Iteration   5: 7350393.378 ops/s
Iteration   6: 6806461.998 ops/s
Iteration   7: 7540740.499 ops/s
Iteration   8: 6924572.713 ops/s
Iteration   9: 7193358.242 ops/s
Iteration  10: 7235513.169 ops/s
Iteration  11: 7070143.292 ops/s
Iteration  12: 7340467.674 ops/s
Iteration  13: 6994155.403 ops/s
Iteration  14: 7321244.884 ops/s
Iteration  15: 7086622.415 ops/s
Iteration  16: 6869300.985 ops/s
Iteration  17: 7298948.234 ops/s
Iteration  18: 7062827.407 ops/s
Iteration  19: 7495108.097 ops/s
Iteration  20: 7330702.161 ops/s
Iteration  21: 6772394.033 ops/s
Iteration  22: 7467510.598 ops/s
Iteration  23: 6853660.668 ops/s
Iteration  24: 7214190.618 ops/s
Iteration  25: 6792065.358 ops/s
Iteration  26: 7374720.609 ops/s
Iteration  27: 7452938.868 ops/s
Iteration  28: 6789290.702 ops/s
Iteration  29: 7093778.131 ops/s
Iteration  30: 7365390.613 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_backpressureIfNoneRequestedNoneShouldBeDeliveredFlowable":
  7157167.633 ±(99.9%) 156866.486 ops/s [Average]
  (min, avg, max) = (6772394.033, 7157167.633, 7540740.499), stdev = 234790.389
  CI (99.9%): [7000301.147, 7314034.119] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt        Score        Error  Units
FlowableAllTest._Benchmark.benchmark_backpressureIfNoneRequestedNoneShouldBeDeliveredFlowable  thrpt   30  7157167.633 ± 156866.486  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 284334.641 ops/s
# Warmup Iteration   2: 587869.583 ops/s
# Warmup Iteration   3: 619573.898 ops/s
# Warmup Iteration   4: 590702.883 ops/s
# Warmup Iteration   5: 687712.482 ops/s
# Warmup Iteration   6: 569104.496 ops/s
# Warmup Iteration   7: 632839.928 ops/s
# Warmup Iteration   8: 691635.262 ops/s
# Warmup Iteration   9: 657373.761 ops/s
# Warmup Iteration  10: 652179.521 ops/s
# Warmup Iteration  11: 663405.678 ops/s
# Warmup Iteration  12: 659967.047 ops/s
# Warmup Iteration  13: 681478.220 ops/s
# Warmup Iteration  14: 683648.796 ops/s
# Warmup Iteration  15: 652917.821 ops/s
# Warmup Iteration  16: 669200.418 ops/s
# Warmup Iteration  17: 691489.631 ops/s
# Warmup Iteration  18: 698625.267 ops/s
# Warmup Iteration  19: 704543.804 ops/s
# Warmup Iteration  20: 692952.874 ops/s
# Warmup Iteration  21: 675828.510 ops/s
# Warmup Iteration  22: 717203.385 ops/s
# Warmup Iteration  23: 700118.715 ops/s
# Warmup Iteration  24: 677695.116 ops/s
# Warmup Iteration  25: 718728.650 ops/s
# Warmup Iteration  26: 689252.988 ops/s
# Warmup Iteration  27: 694596.630 ops/s
# Warmup Iteration  28: 705295.696 ops/s
# Warmup Iteration  29: 699189.971 ops/s
# Warmup Iteration  30: 698707.012 ops/s
Iteration   1: 693557.309 ops/s
Iteration   2: 708183.100 ops/s
Iteration   3: 713305.055 ops/s
Iteration   4: 684894.455 ops/s
Iteration   5: 702082.415 ops/s
Iteration   6: 692126.983 ops/s
Iteration   7: 714264.059 ops/s
Iteration   8: 684019.008 ops/s
Iteration   9: 688097.307 ops/s
Iteration  10: 714843.855 ops/s
Iteration  11: 680127.400 ops/s
Iteration  12: 701424.271 ops/s
Iteration  13: 683885.156 ops/s
Iteration  14: 712160.812 ops/s
Iteration  15: 709086.041 ops/s
Iteration  16: 686262.411 ops/s
Iteration  17: 695654.195 ops/s
Iteration  18: 698315.838 ops/s
Iteration  19: 711942.309 ops/s
Iteration  20: 677454.350 ops/s
Iteration  21: 713738.769 ops/s
Iteration  22: 679862.137 ops/s
Iteration  23: 707377.630 ops/s
Iteration  24: 689826.640 ops/s
Iteration  25: 709400.501 ops/s
Iteration  26: 684051.531 ops/s
Iteration  27: 705146.118 ops/s
Iteration  28: 706800.959 ops/s
Iteration  29: 680279.493 ops/s
Iteration  30: 569687.581 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapFunctionReturnsNull":
  693261.923 ±(99.9%) 17687.556 ops/s [Average]
  (min, avg, max) = (569687.581, 693261.923, 714843.855), stdev = 26473.903
  CI (99.9%): [675574.367, 710949.479] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_flatMapFunctionReturnsNull  thrpt   30  693261.923 ± 17687.556  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_delayWithFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_delayWithFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 281375.094 ops/s
# Warmup Iteration   2: 497970.049 ops/s
# Warmup Iteration   3: 522986.237 ops/s
# Warmup Iteration   4: 527208.913 ops/s
# Warmup Iteration   5: 571821.731 ops/s
# Warmup Iteration   6: 595573.624 ops/s
# Warmup Iteration   7: 457983.605 ops/s
# Warmup Iteration   8: 584545.543 ops/s
# Warmup Iteration   9: 547944.363 ops/s
# Warmup Iteration  10: 579467.371 ops/s
# Warmup Iteration  11: 550294.964 ops/s
# Warmup Iteration  12: 568733.764 ops/s
# Warmup Iteration  13: 585284.793 ops/s
# Warmup Iteration  14: 569200.253 ops/s
# Warmup Iteration  15: 587063.865 ops/s
# Warmup Iteration  16: 559060.310 ops/s
# Warmup Iteration  17: 595482.708 ops/s
# Warmup Iteration  18: 621355.691 ops/s
# Warmup Iteration  19: 581773.520 ops/s
# Warmup Iteration  20: 625965.047 ops/s
# Warmup Iteration  21: 611094.230 ops/s
# Warmup Iteration  22: 605556.980 ops/s
# Warmup Iteration  23: 584676.051 ops/s
# Warmup Iteration  24: 599610.324 ops/s
# Warmup Iteration  25: 591500.156 ops/s
# Warmup Iteration  26: 602682.727 ops/s
# Warmup Iteration  27: 584768.338 ops/s
# Warmup Iteration  28: 607217.949 ops/s
# Warmup Iteration  29: 603692.871 ops/s
# Warmup Iteration  30: 591169.727 ops/s
Iteration   1: 610197.727 ops/s
Iteration   2: 608722.999 ops/s
Iteration   3: 603946.930 ops/s
Iteration   4: 609111.851 ops/s
Iteration   5: 589451.230 ops/s
Iteration   6: 608732.518 ops/s
Iteration   7: 603001.627 ops/s
Iteration   8: 600199.038 ops/s
Iteration   9: 603967.974 ops/s
Iteration  10: 587584.943 ops/s
Iteration  11: 608378.517 ops/s
Iteration  12: 598622.535 ops/s
Iteration  13: 597924.317 ops/s
Iteration  14: 596143.017 ops/s
Iteration  15: 590311.630 ops/s
Iteration  16: 603270.524 ops/s
Iteration  17: 629978.508 ops/s
Iteration  18: 573749.556 ops/s
Iteration  19: 624393.923 ops/s
Iteration  20: 615370.851 ops/s
Iteration  21: 589864.802 ops/s
Iteration  22: 607810.205 ops/s
Iteration  23: 584720.611 ops/s
Iteration  24: 609247.034 ops/s
Iteration  25: 592615.514 ops/s
Iteration  26: 611495.809 ops/s
Iteration  27: 596742.488 ops/s
Iteration  28: 584457.110 ops/s
Iteration  29: 612705.175 ops/s
Iteration  30: 594658.875 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_delayWithFunctionReturnsNull":
  601579.261 ±(99.9%) 8132.496 ops/s [Average]
  (min, avg, max) = (573749.556, 601579.261, 629978.508), stdev = 12172.338
  CI (99.9%): [593446.765, 609711.757] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_delayWithFunctionReturnsNull  thrpt   30  601579.261 ± 8132.496  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1576438.039 ops/s
# Warmup Iteration   2: 4580926.605 ops/s
# Warmup Iteration   3: 6456492.950 ops/s
# Warmup Iteration   4: 6163577.673 ops/s
# Warmup Iteration   5: 6510534.693 ops/s
# Warmup Iteration   6: 6354132.964 ops/s
# Warmup Iteration   7: 6228850.662 ops/s
# Warmup Iteration   8: 6612661.745 ops/s
# Warmup Iteration   9: 6141767.730 ops/s
# Warmup Iteration  10: 6261489.202 ops/s
# Warmup Iteration  11: 6522892.462 ops/s
# Warmup Iteration  12: 6283190.184 ops/s
# Warmup Iteration  13: 6600254.591 ops/s
# Warmup Iteration  14: 6094000.793 ops/s
# Warmup Iteration  15: 6453081.970 ops/s
# Warmup Iteration  16: 6525302.215 ops/s
# Warmup Iteration  17: 6163411.529 ops/s
# Warmup Iteration  18: 6513712.887 ops/s
# Warmup Iteration  19: 6419272.049 ops/s
# Warmup Iteration  20: 6307313.682 ops/s
# Warmup Iteration  21: 6550328.430 ops/s
# Warmup Iteration  22: 6336711.241 ops/s
# Warmup Iteration  23: 6458508.766 ops/s
# Warmup Iteration  24: 6654444.541 ops/s
# Warmup Iteration  25: 6398008.894 ops/s
# Warmup Iteration  26: 6409890.236 ops/s
# Warmup Iteration  27: 6315101.578 ops/s
# Warmup Iteration  28: 6185291.923 ops/s
# Warmup Iteration  29: 6402946.614 ops/s
# Warmup Iteration  30: 6554691.829 ops/s
Iteration   1: 6424663.564 ops/s
Iteration   2: 6333783.411 ops/s
Iteration   3: 6620040.199 ops/s
Iteration   4: 6239361.587 ops/s
Iteration   5: 6394803.961 ops/s
Iteration   6: 6371820.450 ops/s
Iteration   7: 6472260.844 ops/s
Iteration   8: 6651222.667 ops/s
Iteration   9: 6282398.499 ops/s
Iteration  10: 6625558.607 ops/s
Iteration  11: 6614307.718 ops/s
Iteration  12: 6245604.855 ops/s
Iteration  13: 6568253.813 ops/s
Iteration  14: 6280270.827 ops/s
Iteration  15: 6374943.135 ops/s
Iteration  16: 6368989.765 ops/s
Iteration  17: 6483879.776 ops/s
Iteration  18: 6492168.685 ops/s
Iteration  19: 6378699.796 ops/s
Iteration  20: 6498570.434 ops/s
Iteration  21: 6238209.452 ops/s
Iteration  22: 6541559.449 ops/s
Iteration  23: 6295851.487 ops/s
Iteration  24: 5372133.413 ops/s
Iteration  25: 6611157.225 ops/s
Iteration  26: 6260834.038 ops/s
Iteration  27: 6441277.517 ops/s
Iteration  28: 6404957.904 ops/s
Iteration  29: 6445419.629 ops/s
Iteration  30: 6309798.684 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_dispose":
  6388093.380 ±(99.9%) 153860.115 ops/s [Average]
  (min, avg, max) = (5372133.413, 6388093.380, 6651222.667), stdev = 230290.594
  CI (99.9%): [6234233.265, 6541953.494] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
FlowableOnBackpressureLatestTest._Benchmark.benchmark_dispose  thrpt   30  6388093.380 ± 153860.115  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2379401.354 ops/s
# Warmup Iteration   2: 4748209.003 ops/s
# Warmup Iteration   3: 6512651.788 ops/s
# Warmup Iteration   4: 6386092.870 ops/s
# Warmup Iteration   5: 6600036.171 ops/s
# Warmup Iteration   6: 6559337.651 ops/s
# Warmup Iteration   7: 6136166.451 ops/s
# Warmup Iteration   8: 6264552.761 ops/s
# Warmup Iteration   9: 6622824.566 ops/s
# Warmup Iteration  10: 6347748.864 ops/s
# Warmup Iteration  11: 6539997.065 ops/s
# Warmup Iteration  12: 6237710.367 ops/s
# Warmup Iteration  13: 6697468.987 ops/s
# Warmup Iteration  14: 6470054.174 ops/s
# Warmup Iteration  15: 6339330.853 ops/s
# Warmup Iteration  16: 6447974.389 ops/s
# Warmup Iteration  17: 6304091.620 ops/s
# Warmup Iteration  18: 6633544.981 ops/s
# Warmup Iteration  19: 6351605.841 ops/s
# Warmup Iteration  20: 6355761.554 ops/s
# Warmup Iteration  21: 6373981.089 ops/s
# Warmup Iteration  22: 6271755.406 ops/s
# Warmup Iteration  23: 6479380.634 ops/s
# Warmup Iteration  24: 6188542.555 ops/s
# Warmup Iteration  25: 6490773.517 ops/s
# Warmup Iteration  26: 6713189.526 ops/s
# Warmup Iteration  27: 6179582.427 ops/s
# Warmup Iteration  28: 6641310.286 ops/s
# Warmup Iteration  29: 6187626.553 ops/s
# Warmup Iteration  30: 6328413.250 ops/s
Iteration   1: 6700418.075 ops/s
Iteration   2: 6339872.758 ops/s
Iteration   3: 6523815.418 ops/s
Iteration   4: 6355682.928 ops/s
Iteration   5: 6293717.740 ops/s
Iteration   6: 6529956.863 ops/s
Iteration   7: 6185280.148 ops/s
Iteration   8: 6589685.642 ops/s
Iteration   9: 6356637.265 ops/s
Iteration  10: 6631840.411 ops/s
Iteration  11: 6262271.578 ops/s
Iteration  12: 6578959.685 ops/s
Iteration  13: 6331847.217 ops/s
Iteration  14: 6303054.653 ops/s
Iteration  15: 6492036.616 ops/s
Iteration  16: 6278475.877 ops/s
Iteration  17: 6433949.979 ops/s
Iteration  18: 6446420.342 ops/s
Iteration  19: 6184350.295 ops/s
Iteration  20: 6716391.018 ops/s
Iteration  21: 6465367.794 ops/s
Iteration  22: 6424063.522 ops/s
Iteration  23: 6562197.008 ops/s
Iteration  24: 6341515.633 ops/s
Iteration  25: 6642109.683 ops/s
Iteration  26: 6220673.972 ops/s
Iteration  27: 6293026.141 ops/s
Iteration  28: 6655124.817 ops/s
Iteration  29: 6330795.404 ops/s
Iteration  30: 6666457.217 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipEmpty":
  6437866.523 ±(99.9%) 107437.664 ops/s [Average]
  (min, avg, max) = (6184350.295, 6437866.523, 6716391.018), stdev = 160807.649
  CI (99.9%): [6330428.860, 6545304.187] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_skipEmpty  thrpt   30  6437866.523 ± 107437.664  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 192185.330 ops/s
# Warmup Iteration   2: 326309.905 ops/s
# Warmup Iteration   3: 335686.548 ops/s
# Warmup Iteration   4: 309602.353 ops/s
# Warmup Iteration   5: 357016.004 ops/s
# Warmup Iteration   6: 357032.797 ops/s
# Warmup Iteration   7: 324611.700 ops/s
# Warmup Iteration   8: 358401.606 ops/s
# Warmup Iteration   9: 348365.763 ops/s
# Warmup Iteration  10: 362404.732 ops/s
# Warmup Iteration  11: 359716.158 ops/s
# Warmup Iteration  12: 348997.590 ops/s
# Warmup Iteration  13: 353491.906 ops/s
# Warmup Iteration  14: 353629.926 ops/s
# Warmup Iteration  15: 365740.097 ops/s
# Warmup Iteration  16: 347753.911 ops/s
# Warmup Iteration  17: 385344.517 ops/s
# Warmup Iteration  18: 381669.401 ops/s
# Warmup Iteration  19: 377625.014 ops/s
# Warmup Iteration  20: 390249.176 ops/s
# Warmup Iteration  21: 382944.107 ops/s
# Warmup Iteration  22: 376591.199 ops/s
# Warmup Iteration  23: 376943.583 ops/s
# Warmup Iteration  24: 389880.101 ops/s
# Warmup Iteration  25: 392147.683 ops/s
# Warmup Iteration  26: 371269.440 ops/s
# Warmup Iteration  27: 383433.610 ops/s
# Warmup Iteration  28: 384822.444 ops/s
# Warmup Iteration  29: 378831.095 ops/s
# Warmup Iteration  30: 381906.278 ops/s
Iteration   1: 378421.362 ops/s
Iteration   2: 379647.201 ops/s
Iteration   3: 384839.456 ops/s
Iteration   4: 370296.060 ops/s
Iteration   5: 389775.207 ops/s
Iteration   6: 381697.531 ops/s
Iteration   7: 374992.192 ops/s
Iteration   8: 395227.815 ops/s
Iteration   9: 369506.951 ops/s
Iteration  10: 396025.838 ops/s
Iteration  11: 381067.046 ops/s
Iteration  12: 375192.839 ops/s
Iteration  13: 382742.601 ops/s
Iteration  14: 376076.702 ops/s
Iteration  15: 387171.441 ops/s
Iteration  16: 377874.468 ops/s
Iteration  17: 371672.236 ops/s
Iteration  18: 391656.757 ops/s
Iteration  19: 303296.135 ops/s
Iteration  20: 391854.683 ops/s
Iteration  21: 370850.238 ops/s
Iteration  22: 372814.084 ops/s
Iteration  23: 396376.355 ops/s
Iteration  24: 364904.280 ops/s
Iteration  25: 392499.735 ops/s
Iteration  26: 379292.549 ops/s
Iteration  27: 383595.477 ops/s
Iteration  28: 373826.064 ops/s
Iteration  29: 378865.819 ops/s
Iteration  30: 389027.585 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastError":
  378702.890 ±(99.9%) 11128.893 ops/s [Average]
  (min, avg, max) = (303296.135, 378702.890, 396376.355), stdev = 16657.205
  CI (99.9%): [367573.997, 389831.784] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastError  thrpt   30  378702.890 ± 11128.893  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 155113.454 ops/s
# Warmup Iteration   2: 589615.483 ops/s
# Warmup Iteration   3: 685236.788 ops/s
# Warmup Iteration   4: 666681.417 ops/s
# Warmup Iteration   5: 677136.263 ops/s
# Warmup Iteration   6: 660976.127 ops/s
# Warmup Iteration   7: 664077.640 ops/s
# Warmup Iteration   8: 681152.401 ops/s
# Warmup Iteration   9: 650132.842 ops/s
# Warmup Iteration  10: 678271.925 ops/s
# Warmup Iteration  11: 665804.225 ops/s
# Warmup Iteration  12: 644790.779 ops/s
# Warmup Iteration  13: 661573.111 ops/s
# Warmup Iteration  14: 680175.090 ops/s
# Warmup Iteration  15: 669121.691 ops/s
# Warmup Iteration  16: 683316.697 ops/s
# Warmup Iteration  17: 674078.697 ops/s
# Warmup Iteration  18: 714633.204 ops/s
# Warmup Iteration  19: 703256.008 ops/s
# Warmup Iteration  20: 685820.606 ops/s
# Warmup Iteration  21: 708407.074 ops/s
# Warmup Iteration  22: 706064.256 ops/s
# Warmup Iteration  23: 713939.145 ops/s
# Warmup Iteration  24: 684418.520 ops/s
# Warmup Iteration  25: 678813.779 ops/s
# Warmup Iteration  26: 736590.872 ops/s
# Warmup Iteration  27: 693864.281 ops/s
# Warmup Iteration  28: 706233.137 ops/s
# Warmup Iteration  29: 737653.546 ops/s
# Warmup Iteration  30: 684862.568 ops/s
Iteration   1: 743496.054 ops/s
Iteration   2: 699580.859 ops/s
Iteration   3: 706394.853 ops/s
Iteration   4: 718181.312 ops/s
Iteration   5: 691032.209 ops/s
Iteration   6: 735805.159 ops/s
Iteration   7: 700685.612 ops/s
Iteration   8: 725239.789 ops/s
Iteration   9: 722459.064 ops/s
Iteration  10: 697770.099 ops/s
Iteration  11: 732556.051 ops/s
Iteration  12: 700444.339 ops/s
Iteration  13: 722906.779 ops/s
Iteration  14: 694941.265 ops/s
Iteration  15: 703021.357 ops/s
Iteration  16: 728836.480 ops/s
Iteration  17: 700132.233 ops/s
Iteration  18: 742996.751 ops/s
Iteration  19: 699431.555 ops/s
Iteration  20: 705181.059 ops/s
Iteration  21: 710184.420 ops/s
Iteration  22: 703336.863 ops/s
Iteration  23: 722614.008 ops/s
Iteration  24: 684957.915 ops/s
Iteration  25: 724576.798 ops/s
Iteration  26: 696461.643 ops/s
Iteration  27: 694773.431 ops/s
Iteration  28: 683675.502 ops/s
Iteration  29: 722902.833 ops/s
Iteration  30: 691975.964 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_error":
  710218.408 ±(99.9%) 11315.936 ops/s [Average]
  (min, avg, max) = (683675.502, 710218.408, 743496.054), stdev = 16937.162
  CI (99.9%): [698902.472, 721534.345] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_error  thrpt   30  710218.408 ± 11315.936  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_error2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_error2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 342218.496 ops/s
# Warmup Iteration   2: 573679.757 ops/s
# Warmup Iteration   3: 750914.716 ops/s
# Warmup Iteration   4: 628978.921 ops/s
# Warmup Iteration   5: 724972.877 ops/s
# Warmup Iteration   6: 612126.442 ops/s
# Warmup Iteration   7: 745898.503 ops/s
# Warmup Iteration   8: 691296.934 ops/s
# Warmup Iteration   9: 722511.573 ops/s
# Warmup Iteration  10: 705079.120 ops/s
# Warmup Iteration  11: 730647.468 ops/s
# Warmup Iteration  12: 723142.329 ops/s
# Warmup Iteration  13: 717324.713 ops/s
# Warmup Iteration  14: 750724.499 ops/s
# Warmup Iteration  15: 717494.406 ops/s
# Warmup Iteration  16: 702354.684 ops/s
# Warmup Iteration  17: 756196.229 ops/s
# Warmup Iteration  18: 757585.817 ops/s
# Warmup Iteration  19: 777256.188 ops/s
# Warmup Iteration  20: 753286.691 ops/s
# Warmup Iteration  21: 791312.821 ops/s
# Warmup Iteration  22: 736506.953 ops/s
# Warmup Iteration  23: 767997.762 ops/s
# Warmup Iteration  24: 776536.961 ops/s
# Warmup Iteration  25: 745864.159 ops/s
# Warmup Iteration  26: 771496.373 ops/s
# Warmup Iteration  27: 777810.785 ops/s
# Warmup Iteration  28: 772330.532 ops/s
# Warmup Iteration  29: 771558.557 ops/s
# Warmup Iteration  30: 778945.011 ops/s
Iteration   1: 747062.062 ops/s
Iteration   2: 750268.243 ops/s
Iteration   3: 768622.156 ops/s
Iteration   4: 738239.875 ops/s
Iteration   5: 773946.632 ops/s
Iteration   6: 761718.629 ops/s
Iteration   7: 764358.800 ops/s
Iteration   8: 768410.106 ops/s
Iteration   9: 754375.759 ops/s
Iteration  10: 762611.824 ops/s
Iteration  11: 761290.899 ops/s
Iteration  12: 770265.853 ops/s
Iteration  13: 767752.840 ops/s
Iteration  14: 623922.852 ops/s
Iteration  15: 756016.943 ops/s
Iteration  16: 778450.873 ops/s
Iteration  17: 762614.227 ops/s
Iteration  18: 795215.099 ops/s
Iteration  19: 745292.475 ops/s
Iteration  20: 780886.986 ops/s
Iteration  21: 744137.582 ops/s
Iteration  22: 758502.471 ops/s
Iteration  23: 750480.824 ops/s
Iteration  24: 775001.378 ops/s
Iteration  25: 787002.052 ops/s
Iteration  26: 729933.396 ops/s
Iteration  27: 787134.117 ops/s
Iteration  28: 738985.986 ops/s
Iteration  29: 762770.995 ops/s
Iteration  30: 780648.390 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_error2":
  758197.344 ±(99.9%) 19924.994 ops/s [Average]
  (min, avg, max) = (623922.852, 758197.344, 795215.099), stdev = 29822.796
  CI (99.9%): [738272.350, 778122.338] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
BlockingFlowableLatestTest._Benchmark.benchmark_error2  thrpt   30  758197.344 ± 19924.994  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_connectDisposeCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_connectDisposeCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 347938.315 ops/s
# Warmup Iteration   2: 539255.810 ops/s
# Warmup Iteration   3: 620385.097 ops/s
# Warmup Iteration   4: 539738.015 ops/s
# Warmup Iteration   5: 648719.902 ops/s
# Warmup Iteration   6: 545924.088 ops/s
# Warmup Iteration   7: 607587.842 ops/s
# Warmup Iteration   8: 641225.926 ops/s
# Warmup Iteration   9: 629561.638 ops/s
# Warmup Iteration  10: 631930.585 ops/s
# Warmup Iteration  11: 639639.903 ops/s
# Warmup Iteration  12: 628820.098 ops/s
# Warmup Iteration  13: 646315.132 ops/s
# Warmup Iteration  14: 619868.485 ops/s
# Warmup Iteration  15: 628131.787 ops/s
# Warmup Iteration  16: 640666.096 ops/s
# Warmup Iteration  17: 641156.906 ops/s
# Warmup Iteration  18: 657115.456 ops/s
# Warmup Iteration  19: 679786.460 ops/s
# Warmup Iteration  20: 651856.783 ops/s
# Warmup Iteration  21: 670210.140 ops/s
# Warmup Iteration  22: 651604.796 ops/s
# Warmup Iteration  23: 684746.464 ops/s
# Warmup Iteration  24: 658051.614 ops/s
# Warmup Iteration  25: 655557.574 ops/s
# Warmup Iteration  26: 657661.775 ops/s
# Warmup Iteration  27: 653012.267 ops/s
# Warmup Iteration  28: 679797.128 ops/s
# Warmup Iteration  29: 645866.805 ops/s
# Warmup Iteration  30: 670440.362 ops/s
Iteration   1: 634679.268 ops/s
Iteration   2: 646713.759 ops/s
Iteration   3: 652041.666 ops/s
Iteration   4: 643949.616 ops/s
Iteration   5: 660357.517 ops/s
Iteration   6: 637349.825 ops/s
Iteration   7: 672427.658 ops/s
Iteration   8: 705312.396 ops/s
Iteration   9: 627819.609 ops/s
Iteration  10: 671945.349 ops/s
Iteration  11: 643562.199 ops/s
Iteration  12: 688377.314 ops/s
Iteration  13: 634623.815 ops/s
Iteration  14: 630466.568 ops/s
Iteration  15: 655295.851 ops/s
Iteration  16: 650702.366 ops/s
Iteration  17: 668564.792 ops/s
Iteration  18: 672851.972 ops/s
Iteration  19: 642419.334 ops/s
Iteration  20: 676891.802 ops/s
Iteration  21: 639642.980 ops/s
Iteration  22: 667695.107 ops/s
Iteration  23: 673443.397 ops/s
Iteration  24: 644323.480 ops/s
Iteration  25: 665981.681 ops/s
Iteration  26: 634814.793 ops/s
Iteration  27: 663984.039 ops/s
Iteration  28: 638643.456 ops/s
Iteration  29: 668055.759 ops/s
Iteration  30: 639613.634 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_connectDisposeCrash":
  655085.033 ±(99.9%) 12633.255 ops/s [Average]
  (min, avg, max) = (627819.609, 655085.033, 705312.396), stdev = 18908.863
  CI (99.9%): [642451.778, 667718.289] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_connectDisposeCrash  thrpt   30  655085.033 ± 12633.255  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 62898.861 ops/s
# Warmup Iteration   2: 155421.571 ops/s
# Warmup Iteration   3: 298724.117 ops/s
# Warmup Iteration   4: 375263.276 ops/s
# Warmup Iteration   5: 408734.777 ops/s
# Warmup Iteration   6: 426178.971 ops/s
# Warmup Iteration   7: 428105.500 ops/s
# Warmup Iteration   8: 435599.355 ops/s
# Warmup Iteration   9: 439853.366 ops/s
# Warmup Iteration  10: 422681.705 ops/s
# Warmup Iteration  11: 426951.677 ops/s
# Warmup Iteration  12: 423391.970 ops/s
# Warmup Iteration  13: 427981.412 ops/s
# Warmup Iteration  14: 447197.263 ops/s
# Warmup Iteration  15: 426249.789 ops/s
# Warmup Iteration  16: 425425.156 ops/s
# Warmup Iteration  17: 445011.142 ops/s
# Warmup Iteration  18: 430579.146 ops/s
# Warmup Iteration  19: 456510.014 ops/s
# Warmup Iteration  20: 436180.460 ops/s
# Warmup Iteration  21: 456985.409 ops/s
# Warmup Iteration  22: 439661.450 ops/s
# Warmup Iteration  23: 438139.470 ops/s
# Warmup Iteration  24: 442139.681 ops/s
# Warmup Iteration  25: 447799.512 ops/s
# Warmup Iteration  26: 437350.630 ops/s
# Warmup Iteration  27: 446205.082 ops/s
# Warmup Iteration  28: 437722.509 ops/s
# Warmup Iteration  29: 448565.617 ops/s
# Warmup Iteration  30: 444627.803 ops/s
Iteration   1: 445482.269 ops/s
Iteration   2: 450879.143 ops/s
Iteration   3: 445765.193 ops/s
Iteration   4: 459185.738 ops/s
Iteration   5: 443260.287 ops/s
Iteration   6: 424401.881 ops/s
Iteration   7: 459965.212 ops/s
Iteration   8: 424815.677 ops/s
Iteration   9: 379621.456 ops/s
Iteration  10: 462995.150 ops/s
Iteration  11: 439508.693 ops/s
Iteration  12: 454331.107 ops/s
Iteration  13: 437092.506 ops/s
Iteration  14: 443314.852 ops/s
Iteration  15: 449403.004 ops/s
Iteration  16: 437668.593 ops/s
Iteration  17: 459828.521 ops/s
Iteration  18: 435765.005 ops/s
Iteration  19: 458720.109 ops/s
Iteration  20: 443697.231 ops/s
Iteration  21: 436974.104 ops/s
Iteration  22: 443385.242 ops/s
Iteration  23: 427078.491 ops/s
Iteration  24: 450111.360 ops/s
Iteration  25: 440140.683 ops/s
Iteration  26: 452597.100 ops/s
Iteration  27: 443767.514 ops/s
Iteration  28: 454113.042 ops/s
Iteration  29: 430591.981 ops/s
Iteration  30: 447874.713 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_badRequest":
  442744.529 ±(99.9%) 10591.275 ops/s [Average]
  (min, avg, max) = (379621.456, 442744.529, 462995.150), stdev = 15852.523
  CI (99.9%): [432153.253, 453335.804] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
FlowableScanTest._Benchmark.benchmark_badRequest  thrpt   30  442744.529 ± 10591.275  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 283612.453 ops/s
# Warmup Iteration   2: 579262.362 ops/s
# Warmup Iteration   3: 727378.954 ops/s
# Warmup Iteration   4: 681841.626 ops/s
# Warmup Iteration   5: 698732.264 ops/s
# Warmup Iteration   6: 693281.162 ops/s
# Warmup Iteration   7: 717691.679 ops/s
# Warmup Iteration   8: 683911.291 ops/s
# Warmup Iteration   9: 715892.870 ops/s
# Warmup Iteration  10: 682785.242 ops/s
# Warmup Iteration  11: 710276.264 ops/s
# Warmup Iteration  12: 712839.143 ops/s
# Warmup Iteration  13: 672804.673 ops/s
# Warmup Iteration  14: 719363.103 ops/s
# Warmup Iteration  15: 677652.063 ops/s
# Warmup Iteration  16: 717145.921 ops/s
# Warmup Iteration  17: 741614.398 ops/s
# Warmup Iteration  18: 727104.213 ops/s
# Warmup Iteration  19: 769927.987 ops/s
# Warmup Iteration  20: 743699.952 ops/s
# Warmup Iteration  21: 754274.022 ops/s
# Warmup Iteration  22: 710668.161 ops/s
# Warmup Iteration  23: 748520.618 ops/s
# Warmup Iteration  24: 747278.979 ops/s
# Warmup Iteration  25: 741867.150 ops/s
# Warmup Iteration  26: 712179.989 ops/s
# Warmup Iteration  27: 725741.988 ops/s
# Warmup Iteration  28: 765394.162 ops/s
# Warmup Iteration  29: 733700.458 ops/s
# Warmup Iteration  30: 756082.436 ops/s
Iteration   1: 727064.301 ops/s
Iteration   2: 757263.203 ops/s
Iteration   3: 730871.520 ops/s
Iteration   4: 756554.452 ops/s
Iteration   5: 753923.472 ops/s
Iteration   6: 717433.434 ops/s
Iteration   7: 763395.550 ops/s
Iteration   8: 714929.588 ops/s
Iteration   9: 749855.490 ops/s
Iteration  10: 726992.218 ops/s
Iteration  11: 716201.396 ops/s
Iteration  12: 747637.917 ops/s
Iteration  13: 739299.582 ops/s
Iteration  14: 742825.442 ops/s
Iteration  15: 733555.148 ops/s
Iteration  16: 727772.418 ops/s
Iteration  17: 753909.691 ops/s
Iteration  18: 733338.581 ops/s
Iteration  19: 748004.417 ops/s
Iteration  20: 757098.429 ops/s
Iteration  21: 722430.410 ops/s
Iteration  22: 774387.993 ops/s
Iteration  23: 730108.644 ops/s
Iteration  24: 754513.949 ops/s
Iteration  25: 731943.766 ops/s
Iteration  26: 730795.458 ops/s
Iteration  27: 766875.456 ops/s
Iteration  28: 719354.750 ops/s
Iteration  29: 725027.350 ops/s
Iteration  30: 727756.271 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_error":
  739370.676 ±(99.9%) 10989.872 ops/s [Average]
  (min, avg, max) = (714929.588, 739370.676, 774387.993), stdev = 16449.125
  CI (99.9%): [728380.804, 750360.549] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score       Error  Units
FlowableDetachTest._Benchmark.benchmark_error  thrpt   30  739370.676 ± 10989.872  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_iteratorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_iteratorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 144305.931 ops/s
# Warmup Iteration   2: 470394.479 ops/s
# Warmup Iteration   3: 516143.713 ops/s
# Warmup Iteration   4: 439971.899 ops/s
# Warmup Iteration   5: 574304.936 ops/s
# Warmup Iteration   6: 549905.116 ops/s
# Warmup Iteration   7: 534851.268 ops/s
# Warmup Iteration   8: 560295.397 ops/s
# Warmup Iteration   9: 536353.957 ops/s
# Warmup Iteration  10: 528980.018 ops/s
# Warmup Iteration  11: 550612.024 ops/s
# Warmup Iteration  12: 541047.284 ops/s
# Warmup Iteration  13: 544368.035 ops/s
# Warmup Iteration  14: 570589.623 ops/s
# Warmup Iteration  15: 519825.034 ops/s
# Warmup Iteration  16: 552882.750 ops/s
# Warmup Iteration  17: 566268.571 ops/s
# Warmup Iteration  18: 586932.686 ops/s
# Warmup Iteration  19: 580230.654 ops/s
# Warmup Iteration  20: 569911.067 ops/s
# Warmup Iteration  21: 583574.048 ops/s
# Warmup Iteration  22: 566544.463 ops/s
# Warmup Iteration  23: 585479.030 ops/s
# Warmup Iteration  24: 576387.182 ops/s
# Warmup Iteration  25: 566072.074 ops/s
# Warmup Iteration  26: 583727.522 ops/s
# Warmup Iteration  27: 562449.546 ops/s
# Warmup Iteration  28: 570088.940 ops/s
# Warmup Iteration  29: 579899.905 ops/s
# Warmup Iteration  30: 556680.492 ops/s
Iteration   1: 587092.575 ops/s
Iteration   2: 543193.390 ops/s
Iteration   3: 456736.953 ops/s
Iteration   4: 585506.178 ops/s
Iteration   5: 574629.502 ops/s
Iteration   6: 561437.892 ops/s
Iteration   7: 602814.779 ops/s
Iteration   8: 559129.214 ops/s
Iteration   9: 567883.363 ops/s
Iteration  10: 576683.099 ops/s
Iteration  11: 577824.819 ops/s
Iteration  12: 560609.292 ops/s
Iteration  13: 586990.726 ops/s
Iteration  14: 562375.092 ops/s
Iteration  15: 554331.777 ops/s
Iteration  16: 578006.697 ops/s
Iteration  17: 555384.531 ops/s
Iteration  18: 566380.412 ops/s
Iteration  19: 571438.754 ops/s
Iteration  20: 583620.109 ops/s
Iteration  21: 571341.139 ops/s
Iteration  22: 561609.859 ops/s
Iteration  23: 584104.939 ops/s
Iteration  24: 571805.172 ops/s
Iteration  25: 590326.607 ops/s
Iteration  26: 552890.869 ops/s
Iteration  27: 589617.252 ops/s
Iteration  28: 550403.668 ops/s
Iteration  29: 571521.945 ops/s
Iteration  30: 567071.985 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_iteratorThrows":
  567425.420 ±(99.9%) 16737.294 ops/s [Average]
  (min, avg, max) = (456736.953, 567425.420, 602814.779), stdev = 25051.595
  CI (99.9%): [550688.126, 584162.714] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
MaybeConcatIterableTest._Benchmark.benchmark_iteratorThrows  thrpt   30  567425.420 ± 16737.294  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_onErrorReturnFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_onErrorReturnFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43207.853 ops/s
# Warmup Iteration   2: 172009.317 ops/s
# Warmup Iteration   3: 187447.680 ops/s
# Warmup Iteration   4: 195875.781 ops/s
# Warmup Iteration   5: 189164.063 ops/s
# Warmup Iteration   6: 194438.170 ops/s
# Warmup Iteration   7: 211552.598 ops/s
# Warmup Iteration   8: 197391.449 ops/s
# Warmup Iteration   9: 201665.302 ops/s
# Warmup Iteration  10: 205250.066 ops/s
# Warmup Iteration  11: 200173.562 ops/s
# Warmup Iteration  12: 205590.320 ops/s
# Warmup Iteration  13: 201053.476 ops/s
# Warmup Iteration  14: 203311.650 ops/s
# Warmup Iteration  15: 196935.741 ops/s
# Warmup Iteration  16: 201572.365 ops/s
# Warmup Iteration  17: 217456.509 ops/s
# Warmup Iteration  18: 205753.910 ops/s
# Warmup Iteration  19: 213590.863 ops/s
# Warmup Iteration  20: 216310.949 ops/s
# Warmup Iteration  21: 209448.424 ops/s
# Warmup Iteration  22: 214859.872 ops/s
# Warmup Iteration  23: 210325.428 ops/s
# Warmup Iteration  24: 213533.483 ops/s
# Warmup Iteration  25: 210725.606 ops/s
# Warmup Iteration  26: 212113.870 ops/s
# Warmup Iteration  27: 209896.932 ops/s
# Warmup Iteration  28: 206931.195 ops/s
# Warmup Iteration  29: 213412.830 ops/s
# Warmup Iteration  30: 216757.257 ops/s
Iteration   1: 211137.442 ops/s
Iteration   2: 212566.701 ops/s
Iteration   3: 216137.068 ops/s
Iteration   4: 209402.506 ops/s
Iteration   5: 215838.972 ops/s
Iteration   6: 205654.861 ops/s
Iteration   7: 219145.709 ops/s
Iteration   8: 212256.456 ops/s
Iteration   9: 210798.728 ops/s
Iteration  10: 217224.538 ops/s
Iteration  11: 207188.310 ops/s
Iteration  12: 213986.787 ops/s
Iteration  13: 205103.658 ops/s
Iteration  14: 204898.913 ops/s
Iteration  15: 208745.112 ops/s
Iteration  16: 205339.244 ops/s
Iteration  17: 213063.521 ops/s
Iteration  18: 207409.946 ops/s
Iteration  19: 210131.558 ops/s
Iteration  20: 213379.934 ops/s
Iteration  21: 208265.696 ops/s
Iteration  22: 216819.311 ops/s
Iteration  23: 211032.718 ops/s
Iteration  24: 211322.966 ops/s
Iteration  25: 219323.564 ops/s
Iteration  26: 206070.491 ops/s
Iteration  27: 216097.045 ops/s
Iteration  28: 207474.434 ops/s
Iteration  29: 210358.438 ops/s
Iteration  30: 209689.273 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_onErrorReturnFunctionReturnsNull":
  211195.463 ±(99.9%) 2830.955 ops/s [Average]
  (min, avg, max) = (204898.913, 211195.463, 219323.564), stdev = 4237.241
  CI (99.9%): [208364.508, 214026.419] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_onErrorReturnFunctionReturnsNull  thrpt   30  211195.463 ± 2830.955  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107517.413 ops/s
# Warmup Iteration   2: 485886.764 ops/s
# Warmup Iteration   3: 630301.074 ops/s
# Warmup Iteration   4: 620707.607 ops/s
# Warmup Iteration   5: 639048.358 ops/s
# Warmup Iteration   6: 605622.175 ops/s
# Warmup Iteration   7: 614318.160 ops/s
# Warmup Iteration   8: 635665.786 ops/s
# Warmup Iteration   9: 606549.224 ops/s
# Warmup Iteration  10: 619010.197 ops/s
# Warmup Iteration  11: 644720.006 ops/s
# Warmup Iteration  12: 627798.187 ops/s
# Warmup Iteration  13: 614058.915 ops/s
# Warmup Iteration  14: 637519.030 ops/s
# Warmup Iteration  15: 628166.257 ops/s
# Warmup Iteration  16: 627411.864 ops/s
# Warmup Iteration  17: 661349.537 ops/s
# Warmup Iteration  18: 624435.148 ops/s
# Warmup Iteration  19: 661511.534 ops/s
# Warmup Iteration  20: 645979.976 ops/s
# Warmup Iteration  21: 651276.745 ops/s
# Warmup Iteration  22: 638508.983 ops/s
# Warmup Iteration  23: 664007.850 ops/s
# Warmup Iteration  24: 658545.246 ops/s
# Warmup Iteration  25: 679616.745 ops/s
# Warmup Iteration  26: 638322.581 ops/s
# Warmup Iteration  27: 686490.588 ops/s
# Warmup Iteration  28: 585323.035 ops/s
# Warmup Iteration  29: 577357.167 ops/s
# Warmup Iteration  30: 668500.123 ops/s
Iteration   1: 669050.657 ops/s
Iteration   2: 655811.630 ops/s
Iteration   3: 660511.167 ops/s
Iteration   4: 668340.962 ops/s
Iteration   5: 677669.086 ops/s
Iteration   6: 636465.387 ops/s
Iteration   7: 661689.646 ops/s
Iteration   8: 665095.094 ops/s
Iteration   9: 685675.243 ops/s
Iteration  10: 637845.587 ops/s
Iteration  11: 648215.813 ops/s
Iteration  12: 641369.136 ops/s
Iteration  13: 655911.231 ops/s
Iteration  14: 697414.099 ops/s
Iteration  15: 650691.644 ops/s
Iteration  16: 664133.235 ops/s
Iteration  17: 647059.162 ops/s
Iteration  18: 653896.674 ops/s
Iteration  19: 695945.780 ops/s
Iteration  20: 635549.025 ops/s
Iteration  21: 686261.490 ops/s
Iteration  22: 646968.086 ops/s
Iteration  23: 667397.200 ops/s
Iteration  24: 666582.871 ops/s
Iteration  25: 648282.885 ops/s
Iteration  26: 665559.390 ops/s
Iteration  27: 641441.707 ops/s
Iteration  28: 655203.532 ops/s
Iteration  29: 674857.034 ops/s
Iteration  30: 645383.488 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_error":
  660209.265 ±(99.9%) 11262.890 ops/s [Average]
  (min, avg, max) = (635549.025, 660209.265, 697414.099), stdev = 16857.764
  CI (99.9%): [648946.375, 671472.154] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score       Error  Units
FlowableCacheTest._Benchmark.benchmark_error  thrpt   30  660209.265 ± 11262.890  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerOnErrorDisposerCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerOnErrorDisposerCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41134.955 ops/s
# Warmup Iteration   2: 123771.603 ops/s
# Warmup Iteration   3: 177097.105 ops/s
# Warmup Iteration   4: 161666.977 ops/s
# Warmup Iteration   5: 188274.889 ops/s
# Warmup Iteration   6: 157807.212 ops/s
# Warmup Iteration   7: 182276.157 ops/s
# Warmup Iteration   8: 177486.876 ops/s
# Warmup Iteration   9: 175988.173 ops/s
# Warmup Iteration  10: 178999.309 ops/s
# Warmup Iteration  11: 184724.631 ops/s
# Warmup Iteration  12: 183644.718 ops/s
# Warmup Iteration  13: 181647.193 ops/s
# Warmup Iteration  14: 179656.443 ops/s
# Warmup Iteration  15: 185817.702 ops/s
# Warmup Iteration  16: 179004.953 ops/s
# Warmup Iteration  17: 188191.958 ops/s
# Warmup Iteration  18: 192475.822 ops/s
# Warmup Iteration  19: 184164.922 ops/s
# Warmup Iteration  20: 197833.205 ops/s
# Warmup Iteration  21: 186284.102 ops/s
# Warmup Iteration  22: 188867.062 ops/s
# Warmup Iteration  23: 189237.852 ops/s
# Warmup Iteration  24: 186231.165 ops/s
# Warmup Iteration  25: 195609.151 ops/s
# Warmup Iteration  26: 196360.015 ops/s
# Warmup Iteration  27: 181012.157 ops/s
# Warmup Iteration  28: 194701.443 ops/s
# Warmup Iteration  29: 184529.637 ops/s
# Warmup Iteration  30: 192958.068 ops/s
Iteration   1: 185504.648 ops/s
Iteration   2: 190627.663 ops/s
Iteration   3: 185345.366 ops/s
Iteration   4: 190676.704 ops/s
Iteration   5: 183920.891 ops/s
Iteration   6: 189974.935 ops/s
Iteration   7: 190914.730 ops/s
Iteration   8: 187696.502 ops/s
Iteration   9: 193215.402 ops/s
Iteration  10: 183392.214 ops/s
Iteration  11: 194517.852 ops/s
Iteration  12: 188653.417 ops/s
Iteration  13: 189677.958 ops/s
Iteration  14: 191630.574 ops/s
Iteration  15: 194563.932 ops/s
Iteration  16: 182297.200 ops/s
Iteration  17: 192967.528 ops/s
Iteration  18: 188517.208 ops/s
Iteration  19: 189866.691 ops/s
Iteration  20: 185772.085 ops/s
Iteration  21: 189162.085 ops/s
Iteration  22: 182492.952 ops/s
Iteration  23: 192018.704 ops/s
Iteration  24: 185376.161 ops/s
Iteration  25: 196075.490 ops/s
Iteration  26: 192299.853 ops/s
Iteration  27: 188378.618 ops/s
Iteration  28: 190610.505 ops/s
Iteration  29: 182327.896 ops/s
Iteration  30: 190829.805 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerOnErrorDisposerCrash":
  188976.852 ±(99.9%) 2571.880 ops/s [Average]
  (min, avg, max) = (182297.200, 188976.852, 196075.490), stdev = 3849.469
  CI (99.9%): [186404.973, 191548.732] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableUsingTest._Benchmark.benchmark_eagerOnErrorDisposerCrash  thrpt   30  188976.852 ± 2571.880  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71695.527 ops/s
# Warmup Iteration   2: 274500.654 ops/s
# Warmup Iteration   3: 388450.118 ops/s
# Warmup Iteration   4: 444171.302 ops/s
# Warmup Iteration   5: 424354.396 ops/s
# Warmup Iteration   6: 459732.781 ops/s
# Warmup Iteration   7: 476242.799 ops/s
# Warmup Iteration   8: 470228.836 ops/s
# Warmup Iteration   9: 451424.590 ops/s
# Warmup Iteration  10: 475443.418 ops/s
# Warmup Iteration  11: 469375.388 ops/s
# Warmup Iteration  12: 461038.345 ops/s
# Warmup Iteration  13: 480727.747 ops/s
# Warmup Iteration  14: 459480.010 ops/s
# Warmup Iteration  15: 472842.572 ops/s
# Warmup Iteration  16: 460873.275 ops/s
# Warmup Iteration  17: 480977.008 ops/s
# Warmup Iteration  18: 491793.162 ops/s
# Warmup Iteration  19: 469903.481 ops/s
# Warmup Iteration  20: 473975.724 ops/s
# Warmup Iteration  21: 498195.425 ops/s
# Warmup Iteration  22: 471848.650 ops/s
# Warmup Iteration  23: 409395.019 ops/s
# Warmup Iteration  24: 415658.903 ops/s
# Warmup Iteration  25: 467739.505 ops/s
# Warmup Iteration  26: 486981.230 ops/s
# Warmup Iteration  27: 467522.525 ops/s
# Warmup Iteration  28: 501792.163 ops/s
# Warmup Iteration  29: 487082.733 ops/s
# Warmup Iteration  30: 482625.821 ops/s
Iteration   1: 494979.975 ops/s
Iteration   2: 499838.122 ops/s
Iteration   3: 476157.657 ops/s
Iteration   4: 481144.972 ops/s
Iteration   5: 478200.301 ops/s
Iteration   6: 483873.882 ops/s
Iteration   7: 467485.299 ops/s
Iteration   8: 470431.557 ops/s
Iteration   9: 496149.795 ops/s
Iteration  10: 484144.298 ops/s
Iteration  11: 489823.916 ops/s
Iteration  12: 471816.052 ops/s
Iteration  13: 492539.078 ops/s
Iteration  14: 476515.229 ops/s
Iteration  15: 478245.417 ops/s
Iteration  16: 499224.616 ops/s
Iteration  17: 473287.546 ops/s
Iteration  18: 493869.845 ops/s
Iteration  19: 476775.413 ops/s
Iteration  20: 489593.016 ops/s
Iteration  21: 471443.056 ops/s
Iteration  22: 476681.255 ops/s
Iteration  23: 498375.428 ops/s
Iteration  24: 475732.060 ops/s
Iteration  25: 480470.291 ops/s
Iteration  26: 490895.391 ops/s
Iteration  27: 478322.496 ops/s
Iteration  28: 478751.243 ops/s
Iteration  29: 468748.683 ops/s
Iteration  30: 482960.362 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone":
  482549.208 ±(99.9%) 6479.525 ops/s [Average]
  (min, avg, max) = (467485.299, 482549.208, 499838.122), stdev = 9698.248
  CI (99.9%): [476069.684, 489028.733] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone  thrpt   30  482549.208 ± 6479.525  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeObserver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeObserver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 13684.148 ops/s
# Warmup Iteration   2: 19576.169 ops/s
# Warmup Iteration   3: 21021.241 ops/s
# Warmup Iteration   4: 19584.269 ops/s
# Warmup Iteration   5: 29163.864 ops/s
# Warmup Iteration   6: 19913.783 ops/s
# Warmup Iteration   7: 21380.608 ops/s
# Warmup Iteration   8: 22150.891 ops/s
# Warmup Iteration   9: 20799.341 ops/s
# Warmup Iteration  10: 20488.916 ops/s
# Warmup Iteration  11: 20645.553 ops/s
# Warmup Iteration  12: 21091.398 ops/s
# Warmup Iteration  13: 20764.928 ops/s
# Warmup Iteration  14: 21600.232 ops/s
# Warmup Iteration  15: 21088.578 ops/s
# Warmup Iteration  16: 21506.565 ops/s
# Warmup Iteration  17: 21150.640 ops/s
# Warmup Iteration  18: 21662.670 ops/s
# Warmup Iteration  19: 21520.061 ops/s
# Warmup Iteration  20: 21345.446 ops/s
# Warmup Iteration  21: 21073.729 ops/s
# Warmup Iteration  22: 21200.954 ops/s
# Warmup Iteration  23: 20770.722 ops/s
# Warmup Iteration  24: 20931.797 ops/s
# Warmup Iteration  25: 21054.097 ops/s
# Warmup Iteration  26: 20621.935 ops/s
# Warmup Iteration  27: 21115.578 ops/s
# Warmup Iteration  28: 21152.991 ops/s
# Warmup Iteration  29: 21186.476 ops/s
# Warmup Iteration  30: 20794.621 ops/s
Iteration   1: 20993.709 ops/s
Iteration   2: 20681.822 ops/s
Iteration   3: 21315.265 ops/s
Iteration   4: 20323.447 ops/s
Iteration   5: 20165.859 ops/s
Iteration   6: 21027.105 ops/s
Iteration   7: 20962.880 ops/s
Iteration   8: 20449.074 ops/s
Iteration   9: 21044.269 ops/s
Iteration  10: 20358.908 ops/s
Iteration  11: 21572.710 ops/s
Iteration  12: 21047.404 ops/s
Iteration  13: 21043.353 ops/s
Iteration  14: 21117.259 ops/s
Iteration  15: 21188.024 ops/s
Iteration  16: 20468.089 ops/s
Iteration  17: 20883.608 ops/s
Iteration  18: 20982.688 ops/s
Iteration  19: 20001.007 ops/s
Iteration  20: 21222.035 ops/s
Iteration  21: 21219.097 ops/s
Iteration  22: 21628.094 ops/s
Iteration  23: 21199.449 ops/s
Iteration  24: 20626.145 ops/s
Iteration  25: 21012.831 ops/s
Iteration  26: 20615.548 ops/s
Iteration  27: 20623.952 ops/s
Iteration  28: 21138.606 ops/s
Iteration  29: 20357.510 ops/s
Iteration  30: 20477.339 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeObserver":
  20858.236 ±(99.9%) 272.147 ops/s [Average]
  (min, avg, max) = (20001.007, 20858.236, 21628.094), stdev = 407.336
  CI (99.9%): [20586.090, 21130.383] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt      Score     Error  Units
ObservableBlockingTest._Benchmark.benchmark_blockingSubscribeObserver  thrpt   30  20858.236 ± 272.147  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1189300.458 ops/s
# Warmup Iteration   2: 3831769.298 ops/s
# Warmup Iteration   3: 5883743.425 ops/s
# Warmup Iteration   4: 6258935.795 ops/s
# Warmup Iteration   5: 5892782.432 ops/s
# Warmup Iteration   6: 5841742.765 ops/s
# Warmup Iteration   7: 5733891.165 ops/s
# Warmup Iteration   8: 5907754.958 ops/s
# Warmup Iteration   9: 5927497.106 ops/s
# Warmup Iteration  10: 6221472.857 ops/s
# Warmup Iteration  11: 6168944.981 ops/s
# Warmup Iteration  12: 5738280.576 ops/s
# Warmup Iteration  13: 6104516.216 ops/s
# Warmup Iteration  14: 5903428.068 ops/s
# Warmup Iteration  15: 5830258.125 ops/s
# Warmup Iteration  16: 6043388.045 ops/s
# Warmup Iteration  17: 5724840.114 ops/s
# Warmup Iteration  18: 6157593.209 ops/s
# Warmup Iteration  19: 5080800.609 ops/s
# Warmup Iteration  20: 5858810.308 ops/s
# Warmup Iteration  21: 6195504.731 ops/s
# Warmup Iteration  22: 5963375.774 ops/s
# Warmup Iteration  23: 6102684.812 ops/s
# Warmup Iteration  24: 5950478.244 ops/s
# Warmup Iteration  25: 5899732.438 ops/s
# Warmup Iteration  26: 6163098.126 ops/s
# Warmup Iteration  27: 5960649.638 ops/s
# Warmup Iteration  28: 5822391.685 ops/s
# Warmup Iteration  29: 6196107.676 ops/s
# Warmup Iteration  30: 5934934.491 ops/s
Iteration   1: 5992072.089 ops/s
Iteration   2: 5833120.537 ops/s
Iteration   3: 6078630.723 ops/s
Iteration   4: 5938330.797 ops/s
Iteration   5: 5975114.707 ops/s
Iteration   6: 6164826.784 ops/s
Iteration   7: 6226456.273 ops/s
Iteration   8: 5865679.776 ops/s
Iteration   9: 6212258.391 ops/s
Iteration  10: 5912741.048 ops/s
Iteration  11: 6107155.544 ops/s
Iteration  12: 5897699.701 ops/s
Iteration  13: 6153649.487 ops/s
Iteration  14: 5757108.675 ops/s
Iteration  15: 5975268.843 ops/s
Iteration  16: 6216540.262 ops/s
Iteration  17: 5928183.693 ops/s
Iteration  18: 5760323.393 ops/s
Iteration  19: 6085679.537 ops/s
Iteration  20: 5876844.809 ops/s
Iteration  21: 6205354.537 ops/s
Iteration  22: 5927098.323 ops/s
Iteration  23: 6154927.755 ops/s
Iteration  24: 6165112.862 ops/s
Iteration  25: 5987442.823 ops/s
Iteration  26: 6011787.393 ops/s
Iteration  27: 6123957.683 ops/s
Iteration  28: 5895879.904 ops/s
Iteration  29: 5983929.404 ops/s
Iteration  30: 5848343.512 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_normal":
  6008717.309 ±(99.9%) 93755.405 ops/s [Average]
  (min, avg, max) = (5757108.675, 6008717.309, 6226456.273), stdev = 140328.687
  CI (99.9%): [5914961.904, 6102472.714] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableUnsubscribeOnTest._Benchmark.benchmark_normal  thrpt   30  6008717.309 ± 93755.405  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_replayTimeBoundedSelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_replayTimeBoundedSelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 283807.480 ops/s
# Warmup Iteration   2: 497940.639 ops/s
# Warmup Iteration   3: 572610.661 ops/s
# Warmup Iteration   4: 605379.884 ops/s
# Warmup Iteration   5: 523419.596 ops/s
# Warmup Iteration   6: 596448.058 ops/s
# Warmup Iteration   7: 635826.176 ops/s
# Warmup Iteration   8: 622925.266 ops/s
# Warmup Iteration   9: 613789.328 ops/s
# Warmup Iteration  10: 619649.839 ops/s
# Warmup Iteration  11: 610909.655 ops/s
# Warmup Iteration  12: 599496.387 ops/s
# Warmup Iteration  13: 638847.963 ops/s
# Warmup Iteration  14: 609022.493 ops/s
# Warmup Iteration  15: 642466.435 ops/s
# Warmup Iteration  16: 593529.186 ops/s
# Warmup Iteration  17: 651071.980 ops/s
# Warmup Iteration  18: 653789.272 ops/s
# Warmup Iteration  19: 637813.709 ops/s
# Warmup Iteration  20: 662533.278 ops/s
# Warmup Iteration  21: 637933.725 ops/s
# Warmup Iteration  22: 640468.736 ops/s
# Warmup Iteration  23: 655492.188 ops/s
# Warmup Iteration  24: 631934.326 ops/s
# Warmup Iteration  25: 679331.016 ops/s
# Warmup Iteration  26: 624367.001 ops/s
# Warmup Iteration  27: 638253.843 ops/s
# Warmup Iteration  28: 638762.638 ops/s
# Warmup Iteration  29: 650352.862 ops/s
# Warmup Iteration  30: 644660.020 ops/s
Iteration   1: 655519.129 ops/s
Iteration   2: 658462.250 ops/s
Iteration   3: 627255.144 ops/s
Iteration   4: 644166.632 ops/s
Iteration   5: 647019.828 ops/s
Iteration   6: 627388.085 ops/s
Iteration   7: 659681.283 ops/s
Iteration   8: 622088.145 ops/s
Iteration   9: 661343.150 ops/s
Iteration  10: 643980.344 ops/s
Iteration  11: 655092.223 ops/s
Iteration  12: 623478.455 ops/s
Iteration  13: 640379.947 ops/s
Iteration  14: 639748.559 ops/s
Iteration  15: 627564.511 ops/s
Iteration  16: 653108.131 ops/s
Iteration  17: 636765.448 ops/s
Iteration  18: 666144.141 ops/s
Iteration  19: 642742.791 ops/s
Iteration  20: 636706.285 ops/s
Iteration  21: 657444.836 ops/s
Iteration  22: 632933.706 ops/s
Iteration  23: 630494.542 ops/s
Iteration  24: 648591.024 ops/s
Iteration  25: 659258.624 ops/s
Iteration  26: 635677.024 ops/s
Iteration  27: 639257.467 ops/s
Iteration  28: 660946.450 ops/s
Iteration  29: 615309.035 ops/s
Iteration  30: 667266.045 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_replayTimeBoundedSelectorReturnsNull":
  643860.441 ±(99.9%) 9563.862 ops/s [Average]
  (min, avg, max) = (615309.035, 643860.441, 667266.045), stdev = 14314.739
  CI (99.9%): [634296.580, 653424.303] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_replayTimeBoundedSelectorReturnsNull  thrpt   30  643860.441 ± 9563.862  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_replayBoundedSelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_replayBoundedSelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 242820.099 ops/s
# Warmup Iteration   2: 511957.332 ops/s
# Warmup Iteration   3: 620221.772 ops/s
# Warmup Iteration   4: 578348.303 ops/s
# Warmup Iteration   5: 608804.936 ops/s
# Warmup Iteration   6: 585750.935 ops/s
# Warmup Iteration   7: 605954.193 ops/s
# Warmup Iteration   8: 597907.148 ops/s
# Warmup Iteration   9: 587530.971 ops/s
# Warmup Iteration  10: 582501.912 ops/s
# Warmup Iteration  11: 594509.290 ops/s
# Warmup Iteration  12: 580158.165 ops/s
# Warmup Iteration  13: 588531.966 ops/s
# Warmup Iteration  14: 517782.428 ops/s
# Warmup Iteration  15: 574508.889 ops/s
# Warmup Iteration  16: 595913.791 ops/s
# Warmup Iteration  17: 604351.745 ops/s
# Warmup Iteration  18: 642783.200 ops/s
# Warmup Iteration  19: 622419.619 ops/s
# Warmup Iteration  20: 631140.980 ops/s
# Warmup Iteration  21: 624893.656 ops/s
# Warmup Iteration  22: 615975.108 ops/s
# Warmup Iteration  23: 635547.600 ops/s
# Warmup Iteration  24: 608799.401 ops/s
# Warmup Iteration  25: 635113.158 ops/s
# Warmup Iteration  26: 616012.784 ops/s
# Warmup Iteration  27: 632438.155 ops/s
# Warmup Iteration  28: 600521.357 ops/s
# Warmup Iteration  29: 620494.528 ops/s
# Warmup Iteration  30: 642921.738 ops/s
Iteration   1: 627406.234 ops/s
Iteration   2: 626170.379 ops/s
Iteration   3: 657001.825 ops/s
Iteration   4: 610986.183 ops/s
Iteration   5: 619570.316 ops/s
Iteration   6: 632428.983 ops/s
Iteration   7: 620630.155 ops/s
Iteration   8: 631354.171 ops/s
Iteration   9: 626014.276 ops/s
Iteration  10: 639291.500 ops/s
Iteration  11: 617377.337 ops/s
Iteration  12: 617274.358 ops/s
Iteration  13: 631942.896 ops/s
Iteration  14: 619805.322 ops/s
Iteration  15: 611221.441 ops/s
Iteration  16: 633113.369 ops/s
Iteration  17: 648098.262 ops/s
Iteration  18: 618391.836 ops/s
Iteration  19: 643085.240 ops/s
Iteration  20: 646331.664 ops/s
Iteration  21: 618847.062 ops/s
Iteration  22: 643359.172 ops/s
Iteration  23: 630686.748 ops/s
Iteration  24: 635762.939 ops/s
Iteration  25: 629082.259 ops/s
Iteration  26: 619636.626 ops/s
Iteration  27: 641275.886 ops/s
Iteration  28: 626789.722 ops/s
Iteration  29: 630862.745 ops/s
Iteration  30: 616147.738 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_replayBoundedSelectorReturnsNull":
  628998.222 ±(99.9%) 7702.902 ops/s [Average]
  (min, avg, max) = (610986.183, 628998.222, 657001.825), stdev = 11529.343
  CI (99.9%): [621295.319, 636701.124] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_replayBoundedSelectorReturnsNull  thrpt   30  628998.222 ± 7702.902  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 119290.172 ops/s
# Warmup Iteration   2: 505951.894 ops/s
# Warmup Iteration   3: 540002.386 ops/s
# Warmup Iteration   4: 575200.906 ops/s
# Warmup Iteration   5: 512831.731 ops/s
# Warmup Iteration   6: 602052.748 ops/s
# Warmup Iteration   7: 632724.982 ops/s
# Warmup Iteration   8: 611705.015 ops/s
# Warmup Iteration   9: 602078.174 ops/s
# Warmup Iteration  10: 632249.729 ops/s
# Warmup Iteration  11: 621960.456 ops/s
# Warmup Iteration  12: 592235.706 ops/s
# Warmup Iteration  13: 623138.832 ops/s
# Warmup Iteration  14: 605706.275 ops/s
# Warmup Iteration  15: 635475.311 ops/s
# Warmup Iteration  16: 589155.592 ops/s
# Warmup Iteration  17: 633344.461 ops/s
# Warmup Iteration  18: 651255.373 ops/s
# Warmup Iteration  19: 628946.268 ops/s
# Warmup Iteration  20: 663196.731 ops/s
# Warmup Iteration  21: 646673.131 ops/s
# Warmup Iteration  22: 635094.969 ops/s
# Warmup Iteration  23: 660904.816 ops/s
# Warmup Iteration  24: 641616.490 ops/s
# Warmup Iteration  25: 637730.154 ops/s
# Warmup Iteration  26: 645012.802 ops/s
# Warmup Iteration  27: 635048.824 ops/s
# Warmup Iteration  28: 655415.885 ops/s
# Warmup Iteration  29: 648209.426 ops/s
# Warmup Iteration  30: 637119.895 ops/s
Iteration   1: 658457.574 ops/s
Iteration   2: 617442.771 ops/s
Iteration   3: 672645.652 ops/s
Iteration   4: 621495.240 ops/s
Iteration   5: 627039.958 ops/s
Iteration   6: 635156.364 ops/s
Iteration   7: 652503.151 ops/s
Iteration   8: 652264.368 ops/s
Iteration   9: 626281.300 ops/s
Iteration  10: 645184.958 ops/s
Iteration  11: 640156.658 ops/s
Iteration  12: 624557.986 ops/s
Iteration  13: 651370.661 ops/s
Iteration  14: 629711.246 ops/s
Iteration  15: 631423.476 ops/s
Iteration  16: 657040.104 ops/s
Iteration  17: 647841.875 ops/s
Iteration  18: 614886.323 ops/s
Iteration  19: 666514.975 ops/s
Iteration  20: 643216.810 ops/s
Iteration  21: 615365.454 ops/s
Iteration  22: 645907.763 ops/s
Iteration  23: 645758.565 ops/s
Iteration  24: 649642.940 ops/s
Iteration  25: 638155.406 ops/s
Iteration  26: 654390.247 ops/s
Iteration  27: 673426.714 ops/s
Iteration  28: 657541.424 ops/s
Iteration  29: 610320.077 ops/s
Iteration  30: 682944.497 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_error":
  642954.818 ±(99.9%) 12456.506 ops/s [Average]
  (min, avg, max) = (610320.077, 642954.818, 682944.497), stdev = 18644.314
  CI (99.9%): [630498.312, 655411.324] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
ObservableRefCountTest._Benchmark.benchmark_error  thrpt   30  642954.818 ± 12456.506  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_nextWindowMissingBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_nextWindowMissingBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9907.455 ops/s
# Warmup Iteration   2: 34737.707 ops/s
# Warmup Iteration   3: 43923.092 ops/s
# Warmup Iteration   4: 77004.547 ops/s
# Warmup Iteration   5: 100656.583 ops/s
# Warmup Iteration   6: 90470.467 ops/s
# Warmup Iteration   7: 105171.561 ops/s
# Warmup Iteration   8: 79588.669 ops/s
# Warmup Iteration   9: 91095.811 ops/s
# Warmup Iteration  10: 101039.673 ops/s
# Warmup Iteration  11: 98507.340 ops/s
# Warmup Iteration  12: 106708.058 ops/s
# Warmup Iteration  13: 95521.479 ops/s
# Warmup Iteration  14: 106553.002 ops/s
# Warmup Iteration  15: 107996.415 ops/s
# Warmup Iteration  16: 106951.802 ops/s
# Warmup Iteration  17: 105766.502 ops/s
# Warmup Iteration  18: 108115.532 ops/s
# Warmup Iteration  19: 97795.849 ops/s
# Warmup Iteration  20: 92516.146 ops/s
# Warmup Iteration  21: 100626.122 ops/s
# Warmup Iteration  22: 89437.732 ops/s
# Warmup Iteration  23: 97154.208 ops/s
# Warmup Iteration  24: 111345.663 ops/s
# Warmup Iteration  25: 94015.311 ops/s
# Warmup Iteration  26: 99423.283 ops/s
# Warmup Iteration  27: 98473.632 ops/s
# Warmup Iteration  28: 114322.780 ops/s
# Warmup Iteration  29: 111380.839 ops/s
# Warmup Iteration  30: 109861.246 ops/s
Iteration   1: 100481.727 ops/s
Iteration   2: 106854.490 ops/s
Iteration   3: 101035.821 ops/s
Iteration   4: 104005.393 ops/s
Iteration   5: 100462.973 ops/s
Iteration   6: 109448.251 ops/s
Iteration   7: 108477.674 ops/s
Iteration   8: 98474.376 ops/s
Iteration   9: 101844.326 ops/s
Iteration  10: 111425.937 ops/s
Iteration  11: 99951.033 ops/s
Iteration  12: 106511.972 ops/s
Iteration  13: 108555.414 ops/s
Iteration  14: 88676.968 ops/s
Iteration  15: 96049.151 ops/s
Iteration  16: 92493.208 ops/s
Iteration  17: 104691.806 ops/s
Iteration  18: 97062.753 ops/s
Iteration  19: 104387.031 ops/s
Iteration  20: 94978.299 ops/s
Iteration  21: 101896.679 ops/s
Iteration  22: 100754.287 ops/s
Iteration  23: 106806.567 ops/s
Iteration  24: 112625.653 ops/s
Iteration  25: 110536.353 ops/s
Iteration  26: 105214.032 ops/s
Iteration  27: 94019.686 ops/s
Iteration  28: 100464.221 ops/s
Iteration  29: 86801.906 ops/s
Iteration  30: 92173.317 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_nextWindowMissingBackpressure":
  101572.043 ±(99.9%) 4470.211 ops/s [Average]
  (min, avg, max) = (86801.906, 101572.043, 112625.653), stdev = 6690.801
  CI (99.9%): [97101.833, 106042.254] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_nextWindowMissingBackpressure  thrpt   30  101572.043 ± 4470.211  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.completable.CompletableTimerTest._Benchmark.benchmark_timer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.completable.CompletableTimerTest._Benchmark.benchmark_timer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1132874.652 ops/s
# Warmup Iteration   2: 2672745.963 ops/s
# Warmup Iteration   3: 2902794.132 ops/s
# Warmup Iteration   4: 3245563.711 ops/s
# Warmup Iteration   5: 3462370.282 ops/s
# Warmup Iteration   6: 3337401.846 ops/s
# Warmup Iteration   7: 3377473.218 ops/s
# Warmup Iteration   8: 3363643.380 ops/s
# Warmup Iteration   9: 3264625.995 ops/s
# Warmup Iteration  10: 3459392.613 ops/s
# Warmup Iteration  11: 3432662.568 ops/s
# Warmup Iteration  12: 3251434.916 ops/s
# Warmup Iteration  13: 3386985.325 ops/s
# Warmup Iteration  14: 3326540.045 ops/s
# Warmup Iteration  15: 3365548.559 ops/s
# Warmup Iteration  16: 3488104.589 ops/s
# Warmup Iteration  17: 3290428.556 ops/s
# Warmup Iteration  18: 3386899.148 ops/s
# Warmup Iteration  19: 3361283.162 ops/s
# Warmup Iteration  20: 3388671.525 ops/s
# Warmup Iteration  21: 3414915.000 ops/s
# Warmup Iteration  22: 3340573.881 ops/s
# Warmup Iteration  23: 3496902.301 ops/s
# Warmup Iteration  24: 3370715.569 ops/s
# Warmup Iteration  25: 3392604.146 ops/s
# Warmup Iteration  26: 3423445.815 ops/s
# Warmup Iteration  27: 3364673.702 ops/s
# Warmup Iteration  28: 3397073.450 ops/s
# Warmup Iteration  29: 3504771.704 ops/s
# Warmup Iteration  30: 3265199.784 ops/s
Iteration   1: 3593027.902 ops/s
Iteration   2: 3394819.974 ops/s
Iteration   3: 3284442.424 ops/s
Iteration   4: 3445604.463 ops/s
Iteration   5: 3268433.783 ops/s
Iteration   6: 3349392.582 ops/s
Iteration   7: 3461652.781 ops/s
Iteration   8: 3264366.484 ops/s
Iteration   9: 3451859.061 ops/s
Iteration  10: 3426682.967 ops/s
Iteration  11: 3301521.403 ops/s
Iteration  12: 3484283.248 ops/s
Iteration  13: 3263470.265 ops/s
Iteration  14: 3394278.315 ops/s
Iteration  15: 3346167.064 ops/s
Iteration  16: 3357714.401 ops/s
Iteration  17: 3369953.933 ops/s
Iteration  18: 3454853.927 ops/s
Iteration  19: 3515280.659 ops/s
Iteration  20: 3540212.960 ops/s
Iteration  21: 3277992.450 ops/s
Iteration  22: 3488445.392 ops/s
Iteration  23: 3313409.734 ops/s
Iteration  24: 3391196.333 ops/s
Iteration  25: 3322358.376 ops/s
Iteration  26: 3403728.554 ops/s
Iteration  27: 3372553.524 ops/s
Iteration  28: 3339092.780 ops/s
Iteration  29: 3431156.329 ops/s
Iteration  30: 3328009.866 ops/s


Result "io.reactivex.rxjava3.completable.CompletableTimerTest._Benchmark.benchmark_timer":
  3387865.398 ±(99.9%) 57891.685 ops/s [Average]
  (min, avg, max) = (3263470.265, 3387865.398, 3593027.902), stdev = 86649.556
  CI (99.9%): [3329973.713, 3445757.083] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
CompletableTimerTest._Benchmark.benchmark_timer  thrpt   30  3387865.398 ± 57891.685  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDetachTest._Benchmark.benchmark_onError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDetachTest._Benchmark.benchmark_onError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 180823.865 ops/s
# Warmup Iteration   2: 517595.685 ops/s
# Warmup Iteration   3: 681460.023 ops/s
# Warmup Iteration   4: 720209.059 ops/s
# Warmup Iteration   5: 719537.113 ops/s
# Warmup Iteration   6: 692845.714 ops/s
# Warmup Iteration   7: 732786.584 ops/s
# Warmup Iteration   8: 661806.035 ops/s
# Warmup Iteration   9: 709758.647 ops/s
# Warmup Iteration  10: 720425.172 ops/s
# Warmup Iteration  11: 728821.799 ops/s
# Warmup Iteration  12: 695460.300 ops/s
# Warmup Iteration  13: 739158.506 ops/s
# Warmup Iteration  14: 712041.904 ops/s
# Warmup Iteration  15: 728439.485 ops/s
# Warmup Iteration  16: 704657.523 ops/s
# Warmup Iteration  17: 771039.009 ops/s
# Warmup Iteration  18: 767924.447 ops/s
# Warmup Iteration  19: 747942.975 ops/s
# Warmup Iteration  20: 776394.112 ops/s
# Warmup Iteration  21: 762368.635 ops/s
# Warmup Iteration  22: 744976.173 ops/s
# Warmup Iteration  23: 810290.104 ops/s
# Warmup Iteration  24: 721885.196 ops/s
# Warmup Iteration  25: 756182.089 ops/s
# Warmup Iteration  26: 790798.359 ops/s
# Warmup Iteration  27: 739949.619 ops/s
# Warmup Iteration  28: 778202.733 ops/s
# Warmup Iteration  29: 742838.265 ops/s
# Warmup Iteration  30: 776493.666 ops/s
Iteration   1: 780821.811 ops/s
Iteration   2: 760042.314 ops/s
Iteration   3: 746459.645 ops/s
Iteration   4: 784185.229 ops/s
Iteration   5: 743965.432 ops/s
Iteration   6: 755423.086 ops/s
Iteration   7: 785102.964 ops/s
Iteration   8: 727797.053 ops/s
Iteration   9: 804683.790 ops/s
Iteration  10: 752260.611 ops/s
Iteration  11: 782073.252 ops/s
Iteration  12: 738723.330 ops/s
Iteration  13: 778823.155 ops/s
Iteration  14: 781842.671 ops/s
Iteration  15: 743228.367 ops/s
Iteration  16: 759618.765 ops/s
Iteration  17: 780505.248 ops/s
Iteration  18: 764755.817 ops/s
Iteration  19: 760049.306 ops/s
Iteration  20: 743987.464 ops/s
Iteration  21: 762633.197 ops/s
Iteration  22: 792913.731 ops/s
Iteration  23: 735710.357 ops/s
Iteration  24: 787626.422 ops/s
Iteration  25: 751590.183 ops/s
Iteration  26: 773664.740 ops/s
Iteration  27: 772679.902 ops/s
Iteration  28: 778762.192 ops/s
Iteration  29: 738900.421 ops/s
Iteration  30: 760710.469 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDetachTest._Benchmark.benchmark_onError":
  764318.031 ±(99.9%) 13045.113 ops/s [Average]
  (min, avg, max) = (727797.053, 764318.031, 804683.790), stdev = 19525.312
  CI (99.9%): [751272.918, 777363.143] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
CompletableDetachTest._Benchmark.benchmark_onError  thrpt   30  764318.031 ± 13045.113  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelayTest._Benchmark.benchmark_errorNotDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelayTest._Benchmark.benchmark_errorNotDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 121092.598 ops/s
# Warmup Iteration   2: 465525.453 ops/s
# Warmup Iteration   3: 583736.317 ops/s
# Warmup Iteration   4: 603686.427 ops/s
# Warmup Iteration   5: 598668.334 ops/s
# Warmup Iteration   6: 584065.167 ops/s
# Warmup Iteration   7: 603415.534 ops/s
# Warmup Iteration   8: 571919.883 ops/s
# Warmup Iteration   9: 599107.904 ops/s
# Warmup Iteration  10: 577282.736 ops/s
# Warmup Iteration  11: 567607.863 ops/s
# Warmup Iteration  12: 622454.794 ops/s
# Warmup Iteration  13: 598961.659 ops/s
# Warmup Iteration  14: 582080.600 ops/s
# Warmup Iteration  15: 630857.261 ops/s
# Warmup Iteration  16: 584879.592 ops/s
# Warmup Iteration  17: 576355.136 ops/s
# Warmup Iteration  18: 553978.517 ops/s
# Warmup Iteration  19: 610808.344 ops/s
# Warmup Iteration  20: 632280.936 ops/s
# Warmup Iteration  21: 605525.450 ops/s
# Warmup Iteration  22: 637229.070 ops/s
# Warmup Iteration  23: 608789.329 ops/s
# Warmup Iteration  24: 607942.199 ops/s
# Warmup Iteration  25: 609588.137 ops/s
# Warmup Iteration  26: 600094.987 ops/s
# Warmup Iteration  27: 635744.394 ops/s
# Warmup Iteration  28: 575437.631 ops/s
# Warmup Iteration  29: 630186.303 ops/s
# Warmup Iteration  30: 607625.398 ops/s
Iteration   1: 609285.000 ops/s
Iteration   2: 611274.527 ops/s
Iteration   3: 604632.346 ops/s
Iteration   4: 610697.457 ops/s
Iteration   5: 605223.435 ops/s
Iteration   6: 607094.648 ops/s
Iteration   7: 630631.112 ops/s
Iteration   8: 607230.291 ops/s
Iteration   9: 624888.439 ops/s
Iteration  10: 598118.522 ops/s
Iteration  11: 630765.711 ops/s
Iteration  12: 619629.015 ops/s
Iteration  13: 606949.268 ops/s
Iteration  14: 627960.128 ops/s
Iteration  15: 601774.504 ops/s
Iteration  16: 616991.008 ops/s
Iteration  17: 613546.347 ops/s
Iteration  18: 608440.836 ops/s
Iteration  19: 619949.107 ops/s
Iteration  20: 609997.428 ops/s
Iteration  21: 619374.317 ops/s
Iteration  22: 611472.359 ops/s
Iteration  23: 607868.488 ops/s
Iteration  24: 643004.859 ops/s
Iteration  25: 620398.713 ops/s
Iteration  26: 618777.836 ops/s
Iteration  27: 606634.833 ops/s
Iteration  28: 495612.191 ops/s
Iteration  29: 575725.110 ops/s
Iteration  30: 622712.563 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDelayTest._Benchmark.benchmark_errorNotDelayed":
  609555.347 ±(99.9%) 16524.757 ops/s [Average]
  (min, avg, max) = (495612.191, 609555.347, 643004.859), stdev = 24733.479
  CI (99.9%): [593030.590, 626080.103] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
CompletableDelayTest._Benchmark.benchmark_errorNotDelayed  thrpt   30  609555.347 ± 16524.757  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelayTest._Benchmark.benchmark_errorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelayTest._Benchmark.benchmark_errorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147826.405 ops/s
# Warmup Iteration   2: 455345.883 ops/s
# Warmup Iteration   3: 520353.014 ops/s
# Warmup Iteration   4: 582082.083 ops/s
# Warmup Iteration   5: 518598.949 ops/s
# Warmup Iteration   6: 579002.330 ops/s
# Warmup Iteration   7: 591473.600 ops/s
# Warmup Iteration   8: 591882.777 ops/s
# Warmup Iteration   9: 606562.534 ops/s
# Warmup Iteration  10: 579259.541 ops/s
# Warmup Iteration  11: 576403.875 ops/s
# Warmup Iteration  12: 581575.830 ops/s
# Warmup Iteration  13: 588299.667 ops/s
# Warmup Iteration  14: 607797.034 ops/s
# Warmup Iteration  15: 577197.522 ops/s
# Warmup Iteration  16: 594002.727 ops/s
# Warmup Iteration  17: 613927.644 ops/s
# Warmup Iteration  18: 635467.595 ops/s
# Warmup Iteration  19: 624106.098 ops/s
# Warmup Iteration  20: 611776.592 ops/s
# Warmup Iteration  21: 608860.431 ops/s
# Warmup Iteration  22: 621694.270 ops/s
# Warmup Iteration  23: 636214.979 ops/s
# Warmup Iteration  24: 605219.006 ops/s
# Warmup Iteration  25: 634066.664 ops/s
# Warmup Iteration  26: 608691.548 ops/s
# Warmup Iteration  27: 621714.353 ops/s
# Warmup Iteration  28: 637385.841 ops/s
# Warmup Iteration  29: 621136.682 ops/s
# Warmup Iteration  30: 633790.935 ops/s
Iteration   1: 628781.716 ops/s
Iteration   2: 617972.676 ops/s
Iteration   3: 646579.731 ops/s
Iteration   4: 609360.956 ops/s
Iteration   5: 617412.065 ops/s
Iteration   6: 625739.288 ops/s
Iteration   7: 620443.942 ops/s
Iteration   8: 638969.064 ops/s
Iteration   9: 617634.715 ops/s
Iteration  10: 617935.564 ops/s
Iteration  11: 633577.543 ops/s
Iteration  12: 627813.988 ops/s
Iteration  13: 617227.082 ops/s
Iteration  14: 601598.455 ops/s
Iteration  15: 642979.761 ops/s
Iteration  16: 607661.866 ops/s
Iteration  17: 622975.552 ops/s
Iteration  18: 631811.536 ops/s
Iteration  19: 647127.991 ops/s
Iteration  20: 620508.674 ops/s
Iteration  21: 595443.191 ops/s
Iteration  22: 635151.465 ops/s
Iteration  23: 624175.556 ops/s
Iteration  24: 635868.394 ops/s
Iteration  25: 630420.561 ops/s
Iteration  26: 612107.942 ops/s
Iteration  27: 643606.896 ops/s
Iteration  28: 630797.845 ops/s
Iteration  29: 598636.692 ops/s
Iteration  30: 648441.237 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDelayTest._Benchmark.benchmark_errorDelayed":
  624958.732 ±(99.9%) 9562.865 ops/s [Average]
  (min, avg, max) = (595443.191, 624958.732, 648441.237), stdev = 14313.248
  CI (99.9%): [615395.866, 634521.597] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
CompletableDelayTest._Benchmark.benchmark_errorDelayed  thrpt   30  624958.732 ± 9562.865  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingleTest._Benchmark.benchmark_fromSingleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingleTest._Benchmark.benchmark_fromSingleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 276661.287 ops/s
# Warmup Iteration   2: 577125.303 ops/s
# Warmup Iteration   3: 719363.974 ops/s
# Warmup Iteration   4: 696683.903 ops/s
# Warmup Iteration   5: 701365.628 ops/s
# Warmup Iteration   6: 708731.176 ops/s
# Warmup Iteration   7: 652422.831 ops/s
# Warmup Iteration   8: 729169.842 ops/s
# Warmup Iteration   9: 715124.813 ops/s
# Warmup Iteration  10: 740359.154 ops/s
# Warmup Iteration  11: 718689.214 ops/s
# Warmup Iteration  12: 719571.844 ops/s
# Warmup Iteration  13: 736358.163 ops/s
# Warmup Iteration  14: 700308.859 ops/s
# Warmup Iteration  15: 728462.697 ops/s
# Warmup Iteration  16: 713907.124 ops/s
# Warmup Iteration  17: 761962.799 ops/s
# Warmup Iteration  18: 753967.625 ops/s
# Warmup Iteration  19: 748656.330 ops/s
# Warmup Iteration  20: 785385.655 ops/s
# Warmup Iteration  21: 727321.323 ops/s
# Warmup Iteration  22: 733517.100 ops/s
# Warmup Iteration  23: 757307.519 ops/s
# Warmup Iteration  24: 742809.283 ops/s
# Warmup Iteration  25: 772416.917 ops/s
# Warmup Iteration  26: 760651.525 ops/s
# Warmup Iteration  27: 760179.380 ops/s
# Warmup Iteration  28: 754391.372 ops/s
# Warmup Iteration  29: 756834.599 ops/s
# Warmup Iteration  30: 803554.402 ops/s
Iteration   1: 734392.789 ops/s
Iteration   2: 742323.798 ops/s
Iteration   3: 759474.840 ops/s
Iteration   4: 763608.934 ops/s
Iteration   5: 769610.504 ops/s
Iteration   6: 729977.802 ops/s
Iteration   7: 749418.184 ops/s
Iteration   8: 752144.692 ops/s
Iteration   9: 768583.340 ops/s
Iteration  10: 763308.985 ops/s
Iteration  11: 766612.719 ops/s
Iteration  12: 758678.215 ops/s
Iteration  13: 780816.522 ops/s
Iteration  14: 791882.545 ops/s
Iteration  15: 739375.788 ops/s
Iteration  16: 771479.283 ops/s
Iteration  17: 754938.157 ops/s
Iteration  18: 765222.392 ops/s
Iteration  19: 760435.859 ops/s
Iteration  20: 757069.138 ops/s
Iteration  21: 740482.906 ops/s
Iteration  22: 781714.052 ops/s
Iteration  23: 607607.966 ops/s
Iteration  24: 711182.479 ops/s
Iteration  25: 794093.536 ops/s
Iteration  26: 733761.497 ops/s
Iteration  27: 777291.646 ops/s
Iteration  28: 752193.210 ops/s
Iteration  29: 747134.619 ops/s
Iteration  30: 744754.082 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingleTest._Benchmark.benchmark_fromSingleError":
  752319.016 ±(99.9%) 22070.155 ops/s [Average]
  (min, avg, max) = (607607.966, 752319.016, 794093.536), stdev = 33033.571
  CI (99.9%): [730248.861, 774389.171] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
CompletableFromSingleTest._Benchmark.benchmark_fromSingleError  thrpt   30  752319.016 ± 22070.155  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnTest._Benchmark.benchmark_errorAcceptThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnTest._Benchmark.benchmark_errorAcceptThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 49947.708 ops/s
# Warmup Iteration   2: 174961.233 ops/s
# Warmup Iteration   3: 203732.282 ops/s
# Warmup Iteration   4: 186535.987 ops/s
# Warmup Iteration   5: 195581.785 ops/s
# Warmup Iteration   6: 192160.619 ops/s
# Warmup Iteration   7: 193589.163 ops/s
# Warmup Iteration   8: 193921.150 ops/s
# Warmup Iteration   9: 198820.891 ops/s
# Warmup Iteration  10: 195797.228 ops/s
# Warmup Iteration  11: 186613.698 ops/s
# Warmup Iteration  12: 200591.744 ops/s
# Warmup Iteration  13: 187997.168 ops/s
# Warmup Iteration  14: 194649.075 ops/s
# Warmup Iteration  15: 200695.165 ops/s
# Warmup Iteration  16: 198233.115 ops/s
# Warmup Iteration  17: 203472.510 ops/s
# Warmup Iteration  18: 205699.783 ops/s
# Warmup Iteration  19: 214081.991 ops/s
# Warmup Iteration  20: 197120.649 ops/s
# Warmup Iteration  21: 214076.771 ops/s
# Warmup Iteration  22: 199458.512 ops/s
# Warmup Iteration  23: 216479.196 ops/s
# Warmup Iteration  24: 209649.218 ops/s
# Warmup Iteration  25: 203111.989 ops/s
# Warmup Iteration  26: 208969.421 ops/s
# Warmup Iteration  27: 209274.687 ops/s
# Warmup Iteration  28: 203162.662 ops/s
# Warmup Iteration  29: 209906.395 ops/s
# Warmup Iteration  30: 205438.964 ops/s
Iteration   1: 213485.344 ops/s
Iteration   2: 205103.606 ops/s
Iteration   3: 199838.098 ops/s
Iteration   4: 214330.454 ops/s
Iteration   5: 212752.462 ops/s
Iteration   6: 201966.085 ops/s
Iteration   7: 207379.442 ops/s
Iteration   8: 212755.358 ops/s
Iteration   9: 200515.512 ops/s
Iteration  10: 210816.173 ops/s
Iteration  11: 203999.313 ops/s
Iteration  12: 212621.768 ops/s
Iteration  13: 209240.887 ops/s
Iteration  14: 197634.890 ops/s
Iteration  15: 205801.950 ops/s
Iteration  16: 204799.102 ops/s
Iteration  17: 204360.536 ops/s
Iteration  18: 208012.856 ops/s
Iteration  19: 204485.769 ops/s
Iteration  20: 216438.963 ops/s
Iteration  21: 199315.066 ops/s
Iteration  22: 209556.839 ops/s
Iteration  23: 206980.734 ops/s
Iteration  24: 201010.608 ops/s
Iteration  25: 210545.382 ops/s
Iteration  26: 207091.038 ops/s
Iteration  27: 209110.497 ops/s
Iteration  28: 209317.788 ops/s
Iteration  29: 204394.165 ops/s
Iteration  30: 212252.444 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnTest._Benchmark.benchmark_errorAcceptThrows":
  207197.104 ±(99.9%) 3280.362 ops/s [Average]
  (min, avg, max) = (197634.890, 207197.104, 216438.963), stdev = 4909.892
  CI (99.9%): [203916.742, 210477.467] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
CompletableDoOnTest._Benchmark.benchmark_errorAcceptThrows  thrpt   30  207197.104 ± 3280.362  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateStateConsumerInitialStateNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateStateConsumerInitialStateNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 401209.827 ops/s
# Warmup Iteration   2: 615645.211 ops/s
# Warmup Iteration   3: 712074.925 ops/s
# Warmup Iteration   4: 651773.275 ops/s
# Warmup Iteration   5: 773452.245 ops/s
# Warmup Iteration   6: 684367.989 ops/s
# Warmup Iteration   7: 662486.949 ops/s
# Warmup Iteration   8: 755755.880 ops/s
# Warmup Iteration   9: 738954.569 ops/s
# Warmup Iteration  10: 737455.667 ops/s
# Warmup Iteration  11: 754719.638 ops/s
# Warmup Iteration  12: 714740.900 ops/s
# Warmup Iteration  13: 751256.075 ops/s
# Warmup Iteration  14: 755098.012 ops/s
# Warmup Iteration  15: 715498.876 ops/s
# Warmup Iteration  16: 750226.991 ops/s
# Warmup Iteration  17: 807602.428 ops/s
# Warmup Iteration  18: 775261.989 ops/s
# Warmup Iteration  19: 785823.765 ops/s
# Warmup Iteration  20: 792425.050 ops/s
# Warmup Iteration  21: 785954.716 ops/s
# Warmup Iteration  22: 782062.203 ops/s
# Warmup Iteration  23: 794142.485 ops/s
# Warmup Iteration  24: 790884.405 ops/s
# Warmup Iteration  25: 770572.576 ops/s
# Warmup Iteration  26: 815851.031 ops/s
# Warmup Iteration  27: 779829.254 ops/s
# Warmup Iteration  28: 774636.836 ops/s
# Warmup Iteration  29: 802189.758 ops/s
# Warmup Iteration  30: 769602.044 ops/s
Iteration   1: 818409.838 ops/s
Iteration   2: 797587.101 ops/s
Iteration   3: 775057.774 ops/s
Iteration   4: 787871.087 ops/s
Iteration   5: 795777.969 ops/s
Iteration   6: 776290.501 ops/s
Iteration   7: 805627.844 ops/s
Iteration   8: 763200.913 ops/s
Iteration   9: 797030.996 ops/s
Iteration  10: 790250.466 ops/s
Iteration  11: 780470.670 ops/s
Iteration  12: 796790.326 ops/s
Iteration  13: 791372.037 ops/s
Iteration  14: 769765.661 ops/s
Iteration  15: 804623.710 ops/s
Iteration  16: 743130.872 ops/s
Iteration  17: 782336.988 ops/s
Iteration  18: 661540.655 ops/s
Iteration  19: 772636.999 ops/s
Iteration  20: 793387.182 ops/s
Iteration  21: 774360.108 ops/s
Iteration  22: 792205.908 ops/s
Iteration  23: 776350.724 ops/s
Iteration  24: 790640.004 ops/s
Iteration  25: 784816.021 ops/s
Iteration  26: 782639.576 ops/s
Iteration  27: 794684.772 ops/s
Iteration  28: 772206.998 ops/s
Iteration  29: 785040.773 ops/s
Iteration  30: 757736.518 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateStateConsumerInitialStateNull":
  780461.366 ±(99.9%) 18127.885 ops/s [Average]
  (min, avg, max) = (661540.655, 780461.366, 818409.838), stdev = 27132.967
  CI (99.9%): [762333.481, 798589.251] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_generateStateConsumerInitialStateNull  thrpt   30  780461.366 ± 18127.885  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_errorDisposerCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_errorDisposerCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 51719.618 ops/s
# Warmup Iteration   2: 143869.928 ops/s
# Warmup Iteration   3: 177023.145 ops/s
# Warmup Iteration   4: 179665.299 ops/s
# Warmup Iteration   5: 181573.002 ops/s
# Warmup Iteration   6: 193436.748 ops/s
# Warmup Iteration   7: 187501.381 ops/s
# Warmup Iteration   8: 186720.713 ops/s
# Warmup Iteration   9: 198249.024 ops/s
# Warmup Iteration  10: 187467.310 ops/s
# Warmup Iteration  11: 178834.847 ops/s
# Warmup Iteration  12: 195960.312 ops/s
# Warmup Iteration  13: 183530.940 ops/s
# Warmup Iteration  14: 190064.954 ops/s
# Warmup Iteration  15: 187772.512 ops/s
# Warmup Iteration  16: 189651.375 ops/s
# Warmup Iteration  17: 202642.340 ops/s
# Warmup Iteration  18: 191998.605 ops/s
# Warmup Iteration  19: 200807.952 ops/s
# Warmup Iteration  20: 191091.118 ops/s
# Warmup Iteration  21: 196400.804 ops/s
# Warmup Iteration  22: 198667.628 ops/s
# Warmup Iteration  23: 194622.139 ops/s
# Warmup Iteration  24: 192169.325 ops/s
# Warmup Iteration  25: 201993.915 ops/s
# Warmup Iteration  26: 189395.493 ops/s
# Warmup Iteration  27: 205914.486 ops/s
# Warmup Iteration  28: 201688.406 ops/s
# Warmup Iteration  29: 191222.502 ops/s
# Warmup Iteration  30: 201148.661 ops/s
Iteration   1: 193007.161 ops/s
Iteration   2: 199556.575 ops/s
Iteration   3: 199151.554 ops/s
Iteration   4: 198603.195 ops/s
Iteration   5: 201347.395 ops/s
Iteration   6: 198276.179 ops/s
Iteration   7: 195620.142 ops/s
Iteration   8: 204805.468 ops/s
Iteration   9: 203262.875 ops/s
Iteration  10: 192909.184 ops/s
Iteration  11: 204351.041 ops/s
Iteration  12: 194210.654 ops/s
Iteration  13: 203242.908 ops/s
Iteration  14: 204569.781 ops/s
Iteration  15: 190554.143 ops/s
Iteration  16: 201781.566 ops/s
Iteration  17: 196014.682 ops/s
Iteration  18: 200654.272 ops/s
Iteration  19: 203080.523 ops/s
Iteration  20: 193820.478 ops/s
Iteration  21: 206583.638 ops/s
Iteration  22: 195035.820 ops/s
Iteration  23: 198766.118 ops/s
Iteration  24: 194265.626 ops/s
Iteration  25: 200505.669 ops/s
Iteration  26: 197345.302 ops/s
Iteration  27: 200785.621 ops/s
Iteration  28: 188962.390 ops/s
Iteration  29: 200637.382 ops/s
Iteration  30: 205396.688 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_errorDisposerCrash":
  198903.468 ±(99.9%) 3103.099 ops/s [Average]
  (min, avg, max) = (188962.390, 198903.468, 206583.638), stdev = 4644.573
  CI (99.9%): [195800.369, 202006.567] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
CompletableUsingTest._Benchmark.benchmark_errorDisposerCrash  thrpt   30  198903.468 ± 3103.099  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_mapperCrashes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_mapperCrashes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 433557.480 ops/s
# Warmup Iteration   2: 581266.836 ops/s
# Warmup Iteration   3: 674202.219 ops/s
# Warmup Iteration   4: 657187.591 ops/s
# Warmup Iteration   5: 607877.182 ops/s
# Warmup Iteration   6: 676066.793 ops/s
# Warmup Iteration   7: 674502.311 ops/s
# Warmup Iteration   8: 700354.459 ops/s
# Warmup Iteration   9: 690947.605 ops/s
# Warmup Iteration  10: 683608.647 ops/s
# Warmup Iteration  11: 706157.396 ops/s
# Warmup Iteration  12: 715491.787 ops/s
# Warmup Iteration  13: 665907.439 ops/s
# Warmup Iteration  14: 691456.588 ops/s
# Warmup Iteration  15: 681984.235 ops/s
# Warmup Iteration  16: 703843.421 ops/s
# Warmup Iteration  17: 745482.556 ops/s
# Warmup Iteration  18: 731900.707 ops/s
# Warmup Iteration  19: 736723.453 ops/s
# Warmup Iteration  20: 719273.712 ops/s
# Warmup Iteration  21: 760313.928 ops/s
# Warmup Iteration  22: 720987.616 ops/s
# Warmup Iteration  23: 734278.096 ops/s
# Warmup Iteration  24: 702410.197 ops/s
# Warmup Iteration  25: 764379.674 ops/s
# Warmup Iteration  26: 739731.470 ops/s
# Warmup Iteration  27: 707048.228 ops/s
# Warmup Iteration  28: 730480.184 ops/s
# Warmup Iteration  29: 727366.965 ops/s
# Warmup Iteration  30: 734766.587 ops/s
Iteration   1: 727652.799 ops/s
Iteration   2: 723984.410 ops/s
Iteration   3: 742722.031 ops/s
Iteration   4: 750626.411 ops/s
Iteration   5: 727019.642 ops/s
Iteration   6: 713292.189 ops/s
Iteration   7: 725775.590 ops/s
Iteration   8: 774562.034 ops/s
Iteration   9: 711108.533 ops/s
Iteration  10: 729883.599 ops/s
Iteration  11: 753824.465 ops/s
Iteration  12: 710453.034 ops/s
Iteration  13: 635835.747 ops/s
Iteration  14: 726318.364 ops/s
Iteration  15: 718887.987 ops/s
Iteration  16: 747912.989 ops/s
Iteration  17: 724955.436 ops/s
Iteration  18: 709420.277 ops/s
Iteration  19: 751675.317 ops/s
Iteration  20: 700052.159 ops/s
Iteration  21: 712623.817 ops/s
Iteration  22: 732868.461 ops/s
Iteration  23: 720547.097 ops/s
Iteration  24: 748916.226 ops/s
Iteration  25: 712965.741 ops/s
Iteration  26: 737392.190 ops/s
Iteration  27: 733520.129 ops/s
Iteration  28: 730102.515 ops/s
Iteration  29: 736171.816 ops/s
Iteration  30: 736600.444 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_mapperCrashes":
  726922.382 ±(99.9%) 15829.787 ops/s [Average]
  (min, avg, max) = (635835.747, 726922.382, 774562.034), stdev = 23693.281
  CI (99.9%): [711092.595, 742752.168] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableScalarXMapTest._Benchmark.benchmark_mapperCrashes  thrpt   30  726922.382 ± 15829.787  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_mainErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_mainErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 151868.850 ops/s
# Warmup Iteration   2: 525819.746 ops/s
# Warmup Iteration   3: 610387.258 ops/s
# Warmup Iteration   4: 612392.643 ops/s
# Warmup Iteration   5: 617552.147 ops/s
# Warmup Iteration   6: 603702.084 ops/s
# Warmup Iteration   7: 615418.906 ops/s
# Warmup Iteration   8: 608284.910 ops/s
# Warmup Iteration   9: 609569.350 ops/s
# Warmup Iteration  10: 584330.504 ops/s
# Warmup Iteration  11: 576983.905 ops/s
# Warmup Iteration  12: 599809.896 ops/s
# Warmup Iteration  13: 592633.817 ops/s
# Warmup Iteration  14: 605516.797 ops/s
# Warmup Iteration  15: 621346.395 ops/s
# Warmup Iteration  16: 626015.015 ops/s
# Warmup Iteration  17: 641688.664 ops/s
# Warmup Iteration  18: 643993.098 ops/s
# Warmup Iteration  19: 657006.716 ops/s
# Warmup Iteration  20: 658622.515 ops/s
# Warmup Iteration  21: 641991.984 ops/s
# Warmup Iteration  22: 632413.633 ops/s
# Warmup Iteration  23: 679476.514 ops/s
# Warmup Iteration  24: 638599.395 ops/s
# Warmup Iteration  25: 641835.805 ops/s
# Warmup Iteration  26: 642796.435 ops/s
# Warmup Iteration  27: 629935.658 ops/s
# Warmup Iteration  28: 640310.268 ops/s
# Warmup Iteration  29: 655797.659 ops/s
# Warmup Iteration  30: 634244.076 ops/s
Iteration   1: 640659.951 ops/s
Iteration   2: 632508.547 ops/s
Iteration   3: 642923.793 ops/s
Iteration   4: 670302.377 ops/s
Iteration   5: 664547.847 ops/s
Iteration   6: 613535.941 ops/s
Iteration   7: 666069.283 ops/s
Iteration   8: 648046.914 ops/s
Iteration   9: 665214.846 ops/s
Iteration  10: 643563.200 ops/s
Iteration  11: 637872.024 ops/s
Iteration  12: 678288.719 ops/s
Iteration  13: 649247.988 ops/s
Iteration  14: 640323.250 ops/s
Iteration  15: 631649.488 ops/s
Iteration  16: 649226.148 ops/s
Iteration  17: 644089.941 ops/s
Iteration  18: 663020.206 ops/s
Iteration  19: 637592.257 ops/s
Iteration  20: 651764.439 ops/s
Iteration  21: 618966.217 ops/s
Iteration  22: 647978.157 ops/s
Iteration  23: 619545.078 ops/s
Iteration  24: 642775.222 ops/s
Iteration  25: 618775.680 ops/s
Iteration  26: 647674.101 ops/s
Iteration  27: 662093.789 ops/s
Iteration  28: 605045.156 ops/s
Iteration  29: 661447.457 ops/s
Iteration  30: 621583.475 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_mainErrors":
  643877.716 ±(99.9%) 12143.593 ops/s [Average]
  (min, avg, max) = (605045.156, 643877.716, 678288.719), stdev = 18175.960
  CI (99.9%): [631734.123, 656021.310] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
CompletableTakeUntilTest._Benchmark.benchmark_mainErrors  thrpt   30  643877.716 ± 12143.593  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferTimedExactBoundedError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferTimedExactBoundedError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.836 ops/s
# Warmup Iteration   2: 26868.798 ops/s
# Warmup Iteration   3: 71345.881 ops/s
# Warmup Iteration   4: 60080.229 ops/s
# Warmup Iteration   5: 105325.397 ops/s
# Warmup Iteration   6: 90466.459 ops/s
# Warmup Iteration   7: 138027.527 ops/s
# Warmup Iteration   8: 101896.662 ops/s
# Warmup Iteration   9: 309747.671 ops/s
# Warmup Iteration  10: 308542.836 ops/s
# Warmup Iteration  11: 312793.786 ops/s
# Warmup Iteration  12: 318868.246 ops/s
# Warmup Iteration  13: 299015.662 ops/s
# Warmup Iteration  14: 316818.142 ops/s
# Warmup Iteration  15: 300669.318 ops/s
# Warmup Iteration  16: 318051.780 ops/s
# Warmup Iteration  17: 310097.756 ops/s
# Warmup Iteration  18: 319645.821 ops/s
# Warmup Iteration  19: 303346.912 ops/s
# Warmup Iteration  20: 316130.091 ops/s
# Warmup Iteration  21: 304139.816 ops/s
# Warmup Iteration  22: 304264.950 ops/s
# Warmup Iteration  23: 320938.558 ops/s
# Warmup Iteration  24: 299901.978 ops/s
# Warmup Iteration  25: 308208.978 ops/s
# Warmup Iteration  26: 318012.198 ops/s
# Warmup Iteration  27: 299520.164 ops/s
# Warmup Iteration  28: 306350.126 ops/s
# Warmup Iteration  29: 326368.351 ops/s
# Warmup Iteration  30: 297430.710 ops/s
Iteration   1: 320853.036 ops/s
Iteration   2: 303892.497 ops/s
Iteration   3: 314078.103 ops/s
Iteration   4: 309136.163 ops/s
Iteration   5: 299166.028 ops/s
Iteration   6: 300909.095 ops/s
Iteration   7: 242050.385 ops/s
Iteration   8: 300450.256 ops/s
Iteration   9: 310385.801 ops/s
Iteration  10: 299282.323 ops/s
Iteration  11: 317787.467 ops/s
Iteration  12: 317797.125 ops/s
Iteration  13: 300980.232 ops/s
Iteration  14: 311324.010 ops/s
Iteration  15: 312100.334 ops/s
Iteration  16: 311634.183 ops/s
Iteration  17: 297904.041 ops/s
Iteration  18: 316408.768 ops/s
Iteration  19: 301440.463 ops/s
Iteration  20: 315106.829 ops/s
Iteration  21: 301674.566 ops/s
Iteration  22: 301772.467 ops/s
Iteration  23: 311969.713 ops/s
Iteration  24: 299875.526 ops/s
Iteration  25: 315392.464 ops/s
Iteration  26: 322677.496 ops/s
Iteration  27: 305920.432 ops/s
Iteration  28: 311639.863 ops/s
Iteration  29: 307454.469 ops/s
Iteration  30: 312420.316 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferTimedExactBoundedError":
  306449.482 ±(99.9%) 9432.960 ops/s [Average]
  (min, avg, max) = (242050.385, 306449.482, 322677.496), stdev = 14118.812
  CI (99.9%): [297016.522, 315882.442] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferTimedExactBoundedError  thrpt   30  306449.482 ± 9432.960  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.632 ops/s
# Warmup Iteration   2: 37937.116 ops/s
# Warmup Iteration   3: 94065.954 ops/s
# Warmup Iteration   4: 115866.680 ops/s
# Warmup Iteration   5: 142429.423 ops/s
# Warmup Iteration   6: 110684.043 ops/s
# Warmup Iteration   7: 305757.688 ops/s
# Warmup Iteration   8: 302314.513 ops/s
# Warmup Iteration   9: 279631.042 ops/s
# Warmup Iteration  10: 283315.536 ops/s
# Warmup Iteration  11: 270230.804 ops/s
# Warmup Iteration  12: 298449.516 ops/s
# Warmup Iteration  13: 301911.032 ops/s
# Warmup Iteration  14: 299309.009 ops/s
# Warmup Iteration  15: 285186.151 ops/s
# Warmup Iteration  16: 291537.284 ops/s
# Warmup Iteration  17: 311329.125 ops/s
# Warmup Iteration  18: 292531.138 ops/s
# Warmup Iteration  19: 300064.989 ops/s
# Warmup Iteration  20: 303131.621 ops/s
# Warmup Iteration  21: 290804.332 ops/s
# Warmup Iteration  22: 304558.959 ops/s
# Warmup Iteration  23: 299646.155 ops/s
# Warmup Iteration  24: 305551.122 ops/s
# Warmup Iteration  25: 306216.561 ops/s
# Warmup Iteration  26: 296957.296 ops/s
# Warmup Iteration  27: 300010.412 ops/s
# Warmup Iteration  28: 298359.352 ops/s
# Warmup Iteration  29: 304554.279 ops/s
# Warmup Iteration  30: 291877.585 ops/s
Iteration   1: 306882.209 ops/s
Iteration   2: 287549.180 ops/s
Iteration   3: 294815.009 ops/s
Iteration   4: 302666.320 ops/s
Iteration   5: 312055.201 ops/s
Iteration   6: 296532.672 ops/s
Iteration   7: 302571.323 ops/s
Iteration   8: 299483.059 ops/s
Iteration   9: 297142.191 ops/s
Iteration  10: 311759.963 ops/s
Iteration  11: 289977.323 ops/s
Iteration  12: 310173.916 ops/s
Iteration  13: 297874.514 ops/s
Iteration  14: 287912.796 ops/s
Iteration  15: 310816.132 ops/s
Iteration  16: 291853.594 ops/s
Iteration  17: 304260.551 ops/s
Iteration  18: 293893.768 ops/s
Iteration  19: 300466.338 ops/s
Iteration  20: 307544.847 ops/s
Iteration  21: 292503.251 ops/s
Iteration  22: 306228.734 ops/s
Iteration  23: 312926.890 ops/s
Iteration  24: 292391.646 ops/s
Iteration  25: 305634.423 ops/s
Iteration  26: 299193.067 ops/s
Iteration  27: 303404.071 ops/s
Iteration  28: 295494.533 ops/s
Iteration  29: 295629.136 ops/s
Iteration  30: 310942.948 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_doubleOnSubscribe":
  300685.987 ±(99.9%) 5125.267 ops/s [Average]
  (min, avg, max) = (287549.180, 300685.987, 312926.890), stdev = 7671.259
  CI (99.9%): [295560.720, 305811.254] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableDebounceTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  300685.987 ± 5125.267  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.887 ops/s
# Warmup Iteration   2: 37605.279 ops/s
# Warmup Iteration   3: 78468.400 ops/s
# Warmup Iteration   4: 113995.631 ops/s
# Warmup Iteration   5: 142214.046 ops/s
# Warmup Iteration   6: 137784.383 ops/s
# Warmup Iteration   7: 296682.743 ops/s
# Warmup Iteration   8: 296176.342 ops/s
# Warmup Iteration   9: 291418.779 ops/s
# Warmup Iteration  10: 276656.155 ops/s
# Warmup Iteration  11: 283336.779 ops/s
# Warmup Iteration  12: 273160.179 ops/s
# Warmup Iteration  13: 296640.941 ops/s
# Warmup Iteration  14: 310393.361 ops/s
# Warmup Iteration  15: 298101.174 ops/s
# Warmup Iteration  16: 302557.060 ops/s
# Warmup Iteration  17: 293705.863 ops/s
# Warmup Iteration  18: 306080.226 ops/s
# Warmup Iteration  19: 298090.218 ops/s
# Warmup Iteration  20: 308841.689 ops/s
# Warmup Iteration  21: 305278.472 ops/s
# Warmup Iteration  22: 300197.025 ops/s
# Warmup Iteration  23: 309230.450 ops/s
# Warmup Iteration  24: 289299.527 ops/s
# Warmup Iteration  25: 313148.995 ops/s
# Warmup Iteration  26: 308845.731 ops/s
# Warmup Iteration  27: 294614.608 ops/s
# Warmup Iteration  28: 310457.700 ops/s
# Warmup Iteration  29: 295696.309 ops/s
# Warmup Iteration  30: 305501.288 ops/s
Iteration   1: 243053.994 ops/s
Iteration   2: 303290.646 ops/s
Iteration   3: 303490.274 ops/s
Iteration   4: 294600.891 ops/s
Iteration   5: 315162.492 ops/s
Iteration   6: 301414.693 ops/s
Iteration   7: 303306.838 ops/s
Iteration   8: 297448.911 ops/s
Iteration   9: 309866.846 ops/s
Iteration  10: 304539.590 ops/s
Iteration  11: 295751.177 ops/s
Iteration  12: 311585.207 ops/s
Iteration  13: 296418.417 ops/s
Iteration  14: 307795.254 ops/s
Iteration  15: 302645.570 ops/s
Iteration  16: 299553.009 ops/s
Iteration  17: 294152.135 ops/s
Iteration  18: 314473.147 ops/s
Iteration  19: 297531.387 ops/s
Iteration  20: 297931.129 ops/s
Iteration  21: 304765.130 ops/s
Iteration  22: 306580.857 ops/s
Iteration  23: 294908.662 ops/s
Iteration  24: 310902.045 ops/s
Iteration  25: 298039.687 ops/s
Iteration  26: 309194.433 ops/s
Iteration  27: 297871.225 ops/s
Iteration  28: 306912.493 ops/s
Iteration  29: 311298.521 ops/s
Iteration  30: 299889.009 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactDoubleOnSubscribe":
  301145.789 ±(99.9%) 8404.637 ops/s [Average]
  (min, avg, max) = (243053.994, 301145.789, 315162.492), stdev = 12579.665
  CI (99.9%): [292741.152, 309550.426] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferExactDoubleOnSubscribe  thrpt   30  301145.789 ± 8404.637  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_basic$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_basic

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71365.580 ops/s
# Warmup Iteration   2: 204338.803 ops/s
# Warmup Iteration   3: 230951.929 ops/s
# Warmup Iteration   4: 247570.086 ops/s
# Warmup Iteration   5: 261933.740 ops/s
# Warmup Iteration   6: 259133.705 ops/s
# Warmup Iteration   7: 247929.791 ops/s
# Warmup Iteration   8: 256682.329 ops/s
# Warmup Iteration   9: 244179.051 ops/s
# Warmup Iteration  10: 245256.137 ops/s
# Warmup Iteration  11: 259781.207 ops/s
# Warmup Iteration  12: 253378.917 ops/s
# Warmup Iteration  13: 252852.252 ops/s
# Warmup Iteration  14: 249251.828 ops/s
# Warmup Iteration  15: 254834.267 ops/s
# Warmup Iteration  16: 265776.384 ops/s
# Warmup Iteration  17: 268362.739 ops/s
# Warmup Iteration  18: 259262.969 ops/s
# Warmup Iteration  19: 275054.165 ops/s
# Warmup Iteration  20: 268872.868 ops/s
# Warmup Iteration  21: 261001.814 ops/s
# Warmup Iteration  22: 272169.094 ops/s
# Warmup Iteration  23: 256014.270 ops/s
# Warmup Iteration  24: 257951.556 ops/s
# Warmup Iteration  25: 272838.336 ops/s
# Warmup Iteration  26: 250081.715 ops/s
# Warmup Iteration  27: 263507.926 ops/s
# Warmup Iteration  28: 266221.701 ops/s
# Warmup Iteration  29: 256003.258 ops/s
# Warmup Iteration  30: 267509.485 ops/s
Iteration   1: 255351.089 ops/s
Iteration   2: 260905.599 ops/s
Iteration   3: 267529.252 ops/s
Iteration   4: 261432.223 ops/s
Iteration   5: 271813.483 ops/s
Iteration   6: 270473.777 ops/s
Iteration   7: 259325.620 ops/s
Iteration   8: 275160.458 ops/s
Iteration   9: 257875.477 ops/s
Iteration  10: 270518.094 ops/s
Iteration  11: 269625.231 ops/s
Iteration  12: 256444.201 ops/s
Iteration  13: 270180.385 ops/s
Iteration  14: 263770.664 ops/s
Iteration  15: 261682.673 ops/s
Iteration  16: 261093.027 ops/s
Iteration  17: 263999.794 ops/s
Iteration  18: 265328.068 ops/s
Iteration  19: 266420.896 ops/s
Iteration  20: 252805.300 ops/s
Iteration  21: 266227.242 ops/s
Iteration  22: 265754.251 ops/s
Iteration  23: 274411.955 ops/s
Iteration  24: 264706.743 ops/s
Iteration  25: 258011.796 ops/s
Iteration  26: 274987.256 ops/s
Iteration  27: 253906.301 ops/s
Iteration  28: 267076.054 ops/s
Iteration  29: 261596.774 ops/s
Iteration  30: 253641.245 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_basic":
  264068.498 ±(99.9%) 4305.530 ops/s [Average]
  (min, avg, max) = (252805.300, 264068.498, 275160.458), stdev = 6444.315
  CI (99.9%): [259762.967, 268374.028] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
CompletableCreateTest._Benchmark.benchmark_basic  thrpt   30  264068.498 ± 4305.530  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_supplierAndDisposerCrashNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_supplierAndDisposerCrashNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40491.312 ops/s
# Warmup Iteration   2: 132392.647 ops/s
# Warmup Iteration   3: 155527.426 ops/s
# Warmup Iteration   4: 172681.429 ops/s
# Warmup Iteration   5: 152577.129 ops/s
# Warmup Iteration   6: 175644.428 ops/s
# Warmup Iteration   7: 170666.736 ops/s
# Warmup Iteration   8: 178408.164 ops/s
# Warmup Iteration   9: 171500.507 ops/s
# Warmup Iteration  10: 178469.532 ops/s
# Warmup Iteration  11: 171067.147 ops/s
# Warmup Iteration  12: 173632.948 ops/s
# Warmup Iteration  13: 177443.767 ops/s
# Warmup Iteration  14: 169608.304 ops/s
# Warmup Iteration  15: 182342.642 ops/s
# Warmup Iteration  16: 182181.555 ops/s
# Warmup Iteration  17: 189232.434 ops/s
# Warmup Iteration  18: 178297.709 ops/s
# Warmup Iteration  19: 185838.455 ops/s
# Warmup Iteration  20: 179441.410 ops/s
# Warmup Iteration  21: 185263.833 ops/s
# Warmup Iteration  22: 180022.850 ops/s
# Warmup Iteration  23: 187375.867 ops/s
# Warmup Iteration  24: 181295.738 ops/s
# Warmup Iteration  25: 176347.589 ops/s
# Warmup Iteration  26: 150973.278 ops/s
# Warmup Iteration  27: 181558.081 ops/s
# Warmup Iteration  28: 180078.514 ops/s
# Warmup Iteration  29: 184708.328 ops/s
# Warmup Iteration  30: 185717.366 ops/s
Iteration   1: 177517.105 ops/s
Iteration   2: 183848.947 ops/s
Iteration   3: 184135.074 ops/s
Iteration   4: 179865.931 ops/s
Iteration   5: 190341.358 ops/s
Iteration   6: 178200.331 ops/s
Iteration   7: 186169.604 ops/s
Iteration   8: 177561.342 ops/s
Iteration   9: 183381.336 ops/s
Iteration  10: 179999.942 ops/s
Iteration  11: 185826.126 ops/s
Iteration  12: 179531.798 ops/s
Iteration  13: 189245.644 ops/s
Iteration  14: 177585.437 ops/s
Iteration  15: 182734.900 ops/s
Iteration  16: 187855.957 ops/s
Iteration  17: 179400.111 ops/s
Iteration  18: 185848.926 ops/s
Iteration  19: 178312.635 ops/s
Iteration  20: 188371.213 ops/s
Iteration  21: 181209.080 ops/s
Iteration  22: 186373.890 ops/s
Iteration  23: 177979.776 ops/s
Iteration  24: 182457.515 ops/s
Iteration  25: 188257.935 ops/s
Iteration  26: 176942.808 ops/s
Iteration  27: 186506.096 ops/s
Iteration  28: 178133.584 ops/s
Iteration  29: 181909.153 ops/s
Iteration  30: 184466.569 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_supplierAndDisposerCrashNonEager":
  182665.671 ±(99.9%) 2751.543 ops/s [Average]
  (min, avg, max) = (176942.808, 182665.671, 190341.358), stdev = 4118.381
  CI (99.9%): [179914.127, 185417.214] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
CompletableUsingTest._Benchmark.benchmark_supplierAndDisposerCrashNonEager  thrpt   30  182665.671 ± 2751.543  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_completableToMaybeError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_completableToMaybeError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 239696.443 ops/s
# Warmup Iteration   2: 579829.326 ops/s
# Warmup Iteration   3: 669494.173 ops/s
# Warmup Iteration   4: 666393.592 ops/s
# Warmup Iteration   5: 587382.772 ops/s
# Warmup Iteration   6: 714986.985 ops/s
# Warmup Iteration   7: 683468.675 ops/s
# Warmup Iteration   8: 710136.138 ops/s
# Warmup Iteration   9: 695774.007 ops/s
# Warmup Iteration  10: 675166.520 ops/s
# Warmup Iteration  11: 686437.174 ops/s
# Warmup Iteration  12: 710429.576 ops/s
# Warmup Iteration  13: 700382.219 ops/s
# Warmup Iteration  14: 702371.495 ops/s
# Warmup Iteration  15: 735608.245 ops/s
# Warmup Iteration  16: 710320.610 ops/s
# Warmup Iteration  17: 723038.467 ops/s
# Warmup Iteration  18: 753738.918 ops/s
# Warmup Iteration  19: 710522.492 ops/s
# Warmup Iteration  20: 749246.237 ops/s
# Warmup Iteration  21: 766360.045 ops/s
# Warmup Iteration  22: 723405.734 ops/s
# Warmup Iteration  23: 744760.885 ops/s
# Warmup Iteration  24: 732936.725 ops/s
# Warmup Iteration  25: 726094.379 ops/s
# Warmup Iteration  26: 738671.274 ops/s
# Warmup Iteration  27: 717873.951 ops/s
# Warmup Iteration  28: 771585.055 ops/s
# Warmup Iteration  29: 734853.135 ops/s
# Warmup Iteration  30: 746764.142 ops/s
Iteration   1: 743151.063 ops/s
Iteration   2: 732111.956 ops/s
Iteration   3: 726922.206 ops/s
Iteration   4: 732718.053 ops/s
Iteration   5: 716159.521 ops/s
Iteration   6: 750601.333 ops/s
Iteration   7: 696752.303 ops/s
Iteration   8: 756355.067 ops/s
Iteration   9: 727589.575 ops/s
Iteration  10: 735958.176 ops/s
Iteration  11: 752636.545 ops/s
Iteration  12: 712984.122 ops/s
Iteration  13: 757377.787 ops/s
Iteration  14: 756259.697 ops/s
Iteration  15: 726021.359 ops/s
Iteration  16: 724577.514 ops/s
Iteration  17: 743344.223 ops/s
Iteration  18: 708098.355 ops/s
Iteration  19: 744338.426 ops/s
Iteration  20: 707211.873 ops/s
Iteration  21: 739158.286 ops/s
Iteration  22: 722022.717 ops/s
Iteration  23: 743921.285 ops/s
Iteration  24: 769265.138 ops/s
Iteration  25: 722964.063 ops/s
Iteration  26: 740213.393 ops/s
Iteration  27: 710251.078 ops/s
Iteration  28: 753875.128 ops/s
Iteration  29: 769341.539 ops/s
Iteration  30: 725912.611 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_completableToMaybeError":
  734936.480 ±(99.9%) 12499.751 ops/s [Average]
  (min, avg, max) = (696752.303, 734936.480, 769341.539), stdev = 18709.040
  CI (99.9%): [722436.729, 747436.231] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_completableToMaybeError  thrpt   30  734936.480 ± 12499.751  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 265487.869 ops/s
# Warmup Iteration   2: 567367.824 ops/s
# Warmup Iteration   3: 707414.661 ops/s
# Warmup Iteration   4: 687595.870 ops/s
# Warmup Iteration   5: 712737.156 ops/s
# Warmup Iteration   6: 689813.659 ops/s
# Warmup Iteration   7: 687155.646 ops/s
# Warmup Iteration   8: 727459.921 ops/s
# Warmup Iteration   9: 683755.576 ops/s
# Warmup Iteration  10: 690825.025 ops/s
# Warmup Iteration  11: 715431.575 ops/s
# Warmup Iteration  12: 687649.554 ops/s
# Warmup Iteration  13: 720516.681 ops/s
# Warmup Iteration  14: 683920.288 ops/s
# Warmup Iteration  15: 707370.697 ops/s
# Warmup Iteration  16: 700846.602 ops/s
# Warmup Iteration  17: 751684.854 ops/s
# Warmup Iteration  18: 697654.131 ops/s
# Warmup Iteration  19: 737934.567 ops/s
# Warmup Iteration  20: 641644.948 ops/s
# Warmup Iteration  21: 755107.536 ops/s
# Warmup Iteration  22: 730360.210 ops/s
# Warmup Iteration  23: 769965.147 ops/s
# Warmup Iteration  24: 740188.037 ops/s
# Warmup Iteration  25: 728379.996 ops/s
# Warmup Iteration  26: 755797.930 ops/s
# Warmup Iteration  27: 717671.659 ops/s
# Warmup Iteration  28: 739431.168 ops/s
# Warmup Iteration  29: 740442.946 ops/s
# Warmup Iteration  30: 740809.515 ops/s
Iteration   1: 761620.039 ops/s
Iteration   2: 731645.497 ops/s
Iteration   3: 743341.591 ops/s
Iteration   4: 758281.350 ops/s
Iteration   5: 751357.641 ops/s
Iteration   6: 755798.993 ops/s
Iteration   7: 749015.367 ops/s
Iteration   8: 758024.452 ops/s
Iteration   9: 759667.875 ops/s
Iteration  10: 739809.513 ops/s
Iteration  11: 733255.404 ops/s
Iteration  12: 732382.362 ops/s
Iteration  13: 779935.229 ops/s
Iteration  14: 723288.574 ops/s
Iteration  15: 694433.976 ops/s
Iteration  16: 762830.079 ops/s
Iteration  17: 674643.331 ops/s
Iteration  18: 765060.881 ops/s
Iteration  19: 744639.927 ops/s
Iteration  20: 769577.389 ops/s
Iteration  21: 746260.416 ops/s
Iteration  22: 743238.698 ops/s
Iteration  23: 779121.247 ops/s
Iteration  24: 722602.407 ops/s
Iteration  25: 794908.570 ops/s
Iteration  26: 741987.535 ops/s
Iteration  27: 759278.158 ops/s
Iteration  28: 743144.255 ops/s
Iteration  29: 753690.967 ops/s
Iteration  30: 753015.131 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_innerError":
  747528.562 ±(99.9%) 15871.131 ops/s [Average]
  (min, avg, max) = (674643.331, 747528.562, 794908.570), stdev = 23755.163
  CI (99.9%): [731657.431, 763399.693] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_innerError  thrpt   30  747528.562 ± 15871.131  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_emptyIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_emptyIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1102469.106 ops/s
# Warmup Iteration   2: 5841665.144 ops/s
# Warmup Iteration   3: 8282536.490 ops/s
# Warmup Iteration   4: 7979645.839 ops/s
# Warmup Iteration   5: 8447901.072 ops/s
# Warmup Iteration   6: 8137243.962 ops/s
# Warmup Iteration   7: 8352120.629 ops/s
# Warmup Iteration   8: 8338670.798 ops/s
# Warmup Iteration   9: 8158787.368 ops/s
# Warmup Iteration  10: 8513886.789 ops/s
# Warmup Iteration  11: 8089120.990 ops/s
# Warmup Iteration  12: 8418702.215 ops/s
# Warmup Iteration  13: 8628067.611 ops/s
# Warmup Iteration  14: 8536707.667 ops/s
# Warmup Iteration  15: 8157183.111 ops/s
# Warmup Iteration  16: 8345580.359 ops/s
# Warmup Iteration  17: 8309652.600 ops/s
# Warmup Iteration  18: 8338535.100 ops/s
# Warmup Iteration  19: 8463461.510 ops/s
# Warmup Iteration  20: 8213580.297 ops/s
# Warmup Iteration  21: 8401886.157 ops/s
# Warmup Iteration  22: 8144502.487 ops/s
# Warmup Iteration  23: 8332935.219 ops/s
# Warmup Iteration  24: 8364197.335 ops/s
# Warmup Iteration  25: 8568032.704 ops/s
# Warmup Iteration  26: 8458485.477 ops/s
# Warmup Iteration  27: 8508474.538 ops/s
# Warmup Iteration  28: 8172675.166 ops/s
# Warmup Iteration  29: 8328007.106 ops/s
# Warmup Iteration  30: 8799960.061 ops/s
Iteration   1: 8072844.031 ops/s
Iteration   2: 8176641.215 ops/s
Iteration   3: 8164075.953 ops/s
Iteration   4: 8338276.450 ops/s
Iteration   5: 8402223.647 ops/s
Iteration   6: 8325521.884 ops/s
Iteration   7: 8491607.809 ops/s
Iteration   8: 8595457.411 ops/s
Iteration   9: 8081182.150 ops/s
Iteration  10: 8460720.212 ops/s
Iteration  11: 8261565.513 ops/s
Iteration  12: 8499636.971 ops/s
Iteration  13: 8359364.749 ops/s
Iteration  14: 8146788.187 ops/s
Iteration  15: 8361103.252 ops/s
Iteration  16: 7995654.833 ops/s
Iteration  17: 8322318.897 ops/s
Iteration  18: 8343322.016 ops/s
Iteration  19: 8573744.292 ops/s
Iteration  20: 8451740.474 ops/s
Iteration  21: 8228279.622 ops/s
Iteration  22: 8245264.656 ops/s
Iteration  23: 8707218.198 ops/s
Iteration  24: 8337907.981 ops/s
Iteration  25: 8536059.809 ops/s
Iteration  26: 8394224.175 ops/s
Iteration  27: 8285817.998 ops/s
Iteration  28: 8572308.610 ops/s
Iteration  29: 8317771.299 ops/s
Iteration  30: 8298662.291 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_emptyIterable":
  8344910.153 ±(99.9%) 111987.491 ops/s [Average]
  (min, avg, max) = (7995654.833, 8344910.153, 8707218.198), stdev = 167617.617
  CI (99.9%): [8232922.662, 8456897.644] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_emptyIterable  thrpt   30  8344910.153 ± 111987.491  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnErrorDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnErrorDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 142706.050 ops/s
# Warmup Iteration   2: 559123.419 ops/s
# Warmup Iteration   3: 622714.680 ops/s
# Warmup Iteration   4: 619150.428 ops/s
# Warmup Iteration   5: 657182.443 ops/s
# Warmup Iteration   6: 607018.565 ops/s
# Warmup Iteration   7: 624931.428 ops/s
# Warmup Iteration   8: 660277.251 ops/s
# Warmup Iteration   9: 650343.639 ops/s
# Warmup Iteration  10: 647702.967 ops/s
# Warmup Iteration  11: 667326.693 ops/s
# Warmup Iteration  12: 609611.381 ops/s
# Warmup Iteration  13: 593783.823 ops/s
# Warmup Iteration  14: 652942.713 ops/s
# Warmup Iteration  15: 480629.824 ops/s
# Warmup Iteration  16: 655063.564 ops/s
# Warmup Iteration  17: 630136.041 ops/s
# Warmup Iteration  18: 679414.241 ops/s
# Warmup Iteration  19: 671924.403 ops/s
# Warmup Iteration  20: 684947.595 ops/s
# Warmup Iteration  21: 688387.349 ops/s
# Warmup Iteration  22: 668050.540 ops/s
# Warmup Iteration  23: 690747.957 ops/s
# Warmup Iteration  24: 689125.927 ops/s
# Warmup Iteration  25: 671174.714 ops/s
# Warmup Iteration  26: 693907.731 ops/s
# Warmup Iteration  27: 703274.603 ops/s
# Warmup Iteration  28: 677104.717 ops/s
# Warmup Iteration  29: 673519.089 ops/s
# Warmup Iteration  30: 664117.998 ops/s
Iteration   1: 694179.437 ops/s
Iteration   2: 669926.780 ops/s
Iteration   3: 688310.623 ops/s
Iteration   4: 677622.952 ops/s
Iteration   5: 676240.992 ops/s
Iteration   6: 683542.466 ops/s
Iteration   7: 679588.013 ops/s
Iteration   8: 691256.666 ops/s
Iteration   9: 664862.477 ops/s
Iteration  10: 697263.389 ops/s
Iteration  11: 665925.392 ops/s
Iteration  12: 685125.142 ops/s
Iteration  13: 674683.979 ops/s
Iteration  14: 686448.476 ops/s
Iteration  15: 684441.771 ops/s
Iteration  16: 685377.454 ops/s
Iteration  17: 669725.843 ops/s
Iteration  18: 701290.145 ops/s
Iteration  19: 665466.591 ops/s
Iteration  20: 717237.087 ops/s
Iteration  21: 691189.614 ops/s
Iteration  22: 672476.761 ops/s
Iteration  23: 696095.169 ops/s
Iteration  24: 656348.299 ops/s
Iteration  25: 689114.008 ops/s
Iteration  26: 693717.339 ops/s
Iteration  27: 663870.453 ops/s
Iteration  28: 654556.279 ops/s
Iteration  29: 698406.627 ops/s
Iteration  30: 672120.523 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnErrorDelayError":
  681547.025 ±(99.9%) 9662.465 ops/s [Average]
  (min, avg, max) = (654556.279, 681547.025, 717237.087), stdev = 14462.323
  CI (99.9%): [671884.560, 691209.490] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnErrorDelayError  thrpt   30  681547.025 ± 9662.465  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 150506.094 ops/s
# Warmup Iteration   2: 511463.784 ops/s
# Warmup Iteration   3: 633414.202 ops/s
# Warmup Iteration   4: 641277.290 ops/s
# Warmup Iteration   5: 613133.262 ops/s
# Warmup Iteration   6: 640677.544 ops/s
# Warmup Iteration   7: 625027.460 ops/s
# Warmup Iteration   8: 541247.819 ops/s
# Warmup Iteration   9: 620746.563 ops/s
# Warmup Iteration  10: 633413.381 ops/s
# Warmup Iteration  11: 628731.717 ops/s
# Warmup Iteration  12: 631766.889 ops/s
# Warmup Iteration  13: 647971.274 ops/s
# Warmup Iteration  14: 645670.231 ops/s
# Warmup Iteration  15: 619929.111 ops/s
# Warmup Iteration  16: 626064.475 ops/s
# Warmup Iteration  17: 662613.746 ops/s
# Warmup Iteration  18: 667642.582 ops/s
# Warmup Iteration  19: 677780.424 ops/s
# Warmup Iteration  20: 608296.237 ops/s
# Warmup Iteration  21: 668966.011 ops/s
# Warmup Iteration  22: 653590.093 ops/s
# Warmup Iteration  23: 673811.558 ops/s
# Warmup Iteration  24: 664723.362 ops/s
# Warmup Iteration  25: 674745.505 ops/s
# Warmup Iteration  26: 652967.498 ops/s
# Warmup Iteration  27: 671350.411 ops/s
# Warmup Iteration  28: 668779.637 ops/s
# Warmup Iteration  29: 648680.600 ops/s
# Warmup Iteration  30: 691343.103 ops/s
Iteration   1: 660757.234 ops/s
Iteration   2: 658840.958 ops/s
Iteration   3: 661681.176 ops/s
Iteration   4: 652846.058 ops/s
Iteration   5: 666054.763 ops/s
Iteration   6: 664882.727 ops/s
Iteration   7: 673477.012 ops/s
Iteration   8: 653806.254 ops/s
Iteration   9: 655441.565 ops/s
Iteration  10: 657885.747 ops/s
Iteration  11: 656190.435 ops/s
Iteration  12: 678154.384 ops/s
Iteration  13: 674088.227 ops/s
Iteration  14: 649978.743 ops/s
Iteration  15: 661860.839 ops/s
Iteration  16: 653542.963 ops/s
Iteration  17: 672773.441 ops/s
Iteration  18: 648701.509 ops/s
Iteration  19: 669812.633 ops/s
Iteration  20: 655986.542 ops/s
Iteration  21: 645460.248 ops/s
Iteration  22: 656752.360 ops/s
Iteration  23: 651637.161 ops/s
Iteration  24: 687279.542 ops/s
Iteration  25: 650163.183 ops/s
Iteration  26: 660189.401 ops/s
Iteration  27: 671130.152 ops/s
Iteration  28: 641341.984 ops/s
Iteration  29: 657973.087 ops/s
Iteration  30: 653140.322 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_mainError":
  660061.022 ±(99.9%) 6917.632 ops/s [Average]
  (min, avg, max) = (641341.984, 660061.022, 687279.542), stdev = 10353.986
  CI (99.9%): [653143.390, 666978.654] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_mainError  thrpt   30  660061.022 ± 6917.632  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 723916.434 ops/s
# Warmup Iteration   2: 4616200.763 ops/s
# Warmup Iteration   3: 7026939.094 ops/s
# Warmup Iteration   4: 7265633.314 ops/s
# Warmup Iteration   5: 7512604.893 ops/s
# Warmup Iteration   6: 7313129.539 ops/s
# Warmup Iteration   7: 7706299.514 ops/s
# Warmup Iteration   8: 7661019.754 ops/s
# Warmup Iteration   9: 7227164.890 ops/s
# Warmup Iteration  10: 5889992.485 ops/s
# Warmup Iteration  11: 7352617.904 ops/s
# Warmup Iteration  12: 7714403.670 ops/s
# Warmup Iteration  13: 7321490.865 ops/s
# Warmup Iteration  14: 7843509.241 ops/s
# Warmup Iteration  15: 7403122.059 ops/s
# Warmup Iteration  16: 7796184.142 ops/s
# Warmup Iteration  17: 7532831.838 ops/s
# Warmup Iteration  18: 7774613.896 ops/s
# Warmup Iteration  19: 7455571.236 ops/s
# Warmup Iteration  20: 7665095.533 ops/s
# Warmup Iteration  21: 7351389.500 ops/s
# Warmup Iteration  22: 7653612.892 ops/s
# Warmup Iteration  23: 7464232.299 ops/s
# Warmup Iteration  24: 7140319.173 ops/s
# Warmup Iteration  25: 7692445.581 ops/s
# Warmup Iteration  26: 7392043.392 ops/s
# Warmup Iteration  27: 7539181.510 ops/s
# Warmup Iteration  28: 7521248.543 ops/s
# Warmup Iteration  29: 7416267.744 ops/s
# Warmup Iteration  30: 7810959.552 ops/s
Iteration   1: 7415634.278 ops/s
Iteration   2: 7468185.352 ops/s
Iteration   3: 7723206.451 ops/s
Iteration   4: 7480510.960 ops/s
Iteration   5: 7421744.186 ops/s
Iteration   6: 7408836.563 ops/s
Iteration   7: 7429248.442 ops/s
Iteration   8: 7773395.732 ops/s
Iteration   9: 7436047.812 ops/s
Iteration  10: 7500399.733 ops/s
Iteration  11: 7630476.669 ops/s
Iteration  12: 7440763.967 ops/s
Iteration  13: 7602664.892 ops/s
Iteration  14: 7317535.921 ops/s
Iteration  15: 7378922.155 ops/s
Iteration  16: 7796428.666 ops/s
Iteration  17: 7289783.478 ops/s
Iteration  18: 7668999.532 ops/s
Iteration  19: 7595549.209 ops/s
Iteration  20: 7314757.152 ops/s
Iteration  21: 7719692.822 ops/s
Iteration  22: 7255912.421 ops/s
Iteration  23: 7865463.295 ops/s
Iteration  24: 7385354.086 ops/s
Iteration  25: 7768773.476 ops/s
Iteration  26: 7278661.532 ops/s
Iteration  27: 7646847.155 ops/s
Iteration  28: 7820476.176 ops/s
Iteration  29: 7380223.160 ops/s
Iteration  30: 7605746.002 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successEmpty":
  7527341.376 ±(99.9%) 120468.184 ops/s [Average]
  (min, avg, max) = (7255912.421, 7527341.376, 7865463.295), stdev = 180311.120
  CI (99.9%): [7406873.192, 7647809.560] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successEmpty  thrpt   30  7527341.376 ± 120468.184  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 128630.838 ops/s
# Warmup Iteration   2: 572752.547 ops/s
# Warmup Iteration   3: 634060.898 ops/s
# Warmup Iteration   4: 619615.330 ops/s
# Warmup Iteration   5: 648434.665 ops/s
# Warmup Iteration   6: 593831.302 ops/s
# Warmup Iteration   7: 637515.486 ops/s
# Warmup Iteration   8: 658232.627 ops/s
# Warmup Iteration   9: 625114.827 ops/s
# Warmup Iteration  10: 666974.227 ops/s
# Warmup Iteration  11: 630593.351 ops/s
# Warmup Iteration  12: 622993.302 ops/s
# Warmup Iteration  13: 626557.177 ops/s
# Warmup Iteration  14: 663792.863 ops/s
# Warmup Iteration  15: 615170.011 ops/s
# Warmup Iteration  16: 650375.199 ops/s
# Warmup Iteration  17: 698537.709 ops/s
# Warmup Iteration  18: 652428.916 ops/s
# Warmup Iteration  19: 686086.935 ops/s
# Warmup Iteration  20: 672462.741 ops/s
# Warmup Iteration  21: 676996.446 ops/s
# Warmup Iteration  22: 681178.703 ops/s
# Warmup Iteration  23: 657124.661 ops/s
# Warmup Iteration  24: 685857.380 ops/s
# Warmup Iteration  25: 659935.476 ops/s
# Warmup Iteration  26: 684550.172 ops/s
# Warmup Iteration  27: 676636.847 ops/s
# Warmup Iteration  28: 647892.362 ops/s
# Warmup Iteration  29: 687743.444 ops/s
# Warmup Iteration  30: 697381.184 ops/s
Iteration   1: 690015.860 ops/s
Iteration   2: 678376.766 ops/s
Iteration   3: 648648.259 ops/s
Iteration   4: 689214.948 ops/s
Iteration   5: 651923.699 ops/s
Iteration   6: 686952.590 ops/s
Iteration   7: 664395.685 ops/s
Iteration   8: 647165.043 ops/s
Iteration   9: 680816.516 ops/s
Iteration  10: 662642.535 ops/s
Iteration  11: 690695.765 ops/s
Iteration  12: 666784.987 ops/s
Iteration  13: 694693.379 ops/s
Iteration  14: 671739.198 ops/s
Iteration  15: 664721.016 ops/s
Iteration  16: 653573.754 ops/s
Iteration  17: 689800.503 ops/s
Iteration  18: 664378.714 ops/s
Iteration  19: 682404.958 ops/s
Iteration  20: 662173.128 ops/s
Iteration  21: 686612.996 ops/s
Iteration  22: 688766.690 ops/s
Iteration  23: 676054.967 ops/s
Iteration  24: 685480.955 ops/s
Iteration  25: 667067.310 ops/s
Iteration  26: 676576.099 ops/s
Iteration  27: 685567.893 ops/s
Iteration  28: 664980.313 ops/s
Iteration  29: 690576.401 ops/s
Iteration  30: 658708.364 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnError":
  674050.310 ±(99.9%) 9533.367 ops/s [Average]
  (min, avg, max) = (647165.043, 674050.310, 694693.379), stdev = 14269.096
  CI (99.9%): [664516.943, 683583.677] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableConcatTest._Benchmark.benchmark_concatReportsDisposedOnError  thrpt   30  674050.310 ± 9533.367  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 227098.362 ops/s
# Warmup Iteration   2: 596159.433 ops/s
# Warmup Iteration   3: 652437.646 ops/s
# Warmup Iteration   4: 654910.138 ops/s
# Warmup Iteration   5: 480226.130 ops/s
# Warmup Iteration   6: 664134.699 ops/s
# Warmup Iteration   7: 692489.202 ops/s
# Warmup Iteration   8: 717270.673 ops/s
# Warmup Iteration   9: 672407.990 ops/s
# Warmup Iteration  10: 689540.528 ops/s
# Warmup Iteration  11: 689387.641 ops/s
# Warmup Iteration  12: 670175.856 ops/s
# Warmup Iteration  13: 719506.727 ops/s
# Warmup Iteration  14: 683298.415 ops/s
# Warmup Iteration  15: 691636.808 ops/s
# Warmup Iteration  16: 710240.330 ops/s
# Warmup Iteration  17: 773477.215 ops/s
# Warmup Iteration  18: 719443.482 ops/s
# Warmup Iteration  19: 760041.483 ops/s
# Warmup Iteration  20: 733722.567 ops/s
# Warmup Iteration  21: 767559.936 ops/s
# Warmup Iteration  22: 738168.599 ops/s
# Warmup Iteration  23: 724822.990 ops/s
# Warmup Iteration  24: 750476.880 ops/s
# Warmup Iteration  25: 736370.862 ops/s
# Warmup Iteration  26: 746678.801 ops/s
# Warmup Iteration  27: 743744.084 ops/s
# Warmup Iteration  28: 716308.321 ops/s
# Warmup Iteration  29: 752889.876 ops/s
# Warmup Iteration  30: 720872.003 ops/s
Iteration   1: 734212.279 ops/s
Iteration   2: 751068.642 ops/s
Iteration   3: 735153.600 ops/s
Iteration   4: 737505.254 ops/s
Iteration   5: 734593.575 ops/s
Iteration   6: 725643.431 ops/s
Iteration   7: 754622.984 ops/s
Iteration   8: 741991.266 ops/s
Iteration   9: 740587.783 ops/s
Iteration  10: 754353.136 ops/s
Iteration  11: 727838.825 ops/s
Iteration  12: 746081.664 ops/s
Iteration  13: 736566.003 ops/s
Iteration  14: 719400.137 ops/s
Iteration  15: 779582.958 ops/s
Iteration  16: 701249.541 ops/s
Iteration  17: 766738.986 ops/s
Iteration  18: 732840.635 ops/s
Iteration  19: 734472.227 ops/s
Iteration  20: 767991.474 ops/s
Iteration  21: 720373.222 ops/s
Iteration  22: 733987.398 ops/s
Iteration  23: 760109.328 ops/s
Iteration  24: 734197.358 ops/s
Iteration  25: 769568.852 ops/s
Iteration  26: 719290.211 ops/s
Iteration  27: 736857.553 ops/s
Iteration  28: 759970.475 ops/s
Iteration  29: 732788.143 ops/s
Iteration  30: 756757.772 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_error":
  741546.490 ±(99.9%) 11735.420 ops/s [Average]
  (min, avg, max) = (701249.541, 741546.490, 779582.958), stdev = 17565.026
  CI (99.9%): [729811.070, 753281.910] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
ObservableFromMaybeTest._Benchmark.benchmark_error  thrpt   30  741546.490 ± 11735.420  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_unsubscribesFromUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_unsubscribesFromUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 402540.758 ops/s
# Warmup Iteration   2: 1911168.476 ops/s
# Warmup Iteration   3: 2789423.821 ops/s
# Warmup Iteration   4: 2675580.015 ops/s
# Warmup Iteration   5: 2657900.686 ops/s
# Warmup Iteration   6: 2659998.143 ops/s
# Warmup Iteration   7: 2802553.330 ops/s
# Warmup Iteration   8: 2579244.511 ops/s
# Warmup Iteration   9: 2774501.455 ops/s
# Warmup Iteration  10: 2589829.377 ops/s
# Warmup Iteration  11: 2562387.521 ops/s
# Warmup Iteration  12: 2835632.632 ops/s
# Warmup Iteration  13: 2660538.422 ops/s
# Warmup Iteration  14: 2794592.486 ops/s
# Warmup Iteration  15: 2636483.781 ops/s
# Warmup Iteration  16: 2760946.328 ops/s
# Warmup Iteration  17: 2724427.565 ops/s
# Warmup Iteration  18: 2686084.505 ops/s
# Warmup Iteration  19: 2761947.490 ops/s
# Warmup Iteration  20: 2730944.032 ops/s
# Warmup Iteration  21: 2678461.921 ops/s
# Warmup Iteration  22: 2577805.323 ops/s
# Warmup Iteration  23: 2746689.988 ops/s
# Warmup Iteration  24: 2666915.009 ops/s
# Warmup Iteration  25: 2816647.356 ops/s
# Warmup Iteration  26: 2668030.323 ops/s
# Warmup Iteration  27: 2815052.469 ops/s
# Warmup Iteration  28: 2742671.463 ops/s
# Warmup Iteration  29: 2671665.753 ops/s
# Warmup Iteration  30: 2760635.933 ops/s
Iteration   1: 2828782.927 ops/s
Iteration   2: 2524308.156 ops/s
Iteration   3: 2811172.279 ops/s
Iteration   4: 2752309.707 ops/s
Iteration   5: 2746601.181 ops/s
Iteration   6: 2823005.534 ops/s
Iteration   7: 2688821.989 ops/s
Iteration   8: 2765350.577 ops/s
Iteration   9: 2738089.068 ops/s
Iteration  10: 2797703.355 ops/s
Iteration  11: 2806800.027 ops/s
Iteration  12: 2659609.033 ops/s
Iteration  13: 2879309.203 ops/s
Iteration  14: 2832331.447 ops/s
Iteration  15: 2752513.091 ops/s
Iteration  16: 2684013.216 ops/s
Iteration  17: 2769308.044 ops/s
Iteration  18: 2774161.414 ops/s
Iteration  19: 2819880.457 ops/s
Iteration  20: 2704979.993 ops/s
Iteration  21: 2845553.653 ops/s
Iteration  22: 2644764.574 ops/s
Iteration  23: 2863962.167 ops/s
Iteration  24: 2848191.274 ops/s
Iteration  25: 2611945.999 ops/s
Iteration  26: 2892325.862 ops/s
Iteration  27: 2678885.080 ops/s
Iteration  28: 2851752.022 ops/s
Iteration  29: 2683929.627 ops/s
Iteration  30: 2814888.432 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_unsubscribesFromUpstream":
  2763174.980 ±(99.9%) 58281.739 ops/s [Average]
  (min, avg, max) = (2524308.156, 2763174.980, 2892325.862), stdev = 87233.370
  CI (99.9%): [2704893.240, 2821456.719] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ObservableTakeLastOneTest._Benchmark.benchmark_unsubscribesFromUpstream  thrpt   30  2763174.980 ± 58281.739  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1146331.529 ops/s
# Warmup Iteration   2: 5093698.819 ops/s
# Warmup Iteration   3: 5422551.264 ops/s
# Warmup Iteration   4: 6218349.832 ops/s
# Warmup Iteration   5: 6679558.291 ops/s
# Warmup Iteration   6: 6711866.548 ops/s
# Warmup Iteration   7: 6606759.775 ops/s
# Warmup Iteration   8: 6489207.190 ops/s
# Warmup Iteration   9: 6812763.747 ops/s
# Warmup Iteration  10: 6183402.982 ops/s
# Warmup Iteration  11: 6626064.957 ops/s
# Warmup Iteration  12: 6619704.320 ops/s
# Warmup Iteration  13: 6372330.714 ops/s
# Warmup Iteration  14: 6539067.505 ops/s
# Warmup Iteration  15: 6382813.688 ops/s
# Warmup Iteration  16: 6458204.196 ops/s
# Warmup Iteration  17: 6445810.828 ops/s
# Warmup Iteration  18: 6618762.555 ops/s
# Warmup Iteration  19: 6416385.785 ops/s
# Warmup Iteration  20: 6466761.919 ops/s
# Warmup Iteration  21: 6516307.486 ops/s
# Warmup Iteration  22: 6393074.530 ops/s
# Warmup Iteration  23: 6789169.536 ops/s
# Warmup Iteration  24: 6507442.973 ops/s
# Warmup Iteration  25: 6352782.708 ops/s
# Warmup Iteration  26: 6535521.986 ops/s
# Warmup Iteration  27: 6543349.252 ops/s
# Warmup Iteration  28: 6540583.891 ops/s
# Warmup Iteration  29: 6314579.923 ops/s
# Warmup Iteration  30: 6368539.989 ops/s
Iteration   1: 6567395.544 ops/s
Iteration   2: 6337465.749 ops/s
Iteration   3: 6496756.790 ops/s
Iteration   4: 6506855.132 ops/s
Iteration   5: 6418557.954 ops/s
Iteration   6: 6516544.630 ops/s
Iteration   7: 6401571.263 ops/s
Iteration   8: 6504499.016 ops/s
Iteration   9: 6516621.347 ops/s
Iteration  10: 6516709.030 ops/s
Iteration  11: 6536479.193 ops/s
Iteration  12: 6770809.528 ops/s
Iteration  13: 6657320.966 ops/s
Iteration  14: 6515336.373 ops/s
Iteration  15: 6464051.924 ops/s
Iteration  16: 6465728.782 ops/s
Iteration  17: 6673580.681 ops/s
Iteration  18: 6632400.713 ops/s
Iteration  19: 6431525.042 ops/s
Iteration  20: 6464129.237 ops/s
Iteration  21: 6347618.057 ops/s
Iteration  22: 6422790.183 ops/s
Iteration  23: 6271873.509 ops/s
Iteration  24: 6520011.913 ops/s
Iteration  25: 6354233.266 ops/s
Iteration  26: 6799124.363 ops/s
Iteration  27: 6524642.252 ops/s
Iteration  28: 6651558.239 ops/s
Iteration  29: 6563996.807 ops/s
Iteration  30: 6549458.904 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_dispose":
  6513321.546 ±(99.9%) 80507.461 ops/s [Average]
  (min, avg, max) = (6271873.509, 6513321.546, 6799124.363), stdev = 120499.786
  CI (99.9%): [6432814.085, 6593829.007] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_dispose  thrpt   30  6513321.546 ± 80507.461  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_cancelComposes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_cancelComposes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 744929.869 ops/s
# Warmup Iteration   2: 3177155.880 ops/s
# Warmup Iteration   3: 4005641.109 ops/s
# Warmup Iteration   4: 4899049.994 ops/s
# Warmup Iteration   5: 4712872.452 ops/s
# Warmup Iteration   6: 4987420.351 ops/s
# Warmup Iteration   7: 4783351.794 ops/s
# Warmup Iteration   8: 4727441.262 ops/s
# Warmup Iteration   9: 4940036.656 ops/s
# Warmup Iteration  10: 4713217.612 ops/s
# Warmup Iteration  11: 4740314.708 ops/s
# Warmup Iteration  12: 4768650.486 ops/s
# Warmup Iteration  13: 4848256.793 ops/s
# Warmup Iteration  14: 4965704.737 ops/s
# Warmup Iteration  15: 4680578.465 ops/s
# Warmup Iteration  16: 4909636.132 ops/s
# Warmup Iteration  17: 4924519.086 ops/s
# Warmup Iteration  18: 4662765.407 ops/s
# Warmup Iteration  19: 4869783.948 ops/s
# Warmup Iteration  20: 4748356.945 ops/s
# Warmup Iteration  21: 4981751.049 ops/s
# Warmup Iteration  22: 4926527.893 ops/s
# Warmup Iteration  23: 4721297.562 ops/s
# Warmup Iteration  24: 4823163.110 ops/s
# Warmup Iteration  25: 4910973.234 ops/s
# Warmup Iteration  26: 4731048.820 ops/s
# Warmup Iteration  27: 4874450.534 ops/s
# Warmup Iteration  28: 4762169.718 ops/s
# Warmup Iteration  29: 4710162.215 ops/s
# Warmup Iteration  30: 4967066.756 ops/s
Iteration   1: 4771142.711 ops/s
Iteration   2: 4856876.576 ops/s
Iteration   3: 4758331.410 ops/s
Iteration   4: 4836459.557 ops/s
Iteration   5: 4849059.548 ops/s
Iteration   6: 4626466.342 ops/s
Iteration   7: 4701419.145 ops/s
Iteration   8: 4951143.176 ops/s
Iteration   9: 4631659.867 ops/s
Iteration  10: 5016900.015 ops/s
Iteration  11: 4636268.336 ops/s
Iteration  12: 4838421.409 ops/s
Iteration  13: 4871626.707 ops/s
Iteration  14: 4774355.255 ops/s
Iteration  15: 4868808.282 ops/s
Iteration  16: 4951312.261 ops/s
Iteration  17: 4785611.023 ops/s
Iteration  18: 4897220.481 ops/s
Iteration  19: 4751645.563 ops/s
Iteration  20: 4841098.361 ops/s
Iteration  21: 4923930.455 ops/s
Iteration  22: 4570950.666 ops/s
Iteration  23: 4928503.478 ops/s
Iteration  24: 4664385.699 ops/s
Iteration  25: 4819006.408 ops/s
Iteration  26: 3736023.807 ops/s
Iteration  27: 4939273.868 ops/s
Iteration  28: 4630277.239 ops/s
Iteration  29: 4975809.291 ops/s
Iteration  30: 4819505.195 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromMaybeTest._Benchmark.benchmark_cancelComposes":
  4774116.404 ±(99.9%) 152833.112 ops/s [Average]
  (min, avg, max) = (3736023.807, 4774116.404, 5016900.015), stdev = 228753.425
  CI (99.9%): [4621283.292, 4926949.517] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
ObservableFromMaybeTest._Benchmark.benchmark_cancelComposes  thrpt   30  4774116.404 ± 152833.112  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatOuterBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatOuterBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 185888.558 ops/s
# Warmup Iteration   2: 1624827.999 ops/s
# Warmup Iteration   3: 2342099.267 ops/s
# Warmup Iteration   4: 2314494.249 ops/s
# Warmup Iteration   5: 2176707.959 ops/s
# Warmup Iteration   6: 2060858.147 ops/s
# Warmup Iteration   7: 2180419.618 ops/s
# Warmup Iteration   8: 2361435.368 ops/s
# Warmup Iteration   9: 2404492.320 ops/s
# Warmup Iteration  10: 2405619.810 ops/s
# Warmup Iteration  11: 2292857.901 ops/s
# Warmup Iteration  12: 2419577.605 ops/s
# Warmup Iteration  13: 2340768.461 ops/s
# Warmup Iteration  14: 2301416.239 ops/s
# Warmup Iteration  15: 2397177.882 ops/s
# Warmup Iteration  16: 2417031.406 ops/s
# Warmup Iteration  17: 2303444.757 ops/s
# Warmup Iteration  18: 2335630.800 ops/s
# Warmup Iteration  19: 2330813.410 ops/s
# Warmup Iteration  20: 2269864.836 ops/s
# Warmup Iteration  21: 2425988.161 ops/s
# Warmup Iteration  22: 2304397.900 ops/s
# Warmup Iteration  23: 2370716.212 ops/s
# Warmup Iteration  24: 2279554.545 ops/s
# Warmup Iteration  25: 2328302.295 ops/s
# Warmup Iteration  26: 2396500.567 ops/s
# Warmup Iteration  27: 2260137.869 ops/s
# Warmup Iteration  28: 2319442.569 ops/s
# Warmup Iteration  29: 2300522.364 ops/s
# Warmup Iteration  30: 2295388.935 ops/s
Iteration   1: 2377160.576 ops/s
Iteration   2: 2345685.400 ops/s
Iteration   3: 2349569.251 ops/s
Iteration   4: 2320060.659 ops/s
Iteration   5: 2346443.645 ops/s
Iteration   6: 2467709.013 ops/s
Iteration   7: 2284788.855 ops/s
Iteration   8: 2380214.348 ops/s
Iteration   9: 2414792.428 ops/s
Iteration  10: 2334748.268 ops/s
Iteration  11: 2371169.794 ops/s
Iteration  12: 2400292.263 ops/s
Iteration  13: 2374757.691 ops/s
Iteration  14: 2336212.741 ops/s
Iteration  15: 2281708.856 ops/s
Iteration  16: 2394279.460 ops/s
Iteration  17: 2432760.394 ops/s
Iteration  18: 2363600.425 ops/s
Iteration  19: 2404883.306 ops/s
Iteration  20: 2353229.468 ops/s
Iteration  21: 2447985.067 ops/s
Iteration  22: 2303884.297 ops/s
Iteration  23: 2318578.816 ops/s
Iteration  24: 2447080.129 ops/s
Iteration  25: 2285409.050 ops/s
Iteration  26: 2376829.994 ops/s
Iteration  27: 2343017.727 ops/s
Iteration  28: 2453463.739 ops/s
Iteration  29: 2453651.407 ops/s
Iteration  30: 2297449.284 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatOuterBackpressure":
  2368713.878 ±(99.9%) 36459.738 ops/s [Average]
  (min, avg, max) = (2281708.856, 2368713.878, 2467709.013), stdev = 54571.224
  CI (99.9%): [2332254.140, 2405173.617] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_concatOuterBackpressure  thrpt   30  2368713.878 ± 36459.738  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_outputFusedOneSignal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_outputFusedOneSignal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 82144.834 ops/s
# Warmup Iteration   2: 316960.440 ops/s
# Warmup Iteration   3: 791322.534 ops/s
# Warmup Iteration   4: 926052.811 ops/s
# Warmup Iteration   5: 1113216.459 ops/s
# Warmup Iteration   6: 1093864.815 ops/s
# Warmup Iteration   7: 1165728.818 ops/s
# Warmup Iteration   8: 1129406.710 ops/s
# Warmup Iteration   9: 1116913.343 ops/s
# Warmup Iteration  10: 1147355.619 ops/s
# Warmup Iteration  11: 1114902.356 ops/s
# Warmup Iteration  12: 1121602.287 ops/s
# Warmup Iteration  13: 1132188.365 ops/s
# Warmup Iteration  14: 1101349.501 ops/s
# Warmup Iteration  15: 1153784.489 ops/s
# Warmup Iteration  16: 1134510.754 ops/s
# Warmup Iteration  17: 1160543.528 ops/s
# Warmup Iteration  18: 1159544.232 ops/s
# Warmup Iteration  19: 1109066.277 ops/s
# Warmup Iteration  20: 1193847.074 ops/s
# Warmup Iteration  21: 1070063.977 ops/s
# Warmup Iteration  22: 1133319.262 ops/s
# Warmup Iteration  23: 1178698.301 ops/s
# Warmup Iteration  24: 1088135.173 ops/s
# Warmup Iteration  25: 1186901.175 ops/s
# Warmup Iteration  26: 1120595.907 ops/s
# Warmup Iteration  27: 1158527.480 ops/s
# Warmup Iteration  28: 1107833.404 ops/s
# Warmup Iteration  29: 1134522.891 ops/s
# Warmup Iteration  30: 1180676.031 ops/s
Iteration   1: 1155726.265 ops/s
Iteration   2: 1185303.027 ops/s
Iteration   3: 1112962.517 ops/s
Iteration   4: 1133385.208 ops/s
Iteration   5: 1145375.561 ops/s
Iteration   6: 1141752.369 ops/s
Iteration   7: 1126454.352 ops/s
Iteration   8: 1180701.271 ops/s
Iteration   9: 1090847.019 ops/s
Iteration  10: 1151872.597 ops/s
Iteration  11: 1133909.931 ops/s
Iteration  12: 1150826.438 ops/s
Iteration  13: 1121701.686 ops/s
Iteration  14: 1113962.502 ops/s
Iteration  15: 1130909.234 ops/s
Iteration  16: 1174699.419 ops/s
Iteration  17: 1125192.269 ops/s
Iteration  18: 1144598.526 ops/s
Iteration  19: 1119148.294 ops/s
Iteration  20: 1143029.256 ops/s
Iteration  21: 924085.478 ops/s
Iteration  22: 1113843.598 ops/s
Iteration  23: 1107603.915 ops/s
Iteration  24: 1113167.162 ops/s
Iteration  25: 1161567.094 ops/s
Iteration  26: 1044307.069 ops/s
Iteration  27: 1138803.421 ops/s
Iteration  28: 1160137.739 ops/s
Iteration  29: 1162289.659 ops/s
Iteration  30: 1151126.998 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_outputFusedOneSignal":
  1128642.996 ±(99.9%) 31992.246 ops/s [Average]
  (min, avg, max) = (924085.478, 1128642.996, 1185303.027), stdev = 47884.492
  CI (99.9%): [1096650.749, 1160635.242] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObservableObserveOnTest._Benchmark.benchmark_outputFusedOneSignal  thrpt   30  1128642.996 ± 31992.246  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 563826.831 ops/s
# Warmup Iteration   2: 3373405.041 ops/s
# Warmup Iteration   3: 4110335.834 ops/s
# Warmup Iteration   4: 4665621.176 ops/s
# Warmup Iteration   5: 4797315.949 ops/s
# Warmup Iteration   6: 4730250.251 ops/s
# Warmup Iteration   7: 4543877.305 ops/s
# Warmup Iteration   8: 4567062.920 ops/s
# Warmup Iteration   9: 4693851.848 ops/s
# Warmup Iteration  10: 4759428.206 ops/s
# Warmup Iteration  11: 4602098.257 ops/s
# Warmup Iteration  12: 4743875.429 ops/s
# Warmup Iteration  13: 4727384.216 ops/s
# Warmup Iteration  14: 4777260.768 ops/s
# Warmup Iteration  15: 4875319.854 ops/s
# Warmup Iteration  16: 4771875.668 ops/s
# Warmup Iteration  17: 4555352.421 ops/s
# Warmup Iteration  18: 4891696.455 ops/s
# Warmup Iteration  19: 4666452.499 ops/s
# Warmup Iteration  20: 4817235.857 ops/s
# Warmup Iteration  21: 4776076.064 ops/s
# Warmup Iteration  22: 4672892.311 ops/s
# Warmup Iteration  23: 4610359.250 ops/s
# Warmup Iteration  24: 4681174.700 ops/s
# Warmup Iteration  25: 4911612.564 ops/s
# Warmup Iteration  26: 4582185.420 ops/s
# Warmup Iteration  27: 4763283.190 ops/s
# Warmup Iteration  28: 4725249.975 ops/s
# Warmup Iteration  29: 4641518.767 ops/s
# Warmup Iteration  30: 4765862.261 ops/s
Iteration   1: 4647520.820 ops/s
Iteration   2: 4682958.334 ops/s
Iteration   3: 4841952.157 ops/s
Iteration   4: 4501409.043 ops/s
Iteration   5: 4659057.659 ops/s
Iteration   6: 4739304.002 ops/s
Iteration   7: 4761337.610 ops/s
Iteration   8: 4645170.361 ops/s
Iteration   9: 4744375.027 ops/s
Iteration  10: 4736112.222 ops/s
Iteration  11: 4810199.462 ops/s
Iteration  12: 4717086.645 ops/s
Iteration  13: 4685017.928 ops/s
Iteration  14: 4956830.092 ops/s
Iteration  15: 4801301.699 ops/s
Iteration  16: 4537652.601 ops/s
Iteration  17: 4698685.988 ops/s
Iteration  18: 4563083.354 ops/s
Iteration  19: 4595900.235 ops/s
Iteration  20: 4798492.362 ops/s
Iteration  21: 4607270.613 ops/s
Iteration  22: 4862327.153 ops/s
Iteration  23: 4638480.313 ops/s
Iteration  24: 4810010.545 ops/s
Iteration  25: 4662176.737 ops/s
Iteration  26: 4823909.424 ops/s
Iteration  27: 4675887.474 ops/s
Iteration  28: 4694229.248 ops/s
Iteration  29: 4891623.018 ops/s
Iteration  30: 4462083.952 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedJust":
  4708381.536 ±(99.9%) 77466.226 ops/s [Average]
  (min, avg, max) = (4462083.952, 4708381.536, 4956830.092), stdev = 115947.809
  CI (99.9%): [4630915.310, 4785847.762] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedJust  thrpt   30  4708381.536 ± 77466.226  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedMany$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedMany

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 479817.121 ops/s
# Warmup Iteration   2: 1802190.514 ops/s
# Warmup Iteration   3: 3517410.202 ops/s
# Warmup Iteration   4: 4022017.681 ops/s
# Warmup Iteration   5: 4286305.043 ops/s
# Warmup Iteration   6: 4045018.305 ops/s
# Warmup Iteration   7: 4169931.558 ops/s
# Warmup Iteration   8: 4302175.022 ops/s
# Warmup Iteration   9: 4060812.389 ops/s
# Warmup Iteration  10: 4024487.345 ops/s
# Warmup Iteration  11: 4196420.059 ops/s
# Warmup Iteration  12: 4178200.198 ops/s
# Warmup Iteration  13: 4166989.853 ops/s
# Warmup Iteration  14: 4213484.940 ops/s
# Warmup Iteration  15: 3997952.334 ops/s
# Warmup Iteration  16: 4288358.801 ops/s
# Warmup Iteration  17: 4065146.180 ops/s
# Warmup Iteration  18: 4299686.531 ops/s
# Warmup Iteration  19: 4045678.519 ops/s
# Warmup Iteration  20: 4293452.971 ops/s
# Warmup Iteration  21: 4100981.719 ops/s
# Warmup Iteration  22: 4146814.408 ops/s
# Warmup Iteration  23: 4212663.069 ops/s
# Warmup Iteration  24: 4139121.537 ops/s
# Warmup Iteration  25: 4152089.188 ops/s
# Warmup Iteration  26: 4218149.733 ops/s
# Warmup Iteration  27: 4102424.655 ops/s
# Warmup Iteration  28: 4033520.619 ops/s
# Warmup Iteration  29: 4354521.830 ops/s
# Warmup Iteration  30: 3989862.569 ops/s
Iteration   1: 4273413.046 ops/s
Iteration   2: 4065968.495 ops/s
Iteration   3: 4154338.681 ops/s
Iteration   4: 4352954.915 ops/s
Iteration   5: 4066044.531 ops/s
Iteration   6: 4142828.685 ops/s
Iteration   7: 4170574.269 ops/s
Iteration   8: 4110702.579 ops/s
Iteration   9: 4209673.988 ops/s
Iteration  10: 3995468.684 ops/s
Iteration  11: 4255839.627 ops/s
Iteration  12: 4100067.646 ops/s
Iteration  13: 4220227.147 ops/s
Iteration  14: 4126525.368 ops/s
Iteration  15: 3842103.499 ops/s
Iteration  16: 3419517.422 ops/s
Iteration  17: 4057224.982 ops/s
Iteration  18: 4270276.426 ops/s
Iteration  19: 4266416.562 ops/s
Iteration  20: 4182426.374 ops/s
Iteration  21: 4293783.337 ops/s
Iteration  22: 4029480.730 ops/s
Iteration  23: 4154090.950 ops/s
Iteration  24: 4324467.296 ops/s
Iteration  25: 4040209.565 ops/s
Iteration  26: 4304745.797 ops/s
Iteration  27: 4039889.334 ops/s
Iteration  28: 4323871.732 ops/s
Iteration  29: 4120018.621 ops/s
Iteration  30: 4047140.615 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedMany":
  4132009.697 ±(99.9%) 119711.950 ops/s [Average]
  (min, avg, max) = (3419517.422, 4132009.697, 4352954.915), stdev = 179179.225
  CI (99.9%): [4012297.747, 4251721.647] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedMany  thrpt   30  4132009.697 ± 119711.950  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedManyRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedManyRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 258627.898 ops/s
# Warmup Iteration   2: 2002481.320 ops/s
# Warmup Iteration   3: 3610064.093 ops/s
# Warmup Iteration   4: 3145984.998 ops/s
# Warmup Iteration   5: 3520110.473 ops/s
# Warmup Iteration   6: 3740866.958 ops/s
# Warmup Iteration   7: 3842105.044 ops/s
# Warmup Iteration   8: 3769116.760 ops/s
# Warmup Iteration   9: 3656241.124 ops/s
# Warmup Iteration  10: 3808335.685 ops/s
# Warmup Iteration  11: 3722056.642 ops/s
# Warmup Iteration  12: 3744222.800 ops/s
# Warmup Iteration  13: 3780413.453 ops/s
# Warmup Iteration  14: 3578658.018 ops/s
# Warmup Iteration  15: 3817822.171 ops/s
# Warmup Iteration  16: 3764357.962 ops/s
# Warmup Iteration  17: 3554624.674 ops/s
# Warmup Iteration  18: 3758319.507 ops/s
# Warmup Iteration  19: 3772819.610 ops/s
# Warmup Iteration  20: 3773685.378 ops/s
# Warmup Iteration  21: 3687540.823 ops/s
# Warmup Iteration  22: 3819425.179 ops/s
# Warmup Iteration  23: 3694315.455 ops/s
# Warmup Iteration  24: 3689680.328 ops/s
# Warmup Iteration  25: 3833197.518 ops/s
# Warmup Iteration  26: 3593866.583 ops/s
# Warmup Iteration  27: 3723479.647 ops/s
# Warmup Iteration  28: 3663915.990 ops/s
# Warmup Iteration  29: 3762091.408 ops/s
# Warmup Iteration  30: 3660677.217 ops/s
Iteration   1: 3768856.729 ops/s
Iteration   2: 3818651.860 ops/s
Iteration   3: 3555631.229 ops/s
Iteration   4: 3849548.505 ops/s
Iteration   5: 3850948.956 ops/s
Iteration   6: 3650814.119 ops/s
Iteration   7: 3833548.194 ops/s
Iteration   8: 3667858.489 ops/s
Iteration   9: 3809199.547 ops/s
Iteration  10: 3740842.065 ops/s
Iteration  11: 3699939.058 ops/s
Iteration  12: 3831577.844 ops/s
Iteration  13: 3774553.394 ops/s
Iteration  14: 3811842.423 ops/s
Iteration  15: 3700909.933 ops/s
Iteration  16: 3752587.486 ops/s
Iteration  17: 3692833.053 ops/s
Iteration  18: 3919601.437 ops/s
Iteration  19: 3804557.817 ops/s
Iteration  20: 3731875.608 ops/s
Iteration  21: 3680906.191 ops/s
Iteration  22: 3799682.178 ops/s
Iteration  23: 3919125.031 ops/s
Iteration  24: 3716542.266 ops/s
Iteration  25: 3613215.412 ops/s
Iteration  26: 3739091.938 ops/s
Iteration  27: 3740128.616 ops/s
Iteration  28: 3718455.155 ops/s
Iteration  29: 3798116.695 ops/s
Iteration  30: 3625982.109 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedManyRejected":
  3753914.111 ±(99.9%) 57602.657 ops/s [Average]
  (min, avg, max) = (3555631.229, 3753914.111, 3919601.437), stdev = 86216.952
  CI (99.9%): [3696311.454, 3811516.768] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fusedManyRejected  thrpt   30  3753914.111 ± 57602.657  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successManyTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successManyTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 194770.350 ops/s
# Warmup Iteration   2: 1428534.139 ops/s
# Warmup Iteration   3: 2375236.844 ops/s
# Warmup Iteration   4: 3405178.226 ops/s
# Warmup Iteration   5: 3313110.721 ops/s
# Warmup Iteration   6: 3295575.560 ops/s
# Warmup Iteration   7: 3378131.406 ops/s
# Warmup Iteration   8: 3253130.115 ops/s
# Warmup Iteration   9: 3388641.066 ops/s
# Warmup Iteration  10: 3204579.093 ops/s
# Warmup Iteration  11: 3253482.363 ops/s
# Warmup Iteration  12: 3483451.896 ops/s
# Warmup Iteration  13: 3288559.560 ops/s
# Warmup Iteration  14: 3358832.733 ops/s
# Warmup Iteration  15: 3361912.619 ops/s
# Warmup Iteration  16: 3267128.894 ops/s
# Warmup Iteration  17: 3318452.277 ops/s
# Warmup Iteration  18: 3512332.762 ops/s
# Warmup Iteration  19: 3502578.310 ops/s
# Warmup Iteration  20: 3265102.154 ops/s
# Warmup Iteration  21: 3374363.023 ops/s
# Warmup Iteration  22: 3263401.463 ops/s
# Warmup Iteration  23: 3270473.788 ops/s
# Warmup Iteration  24: 3367045.284 ops/s
# Warmup Iteration  25: 3305946.287 ops/s
# Warmup Iteration  26: 3421328.539 ops/s
# Warmup Iteration  27: 3443807.055 ops/s
# Warmup Iteration  28: 3198491.247 ops/s
# Warmup Iteration  29: 3498680.926 ops/s
# Warmup Iteration  30: 3310723.262 ops/s
Iteration   1: 3397049.306 ops/s
Iteration   2: 3401075.981 ops/s
Iteration   3: 3320663.240 ops/s
Iteration   4: 3406865.522 ops/s
Iteration   5: 3307343.553 ops/s
Iteration   6: 3276625.722 ops/s
Iteration   7: 3331976.762 ops/s
Iteration   8: 3287136.754 ops/s
Iteration   9: 3355061.617 ops/s
Iteration  10: 2829362.466 ops/s
Iteration  11: 3104022.886 ops/s
Iteration  12: 3333543.792 ops/s
Iteration  13: 3353307.125 ops/s
Iteration  14: 3361897.192 ops/s
Iteration  15: 3417236.279 ops/s
Iteration  16: 3322482.033 ops/s
Iteration  17: 3361785.452 ops/s
Iteration  18: 3437608.858 ops/s
Iteration  19: 3233375.034 ops/s
Iteration  20: 3379803.705 ops/s
Iteration  21: 3242493.331 ops/s
Iteration  22: 3328950.674 ops/s
Iteration  23: 3350468.933 ops/s
Iteration  24: 3302189.118 ops/s
Iteration  25: 3436920.610 ops/s
Iteration  26: 3284212.168 ops/s
Iteration  27: 3401043.259 ops/s
Iteration  28: 3215042.788 ops/s
Iteration  29: 3367986.088 ops/s
Iteration  30: 3228154.726 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successManyTake":
  3312522.832 ±(99.9%) 78467.664 ops/s [Average]
  (min, avg, max) = (2829362.466, 3312522.832, 3437608.858), stdev = 117446.714
  CI (99.9%): [3234055.169, 3390990.496] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successManyTake  thrpt   30  3312522.832 ± 78467.664  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_scalarMapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_scalarMapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 258349.162 ops/s
# Warmup Iteration   2: 566907.781 ops/s
# Warmup Iteration   3: 616472.279 ops/s
# Warmup Iteration   4: 643940.343 ops/s
# Warmup Iteration   5: 666402.120 ops/s
# Warmup Iteration   6: 656581.051 ops/s
# Warmup Iteration   7: 628864.733 ops/s
# Warmup Iteration   8: 608138.690 ops/s
# Warmup Iteration   9: 637484.541 ops/s
# Warmup Iteration  10: 643172.364 ops/s
# Warmup Iteration  11: 657335.507 ops/s
# Warmup Iteration  12: 623629.453 ops/s
# Warmup Iteration  13: 658145.685 ops/s
# Warmup Iteration  14: 632256.462 ops/s
# Warmup Iteration  15: 668587.856 ops/s
# Warmup Iteration  16: 639247.817 ops/s
# Warmup Iteration  17: 666465.949 ops/s
# Warmup Iteration  18: 697033.930 ops/s
# Warmup Iteration  19: 673280.347 ops/s
# Warmup Iteration  20: 682782.799 ops/s
# Warmup Iteration  21: 700404.608 ops/s
# Warmup Iteration  22: 667326.023 ops/s
# Warmup Iteration  23: 687830.490 ops/s
# Warmup Iteration  24: 687458.572 ops/s
# Warmup Iteration  25: 675930.185 ops/s
# Warmup Iteration  26: 678519.867 ops/s
# Warmup Iteration  27: 691878.630 ops/s
# Warmup Iteration  28: 676059.579 ops/s
# Warmup Iteration  29: 702978.796 ops/s
# Warmup Iteration  30: 657360.800 ops/s
Iteration   1: 670808.115 ops/s
Iteration   2: 677512.110 ops/s
Iteration   3: 684412.020 ops/s
Iteration   4: 687198.945 ops/s
Iteration   5: 678806.038 ops/s
Iteration   6: 685069.273 ops/s
Iteration   7: 694735.879 ops/s
Iteration   8: 673442.986 ops/s
Iteration   9: 693602.459 ops/s
Iteration  10: 667720.500 ops/s
Iteration  11: 697176.809 ops/s
Iteration  12: 675355.171 ops/s
Iteration  13: 694671.908 ops/s
Iteration  14: 682082.496 ops/s
Iteration  15: 672449.633 ops/s
Iteration  16: 698855.218 ops/s
Iteration  17: 678693.547 ops/s
Iteration  18: 686531.551 ops/s
Iteration  19: 700321.070 ops/s
Iteration  20: 699178.951 ops/s
Iteration  21: 672623.306 ops/s
Iteration  22: 699682.704 ops/s
Iteration  23: 676872.184 ops/s
Iteration  24: 696080.011 ops/s
Iteration  25: 676026.868 ops/s
Iteration  26: 687161.112 ops/s
Iteration  27: 661482.670 ops/s
Iteration  28: 676653.656 ops/s
Iteration  29: 707780.753 ops/s
Iteration  30: 671624.662 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybeTest._Benchmark.benchmark_scalarMapperCrash":
  684153.754 ±(99.9%) 7860.873 ops/s [Average]
  (min, avg, max) = (661482.670, 684153.754, 707780.753), stdev = 11765.786
  CI (99.9%): [676292.880, 692014.627] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableConcatMapMaybeTest._Benchmark.benchmark_scalarMapperCrash  thrpt   30  684153.754 ± 7860.873  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatIterableDelayErrorWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatIterableDelayErrorWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41964.142 ops/s
# Warmup Iteration   2: 126431.676 ops/s
# Warmup Iteration   3: 309871.371 ops/s
# Warmup Iteration   4: 376632.249 ops/s
# Warmup Iteration   5: 377717.883 ops/s
# Warmup Iteration   6: 417420.383 ops/s
# Warmup Iteration   7: 356791.569 ops/s
# Warmup Iteration   8: 420254.742 ops/s
# Warmup Iteration   9: 402792.968 ops/s
# Warmup Iteration  10: 400518.381 ops/s
# Warmup Iteration  11: 404491.127 ops/s
# Warmup Iteration  12: 404572.054 ops/s
# Warmup Iteration  13: 412288.926 ops/s
# Warmup Iteration  14: 421053.441 ops/s
# Warmup Iteration  15: 399940.470 ops/s
# Warmup Iteration  16: 414622.453 ops/s
# Warmup Iteration  17: 425164.149 ops/s
# Warmup Iteration  18: 422461.563 ops/s
# Warmup Iteration  19: 441516.631 ops/s
# Warmup Iteration  20: 414596.430 ops/s
# Warmup Iteration  21: 435045.362 ops/s
# Warmup Iteration  22: 424706.856 ops/s
# Warmup Iteration  23: 408640.869 ops/s
# Warmup Iteration  24: 444796.521 ops/s
# Warmup Iteration  25: 426598.319 ops/s
# Warmup Iteration  26: 421757.962 ops/s
# Warmup Iteration  27: 428753.036 ops/s
# Warmup Iteration  28: 420764.705 ops/s
# Warmup Iteration  29: 423574.128 ops/s
# Warmup Iteration  30: 416618.644 ops/s
Iteration   1: 425701.571 ops/s
Iteration   2: 429442.388 ops/s
Iteration   3: 421510.174 ops/s
Iteration   4: 435739.340 ops/s
Iteration   5: 304688.237 ops/s
Iteration   6: 415968.116 ops/s
Iteration   7: 421177.137 ops/s
Iteration   8: 434642.797 ops/s
Iteration   9: 415824.668 ops/s
Iteration  10: 437734.734 ops/s
Iteration  11: 408832.611 ops/s
Iteration  12: 437840.297 ops/s
Iteration  13: 401834.193 ops/s
Iteration  14: 420649.316 ops/s
Iteration  15: 425621.878 ops/s
Iteration  16: 396887.420 ops/s
Iteration  17: 434620.703 ops/s
Iteration  18: 405410.561 ops/s
Iteration  19: 415660.674 ops/s
Iteration  20: 407304.608 ops/s
Iteration  21: 429582.511 ops/s
Iteration  22: 412772.770 ops/s
Iteration  23: 436008.819 ops/s
Iteration  24: 424728.259 ops/s
Iteration  25: 418695.873 ops/s
Iteration  26: 426648.352 ops/s
Iteration  27: 433450.133 ops/s
Iteration  28: 410861.875 ops/s
Iteration  29: 431760.835 ops/s
Iteration  30: 417539.290 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatIterableDelayErrorWithError":
  417971.338 ±(99.9%) 16143.877 ops/s [Average]
  (min, avg, max) = (304688.237, 417971.338, 437840.297), stdev = 24163.397
  CI (99.9%): [401827.461, 434115.215] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_concatIterableDelayErrorWithError  thrpt   30  417971.338 ± 16143.877  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_cancelledUpFront$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_cancelledUpFront

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 144516.704 ops/s
# Warmup Iteration   2: 520464.025 ops/s
# Warmup Iteration   3: 1405667.331 ops/s
# Warmup Iteration   4: 1438031.554 ops/s
# Warmup Iteration   5: 1654435.865 ops/s
# Warmup Iteration   6: 1647224.063 ops/s
# Warmup Iteration   7: 1595810.613 ops/s
# Warmup Iteration   8: 1584791.350 ops/s
# Warmup Iteration   9: 1664425.811 ops/s
# Warmup Iteration  10: 1570598.522 ops/s
# Warmup Iteration  11: 1567844.313 ops/s
# Warmup Iteration  12: 1648198.631 ops/s
# Warmup Iteration  13: 1635233.857 ops/s
# Warmup Iteration  14: 1593513.535 ops/s
# Warmup Iteration  15: 1683639.050 ops/s
# Warmup Iteration  16: 1645543.397 ops/s
# Warmup Iteration  17: 1574068.108 ops/s
# Warmup Iteration  18: 1654818.739 ops/s
# Warmup Iteration  19: 1575768.742 ops/s
# Warmup Iteration  20: 1628842.534 ops/s
# Warmup Iteration  21: 1637407.552 ops/s
# Warmup Iteration  22: 1603503.021 ops/s
# Warmup Iteration  23: 1632022.133 ops/s
# Warmup Iteration  24: 1624894.980 ops/s
# Warmup Iteration  25: 1602874.892 ops/s
# Warmup Iteration  26: 1656413.501 ops/s
# Warmup Iteration  27: 1600035.318 ops/s
# Warmup Iteration  28: 1635142.109 ops/s
# Warmup Iteration  29: 1640839.971 ops/s
# Warmup Iteration  30: 1590213.830 ops/s
Iteration   1: 1621758.715 ops/s
Iteration   2: 1633005.217 ops/s
Iteration   3: 1632248.163 ops/s
Iteration   4: 1648094.470 ops/s
Iteration   5: 1617678.579 ops/s
Iteration   6: 1669598.819 ops/s
Iteration   7: 1706218.742 ops/s
Iteration   8: 1537274.432 ops/s
Iteration   9: 1650781.800 ops/s
Iteration  10: 1616616.306 ops/s
Iteration  11: 1611773.754 ops/s
Iteration  12: 1574218.785 ops/s
Iteration  13: 1646108.123 ops/s
Iteration  14: 1591406.997 ops/s
Iteration  15: 1612720.949 ops/s
Iteration  16: 1603535.072 ops/s
Iteration  17: 1625914.767 ops/s
Iteration  18: 1629844.708 ops/s
Iteration  19: 1597792.011 ops/s
Iteration  20: 1644586.210 ops/s
Iteration  21: 1629797.967 ops/s
Iteration  22: 1643569.422 ops/s
Iteration  23: 1592440.500 ops/s
Iteration  24: 1589139.970 ops/s
Iteration  25: 1659772.336 ops/s
Iteration  26: 1609244.512 ops/s
Iteration  27: 1587739.139 ops/s
Iteration  28: 1659679.495 ops/s
Iteration  29: 1615235.665 ops/s
Iteration  30: 1630293.833 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_cancelledUpFront":
  1622936.315 ±(99.9%) 21693.976 ops/s [Average]
  (min, avg, max) = (1537274.432, 1622936.315, 1706218.742), stdev = 32470.524
  CI (99.9%): [1601242.340, 1644630.291] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableCacheTest._Benchmark.benchmark_cancelledUpFront  thrpt   30  1622936.315 ± 21693.976  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_noDownstreamUnsubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_noDownstreamUnsubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 899717.236 ops/s
# Warmup Iteration   2: 2348301.100 ops/s
# Warmup Iteration   3: 2640930.345 ops/s
# Warmup Iteration   4: 2930159.810 ops/s
# Warmup Iteration   5: 3173240.960 ops/s
# Warmup Iteration   6: 3042664.844 ops/s
# Warmup Iteration   7: 3127387.248 ops/s
# Warmup Iteration   8: 3092147.794 ops/s
# Warmup Iteration   9: 2923909.854 ops/s
# Warmup Iteration  10: 3181758.220 ops/s
# Warmup Iteration  11: 3075103.571 ops/s
# Warmup Iteration  12: 2945985.051 ops/s
# Warmup Iteration  13: 3206178.603 ops/s
# Warmup Iteration  14: 3003401.746 ops/s
# Warmup Iteration  15: 3000747.525 ops/s
# Warmup Iteration  16: 2982435.613 ops/s
# Warmup Iteration  17: 2968620.066 ops/s
# Warmup Iteration  18: 3160713.919 ops/s
# Warmup Iteration  19: 2973269.430 ops/s
# Warmup Iteration  20: 3059293.028 ops/s
# Warmup Iteration  21: 2988683.049 ops/s
# Warmup Iteration  22: 3037369.108 ops/s
# Warmup Iteration  23: 3129514.194 ops/s
# Warmup Iteration  24: 2964575.675 ops/s
# Warmup Iteration  25: 3137561.519 ops/s
# Warmup Iteration  26: 3062303.356 ops/s
# Warmup Iteration  27: 3083961.337 ops/s
# Warmup Iteration  28: 3120529.891 ops/s
# Warmup Iteration  29: 2986703.144 ops/s
# Warmup Iteration  30: 2591569.540 ops/s
Iteration   1: 3041133.125 ops/s
Iteration   2: 3095881.850 ops/s
Iteration   3: 2928252.112 ops/s
Iteration   4: 3079353.450 ops/s
Iteration   5: 3081254.834 ops/s
Iteration   6: 3001968.547 ops/s
Iteration   7: 3118786.482 ops/s
Iteration   8: 3052246.360 ops/s
Iteration   9: 3132213.022 ops/s
Iteration  10: 3101964.378 ops/s
Iteration  11: 3003651.820 ops/s
Iteration  12: 3064989.388 ops/s
Iteration  13: 3150522.139 ops/s
Iteration  14: 2966608.692 ops/s
Iteration  15: 3013598.577 ops/s
Iteration  16: 3209836.336 ops/s
Iteration  17: 3248314.291 ops/s
Iteration  18: 3002990.815 ops/s
Iteration  19: 3201513.025 ops/s
Iteration  20: 2925353.961 ops/s
Iteration  21: 3125933.307 ops/s
Iteration  22: 3146376.350 ops/s
Iteration  23: 3108963.568 ops/s
Iteration  24: 3211150.954 ops/s
Iteration  25: 2987921.598 ops/s
Iteration  26: 3194717.701 ops/s
Iteration  27: 3100166.611 ops/s
Iteration  28: 2976623.725 ops/s
Iteration  29: 3113228.200 ops/s
Iteration  30: 3013584.054 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_noDownstreamUnsubscribe":
  3079969.976 ±(99.9%) 57828.288 ops/s [Average]
  (min, avg, max) = (2925353.961, 3079969.976, 3248314.291), stdev = 86554.666
  CI (99.9%): [3022141.687, 3137798.264] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_noDownstreamUnsubscribe  thrpt   30  3079969.976 ± 57828.288  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_disposedUpfront$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_disposedUpfront

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 200948.741 ops/s
# Warmup Iteration   2: 872989.223 ops/s
# Warmup Iteration   3: 1253124.228 ops/s
# Warmup Iteration   4: 1371581.483 ops/s
# Warmup Iteration   5: 1536432.869 ops/s
# Warmup Iteration   6: 1441890.147 ops/s
# Warmup Iteration   7: 1499231.254 ops/s
# Warmup Iteration   8: 1565675.822 ops/s
# Warmup Iteration   9: 1535282.716 ops/s
# Warmup Iteration  10: 1457519.827 ops/s
# Warmup Iteration  11: 1525696.846 ops/s
# Warmup Iteration  12: 1556213.089 ops/s
# Warmup Iteration  13: 1448040.791 ops/s
# Warmup Iteration  14: 1503936.236 ops/s
# Warmup Iteration  15: 1508227.122 ops/s
# Warmup Iteration  16: 1523348.937 ops/s
# Warmup Iteration  17: 1461315.510 ops/s
# Warmup Iteration  18: 1532932.799 ops/s
# Warmup Iteration  19: 1568764.931 ops/s
# Warmup Iteration  20: 1453247.386 ops/s
# Warmup Iteration  21: 1532391.548 ops/s
# Warmup Iteration  22: 1456297.439 ops/s
# Warmup Iteration  23: 1532435.221 ops/s
# Warmup Iteration  24: 1488346.303 ops/s
# Warmup Iteration  25: 1539470.931 ops/s
# Warmup Iteration  26: 1475813.278 ops/s
# Warmup Iteration  27: 1531464.381 ops/s
# Warmup Iteration  28: 1510641.499 ops/s
# Warmup Iteration  29: 1478268.551 ops/s
# Warmup Iteration  30: 1537527.225 ops/s
Iteration   1: 1465944.865 ops/s
Iteration   2: 1514144.115 ops/s
Iteration   3: 1544781.709 ops/s
Iteration   4: 1469760.366 ops/s
Iteration   5: 1481255.417 ops/s
Iteration   6: 1548529.123 ops/s
Iteration   7: 1455569.269 ops/s
Iteration   8: 1525772.677 ops/s
Iteration   9: 1475694.988 ops/s
Iteration  10: 1423262.870 ops/s
Iteration  11: 1506034.002 ops/s
Iteration  12: 1490626.007 ops/s
Iteration  13: 1454665.076 ops/s
Iteration  14: 1515313.805 ops/s
Iteration  15: 1531667.357 ops/s
Iteration  16: 1415902.887 ops/s
Iteration  17: 1534599.938 ops/s
Iteration  18: 1515936.265 ops/s
Iteration  19: 1457043.419 ops/s
Iteration  20: 1432818.630 ops/s
Iteration  21: 1546749.666 ops/s
Iteration  22: 1423975.430 ops/s
Iteration  23: 1505631.948 ops/s
Iteration  24: 1460783.545 ops/s
Iteration  25: 1539163.525 ops/s
Iteration  26: 1521111.335 ops/s
Iteration  27: 1477179.536 ops/s
Iteration  28: 1555317.641 ops/s
Iteration  29: 1435575.946 ops/s
Iteration  30: 1525775.463 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_disposedUpfront":
  1491686.227 ±(99.9%) 28356.246 ops/s [Average]
  (min, avg, max) = (1415902.887, 1491686.227, 1555317.641), stdev = 42442.298
  CI (99.9%): [1463329.981, 1520042.474] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_disposedUpfront  thrpt   30  1491686.227 ± 28356.246  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_startWithIterableOneNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_startWithIterableOneNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 96721.700 ops/s
# Warmup Iteration   2: 417287.708 ops/s
# Warmup Iteration   3: 436248.891 ops/s
# Warmup Iteration   4: 479605.898 ops/s
# Warmup Iteration   5: 491548.188 ops/s
# Warmup Iteration   6: 474764.999 ops/s
# Warmup Iteration   7: 478050.843 ops/s
# Warmup Iteration   8: 486860.934 ops/s
# Warmup Iteration   9: 474282.672 ops/s
# Warmup Iteration  10: 484179.170 ops/s
# Warmup Iteration  11: 477056.862 ops/s
# Warmup Iteration  12: 481693.989 ops/s
# Warmup Iteration  13: 492536.654 ops/s
# Warmup Iteration  14: 462960.582 ops/s
# Warmup Iteration  15: 495375.674 ops/s
# Warmup Iteration  16: 496239.898 ops/s
# Warmup Iteration  17: 497303.378 ops/s
# Warmup Iteration  18: 492503.046 ops/s
# Warmup Iteration  19: 481746.312 ops/s
# Warmup Iteration  20: 519080.510 ops/s
# Warmup Iteration  21: 498932.573 ops/s
# Warmup Iteration  22: 497501.656 ops/s
# Warmup Iteration  23: 530153.456 ops/s
# Warmup Iteration  24: 365549.193 ops/s
# Warmup Iteration  25: 516502.434 ops/s
# Warmup Iteration  26: 519784.057 ops/s
# Warmup Iteration  27: 490827.617 ops/s
# Warmup Iteration  28: 501956.196 ops/s
# Warmup Iteration  29: 514710.368 ops/s
# Warmup Iteration  30: 499763.238 ops/s
Iteration   1: 488109.898 ops/s
Iteration   2: 481154.535 ops/s
Iteration   3: 514803.082 ops/s
Iteration   4: 486389.523 ops/s
Iteration   5: 485668.442 ops/s
Iteration   6: 504701.513 ops/s
Iteration   7: 487733.992 ops/s
Iteration   8: 520016.218 ops/s
Iteration   9: 492874.998 ops/s
Iteration  10: 519989.188 ops/s
Iteration  11: 502160.605 ops/s
Iteration  12: 515080.046 ops/s
Iteration  13: 502982.071 ops/s
Iteration  14: 492954.186 ops/s
Iteration  15: 511086.644 ops/s
Iteration  16: 508737.982 ops/s
Iteration  17: 503761.861 ops/s
Iteration  18: 513490.787 ops/s
Iteration  19: 503820.057 ops/s
Iteration  20: 507738.651 ops/s
Iteration  21: 518171.237 ops/s
Iteration  22: 492014.443 ops/s
Iteration  23: 510153.922 ops/s
Iteration  24: 488814.367 ops/s
Iteration  25: 524054.074 ops/s
Iteration  26: 520362.149 ops/s
Iteration  27: 500844.388 ops/s
Iteration  28: 512875.920 ops/s
Iteration  29: 504252.453 ops/s
Iteration  30: 505930.201 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_startWithIterableOneNull":
  504024.248 ±(99.9%) 8078.236 ops/s [Average]
  (min, avg, max) = (481154.535, 504024.248, 524054.074), stdev = 12091.124
  CI (99.9%): [495946.012, 512102.484] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_startWithIterableOneNull  thrpt   30  504024.248 ± 8078.236  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntilTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntilTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.874 ops/s
# Warmup Iteration   2: 43347.178 ops/s
# Warmup Iteration   3: 155358.585 ops/s
# Warmup Iteration   4: 242907.471 ops/s
# Warmup Iteration   5: 259087.074 ops/s
# Warmup Iteration   6: 545055.310 ops/s
# Warmup Iteration   7: 859467.855 ops/s
# Warmup Iteration   8: 856302.051 ops/s
# Warmup Iteration   9: 896875.343 ops/s
# Warmup Iteration  10: 859916.243 ops/s
# Warmup Iteration  11: 865646.131 ops/s
# Warmup Iteration  12: 855930.627 ops/s
# Warmup Iteration  13: 871103.605 ops/s
# Warmup Iteration  14: 915396.547 ops/s
# Warmup Iteration  15: 833373.422 ops/s
# Warmup Iteration  16: 881497.796 ops/s
# Warmup Iteration  17: 899949.220 ops/s
# Warmup Iteration  18: 847202.745 ops/s
# Warmup Iteration  19: 885473.157 ops/s
# Warmup Iteration  20: 856176.082 ops/s
# Warmup Iteration  21: 889629.971 ops/s
# Warmup Iteration  22: 847147.596 ops/s
# Warmup Iteration  23: 856121.271 ops/s
# Warmup Iteration  24: 897741.094 ops/s
# Warmup Iteration  25: 858974.809 ops/s
# Warmup Iteration  26: 880507.728 ops/s
# Warmup Iteration  27: 846508.450 ops/s
# Warmup Iteration  28: 871919.891 ops/s
# Warmup Iteration  29: 883153.684 ops/s
# Warmup Iteration  30: 859638.207 ops/s
Iteration   1: 882270.095 ops/s
Iteration   2: 855437.516 ops/s
Iteration   3: 854096.919 ops/s
Iteration   4: 926446.007 ops/s
Iteration   5: 868382.576 ops/s
Iteration   6: 845265.553 ops/s
Iteration   7: 870112.142 ops/s
Iteration   8: 840240.581 ops/s
Iteration   9: 923928.100 ops/s
Iteration  10: 846709.737 ops/s
Iteration  11: 853634.848 ops/s
Iteration  12: 896403.756 ops/s
Iteration  13: 857518.591 ops/s
Iteration  14: 881160.417 ops/s
Iteration  15: 890428.290 ops/s
Iteration  16: 843985.891 ops/s
Iteration  17: 874288.647 ops/s
Iteration  18: 837760.706 ops/s
Iteration  19: 851248.849 ops/s
Iteration  20: 924036.854 ops/s
Iteration  21: 863248.379 ops/s
Iteration  22: 893090.415 ops/s
Iteration  23: 846186.374 ops/s
Iteration  24: 869806.367 ops/s
Iteration  25: 873043.895 ops/s
Iteration  26: 867765.633 ops/s
Iteration  27: 897980.146 ops/s
Iteration  28: 836901.914 ops/s
Iteration  29: 892923.988 ops/s
Iteration  30: 838741.693 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntilTest._Benchmark.benchmark_dispose":
  870101.496 ±(99.9%) 17528.788 ops/s [Average]
  (min, avg, max) = (836901.914, 870101.496, 926446.007), stdev = 26236.267
  CI (99.9%): [852572.708, 887630.284] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
ObservableSkipUntilTest._Benchmark.benchmark_dispose  thrpt   30  870101.496 ± 17528.788  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_emptyToObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_emptyToObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1030766.111 ops/s
# Warmup Iteration   2: 4129232.731 ops/s
# Warmup Iteration   3: 5907241.446 ops/s
# Warmup Iteration   4: 5804930.710 ops/s
# Warmup Iteration   5: 6285976.573 ops/s
# Warmup Iteration   6: 6028633.425 ops/s
# Warmup Iteration   7: 5956777.042 ops/s
# Warmup Iteration   8: 6164555.292 ops/s
# Warmup Iteration   9: 5988952.654 ops/s
# Warmup Iteration  10: 6206564.002 ops/s
# Warmup Iteration  11: 6209160.707 ops/s
# Warmup Iteration  12: 5961260.933 ops/s
# Warmup Iteration  13: 6377944.712 ops/s
# Warmup Iteration  14: 6241568.257 ops/s
# Warmup Iteration  15: 5951668.535 ops/s
# Warmup Iteration  16: 6289954.212 ops/s
# Warmup Iteration  17: 6136584.546 ops/s
# Warmup Iteration  18: 5783464.701 ops/s
# Warmup Iteration  19: 5403862.405 ops/s
# Warmup Iteration  20: 6056800.950 ops/s
# Warmup Iteration  21: 6321545.256 ops/s
# Warmup Iteration  22: 6146391.813 ops/s
# Warmup Iteration  23: 5820441.132 ops/s
# Warmup Iteration  24: 6319552.134 ops/s
# Warmup Iteration  25: 5838359.128 ops/s
# Warmup Iteration  26: 6022472.110 ops/s
# Warmup Iteration  27: 6141470.677 ops/s
# Warmup Iteration  28: 6114252.965 ops/s
# Warmup Iteration  29: 6102652.629 ops/s
# Warmup Iteration  30: 5969155.100 ops/s
Iteration   1: 6315306.863 ops/s
Iteration   2: 6026996.803 ops/s
Iteration   3: 6047474.052 ops/s
Iteration   4: 6158003.378 ops/s
Iteration   5: 6106551.671 ops/s
Iteration   6: 6086928.387 ops/s
Iteration   7: 6142464.321 ops/s
Iteration   8: 5972923.796 ops/s
Iteration   9: 6121364.431 ops/s
Iteration  10: 6437642.484 ops/s
Iteration  11: 6184867.767 ops/s
Iteration  12: 6116356.257 ops/s
Iteration  13: 6222668.476 ops/s
Iteration  14: 6120591.013 ops/s
Iteration  15: 6058080.165 ops/s
Iteration  16: 6107251.088 ops/s
Iteration  17: 6064320.586 ops/s
Iteration  18: 6265718.847 ops/s
Iteration  19: 6328888.725 ops/s
Iteration  20: 5933690.845 ops/s
Iteration  21: 6210151.646 ops/s
Iteration  22: 5939667.262 ops/s
Iteration  23: 6294570.405 ops/s
Iteration  24: 6060921.725 ops/s
Iteration  25: 5989434.552 ops/s
Iteration  26: 6267897.023 ops/s
Iteration  27: 6063949.688 ops/s
Iteration  28: 6440299.233 ops/s
Iteration  29: 6272351.350 ops/s
Iteration  30: 6036436.043 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_emptyToObservable":
  6146458.963 ±(99.9%) 90125.202 ops/s [Average]
  (min, avg, max) = (5933690.845, 6146458.963, 6440299.233), stdev = 134895.169
  CI (99.9%): [6056333.761, 6236584.164] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_emptyToObservable  thrpt   30  6146458.963 ± 90125.202  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStageTest._Benchmark.benchmark_syncSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStageTest._Benchmark.benchmark_syncSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1046303.570 ops/s
# Warmup Iteration   2: 4352236.971 ops/s
# Warmup Iteration   3: 5788222.805 ops/s
# Warmup Iteration   4: 5799632.047 ops/s
# Warmup Iteration   5: 6165596.391 ops/s
# Warmup Iteration   6: 5838402.647 ops/s
# Warmup Iteration   7: 5900908.904 ops/s
# Warmup Iteration   8: 6014083.398 ops/s
# Warmup Iteration   9: 5940286.135 ops/s
# Warmup Iteration  10: 6128572.249 ops/s
# Warmup Iteration  11: 5820317.313 ops/s
# Warmup Iteration  12: 6056999.868 ops/s
# Warmup Iteration  13: 6077130.476 ops/s
# Warmup Iteration  14: 5769666.946 ops/s
# Warmup Iteration  15: 6010045.116 ops/s
# Warmup Iteration  16: 6046979.454 ops/s
# Warmup Iteration  17: 6027433.486 ops/s
# Warmup Iteration  18: 6183814.295 ops/s
# Warmup Iteration  19: 5958969.316 ops/s
# Warmup Iteration  20: 6122224.805 ops/s
# Warmup Iteration  21: 5823792.101 ops/s
# Warmup Iteration  22: 5959461.587 ops/s
# Warmup Iteration  23: 6113782.311 ops/s
# Warmup Iteration  24: 5911064.737 ops/s
# Warmup Iteration  25: 6119708.257 ops/s
# Warmup Iteration  26: 5964116.325 ops/s
# Warmup Iteration  27: 5913926.168 ops/s
# Warmup Iteration  28: 6110186.125 ops/s
# Warmup Iteration  29: 5869105.210 ops/s
# Warmup Iteration  30: 5930503.245 ops/s
Iteration   1: 5978255.872 ops/s
Iteration   2: 6249204.639 ops/s
Iteration   3: 6119539.354 ops/s
Iteration   4: 6022528.623 ops/s
Iteration   5: 6165014.940 ops/s
Iteration   6: 5829205.477 ops/s
Iteration   7: 6055681.166 ops/s
Iteration   8: 6284993.734 ops/s
Iteration   9: 5853586.820 ops/s
Iteration  10: 6170327.493 ops/s
Iteration  11: 6033001.870 ops/s
Iteration  12: 5941902.409 ops/s
Iteration  13: 6036737.853 ops/s
Iteration  14: 5999591.845 ops/s
Iteration  15: 5954988.032 ops/s
Iteration  16: 6205388.073 ops/s
Iteration  17: 5897927.177 ops/s
Iteration  18: 6005681.183 ops/s
Iteration  19: 6207597.682 ops/s
Iteration  20: 5804728.881 ops/s
Iteration  21: 6142202.034 ops/s
Iteration  22: 5994306.068 ops/s
Iteration  23: 6159489.275 ops/s
Iteration  24: 5948975.806 ops/s
Iteration  25: 6041768.119 ops/s
Iteration  26: 6047939.718 ops/s
Iteration  27: 6084537.107 ops/s
Iteration  28: 6055167.279 ops/s
Iteration  29: 6103225.956 ops/s
Iteration  30: 5897696.553 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStageTest._Benchmark.benchmark_syncSuccess":
  6043039.701 ±(99.9%) 82138.741 ops/s [Average]
  (min, avg, max) = (5804728.881, 6043039.701, 6284993.734), stdev = 122941.410
  CI (99.9%): [5960900.960, 6125178.442] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableFromCompletionStageTest._Benchmark.benchmark_syncSuccess  thrpt   30  6043039.701 ± 82138.741  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1445971.058 ops/s
# Warmup Iteration   2: 3965070.696 ops/s
# Warmup Iteration   3: 6201180.220 ops/s
# Warmup Iteration   4: 5904877.977 ops/s
# Warmup Iteration   5: 6248226.702 ops/s
# Warmup Iteration   6: 5910208.612 ops/s
# Warmup Iteration   7: 5989779.700 ops/s
# Warmup Iteration   8: 6188318.259 ops/s
# Warmup Iteration   9: 5808039.714 ops/s
# Warmup Iteration  10: 6173727.263 ops/s
# Warmup Iteration  11: 5848665.124 ops/s
# Warmup Iteration  12: 6396538.993 ops/s
# Warmup Iteration  13: 5239290.945 ops/s
# Warmup Iteration  14: 5505003.033 ops/s
# Warmup Iteration  15: 6165761.691 ops/s
# Warmup Iteration  16: 6117717.354 ops/s
# Warmup Iteration  17: 6254237.749 ops/s
# Warmup Iteration  18: 5996234.693 ops/s
# Warmup Iteration  19: 6041155.364 ops/s
# Warmup Iteration  20: 6279958.664 ops/s
# Warmup Iteration  21: 6008325.283 ops/s
# Warmup Iteration  22: 6143675.402 ops/s
# Warmup Iteration  23: 5778247.779 ops/s
# Warmup Iteration  24: 6009601.233 ops/s
# Warmup Iteration  25: 6195804.376 ops/s
# Warmup Iteration  26: 5909270.477 ops/s
# Warmup Iteration  27: 6208037.105 ops/s
# Warmup Iteration  28: 5922548.083 ops/s
# Warmup Iteration  29: 6184481.568 ops/s
# Warmup Iteration  30: 6003562.472 ops/s
Iteration   1: 6083695.841 ops/s
Iteration   2: 6132454.759 ops/s
Iteration   3: 5936854.081 ops/s
Iteration   4: 6260377.485 ops/s
Iteration   5: 6161501.278 ops/s
Iteration   6: 6062342.644 ops/s
Iteration   7: 6625059.255 ops/s
Iteration   8: 6040384.141 ops/s
Iteration   9: 6158870.298 ops/s
Iteration  10: 5982065.212 ops/s
Iteration  11: 6370191.937 ops/s
Iteration  12: 6592769.217 ops/s
Iteration  13: 6361588.377 ops/s
Iteration  14: 6213248.877 ops/s
Iteration  15: 5815806.274 ops/s
Iteration  16: 6181944.448 ops/s
Iteration  17: 5921821.358 ops/s
Iteration  18: 6147653.302 ops/s
Iteration  19: 6213070.925 ops/s
Iteration  20: 6050232.926 ops/s
Iteration  21: 6720248.345 ops/s
Iteration  22: 6152526.965 ops/s
Iteration  23: 6236036.169 ops/s
Iteration  24: 6080144.700 ops/s
Iteration  25: 6048225.155 ops/s
Iteration  26: 6182320.450 ops/s
Iteration  27: 6114818.686 ops/s
Iteration  28: 6144460.861 ops/s
Iteration  29: 6000326.204 ops/s
Iteration  30: 6224163.825 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_take":
  6173840.133 ±(99.9%) 134146.499 ops/s [Average]
  (min, avg, max) = (5815806.274, 6173840.133, 6720248.345), stdev = 200784.180
  CI (99.9%): [6039693.634, 6307986.633] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
ObservableFromCallableTest._Benchmark.benchmark_take  thrpt   30  6173840.133 ± 134146.499  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1648379.584 ops/s
# Warmup Iteration   2: 4350651.966 ops/s
# Warmup Iteration   3: 6294875.467 ops/s
# Warmup Iteration   4: 5919417.688 ops/s
# Warmup Iteration   5: 6202038.163 ops/s
# Warmup Iteration   6: 5902406.813 ops/s
# Warmup Iteration   7: 6092149.484 ops/s
# Warmup Iteration   8: 6229167.574 ops/s
# Warmup Iteration   9: 6205497.134 ops/s
# Warmup Iteration  10: 5970587.542 ops/s
# Warmup Iteration  11: 6155721.742 ops/s
# Warmup Iteration  12: 5879329.855 ops/s
# Warmup Iteration  13: 6050843.902 ops/s
# Warmup Iteration  14: 5993110.348 ops/s
# Warmup Iteration  15: 6135365.223 ops/s
# Warmup Iteration  16: 5989284.593 ops/s
# Warmup Iteration  17: 6045272.914 ops/s
# Warmup Iteration  18: 6098366.115 ops/s
# Warmup Iteration  19: 6206100.582 ops/s
# Warmup Iteration  20: 6147020.793 ops/s
# Warmup Iteration  21: 6260521.942 ops/s
# Warmup Iteration  22: 6022096.349 ops/s
# Warmup Iteration  23: 5948068.445 ops/s
# Warmup Iteration  24: 6087745.934 ops/s
# Warmup Iteration  25: 6247285.596 ops/s
# Warmup Iteration  26: 5895953.062 ops/s
# Warmup Iteration  27: 6282909.785 ops/s
# Warmup Iteration  28: 6241989.358 ops/s
# Warmup Iteration  29: 5966918.523 ops/s
# Warmup Iteration  30: 6288297.702 ops/s
Iteration   1: 5865072.926 ops/s
Iteration   2: 6111768.057 ops/s
Iteration   3: 6254411.298 ops/s
Iteration   4: 5979201.587 ops/s
Iteration   5: 6256886.746 ops/s
Iteration   6: 6104460.766 ops/s
Iteration   7: 5912478.492 ops/s
Iteration   8: 6237472.254 ops/s
Iteration   9: 6125465.299 ops/s
Iteration  10: 6228017.753 ops/s
Iteration  11: 6101096.105 ops/s
Iteration  12: 6271416.874 ops/s
Iteration  13: 6064520.985 ops/s
Iteration  14: 6259579.493 ops/s
Iteration  15: 6146007.265 ops/s
Iteration  16: 5857349.924 ops/s
Iteration  17: 6355591.704 ops/s
Iteration  18: 5946214.446 ops/s
Iteration  19: 6262322.504 ops/s
Iteration  20: 6190127.336 ops/s
Iteration  21: 6150986.484 ops/s
Iteration  22: 6161938.170 ops/s
Iteration  23: 6283794.754 ops/s
Iteration  24: 5997991.288 ops/s
Iteration  25: 6121306.786 ops/s
Iteration  26: 6042371.829 ops/s
Iteration  27: 6234980.627 ops/s
Iteration  28: 6025807.552 ops/s
Iteration  29: 6006020.650 ops/s
Iteration  30: 6383923.078 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_take":
  6131286.101 ±(99.9%) 93523.683 ops/s [Average]
  (min, avg, max) = (5857349.924, 6131286.101, 6383923.078), stdev = 139981.856
  CI (99.9%): [6037762.418, 6224809.784] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableFromSupplierTest._Benchmark.benchmark_take  thrpt   30  6131286.101 ± 93523.683  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_justWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_justWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 249524.487 ops/s
# Warmup Iteration   2: 508491.759 ops/s
# Warmup Iteration   3: 597295.666 ops/s
# Warmup Iteration   4: 594231.513 ops/s
# Warmup Iteration   5: 609227.913 ops/s
# Warmup Iteration   6: 583553.950 ops/s
# Warmup Iteration   7: 538768.740 ops/s
# Warmup Iteration   8: 534676.323 ops/s
# Warmup Iteration   9: 555669.457 ops/s
# Warmup Iteration  10: 575562.552 ops/s
# Warmup Iteration  11: 589199.920 ops/s
# Warmup Iteration  12: 587152.944 ops/s
# Warmup Iteration  13: 601432.770 ops/s
# Warmup Iteration  14: 587524.628 ops/s
# Warmup Iteration  15: 586341.159 ops/s
# Warmup Iteration  16: 587995.146 ops/s
# Warmup Iteration  17: 619834.438 ops/s
# Warmup Iteration  18: 586072.078 ops/s
# Warmup Iteration  19: 633778.244 ops/s
# Warmup Iteration  20: 589403.807 ops/s
# Warmup Iteration  21: 621158.749 ops/s
# Warmup Iteration  22: 608835.726 ops/s
# Warmup Iteration  23: 610413.030 ops/s
# Warmup Iteration  24: 615713.529 ops/s
# Warmup Iteration  25: 626437.527 ops/s
# Warmup Iteration  26: 596499.765 ops/s
# Warmup Iteration  27: 641034.628 ops/s
# Warmup Iteration  28: 612882.279 ops/s
# Warmup Iteration  29: 584027.725 ops/s
# Warmup Iteration  30: 611639.894 ops/s
Iteration   1: 613369.438 ops/s
Iteration   2: 602839.990 ops/s
Iteration   3: 612178.551 ops/s
Iteration   4: 598820.551 ops/s
Iteration   5: 652531.362 ops/s
Iteration   6: 618372.398 ops/s
Iteration   7: 588299.007 ops/s
Iteration   8: 600218.354 ops/s
Iteration   9: 631367.560 ops/s
Iteration  10: 615056.510 ops/s
Iteration  11: 607668.272 ops/s
Iteration  12: 609855.286 ops/s
Iteration  13: 623971.320 ops/s
Iteration  14: 597595.047 ops/s
Iteration  15: 612513.953 ops/s
Iteration  16: 614982.106 ops/s
Iteration  17: 637618.866 ops/s
Iteration  18: 628541.849 ops/s
Iteration  19: 591690.758 ops/s
Iteration  20: 626204.521 ops/s
Iteration  21: 600739.526 ops/s
Iteration  22: 628833.548 ops/s
Iteration  23: 598160.423 ops/s
Iteration  24: 647650.166 ops/s
Iteration  25: 625468.991 ops/s
Iteration  26: 606003.429 ops/s
Iteration  27: 618199.377 ops/s
Iteration  28: 613316.553 ops/s
Iteration  29: 641790.821 ops/s
Iteration  30: 600687.755 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_justWithError":
  615484.876 ±(99.9%) 10912.633 ops/s [Average]
  (min, avg, max) = (588299.007, 615484.876, 652531.362), stdev = 16333.517
  CI (99.9%): [604572.243, 626397.509] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
MaybeFlatMapBiSelectorTest._Benchmark.benchmark_justWithError  thrpt   30  615484.876 ± 10912.633  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_errorNotification$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_errorNotification

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 252946.813 ops/s
# Warmup Iteration   2: 574543.511 ops/s
# Warmup Iteration   3: 676104.507 ops/s
# Warmup Iteration   4: 724557.227 ops/s
# Warmup Iteration   5: 596007.920 ops/s
# Warmup Iteration   6: 733771.318 ops/s
# Warmup Iteration   7: 673687.856 ops/s
# Warmup Iteration   8: 752112.122 ops/s
# Warmup Iteration   9: 703865.235 ops/s
# Warmup Iteration  10: 726279.166 ops/s
# Warmup Iteration  11: 736602.799 ops/s
# Warmup Iteration  12: 713526.458 ops/s
# Warmup Iteration  13: 736054.019 ops/s
# Warmup Iteration  14: 697341.433 ops/s
# Warmup Iteration  15: 744514.948 ops/s
# Warmup Iteration  16: 725161.264 ops/s
# Warmup Iteration  17: 759760.986 ops/s
# Warmup Iteration  18: 786449.441 ops/s
# Warmup Iteration  19: 749943.875 ops/s
# Warmup Iteration  20: 778524.826 ops/s
# Warmup Iteration  21: 720727.190 ops/s
# Warmup Iteration  22: 782646.767 ops/s
# Warmup Iteration  23: 728700.790 ops/s
# Warmup Iteration  24: 739797.574 ops/s
# Warmup Iteration  25: 752228.812 ops/s
# Warmup Iteration  26: 731782.330 ops/s
# Warmup Iteration  27: 806948.224 ops/s
# Warmup Iteration  28: 729250.302 ops/s
# Warmup Iteration  29: 784623.563 ops/s
# Warmup Iteration  30: 745027.210 ops/s
Iteration   1: 783357.225 ops/s
Iteration   2: 773354.408 ops/s
Iteration   3: 760397.718 ops/s
Iteration   4: 787683.312 ops/s
Iteration   5: 778651.020 ops/s
Iteration   6: 738636.724 ops/s
Iteration   7: 768681.024 ops/s
Iteration   8: 732067.334 ops/s
Iteration   9: 789817.699 ops/s
Iteration  10: 738349.829 ops/s
Iteration  11: 748554.739 ops/s
Iteration  12: 774938.083 ops/s
Iteration  13: 745570.113 ops/s
Iteration  14: 763217.426 ops/s
Iteration  15: 766986.640 ops/s
Iteration  16: 761850.098 ops/s
Iteration  17: 754744.333 ops/s
Iteration  18: 778077.089 ops/s
Iteration  19: 746795.525 ops/s
Iteration  20: 745607.695 ops/s
Iteration  21: 772404.333 ops/s
Iteration  22: 759369.562 ops/s
Iteration  23: 788136.977 ops/s
Iteration  24: 796089.496 ops/s
Iteration  25: 736611.185 ops/s
Iteration  26: 772779.734 ops/s
Iteration  27: 770803.500 ops/s
Iteration  28: 727081.099 ops/s
Iteration  29: 800145.888 ops/s
Iteration  30: 755813.459 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_errorNotification":
  763885.776 ±(99.9%) 13132.384 ops/s [Average]
  (min, avg, max) = (727081.099, 763885.776, 800145.888), stdev = 19655.936
  CI (99.9%): [750753.391, 777018.160] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
MaybeDematerializeTest._Benchmark.benchmark_errorNotification  thrpt   30  763885.776 ± 13132.384  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalJustConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalJustConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 820857.570 ops/s
# Warmup Iteration   2: 4272331.007 ops/s
# Warmup Iteration   3: 4242141.465 ops/s
# Warmup Iteration   4: 6039044.450 ops/s
# Warmup Iteration   5: 6339795.484 ops/s
# Warmup Iteration   6: 6367221.208 ops/s
# Warmup Iteration   7: 6117119.134 ops/s
# Warmup Iteration   8: 6307269.759 ops/s
# Warmup Iteration   9: 6313456.805 ops/s
# Warmup Iteration  10: 6307771.011 ops/s
# Warmup Iteration  11: 6089645.468 ops/s
# Warmup Iteration  12: 6129214.663 ops/s
# Warmup Iteration  13: 6421919.790 ops/s
# Warmup Iteration  14: 6114068.154 ops/s
# Warmup Iteration  15: 6520418.781 ops/s
# Warmup Iteration  16: 6045954.553 ops/s
# Warmup Iteration  17: 6103612.844 ops/s
# Warmup Iteration  18: 6205880.873 ops/s
# Warmup Iteration  19: 6442806.051 ops/s
# Warmup Iteration  20: 6179951.143 ops/s
# Warmup Iteration  21: 6405578.443 ops/s
# Warmup Iteration  22: 6073141.820 ops/s
# Warmup Iteration  23: 6095849.349 ops/s
# Warmup Iteration  24: 6284484.139 ops/s
# Warmup Iteration  25: 6305311.346 ops/s
# Warmup Iteration  26: 6148869.966 ops/s
# Warmup Iteration  27: 6133788.217 ops/s
# Warmup Iteration  28: 6341284.550 ops/s
# Warmup Iteration  29: 6116092.525 ops/s
# Warmup Iteration  30: 6438300.686 ops/s
Iteration   1: 6064401.214 ops/s
Iteration   2: 6220345.620 ops/s
Iteration   3: 6205617.651 ops/s
Iteration   4: 6330769.720 ops/s
Iteration   5: 6260334.763 ops/s
Iteration   6: 6146223.076 ops/s
Iteration   7: 6471654.716 ops/s
Iteration   8: 6104698.997 ops/s
Iteration   9: 6481155.097 ops/s
Iteration  10: 6284259.911 ops/s
Iteration  11: 6147453.828 ops/s
Iteration  12: 6485181.603 ops/s
Iteration  13: 6033469.672 ops/s
Iteration  14: 6130404.685 ops/s
Iteration  15: 6059033.359 ops/s
Iteration  16: 6214585.689 ops/s
Iteration  17: 6173711.074 ops/s
Iteration  18: 6305859.006 ops/s
Iteration  19: 6123653.176 ops/s
Iteration  20: 6366093.573 ops/s
Iteration  21: 6178173.214 ops/s
Iteration  22: 6235919.236 ops/s
Iteration  23: 6485350.319 ops/s
Iteration  24: 6192019.424 ops/s
Iteration  25: 6320924.864 ops/s
Iteration  26: 6048994.246 ops/s
Iteration  27: 6331652.785 ops/s
Iteration  28: 6260049.721 ops/s
Iteration  29: 6120695.421 ops/s
Iteration  30: 6296963.459 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalJustConditional":
  6235988.304 ±(99.9%) 88774.914 ops/s [Average]
  (min, avg, max) = (6033469.672, 6235988.304, 6485350.319), stdev = 132874.122
  CI (99.9%): [6147213.390, 6324763.218] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MaybeDoFinallyTest._Benchmark.benchmark_normalJustConditional  thrpt   30  6235988.304 ± 88774.914  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_justConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_justConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 536402.218 ops/s
# Warmup Iteration   2: 2983116.492 ops/s
# Warmup Iteration   3: 4336530.543 ops/s
# Warmup Iteration   4: 4149811.593 ops/s
# Warmup Iteration   5: 4177059.212 ops/s
# Warmup Iteration   6: 4278883.295 ops/s
# Warmup Iteration   7: 4144024.946 ops/s
# Warmup Iteration   8: 4253826.992 ops/s
# Warmup Iteration   9: 3787009.076 ops/s
# Warmup Iteration  10: 4050486.803 ops/s
# Warmup Iteration  11: 4406089.991 ops/s
# Warmup Iteration  12: 4098378.949 ops/s
# Warmup Iteration  13: 4006732.708 ops/s
# Warmup Iteration  14: 4228632.783 ops/s
# Warmup Iteration  15: 4196425.450 ops/s
# Warmup Iteration  16: 4381554.716 ops/s
# Warmup Iteration  17: 4261815.506 ops/s
# Warmup Iteration  18: 4123665.775 ops/s
# Warmup Iteration  19: 4330377.653 ops/s
# Warmup Iteration  20: 4102216.976 ops/s
# Warmup Iteration  21: 4300097.570 ops/s
# Warmup Iteration  22: 4179194.687 ops/s
# Warmup Iteration  23: 4267304.283 ops/s
# Warmup Iteration  24: 4335743.272 ops/s
# Warmup Iteration  25: 4186114.651 ops/s
# Warmup Iteration  26: 4278353.781 ops/s
# Warmup Iteration  27: 4224582.832 ops/s
# Warmup Iteration  28: 4142220.818 ops/s
# Warmup Iteration  29: 4247135.331 ops/s
# Warmup Iteration  30: 4308780.579 ops/s
Iteration   1: 4133080.266 ops/s
Iteration   2: 4467669.898 ops/s
Iteration   3: 4326544.150 ops/s
Iteration   4: 4306597.432 ops/s
Iteration   5: 4193828.858 ops/s
Iteration   6: 4366125.146 ops/s
Iteration   7: 4174026.447 ops/s
Iteration   8: 4287540.072 ops/s
Iteration   9: 4370446.804 ops/s
Iteration  10: 4148521.541 ops/s
Iteration  11: 4430414.970 ops/s
Iteration  12: 4247329.047 ops/s
Iteration  13: 4372428.249 ops/s
Iteration  14: 4353937.882 ops/s
Iteration  15: 4394082.667 ops/s
Iteration  16: 4165022.210 ops/s
Iteration  17: 4360698.270 ops/s
Iteration  18: 4038611.905 ops/s
Iteration  19: 4388925.455 ops/s
Iteration  20: 4208655.696 ops/s
Iteration  21: 4342239.467 ops/s
Iteration  22: 4266215.975 ops/s
Iteration  23: 4203429.277 ops/s
Iteration  24: 4380459.927 ops/s
Iteration  25: 4078823.519 ops/s
Iteration  26: 4286687.297 ops/s
Iteration  27: 4224959.085 ops/s
Iteration  28: 4269881.971 ops/s
Iteration  29: 4405224.844 ops/s
Iteration  30: 3444535.169 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_justConditional":
  4254564.783 ±(99.9%) 124985.720 ops/s [Average]
  (min, avg, max) = (3444535.169, 4254564.783, 4467669.898), stdev = 187072.755
  CI (99.9%): [4129579.064, 4379550.503] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
MaybeDoAfterSuccessTest._Benchmark.benchmark_justConditional  thrpt   30  4254564.783 ± 124985.720  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorResumeNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorResumeNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 304146.792 ops/s
# Warmup Iteration   2: 585053.703 ops/s
# Warmup Iteration   3: 698761.604 ops/s
# Warmup Iteration   4: 666048.896 ops/s
# Warmup Iteration   5: 713541.057 ops/s
# Warmup Iteration   6: 669714.039 ops/s
# Warmup Iteration   7: 683542.006 ops/s
# Warmup Iteration   8: 705267.214 ops/s
# Warmup Iteration   9: 637011.021 ops/s
# Warmup Iteration  10: 668960.225 ops/s
# Warmup Iteration  11: 679846.946 ops/s
# Warmup Iteration  12: 681362.776 ops/s
# Warmup Iteration  13: 680193.581 ops/s
# Warmup Iteration  14: 693901.717 ops/s
# Warmup Iteration  15: 704245.977 ops/s
# Warmup Iteration  16: 638478.429 ops/s
# Warmup Iteration  17: 732948.222 ops/s
# Warmup Iteration  18: 730136.574 ops/s
# Warmup Iteration  19: 751447.479 ops/s
# Warmup Iteration  20: 719305.958 ops/s
# Warmup Iteration  21: 722209.744 ops/s
# Warmup Iteration  22: 751558.493 ops/s
# Warmup Iteration  23: 705223.089 ops/s
# Warmup Iteration  24: 736264.034 ops/s
# Warmup Iteration  25: 720351.477 ops/s
# Warmup Iteration  26: 729386.646 ops/s
# Warmup Iteration  27: 741189.138 ops/s
# Warmup Iteration  28: 698725.696 ops/s
# Warmup Iteration  29: 733880.468 ops/s
# Warmup Iteration  30: 696238.877 ops/s
Iteration   1: 727508.344 ops/s
Iteration   2: 715956.180 ops/s
Iteration   3: 748970.669 ops/s
Iteration   4: 733920.806 ops/s
Iteration   5: 711558.704 ops/s
Iteration   6: 748698.368 ops/s
Iteration   7: 722053.689 ops/s
Iteration   8: 737795.149 ops/s
Iteration   9: 727896.509 ops/s
Iteration  10: 705929.296 ops/s
Iteration  11: 749906.322 ops/s
Iteration  12: 735456.313 ops/s
Iteration  13: 711766.207 ops/s
Iteration  14: 721752.057 ops/s
Iteration  15: 730075.620 ops/s
Iteration  16: 734190.930 ops/s
Iteration  17: 712551.845 ops/s
Iteration  18: 732169.045 ops/s
Iteration  19: 735492.696 ops/s
Iteration  20: 741302.047 ops/s
Iteration  21: 737441.970 ops/s
Iteration  22: 727780.012 ops/s
Iteration  23: 738338.537 ops/s
Iteration  24: 674810.669 ops/s
Iteration  25: 739068.399 ops/s
Iteration  26: 714358.302 ops/s
Iteration  27: 734348.377 ops/s
Iteration  28: 752374.692 ops/s
Iteration  29: 708402.475 ops/s
Iteration  30: 755890.952 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorResumeNext":
  728925.506 ±(99.9%) 11378.626 ops/s [Average]
  (min, avg, max) = (674810.669, 728925.506, 755890.952), stdev = 17030.992
  CI (99.9%): [717546.880, 740304.132] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorResumeNext  thrpt   30  728925.506 ± 11378.626  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1890309.831 ops/s
# Warmup Iteration   2: 4874112.163 ops/s
# Warmup Iteration   3: 6820339.287 ops/s
# Warmup Iteration   4: 6745193.213 ops/s
# Warmup Iteration   5: 6577196.193 ops/s
# Warmup Iteration   6: 6996608.536 ops/s
# Warmup Iteration   7: 6702477.666 ops/s
# Warmup Iteration   8: 6883569.150 ops/s
# Warmup Iteration   9: 6318787.837 ops/s
# Warmup Iteration  10: 7068113.565 ops/s
# Warmup Iteration  11: 6714181.985 ops/s
# Warmup Iteration  12: 6802862.048 ops/s
# Warmup Iteration  13: 6811764.728 ops/s
# Warmup Iteration  14: 6945957.694 ops/s
# Warmup Iteration  15: 6667791.371 ops/s
# Warmup Iteration  16: 6899948.597 ops/s
# Warmup Iteration  17: 6950848.017 ops/s
# Warmup Iteration  18: 6747651.200 ops/s
# Warmup Iteration  19: 6764721.589 ops/s
# Warmup Iteration  20: 7004349.565 ops/s
# Warmup Iteration  21: 6616265.839 ops/s
# Warmup Iteration  22: 6739844.637 ops/s
# Warmup Iteration  23: 6993207.468 ops/s
# Warmup Iteration  24: 6470097.958 ops/s
# Warmup Iteration  25: 6988145.043 ops/s
# Warmup Iteration  26: 6876511.282 ops/s
# Warmup Iteration  27: 6535472.231 ops/s
# Warmup Iteration  28: 7002908.594 ops/s
# Warmup Iteration  29: 6512248.094 ops/s
# Warmup Iteration  30: 6998282.600 ops/s
Iteration   1: 7032659.404 ops/s
Iteration   2: 6562398.650 ops/s
Iteration   3: 7151066.821 ops/s
Iteration   4: 6717625.569 ops/s
Iteration   5: 6539901.160 ops/s
Iteration   6: 6889393.825 ops/s
Iteration   7: 6878646.621 ops/s
Iteration   8: 6898420.480 ops/s
Iteration   9: 6709589.232 ops/s
Iteration  10: 6917601.123 ops/s
Iteration  11: 6910874.013 ops/s
Iteration  12: 6678082.874 ops/s
Iteration  13: 6899774.334 ops/s
Iteration  14: 6772079.408 ops/s
Iteration  15: 6655762.041 ops/s
Iteration  16: 7137418.492 ops/s
Iteration  17: 6709106.273 ops/s
Iteration  18: 6796939.807 ops/s
Iteration  19: 6925161.473 ops/s
Iteration  20: 6875671.028 ops/s
Iteration  21: 7052535.406 ops/s
Iteration  22: 6755074.282 ops/s
Iteration  23: 6954138.785 ops/s
Iteration  24: 6573081.352 ops/s
Iteration  25: 5698078.815 ops/s
Iteration  26: 6990320.886 ops/s
Iteration  27: 6488881.310 ops/s
Iteration  28: 7071897.934 ops/s
Iteration  29: 6709234.557 ops/s
Iteration  30: 6760663.283 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_normal":
  6790402.641 ±(99.9%) 180879.938 ops/s [Average]
  (min, avg, max) = (5698078.815, 6790402.641, 7151066.821), stdev = 270732.596
  CI (99.9%): [6609522.703, 6971282.579] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score        Error  Units
MaybeOfTypeTest._Benchmark.benchmark_normal  thrpt   30  6790402.641 ± 180879.938  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_normalDowncast$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_normalDowncast

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1592692.898 ops/s
# Warmup Iteration   2: 4683164.896 ops/s
# Warmup Iteration   3: 6700858.178 ops/s
# Warmup Iteration   4: 6538324.332 ops/s
# Warmup Iteration   5: 6741809.904 ops/s
# Warmup Iteration   6: 6794667.551 ops/s
# Warmup Iteration   7: 6586409.101 ops/s
# Warmup Iteration   8: 6906474.957 ops/s
# Warmup Iteration   9: 7055595.980 ops/s
# Warmup Iteration  10: 6623293.994 ops/s
# Warmup Iteration  11: 6819666.281 ops/s
# Warmup Iteration  12: 6743659.688 ops/s
# Warmup Iteration  13: 6787350.144 ops/s
# Warmup Iteration  14: 6907583.518 ops/s
# Warmup Iteration  15: 6648872.367 ops/s
# Warmup Iteration  16: 6968483.385 ops/s
# Warmup Iteration  17: 6587786.860 ops/s
# Warmup Iteration  18: 6737343.513 ops/s
# Warmup Iteration  19: 6820123.447 ops/s
# Warmup Iteration  20: 6593356.150 ops/s
# Warmup Iteration  21: 6576343.496 ops/s
# Warmup Iteration  22: 7033407.680 ops/s
# Warmup Iteration  23: 6671582.962 ops/s
# Warmup Iteration  24: 6628267.448 ops/s
# Warmup Iteration  25: 7163375.864 ops/s
# Warmup Iteration  26: 6672224.404 ops/s
# Warmup Iteration  27: 6922080.454 ops/s
# Warmup Iteration  28: 6562134.089 ops/s
# Warmup Iteration  29: 6655754.998 ops/s
# Warmup Iteration  30: 7149029.438 ops/s
Iteration   1: 6551280.367 ops/s
Iteration   2: 6877132.740 ops/s
Iteration   3: 6732061.463 ops/s
Iteration   4: 6782095.083 ops/s
Iteration   5: 6910340.068 ops/s
Iteration   6: 6546303.281 ops/s
Iteration   7: 6729054.473 ops/s
Iteration   8: 6957995.314 ops/s
Iteration   9: 6622172.776 ops/s
Iteration  10: 7035701.380 ops/s
Iteration  11: 6613430.863 ops/s
Iteration  12: 6865395.178 ops/s
Iteration  13: 6728005.778 ops/s
Iteration  14: 6591247.812 ops/s
Iteration  15: 7005443.428 ops/s
Iteration  16: 6557343.536 ops/s
Iteration  17: 7102860.094 ops/s
Iteration  18: 6674590.483 ops/s
Iteration  19: 6834198.238 ops/s
Iteration  20: 6574958.111 ops/s
Iteration  21: 6639362.542 ops/s
Iteration  22: 7051206.153 ops/s
Iteration  23: 6956328.262 ops/s
Iteration  24: 6722367.017 ops/s
Iteration  25: 6788606.999 ops/s
Iteration  26: 6756471.706 ops/s
Iteration  27: 6824316.130 ops/s
Iteration  28: 6777121.992 ops/s
Iteration  29: 6755442.665 ops/s
Iteration  30: 6869707.895 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_normalDowncast":
  6781084.728 ±(99.9%) 106239.551 ops/s [Average]
  (min, avg, max) = (6546303.281, 6781084.728, 7102860.094), stdev = 159014.370
  CI (99.9%): [6674845.177, 6887324.278] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
MaybeOfTypeTest._Benchmark.benchmark_normalDowncast  thrpt   30  6781084.728 ± 106239.551  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_disposeDuringDelay$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_disposeDuringDelay

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 443561.875 ops/s
# Warmup Iteration   2: 1741321.798 ops/s
# Warmup Iteration   3: 2397866.371 ops/s
# Warmup Iteration   4: 2621125.681 ops/s
# Warmup Iteration   5: 2767445.774 ops/s
# Warmup Iteration   6: 2735404.747 ops/s
# Warmup Iteration   7: 2575708.751 ops/s
# Warmup Iteration   8: 2732584.132 ops/s
# Warmup Iteration   9: 2658214.168 ops/s
# Warmup Iteration  10: 2699298.790 ops/s
# Warmup Iteration  11: 2768449.387 ops/s
# Warmup Iteration  12: 2638069.865 ops/s
# Warmup Iteration  13: 2720066.108 ops/s
# Warmup Iteration  14: 2705203.341 ops/s
# Warmup Iteration  15: 2709971.989 ops/s
# Warmup Iteration  16: 2784660.460 ops/s
# Warmup Iteration  17: 2597709.618 ops/s
# Warmup Iteration  18: 2721766.144 ops/s
# Warmup Iteration  19: 2700083.502 ops/s
# Warmup Iteration  20: 2710193.810 ops/s
# Warmup Iteration  21: 2709387.258 ops/s
# Warmup Iteration  22: 2671331.434 ops/s
# Warmup Iteration  23: 2818317.941 ops/s
# Warmup Iteration  24: 2654088.749 ops/s
# Warmup Iteration  25: 2778866.329 ops/s
# Warmup Iteration  26: 2833548.279 ops/s
# Warmup Iteration  27: 2610361.053 ops/s
# Warmup Iteration  28: 2785338.603 ops/s
# Warmup Iteration  29: 2725830.127 ops/s
# Warmup Iteration  30: 2687200.786 ops/s
Iteration   1: 2732557.763 ops/s
Iteration   2: 2611094.941 ops/s
Iteration   3: 2654858.363 ops/s
Iteration   4: 2836284.361 ops/s
Iteration   5: 2670058.383 ops/s
Iteration   6: 2749241.697 ops/s
Iteration   7: 2752527.493 ops/s
Iteration   8: 2754532.024 ops/s
Iteration   9: 2730619.152 ops/s
Iteration  10: 2670398.299 ops/s
Iteration  11: 2667199.712 ops/s
Iteration  12: 2808452.499 ops/s
Iteration  13: 2617356.876 ops/s
Iteration  14: 2692374.190 ops/s
Iteration  15: 2739515.815 ops/s
Iteration  16: 2713583.804 ops/s
Iteration  17: 2678925.289 ops/s
Iteration  18: 2731011.657 ops/s
Iteration  19: 2504245.325 ops/s
Iteration  20: 2459868.775 ops/s
Iteration  21: 2635655.308 ops/s
Iteration  22: 2666067.059 ops/s
Iteration  23: 2743357.670 ops/s
Iteration  24: 2577340.901 ops/s
Iteration  25: 2755684.898 ops/s
Iteration  26: 2663713.504 ops/s
Iteration  27: 2732821.558 ops/s
Iteration  28: 2746205.540 ops/s
Iteration  29: 2610853.693 ops/s
Iteration  30: 2756528.303 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_disposeDuringDelay":
  2688764.495 ±(99.9%) 54996.945 ops/s [Average]
  (min, avg, max) = (2459868.775, 2688764.495, 2836284.361), stdev = 82316.844
  CI (99.9%): [2633767.550, 2743761.440] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MaybeDelayTest._Benchmark.benchmark_disposeDuringDelay  thrpt   30  2688764.495 ± 54996.945  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.782 ops/s
# Warmup Iteration   2: 30535.872 ops/s
# Warmup Iteration   3: 76843.349 ops/s
# Warmup Iteration   4: 143255.306 ops/s
# Warmup Iteration   5: 176901.002 ops/s
# Warmup Iteration   6: 179912.056 ops/s
# Warmup Iteration   7: 217318.048 ops/s
# Warmup Iteration   8: 359382.221 ops/s
# Warmup Iteration   9: 431559.220 ops/s
# Warmup Iteration  10: 401072.082 ops/s
# Warmup Iteration  11: 385727.660 ops/s
# Warmup Iteration  12: 436695.189 ops/s
# Warmup Iteration  13: 425052.736 ops/s
# Warmup Iteration  14: 455518.993 ops/s
# Warmup Iteration  15: 426764.457 ops/s
# Warmup Iteration  16: 443327.819 ops/s
# Warmup Iteration  17: 431970.515 ops/s
# Warmup Iteration  18: 434215.049 ops/s
# Warmup Iteration  19: 441738.288 ops/s
# Warmup Iteration  20: 441720.662 ops/s
# Warmup Iteration  21: 455700.896 ops/s
# Warmup Iteration  22: 433351.408 ops/s
# Warmup Iteration  23: 418195.908 ops/s
# Warmup Iteration  24: 444452.875 ops/s
# Warmup Iteration  25: 452924.046 ops/s
# Warmup Iteration  26: 419362.938 ops/s
# Warmup Iteration  27: 446750.722 ops/s
# Warmup Iteration  28: 434195.343 ops/s
# Warmup Iteration  29: 447280.295 ops/s
# Warmup Iteration  30: 429196.308 ops/s
Iteration   1: 445830.361 ops/s
Iteration   2: 424624.517 ops/s
Iteration   3: 425369.796 ops/s
Iteration   4: 444959.227 ops/s
Iteration   5: 429849.519 ops/s
Iteration   6: 427583.905 ops/s
Iteration   7: 446374.655 ops/s
Iteration   8: 437184.262 ops/s
Iteration   9: 447888.411 ops/s
Iteration  10: 438862.209 ops/s
Iteration  11: 439322.382 ops/s
Iteration  12: 437581.549 ops/s
Iteration  13: 436414.524 ops/s
Iteration  14: 440760.811 ops/s
Iteration  15: 420521.834 ops/s
Iteration  16: 441629.809 ops/s
Iteration  17: 439416.332 ops/s
Iteration  18: 424682.923 ops/s
Iteration  19: 441145.280 ops/s
Iteration  20: 433504.970 ops/s
Iteration  21: 457022.148 ops/s
Iteration  22: 422325.215 ops/s
Iteration  23: 431921.208 ops/s
Iteration  24: 449707.312 ops/s
Iteration  25: 430817.365 ops/s
Iteration  26: 443745.343 ops/s
Iteration  27: 425709.234 ops/s
Iteration  28: 445424.237 ops/s
Iteration  29: 420677.514 ops/s
Iteration  30: 426645.047 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_dispose":
  435916.730 ±(99.9%) 6451.080 ops/s [Average]
  (min, avg, max) = (420521.834, 435916.730, 457022.148), stdev = 9655.674
  CI (99.9%): [429465.650, 442367.810] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ObservableSampleTest._Benchmark.benchmark_dispose  thrpt   30  435916.730 ± 6451.080  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_streamCloseCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_streamCloseCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38501.026 ops/s
# Warmup Iteration   2: 173008.870 ops/s
# Warmup Iteration   3: 214080.082 ops/s
# Warmup Iteration   4: 212142.775 ops/s
# Warmup Iteration   5: 210969.776 ops/s
# Warmup Iteration   6: 213299.592 ops/s
# Warmup Iteration   7: 223331.365 ops/s
# Warmup Iteration   8: 207394.885 ops/s
# Warmup Iteration   9: 209268.118 ops/s
# Warmup Iteration  10: 214598.351 ops/s
# Warmup Iteration  11: 213386.674 ops/s
# Warmup Iteration  12: 210362.644 ops/s
# Warmup Iteration  13: 212022.407 ops/s
# Warmup Iteration  14: 211033.063 ops/s
# Warmup Iteration  15: 208469.701 ops/s
# Warmup Iteration  16: 215231.232 ops/s
# Warmup Iteration  17: 219075.319 ops/s
# Warmup Iteration  18: 220859.531 ops/s
# Warmup Iteration  19: 222569.451 ops/s
# Warmup Iteration  20: 224388.341 ops/s
# Warmup Iteration  21: 225749.515 ops/s
# Warmup Iteration  22: 217201.952 ops/s
# Warmup Iteration  23: 235167.325 ops/s
# Warmup Iteration  24: 223503.224 ops/s
# Warmup Iteration  25: 220270.434 ops/s
# Warmup Iteration  26: 218671.901 ops/s
# Warmup Iteration  27: 204445.773 ops/s
# Warmup Iteration  28: 222112.410 ops/s
# Warmup Iteration  29: 230160.862 ops/s
# Warmup Iteration  30: 215561.892 ops/s
Iteration   1: 231729.428 ops/s
Iteration   2: 218946.303 ops/s
Iteration   3: 234800.634 ops/s
Iteration   4: 214171.184 ops/s
Iteration   5: 226003.132 ops/s
Iteration   6: 223941.968 ops/s
Iteration   7: 229369.197 ops/s
Iteration   8: 227047.091 ops/s
Iteration   9: 223299.383 ops/s
Iteration  10: 214703.576 ops/s
Iteration  11: 221465.336 ops/s
Iteration  12: 226641.316 ops/s
Iteration  13: 220474.627 ops/s
Iteration  14: 190888.264 ops/s
Iteration  15: 216830.800 ops/s
Iteration  16: 230116.229 ops/s
Iteration  17: 221156.098 ops/s
Iteration  18: 222462.737 ops/s
Iteration  19: 233021.079 ops/s
Iteration  20: 217728.104 ops/s
Iteration  21: 226772.377 ops/s
Iteration  22: 221025.150 ops/s
Iteration  23: 230329.631 ops/s
Iteration  24: 216915.519 ops/s
Iteration  25: 230626.251 ops/s
Iteration  26: 212053.946 ops/s
Iteration  27: 217855.941 ops/s
Iteration  28: 226188.181 ops/s
Iteration  29: 223097.557 ops/s
Iteration  30: 225125.086 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_streamCloseCrash":
  222492.871 ±(99.9%) 5603.112 ops/s [Average]
  (min, avg, max) = (190888.264, 222492.871, 234800.634), stdev = 8386.475
  CI (99.9%): [216889.759, 228095.983] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_streamCloseCrash  thrpt   30  222492.871 ± 5603.112  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedCancelledUpfront$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedCancelledUpfront

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.824 ops/s
# Warmup Iteration   2: 40810.784 ops/s
# Warmup Iteration   3: 170242.828 ops/s
# Warmup Iteration   4: 232932.892 ops/s
# Warmup Iteration   5: 243960.364 ops/s
# Warmup Iteration   6: 324134.222 ops/s
# Warmup Iteration   7: 777103.177 ops/s
# Warmup Iteration   8: 834060.355 ops/s
# Warmup Iteration   9: 799217.557 ops/s
# Warmup Iteration  10: 768359.419 ops/s
# Warmup Iteration  11: 792629.395 ops/s
# Warmup Iteration  12: 802300.054 ops/s
# Warmup Iteration  13: 785365.811 ops/s
# Warmup Iteration  14: 835514.983 ops/s
# Warmup Iteration  15: 781400.417 ops/s
# Warmup Iteration  16: 842646.703 ops/s
# Warmup Iteration  17: 809793.824 ops/s
# Warmup Iteration  18: 803891.916 ops/s
# Warmup Iteration  19: 774988.033 ops/s
# Warmup Iteration  20: 830893.533 ops/s
# Warmup Iteration  21: 766922.479 ops/s
# Warmup Iteration  22: 825167.915 ops/s
# Warmup Iteration  23: 834951.549 ops/s
# Warmup Iteration  24: 797477.194 ops/s
# Warmup Iteration  25: 794361.612 ops/s
# Warmup Iteration  26: 798666.166 ops/s
# Warmup Iteration  27: 786154.158 ops/s
# Warmup Iteration  28: 832651.701 ops/s
# Warmup Iteration  29: 826119.494 ops/s
# Warmup Iteration  30: 755000.743 ops/s
Iteration   1: 819715.791 ops/s
Iteration   2: 794361.700 ops/s
Iteration   3: 817685.302 ops/s
Iteration   4: 830837.074 ops/s
Iteration   5: 787379.010 ops/s
Iteration   6: 825233.073 ops/s
Iteration   7: 771943.461 ops/s
Iteration   8: 822289.160 ops/s
Iteration   9: 789962.759 ops/s
Iteration  10: 804213.145 ops/s
Iteration  11: 840713.039 ops/s
Iteration  12: 823966.661 ops/s
Iteration  13: 785049.690 ops/s
Iteration  14: 791374.422 ops/s
Iteration  15: 833385.672 ops/s
Iteration  16: 779388.826 ops/s
Iteration  17: 803042.614 ops/s
Iteration  18: 840828.467 ops/s
Iteration  19: 776306.604 ops/s
Iteration  20: 816123.550 ops/s
Iteration  21: 801044.328 ops/s
Iteration  22: 823577.328 ops/s
Iteration  23: 780119.085 ops/s
Iteration  24: 798516.473 ops/s
Iteration  25: 801120.631 ops/s
Iteration  26: 789443.940 ops/s
Iteration  27: 796403.408 ops/s
Iteration  28: 799007.566 ops/s
Iteration  29: 840665.278 ops/s
Iteration  30: 774470.773 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedCancelledUpfront":
  805272.294 ±(99.9%) 14146.757 ops/s [Average]
  (min, avg, max) = (771943.461, 805272.294, 840828.467), stdev = 21174.201
  CI (99.9%): [791125.538, 819419.051] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
ObservableBufferTest._Benchmark.benchmark_timedCancelledUpfront  thrpt   30  805272.294 ± 14146.757  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 435721.063 ops/s
# Warmup Iteration   2: 2236565.042 ops/s
# Warmup Iteration   3: 3181235.815 ops/s
# Warmup Iteration   4: 3331302.661 ops/s
# Warmup Iteration   5: 3447059.985 ops/s
# Warmup Iteration   6: 3457117.002 ops/s
# Warmup Iteration   7: 3494197.951 ops/s
# Warmup Iteration   8: 3278139.866 ops/s
# Warmup Iteration   9: 3392145.707 ops/s
# Warmup Iteration  10: 3509128.496 ops/s
# Warmup Iteration  11: 3261189.654 ops/s
# Warmup Iteration  12: 3410573.449 ops/s
# Warmup Iteration  13: 3465637.409 ops/s
# Warmup Iteration  14: 3424345.209 ops/s
# Warmup Iteration  15: 3343199.492 ops/s
# Warmup Iteration  16: 3581051.850 ops/s
# Warmup Iteration  17: 3298569.223 ops/s
# Warmup Iteration  18: 3478977.334 ops/s
# Warmup Iteration  19: 3445744.048 ops/s
# Warmup Iteration  20: 3399902.076 ops/s
# Warmup Iteration  21: 3491204.718 ops/s
# Warmup Iteration  22: 3408408.727 ops/s
# Warmup Iteration  23: 3266856.686 ops/s
# Warmup Iteration  24: 3418000.566 ops/s
# Warmup Iteration  25: 3241916.084 ops/s
# Warmup Iteration  26: 3500492.281 ops/s
# Warmup Iteration  27: 3528999.289 ops/s
# Warmup Iteration  28: 3542887.838 ops/s
# Warmup Iteration  29: 3346299.880 ops/s
# Warmup Iteration  30: 3575914.884 ops/s
Iteration   1: 3306846.262 ops/s
Iteration   2: 3503026.311 ops/s
Iteration   3: 3462230.648 ops/s
Iteration   4: 3373616.402 ops/s
Iteration   5: 3568626.397 ops/s
Iteration   6: 3358357.314 ops/s
Iteration   7: 3527877.366 ops/s
Iteration   8: 2815028.964 ops/s
Iteration   9: 3354164.279 ops/s
Iteration  10: 3553118.082 ops/s
Iteration  11: 3376014.436 ops/s
Iteration  12: 3496032.775 ops/s
Iteration  13: 3297794.458 ops/s
Iteration  14: 3410634.837 ops/s
Iteration  15: 3339680.070 ops/s
Iteration  16: 3457419.284 ops/s
Iteration  17: 3255653.807 ops/s
Iteration  18: 3553928.574 ops/s
Iteration  19: 3355213.170 ops/s
Iteration  20: 3325436.334 ops/s
Iteration  21: 3515303.891 ops/s
Iteration  22: 3411877.698 ops/s
Iteration  23: 3401389.446 ops/s
Iteration  24: 3477787.265 ops/s
Iteration  25: 3377628.498 ops/s
Iteration  26: 3456850.951 ops/s
Iteration  27: 3450026.023 ops/s
Iteration  28: 3474132.921 ops/s
Iteration  29: 3379566.799 ops/s
Iteration  30: 3594176.471 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapDelayError":
  3407647.991 ±(99.9%) 94899.450 ops/s [Average]
  (min, avg, max) = (2815028.964, 3407647.991, 3594176.471), stdev = 142041.040
  CI (99.9%): [3312748.541, 3502547.441] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_concatMapDelayError  thrpt   30  3407647.991 ± 94899.450  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatArrayDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatArrayDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 177706.178 ops/s
# Warmup Iteration   2: 1655019.268 ops/s
# Warmup Iteration   3: 2422646.884 ops/s
# Warmup Iteration   4: 3385921.036 ops/s
# Warmup Iteration   5: 3356304.870 ops/s
# Warmup Iteration   6: 3359566.434 ops/s
# Warmup Iteration   7: 3345677.440 ops/s
# Warmup Iteration   8: 3256704.604 ops/s
# Warmup Iteration   9: 3388713.716 ops/s
# Warmup Iteration  10: 3461062.600 ops/s
# Warmup Iteration  11: 3333641.408 ops/s
# Warmup Iteration  12: 3312070.176 ops/s
# Warmup Iteration  13: 3441385.743 ops/s
# Warmup Iteration  14: 3305866.362 ops/s
# Warmup Iteration  15: 3480320.469 ops/s
# Warmup Iteration  16: 3429965.683 ops/s
# Warmup Iteration  17: 3262929.917 ops/s
# Warmup Iteration  18: 3511505.998 ops/s
# Warmup Iteration  19: 3297045.136 ops/s
# Warmup Iteration  20: 3428406.567 ops/s
# Warmup Iteration  21: 3385687.144 ops/s
# Warmup Iteration  22: 3347705.461 ops/s
# Warmup Iteration  23: 3399163.199 ops/s
# Warmup Iteration  24: 3313017.766 ops/s
# Warmup Iteration  25: 3455371.744 ops/s
# Warmup Iteration  26: 3303798.837 ops/s
# Warmup Iteration  27: 3432415.989 ops/s
# Warmup Iteration  28: 3277071.487 ops/s
# Warmup Iteration  29: 3401750.596 ops/s
# Warmup Iteration  30: 3427232.942 ops/s
Iteration   1: 3294526.972 ops/s
Iteration   2: 3423494.473 ops/s
Iteration   3: 3262813.827 ops/s
Iteration   4: 3313320.071 ops/s
Iteration   5: 3402546.972 ops/s
Iteration   6: 3301954.694 ops/s
Iteration   7: 3410700.844 ops/s
Iteration   8: 3339356.488 ops/s
Iteration   9: 3362934.525 ops/s
Iteration  10: 3404623.668 ops/s
Iteration  11: 3324929.772 ops/s
Iteration  12: 3346390.261 ops/s
Iteration  13: 3520305.634 ops/s
Iteration  14: 3361261.862 ops/s
Iteration  15: 3233728.894 ops/s
Iteration  16: 3406515.764 ops/s
Iteration  17: 3303682.305 ops/s
Iteration  18: 3410550.248 ops/s
Iteration  19: 3381765.943 ops/s
Iteration  20: 3378423.350 ops/s
Iteration  21: 3490382.564 ops/s
Iteration  22: 3239981.337 ops/s
Iteration  23: 3433976.807 ops/s
Iteration  24: 3318248.589 ops/s
Iteration  25: 3441552.641 ops/s
Iteration  26: 3407173.707 ops/s
Iteration  27: 3373417.051 ops/s
Iteration  28: 3259846.525 ops/s
Iteration  29: 3264701.063 ops/s
Iteration  30: 3557089.458 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatArrayDelayError":
  3365673.210 ±(99.9%) 53585.479 ops/s [Average]
  (min, avg, max) = (3233728.894, 3365673.210, 3557089.458), stdev = 80204.228
  CI (99.9%): [3312087.731, 3419258.689] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_concatArrayDelayError  thrpt   30  3365673.210 ± 53585.479  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatObservableDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatObservableDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 212741.036 ops/s
# Warmup Iteration   2: 1840102.977 ops/s
# Warmup Iteration   3: 2731903.865 ops/s
# Warmup Iteration   4: 3452964.003 ops/s
# Warmup Iteration   5: 3291229.942 ops/s
# Warmup Iteration   6: 3468475.405 ops/s
# Warmup Iteration   7: 3290713.167 ops/s
# Warmup Iteration   8: 3231075.899 ops/s
# Warmup Iteration   9: 3449741.399 ops/s
# Warmup Iteration  10: 3344054.243 ops/s
# Warmup Iteration  11: 3302908.960 ops/s
# Warmup Iteration  12: 3409898.104 ops/s
# Warmup Iteration  13: 3322905.269 ops/s
# Warmup Iteration  14: 3423335.741 ops/s
# Warmup Iteration  15: 3338290.498 ops/s
# Warmup Iteration  16: 3431533.061 ops/s
# Warmup Iteration  17: 3321673.071 ops/s
# Warmup Iteration  18: 3462411.712 ops/s
# Warmup Iteration  19: 3268157.166 ops/s
# Warmup Iteration  20: 3506045.401 ops/s
# Warmup Iteration  21: 3281336.180 ops/s
# Warmup Iteration  22: 3387367.003 ops/s
# Warmup Iteration  23: 3433531.354 ops/s
# Warmup Iteration  24: 3265348.736 ops/s
# Warmup Iteration  25: 3289676.179 ops/s
# Warmup Iteration  26: 3470636.902 ops/s
# Warmup Iteration  27: 3337846.781 ops/s
# Warmup Iteration  28: 3481157.899 ops/s
# Warmup Iteration  29: 3437497.646 ops/s
# Warmup Iteration  30: 3318575.167 ops/s
Iteration   1: 3396439.079 ops/s
Iteration   2: 2935003.229 ops/s
Iteration   3: 3082855.478 ops/s
Iteration   4: 3299691.181 ops/s
Iteration   5: 3304127.085 ops/s
Iteration   6: 3440180.375 ops/s
Iteration   7: 3321158.611 ops/s
Iteration   8: 3362839.506 ops/s
Iteration   9: 3364612.838 ops/s
Iteration  10: 3491326.405 ops/s
Iteration  11: 3366817.443 ops/s
Iteration  12: 3436067.148 ops/s
Iteration  13: 3340871.609 ops/s
Iteration  14: 3328884.901 ops/s
Iteration  15: 3426392.858 ops/s
Iteration  16: 3276300.589 ops/s
Iteration  17: 3346202.990 ops/s
Iteration  18: 3329621.085 ops/s
Iteration  19: 3316494.859 ops/s
Iteration  20: 3358051.221 ops/s
Iteration  21: 3253071.774 ops/s
Iteration  22: 3442558.651 ops/s
Iteration  23: 3305872.153 ops/s
Iteration  24: 3277173.366 ops/s
Iteration  25: 3368433.910 ops/s
Iteration  26: 3277704.857 ops/s
Iteration  27: 3542705.777 ops/s
Iteration  28: 3324494.708 ops/s
Iteration  29: 3418031.007 ops/s
Iteration  30: 3324498.916 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatObservableDelayError":
  3335282.787 ±(99.9%) 75276.825 ops/s [Average]
  (min, avg, max) = (2935003.229, 3335282.787, 3542705.777), stdev = 112670.816
  CI (99.9%): [3260005.962, 3410559.612] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_concatObservableDelayError  thrpt   30  3335282.787 ± 75276.825  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapDelayErrorJustSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapDelayErrorJustSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.823 ops/s
# Warmup Iteration   2: 47251.531 ops/s
# Warmup Iteration   3: 135395.455 ops/s
# Warmup Iteration   4: 371154.905 ops/s
# Warmup Iteration   5: 448720.387 ops/s
# Warmup Iteration   6: 448706.278 ops/s
# Warmup Iteration   7: 737880.101 ops/s
# Warmup Iteration   8: 776667.967 ops/s
# Warmup Iteration   9: 849811.248 ops/s
# Warmup Iteration  10: 890202.361 ops/s
# Warmup Iteration  11: 890644.487 ops/s
# Warmup Iteration  12: 885002.200 ops/s
# Warmup Iteration  13: 879897.062 ops/s
# Warmup Iteration  14: 915808.480 ops/s
# Warmup Iteration  15: 804080.871 ops/s
# Warmup Iteration  16: 897908.423 ops/s
# Warmup Iteration  17: 887418.699 ops/s
# Warmup Iteration  18: 882314.638 ops/s
# Warmup Iteration  19: 884614.156 ops/s
# Warmup Iteration  20: 881525.107 ops/s
# Warmup Iteration  21: 904351.243 ops/s
# Warmup Iteration  22: 886028.658 ops/s
# Warmup Iteration  23: 905263.320 ops/s
# Warmup Iteration  24: 876501.765 ops/s
# Warmup Iteration  25: 866703.850 ops/s
# Warmup Iteration  26: 868932.155 ops/s
# Warmup Iteration  27: 921984.818 ops/s
# Warmup Iteration  28: 850218.850 ops/s
# Warmup Iteration  29: 916889.965 ops/s
# Warmup Iteration  30: 868722.184 ops/s
Iteration   1: 885533.639 ops/s
Iteration   2: 892676.008 ops/s
Iteration   3: 918286.379 ops/s
Iteration   4: 855004.111 ops/s
Iteration   5: 904947.977 ops/s
Iteration   6: 847318.566 ops/s
Iteration   7: 906651.542 ops/s
Iteration   8: 914453.393 ops/s
Iteration   9: 869993.857 ops/s
Iteration  10: 913897.520 ops/s
Iteration  11: 895139.869 ops/s
Iteration  12: 884443.490 ops/s
Iteration  13: 923286.727 ops/s
Iteration  14: 834976.085 ops/s
Iteration  15: 881941.483 ops/s
Iteration  16: 921447.773 ops/s
Iteration  17: 861358.876 ops/s
Iteration  18: 874811.292 ops/s
Iteration  19: 908419.572 ops/s
Iteration  20: 866568.588 ops/s
Iteration  21: 906619.672 ops/s
Iteration  22: 865139.145 ops/s
Iteration  23: 909736.676 ops/s
Iteration  24: 932603.559 ops/s
Iteration  25: 881995.422 ops/s
Iteration  26: 916213.468 ops/s
Iteration  27: 860683.012 ops/s
Iteration  28: 908010.773 ops/s
Iteration  29: 900738.013 ops/s
Iteration  30: 871955.415 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapDelayErrorJustSource":
  890495.063 ±(99.9%) 16919.066 ops/s [Average]
  (min, avg, max) = (834976.085, 890495.063, 932603.559), stdev = 25323.663
  CI (99.9%): [873575.997, 907414.129] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchMapDelayErrorJustSource  thrpt   30  890495.063 ± 16919.066  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapJustSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapJustSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.901 ops/s
# Warmup Iteration   2: 75952.406 ops/s
# Warmup Iteration   3: 233786.201 ops/s
# Warmup Iteration   4: 252984.661 ops/s
# Warmup Iteration   5: 310058.484 ops/s
# Warmup Iteration   6: 499496.418 ops/s
# Warmup Iteration   7: 944498.155 ops/s
# Warmup Iteration   8: 908684.832 ops/s
# Warmup Iteration   9: 939620.924 ops/s
# Warmup Iteration  10: 891806.183 ops/s
# Warmup Iteration  11: 933257.152 ops/s
# Warmup Iteration  12: 966020.160 ops/s
# Warmup Iteration  13: 876121.072 ops/s
# Warmup Iteration  14: 965005.552 ops/s
# Warmup Iteration  15: 888394.032 ops/s
# Warmup Iteration  16: 920860.638 ops/s
# Warmup Iteration  17: 923847.407 ops/s
# Warmup Iteration  18: 868851.556 ops/s
# Warmup Iteration  19: 935189.184 ops/s
# Warmup Iteration  20: 895511.325 ops/s
# Warmup Iteration  21: 902548.475 ops/s
# Warmup Iteration  22: 930605.124 ops/s
# Warmup Iteration  23: 879332.031 ops/s
# Warmup Iteration  24: 892186.797 ops/s
# Warmup Iteration  25: 917247.771 ops/s
# Warmup Iteration  26: 916309.683 ops/s
# Warmup Iteration  27: 759537.433 ops/s
# Warmup Iteration  28: 914279.135 ops/s
# Warmup Iteration  29: 939647.142 ops/s
# Warmup Iteration  30: 906708.859 ops/s
Iteration   1: 925702.197 ops/s
Iteration   2: 947955.223 ops/s
Iteration   3: 885857.913 ops/s
Iteration   4: 918594.791 ops/s
Iteration   5: 910726.735 ops/s
Iteration   6: 919822.274 ops/s
Iteration   7: 931600.937 ops/s
Iteration   8: 880085.213 ops/s
Iteration   9: 944747.093 ops/s
Iteration  10: 887221.668 ops/s
Iteration  11: 881177.433 ops/s
Iteration  12: 935082.967 ops/s
Iteration  13: 913439.047 ops/s
Iteration  14: 867811.827 ops/s
Iteration  15: 887275.619 ops/s
Iteration  16: 911408.410 ops/s
Iteration  17: 924525.790 ops/s
Iteration  18: 900298.522 ops/s
Iteration  19: 915688.550 ops/s
Iteration  20: 923695.324 ops/s
Iteration  21: 915462.442 ops/s
Iteration  22: 932471.619 ops/s
Iteration  23: 877001.795 ops/s
Iteration  24: 931689.408 ops/s
Iteration  25: 866226.702 ops/s
Iteration  26: 932677.535 ops/s
Iteration  27: 914017.445 ops/s
Iteration  28: 935681.758 ops/s
Iteration  29: 891900.787 ops/s
Iteration  30: 915636.418 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapJustSource":
  910849.448 ±(99.9%) 15376.839 ops/s [Average]
  (min, avg, max) = (866226.702, 910849.448, 947955.223), stdev = 23015.331
  CI (99.9%): [895472.609, 926226.288] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchMapJustSource  thrpt   30  910849.448 ± 15376.839  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapCombinerCombinerReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapCombinerCombinerReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 164240.821 ops/s
# Warmup Iteration   2: 506830.824 ops/s
# Warmup Iteration   3: 490456.712 ops/s
# Warmup Iteration   4: 506878.231 ops/s
# Warmup Iteration   5: 567216.574 ops/s
# Warmup Iteration   6: 501555.591 ops/s
# Warmup Iteration   7: 529638.884 ops/s
# Warmup Iteration   8: 562181.403 ops/s
# Warmup Iteration   9: 556841.791 ops/s
# Warmup Iteration  10: 553285.662 ops/s
# Warmup Iteration  11: 540645.143 ops/s
# Warmup Iteration  12: 579922.012 ops/s
# Warmup Iteration  13: 550755.238 ops/s
# Warmup Iteration  14: 580311.991 ops/s
# Warmup Iteration  15: 538186.305 ops/s
# Warmup Iteration  16: 574393.963 ops/s
# Warmup Iteration  17: 582960.784 ops/s
# Warmup Iteration  18: 587117.109 ops/s
# Warmup Iteration  19: 590518.771 ops/s
# Warmup Iteration  20: 565434.089 ops/s
# Warmup Iteration  21: 608882.212 ops/s
# Warmup Iteration  22: 571502.375 ops/s
# Warmup Iteration  23: 576499.566 ops/s
# Warmup Iteration  24: 586184.633 ops/s
# Warmup Iteration  25: 571320.179 ops/s
# Warmup Iteration  26: 585627.020 ops/s
# Warmup Iteration  27: 598076.977 ops/s
# Warmup Iteration  28: 564829.359 ops/s
# Warmup Iteration  29: 577003.824 ops/s
# Warmup Iteration  30: 603326.280 ops/s
Iteration   1: 571479.503 ops/s
Iteration   2: 570808.897 ops/s
Iteration   3: 577488.437 ops/s
Iteration   4: 570304.619 ops/s
Iteration   5: 604099.303 ops/s
Iteration   6: 568115.735 ops/s
Iteration   7: 588538.985 ops/s
Iteration   8: 567627.424 ops/s
Iteration   9: 593300.089 ops/s
Iteration  10: 574734.294 ops/s
Iteration  11: 595739.129 ops/s
Iteration  12: 585723.879 ops/s
Iteration  13: 572231.892 ops/s
Iteration  14: 593695.812 ops/s
Iteration  15: 585548.622 ops/s
Iteration  16: 577567.798 ops/s
Iteration  17: 596661.249 ops/s
Iteration  18: 568645.171 ops/s
Iteration  19: 583641.348 ops/s
Iteration  20: 610056.403 ops/s
Iteration  21: 578548.879 ops/s
Iteration  22: 592897.337 ops/s
Iteration  23: 571495.440 ops/s
Iteration  24: 611177.704 ops/s
Iteration  25: 595248.623 ops/s
Iteration  26: 574028.772 ops/s
Iteration  27: 592093.975 ops/s
Iteration  28: 597613.983 ops/s
Iteration  29: 559201.933 ops/s
Iteration  30: 601902.063 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapCombinerCombinerReturnsNull":
  584340.577 ±(99.9%) 9269.980 ops/s [Average]
  (min, avg, max) = (559201.933, 584340.577, 611177.704), stdev = 13874.871
  CI (99.9%): [575070.596, 593610.557] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_flatMapCombinerCombinerReturnsNull  thrpt   30  584340.577 ± 9269.980  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacity$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacity

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 358940.797 ops/s
# Warmup Iteration   2: 1767921.378 ops/s
# Warmup Iteration   3: 2326520.244 ops/s
# Warmup Iteration   4: 2503286.961 ops/s
# Warmup Iteration   5: 2618513.626 ops/s
# Warmup Iteration   6: 2569458.286 ops/s
# Warmup Iteration   7: 2564535.482 ops/s
# Warmup Iteration   8: 2687224.652 ops/s
# Warmup Iteration   9: 2586278.504 ops/s
# Warmup Iteration  10: 2565340.173 ops/s
# Warmup Iteration  11: 2571938.894 ops/s
# Warmup Iteration  12: 2683941.255 ops/s
# Warmup Iteration  13: 2559926.309 ops/s
# Warmup Iteration  14: 2660146.400 ops/s
# Warmup Iteration  15: 2563577.159 ops/s
# Warmup Iteration  16: 2621913.342 ops/s
# Warmup Iteration  17: 2637770.666 ops/s
# Warmup Iteration  18: 2539947.048 ops/s
# Warmup Iteration  19: 2725703.915 ops/s
# Warmup Iteration  20: 2584379.536 ops/s
# Warmup Iteration  21: 2639496.889 ops/s
# Warmup Iteration  22: 2151079.828 ops/s
# Warmup Iteration  23: 2591113.793 ops/s
# Warmup Iteration  24: 2637456.896 ops/s
# Warmup Iteration  25: 2567794.085 ops/s
# Warmup Iteration  26: 2580871.567 ops/s
# Warmup Iteration  27: 2651091.623 ops/s
# Warmup Iteration  28: 2499097.605 ops/s
# Warmup Iteration  29: 2685310.923 ops/s
# Warmup Iteration  30: 2545782.091 ops/s
Iteration   1: 2545225.297 ops/s
Iteration   2: 2579057.103 ops/s
Iteration   3: 2619276.290 ops/s
Iteration   4: 2647969.956 ops/s
Iteration   5: 2598052.388 ops/s
Iteration   6: 2581509.854 ops/s
Iteration   7: 2653139.863 ops/s
Iteration   8: 2573413.210 ops/s
Iteration   9: 2701762.768 ops/s
Iteration  10: 2533630.907 ops/s
Iteration  11: 2702704.193 ops/s
Iteration  12: 2575961.991 ops/s
Iteration  13: 2625459.536 ops/s
Iteration  14: 2627190.105 ops/s
Iteration  15: 2591355.930 ops/s
Iteration  16: 2691458.124 ops/s
Iteration  17: 2638828.133 ops/s
Iteration  18: 2566998.476 ops/s
Iteration  19: 2626101.080 ops/s
Iteration  20: 2631998.352 ops/s
Iteration  21: 2608445.282 ops/s
Iteration  22: 2602612.011 ops/s
Iteration  23: 2732545.013 ops/s
Iteration  24: 2561205.500 ops/s
Iteration  25: 2670589.131 ops/s
Iteration  26: 2610719.731 ops/s
Iteration  27: 2576046.642 ops/s
Iteration  28: 2663808.493 ops/s
Iteration  29: 2603631.372 ops/s
Iteration  30: 2621989.755 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacity":
  2618756.216 ±(99.9%) 32551.605 ops/s [Average]
  (min, avg, max) = (2533630.907, 2618756.216, 2732545.013), stdev = 48721.714
  CI (99.9%): [2586204.611, 2651307.821] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
ObservableToSortedListTest._Benchmark.benchmark_toSortedListComparatorCapacity  thrpt   30  2618756.216 ± 32551.605  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concat3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concat3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 450651.842 ops/s
# Warmup Iteration   2: 2440624.363 ops/s
# Warmup Iteration   3: 3081240.009 ops/s
# Warmup Iteration   4: 3418693.784 ops/s
# Warmup Iteration   5: 3516678.207 ops/s
# Warmup Iteration   6: 3672802.020 ops/s
# Warmup Iteration   7: 3391124.294 ops/s
# Warmup Iteration   8: 3532446.790 ops/s
# Warmup Iteration   9: 3561255.553 ops/s
# Warmup Iteration  10: 3417617.018 ops/s
# Warmup Iteration  11: 3399018.155 ops/s
# Warmup Iteration  12: 3551253.694 ops/s
# Warmup Iteration  13: 3429606.274 ops/s
# Warmup Iteration  14: 3567045.790 ops/s
# Warmup Iteration  15: 3423493.847 ops/s
# Warmup Iteration  16: 3403437.345 ops/s
# Warmup Iteration  17: 3657243.538 ops/s
# Warmup Iteration  18: 3346873.340 ops/s
# Warmup Iteration  19: 3494663.203 ops/s
# Warmup Iteration  20: 3537266.419 ops/s
# Warmup Iteration  21: 3511644.642 ops/s
# Warmup Iteration  22: 3550585.238 ops/s
# Warmup Iteration  23: 3515530.002 ops/s
# Warmup Iteration  24: 3531353.705 ops/s
# Warmup Iteration  25: 3499864.719 ops/s
# Warmup Iteration  26: 3434347.110 ops/s
# Warmup Iteration  27: 3602346.978 ops/s
# Warmup Iteration  28: 3412904.986 ops/s
# Warmup Iteration  29: 3573447.945 ops/s
# Warmup Iteration  30: 3421131.495 ops/s
Iteration   1: 3490579.876 ops/s
Iteration   2: 3601426.167 ops/s
Iteration   3: 3451926.831 ops/s
Iteration   4: 3509927.504 ops/s
Iteration   5: 3480261.075 ops/s
Iteration   6: 3682154.725 ops/s
Iteration   7: 3401540.356 ops/s
Iteration   8: 3556500.935 ops/s
Iteration   9: 3540391.666 ops/s
Iteration  10: 3409853.200 ops/s
Iteration  11: 3506012.627 ops/s
Iteration  12: 3401463.367 ops/s
Iteration  13: 3467574.918 ops/s
Iteration  14: 3608153.272 ops/s
Iteration  15: 3480225.509 ops/s
Iteration  16: 3462674.092 ops/s
Iteration  17: 3566357.260 ops/s
Iteration  18: 3394134.393 ops/s
Iteration  19: 3631983.347 ops/s
Iteration  20: 3458525.892 ops/s
Iteration  21: 3584606.772 ops/s
Iteration  22: 3616457.381 ops/s
Iteration  23: 3616216.117 ops/s
Iteration  24: 3493237.455 ops/s
Iteration  25: 3504569.885 ops/s
Iteration  26: 3593789.382 ops/s
Iteration  27: 3391530.640 ops/s
Iteration  28: 3633904.051 ops/s
Iteration  29: 3418331.133 ops/s
Iteration  30: 3336786.291 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concat3":
  3509703.204 ±(99.9%) 59667.457 ops/s [Average]
  (min, avg, max) = (3336786.291, 3509703.204, 3682154.725), stdev = 89307.448
  CI (99.9%): [3450035.747, 3569370.661] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_concat3  thrpt   30  3509703.204 ± 59667.457  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concat4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concat4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 510250.516 ops/s
# Warmup Iteration   2: 2192706.860 ops/s
# Warmup Iteration   3: 2958303.308 ops/s
# Warmup Iteration   4: 3140011.176 ops/s
# Warmup Iteration   5: 3273515.271 ops/s
# Warmup Iteration   6: 3222084.518 ops/s
# Warmup Iteration   7: 3140606.504 ops/s
# Warmup Iteration   8: 3208758.894 ops/s
# Warmup Iteration   9: 3207904.092 ops/s
# Warmup Iteration  10: 3109266.320 ops/s
# Warmup Iteration  11: 3205938.660 ops/s
# Warmup Iteration  12: 3191923.113 ops/s
# Warmup Iteration  13: 3247182.406 ops/s
# Warmup Iteration  14: 3128515.476 ops/s
# Warmup Iteration  15: 3221423.505 ops/s
# Warmup Iteration  16: 3216939.119 ops/s
# Warmup Iteration  17: 2472384.797 ops/s
# Warmup Iteration  18: 3269598.027 ops/s
# Warmup Iteration  19: 3143566.616 ops/s
# Warmup Iteration  20: 3098499.520 ops/s
# Warmup Iteration  21: 3283851.573 ops/s
# Warmup Iteration  22: 3098108.428 ops/s
# Warmup Iteration  23: 3257575.075 ops/s
# Warmup Iteration  24: 3176619.098 ops/s
# Warmup Iteration  25: 3131039.461 ops/s
# Warmup Iteration  26: 3135511.446 ops/s
# Warmup Iteration  27: 3143905.911 ops/s
# Warmup Iteration  28: 3254139.086 ops/s
# Warmup Iteration  29: 3208957.098 ops/s
# Warmup Iteration  30: 3129098.878 ops/s
Iteration   1: 3215163.970 ops/s
Iteration   2: 3119115.518 ops/s
Iteration   3: 3240009.338 ops/s
Iteration   4: 3097421.500 ops/s
Iteration   5: 3222968.367 ops/s
Iteration   6: 3069386.551 ops/s
Iteration   7: 3213172.394 ops/s
Iteration   8: 3232364.003 ops/s
Iteration   9: 3096343.535 ops/s
Iteration  10: 3182377.596 ops/s
Iteration  11: 3184215.653 ops/s
Iteration  12: 3165941.250 ops/s
Iteration  13: 3200919.863 ops/s
Iteration  14: 3265004.738 ops/s
Iteration  15: 3215959.514 ops/s
Iteration  16: 3117959.413 ops/s
Iteration  17: 3171541.698 ops/s
Iteration  18: 3352721.352 ops/s
Iteration  19: 3085203.291 ops/s
Iteration  20: 3299169.920 ops/s
Iteration  21: 3132038.153 ops/s
Iteration  22: 3241421.664 ops/s
Iteration  23: 3166753.516 ops/s
Iteration  24: 3210334.303 ops/s
Iteration  25: 3145861.772 ops/s
Iteration  26: 3109058.663 ops/s
Iteration  27: 3315281.546 ops/s
Iteration  28: 3212924.415 ops/s
Iteration  29: 3237066.275 ops/s
Iteration  30: 3200012.145 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concat4":
  3190590.397 ±(99.9%) 46329.610 ops/s [Average]
  (min, avg, max) = (3069386.551, 3190590.397, 3352721.352), stdev = 69343.985
  CI (99.9%): [3144260.787, 3236920.008] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_concat4  thrpt   30  3190590.397 ± 46329.610  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1030622.582 ops/s
# Warmup Iteration   2: 3065027.455 ops/s
# Warmup Iteration   3: 3431560.548 ops/s
# Warmup Iteration   4: 3900302.626 ops/s
# Warmup Iteration   5: 4213778.795 ops/s
# Warmup Iteration   6: 3998922.912 ops/s
# Warmup Iteration   7: 4239622.255 ops/s
# Warmup Iteration   8: 4123192.563 ops/s
# Warmup Iteration   9: 4018518.275 ops/s
# Warmup Iteration  10: 4084589.810 ops/s
# Warmup Iteration  11: 4106894.972 ops/s
# Warmup Iteration  12: 4075187.480 ops/s
# Warmup Iteration  13: 4197700.924 ops/s
# Warmup Iteration  14: 4046875.843 ops/s
# Warmup Iteration  15: 4159398.505 ops/s
# Warmup Iteration  16: 3926485.641 ops/s
# Warmup Iteration  17: 4104210.621 ops/s
# Warmup Iteration  18: 4207969.433 ops/s
# Warmup Iteration  19: 3984273.620 ops/s
# Warmup Iteration  20: 4112307.510 ops/s
# Warmup Iteration  21: 3969049.825 ops/s
# Warmup Iteration  22: 4173955.356 ops/s
# Warmup Iteration  23: 3949933.082 ops/s
# Warmup Iteration  24: 3905599.192 ops/s
# Warmup Iteration  25: 4195634.161 ops/s
# Warmup Iteration  26: 3927118.304 ops/s
# Warmup Iteration  27: 4023777.468 ops/s
# Warmup Iteration  28: 4161552.940 ops/s
# Warmup Iteration  29: 4004511.960 ops/s
# Warmup Iteration  30: 4109120.420 ops/s
Iteration   1: 4017660.079 ops/s
Iteration   2: 4148093.128 ops/s
Iteration   3: 4168836.030 ops/s
Iteration   4: 3902817.342 ops/s
Iteration   5: 4116607.763 ops/s
Iteration   6: 4029306.014 ops/s
Iteration   7: 4211902.066 ops/s
Iteration   8: 4218247.630 ops/s
Iteration   9: 4007206.408 ops/s
Iteration  10: 4203884.913 ops/s
Iteration  11: 4213347.811 ops/s
Iteration  12: 4066212.228 ops/s
Iteration  13: 4250108.529 ops/s
Iteration  14: 4210789.256 ops/s
Iteration  15: 4236931.297 ops/s
Iteration  16: 3894333.174 ops/s
Iteration  17: 4328135.123 ops/s
Iteration  18: 4030559.754 ops/s
Iteration  19: 4174852.937 ops/s
Iteration  20: 4026837.876 ops/s
Iteration  21: 4170557.894 ops/s
Iteration  22: 4092813.569 ops/s
Iteration  23: 4053929.670 ops/s
Iteration  24: 4192838.633 ops/s
Iteration  25: 4061761.565 ops/s
Iteration  26: 4247107.509 ops/s
Iteration  27: 4034672.610 ops/s
Iteration  28: 4081925.321 ops/s
Iteration  29: 4064779.823 ops/s
Iteration  30: 4186107.766 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_disposed":
  4121438.791 ±(99.9%) 70170.662 ops/s [Average]
  (min, avg, max) = (3894333.174, 4121438.791, 4328135.123), stdev = 105028.151
  CI (99.9%): [4051268.129, 4191609.453] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_disposed  thrpt   30  4121438.791 ± 70170.662  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_toSortedListCapacity$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_toSortedListCapacity

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 204508.656 ops/s
# Warmup Iteration   2: 1545345.656 ops/s
# Warmup Iteration   3: 2101072.764 ops/s
# Warmup Iteration   4: 2464337.768 ops/s
# Warmup Iteration   5: 2598106.527 ops/s
# Warmup Iteration   6: 2378796.288 ops/s
# Warmup Iteration   7: 2623772.040 ops/s
# Warmup Iteration   8: 2432281.739 ops/s
# Warmup Iteration   9: 2494849.290 ops/s
# Warmup Iteration  10: 2524650.707 ops/s
# Warmup Iteration  11: 2434866.552 ops/s
# Warmup Iteration  12: 1966413.353 ops/s
# Warmup Iteration  13: 2523538.483 ops/s
# Warmup Iteration  14: 2457761.290 ops/s
# Warmup Iteration  15: 2599261.770 ops/s
# Warmup Iteration  16: 2520780.473 ops/s
# Warmup Iteration  17: 2447903.355 ops/s
# Warmup Iteration  18: 2606606.432 ops/s
# Warmup Iteration  19: 2583248.025 ops/s
# Warmup Iteration  20: 2496992.493 ops/s
# Warmup Iteration  21: 2507316.473 ops/s
# Warmup Iteration  22: 2461317.096 ops/s
# Warmup Iteration  23: 2449763.988 ops/s
# Warmup Iteration  24: 2574334.328 ops/s
# Warmup Iteration  25: 2519978.532 ops/s
# Warmup Iteration  26: 2468595.787 ops/s
# Warmup Iteration  27: 2518841.710 ops/s
# Warmup Iteration  28: 2477910.387 ops/s
# Warmup Iteration  29: 2490105.307 ops/s
# Warmup Iteration  30: 2634225.308 ops/s
Iteration   1: 2498720.542 ops/s
Iteration   2: 2535606.732 ops/s
Iteration   3: 2562401.804 ops/s
Iteration   4: 2478425.585 ops/s
Iteration   5: 2575748.117 ops/s
Iteration   6: 2516743.107 ops/s
Iteration   7: 2505412.850 ops/s
Iteration   8: 2592132.326 ops/s
Iteration   9: 2415218.152 ops/s
Iteration  10: 2571813.014 ops/s
Iteration  11: 2493209.435 ops/s
Iteration  12: 2602254.376 ops/s
Iteration  13: 2475103.256 ops/s
Iteration  14: 2478962.334 ops/s
Iteration  15: 2599990.860 ops/s
Iteration  16: 2417022.045 ops/s
Iteration  17: 2551508.299 ops/s
Iteration  18: 2544212.267 ops/s
Iteration  19: 2483861.892 ops/s
Iteration  20: 2590390.287 ops/s
Iteration  21: 2426538.158 ops/s
Iteration  22: 2593800.598 ops/s
Iteration  23: 2418298.072 ops/s
Iteration  24: 2531606.100 ops/s
Iteration  25: 2503611.418 ops/s
Iteration  26: 2551077.667 ops/s
Iteration  27: 2480131.542 ops/s
Iteration  28: 2505566.021 ops/s
Iteration  29: 2585799.715 ops/s
Iteration  30: 2474197.232 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_toSortedListCapacity":
  2518645.460 ±(99.9%) 38542.500 ops/s [Average]
  (min, avg, max) = (2415218.152, 2518645.460, 2602254.376), stdev = 57688.604
  CI (99.9%): [2480102.960, 2557187.960] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObservableToSortedListTest._Benchmark.benchmark_toSortedListCapacity  thrpt   30  2518645.460 ± 38542.500  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noCancelPreviousArray$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noCancelPreviousArray

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 167718.502 ops/s
# Warmup Iteration   2: 863637.978 ops/s
# Warmup Iteration   3: 1084423.507 ops/s
# Warmup Iteration   4: 1030580.102 ops/s
# Warmup Iteration   5: 1193588.521 ops/s
# Warmup Iteration   6: 1191774.703 ops/s
# Warmup Iteration   7: 1216808.630 ops/s
# Warmup Iteration   8: 1193058.688 ops/s
# Warmup Iteration   9: 1219059.376 ops/s
# Warmup Iteration  10: 1228791.934 ops/s
# Warmup Iteration  11: 1185558.642 ops/s
# Warmup Iteration  12: 1264008.353 ops/s
# Warmup Iteration  13: 1176107.604 ops/s
# Warmup Iteration  14: 1211742.512 ops/s
# Warmup Iteration  15: 1209618.103 ops/s
# Warmup Iteration  16: 1184753.776 ops/s
# Warmup Iteration  17: 1237009.773 ops/s
# Warmup Iteration  18: 1174453.527 ops/s
# Warmup Iteration  19: 1256261.714 ops/s
# Warmup Iteration  20: 1254919.330 ops/s
# Warmup Iteration  21: 1166067.255 ops/s
# Warmup Iteration  22: 1225557.630 ops/s
# Warmup Iteration  23: 1216249.485 ops/s
# Warmup Iteration  24: 1205042.860 ops/s
# Warmup Iteration  25: 1245252.813 ops/s
# Warmup Iteration  26: 1193290.833 ops/s
# Warmup Iteration  27: 1237439.215 ops/s
# Warmup Iteration  28: 1214293.632 ops/s
# Warmup Iteration  29: 1254893.978 ops/s
# Warmup Iteration  30: 1194451.749 ops/s
Iteration   1: 1210725.220 ops/s
Iteration   2: 1254240.341 ops/s
Iteration   3: 1182709.629 ops/s
Iteration   4: 1238250.894 ops/s
Iteration   5: 1243057.335 ops/s
Iteration   6: 1210907.329 ops/s
Iteration   7: 1238465.857 ops/s
Iteration   8: 1189049.365 ops/s
Iteration   9: 1255920.060 ops/s
Iteration  10: 1219225.635 ops/s
Iteration  11: 1243331.541 ops/s
Iteration  12: 1236874.130 ops/s
Iteration  13: 1195817.303 ops/s
Iteration  14: 1210700.976 ops/s
Iteration  15: 949666.772 ops/s
Iteration  16: 1177553.149 ops/s
Iteration  17: 1238391.404 ops/s
Iteration  18: 1180805.658 ops/s
Iteration  19: 1257140.383 ops/s
Iteration  20: 1216950.538 ops/s
Iteration  21: 1247556.362 ops/s
Iteration  22: 1194826.307 ops/s
Iteration  23: 1220938.882 ops/s
Iteration  24: 1260468.547 ops/s
Iteration  25: 1181061.966 ops/s
Iteration  26: 1247036.939 ops/s
Iteration  27: 1199147.856 ops/s
Iteration  28: 1173971.903 ops/s
Iteration  29: 1259962.724 ops/s
Iteration  30: 1213811.378 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noCancelPreviousArray":
  1211618.879 ±(99.9%) 37873.858 ops/s [Average]
  (min, avg, max) = (949666.772, 1211618.879, 1260468.547), stdev = 56687.813
  CI (99.9%): [1173745.021, 1249492.738] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_noCancelPreviousArray  thrpt   30  1211618.879 ± 37873.858  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_ignoringGroups$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_ignoringGroups

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7749.454 ops/s
# Warmup Iteration   2: 54208.436 ops/s
# Warmup Iteration   3: 102898.583 ops/s
# Warmup Iteration   4: 111961.172 ops/s
# Warmup Iteration   5: 128066.747 ops/s
# Warmup Iteration   6: 123441.573 ops/s
# Warmup Iteration   7: 123611.550 ops/s
# Warmup Iteration   8: 122454.839 ops/s
# Warmup Iteration   9: 124703.420 ops/s
# Warmup Iteration  10: 126989.146 ops/s
# Warmup Iteration  11: 119047.805 ops/s
# Warmup Iteration  12: 124459.977 ops/s
# Warmup Iteration  13: 129189.722 ops/s
# Warmup Iteration  14: 120543.030 ops/s
# Warmup Iteration  15: 130816.593 ops/s
# Warmup Iteration  16: 119825.258 ops/s
# Warmup Iteration  17: 121183.732 ops/s
# Warmup Iteration  18: 127773.998 ops/s
# Warmup Iteration  19: 125338.664 ops/s
# Warmup Iteration  20: 125309.609 ops/s
# Warmup Iteration  21: 119743.127 ops/s
# Warmup Iteration  22: 122670.174 ops/s
# Warmup Iteration  23: 125754.867 ops/s
# Warmup Iteration  24: 122710.830 ops/s
# Warmup Iteration  25: 120761.783 ops/s
# Warmup Iteration  26: 125609.301 ops/s
# Warmup Iteration  27: 123701.472 ops/s
# Warmup Iteration  28: 122412.962 ops/s
# Warmup Iteration  29: 125315.146 ops/s
# Warmup Iteration  30: 120898.694 ops/s
Iteration   1: 126708.515 ops/s
Iteration   2: 122952.203 ops/s
Iteration   3: 124046.108 ops/s
Iteration   4: 123856.559 ops/s
Iteration   5: 119934.763 ops/s
Iteration   6: 120098.873 ops/s
Iteration   7: 127269.159 ops/s
Iteration   8: 122839.331 ops/s
Iteration   9: 124678.628 ops/s
Iteration  10: 121917.830 ops/s
Iteration  11: 126363.513 ops/s
Iteration  12: 127229.796 ops/s
Iteration  13: 117730.499 ops/s
Iteration  14: 123064.784 ops/s
Iteration  15: 123903.628 ops/s
Iteration  16: 124635.882 ops/s
Iteration  17: 120317.782 ops/s
Iteration  18: 121676.155 ops/s
Iteration  19: 122010.373 ops/s
Iteration  20: 124524.892 ops/s
Iteration  21: 124501.842 ops/s
Iteration  22: 125461.426 ops/s
Iteration  23: 126433.812 ops/s
Iteration  24: 122978.778 ops/s
Iteration  25: 121791.251 ops/s
Iteration  26: 125520.604 ops/s
Iteration  27: 121308.555 ops/s
Iteration  28: 120341.034 ops/s
Iteration  29: 127732.305 ops/s
Iteration  30: 120038.827 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_ignoringGroups":
  123395.590 ±(99.9%) 1722.126 ops/s [Average]
  (min, avg, max) = (117730.499, 123395.590, 127732.305), stdev = 2577.597
  CI (99.9%): [121673.464, 125117.716] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObservableGroupByTest._Benchmark.benchmark_ignoringGroups  thrpt   30  123395.590 ± 1722.126  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_with2Others$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_with2Others

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 368476.252 ops/s
# Warmup Iteration   2: 1221834.807 ops/s
# Warmup Iteration   3: 1881923.708 ops/s
# Warmup Iteration   4: 1720913.100 ops/s
# Warmup Iteration   5: 2281843.045 ops/s
# Warmup Iteration   6: 2239651.734 ops/s
# Warmup Iteration   7: 2200051.974 ops/s
# Warmup Iteration   8: 2175624.819 ops/s
# Warmup Iteration   9: 2151790.157 ops/s
# Warmup Iteration  10: 2160138.758 ops/s
# Warmup Iteration  11: 2160882.725 ops/s
# Warmup Iteration  12: 2155120.769 ops/s
# Warmup Iteration  13: 2168561.806 ops/s
# Warmup Iteration  14: 2115440.209 ops/s
# Warmup Iteration  15: 2159942.746 ops/s
# Warmup Iteration  16: 2226038.754 ops/s
# Warmup Iteration  17: 2143931.148 ops/s
# Warmup Iteration  18: 2131061.723 ops/s
# Warmup Iteration  19: 2300716.367 ops/s
# Warmup Iteration  20: 2151429.157 ops/s
# Warmup Iteration  21: 2234566.462 ops/s
# Warmup Iteration  22: 2111836.756 ops/s
# Warmup Iteration  23: 2235832.287 ops/s
# Warmup Iteration  24: 2142553.419 ops/s
# Warmup Iteration  25: 2152514.896 ops/s
# Warmup Iteration  26: 2160570.570 ops/s
# Warmup Iteration  27: 2225470.641 ops/s
# Warmup Iteration  28: 2147452.933 ops/s
# Warmup Iteration  29: 2180038.469 ops/s
# Warmup Iteration  30: 2153002.294 ops/s
Iteration   1: 2258709.568 ops/s
Iteration   2: 2215686.499 ops/s
Iteration   3: 2106518.397 ops/s
Iteration   4: 2156247.044 ops/s
Iteration   5: 2254985.293 ops/s
Iteration   6: 2089460.238 ops/s
Iteration   7: 2219862.586 ops/s
Iteration   8: 2160740.917 ops/s
Iteration   9: 2192349.849 ops/s
Iteration  10: 2205657.922 ops/s
Iteration  11: 2137650.695 ops/s
Iteration  12: 2290780.967 ops/s
Iteration  13: 2100173.720 ops/s
Iteration  14: 2200760.770 ops/s
Iteration  15: 2146366.535 ops/s
Iteration  16: 2113284.960 ops/s
Iteration  17: 2227532.782 ops/s
Iteration  18: 2142685.655 ops/s
Iteration  19: 2225127.497 ops/s
Iteration  20: 2131910.452 ops/s
Iteration  21: 2101246.797 ops/s
Iteration  22: 2199230.107 ops/s
Iteration  23: 2134987.903 ops/s
Iteration  24: 2223073.783 ops/s
Iteration  25: 2132515.747 ops/s
Iteration  26: 2241015.414 ops/s
Iteration  27: 2106194.637 ops/s
Iteration  28: 2188247.868 ops/s
Iteration  29: 2247969.596 ops/s
Iteration  30: 2192660.171 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_with2Others":
  2178121.146 ±(99.9%) 37445.575 ops/s [Average]
  (min, avg, max) = (2089460.238, 2178121.146, 2290780.967), stdev = 56046.778
  CI (99.9%): [2140675.571, 2215566.721] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_with2Others  thrpt   30  2178121.146 ± 37445.575  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_with3Others$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_with3Others

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 259803.670 ops/s
# Warmup Iteration   2: 1123348.245 ops/s
# Warmup Iteration   3: 1775270.811 ops/s
# Warmup Iteration   4: 1665741.374 ops/s
# Warmup Iteration   5: 1732871.816 ops/s
# Warmup Iteration   6: 1690623.347 ops/s
# Warmup Iteration   7: 1718300.986 ops/s
# Warmup Iteration   8: 1683179.326 ops/s
# Warmup Iteration   9: 1680485.083 ops/s
# Warmup Iteration  10: 1768018.438 ops/s
# Warmup Iteration  11: 1475981.712 ops/s
# Warmup Iteration  12: 1623604.085 ops/s
# Warmup Iteration  13: 1794898.390 ops/s
# Warmup Iteration  14: 1713841.476 ops/s
# Warmup Iteration  15: 1739035.735 ops/s
# Warmup Iteration  16: 1785568.176 ops/s
# Warmup Iteration  17: 1654000.242 ops/s
# Warmup Iteration  18: 1776231.634 ops/s
# Warmup Iteration  19: 1709211.008 ops/s
# Warmup Iteration  20: 1744945.355 ops/s
# Warmup Iteration  21: 1804847.995 ops/s
# Warmup Iteration  22: 1726382.251 ops/s
# Warmup Iteration  23: 1697567.701 ops/s
# Warmup Iteration  24: 1796908.793 ops/s
# Warmup Iteration  25: 1801401.458 ops/s
# Warmup Iteration  26: 1675689.549 ops/s
# Warmup Iteration  27: 1754357.008 ops/s
# Warmup Iteration  28: 1676739.160 ops/s
# Warmup Iteration  29: 1741414.258 ops/s
# Warmup Iteration  30: 1751416.140 ops/s
Iteration   1: 1715558.992 ops/s
Iteration   2: 1761839.155 ops/s
Iteration   3: 1751091.955 ops/s
Iteration   4: 1775106.716 ops/s
Iteration   5: 1708689.617 ops/s
Iteration   6: 1753210.737 ops/s
Iteration   7: 1716777.034 ops/s
Iteration   8: 1770820.627 ops/s
Iteration   9: 1656727.385 ops/s
Iteration  10: 1782899.835 ops/s
Iteration  11: 1699297.921 ops/s
Iteration  12: 1738951.971 ops/s
Iteration  13: 1733002.680 ops/s
Iteration  14: 1677512.347 ops/s
Iteration  15: 1719322.727 ops/s
Iteration  16: 1788023.010 ops/s
Iteration  17: 1744014.743 ops/s
Iteration  18: 1769517.974 ops/s
Iteration  19: 1712841.890 ops/s
Iteration  20: 1760159.576 ops/s
Iteration  21: 1717467.946 ops/s
Iteration  22: 1713424.387 ops/s
Iteration  23: 1752156.183 ops/s
Iteration  24: 1725470.564 ops/s
Iteration  25: 1823029.878 ops/s
Iteration  26: 1701895.005 ops/s
Iteration  27: 1725152.472 ops/s
Iteration  28: 1785404.295 ops/s
Iteration  29: 1705823.902 ops/s
Iteration  30: 1641276.572 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_with3Others":
  1734215.603 ±(99.9%) 26706.235 ops/s [Average]
  (min, avg, max) = (1641276.572, 1734215.603, 1823029.878), stdev = 39972.639
  CI (99.9%): [1707509.368, 1760921.839] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_with3Others  thrpt   30  1734215.603 ± 26706.235  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 98077.630 ops/s
# Warmup Iteration   2: 443102.226 ops/s
# Warmup Iteration   3: 537919.347 ops/s
# Warmup Iteration   4: 529881.419 ops/s
# Warmup Iteration   5: 508253.852 ops/s
# Warmup Iteration   6: 519095.215 ops/s
# Warmup Iteration   7: 505364.942 ops/s
# Warmup Iteration   8: 523273.652 ops/s
# Warmup Iteration   9: 529076.898 ops/s
# Warmup Iteration  10: 524830.499 ops/s
# Warmup Iteration  11: 537406.423 ops/s
# Warmup Iteration  12: 503421.058 ops/s
# Warmup Iteration  13: 528981.429 ops/s
# Warmup Iteration  14: 525588.588 ops/s
# Warmup Iteration  15: 519977.282 ops/s
# Warmup Iteration  16: 525136.744 ops/s
# Warmup Iteration  17: 520028.238 ops/s
# Warmup Iteration  18: 559408.745 ops/s
# Warmup Iteration  19: 538226.072 ops/s
# Warmup Iteration  20: 558700.828 ops/s
# Warmup Iteration  21: 532707.127 ops/s
# Warmup Iteration  22: 544336.834 ops/s
# Warmup Iteration  23: 546230.643 ops/s
# Warmup Iteration  24: 534865.115 ops/s
# Warmup Iteration  25: 562786.144 ops/s
# Warmup Iteration  26: 534736.166 ops/s
# Warmup Iteration  27: 542218.038 ops/s
# Warmup Iteration  28: 560053.684 ops/s
# Warmup Iteration  29: 523598.898 ops/s
# Warmup Iteration  30: 562617.191 ops/s
Iteration   1: 544140.177 ops/s
Iteration   2: 536078.628 ops/s
Iteration   3: 564720.193 ops/s
Iteration   4: 525635.972 ops/s
Iteration   5: 552479.127 ops/s
Iteration   6: 532358.276 ops/s
Iteration   7: 544345.445 ops/s
Iteration   8: 562344.108 ops/s
Iteration   9: 525526.604 ops/s
Iteration  10: 566142.902 ops/s
Iteration  11: 527876.358 ops/s
Iteration  12: 561825.890 ops/s
Iteration  13: 559349.873 ops/s
Iteration  14: 527499.706 ops/s
Iteration  15: 545164.787 ops/s
Iteration  16: 524290.626 ops/s
Iteration  17: 533410.508 ops/s
Iteration  18: 556739.686 ops/s
Iteration  19: 514855.996 ops/s
Iteration  20: 561730.540 ops/s
Iteration  21: 548158.429 ops/s
Iteration  22: 551803.466 ops/s
Iteration  23: 539613.850 ops/s
Iteration  24: 544577.567 ops/s
Iteration  25: 546524.904 ops/s
Iteration  26: 557883.663 ops/s
Iteration  27: 561270.790 ops/s
Iteration  28: 537974.465 ops/s
Iteration  29: 550403.630 ops/s
Iteration  30: 552930.327 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerNull":
  545255.216 ±(99.9%) 9467.694 ops/s [Average]
  (min, avg, max) = (514855.996, 545255.216, 566142.902), stdev = 14170.799
  CI (99.9%): [535787.523, 554722.910] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerNull  thrpt   30  545255.216 ± 9467.694  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_isTerminated$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_isTerminated

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15660659.696 ops/s
# Warmup Iteration   2: 20522243.903 ops/s
# Warmup Iteration   3: 28156970.246 ops/s
# Warmup Iteration   4: 26742309.275 ops/s
# Warmup Iteration   5: 27167444.948 ops/s
# Warmup Iteration   6: 27212560.507 ops/s
# Warmup Iteration   7: 22653993.055 ops/s
# Warmup Iteration   8: 27615316.209 ops/s
# Warmup Iteration   9: 27943753.490 ops/s
# Warmup Iteration  10: 26251838.720 ops/s
# Warmup Iteration  11: 26567490.989 ops/s
# Warmup Iteration  12: 28516294.700 ops/s
# Warmup Iteration  13: 27418139.780 ops/s
# Warmup Iteration  14: 26396091.755 ops/s
# Warmup Iteration  15: 27578665.850 ops/s
# Warmup Iteration  16: 27696338.121 ops/s
# Warmup Iteration  17: 27328165.495 ops/s
# Warmup Iteration  18: 27975102.011 ops/s
# Warmup Iteration  19: 26945209.951 ops/s
# Warmup Iteration  20: 28222743.556 ops/s
# Warmup Iteration  21: 28467858.784 ops/s
# Warmup Iteration  22: 26038847.195 ops/s
# Warmup Iteration  23: 27923479.009 ops/s
# Warmup Iteration  24: 27244161.333 ops/s
# Warmup Iteration  25: 26858297.619 ops/s
# Warmup Iteration  26: 28629052.176 ops/s
# Warmup Iteration  27: 26806145.350 ops/s
# Warmup Iteration  28: 27181158.038 ops/s
# Warmup Iteration  29: 28109207.368 ops/s
# Warmup Iteration  30: 26831228.194 ops/s
Iteration   1: 28235622.866 ops/s
Iteration   2: 26234115.643 ops/s
Iteration   3: 27165183.300 ops/s
Iteration   4: 27633297.539 ops/s
Iteration   5: 26211901.243 ops/s
Iteration   6: 28005175.887 ops/s
Iteration   7: 26739964.553 ops/s
Iteration   8: 28855396.132 ops/s
Iteration   9: 26929265.479 ops/s
Iteration  10: 27208364.219 ops/s
Iteration  11: 28336848.485 ops/s
Iteration  12: 26732691.277 ops/s
Iteration  13: 28654347.341 ops/s
Iteration  14: 27477247.766 ops/s
Iteration  15: 28148431.503 ops/s
Iteration  16: 27497728.995 ops/s
Iteration  17: 26692765.302 ops/s
Iteration  18: 28111672.737 ops/s
Iteration  19: 27095526.780 ops/s
Iteration  20: 28694773.866 ops/s
Iteration  21: 27038485.671 ops/s
Iteration  22: 27683831.221 ops/s
Iteration  23: 27851802.602 ops/s
Iteration  24: 27193288.560 ops/s
Iteration  25: 26217707.308 ops/s
Iteration  26: 28046297.728 ops/s
Iteration  27: 28025861.547 ops/s
Iteration  28: 26583192.725 ops/s
Iteration  29: 27456282.264 ops/s
Iteration  30: 28167614.732 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_isTerminated":
  27497489.509 ±(99.9%) 506161.094 ops/s [Average]
  (min, avg, max) = (26211901.243, 27497489.509, 28855396.132), stdev = 757598.155
  CI (99.9%): [26991328.415, 28003650.603] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
AtomicThrowableTest._Benchmark.benchmark_isTerminated  thrpt   30  27497489.509 ± 506161.094  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48669.812 ops/s
# Warmup Iteration   2: 432425.916 ops/s
# Warmup Iteration   3: 461730.438 ops/s
# Warmup Iteration   4: 479527.763 ops/s
# Warmup Iteration   5: 513698.056 ops/s
# Warmup Iteration   6: 455638.995 ops/s
# Warmup Iteration   7: 535752.401 ops/s
# Warmup Iteration   8: 508314.495 ops/s
# Warmup Iteration   9: 542787.887 ops/s
# Warmup Iteration  10: 507626.813 ops/s
# Warmup Iteration  11: 522361.402 ops/s
# Warmup Iteration  12: 545125.742 ops/s
# Warmup Iteration  13: 512016.184 ops/s
# Warmup Iteration  14: 530021.362 ops/s
# Warmup Iteration  15: 547024.826 ops/s
# Warmup Iteration  16: 528009.180 ops/s
# Warmup Iteration  17: 529646.797 ops/s
# Warmup Iteration  18: 561752.935 ops/s
# Warmup Iteration  19: 543801.050 ops/s
# Warmup Iteration  20: 557095.275 ops/s
# Warmup Iteration  21: 554499.227 ops/s
# Warmup Iteration  22: 565828.073 ops/s
# Warmup Iteration  23: 542982.789 ops/s
# Warmup Iteration  24: 542615.423 ops/s
# Warmup Iteration  25: 565950.103 ops/s
# Warmup Iteration  26: 560277.127 ops/s
# Warmup Iteration  27: 535787.412 ops/s
# Warmup Iteration  28: 562785.562 ops/s
# Warmup Iteration  29: 538232.492 ops/s
# Warmup Iteration  30: 572400.645 ops/s
Iteration   1: 543185.160 ops/s
Iteration   2: 544064.599 ops/s
Iteration   3: 557397.796 ops/s
Iteration   4: 546716.914 ops/s
Iteration   5: 549727.237 ops/s
Iteration   6: 567164.820 ops/s
Iteration   7: 543899.620 ops/s
Iteration   8: 566517.510 ops/s
Iteration   9: 543574.810 ops/s
Iteration  10: 554067.024 ops/s
Iteration  11: 537251.654 ops/s
Iteration  12: 564085.592 ops/s
Iteration  13: 553972.917 ops/s
Iteration  14: 533125.409 ops/s
Iteration  15: 553334.395 ops/s
Iteration  16: 545752.484 ops/s
Iteration  17: 569403.338 ops/s
Iteration  18: 540218.944 ops/s
Iteration  19: 546369.532 ops/s
Iteration  20: 550121.767 ops/s
Iteration  21: 532452.798 ops/s
Iteration  22: 521740.284 ops/s
Iteration  23: 440388.546 ops/s
Iteration  24: 524628.497 ops/s
Iteration  25: 545681.958 ops/s
Iteration  26: 537200.215 ops/s
Iteration  27: 538326.484 ops/s
Iteration  28: 554128.113 ops/s
Iteration  29: 529943.701 ops/s
Iteration  30: 577309.120 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerThrows":
  543725.041 ±(99.9%) 15719.246 ops/s [Average]
  (min, avg, max) = (440388.546, 543725.041, 577309.120), stdev = 23527.830
  CI (99.9%): [528005.795, 559444.288] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerThrows  thrpt   30  543725.041 ± 15719.246  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_callableCrashDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_callableCrashDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70071.085 ops/s
# Warmup Iteration   2: 435411.903 ops/s
# Warmup Iteration   3: 489954.810 ops/s
# Warmup Iteration   4: 495819.995 ops/s
# Warmup Iteration   5: 509021.987 ops/s
# Warmup Iteration   6: 507612.835 ops/s
# Warmup Iteration   7: 501301.156 ops/s
# Warmup Iteration   8: 512123.504 ops/s
# Warmup Iteration   9: 507014.923 ops/s
# Warmup Iteration  10: 496005.951 ops/s
# Warmup Iteration  11: 526787.190 ops/s
# Warmup Iteration  12: 492706.902 ops/s
# Warmup Iteration  13: 501683.027 ops/s
# Warmup Iteration  14: 479291.980 ops/s
# Warmup Iteration  15: 511997.367 ops/s
# Warmup Iteration  16: 526760.064 ops/s
# Warmup Iteration  17: 517328.739 ops/s
# Warmup Iteration  18: 538012.299 ops/s
# Warmup Iteration  19: 526365.141 ops/s
# Warmup Iteration  20: 530648.690 ops/s
# Warmup Iteration  21: 547789.231 ops/s
# Warmup Iteration  22: 516619.954 ops/s
# Warmup Iteration  23: 537914.147 ops/s
# Warmup Iteration  24: 493278.824 ops/s
# Warmup Iteration  25: 516333.838 ops/s
# Warmup Iteration  26: 550924.159 ops/s
# Warmup Iteration  27: 510492.780 ops/s
# Warmup Iteration  28: 556135.912 ops/s
# Warmup Iteration  29: 514656.952 ops/s
# Warmup Iteration  30: 540954.756 ops/s
Iteration   1: 525220.207 ops/s
Iteration   2: 530844.292 ops/s
Iteration   3: 550589.457 ops/s
Iteration   4: 529765.543 ops/s
Iteration   5: 534974.347 ops/s
Iteration   6: 545808.723 ops/s
Iteration   7: 515996.968 ops/s
Iteration   8: 549341.642 ops/s
Iteration   9: 508720.812 ops/s
Iteration  10: 545122.813 ops/s
Iteration  11: 505456.175 ops/s
Iteration  12: 540798.399 ops/s
Iteration  13: 513125.887 ops/s
Iteration  14: 516979.987 ops/s
Iteration  15: 532071.142 ops/s
Iteration  16: 518127.138 ops/s
Iteration  17: 544371.323 ops/s
Iteration  18: 534431.285 ops/s
Iteration  19: 514842.684 ops/s
Iteration  20: 554508.296 ops/s
Iteration  21: 527025.910 ops/s
Iteration  22: 520005.613 ops/s
Iteration  23: 547382.932 ops/s
Iteration  24: 519379.569 ops/s
Iteration  25: 539430.298 ops/s
Iteration  26: 524066.059 ops/s
Iteration  27: 528815.610 ops/s
Iteration  28: 517667.093 ops/s
Iteration  29: 520913.828 ops/s
Iteration  30: 547030.500 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_callableCrashDelayError":
  530093.818 ±(99.9%) 9219.862 ops/s [Average]
  (min, avg, max) = (505456.175, 530093.818, 554508.296), stdev = 13799.857
  CI (99.9%): [520873.955, 539313.680] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_callableCrashDelayError  thrpt   30  530093.818 ± 9219.862  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerEmptyDisposeDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerEmptyDisposeDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 775362.392 ops/s
# Warmup Iteration   2: 3122369.471 ops/s
# Warmup Iteration   3: 3533574.752 ops/s
# Warmup Iteration   4: 4278349.565 ops/s
# Warmup Iteration   5: 4372275.916 ops/s
# Warmup Iteration   6: 4158720.892 ops/s
# Warmup Iteration   7: 4020348.457 ops/s
# Warmup Iteration   8: 4197311.297 ops/s
# Warmup Iteration   9: 4091545.588 ops/s
# Warmup Iteration  10: 4138716.891 ops/s
# Warmup Iteration  11: 4173843.858 ops/s
# Warmup Iteration  12: 4140830.313 ops/s
# Warmup Iteration  13: 4242506.326 ops/s
# Warmup Iteration  14: 4164875.954 ops/s
# Warmup Iteration  15: 4247427.406 ops/s
# Warmup Iteration  16: 4225611.105 ops/s
# Warmup Iteration  17: 4133818.164 ops/s
# Warmup Iteration  18: 4218710.551 ops/s
# Warmup Iteration  19: 4209427.291 ops/s
# Warmup Iteration  20: 4229125.977 ops/s
# Warmup Iteration  21: 4191993.303 ops/s
# Warmup Iteration  22: 4147810.623 ops/s
# Warmup Iteration  23: 4125669.680 ops/s
# Warmup Iteration  24: 4190849.178 ops/s
# Warmup Iteration  25: 4336680.086 ops/s
# Warmup Iteration  26: 4059017.170 ops/s
# Warmup Iteration  27: 4268457.549 ops/s
# Warmup Iteration  28: 4169212.230 ops/s
# Warmup Iteration  29: 4200956.292 ops/s
# Warmup Iteration  30: 4157665.587 ops/s
Iteration   1: 4251859.948 ops/s
Iteration   2: 4139684.069 ops/s
Iteration   3: 4165642.965 ops/s
Iteration   4: 4305279.985 ops/s
Iteration   5: 4089784.616 ops/s
Iteration   6: 4248081.051 ops/s
Iteration   7: 4229219.671 ops/s
Iteration   8: 4136467.632 ops/s
Iteration   9: 4194175.624 ops/s
Iteration  10: 4061209.366 ops/s
Iteration  11: 4381456.667 ops/s
Iteration  12: 4363505.740 ops/s
Iteration  13: 4081228.030 ops/s
Iteration  14: 4276179.008 ops/s
Iteration  15: 4309156.030 ops/s
Iteration  16: 3999062.667 ops/s
Iteration  17: 4390170.765 ops/s
Iteration  18: 3328202.292 ops/s
Iteration  19: 4153907.882 ops/s
Iteration  20: 4261628.978 ops/s
Iteration  21: 4109563.497 ops/s
Iteration  22: 4235372.991 ops/s
Iteration  23: 4014192.131 ops/s
Iteration  24: 4268489.921 ops/s
Iteration  25: 4131075.684 ops/s
Iteration  26: 4184226.117 ops/s
Iteration  27: 4191720.682 ops/s
Iteration  28: 4132351.193 ops/s
Iteration  29: 4180766.833 ops/s
Iteration  30: 4054793.887 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerEmptyDisposeDelayError":
  4162281.864 ±(99.9%) 125807.682 ops/s [Average]
  (min, avg, max) = (3328202.292, 4162281.864, 4390170.765), stdev = 188303.030
  CI (99.9%): [4036474.182, 4288089.546] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score        Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerEmptyDisposeDelayError  thrpt   30  4162281.864 ± 125807.682  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39049.315 ops/s
# Warmup Iteration   2: 172110.878 ops/s
# Warmup Iteration   3: 188920.825 ops/s
# Warmup Iteration   4: 183847.705 ops/s
# Warmup Iteration   5: 209497.110 ops/s
# Warmup Iteration   6: 198376.346 ops/s
# Warmup Iteration   7: 217935.709 ops/s
# Warmup Iteration   8: 207030.477 ops/s
# Warmup Iteration   9: 216209.821 ops/s
# Warmup Iteration  10: 217136.174 ops/s
# Warmup Iteration  11: 211123.897 ops/s
# Warmup Iteration  12: 203801.853 ops/s
# Warmup Iteration  13: 212544.184 ops/s
# Warmup Iteration  14: 208618.116 ops/s
# Warmup Iteration  15: 213943.907 ops/s
# Warmup Iteration  16: 211533.045 ops/s
# Warmup Iteration  17: 214945.002 ops/s
# Warmup Iteration  18: 225224.345 ops/s
# Warmup Iteration  19: 208959.702 ops/s
# Warmup Iteration  20: 227474.633 ops/s
# Warmup Iteration  21: 211138.396 ops/s
# Warmup Iteration  22: 218607.344 ops/s
# Warmup Iteration  23: 222426.350 ops/s
# Warmup Iteration  24: 218103.732 ops/s
# Warmup Iteration  25: 211116.926 ops/s
# Warmup Iteration  26: 222437.647 ops/s
# Warmup Iteration  27: 210844.362 ops/s
# Warmup Iteration  28: 225594.668 ops/s
# Warmup Iteration  29: 214542.938 ops/s
# Warmup Iteration  30: 217477.754 ops/s
Iteration   1: 220178.779 ops/s
Iteration   2: 216215.504 ops/s
Iteration   3: 219506.385 ops/s
Iteration   4: 211678.214 ops/s
Iteration   5: 218866.047 ops/s
Iteration   6: 217704.947 ops/s
Iteration   7: 216560.996 ops/s
Iteration   8: 221079.786 ops/s
Iteration   9: 210485.021 ops/s
Iteration  10: 223634.185 ops/s
Iteration  11: 212293.665 ops/s
Iteration  12: 221357.257 ops/s
Iteration  13: 213013.639 ops/s
Iteration  14: 220426.380 ops/s
Iteration  15: 214982.128 ops/s
Iteration  16: 215765.426 ops/s
Iteration  17: 219313.994 ops/s
Iteration  18: 217896.275 ops/s
Iteration  19: 213920.550 ops/s
Iteration  20: 223374.660 ops/s
Iteration  21: 210802.728 ops/s
Iteration  22: 218998.957 ops/s
Iteration  23: 212569.422 ops/s
Iteration  24: 220175.991 ops/s
Iteration  25: 212842.497 ops/s
Iteration  26: 220127.264 ops/s
Iteration  27: 221038.682 ops/s
Iteration  28: 212627.068 ops/s
Iteration  29: 221462.951 ops/s
Iteration  30: 207004.140 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  216863.451 ±(99.9%) 2875.348 ops/s [Average]
  (min, avg, max) = (207004.140, 216863.451, 223634.185), stdev = 4303.686
  CI (99.9%): [213988.103, 219738.799] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  216863.451 ± 2875.348  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38791.651 ops/s
# Warmup Iteration   2: 190812.903 ops/s
# Warmup Iteration   3: 191055.470 ops/s
# Warmup Iteration   4: 210579.068 ops/s
# Warmup Iteration   5: 203459.033 ops/s
# Warmup Iteration   6: 215836.075 ops/s
# Warmup Iteration   7: 206078.740 ops/s
# Warmup Iteration   8: 217635.493 ops/s
# Warmup Iteration   9: 218294.380 ops/s
# Warmup Iteration  10: 209101.652 ops/s
# Warmup Iteration  11: 220210.889 ops/s
# Warmup Iteration  12: 215833.774 ops/s
# Warmup Iteration  13: 217615.710 ops/s
# Warmup Iteration  14: 213931.206 ops/s
# Warmup Iteration  15: 208424.528 ops/s
# Warmup Iteration  16: 221434.824 ops/s
# Warmup Iteration  17: 232929.914 ops/s
# Warmup Iteration  18: 216195.533 ops/s
# Warmup Iteration  19: 233098.048 ops/s
# Warmup Iteration  20: 216309.664 ops/s
# Warmup Iteration  21: 224145.658 ops/s
# Warmup Iteration  22: 223261.186 ops/s
# Warmup Iteration  23: 226731.059 ops/s
# Warmup Iteration  24: 227244.503 ops/s
# Warmup Iteration  25: 215004.186 ops/s
# Warmup Iteration  26: 231638.102 ops/s
# Warmup Iteration  27: 218124.277 ops/s
# Warmup Iteration  28: 227832.086 ops/s
# Warmup Iteration  29: 223349.112 ops/s
# Warmup Iteration  30: 228657.682 ops/s
Iteration   1: 220411.321 ops/s
Iteration   2: 231069.848 ops/s
Iteration   3: 220901.820 ops/s
Iteration   4: 224023.291 ops/s
Iteration   5: 222866.382 ops/s
Iteration   6: 220647.308 ops/s
Iteration   7: 231057.823 ops/s
Iteration   8: 221211.937 ops/s
Iteration   9: 219126.775 ops/s
Iteration  10: 228841.003 ops/s
Iteration  11: 220435.338 ops/s
Iteration  12: 188295.529 ops/s
Iteration  13: 209629.931 ops/s
Iteration  14: 223997.500 ops/s
Iteration  15: 218264.859 ops/s
Iteration  16: 216320.603 ops/s
Iteration  17: 225518.054 ops/s
Iteration  18: 224540.573 ops/s
Iteration  19: 219283.099 ops/s
Iteration  20: 230682.469 ops/s
Iteration  21: 213456.781 ops/s
Iteration  22: 222725.293 ops/s
Iteration  23: 232762.394 ops/s
Iteration  24: 216532.839 ops/s
Iteration  25: 231304.231 ops/s
Iteration  26: 216421.579 ops/s
Iteration  27: 230973.313 ops/s
Iteration  28: 220037.387 ops/s
Iteration  29: 222787.560 ops/s
Iteration  30: 232284.611 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancel":
  221880.382 ±(99.9%) 5820.368 ops/s [Average]
  (min, avg, max) = (188295.529, 221880.382, 232762.394), stdev = 8711.654
  CI (99.9%): [216060.013, 227700.750] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  221880.382 ± 5820.368  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRangeTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRangeTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19307.907 ops/s
# Warmup Iteration   2: 41632.095 ops/s
# Warmup Iteration   3: 67860.214 ops/s
# Warmup Iteration   4: 112065.646 ops/s
# Warmup Iteration   5: 82988.562 ops/s
# Warmup Iteration   6: 105854.521 ops/s
# Warmup Iteration   7: 113606.185 ops/s
# Warmup Iteration   8: 113910.356 ops/s
# Warmup Iteration   9: 110180.503 ops/s
# Warmup Iteration  10: 115637.973 ops/s
# Warmup Iteration  11: 88936.583 ops/s
# Warmup Iteration  12: 106256.554 ops/s
# Warmup Iteration  13: 123018.384 ops/s
# Warmup Iteration  14: 102969.250 ops/s
# Warmup Iteration  15: 118439.532 ops/s
# Warmup Iteration  16: 110858.756 ops/s
# Warmup Iteration  17: 114045.527 ops/s
# Warmup Iteration  18: 111843.100 ops/s
# Warmup Iteration  19: 99913.840 ops/s
# Warmup Iteration  20: 120030.542 ops/s
# Warmup Iteration  21: 109284.179 ops/s
# Warmup Iteration  22: 117743.047 ops/s
# Warmup Iteration  23: 103883.957 ops/s
# Warmup Iteration  24: 115561.126 ops/s
# Warmup Iteration  25: 118590.369 ops/s
# Warmup Iteration  26: 120936.793 ops/s
# Warmup Iteration  27: 110934.638 ops/s
# Warmup Iteration  28: 107407.488 ops/s
# Warmup Iteration  29: 101200.846 ops/s
# Warmup Iteration  30: 108840.779 ops/s
Iteration   1: 121555.139 ops/s
Iteration   2: 113822.958 ops/s
Iteration   3: 113948.024 ops/s
Iteration   4: 103886.688 ops/s
Iteration   5: 103877.108 ops/s
Iteration   6: 107676.805 ops/s
Iteration   7: 109122.776 ops/s
Iteration   8: 125272.036 ops/s
Iteration   9: 114154.226 ops/s
Iteration  10: 118564.059 ops/s
Iteration  11: 110617.614 ops/s
Iteration  12: 126383.089 ops/s
Iteration  13: 108133.529 ops/s
Iteration  14: 113280.530 ops/s
Iteration  15: 110401.178 ops/s
Iteration  16: 114695.238 ops/s
Iteration  17: 113861.197 ops/s
Iteration  18: 101888.129 ops/s
Iteration  19: 124385.099 ops/s
Iteration  20: 109476.991 ops/s
Iteration  21: 112538.709 ops/s
Iteration  22: 128263.646 ops/s
Iteration  23: 118477.986 ops/s
Iteration  24: 115144.594 ops/s
Iteration  25: 115433.689 ops/s
Iteration  26: 110054.944 ops/s
Iteration  27: 105659.776 ops/s
Iteration  28: 113668.357 ops/s
Iteration  29: 120828.854 ops/s
Iteration  30: 120296.984 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRangeTest._Benchmark.benchmark_badRequest":
  114178.998 ±(99.9%) 4577.469 ops/s [Average]
  (min, avg, max) = (101888.129, 114178.998, 128263.646), stdev = 6851.341
  CI (99.9%): [109601.529, 118756.467] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableIntervalRangeTest._Benchmark.benchmark_badRequest  thrpt   30  114178.998 ± 4577.469  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRangeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRangeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42351.883 ops/s
# Warmup Iteration   2: 127430.213 ops/s
# Warmup Iteration   3: 129803.950 ops/s
# Warmup Iteration   4: 113511.288 ops/s
# Warmup Iteration   5: 145602.639 ops/s
# Warmup Iteration   6: 128561.152 ops/s
# Warmup Iteration   7: 145515.626 ops/s
# Warmup Iteration   8: 126218.663 ops/s
# Warmup Iteration   9: 149910.452 ops/s
# Warmup Iteration  10: 153169.762 ops/s
# Warmup Iteration  11: 146052.754 ops/s
# Warmup Iteration  12: 135586.961 ops/s
# Warmup Iteration  13: 158560.666 ops/s
# Warmup Iteration  14: 124181.120 ops/s
# Warmup Iteration  15: 130998.895 ops/s
# Warmup Iteration  16: 129477.511 ops/s
# Warmup Iteration  17: 155734.673 ops/s
# Warmup Iteration  18: 129194.694 ops/s
# Warmup Iteration  19: 145446.593 ops/s
# Warmup Iteration  20: 139578.595 ops/s
# Warmup Iteration  21: 131352.941 ops/s
# Warmup Iteration  22: 161047.490 ops/s
# Warmup Iteration  23: 143038.165 ops/s
# Warmup Iteration  24: 145002.599 ops/s
# Warmup Iteration  25: 127814.771 ops/s
# Warmup Iteration  26: 125674.751 ops/s
# Warmup Iteration  27: 144867.985 ops/s
# Warmup Iteration  28: 129375.607 ops/s
# Warmup Iteration  29: 147065.884 ops/s
# Warmup Iteration  30: 141651.825 ops/s
Iteration   1: 134333.624 ops/s
Iteration   2: 146378.972 ops/s
Iteration   3: 140196.934 ops/s
Iteration   4: 142766.455 ops/s
Iteration   5: 136965.108 ops/s
Iteration   6: 139119.098 ops/s
Iteration   7: 153623.920 ops/s
Iteration   8: 130558.696 ops/s
Iteration   9: 147056.528 ops/s
Iteration  10: 129991.255 ops/s
Iteration  11: 134862.059 ops/s
Iteration  12: 126237.131 ops/s
Iteration  13: 146582.014 ops/s
Iteration  14: 158243.072 ops/s
Iteration  15: 155108.695 ops/s
Iteration  16: 145402.671 ops/s
Iteration  17: 132683.645 ops/s
Iteration  18: 147761.855 ops/s
Iteration  19: 143098.511 ops/s
Iteration  20: 147960.585 ops/s
Iteration  21: 128669.837 ops/s
Iteration  22: 126767.298 ops/s
Iteration  23: 133497.570 ops/s
Iteration  24: 131322.995 ops/s
Iteration  25: 131389.570 ops/s
Iteration  26: 138032.615 ops/s
Iteration  27: 140423.310 ops/s
Iteration  28: 123743.814 ops/s
Iteration  29: 117377.540 ops/s
Iteration  30: 139050.465 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRangeTest._Benchmark.benchmark_dispose":
  138306.861 ±(99.9%) 6496.021 ops/s [Average]
  (min, avg, max) = (117377.540, 138306.861, 158243.072), stdev = 9722.939
  CI (99.9%): [131810.841, 144802.882] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
FlowableIntervalRangeTest._Benchmark.benchmark_dispose  thrpt   30  138306.861 ± 6496.021  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23442.274 ops/s
# Warmup Iteration   2: 24414.266 ops/s
# Warmup Iteration   3: 20121.979 ops/s
# Warmup Iteration   4: 20200.650 ops/s
# Warmup Iteration   5: 19769.121 ops/s
# Warmup Iteration   6: 19971.077 ops/s
# Warmup Iteration   7: 19614.667 ops/s
# Warmup Iteration   8: 20406.553 ops/s
# Warmup Iteration   9: 20123.002 ops/s
# Warmup Iteration  10: 19740.167 ops/s
# Warmup Iteration  11: 23947.951 ops/s
# Warmup Iteration  12: 20526.598 ops/s
# Warmup Iteration  13: 20122.938 ops/s
# Warmup Iteration  14: 19820.704 ops/s
# Warmup Iteration  15: 20447.178 ops/s
# Warmup Iteration  16: 19699.536 ops/s
# Warmup Iteration  17: 20287.376 ops/s
# Warmup Iteration  18: 20022.944 ops/s
# Warmup Iteration  19: 20547.193 ops/s
# Warmup Iteration  20: 19868.393 ops/s
# Warmup Iteration  21: 20001.303 ops/s
# Warmup Iteration  22: 20301.767 ops/s
# Warmup Iteration  23: 20138.049 ops/s
# Warmup Iteration  24: 20111.955 ops/s
# Warmup Iteration  25: 20641.265 ops/s
# Warmup Iteration  26: 20086.749 ops/s
# Warmup Iteration  27: 20335.313 ops/s
# Warmup Iteration  28: 19934.080 ops/s
# Warmup Iteration  29: 21093.979 ops/s
# Warmup Iteration  30: 19701.640 ops/s
Iteration   1: 20457.298 ops/s
Iteration   2: 19567.007 ops/s
Iteration   3: 20954.860 ops/s
Iteration   4: 20182.946 ops/s
Iteration   5: 20266.994 ops/s
Iteration   6: 19821.779 ops/s
Iteration   7: 20638.236 ops/s
Iteration   8: 20072.387 ops/s
Iteration   9: 20174.524 ops/s
Iteration  10: 19840.948 ops/s
Iteration  11: 20083.658 ops/s
Iteration  12: 20792.845 ops/s
Iteration  13: 20305.081 ops/s
Iteration  14: 20444.567 ops/s
Iteration  15: 18521.055 ops/s
Iteration  16: 19470.277 ops/s
Iteration  17: 20446.403 ops/s
Iteration  18: 19541.223 ops/s
Iteration  19: 20923.313 ops/s
Iteration  20: 20182.532 ops/s
Iteration  21: 20534.600 ops/s
Iteration  22: 20464.767 ops/s
Iteration  23: 20116.333 ops/s
Iteration  24: 20109.117 ops/s
Iteration  25: 19967.877 ops/s
Iteration  26: 20128.091 ops/s
Iteration  27: 20191.104 ops/s
Iteration  28: 20124.717 ops/s
Iteration  29: 20408.005 ops/s
Iteration  30: 20915.367 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnComplete":
  20188.264 ±(99.9%) 331.532 ops/s [Average]
  (min, avg, max) = (18521.055, 20188.264, 20954.860), stdev = 496.221
  CI (99.9%): [19856.732, 20519.795] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt      Score     Error  Units
MaybeTest._Benchmark.benchmark_observeOnComplete  thrpt   30  20188.264 ± 331.532  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76860.168 ops/s
# Warmup Iteration   2: 169722.995 ops/s
# Warmup Iteration   3: 219552.626 ops/s
# Warmup Iteration   4: 211390.108 ops/s
# Warmup Iteration   5: 216304.656 ops/s
# Warmup Iteration   6: 221149.463 ops/s
# Warmup Iteration   7: 206886.926 ops/s
# Warmup Iteration   8: 220335.334 ops/s
# Warmup Iteration   9: 209746.359 ops/s
# Warmup Iteration  10: 213008.645 ops/s
# Warmup Iteration  11: 214779.873 ops/s
# Warmup Iteration  12: 216101.556 ops/s
# Warmup Iteration  13: 216741.243 ops/s
# Warmup Iteration  14: 219387.825 ops/s
# Warmup Iteration  15: 211348.380 ops/s
# Warmup Iteration  16: 217343.948 ops/s
# Warmup Iteration  17: 210915.235 ops/s
# Warmup Iteration  18: 222506.527 ops/s
# Warmup Iteration  19: 212306.810 ops/s
# Warmup Iteration  20: 215570.418 ops/s
# Warmup Iteration  21: 225045.211 ops/s
# Warmup Iteration  22: 209164.940 ops/s
# Warmup Iteration  23: 222560.232 ops/s
# Warmup Iteration  24: 216297.768 ops/s
# Warmup Iteration  25: 210664.455 ops/s
# Warmup Iteration  26: 214549.057 ops/s
# Warmup Iteration  27: 214519.098 ops/s
# Warmup Iteration  28: 204956.562 ops/s
# Warmup Iteration  29: 191029.811 ops/s
# Warmup Iteration  30: 214175.819 ops/s
Iteration   1: 220166.388 ops/s
Iteration   2: 215901.707 ops/s
Iteration   3: 213942.681 ops/s
Iteration   4: 218768.822 ops/s
Iteration   5: 210756.224 ops/s
Iteration   6: 220682.365 ops/s
Iteration   7: 210067.622 ops/s
Iteration   8: 216050.479 ops/s
Iteration   9: 219032.480 ops/s
Iteration  10: <failure>

java.lang.AssertionError: expected null, but was:<Timed[time=28970930, unit=MINUTES, value=1]>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotNull(Assert.java:756)
	at org.junit.Assert.assertNull(Assert.java:738)
	at org.junit.Assert.assertNull(Assert.java:748)
	at io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest.noHeadRetentionCompleteTime(ObservableReplayTest.java:1265)
	at io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest$_Benchmark$_InstanceStatement.evaluate(ObservableReplayTest.java:1701)
	at io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest$_Benchmark$_ClassStatement.evaluate(ObservableReplayTest.java:1728)
	at io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest$_Benchmark.benchmark_noHeadRetentionCompleteTime(ObservableReplayTest.java:1650)
	at io.reactivex.rxjava3.internal.operators.observable.generated.ObservableReplayTest__Benchmark_benchmark_noHeadRetentionCompleteTime_jmhTest.benchmark_noHeadRetentionCompleteTime_thrpt_jmhStub(ObservableReplayTest__Benchmark_benchmark_noHeadRetentionCompleteTime_jmhTest.java:119)
	at io.reactivex.rxjava3.internal.operators.observable.generated.ObservableReplayTest__Benchmark_benchmark_noHeadRetentionCompleteTime_jmhTest.benchmark_noHeadRetentionCompleteTime_Throughput(ObservableReplayTest__Benchmark_benchmark_noHeadRetentionCompleteTime_jmhTest.java:83)
	at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteTime":
  216152.085 ±(99.9%) 6585.734 ops/s [Average]
  (min, avg, max) = (210067.622, 216152.085, 220682.365), stdev = 3919.065
  CI (99.9%): [209566.352, 222737.819] (assumes normal distribution)


# Run complete. Total time: 00:00:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteTime  thrpt    9  216152.085 ± 6585.734  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_success$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_success

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2532533.317 ops/s
# Warmup Iteration   2: 6868916.768 ops/s
# Warmup Iteration   3: 7725154.148 ops/s
# Warmup Iteration   4: 7697740.018 ops/s
# Warmup Iteration   5: 8285549.855 ops/s
# Warmup Iteration   6: 7201396.470 ops/s
# Warmup Iteration   7: 7353473.276 ops/s
# Warmup Iteration   8: 8035256.036 ops/s
# Warmup Iteration   9: 8119943.034 ops/s
# Warmup Iteration  10: 7762876.096 ops/s
# Warmup Iteration  11: 8071572.636 ops/s
# Warmup Iteration  12: 8021020.175 ops/s
# Warmup Iteration  13: 8052588.733 ops/s
# Warmup Iteration  14: 8193553.943 ops/s
# Warmup Iteration  15: 7642442.835 ops/s
# Warmup Iteration  16: 8176844.153 ops/s
# Warmup Iteration  17: 7669008.245 ops/s
# Warmup Iteration  18: 8028256.453 ops/s
# Warmup Iteration  19: 8031389.715 ops/s
# Warmup Iteration  20: 8033476.292 ops/s
# Warmup Iteration  21: 7874924.232 ops/s
# Warmup Iteration  22: 7717299.453 ops/s
# Warmup Iteration  23: 8072657.715 ops/s
# Warmup Iteration  24: 7848711.462 ops/s
# Warmup Iteration  25: 7738115.918 ops/s
# Warmup Iteration  26: 7993358.406 ops/s
# Warmup Iteration  27: 7830384.433 ops/s
# Warmup Iteration  28: 7921675.433 ops/s
# Warmup Iteration  29: 8187839.325 ops/s
# Warmup Iteration  30: 7808773.066 ops/s
Iteration   1: 7978055.374 ops/s
Iteration   2: 7664016.216 ops/s
Iteration   3: 8152813.128 ops/s
Iteration   4: 7864816.405 ops/s
Iteration   5: 7966710.575 ops/s
Iteration   6: 7929637.847 ops/s
Iteration   7: 7804963.585 ops/s
Iteration   8: 8393282.485 ops/s
Iteration   9: 7795404.269 ops/s
Iteration  10: 8069556.149 ops/s
Iteration  11: 7853846.385 ops/s
Iteration  12: 7909533.010 ops/s
Iteration  13: 8231320.003 ops/s
Iteration  14: 7619869.691 ops/s
Iteration  15: 7645673.745 ops/s
Iteration  16: 8159068.700 ops/s
Iteration  17: 7841136.361 ops/s
Iteration  18: 7926783.400 ops/s
Iteration  19: 7965460.300 ops/s
Iteration  20: 7984111.245 ops/s
Iteration  21: 8152638.671 ops/s
Iteration  22: 7724520.495 ops/s
Iteration  23: 8161582.682 ops/s
Iteration  24: 7871823.199 ops/s
Iteration  25: 8055133.837 ops/s
Iteration  26: 7701010.190 ops/s
Iteration  27: 7837004.416 ops/s
Iteration  28: 8097852.879 ops/s
Iteration  29: 7737525.498 ops/s
Iteration  30: 7925183.273 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_success":
  7934011.134 ±(99.9%) 125610.644 ops/s [Average]
  (min, avg, max) = (7619869.691, 7934011.134, 8393282.485), stdev = 188008.113
  CI (99.9%): [7808400.490, 8059621.778] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score        Error  Units
MaybeFromCallableTest._Benchmark.benchmark_success  thrpt   30  7934011.134 ± 125610.644  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_nextWindowMissingBackpressureDrainOnSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_nextWindowMissingBackpressureDrainOnSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15169.788 ops/s
# Warmup Iteration   2: 26101.235 ops/s
# Warmup Iteration   3: 33199.735 ops/s
# Warmup Iteration   4: 60632.380 ops/s
# Warmup Iteration   5: 84476.480 ops/s
# Warmup Iteration   6: 87237.854 ops/s
# Warmup Iteration   7: 95955.446 ops/s
# Warmup Iteration   8: 95668.724 ops/s
# Warmup Iteration   9: 82202.538 ops/s
# Warmup Iteration  10: 89396.169 ops/s
# Warmup Iteration  11: 87026.301 ops/s
# Warmup Iteration  12: 89542.658 ops/s
# Warmup Iteration  13: 94889.611 ops/s
# Warmup Iteration  14: 88069.215 ops/s
# Warmup Iteration  15: 96234.596 ops/s
# Warmup Iteration  16: 92834.700 ops/s
# Warmup Iteration  17: 94940.916 ops/s
# Warmup Iteration  18: 99104.649 ops/s
# Warmup Iteration  19: 100815.986 ops/s
# Warmup Iteration  20: 100506.470 ops/s
# Warmup Iteration  21: 85575.630 ops/s
# Warmup Iteration  22: 95314.117 ops/s
# Warmup Iteration  23: 102054.246 ops/s
# Warmup Iteration  24: 97592.300 ops/s
# Warmup Iteration  25: 89899.714 ops/s
# Warmup Iteration  26: 104547.889 ops/s
# Warmup Iteration  27: 97697.818 ops/s
# Warmup Iteration  28: 95931.069 ops/s
# Warmup Iteration  29: 94165.272 ops/s
# Warmup Iteration  30: 95378.961 ops/s
Iteration   1: 97188.209 ops/s
Iteration   2: 93401.981 ops/s
Iteration   3: 85244.679 ops/s
Iteration   4: 94573.128 ops/s
Iteration   5: 105580.305 ops/s
Iteration   6: 95250.858 ops/s
Iteration   7: 96432.979 ops/s
Iteration   8: 99023.460 ops/s
Iteration   9: 91306.731 ops/s
Iteration  10: 82022.626 ops/s
Iteration  11: 90649.069 ops/s
Iteration  12: 81837.913 ops/s
Iteration  13: 75716.739 ops/s
Iteration  14: 93442.705 ops/s
Iteration  15: 84025.675 ops/s
Iteration  16: 83952.327 ops/s
Iteration  17: 98457.671 ops/s
Iteration  18: 97763.925 ops/s
Iteration  19: 96340.515 ops/s
Iteration  20: 96935.523 ops/s
Iteration  21: 96088.116 ops/s
Iteration  22: 92721.458 ops/s
Iteration  23: 100124.426 ops/s
Iteration  24: 92728.285 ops/s
Iteration  25: 94151.302 ops/s
Iteration  26: 96022.772 ops/s
Iteration  27: 99898.072 ops/s
Iteration  28: 87769.783 ops/s
Iteration  29: 89642.053 ops/s
Iteration  30: 83114.527 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_nextWindowMissingBackpressureDrainOnSize":
  92380.260 ±(99.9%) 4522.805 ops/s [Average]
  (min, avg, max) = (75716.739, 92380.260, 105580.305), stdev = 6769.522
  CI (99.9%): [87857.456, 96903.065] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt      Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_nextWindowMissingBackpressureDrainOnSize  thrpt   30  92380.260 ± 4522.805  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.disposables.DisposableHelperTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.disposables.DisposableHelperTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8755889.298 ops/s
# Warmup Iteration   2: 12655389.174 ops/s
# Warmup Iteration   3: 11268292.509 ops/s
# Warmup Iteration   4: 14394705.457 ops/s
# Warmup Iteration   5: 13979716.034 ops/s
# Warmup Iteration   6: 14291883.447 ops/s
# Warmup Iteration   7: 14472586.475 ops/s
# Warmup Iteration   8: 14197575.304 ops/s
# Warmup Iteration   9: 14083419.123 ops/s
# Warmup Iteration  10: 13804025.650 ops/s
# Warmup Iteration  11: 14230651.841 ops/s
# Warmup Iteration  12: 14256198.388 ops/s
# Warmup Iteration  13: 13991482.543 ops/s
# Warmup Iteration  14: 14847676.734 ops/s
# Warmup Iteration  15: 14537697.742 ops/s
# Warmup Iteration  16: 14050558.190 ops/s
# Warmup Iteration  17: 14199143.322 ops/s
# Warmup Iteration  18: 14448562.074 ops/s
# Warmup Iteration  19: 13770640.037 ops/s
# Warmup Iteration  20: 14447100.324 ops/s
# Warmup Iteration  21: 14146058.361 ops/s
# Warmup Iteration  22: 14006286.914 ops/s
# Warmup Iteration  23: 14495776.926 ops/s
# Warmup Iteration  24: 14086419.685 ops/s
# Warmup Iteration  25: 14154124.590 ops/s
# Warmup Iteration  26: 14777339.034 ops/s
# Warmup Iteration  27: 14018894.664 ops/s
# Warmup Iteration  28: 14141609.448 ops/s
# Warmup Iteration  29: 14494210.004 ops/s
# Warmup Iteration  30: 14174309.558 ops/s
Iteration   1: 14632128.338 ops/s
Iteration   2: 13668946.843 ops/s
Iteration   3: 14056573.383 ops/s
Iteration   4: 13972521.192 ops/s
Iteration   5: 14221696.861 ops/s
Iteration   6: 14121575.772 ops/s
Iteration   7: 14027912.888 ops/s
Iteration   8: 14883317.896 ops/s
Iteration   9: 14000270.256 ops/s
Iteration  10: 14820443.700 ops/s
Iteration  11: 14121340.497 ops/s
Iteration  12: 14051374.425 ops/s
Iteration  13: 13854919.872 ops/s
Iteration  14: 14607684.063 ops/s
Iteration  15: 14513951.455 ops/s
Iteration  16: 13745558.767 ops/s
Iteration  17: 13943731.624 ops/s
Iteration  18: 13935942.647 ops/s
Iteration  19: 14557914.133 ops/s
Iteration  20: 14462897.076 ops/s
Iteration  21: 13914110.921 ops/s
Iteration  22: 14846780.325 ops/s
Iteration  23: 14650291.625 ops/s
Iteration  24: 13926676.411 ops/s
Iteration  25: 14613859.069 ops/s
Iteration  26: 14190648.559 ops/s
Iteration  27: 14613529.428 ops/s
Iteration  28: 14576768.816 ops/s
Iteration  29: 13971589.413 ops/s
Iteration  30: 14691804.442 ops/s


Result "io.reactivex.rxjava3.internal.disposables.DisposableHelperTest._Benchmark.benchmark_dispose":
  14273225.356 ±(99.9%) 242336.765 ops/s [Average]
  (min, avg, max) = (13668946.843, 14273225.356, 14883317.896), stdev = 362718.288
  CI (99.9%): [14030888.592, 14515562.121] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
DisposableHelperTest._Benchmark.benchmark_dispose  thrpt   30  14273225.356 ± 242336.765  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onSuccessThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onSuccessThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 400304.497 ops/s
# Warmup Iteration   2: 596714.430 ops/s
# Warmup Iteration   3: 673790.896 ops/s
# Warmup Iteration   4: 629398.198 ops/s
# Warmup Iteration   5: 667796.062 ops/s
# Warmup Iteration   6: 629388.092 ops/s
# Warmup Iteration   7: 718809.058 ops/s
# Warmup Iteration   8: 659394.646 ops/s
# Warmup Iteration   9: 687510.456 ops/s
# Warmup Iteration  10: 684327.463 ops/s
# Warmup Iteration  11: 678695.402 ops/s
# Warmup Iteration  12: 695588.431 ops/s
# Warmup Iteration  13: 683291.120 ops/s
# Warmup Iteration  14: 689287.733 ops/s
# Warmup Iteration  15: 692623.119 ops/s
# Warmup Iteration  16: 685549.671 ops/s
# Warmup Iteration  17: 726160.928 ops/s
# Warmup Iteration  18: 727154.715 ops/s
# Warmup Iteration  19: 740571.536 ops/s
# Warmup Iteration  20: 711783.810 ops/s
# Warmup Iteration  21: 734666.042 ops/s
# Warmup Iteration  22: 702209.275 ops/s
# Warmup Iteration  23: 710961.111 ops/s
# Warmup Iteration  24: 736391.088 ops/s
# Warmup Iteration  25: 705370.720 ops/s
# Warmup Iteration  26: 709216.552 ops/s
# Warmup Iteration  27: 738402.804 ops/s
# Warmup Iteration  28: 756423.799 ops/s
# Warmup Iteration  29: 701643.246 ops/s
# Warmup Iteration  30: 736256.968 ops/s
Iteration   1: 700556.059 ops/s
Iteration   2: 741472.845 ops/s
Iteration   3: 710745.224 ops/s
Iteration   4: 714862.836 ops/s
Iteration   5: 721527.449 ops/s
Iteration   6: 721702.321 ops/s
Iteration   7: 605134.267 ops/s
Iteration   8: 720357.930 ops/s
Iteration   9: 724001.301 ops/s
Iteration  10: 743300.209 ops/s
Iteration  11: 710974.550 ops/s
Iteration  12: 720707.415 ops/s
Iteration  13: 715134.745 ops/s
Iteration  14: 717893.025 ops/s
Iteration  15: 750985.963 ops/s
Iteration  16: 703980.047 ops/s
Iteration  17: 729184.008 ops/s
Iteration  18: 728258.138 ops/s
Iteration  19: 736905.200 ops/s
Iteration  20: 726493.128 ops/s
Iteration  21: 700502.277 ops/s
Iteration  22: 741052.710 ops/s
Iteration  23: 753387.912 ops/s
Iteration  24: 701561.414 ops/s
Iteration  25: 720160.556 ops/s
Iteration  26: 706973.635 ops/s
Iteration  27: 718086.514 ops/s
Iteration  28: 708245.647 ops/s
Iteration  29: 715036.207 ops/s
Iteration  30: 760141.680 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onSuccessThrows":
  718977.507 ±(99.9%) 17854.740 ops/s [Average]
  (min, avg, max) = (605134.267, 718977.507, 760141.680), stdev = 26724.136
  CI (99.9%): [701122.767, 736832.247] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
MaybeCreateTest._Benchmark.benchmark_onSuccessThrows  thrpt   30  718977.507 ± 17854.740  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onCompleteThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onCompleteThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 430253.144 ops/s
# Warmup Iteration   2: 632017.462 ops/s
# Warmup Iteration   3: 684314.827 ops/s
# Warmup Iteration   4: 676404.071 ops/s
# Warmup Iteration   5: 714286.121 ops/s
# Warmup Iteration   6: 706061.330 ops/s
# Warmup Iteration   7: 674255.677 ops/s
# Warmup Iteration   8: 703134.697 ops/s
# Warmup Iteration   9: 691268.952 ops/s
# Warmup Iteration  10: 698557.513 ops/s
# Warmup Iteration  11: 701735.200 ops/s
# Warmup Iteration  12: 687030.840 ops/s
# Warmup Iteration  13: 669640.861 ops/s
# Warmup Iteration  14: 692862.528 ops/s
# Warmup Iteration  15: 691672.846 ops/s
# Warmup Iteration  16: 711484.089 ops/s
# Warmup Iteration  17: 716090.887 ops/s
# Warmup Iteration  18: 733120.448 ops/s
# Warmup Iteration  19: 732334.660 ops/s
# Warmup Iteration  20: 726344.440 ops/s
# Warmup Iteration  21: 746274.934 ops/s
# Warmup Iteration  22: 722445.359 ops/s
# Warmup Iteration  23: 745581.655 ops/s
# Warmup Iteration  24: 718344.172 ops/s
# Warmup Iteration  25: 728261.550 ops/s
# Warmup Iteration  26: 726215.960 ops/s
# Warmup Iteration  27: 762852.399 ops/s
# Warmup Iteration  28: 696976.614 ops/s
# Warmup Iteration  29: 759488.663 ops/s
# Warmup Iteration  30: 738450.023 ops/s
Iteration   1: 718667.589 ops/s
Iteration   2: 763859.970 ops/s
Iteration   3: 709467.864 ops/s
Iteration   4: 726389.403 ops/s
Iteration   5: 766282.156 ops/s
Iteration   6: 756362.913 ops/s
Iteration   7: 709226.415 ops/s
Iteration   8: 737411.790 ops/s
Iteration   9: 728476.905 ops/s
Iteration  10: 741256.414 ops/s
Iteration  11: 722313.590 ops/s
Iteration  12: 745185.534 ops/s
Iteration  13: 749598.745 ops/s
Iteration  14: 724304.767 ops/s
Iteration  15: 732621.097 ops/s
Iteration  16: 739976.715 ops/s
Iteration  17: 722573.233 ops/s
Iteration  18: 736844.427 ops/s
Iteration  19: 731295.468 ops/s
Iteration  20: 756073.553 ops/s
Iteration  21: 716730.760 ops/s
Iteration  22: 750510.961 ops/s
Iteration  23: 714897.670 ops/s
Iteration  24: 747536.090 ops/s
Iteration  25: 764569.835 ops/s
Iteration  26: 708423.645 ops/s
Iteration  27: 751887.172 ops/s
Iteration  28: 768147.298 ops/s
Iteration  29: 710179.826 ops/s
Iteration  30: 751391.839 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onCompleteThrows":
  736748.788 ±(99.9%) 12495.480 ops/s [Average]
  (min, avg, max) = (708423.645, 736748.788, 768147.298), stdev = 18702.648
  CI (99.9%): [724253.308, 749244.268] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
MaybeCreateTest._Benchmark.benchmark_onCompleteThrows  thrpt   30  736748.788 ± 12495.480  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStageTest._Benchmark.benchmark_syncFailure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStageTest._Benchmark.benchmark_syncFailure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 128614.174 ops/s
# Warmup Iteration   2: 299588.590 ops/s
# Warmup Iteration   3: 331429.187 ops/s
# Warmup Iteration   4: 305488.546 ops/s
# Warmup Iteration   5: 349944.950 ops/s
# Warmup Iteration   6: 335735.846 ops/s
# Warmup Iteration   7: 335713.712 ops/s
# Warmup Iteration   8: 345193.022 ops/s
# Warmup Iteration   9: 348384.981 ops/s
# Warmup Iteration  10: 329235.628 ops/s
# Warmup Iteration  11: 336989.208 ops/s
# Warmup Iteration  12: 356631.155 ops/s
# Warmup Iteration  13: 314882.394 ops/s
# Warmup Iteration  14: 348581.656 ops/s
# Warmup Iteration  15: 352438.697 ops/s
# Warmup Iteration  16: 329630.297 ops/s
# Warmup Iteration  17: 371970.719 ops/s
# Warmup Iteration  18: 368901.481 ops/s
# Warmup Iteration  19: 353437.495 ops/s
# Warmup Iteration  20: 372048.983 ops/s
# Warmup Iteration  21: 357981.306 ops/s
# Warmup Iteration  22: 356775.055 ops/s
# Warmup Iteration  23: 356653.733 ops/s
# Warmup Iteration  24: 350390.341 ops/s
# Warmup Iteration  25: 368858.266 ops/s
# Warmup Iteration  26: 345944.230 ops/s
# Warmup Iteration  27: 351673.844 ops/s
# Warmup Iteration  28: 340186.196 ops/s
# Warmup Iteration  29: 366874.030 ops/s
# Warmup Iteration  30: 365043.021 ops/s
Iteration   1: 329580.016 ops/s
Iteration   2: 345563.905 ops/s
Iteration   3: 365925.407 ops/s
Iteration   4: 352707.229 ops/s
Iteration   5: 368607.680 ops/s
Iteration   6: 353371.272 ops/s
Iteration   7: 370108.807 ops/s
Iteration   8: 368403.916 ops/s
Iteration   9: 359264.008 ops/s
Iteration  10: 365326.711 ops/s
Iteration  11: 373188.906 ops/s
Iteration  12: 350374.380 ops/s
Iteration  13: 366836.350 ops/s
Iteration  14: 370083.803 ops/s
Iteration  15: 362211.702 ops/s
Iteration  16: 346362.828 ops/s
Iteration  17: 366415.571 ops/s
Iteration  18: 359438.620 ops/s
Iteration  19: 367063.170 ops/s
Iteration  20: 362643.622 ops/s
Iteration  21: 360569.290 ops/s
Iteration  22: 364674.700 ops/s
Iteration  23: 363144.225 ops/s
Iteration  24: 345633.242 ops/s
Iteration  25: 370466.046 ops/s
Iteration  26: 355278.033 ops/s
Iteration  27: 375706.878 ops/s
Iteration  28: 365902.741 ops/s
Iteration  29: 350119.091 ops/s
Iteration  30: 362385.219 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStageTest._Benchmark.benchmark_syncFailure":
  360578.579 ±(99.9%) 6785.367 ops/s [Average]
  (min, avg, max) = (329580.016, 360578.579, 375706.878), stdev = 10156.018
  CI (99.9%): [353793.212, 367363.946] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MaybeFromCompletionStageTest._Benchmark.benchmark_syncFailure  thrpt   30  360578.579 ± 6785.367  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_bothComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_bothComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 712991.992 ops/s
# Warmup Iteration   2: 2480629.607 ops/s
# Warmup Iteration   3: 3298047.353 ops/s
# Warmup Iteration   4: 3656911.343 ops/s
# Warmup Iteration   5: 3808930.186 ops/s
# Warmup Iteration   6: 3747757.107 ops/s
# Warmup Iteration   7: 3700313.202 ops/s
# Warmup Iteration   8: 3885022.690 ops/s
# Warmup Iteration   9: 3861301.604 ops/s
# Warmup Iteration  10: 3809204.106 ops/s
# Warmup Iteration  11: 3840194.753 ops/s
# Warmup Iteration  12: 3833669.781 ops/s
# Warmup Iteration  13: 3751304.428 ops/s
# Warmup Iteration  14: 3843735.296 ops/s
# Warmup Iteration  15: 3796908.733 ops/s
# Warmup Iteration  16: 3888006.598 ops/s
# Warmup Iteration  17: 3804860.461 ops/s
# Warmup Iteration  18: 3647698.817 ops/s
# Warmup Iteration  19: 3941128.749 ops/s
# Warmup Iteration  20: 3635147.990 ops/s
# Warmup Iteration  21: 3813687.911 ops/s
# Warmup Iteration  22: 3845355.865 ops/s
# Warmup Iteration  23: 3716854.818 ops/s
# Warmup Iteration  24: 3798954.320 ops/s
# Warmup Iteration  25: 3861064.217 ops/s
# Warmup Iteration  26: 3639796.276 ops/s
# Warmup Iteration  27: 3938846.189 ops/s
# Warmup Iteration  28: 3756821.230 ops/s
# Warmup Iteration  29: 3799892.146 ops/s
# Warmup Iteration  30: 3980575.265 ops/s
Iteration   1: 3825124.523 ops/s
Iteration   2: 3898787.266 ops/s
Iteration   3: 3673104.369 ops/s
Iteration   4: 3920453.432 ops/s
Iteration   5: 3701501.191 ops/s
Iteration   6: 3808152.256 ops/s
Iteration   7: 3778670.290 ops/s
Iteration   8: 3817204.860 ops/s
Iteration   9: 3924035.378 ops/s
Iteration  10: 3790040.001 ops/s
Iteration  11: 3837345.674 ops/s
Iteration  12: 3810000.275 ops/s
Iteration  13: 3802322.456 ops/s
Iteration  14: 3876549.023 ops/s
Iteration  15: 3727503.980 ops/s
Iteration  16: 3891120.465 ops/s
Iteration  17: 3762117.186 ops/s
Iteration  18: 3910210.227 ops/s
Iteration  19: 3967230.728 ops/s
Iteration  20: 3716431.298 ops/s
Iteration  21: 3850764.695 ops/s
Iteration  22: 3785030.626 ops/s
Iteration  23: 4010811.986 ops/s
Iteration  24: 3683378.767 ops/s
Iteration  25: 3750610.215 ops/s
Iteration  26: 3875799.579 ops/s
Iteration  27: 3721131.587 ops/s
Iteration  28: 3844409.071 ops/s
Iteration  29: 3661106.275 ops/s
Iteration  30: 3975659.599 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_bothComplete":
  3819886.909 ±(99.9%) 62275.241 ops/s [Average]
  (min, avg, max) = (3661106.275, 3819886.909, 4010811.986), stdev = 93210.657
  CI (99.9%): [3757611.668, 3882162.151] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MaybeZipArrayTest._Benchmark.benchmark_bothComplete  thrpt   30  3819886.909 ± 62275.241  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onSuccessNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onSuccessNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 269709.262 ops/s
# Warmup Iteration   2: 519729.694 ops/s
# Warmup Iteration   3: 575908.065 ops/s
# Warmup Iteration   4: 606996.073 ops/s
# Warmup Iteration   5: 550721.325 ops/s
# Warmup Iteration   6: 632067.018 ops/s
# Warmup Iteration   7: 619084.141 ops/s
# Warmup Iteration   8: 625305.858 ops/s
# Warmup Iteration   9: 638957.871 ops/s
# Warmup Iteration  10: 603123.293 ops/s
# Warmup Iteration  11: 616271.594 ops/s
# Warmup Iteration  12: 618922.977 ops/s
# Warmup Iteration  13: 627814.678 ops/s
# Warmup Iteration  14: 620430.528 ops/s
# Warmup Iteration  15: 625898.795 ops/s
# Warmup Iteration  16: 623364.762 ops/s
# Warmup Iteration  17: 633708.112 ops/s
# Warmup Iteration  18: 671166.431 ops/s
# Warmup Iteration  19: 637881.208 ops/s
# Warmup Iteration  20: 660695.141 ops/s
# Warmup Iteration  21: 639146.485 ops/s
# Warmup Iteration  22: 658362.825 ops/s
# Warmup Iteration  23: 649740.832 ops/s
# Warmup Iteration  24: 636597.579 ops/s
# Warmup Iteration  25: 670332.880 ops/s
# Warmup Iteration  26: 528003.103 ops/s
# Warmup Iteration  27: 652367.639 ops/s
# Warmup Iteration  28: 645931.848 ops/s
# Warmup Iteration  29: 667200.850 ops/s
# Warmup Iteration  30: 654944.117 ops/s
Iteration   1: 634826.770 ops/s
Iteration   2: 664906.648 ops/s
Iteration   3: 644459.723 ops/s
Iteration   4: 663602.059 ops/s
Iteration   5: 661099.961 ops/s
Iteration   6: 621283.276 ops/s
Iteration   7: 680500.391 ops/s
Iteration   8: 630894.978 ops/s
Iteration   9: 672336.347 ops/s
Iteration  10: 638576.306 ops/s
Iteration  11: 666344.470 ops/s
Iteration  12: 636496.389 ops/s
Iteration  13: 651888.238 ops/s
Iteration  14: 652873.408 ops/s
Iteration  15: 639461.157 ops/s
Iteration  16: 663623.577 ops/s
Iteration  17: 634277.997 ops/s
Iteration  18: 645083.592 ops/s
Iteration  19: 669250.365 ops/s
Iteration  20: 630450.525 ops/s
Iteration  21: 680785.387 ops/s
Iteration  22: 633685.680 ops/s
Iteration  23: 661885.559 ops/s
Iteration  24: 643585.929 ops/s
Iteration  25: 658306.337 ops/s
Iteration  26: 669510.331 ops/s
Iteration  27: 625347.255 ops/s
Iteration  28: 669536.198 ops/s
Iteration  29: 682640.163 ops/s
Iteration  30: 631497.350 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onSuccessNull":
  651967.212 ±(99.9%) 12060.405 ops/s [Average]
  (min, avg, max) = (621283.276, 651967.212, 682640.163), stdev = 18051.448
  CI (99.9%): [639906.807, 664027.617] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
MaybeCreateTest._Benchmark.benchmark_onSuccessNull  thrpt   30  651967.212 ± 12060.405  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_callbackThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_callbackThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 246188.104 ops/s
# Warmup Iteration   2: 610559.924 ops/s
# Warmup Iteration   3: 648797.932 ops/s
# Warmup Iteration   4: 651659.730 ops/s
# Warmup Iteration   5: 651563.709 ops/s
# Warmup Iteration   6: 617368.827 ops/s
# Warmup Iteration   7: 680094.340 ops/s
# Warmup Iteration   8: 607523.478 ops/s
# Warmup Iteration   9: 621260.188 ops/s
# Warmup Iteration  10: 674991.569 ops/s
# Warmup Iteration  11: 595849.117 ops/s
# Warmup Iteration  12: 687455.719 ops/s
# Warmup Iteration  13: 646848.402 ops/s
# Warmup Iteration  14: 664663.414 ops/s
# Warmup Iteration  15: 671272.867 ops/s
# Warmup Iteration  16: 650722.704 ops/s
# Warmup Iteration  17: 707500.118 ops/s
# Warmup Iteration  18: 704833.748 ops/s
# Warmup Iteration  19: 690599.848 ops/s
# Warmup Iteration  20: 697394.810 ops/s
# Warmup Iteration  21: 693073.418 ops/s
# Warmup Iteration  22: 711556.018 ops/s
# Warmup Iteration  23: 739533.832 ops/s
# Warmup Iteration  24: 665270.617 ops/s
# Warmup Iteration  25: 697249.088 ops/s
# Warmup Iteration  26: 682915.297 ops/s
# Warmup Iteration  27: 688065.169 ops/s
# Warmup Iteration  28: 714438.154 ops/s
# Warmup Iteration  29: 677700.677 ops/s
# Warmup Iteration  30: 704173.952 ops/s
Iteration   1: 685372.563 ops/s
Iteration   2: 713665.659 ops/s
Iteration   3: 690979.658 ops/s
Iteration   4: 690285.899 ops/s
Iteration   5: 696735.218 ops/s
Iteration   6: 684358.228 ops/s
Iteration   7: 690206.900 ops/s
Iteration   8: 681345.853 ops/s
Iteration   9: 711314.270 ops/s
Iteration  10: 701338.653 ops/s
Iteration  11: 695307.138 ops/s
Iteration  12: 701920.641 ops/s
Iteration  13: 683722.031 ops/s
Iteration  14: 696181.246 ops/s
Iteration  15: 694332.803 ops/s
Iteration  16: 733669.769 ops/s
Iteration  17: 705471.629 ops/s
Iteration  18: 713443.242 ops/s
Iteration  19: 682179.306 ops/s
Iteration  20: 687983.222 ops/s
Iteration  21: 720938.081 ops/s
Iteration  22: 679437.173 ops/s
Iteration  23: 724636.823 ops/s
Iteration  24: 698389.438 ops/s
Iteration  25: 716679.840 ops/s
Iteration  26: 692371.736 ops/s
Iteration  27: 693581.224 ops/s
Iteration  28: 716368.974 ops/s
Iteration  29: 670310.169 ops/s
Iteration  30: 722459.534 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_callbackThrows":
  699166.231 ±(99.9%) 10402.681 ops/s [Average]
  (min, avg, max) = (670310.169, 699166.231, 733669.769), stdev = 15570.245
  CI (99.9%): [688763.549, 709568.912] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
MaybeCreateTest._Benchmark.benchmark_callbackThrows  thrpt   30  699166.231 ± 10402.681  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onErrorNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onErrorNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 281669.355 ops/s
# Warmup Iteration   2: 536360.768 ops/s
# Warmup Iteration   3: 628050.486 ops/s
# Warmup Iteration   4: 539491.009 ops/s
# Warmup Iteration   5: 549733.016 ops/s
# Warmup Iteration   6: 625340.936 ops/s
# Warmup Iteration   7: 602824.708 ops/s
# Warmup Iteration   8: 625699.000 ops/s
# Warmup Iteration   9: 608542.567 ops/s
# Warmup Iteration  10: 623011.885 ops/s
# Warmup Iteration  11: 628293.295 ops/s
# Warmup Iteration  12: 590016.655 ops/s
# Warmup Iteration  13: 637056.462 ops/s
# Warmup Iteration  14: 586178.226 ops/s
# Warmup Iteration  15: 653719.395 ops/s
# Warmup Iteration  16: 607923.357 ops/s
# Warmup Iteration  17: 634174.218 ops/s
# Warmup Iteration  18: 640908.527 ops/s
# Warmup Iteration  19: 657069.495 ops/s
# Warmup Iteration  20: 632210.829 ops/s
# Warmup Iteration  21: 537853.177 ops/s
# Warmup Iteration  22: 630556.813 ops/s
# Warmup Iteration  23: 646880.440 ops/s
# Warmup Iteration  24: 620763.201 ops/s
# Warmup Iteration  25: 624928.755 ops/s
# Warmup Iteration  26: 677104.707 ops/s
# Warmup Iteration  27: 624962.937 ops/s
# Warmup Iteration  28: 663115.479 ops/s
# Warmup Iteration  29: 647741.422 ops/s
# Warmup Iteration  30: 628334.935 ops/s
Iteration   1: 658848.660 ops/s
Iteration   2: 634913.287 ops/s
Iteration   3: 634748.934 ops/s
Iteration   4: 653878.808 ops/s
Iteration   5: 627379.571 ops/s
Iteration   6: 657676.518 ops/s
Iteration   7: 640071.589 ops/s
Iteration   8: 644019.375 ops/s
Iteration   9: 639558.494 ops/s
Iteration  10: 642380.429 ops/s
Iteration  11: 657851.161 ops/s
Iteration  12: 637173.376 ops/s
Iteration  13: 633416.533 ops/s
Iteration  14: 648936.615 ops/s
Iteration  15: 635005.136 ops/s
Iteration  16: 648892.300 ops/s
Iteration  17: 645385.255 ops/s
Iteration  18: 634719.696 ops/s
Iteration  19: 657909.814 ops/s
Iteration  20: 617327.394 ops/s
Iteration  21: 638997.427 ops/s
Iteration  22: 622523.925 ops/s
Iteration  23: 649475.493 ops/s
Iteration  24: 621094.041 ops/s
Iteration  25: 622662.015 ops/s
Iteration  26: 634806.048 ops/s
Iteration  27: 646565.198 ops/s
Iteration  28: 656391.274 ops/s
Iteration  29: 642347.036 ops/s
Iteration  30: 632291.291 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onErrorNull":
  640574.890 ±(99.9%) 7835.482 ops/s [Average]
  (min, avg, max) = (617327.394, 640574.890, 658848.660), stdev = 11727.781
  CI (99.9%): [632739.408, 648410.371] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
MaybeCreateTest._Benchmark.benchmark_onErrorNull  thrpt   30  640574.890 ± 7835.482  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMapTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMapTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 115118.295 ops/s
# Warmup Iteration   2: 471497.109 ops/s
# Warmup Iteration   3: 501955.426 ops/s
# Warmup Iteration   4: 508603.631 ops/s
# Warmup Iteration   5: 526362.918 ops/s
# Warmup Iteration   6: 535139.228 ops/s
# Warmup Iteration   7: 527406.667 ops/s
# Warmup Iteration   8: 545229.866 ops/s
# Warmup Iteration   9: 517541.108 ops/s
# Warmup Iteration  10: 532612.107 ops/s
# Warmup Iteration  11: 521009.270 ops/s
# Warmup Iteration  12: 513668.414 ops/s
# Warmup Iteration  13: 545727.893 ops/s
# Warmup Iteration  14: 504091.300 ops/s
# Warmup Iteration  15: 539800.070 ops/s
# Warmup Iteration  16: 516385.310 ops/s
# Warmup Iteration  17: 546547.430 ops/s
# Warmup Iteration  18: 548253.331 ops/s
# Warmup Iteration  19: 525132.413 ops/s
# Warmup Iteration  20: 550626.327 ops/s
# Warmup Iteration  21: 544191.370 ops/s
# Warmup Iteration  22: 548041.723 ops/s
# Warmup Iteration  23: 571937.175 ops/s
# Warmup Iteration  24: 560986.373 ops/s
# Warmup Iteration  25: 525871.136 ops/s
# Warmup Iteration  26: 573200.536 ops/s
# Warmup Iteration  27: 548794.101 ops/s
# Warmup Iteration  28: 568761.819 ops/s
# Warmup Iteration  29: 539701.721 ops/s
# Warmup Iteration  30: 540222.998 ops/s
Iteration   1: 579435.854 ops/s
Iteration   2: 542567.363 ops/s
Iteration   3: 536713.722 ops/s
Iteration   4: 572317.150 ops/s
Iteration   5: 541821.906 ops/s
Iteration   6: 550499.349 ops/s
Iteration   7: 544602.758 ops/s
Iteration   8: 562325.111 ops/s
Iteration   9: 560060.568 ops/s
Iteration  10: 562825.820 ops/s
Iteration  11: 552118.515 ops/s
Iteration  12: 553525.278 ops/s
Iteration  13: 578203.475 ops/s
Iteration  14: 550211.838 ops/s
Iteration  15: 549236.316 ops/s
Iteration  16: 546220.844 ops/s
Iteration  17: 571879.352 ops/s
Iteration  18: 563660.294 ops/s
Iteration  19: 533915.579 ops/s
Iteration  20: 567969.453 ops/s
Iteration  21: 570825.448 ops/s
Iteration  22: 543295.214 ops/s
Iteration  23: 567434.191 ops/s
Iteration  24: 567239.889 ops/s
Iteration  25: 544688.038 ops/s
Iteration  26: 563025.725 ops/s
Iteration  27: 556209.879 ops/s
Iteration  28: 538871.237 ops/s
Iteration  29: 567478.345 ops/s
Iteration  30: 550974.524 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMapTest._Benchmark.benchmark_doubleOnSubscribe":
  556338.434 ±(99.9%) 8528.674 ops/s [Average]
  (min, avg, max) = (533915.579, 556338.434, 579435.854), stdev = 12765.319
  CI (99.9%): [547809.760, 564867.108] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MaybeMapTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  556338.434 ± 8528.674  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_mainSuccessAfterOtherSignal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_mainSuccessAfterOtherSignal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 136813.600 ops/s
# Warmup Iteration   2: 433381.813 ops/s
# Warmup Iteration   3: 518975.611 ops/s
# Warmup Iteration   4: 544560.096 ops/s
# Warmup Iteration   5: 558068.490 ops/s
# Warmup Iteration   6: 547390.349 ops/s
# Warmup Iteration   7: 548052.056 ops/s
# Warmup Iteration   8: 571432.781 ops/s
# Warmup Iteration   9: 538592.429 ops/s
# Warmup Iteration  10: 558152.618 ops/s
# Warmup Iteration  11: 533770.568 ops/s
# Warmup Iteration  12: 542616.548 ops/s
# Warmup Iteration  13: 558715.222 ops/s
# Warmup Iteration  14: 554902.367 ops/s
# Warmup Iteration  15: 531580.101 ops/s
# Warmup Iteration  16: 466974.148 ops/s
# Warmup Iteration  17: 572023.585 ops/s
# Warmup Iteration  18: 571381.457 ops/s
# Warmup Iteration  19: 579177.525 ops/s
# Warmup Iteration  20: 577538.588 ops/s
# Warmup Iteration  21: 587374.931 ops/s
# Warmup Iteration  22: 562358.376 ops/s
# Warmup Iteration  23: 578662.501 ops/s
# Warmup Iteration  24: 583721.047 ops/s
# Warmup Iteration  25: 570397.236 ops/s
# Warmup Iteration  26: 538611.226 ops/s
# Warmup Iteration  27: 593698.394 ops/s
# Warmup Iteration  28: 565624.538 ops/s
# Warmup Iteration  29: 569976.495 ops/s
# Warmup Iteration  30: 593105.617 ops/s
Iteration   1: 574891.885 ops/s
Iteration   2: 578314.854 ops/s
Iteration   3: 567227.160 ops/s
Iteration   4: 575712.552 ops/s
Iteration   5: 569665.749 ops/s
Iteration   6: 571564.755 ops/s
Iteration   7: 595218.551 ops/s
Iteration   8: 578463.020 ops/s
Iteration   9: 590074.963 ops/s
Iteration  10: 565471.840 ops/s
Iteration  11: 570523.315 ops/s
Iteration  12: 599137.468 ops/s
Iteration  13: 563953.634 ops/s
Iteration  14: 562442.012 ops/s
Iteration  15: 576429.032 ops/s
Iteration  16: 579039.907 ops/s
Iteration  17: 566420.390 ops/s
Iteration  18: 587764.617 ops/s
Iteration  19: 564691.410 ops/s
Iteration  20: 572702.259 ops/s
Iteration  21: 603914.963 ops/s
Iteration  22: 554284.075 ops/s
Iteration  23: 592980.278 ops/s
Iteration  24: 558911.194 ops/s
Iteration  25: 583553.705 ops/s
Iteration  26: 577375.656 ops/s
Iteration  27: 586805.760 ops/s
Iteration  28: 562624.076 ops/s
Iteration  29: 568270.845 ops/s
Iteration  30: 591092.381 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_mainSuccessAfterOtherSignal":
  576317.410 ±(99.9%) 8387.718 ops/s [Average]
  (min, avg, max) = (554284.075, 576317.410, 603914.963), stdev = 12554.342
  CI (99.9%): [567929.692, 584705.128] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MaybeTimeoutTest._Benchmark.benchmark_mainSuccessAfterOtherSignal  thrpt   30  576317.410 ± 8387.718  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEventTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEventTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 193296.856 ops/s
# Warmup Iteration   2: 477490.659 ops/s
# Warmup Iteration   3: 480486.794 ops/s
# Warmup Iteration   4: 468785.052 ops/s
# Warmup Iteration   5: 526558.402 ops/s
# Warmup Iteration   6: 538730.805 ops/s
# Warmup Iteration   7: 501750.737 ops/s
# Warmup Iteration   8: 535156.160 ops/s
# Warmup Iteration   9: 536144.779 ops/s
# Warmup Iteration  10: 517193.981 ops/s
# Warmup Iteration  11: 525353.525 ops/s
# Warmup Iteration  12: 515677.184 ops/s
# Warmup Iteration  13: 513062.830 ops/s
# Warmup Iteration  14: 532545.025 ops/s
# Warmup Iteration  15: 516417.209 ops/s
# Warmup Iteration  16: 537494.968 ops/s
# Warmup Iteration  17: 522540.774 ops/s
# Warmup Iteration  18: 560641.567 ops/s
# Warmup Iteration  19: 531539.950 ops/s
# Warmup Iteration  20: 556342.646 ops/s
# Warmup Iteration  21: 527607.721 ops/s
# Warmup Iteration  22: 532452.998 ops/s
# Warmup Iteration  23: 558703.610 ops/s
# Warmup Iteration  24: 539507.334 ops/s
# Warmup Iteration  25: 550622.096 ops/s
# Warmup Iteration  26: 529178.534 ops/s
# Warmup Iteration  27: 549975.404 ops/s
# Warmup Iteration  28: 552947.852 ops/s
# Warmup Iteration  29: 533604.200 ops/s
# Warmup Iteration  30: 559911.318 ops/s
Iteration   1: 538343.631 ops/s
Iteration   2: 558759.660 ops/s
Iteration   3: 543247.415 ops/s
Iteration   4: 532567.870 ops/s
Iteration   5: 567381.829 ops/s
Iteration   6: 528283.622 ops/s
Iteration   7: 561672.067 ops/s
Iteration   8: 525634.303 ops/s
Iteration   9: 545247.296 ops/s
Iteration  10: 536208.730 ops/s
Iteration  11: 545000.167 ops/s
Iteration  12: 547567.309 ops/s
Iteration  13: 536141.686 ops/s
Iteration  14: 528453.533 ops/s
Iteration  15: 556864.847 ops/s
Iteration  16: 531556.940 ops/s
Iteration  17: 567081.563 ops/s
Iteration  18: 531534.041 ops/s
Iteration  19: 539336.067 ops/s
Iteration  20: 561196.556 ops/s
Iteration  21: 522748.966 ops/s
Iteration  22: 568923.972 ops/s
Iteration  23: 522211.063 ops/s
Iteration  24: 566305.445 ops/s
Iteration  25: 530657.041 ops/s
Iteration  26: 556326.470 ops/s
Iteration  27: 559576.774 ops/s
Iteration  28: 531971.868 ops/s
Iteration  29: 553300.634 ops/s
Iteration  30: 521152.863 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEventTest._Benchmark.benchmark_doubleOnSubscribe":
  543841.808 ±(99.9%) 10305.611 ops/s [Average]
  (min, avg, max) = (521152.863, 543841.808, 568923.972), stdev = 15424.955
  CI (99.9%): [533536.196, 554147.419] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
MaybeDoOnEventTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  543841.808 ± 10305.611  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 208009.873 ops/s
# Warmup Iteration   2: 474624.864 ops/s
# Warmup Iteration   3: 526687.828 ops/s
# Warmup Iteration   4: 513196.855 ops/s
# Warmup Iteration   5: 537022.575 ops/s
# Warmup Iteration   6: 521830.021 ops/s
# Warmup Iteration   7: 506371.816 ops/s
# Warmup Iteration   8: 540380.495 ops/s
# Warmup Iteration   9: 494707.901 ops/s
# Warmup Iteration  10: 445792.671 ops/s
# Warmup Iteration  11: 526447.539 ops/s
# Warmup Iteration  12: 513607.742 ops/s
# Warmup Iteration  13: 524416.972 ops/s
# Warmup Iteration  14: 527967.260 ops/s
# Warmup Iteration  15: 528425.997 ops/s
# Warmup Iteration  16: 507845.808 ops/s
# Warmup Iteration  17: 539582.800 ops/s
# Warmup Iteration  18: 539109.984 ops/s
# Warmup Iteration  19: 539275.100 ops/s
# Warmup Iteration  20: 560838.309 ops/s
# Warmup Iteration  21: 551481.744 ops/s
# Warmup Iteration  22: 545118.575 ops/s
# Warmup Iteration  23: 560960.602 ops/s
# Warmup Iteration  24: 552104.400 ops/s
# Warmup Iteration  25: 541740.391 ops/s
# Warmup Iteration  26: 554329.372 ops/s
# Warmup Iteration  27: 518845.460 ops/s
# Warmup Iteration  28: 555025.409 ops/s
# Warmup Iteration  29: 569973.584 ops/s
# Warmup Iteration  30: 538353.148 ops/s
Iteration   1: 544932.168 ops/s
Iteration   2: 557722.881 ops/s
Iteration   3: 533937.409 ops/s
Iteration   4: 564529.214 ops/s
Iteration   5: 568291.380 ops/s
Iteration   6: 544836.434 ops/s
Iteration   7: 537932.510 ops/s
Iteration   8: 554678.103 ops/s
Iteration   9: 559298.504 ops/s
Iteration  10: 547228.607 ops/s
Iteration  11: 547687.763 ops/s
Iteration  12: 559294.368 ops/s
Iteration  13: 577648.385 ops/s
Iteration  14: 544920.154 ops/s
Iteration  15: 528174.123 ops/s
Iteration  16: 560128.715 ops/s
Iteration  17: 552507.323 ops/s
Iteration  18: 558056.562 ops/s
Iteration  19: 551930.002 ops/s
Iteration  20: 570224.385 ops/s
Iteration  21: 529552.140 ops/s
Iteration  22: 563536.216 ops/s
Iteration  23: 566914.841 ops/s
Iteration  24: 546135.141 ops/s
Iteration  25: 570072.174 ops/s
Iteration  26: 536671.051 ops/s
Iteration  27: 541777.370 ops/s
Iteration  28: 562679.216 ops/s
Iteration  29: 536697.802 ops/s
Iteration  30: 579625.285 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_doubleOnSubscribe":
  553254.008 ±(99.9%) 9259.692 ops/s [Average]
  (min, avg, max) = (528174.123, 553254.008, 579625.285), stdev = 13859.472
  CI (99.9%): [543994.316, 562513.699] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
MaybeHideTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  553254.008 ± 9259.692  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_sourceIgnoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_sourceIgnoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 89513.121 ops/s
# Warmup Iteration   2: 212309.749 ops/s
# Warmup Iteration   3: 218156.491 ops/s
# Warmup Iteration   4: 211757.147 ops/s
# Warmup Iteration   5: 262692.952 ops/s
# Warmup Iteration   6: 241140.296 ops/s
# Warmup Iteration   7: 260565.090 ops/s
# Warmup Iteration   8: 236292.460 ops/s
# Warmup Iteration   9: 258655.362 ops/s
# Warmup Iteration  10: 256731.221 ops/s
# Warmup Iteration  11: 239180.115 ops/s
# Warmup Iteration  12: 247165.287 ops/s
# Warmup Iteration  13: 257356.645 ops/s
# Warmup Iteration  14: 237745.485 ops/s
# Warmup Iteration  15: 258746.410 ops/s
# Warmup Iteration  16: 245702.689 ops/s
# Warmup Iteration  17: 258381.507 ops/s
# Warmup Iteration  18: 249967.535 ops/s
# Warmup Iteration  19: 255958.890 ops/s
# Warmup Iteration  20: 270101.565 ops/s
# Warmup Iteration  21: 254845.593 ops/s
# Warmup Iteration  22: 254901.045 ops/s
# Warmup Iteration  23: 253633.606 ops/s
# Warmup Iteration  24: 268455.055 ops/s
# Warmup Iteration  25: 259581.690 ops/s
# Warmup Iteration  26: 249969.181 ops/s
# Warmup Iteration  27: 269531.737 ops/s
# Warmup Iteration  28: 267891.136 ops/s
# Warmup Iteration  29: 254783.794 ops/s
# Warmup Iteration  30: 261825.027 ops/s
Iteration   1: 251826.539 ops/s
Iteration   2: 269837.728 ops/s
Iteration   3: 254253.737 ops/s
Iteration   4: 256313.959 ops/s
Iteration   5: 256277.113 ops/s
Iteration   6: 267230.811 ops/s
Iteration   7: 252246.279 ops/s
Iteration   8: 253091.037 ops/s
Iteration   9: 263934.804 ops/s
Iteration  10: 247821.086 ops/s
Iteration  11: 258211.294 ops/s
Iteration  12: 267167.619 ops/s
Iteration  13: 254712.488 ops/s
Iteration  14: 263019.548 ops/s
Iteration  15: 254217.790 ops/s
Iteration  16: 268211.137 ops/s
Iteration  17: 260867.805 ops/s
Iteration  18: 250933.088 ops/s
Iteration  19: 268730.112 ops/s
Iteration  20: 247002.666 ops/s
Iteration  21: 261354.579 ops/s
Iteration  22: 252378.801 ops/s
Iteration  23: 261301.434 ops/s
Iteration  24: 256785.824 ops/s
Iteration  25: 258183.610 ops/s
Iteration  26: 250249.641 ops/s
Iteration  27: 259143.493 ops/s
Iteration  28: 268441.492 ops/s
Iteration  29: 255978.360 ops/s
Iteration  30: 264557.117 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeToCompletionStageTest._Benchmark.benchmark_sourceIgnoresCancel":
  258476.033 ±(99.9%) 4435.550 ops/s [Average]
  (min, avg, max) = (247002.666, 258476.033, 269837.728), stdev = 6638.923
  CI (99.9%): [254040.483, 262911.583] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
MaybeToCompletionStageTest._Benchmark.benchmark_sourceIgnoresCancel  thrpt   30  258476.033 ± 4435.550  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 127943.290 ops/s
# Warmup Iteration   2: 446562.145 ops/s
# Warmup Iteration   3: 501235.617 ops/s
# Warmup Iteration   4: 463227.367 ops/s
# Warmup Iteration   5: 431046.183 ops/s
# Warmup Iteration   6: 466737.639 ops/s
# Warmup Iteration   7: 523460.943 ops/s
# Warmup Iteration   8: 523023.576 ops/s
# Warmup Iteration   9: 459659.076 ops/s
# Warmup Iteration  10: 540983.295 ops/s
# Warmup Iteration  11: 515473.585 ops/s
# Warmup Iteration  12: 535979.179 ops/s
# Warmup Iteration  13: 533571.793 ops/s
# Warmup Iteration  14: 514426.215 ops/s
# Warmup Iteration  15: 556930.042 ops/s
# Warmup Iteration  16: 514626.477 ops/s
# Warmup Iteration  17: 562162.949 ops/s
# Warmup Iteration  18: 530992.738 ops/s
# Warmup Iteration  19: 558681.284 ops/s
# Warmup Iteration  20: 548436.239 ops/s
# Warmup Iteration  21: 574691.877 ops/s
# Warmup Iteration  22: 561863.518 ops/s
# Warmup Iteration  23: 561351.677 ops/s
# Warmup Iteration  24: 517956.538 ops/s
# Warmup Iteration  25: 567959.275 ops/s
# Warmup Iteration  26: 542822.014 ops/s
# Warmup Iteration  27: 569874.431 ops/s
# Warmup Iteration  28: 563498.699 ops/s
# Warmup Iteration  29: 546686.374 ops/s
# Warmup Iteration  30: 562273.829 ops/s
Iteration   1: 551819.502 ops/s
Iteration   2: 555349.235 ops/s
Iteration   3: 537901.765 ops/s
Iteration   4: 550264.690 ops/s
Iteration   5: 546833.197 ops/s
Iteration   6: 563717.017 ops/s
Iteration   7: 541367.668 ops/s
Iteration   8: 538188.274 ops/s
Iteration   9: 572927.418 ops/s
Iteration  10: 535989.873 ops/s
Iteration  11: 553338.426 ops/s
Iteration  12: 534915.274 ops/s
Iteration  13: 560415.574 ops/s
Iteration  14: 557419.249 ops/s
Iteration  15: 544161.711 ops/s
Iteration  16: 550138.076 ops/s
Iteration  17: 564777.480 ops/s
Iteration  18: 537827.067 ops/s
Iteration  19: 568658.964 ops/s
Iteration  20: 540366.180 ops/s
Iteration  21: 551256.536 ops/s
Iteration  22: 544833.941 ops/s
Iteration  23: 543633.987 ops/s
Iteration  24: 574643.374 ops/s
Iteration  25: 539534.813 ops/s
Iteration  26: 556201.715 ops/s
Iteration  27: 544112.931 ops/s
Iteration  28: 547306.619 ops/s
Iteration  29: 541449.902 ops/s
Iteration  30: 558271.859 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe":
  550254.077 ±(99.9%) 7404.489 ops/s [Average]
  (min, avg, max) = (534915.274, 550254.077, 574643.374), stdev = 11082.691
  CI (99.9%): [542849.589, 557658.566] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MaybeDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  550254.077 ± 7404.489  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 79393.379 ops/s
# Warmup Iteration   2: 428519.312 ops/s
# Warmup Iteration   3: 504647.988 ops/s
# Warmup Iteration   4: 514496.617 ops/s
# Warmup Iteration   5: 530741.506 ops/s
# Warmup Iteration   6: 478198.628 ops/s
# Warmup Iteration   7: 512880.262 ops/s
# Warmup Iteration   8: 476870.121 ops/s
# Warmup Iteration   9: 508726.298 ops/s
# Warmup Iteration  10: 505167.492 ops/s
# Warmup Iteration  11: 501033.562 ops/s
# Warmup Iteration  12: 516633.544 ops/s
# Warmup Iteration  13: 508275.111 ops/s
# Warmup Iteration  14: 511169.336 ops/s
# Warmup Iteration  15: 498132.574 ops/s
# Warmup Iteration  16: 521593.556 ops/s
# Warmup Iteration  17: 508579.178 ops/s
# Warmup Iteration  18: 540810.579 ops/s
# Warmup Iteration  19: 523261.431 ops/s
# Warmup Iteration  20: 530143.889 ops/s
# Warmup Iteration  21: 560808.595 ops/s
# Warmup Iteration  22: 523255.381 ops/s
# Warmup Iteration  23: 540458.903 ops/s
# Warmup Iteration  24: 545944.302 ops/s
# Warmup Iteration  25: 558235.448 ops/s
# Warmup Iteration  26: 529413.160 ops/s
# Warmup Iteration  27: 553991.420 ops/s
# Warmup Iteration  28: 533094.438 ops/s
# Warmup Iteration  29: 540386.106 ops/s
# Warmup Iteration  30: 546236.021 ops/s
Iteration   1: 518574.787 ops/s
Iteration   2: 535454.131 ops/s
Iteration   3: 525937.784 ops/s
Iteration   4: 529542.232 ops/s
Iteration   5: 531084.432 ops/s
Iteration   6: 548329.972 ops/s
Iteration   7: 545447.318 ops/s
Iteration   8: 531735.940 ops/s
Iteration   9: 539659.865 ops/s
Iteration  10: 547358.005 ops/s
Iteration  11: 550843.879 ops/s
Iteration  12: 542035.020 ops/s
Iteration  13: 540370.043 ops/s
Iteration  14: 538542.762 ops/s
Iteration  15: 528619.254 ops/s
Iteration  16: 542203.737 ops/s
Iteration  17: 543256.228 ops/s
Iteration  18: 552412.797 ops/s
Iteration  19: 550466.606 ops/s
Iteration  20: 534110.524 ops/s
Iteration  21: 555246.765 ops/s
Iteration  22: 534389.646 ops/s
Iteration  23: 557508.289 ops/s
Iteration  24: 555705.204 ops/s
Iteration  25: 526489.604 ops/s
Iteration  26: 559006.328 ops/s
Iteration  27: 526985.763 ops/s
Iteration  28: 560757.536 ops/s
Iteration  29: 521652.485 ops/s
Iteration  30: 558781.513 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_doubleOnSubscribe":
  541083.615 ±(99.9%) 8107.562 ops/s [Average]
  (min, avg, max) = (518574.787, 541083.615, 560757.536), stdev = 12135.018
  CI (99.9%): [532976.053, 549191.177] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
MaybePeekTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  541083.615 ± 8107.562  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83795.873 ops/s
# Warmup Iteration   2: 468596.466 ops/s
# Warmup Iteration   3: 500414.680 ops/s
# Warmup Iteration   4: 511139.666 ops/s
# Warmup Iteration   5: 541496.174 ops/s
# Warmup Iteration   6: 518308.376 ops/s
# Warmup Iteration   7: 534084.510 ops/s
# Warmup Iteration   8: 537314.726 ops/s
# Warmup Iteration   9: 526338.393 ops/s
# Warmup Iteration  10: 518682.725 ops/s
# Warmup Iteration  11: 540230.532 ops/s
# Warmup Iteration  12: 507010.377 ops/s
# Warmup Iteration  13: 530221.525 ops/s
# Warmup Iteration  14: 536208.634 ops/s
# Warmup Iteration  15: 518681.519 ops/s
# Warmup Iteration  16: 553190.830 ops/s
# Warmup Iteration  17: 554169.556 ops/s
# Warmup Iteration  18: 541324.164 ops/s
# Warmup Iteration  19: 563731.403 ops/s
# Warmup Iteration  20: 537852.403 ops/s
# Warmup Iteration  21: 570610.280 ops/s
# Warmup Iteration  22: 531979.000 ops/s
# Warmup Iteration  23: 539600.590 ops/s
# Warmup Iteration  24: 563602.082 ops/s
# Warmup Iteration  25: 549552.914 ops/s
# Warmup Iteration  26: 579556.758 ops/s
# Warmup Iteration  27: 535683.563 ops/s
# Warmup Iteration  28: 560583.336 ops/s
# Warmup Iteration  29: 551971.698 ops/s
# Warmup Iteration  30: 553432.344 ops/s
Iteration   1: 577238.949 ops/s
Iteration   2: 534983.911 ops/s
Iteration   3: 569427.600 ops/s
Iteration   4: 547805.759 ops/s
Iteration   5: 542011.586 ops/s
Iteration   6: 555169.342 ops/s
Iteration   7: 556847.081 ops/s
Iteration   8: 557829.856 ops/s
Iteration   9: 547229.827 ops/s
Iteration  10: 554234.270 ops/s
Iteration  11: 576110.161 ops/s
Iteration  12: 534444.529 ops/s
Iteration  13: 557644.700 ops/s
Iteration  14: 566942.210 ops/s
Iteration  15: 551369.081 ops/s
Iteration  16: 553439.793 ops/s
Iteration  17: 567635.530 ops/s
Iteration  18: 554875.906 ops/s
Iteration  19: 565102.159 ops/s
Iteration  20: 554190.000 ops/s
Iteration  21: 554183.608 ops/s
Iteration  22: 547102.688 ops/s
Iteration  23: 576952.759 ops/s
Iteration  24: 566764.045 ops/s
Iteration  25: 537137.927 ops/s
Iteration  26: 574109.894 ops/s
Iteration  27: 565487.889 ops/s
Iteration  28: 541146.640 ops/s
Iteration  29: 577904.073 ops/s
Iteration  30: 548352.778 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteDoubleOnSubscribe":
  557122.485 ±(99.9%) 8591.164 ops/s [Average]
  (min, avg, max) = (534444.529, 557122.485, 577904.073), stdev = 12858.850
  CI (99.9%): [548531.321, 565713.649] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteDoubleOnSubscribe  thrpt   30  557122.485 ± 8591.164  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 102196.909 ops/s
# Warmup Iteration   2: 290622.852 ops/s
# Warmup Iteration   3: 456916.898 ops/s
# Warmup Iteration   4: 508940.656 ops/s
# Warmup Iteration   5: 482886.289 ops/s
# Warmup Iteration   6: 527598.918 ops/s
# Warmup Iteration   7: 423986.591 ops/s
# Warmup Iteration   8: 549437.570 ops/s
# Warmup Iteration   9: 503153.094 ops/s
# Warmup Iteration  10: 531104.319 ops/s
# Warmup Iteration  11: 510896.343 ops/s
# Warmup Iteration  12: 535162.193 ops/s
# Warmup Iteration  13: 520047.866 ops/s
# Warmup Iteration  14: 520129.831 ops/s
# Warmup Iteration  15: 544565.250 ops/s
# Warmup Iteration  16: 504535.073 ops/s
# Warmup Iteration  17: 559619.882 ops/s
# Warmup Iteration  18: 542166.375 ops/s
# Warmup Iteration  19: 549540.540 ops/s
# Warmup Iteration  20: 559430.529 ops/s
# Warmup Iteration  21: 540633.299 ops/s
# Warmup Iteration  22: 557493.211 ops/s
# Warmup Iteration  23: 541945.760 ops/s
# Warmup Iteration  24: 533136.946 ops/s
# Warmup Iteration  25: 561322.422 ops/s
# Warmup Iteration  26: 541179.186 ops/s
# Warmup Iteration  27: 548622.544 ops/s
# Warmup Iteration  28: 543980.765 ops/s
# Warmup Iteration  29: 549030.413 ops/s
# Warmup Iteration  30: 556355.739 ops/s
Iteration   1: 539950.653 ops/s
Iteration   2: 553526.836 ops/s
Iteration   3: 533924.753 ops/s
Iteration   4: 552852.058 ops/s
Iteration   5: 532783.418 ops/s
Iteration   6: 544611.180 ops/s
Iteration   7: 561666.104 ops/s
Iteration   8: 527430.716 ops/s
Iteration   9: 573682.155 ops/s
Iteration  10: 529064.898 ops/s
Iteration  11: 550045.399 ops/s
Iteration  12: 529547.938 ops/s
Iteration  13: 539299.361 ops/s
Iteration  14: 551294.285 ops/s
Iteration  15: 541749.583 ops/s
Iteration  16: 538878.384 ops/s
Iteration  17: 563529.121 ops/s
Iteration  18: 528040.555 ops/s
Iteration  19: 555138.824 ops/s
Iteration  20: 544088.924 ops/s
Iteration  21: 551058.440 ops/s
Iteration  22: 545571.010 ops/s
Iteration  23: 556595.801 ops/s
Iteration  24: 542364.472 ops/s
Iteration  25: 547882.888 ops/s
Iteration  26: 566015.280 ops/s
Iteration  27: 436751.104 ops/s
Iteration  28: 551874.515 ops/s
Iteration  29: 565881.975 ops/s
Iteration  30: 518345.911 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_doubleOnSubscribe":
  542448.218 ±(99.9%) 15964.734 ops/s [Average]
  (min, avg, max) = (436751.104, 542448.218, 573682.155), stdev = 23895.264
  CI (99.9%): [526483.484, 558412.952] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  542448.218 ± 15964.734  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78808.627 ops/s
# Warmup Iteration   2: 370497.832 ops/s
# Warmup Iteration   3: 451810.916 ops/s
# Warmup Iteration   4: 451164.535 ops/s
# Warmup Iteration   5: 513931.268 ops/s
# Warmup Iteration   6: 394032.129 ops/s
# Warmup Iteration   7: 505962.848 ops/s
# Warmup Iteration   8: 485296.742 ops/s
# Warmup Iteration   9: 498223.617 ops/s
# Warmup Iteration  10: 489774.737 ops/s
# Warmup Iteration  11: 502156.958 ops/s
# Warmup Iteration  12: 507434.060 ops/s
# Warmup Iteration  13: 485466.405 ops/s
# Warmup Iteration  14: 505810.795 ops/s
# Warmup Iteration  15: 516533.077 ops/s
# Warmup Iteration  16: 493525.998 ops/s
# Warmup Iteration  17: 512391.896 ops/s
# Warmup Iteration  18: 534029.839 ops/s
# Warmup Iteration  19: 518497.837 ops/s
# Warmup Iteration  20: 527010.092 ops/s
# Warmup Iteration  21: 506633.265 ops/s
# Warmup Iteration  22: 527719.050 ops/s
# Warmup Iteration  23: 515871.974 ops/s
# Warmup Iteration  24: 517571.893 ops/s
# Warmup Iteration  25: 520684.186 ops/s
# Warmup Iteration  26: 511613.914 ops/s
# Warmup Iteration  27: 518306.523 ops/s
# Warmup Iteration  28: 530165.914 ops/s
# Warmup Iteration  29: 519177.759 ops/s
# Warmup Iteration  30: 518512.823 ops/s
Iteration   1: 521056.728 ops/s
Iteration   2: 532954.635 ops/s
Iteration   3: 530736.380 ops/s
Iteration   4: 521985.443 ops/s
Iteration   5: 521613.538 ops/s
Iteration   6: 512182.880 ops/s
Iteration   7: 518144.896 ops/s
Iteration   8: 528919.077 ops/s
Iteration   9: 510096.614 ops/s
Iteration  10: 532510.180 ops/s
Iteration  11: 504789.367 ops/s
Iteration  12: 512473.644 ops/s
Iteration  13: 517309.467 ops/s
Iteration  14: 537940.582 ops/s
Iteration  15: 523978.947 ops/s
Iteration  16: 533698.586 ops/s
Iteration  17: 505971.218 ops/s
Iteration  18: 535862.244 ops/s
Iteration  19: 499896.114 ops/s
Iteration  20: 521781.722 ops/s
Iteration  21: 529340.521 ops/s
Iteration  22: 520636.462 ops/s
Iteration  23: 546025.207 ops/s
Iteration  24: 501871.042 ops/s
Iteration  25: 517677.581 ops/s
Iteration  26: 532857.684 ops/s
Iteration  27: 521063.031 ops/s
Iteration  28: 513230.750 ops/s
Iteration  29: 527708.420 ops/s
Iteration  30: 510826.418 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_doubleOnSubscribe":
  521504.646 ±(99.9%) 7600.193 ops/s [Average]
  (min, avg, max) = (499896.114, 521504.646, 546025.207), stdev = 11375.613
  CI (99.9%): [513904.453, 529104.839] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
MaybeUsingTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  521504.646 ± 7600.193  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_crashDropsOnNextsConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_crashDropsOnNextsConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 178212.172 ops/s
# Warmup Iteration   2: 474337.761 ops/s
# Warmup Iteration   3: 541054.600 ops/s
# Warmup Iteration   4: 498079.037 ops/s
# Warmup Iteration   5: 573494.930 ops/s
# Warmup Iteration   6: 535309.228 ops/s
# Warmup Iteration   7: 555076.432 ops/s
# Warmup Iteration   8: 565371.795 ops/s
# Warmup Iteration   9: 556156.672 ops/s
# Warmup Iteration  10: 557654.780 ops/s
# Warmup Iteration  11: 530311.711 ops/s
# Warmup Iteration  12: 571266.247 ops/s
# Warmup Iteration  13: 548010.208 ops/s
# Warmup Iteration  14: 550456.136 ops/s
# Warmup Iteration  15: 549873.431 ops/s
# Warmup Iteration  16: 571607.986 ops/s
# Warmup Iteration  17: 572101.841 ops/s
# Warmup Iteration  18: 578165.821 ops/s
# Warmup Iteration  19: 583407.890 ops/s
# Warmup Iteration  20: 533080.996 ops/s
# Warmup Iteration  21: 581750.819 ops/s
# Warmup Iteration  22: 559297.081 ops/s
# Warmup Iteration  23: 596104.634 ops/s
# Warmup Iteration  24: 591708.456 ops/s
# Warmup Iteration  25: 566910.063 ops/s
# Warmup Iteration  26: 595655.708 ops/s
# Warmup Iteration  27: 575281.926 ops/s
# Warmup Iteration  28: 577058.580 ops/s
# Warmup Iteration  29: 572114.713 ops/s
# Warmup Iteration  30: 577080.777 ops/s
Iteration   1: 599556.381 ops/s
Iteration   2: 563347.695 ops/s
Iteration   3: 579836.884 ops/s
Iteration   4: 599524.460 ops/s
Iteration   5: 571313.462 ops/s
Iteration   6: 585510.479 ops/s
Iteration   7: 594313.299 ops/s
Iteration   8: 577969.908 ops/s
Iteration   9: 598009.190 ops/s
Iteration  10: 556970.135 ops/s
Iteration  11: 611160.383 ops/s
Iteration  12: 572462.820 ops/s
Iteration  13: 588970.032 ops/s
Iteration  14: 567017.758 ops/s
Iteration  15: 576664.658 ops/s
Iteration  16: 589198.861 ops/s
Iteration  17: 566610.228 ops/s
Iteration  18: 583255.315 ops/s
Iteration  19: 605179.568 ops/s
Iteration  20: 573508.658 ops/s
Iteration  21: 587881.354 ops/s
Iteration  22: 427527.885 ops/s
Iteration  23: 585969.814 ops/s
Iteration  24: 586698.186 ops/s
Iteration  25: 591509.422 ops/s
Iteration  26: 573772.884 ops/s
Iteration  27: 586218.010 ops/s
Iteration  28: 602938.547 ops/s
Iteration  29: 581385.677 ops/s
Iteration  30: 573501.238 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_crashDropsOnNextsConditional":
  578592.773 ±(99.9%) 20966.786 ops/s [Average]
  (min, avg, max) = (427527.885, 578592.773, 611160.383), stdev = 31382.100
  CI (99.9%): [557625.987, 599559.559] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_crashDropsOnNextsConditional  thrpt   30  578592.773 ± 20966.786  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_validateDisposable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_validateDisposable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1296480.360 ops/s
# Warmup Iteration   2: 2216334.010 ops/s
# Warmup Iteration   3: 2282974.232 ops/s
# Warmup Iteration   4: 2549330.314 ops/s
# Warmup Iteration   5: 2662200.707 ops/s
# Warmup Iteration   6: 2525846.396 ops/s
# Warmup Iteration   7: 2605559.253 ops/s
# Warmup Iteration   8: 2586116.163 ops/s
# Warmup Iteration   9: 2540827.278 ops/s
# Warmup Iteration  10: 2708958.184 ops/s
# Warmup Iteration  11: 2568799.618 ops/s
# Warmup Iteration  12: 2590825.898 ops/s
# Warmup Iteration  13: 2557282.460 ops/s
# Warmup Iteration  14: 2680269.557 ops/s
# Warmup Iteration  15: 2591122.659 ops/s
# Warmup Iteration  16: 2717474.230 ops/s
# Warmup Iteration  17: 2784317.682 ops/s
# Warmup Iteration  18: 2752583.224 ops/s
# Warmup Iteration  19: 2779085.210 ops/s
# Warmup Iteration  20: 2707113.343 ops/s
# Warmup Iteration  21: 2863839.966 ops/s
# Warmup Iteration  22: 2842181.617 ops/s
# Warmup Iteration  23: 2732598.357 ops/s
# Warmup Iteration  24: 2695660.914 ops/s
# Warmup Iteration  25: 2729946.078 ops/s
# Warmup Iteration  26: 2753133.000 ops/s
# Warmup Iteration  27: 2715408.318 ops/s
# Warmup Iteration  28: 2743115.870 ops/s
# Warmup Iteration  29: 2706546.049 ops/s
# Warmup Iteration  30: 2767767.131 ops/s
Iteration   1: 2699993.902 ops/s
Iteration   2: 2827604.908 ops/s
Iteration   3: 2752950.614 ops/s
Iteration   4: 2736654.928 ops/s
Iteration   5: 2771112.771 ops/s
Iteration   6: 2805223.426 ops/s
Iteration   7: 2780536.199 ops/s
Iteration   8: 2720724.994 ops/s
Iteration   9: 2761525.902 ops/s
Iteration  10: 2833738.512 ops/s
Iteration  11: 2721457.183 ops/s
Iteration  12: 2679878.633 ops/s
Iteration  13: 2966409.137 ops/s
Iteration  14: 2717031.833 ops/s
Iteration  15: 2734354.253 ops/s
Iteration  16: 2749448.786 ops/s
Iteration  17: 2740018.584 ops/s
Iteration  18: 2880121.614 ops/s
Iteration  19: 2685553.807 ops/s
Iteration  20: 2803204.603 ops/s
Iteration  21: 2721059.150 ops/s
Iteration  22: 2789237.598 ops/s
Iteration  23: 2712654.700 ops/s
Iteration  24: 2735003.538 ops/s
Iteration  25: 2849264.063 ops/s
Iteration  26: 2775462.331 ops/s
Iteration  27: 2716725.435 ops/s
Iteration  28: 2879598.369 ops/s
Iteration  29: 2716108.672 ops/s
Iteration  30: 2787260.872 ops/s


Result "io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_validateDisposable":
  2768330.644 ±(99.9%) 43672.034 ops/s [Average]
  (min, avg, max) = (2679878.633, 2768330.644, 2966409.137), stdev = 65366.250
  CI (99.9%): [2724658.610, 2812002.678] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
EndConsumerHelperTest._Benchmark.benchmark_validateDisposable  thrpt   30  2768330.644 ± 43672.034  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.DisposableTest._Benchmark.benchmark_setOnceTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.DisposableTest._Benchmark.benchmark_setOnceTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 331800.240 ops/s
# Warmup Iteration   2: 506504.049 ops/s
# Warmup Iteration   3: 518865.920 ops/s
# Warmup Iteration   4: 588610.247 ops/s
# Warmup Iteration   5: 560477.258 ops/s
# Warmup Iteration   6: 573621.799 ops/s
# Warmup Iteration   7: 580982.093 ops/s
# Warmup Iteration   8: 556751.697 ops/s
# Warmup Iteration   9: 567026.646 ops/s
# Warmup Iteration  10: 586122.769 ops/s
# Warmup Iteration  11: 588636.557 ops/s
# Warmup Iteration  12: 576822.192 ops/s
# Warmup Iteration  13: 586591.845 ops/s
# Warmup Iteration  14: 555664.970 ops/s
# Warmup Iteration  15: 579362.243 ops/s
# Warmup Iteration  16: 564408.422 ops/s
# Warmup Iteration  17: 614111.156 ops/s
# Warmup Iteration  18: 583546.456 ops/s
# Warmup Iteration  19: 600065.584 ops/s
# Warmup Iteration  20: 620747.800 ops/s
# Warmup Iteration  21: 576553.267 ops/s
# Warmup Iteration  22: 577831.751 ops/s
# Warmup Iteration  23: 628313.574 ops/s
# Warmup Iteration  24: 584723.209 ops/s
# Warmup Iteration  25: 595232.846 ops/s
# Warmup Iteration  26: 625610.873 ops/s
# Warmup Iteration  27: 614527.597 ops/s
# Warmup Iteration  28: 613765.209 ops/s
# Warmup Iteration  29: 601170.174 ops/s
# Warmup Iteration  30: 615716.360 ops/s
Iteration   1: 642614.835 ops/s
Iteration   2: 589985.400 ops/s
Iteration   3: 616143.223 ops/s
Iteration   4: 633711.323 ops/s
Iteration   5: 581300.443 ops/s
Iteration   6: 630251.883 ops/s
Iteration   7: 591077.198 ops/s
Iteration   8: 609164.794 ops/s
Iteration   9: 614785.963 ops/s
Iteration  10: 627483.342 ops/s
Iteration  11: 611173.778 ops/s
Iteration  12: 593517.080 ops/s
Iteration  13: 618084.227 ops/s
Iteration  14: 606957.818 ops/s
Iteration  15: 608663.211 ops/s
Iteration  16: 475807.943 ops/s
Iteration  17: 606045.963 ops/s
Iteration  18: 631934.101 ops/s
Iteration  19: 595883.550 ops/s
Iteration  20: 620242.762 ops/s
Iteration  21: 618791.180 ops/s
Iteration  22: 599260.603 ops/s
Iteration  23: 626503.216 ops/s
Iteration  24: 613034.207 ops/s
Iteration  25: 612368.496 ops/s
Iteration  26: 605642.181 ops/s
Iteration  27: 616557.097 ops/s
Iteration  28: 605854.279 ops/s
Iteration  29: 617647.392 ops/s
Iteration  30: 601572.600 ops/s


Result "io.reactivex.rxjava3.disposables.DisposableTest._Benchmark.benchmark_setOnceTwice":
  607402.003 ±(99.9%) 19071.124 ops/s [Average]
  (min, avg, max) = (475807.943, 607402.003, 642614.835), stdev = 28544.763
  CI (99.9%): [588330.879, 626473.127] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
DisposableTest._Benchmark.benchmark_setOnceTwice  thrpt   30  607402.003 ± 19071.124  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_onErrorCrashes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_onErrorCrashes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54055.183 ops/s
# Warmup Iteration   2: 189407.811 ops/s
# Warmup Iteration   3: 195222.898 ops/s
# Warmup Iteration   4: 196504.286 ops/s
# Warmup Iteration   5: 195594.585 ops/s
# Warmup Iteration   6: 205569.982 ops/s
# Warmup Iteration   7: 213603.877 ops/s
# Warmup Iteration   8: 201853.798 ops/s
# Warmup Iteration   9: 214969.434 ops/s
# Warmup Iteration  10: 205083.879 ops/s
# Warmup Iteration  11: 206822.360 ops/s
# Warmup Iteration  12: 216173.243 ops/s
# Warmup Iteration  13: 206506.240 ops/s
# Warmup Iteration  14: 209513.360 ops/s
# Warmup Iteration  15: 210112.313 ops/s
# Warmup Iteration  16: 210524.800 ops/s
# Warmup Iteration  17: 221277.188 ops/s
# Warmup Iteration  18: 220565.431 ops/s
# Warmup Iteration  19: 222904.135 ops/s
# Warmup Iteration  20: 223865.488 ops/s
# Warmup Iteration  21: 221689.257 ops/s
# Warmup Iteration  22: 215844.640 ops/s
# Warmup Iteration  23: 227869.830 ops/s
# Warmup Iteration  24: 218298.624 ops/s
# Warmup Iteration  25: 217562.982 ops/s
# Warmup Iteration  26: 228347.132 ops/s
# Warmup Iteration  27: 224319.811 ops/s
# Warmup Iteration  28: 221346.917 ops/s
# Warmup Iteration  29: 232506.715 ops/s
# Warmup Iteration  30: 216975.248 ops/s
Iteration   1: 222610.183 ops/s
Iteration   2: 223792.836 ops/s
Iteration   3: 223950.015 ops/s
Iteration   4: 220277.308 ops/s
Iteration   5: 220375.482 ops/s
Iteration   6: 220319.993 ops/s
Iteration   7: 229783.711 ops/s
Iteration   8: 220391.733 ops/s
Iteration   9: 217625.132 ops/s
Iteration  10: 227026.441 ops/s
Iteration  11: 214862.443 ops/s
Iteration  12: 231983.220 ops/s
Iteration  13: 226403.298 ops/s
Iteration  14: 218415.930 ops/s
Iteration  15: 215428.645 ops/s
Iteration  16: 231385.447 ops/s
Iteration  17: 217465.746 ops/s
Iteration  18: 227397.740 ops/s
Iteration  19: 220715.222 ops/s
Iteration  20: 221141.325 ops/s
Iteration  21: 222843.143 ops/s
Iteration  22: 225864.363 ops/s
Iteration  23: 216814.361 ops/s
Iteration  24: 216433.366 ops/s
Iteration  25: 231640.919 ops/s
Iteration  26: 220027.087 ops/s
Iteration  27: 224345.187 ops/s
Iteration  28: 216191.810 ops/s
Iteration  29: 224560.731 ops/s
Iteration  30: 220344.167 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserverTest._Benchmark.benchmark_onErrorCrashes":
  222347.233 ±(99.9%) 3293.864 ops/s [Average]
  (min, avg, max) = (214862.443, 222347.233, 231983.220), stdev = 4930.101
  CI (99.9%): [219053.369, 225641.097] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MaybeCallbackObserverTest._Benchmark.benchmark_onErrorCrashes  thrpt   30  222347.233 ± 3293.864  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43407.732 ops/s
# Warmup Iteration   2: 203668.480 ops/s
# Warmup Iteration   3: 209652.327 ops/s
# Warmup Iteration   4: 231368.684 ops/s
# Warmup Iteration   5: 236050.220 ops/s
# Warmup Iteration   6: 219717.699 ops/s
# Warmup Iteration   7: 222140.248 ops/s
# Warmup Iteration   8: 242698.804 ops/s
# Warmup Iteration   9: 234220.729 ops/s
# Warmup Iteration  10: 234938.996 ops/s
# Warmup Iteration  11: 223284.851 ops/s
# Warmup Iteration  12: 239816.673 ops/s
# Warmup Iteration  13: 247274.586 ops/s
# Warmup Iteration  14: 240795.508 ops/s
# Warmup Iteration  15: 248490.965 ops/s
# Warmup Iteration  16: 245020.976 ops/s
# Warmup Iteration  17: 247074.936 ops/s
# Warmup Iteration  18: 251415.873 ops/s
# Warmup Iteration  19: 259118.499 ops/s
# Warmup Iteration  20: 246960.876 ops/s
# Warmup Iteration  21: 258564.775 ops/s
# Warmup Iteration  22: 246929.987 ops/s
# Warmup Iteration  23: 241330.088 ops/s
# Warmup Iteration  24: 253619.384 ops/s
# Warmup Iteration  25: 246714.123 ops/s
# Warmup Iteration  26: 251563.800 ops/s
# Warmup Iteration  27: 249109.676 ops/s
# Warmup Iteration  28: 252411.448 ops/s
# Warmup Iteration  29: 250251.778 ops/s
# Warmup Iteration  30: 247397.893 ops/s
Iteration   1: 256270.732 ops/s
Iteration   2: 249248.218 ops/s
Iteration   3: 254518.205 ops/s
Iteration   4: 246549.574 ops/s
Iteration   5: 249451.284 ops/s
Iteration   6: 257526.338 ops/s
Iteration   7: 252411.585 ops/s
Iteration   8: 238344.676 ops/s
Iteration   9: 259827.799 ops/s
Iteration  10: 253442.410 ops/s
Iteration  11: 195122.402 ops/s
Iteration  12: 252526.173 ops/s
Iteration  13: 244572.902 ops/s
Iteration  14: 251430.761 ops/s
Iteration  15: 245774.162 ops/s
Iteration  16: 245461.514 ops/s
Iteration  17: 251223.197 ops/s
Iteration  18: 242027.923 ops/s
Iteration  19: 251477.371 ops/s
Iteration  20: 249828.540 ops/s
Iteration  21: 258704.580 ops/s
Iteration  22: 247561.663 ops/s
Iteration  23: 251237.084 ops/s
Iteration  24: 249243.845 ops/s
Iteration  25: 243152.460 ops/s
Iteration  26: 256810.609 ops/s
Iteration  27: 248324.509 ops/s
Iteration  28: 252917.021 ops/s
Iteration  29: 249810.688 ops/s
Iteration  30: 249892.487 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_doubleOnSubscribe":
  248489.690 ±(99.9%) 7499.985 ops/s [Average]
  (min, avg, max) = (195122.402, 248489.690, 259827.799), stdev = 11225.626
  CI (99.9%): [240989.705, 255989.676] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableTimeoutWithSelectorTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  248489.690 ± 7499.985  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_onSubscribeToObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_onSubscribeToObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95105.474 ops/s
# Warmup Iteration   2: 373069.718 ops/s
# Warmup Iteration   3: 510883.591 ops/s
# Warmup Iteration   4: 501496.710 ops/s
# Warmup Iteration   5: 510895.035 ops/s
# Warmup Iteration   6: 478374.534 ops/s
# Warmup Iteration   7: 501300.780 ops/s
# Warmup Iteration   8: 531137.857 ops/s
# Warmup Iteration   9: 505955.493 ops/s
# Warmup Iteration  10: 505929.874 ops/s
# Warmup Iteration  11: 513120.475 ops/s
# Warmup Iteration  12: 496456.025 ops/s
# Warmup Iteration  13: 532266.209 ops/s
# Warmup Iteration  14: 500312.237 ops/s
# Warmup Iteration  15: 508561.560 ops/s
# Warmup Iteration  16: 512356.748 ops/s
# Warmup Iteration  17: 525208.187 ops/s
# Warmup Iteration  18: 555939.914 ops/s
# Warmup Iteration  19: 527202.368 ops/s
# Warmup Iteration  20: 519293.647 ops/s
# Warmup Iteration  21: 536959.626 ops/s
# Warmup Iteration  22: 543683.257 ops/s
# Warmup Iteration  23: 559681.533 ops/s
# Warmup Iteration  24: 528163.330 ops/s
# Warmup Iteration  25: 524238.537 ops/s
# Warmup Iteration  26: 548378.366 ops/s
# Warmup Iteration  27: 536385.568 ops/s
# Warmup Iteration  28: 546750.442 ops/s
# Warmup Iteration  29: 528382.724 ops/s
# Warmup Iteration  30: 530758.009 ops/s
Iteration   1: 560776.500 ops/s
Iteration   2: 526866.640 ops/s
Iteration   3: 526299.728 ops/s
Iteration   4: 547245.815 ops/s
Iteration   5: 528314.650 ops/s
Iteration   6: 542211.660 ops/s
Iteration   7: 532128.398 ops/s
Iteration   8: 550588.348 ops/s
Iteration   9: 539392.781 ops/s
Iteration  10: 523528.899 ops/s
Iteration  11: 555195.713 ops/s
Iteration  12: 520947.036 ops/s
Iteration  13: 530975.700 ops/s
Iteration  14: 542567.272 ops/s
Iteration  15: 534170.777 ops/s
Iteration  16: 538712.536 ops/s
Iteration  17: 529554.461 ops/s
Iteration  18: 534409.372 ops/s
Iteration  19: 549430.995 ops/s
Iteration  20: 525326.774 ops/s
Iteration  21: 537144.265 ops/s
Iteration  22: 528446.391 ops/s
Iteration  23: 554280.058 ops/s
Iteration  24: 540733.804 ops/s
Iteration  25: 519960.845 ops/s
Iteration  26: 549527.834 ops/s
Iteration  27: 539110.455 ops/s
Iteration  28: 540926.401 ops/s
Iteration  29: 521920.816 ops/s
Iteration  30: 541159.072 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_onSubscribeToObservable":
  537061.800 ±(99.9%) 7342.994 ops/s [Average]
  (min, avg, max) = (519960.845, 537061.800, 560776.500), stdev = 10990.649
  CI (99.9%): [529718.805, 544404.794] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_onSubscribeToObservable  thrpt   30  537061.800 ± 7342.994  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 201385.970 ops/s
# Warmup Iteration   2: 435047.052 ops/s
# Warmup Iteration   3: 455297.989 ops/s
# Warmup Iteration   4: 495806.549 ops/s
# Warmup Iteration   5: 444908.011 ops/s
# Warmup Iteration   6: 509186.026 ops/s
# Warmup Iteration   7: 448793.650 ops/s
# Warmup Iteration   8: 484758.356 ops/s
# Warmup Iteration   9: 494035.464 ops/s
# Warmup Iteration  10: 517975.522 ops/s
# Warmup Iteration  11: 495680.374 ops/s
# Warmup Iteration  12: 495814.171 ops/s
# Warmup Iteration  13: 518668.627 ops/s
# Warmup Iteration  14: 489282.752 ops/s
# Warmup Iteration  15: 522402.930 ops/s
# Warmup Iteration  16: 503975.016 ops/s
# Warmup Iteration  17: 529141.157 ops/s
# Warmup Iteration  18: 532048.255 ops/s
# Warmup Iteration  19: 523197.695 ops/s
# Warmup Iteration  20: 544524.144 ops/s
# Warmup Iteration  21: 519596.077 ops/s
# Warmup Iteration  22: 535383.682 ops/s
# Warmup Iteration  23: 525163.227 ops/s
# Warmup Iteration  24: 512439.001 ops/s
# Warmup Iteration  25: 539765.391 ops/s
# Warmup Iteration  26: 519346.448 ops/s
# Warmup Iteration  27: 528234.642 ops/s
# Warmup Iteration  28: 521192.810 ops/s
# Warmup Iteration  29: 537007.527 ops/s
# Warmup Iteration  30: 519647.077 ops/s
Iteration   1: 528519.802 ops/s
Iteration   2: 525634.384 ops/s
Iteration   3: 533406.876 ops/s
Iteration   4: 509704.039 ops/s
Iteration   5: 533870.718 ops/s
Iteration   6: 443081.396 ops/s
Iteration   7: 517692.790 ops/s
Iteration   8: 524654.510 ops/s
Iteration   9: 513500.470 ops/s
Iteration  10: 540834.315 ops/s
Iteration  11: 503269.670 ops/s
Iteration  12: 530026.049 ops/s
Iteration  13: 508051.865 ops/s
Iteration  14: 520610.072 ops/s
Iteration  15: 526528.680 ops/s
Iteration  16: 538597.392 ops/s
Iteration  17: 509042.780 ops/s
Iteration  18: 532892.163 ops/s
Iteration  19: 531518.084 ops/s
Iteration  20: 492883.378 ops/s
Iteration  21: 540585.704 ops/s
Iteration  22: 511666.869 ops/s
Iteration  23: 516756.650 ops/s
Iteration  24: 522985.604 ops/s
Iteration  25: 522344.277 ops/s
Iteration  26: 548356.009 ops/s
Iteration  27: 518976.071 ops/s
Iteration  28: 533921.742 ops/s
Iteration  29: 490788.463 ops/s
Iteration  30: 546914.583 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstDoubleOnSubscribe":
  520587.180 ±(99.9%) 13677.041 ops/s [Average]
  (min, avg, max) = (443081.396, 520587.180, 548356.009), stdev = 20471.152
  CI (99.9%): [506910.139, 534264.221] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score       Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstDoubleOnSubscribe  thrpt   30  520587.180 ± 13677.041  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 166510.550 ops/s
# Warmup Iteration   2: 433143.283 ops/s
# Warmup Iteration   3: 492316.073 ops/s
# Warmup Iteration   4: 515647.405 ops/s
# Warmup Iteration   5: 517169.308 ops/s
# Warmup Iteration   6: 483613.912 ops/s
# Warmup Iteration   7: 497521.829 ops/s
# Warmup Iteration   8: 498609.715 ops/s
# Warmup Iteration   9: 497585.530 ops/s
# Warmup Iteration  10: 518283.636 ops/s
# Warmup Iteration  11: 470911.640 ops/s
# Warmup Iteration  12: 498341.263 ops/s
# Warmup Iteration  13: 510701.935 ops/s
# Warmup Iteration  14: 515377.893 ops/s
# Warmup Iteration  15: 489643.566 ops/s
# Warmup Iteration  16: 498632.756 ops/s
# Warmup Iteration  17: 533548.738 ops/s
# Warmup Iteration  18: 522517.175 ops/s
# Warmup Iteration  19: 529332.868 ops/s
# Warmup Iteration  20: 516212.642 ops/s
# Warmup Iteration  21: 524280.720 ops/s
# Warmup Iteration  22: 514732.318 ops/s
# Warmup Iteration  23: 552357.759 ops/s
# Warmup Iteration  24: 508615.738 ops/s
# Warmup Iteration  25: 536010.509 ops/s
# Warmup Iteration  26: 512432.979 ops/s
# Warmup Iteration  27: 523631.338 ops/s
# Warmup Iteration  28: 546796.585 ops/s
# Warmup Iteration  29: 519569.095 ops/s
# Warmup Iteration  30: 525105.643 ops/s
Iteration   1: 522437.301 ops/s
Iteration   2: 530416.347 ops/s
Iteration   3: 523217.661 ops/s
Iteration   4: 509989.947 ops/s
Iteration   5: 520644.454 ops/s
Iteration   6: 507369.217 ops/s
Iteration   7: 546786.050 ops/s
Iteration   8: 510272.681 ops/s
Iteration   9: 526470.284 ops/s
Iteration  10: 528291.553 ops/s
Iteration  11: 516131.129 ops/s
Iteration  12: 546794.880 ops/s
Iteration  13: 513460.533 ops/s
Iteration  14: 519051.503 ops/s
Iteration  15: 539571.591 ops/s
Iteration  16: 503720.662 ops/s
Iteration  17: 542838.948 ops/s
Iteration  18: 526000.496 ops/s
Iteration  19: 532620.904 ops/s
Iteration  20: 511286.992 ops/s
Iteration  21: 521200.000 ops/s
Iteration  22: 536826.007 ops/s
Iteration  23: 517691.398 ops/s
Iteration  24: 536875.790 ops/s
Iteration  25: 507973.185 ops/s
Iteration  26: 547815.461 ops/s
Iteration  27: 518975.556 ops/s
Iteration  28: 512608.100 ops/s
Iteration  29: 547252.189 ops/s
Iteration  30: 514048.540 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstDoubleOnSubscribe":
  524621.312 ±(99.9%) 8956.185 ops/s [Average]
  (min, avg, max) = (503720.662, 524621.312, 547815.461), stdev = 13405.198
  CI (99.9%): [515665.127, 533577.497] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstDoubleOnSubscribe  thrpt   30  524621.312 ± 8956.185  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161717.943 ops/s
# Warmup Iteration   2: 426645.909 ops/s
# Warmup Iteration   3: 448211.868 ops/s
# Warmup Iteration   4: 512094.968 ops/s
# Warmup Iteration   5: 526912.418 ops/s
# Warmup Iteration   6: 505646.875 ops/s
# Warmup Iteration   7: 511343.807 ops/s
# Warmup Iteration   8: 500686.387 ops/s
# Warmup Iteration   9: 484963.216 ops/s
# Warmup Iteration  10: 492074.731 ops/s
# Warmup Iteration  11: 481905.115 ops/s
# Warmup Iteration  12: 528055.310 ops/s
# Warmup Iteration  13: 507346.858 ops/s
# Warmup Iteration  14: 505753.990 ops/s
# Warmup Iteration  15: 526314.320 ops/s
# Warmup Iteration  16: 501473.384 ops/s
# Warmup Iteration  17: 550355.490 ops/s
# Warmup Iteration  18: 551318.004 ops/s
# Warmup Iteration  19: 530715.703 ops/s
# Warmup Iteration  20: 538474.624 ops/s
# Warmup Iteration  21: 518848.099 ops/s
# Warmup Iteration  22: 539961.819 ops/s
# Warmup Iteration  23: 553833.416 ops/s
# Warmup Iteration  24: 536089.909 ops/s
# Warmup Iteration  25: 512305.104 ops/s
# Warmup Iteration  26: 560211.631 ops/s
# Warmup Iteration  27: 507372.356 ops/s
# Warmup Iteration  28: 546916.114 ops/s
# Warmup Iteration  29: 532637.402 ops/s
# Warmup Iteration  30: 538209.790 ops/s
Iteration   1: 431276.637 ops/s
Iteration   2: 522682.369 ops/s
Iteration   3: 557642.085 ops/s
Iteration   4: 523752.780 ops/s
Iteration   5: 525913.783 ops/s
Iteration   6: 526220.273 ops/s
Iteration   7: 540413.352 ops/s
Iteration   8: 523761.558 ops/s
Iteration   9: 542736.171 ops/s
Iteration  10: 516473.239 ops/s
Iteration  11: 529880.291 ops/s
Iteration  12: 535947.958 ops/s
Iteration  13: 525575.281 ops/s
Iteration  14: 526651.445 ops/s
Iteration  15: 528565.850 ops/s
Iteration  16: 535439.385 ops/s
Iteration  17: 525508.279 ops/s
Iteration  18: 544682.701 ops/s
Iteration  19: 526520.459 ops/s
Iteration  20: 545734.360 ops/s
Iteration  21: 551489.547 ops/s
Iteration  22: 528503.359 ops/s
Iteration  23: 542641.541 ops/s
Iteration  24: 510764.756 ops/s
Iteration  25: 538337.520 ops/s
Iteration  26: 530951.184 ops/s
Iteration  27: 532291.013 ops/s
Iteration  28: 538735.726 ops/s
Iteration  29: 528104.084 ops/s
Iteration  30: 523348.537 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_doubleOnSubscribe":
  528684.851 ±(99.9%) 14070.094 ops/s [Average]
  (min, avg, max) = (431276.637, 528684.851, 557642.085), stdev = 21059.456
  CI (99.9%): [514614.757, 542754.945] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
ObservableUsingTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  528684.851 ± 14070.094  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromRunnable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromRunnable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2564411.014 ops/s
# Warmup Iteration   2: 6500903.272 ops/s
# Warmup Iteration   3: 9150267.316 ops/s
# Warmup Iteration   4: 8894665.731 ops/s
# Warmup Iteration   5: 9135994.440 ops/s
# Warmup Iteration   6: 9095211.769 ops/s
# Warmup Iteration   7: 8783304.150 ops/s
# Warmup Iteration   8: 9120872.777 ops/s
# Warmup Iteration   9: 9293495.219 ops/s
# Warmup Iteration  10: 9054866.906 ops/s
# Warmup Iteration  11: 8680021.016 ops/s
# Warmup Iteration  12: 9342939.231 ops/s
# Warmup Iteration  13: 8726561.033 ops/s
# Warmup Iteration  14: 9421232.768 ops/s
# Warmup Iteration  15: 8873190.459 ops/s
# Warmup Iteration  16: 9519111.102 ops/s
# Warmup Iteration  17: 9085886.145 ops/s
# Warmup Iteration  18: 8777863.473 ops/s
# Warmup Iteration  19: 9395525.721 ops/s
# Warmup Iteration  20: 8856555.739 ops/s
# Warmup Iteration  21: 9236501.212 ops/s
# Warmup Iteration  22: 8956113.637 ops/s
# Warmup Iteration  23: 9187023.942 ops/s
# Warmup Iteration  24: 8914227.256 ops/s
# Warmup Iteration  25: 9369962.077 ops/s
# Warmup Iteration  26: 8886095.159 ops/s
# Warmup Iteration  27: 9056909.606 ops/s
# Warmup Iteration  28: 8911357.120 ops/s
# Warmup Iteration  29: 9359185.860 ops/s
# Warmup Iteration  30: 9038983.253 ops/s
Iteration   1: 8704457.591 ops/s
Iteration   2: 9350032.737 ops/s
Iteration   3: 8887009.305 ops/s
Iteration   4: 9125635.707 ops/s
Iteration   5: 8880502.092 ops/s
Iteration   6: 8986102.736 ops/s
Iteration   7: 9527826.886 ops/s
Iteration   8: 9019368.499 ops/s
Iteration   9: 9290323.898 ops/s
Iteration  10: 8844379.542 ops/s
Iteration  11: 9266125.785 ops/s
Iteration  12: 8315416.155 ops/s
Iteration  13: 8899873.402 ops/s
Iteration  14: 9202875.687 ops/s
Iteration  15: 9014234.735 ops/s
Iteration  16: 9089087.384 ops/s
Iteration  17: 8796592.205 ops/s
Iteration  18: 9023904.593 ops/s
Iteration  19: 9531159.357 ops/s
Iteration  20: 8831874.471 ops/s
Iteration  21: 9439610.316 ops/s
Iteration  22: 9004838.680 ops/s
Iteration  23: 9212311.824 ops/s
Iteration  24: 8975950.763 ops/s
Iteration  25: 9196983.910 ops/s
Iteration  26: 8775510.537 ops/s
Iteration  27: 9095394.559 ops/s
Iteration  28: 8958527.663 ops/s
Iteration  29: 8827439.408 ops/s
Iteration  30: 9316243.781 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromRunnable":
  9046319.807 ±(99.9%) 175274.808 ops/s [Average]
  (min, avg, max) = (8315416.155, 9046319.807, 9531159.357), stdev = 262343.102
  CI (99.9%): [8871044.999, 9221594.615] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_fromRunnable  thrpt   30  9046319.807 ± 175274.808  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromAction$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromAction

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3719699.565 ops/s
# Warmup Iteration   2: 7823128.356 ops/s
# Warmup Iteration   3: 11565758.226 ops/s
# Warmup Iteration   4: 11084019.331 ops/s
# Warmup Iteration   5: 11247712.896 ops/s
# Warmup Iteration   6: 11838148.205 ops/s
# Warmup Iteration   7: 11723634.408 ops/s
# Warmup Iteration   8: 10909528.253 ops/s
# Warmup Iteration   9: 11887354.004 ops/s
# Warmup Iteration  10: 11789434.612 ops/s
# Warmup Iteration  11: 11495950.077 ops/s
# Warmup Iteration  12: 11118859.558 ops/s
# Warmup Iteration  13: 11635519.447 ops/s
# Warmup Iteration  14: 11309883.269 ops/s
# Warmup Iteration  15: 11833311.195 ops/s
# Warmup Iteration  16: 11806921.184 ops/s
# Warmup Iteration  17: 11078512.167 ops/s
# Warmup Iteration  18: 12151309.794 ops/s
# Warmup Iteration  19: 11278091.426 ops/s
# Warmup Iteration  20: 11459950.507 ops/s
# Warmup Iteration  21: 11727743.424 ops/s
# Warmup Iteration  22: 11569011.496 ops/s
# Warmup Iteration  23: 11958193.461 ops/s
# Warmup Iteration  24: 11551289.367 ops/s
# Warmup Iteration  25: 8113934.853 ops/s
# Warmup Iteration  26: 11504030.809 ops/s
# Warmup Iteration  27: 11765675.650 ops/s
# Warmup Iteration  28: 11247682.276 ops/s
# Warmup Iteration  29: 11871188.927 ops/s
# Warmup Iteration  30: 11001069.100 ops/s
Iteration   1: 11872773.188 ops/s
Iteration   2: 12065818.358 ops/s
Iteration   3: 11346583.857 ops/s
Iteration   4: 11986350.479 ops/s
Iteration   5: 11669507.002 ops/s
Iteration   6: 11321025.949 ops/s
Iteration   7: 11815109.728 ops/s
Iteration   8: 11658244.190 ops/s
Iteration   9: 10943936.532 ops/s
Iteration  10: 11558860.830 ops/s
Iteration  11: 11515297.175 ops/s
Iteration  12: 11550752.517 ops/s
Iteration  13: 11252952.118 ops/s
Iteration  14: 11407172.710 ops/s
Iteration  15: 11446328.542 ops/s
Iteration  16: 11413689.158 ops/s
Iteration  17: 11803825.383 ops/s
Iteration  18: 11113599.558 ops/s
Iteration  19: 11429370.418 ops/s
Iteration  20: 11278771.129 ops/s
Iteration  21: 11745413.549 ops/s
Iteration  22: 11930456.158 ops/s
Iteration  23: 11292973.981 ops/s
Iteration  24: 11482807.864 ops/s
Iteration  25: 11538338.915 ops/s
Iteration  26: 11566805.136 ops/s
Iteration  27: 11393837.518 ops/s
Iteration  28: 11746402.620 ops/s
Iteration  29: 11480280.232 ops/s
Iteration  30: 11589597.322 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromAction":
  11540562.737 ±(99.9%) 171952.188 ops/s [Average]
  (min, avg, max) = (10943936.532, 11540562.737, 12065818.358), stdev = 257369.960
  CI (99.9%): [11368610.549, 11712514.925] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score        Error  Units
MaybeTest._Benchmark.benchmark_fromAction  thrpt   30  11540562.737 ± 171952.188  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissionsObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissionsObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36499.624 ops/s
# Warmup Iteration   2: 147121.329 ops/s
# Warmup Iteration   3: 172252.090 ops/s
# Warmup Iteration   4: 167671.188 ops/s
# Warmup Iteration   5: 174900.551 ops/s
# Warmup Iteration   6: 183442.889 ops/s
# Warmup Iteration   7: 190496.894 ops/s
# Warmup Iteration   8: 182744.019 ops/s
# Warmup Iteration   9: 190152.189 ops/s
# Warmup Iteration  10: 180333.678 ops/s
# Warmup Iteration  11: 187071.316 ops/s
# Warmup Iteration  12: 182927.994 ops/s
# Warmup Iteration  13: 186071.808 ops/s
# Warmup Iteration  14: 183881.051 ops/s
# Warmup Iteration  15: 182782.619 ops/s
# Warmup Iteration  16: 193069.437 ops/s
# Warmup Iteration  17: 190000.347 ops/s
# Warmup Iteration  18: 191131.861 ops/s
# Warmup Iteration  19: 193979.608 ops/s
# Warmup Iteration  20: 201008.061 ops/s
# Warmup Iteration  21: 194248.276 ops/s
# Warmup Iteration  22: 193472.160 ops/s
# Warmup Iteration  23: 199354.546 ops/s
# Warmup Iteration  24: 188356.582 ops/s
# Warmup Iteration  25: 201158.155 ops/s
# Warmup Iteration  26: 186770.331 ops/s
# Warmup Iteration  27: 197366.024 ops/s
# Warmup Iteration  28: 191402.785 ops/s
# Warmup Iteration  29: 196156.718 ops/s
# Warmup Iteration  30: 199278.898 ops/s
Iteration   1: 189748.181 ops/s
Iteration   2: 194880.058 ops/s
Iteration   3: 191535.775 ops/s
Iteration   4: 201712.111 ops/s
Iteration   5: 195075.106 ops/s
Iteration   6: 190282.860 ops/s
Iteration   7: 190951.916 ops/s
Iteration   8: 190661.078 ops/s
Iteration   9: 198877.533 ops/s
Iteration  10: 193353.957 ops/s
Iteration  11: 195649.680 ops/s
Iteration  12: 190889.803 ops/s
Iteration  13: 192223.858 ops/s
Iteration  14: 194690.246 ops/s
Iteration  15: 189444.899 ops/s
Iteration  16: 204361.590 ops/s
Iteration  17: 186586.030 ops/s
Iteration  18: 197616.646 ops/s
Iteration  19: 192535.838 ops/s
Iteration  20: 200854.009 ops/s
Iteration  21: 190617.611 ops/s
Iteration  22: 191017.734 ops/s
Iteration  23: 199163.583 ops/s
Iteration  24: 191007.628 ops/s
Iteration  25: 197859.788 ops/s
Iteration  26: 185688.972 ops/s
Iteration  27: 197770.964 ops/s
Iteration  28: 195613.287 ops/s
Iteration  29: 186013.560 ops/s
Iteration  30: 198664.624 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissionsObservable":
  193844.964 ±(99.9%) 3155.493 ops/s [Average]
  (min, avg, max) = (185688.972, 193844.964, 204361.590), stdev = 4722.993
  CI (99.9%): [190689.471, 197000.457] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                               Mode  Cnt       Score      Error  Units
ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInTwoErrorEmissionsObservable  thrpt   30  193844.964 ± 3155.493  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_innerObserver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_innerObserver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 354899.890 ops/s
# Warmup Iteration   2: 1412739.019 ops/s
# Warmup Iteration   3: 1590269.338 ops/s
# Warmup Iteration   4: 1648348.737 ops/s
# Warmup Iteration   5: 1889439.680 ops/s
# Warmup Iteration   6: 1811109.231 ops/s
# Warmup Iteration   7: 1808989.661 ops/s
# Warmup Iteration   8: 1824137.367 ops/s
# Warmup Iteration   9: 1800348.358 ops/s
# Warmup Iteration  10: 1795016.188 ops/s
# Warmup Iteration  11: 1790562.423 ops/s
# Warmup Iteration  12: 1788155.798 ops/s
# Warmup Iteration  13: 1797321.221 ops/s
# Warmup Iteration  14: 1906727.306 ops/s
# Warmup Iteration  15: 1799289.486 ops/s
# Warmup Iteration  16: 1819943.360 ops/s
# Warmup Iteration  17: 1766618.853 ops/s
# Warmup Iteration  18: 1807540.365 ops/s
# Warmup Iteration  19: 1842010.090 ops/s
# Warmup Iteration  20: 1404856.897 ops/s
# Warmup Iteration  21: 1801040.233 ops/s
# Warmup Iteration  22: 1751948.985 ops/s
# Warmup Iteration  23: 1876377.758 ops/s
# Warmup Iteration  24: 1787499.919 ops/s
# Warmup Iteration  25: 1750557.684 ops/s
# Warmup Iteration  26: 1738980.629 ops/s
# Warmup Iteration  27: 1864146.744 ops/s
# Warmup Iteration  28: 1770029.418 ops/s
# Warmup Iteration  29: 1798002.270 ops/s
# Warmup Iteration  30: 1751113.240 ops/s
Iteration   1: 1828264.958 ops/s
Iteration   2: 1812240.780 ops/s
Iteration   3: 1748235.453 ops/s
Iteration   4: 1828958.756 ops/s
Iteration   5: 1799876.984 ops/s
Iteration   6: 1903817.919 ops/s
Iteration   7: 1833602.198 ops/s
Iteration   8: 1772137.706 ops/s
Iteration   9: 1848026.167 ops/s
Iteration  10: 1727924.221 ops/s
Iteration  11: 1856344.996 ops/s
Iteration  12: 1844442.273 ops/s
Iteration  13: 1760691.936 ops/s
Iteration  14: 1840680.840 ops/s
Iteration  15: 1799201.122 ops/s
Iteration  16: 1742704.186 ops/s
Iteration  17: 1855632.792 ops/s
Iteration  18: 1830746.572 ops/s
Iteration  19: 1777879.765 ops/s
Iteration  20: 1831903.159 ops/s
Iteration  21: 1795917.082 ops/s
Iteration  22: 1811248.878 ops/s
Iteration  23: 1810471.334 ops/s
Iteration  24: 1758154.723 ops/s
Iteration  25: 1851866.710 ops/s
Iteration  26: 1718171.812 ops/s
Iteration  27: 1877210.936 ops/s
Iteration  28: 1810185.663 ops/s
Iteration  29: 1774383.399 ops/s
Iteration  30: 1808374.722 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_innerObserver":
  1808643.268 ±(99.9%) 29820.423 ops/s [Average]
  (min, avg, max) = (1718171.812, 1808643.268, 1903817.919), stdev = 44633.808
  CI (99.9%): [1778822.845, 1838463.691] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_innerObserver  thrpt   30  1808643.268 ± 29820.423  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_fused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_fused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 242609.278 ops/s
# Warmup Iteration   2: 631817.872 ops/s
# Warmup Iteration   3: 697123.209 ops/s
# Warmup Iteration   4: 797611.528 ops/s
# Warmup Iteration   5: 750025.592 ops/s
# Warmup Iteration   6: 877845.718 ops/s
# Warmup Iteration   7: 826318.692 ops/s
# Warmup Iteration   8: 889568.807 ops/s
# Warmup Iteration   9: 843909.613 ops/s
# Warmup Iteration  10: 848120.250 ops/s
# Warmup Iteration  11: 853801.175 ops/s
# Warmup Iteration  12: 865295.444 ops/s
# Warmup Iteration  13: 853161.406 ops/s
# Warmup Iteration  14: 851425.612 ops/s
# Warmup Iteration  15: 845717.107 ops/s
# Warmup Iteration  16: 826959.812 ops/s
# Warmup Iteration  17: 874002.141 ops/s
# Warmup Iteration  18: 823635.006 ops/s
# Warmup Iteration  19: 850436.730 ops/s
# Warmup Iteration  20: 881882.750 ops/s
# Warmup Iteration  21: 827420.118 ops/s
# Warmup Iteration  22: 877946.068 ops/s
# Warmup Iteration  23: 851551.036 ops/s
# Warmup Iteration  24: 851240.035 ops/s
# Warmup Iteration  25: 853919.687 ops/s
# Warmup Iteration  26: 826157.792 ops/s
# Warmup Iteration  27: 850982.674 ops/s
# Warmup Iteration  28: 850454.921 ops/s
# Warmup Iteration  29: 873411.575 ops/s
# Warmup Iteration  30: 840466.038 ops/s
Iteration   1: 859762.566 ops/s
Iteration   2: 855046.817 ops/s
Iteration   3: 881977.765 ops/s
Iteration   4: 854709.858 ops/s
Iteration   5: 840558.740 ops/s
Iteration   6: 860066.202 ops/s
Iteration   7: 840765.400 ops/s
Iteration   8: 875461.298 ops/s
Iteration   9: 867299.426 ops/s
Iteration  10: 840195.707 ops/s
Iteration  11: 890788.581 ops/s
Iteration  12: 818043.745 ops/s
Iteration  13: 844546.288 ops/s
Iteration  14: 870730.011 ops/s
Iteration  15: 828414.903 ops/s
Iteration  16: 859607.299 ops/s
Iteration  17: 835173.770 ops/s
Iteration  18: 884126.160 ops/s
Iteration  19: 881440.447 ops/s
Iteration  20: 809918.056 ops/s
Iteration  21: 885546.294 ops/s
Iteration  22: 834402.368 ops/s
Iteration  23: 882773.864 ops/s
Iteration  24: 838369.002 ops/s
Iteration  25: 875659.730 ops/s
Iteration  26: 856381.344 ops/s
Iteration  27: 872841.623 ops/s
Iteration  28: 862885.579 ops/s
Iteration  29: 872496.943 ops/s
Iteration  30: 877240.885 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_fused":
  858574.356 ±(99.9%) 14314.797 ops/s [Average]
  (min, avg, max) = (809918.056, 858574.356, 890788.581), stdev = 21425.715
  CI (99.9%): [844259.559, 872889.152] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_fused  thrpt   30  858574.356 ± 14314.797  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_fusedObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_fusedObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 192307.084 ops/s
# Warmup Iteration   2: 612653.267 ops/s
# Warmup Iteration   3: 709322.960 ops/s
# Warmup Iteration   4: 716727.581 ops/s
# Warmup Iteration   5: 753096.779 ops/s
# Warmup Iteration   6: 850431.658 ops/s
# Warmup Iteration   7: 821372.371 ops/s
# Warmup Iteration   8: 886516.707 ops/s
# Warmup Iteration   9: 828641.990 ops/s
# Warmup Iteration  10: 858534.569 ops/s
# Warmup Iteration  11: 861166.512 ops/s
# Warmup Iteration  12: 822777.316 ops/s
# Warmup Iteration  13: 825466.736 ops/s
# Warmup Iteration  14: 865740.403 ops/s
# Warmup Iteration  15: 681431.609 ops/s
# Warmup Iteration  16: 861883.828 ops/s
# Warmup Iteration  17: 818543.007 ops/s
# Warmup Iteration  18: 854473.333 ops/s
# Warmup Iteration  19: 891396.354 ops/s
# Warmup Iteration  20: 833712.937 ops/s
# Warmup Iteration  21: 887904.520 ops/s
# Warmup Iteration  22: 826215.894 ops/s
# Warmup Iteration  23: 863188.359 ops/s
# Warmup Iteration  24: 834011.567 ops/s
# Warmup Iteration  25: 861956.754 ops/s
# Warmup Iteration  26: 868244.003 ops/s
# Warmup Iteration  27: 845001.425 ops/s
# Warmup Iteration  28: 854847.268 ops/s
# Warmup Iteration  29: 826381.564 ops/s
# Warmup Iteration  30: 904843.769 ops/s
Iteration   1: 862303.488 ops/s
Iteration   2: 868490.315 ops/s
Iteration   3: 859487.496 ops/s
Iteration   4: 819467.745 ops/s
Iteration   5: 835536.881 ops/s
Iteration   6: 852465.739 ops/s
Iteration   7: 833670.797 ops/s
Iteration   8: 863296.393 ops/s
Iteration   9: 861963.079 ops/s
Iteration  10: 802761.313 ops/s
Iteration  11: 884006.945 ops/s
Iteration  12: 816079.228 ops/s
Iteration  13: 814619.966 ops/s
Iteration  14: 822512.977 ops/s
Iteration  15: 822358.829 ops/s
Iteration  16: 853810.874 ops/s
Iteration  17: 863887.063 ops/s
Iteration  18: 836672.944 ops/s
Iteration  19: 864758.917 ops/s
Iteration  20: 894431.149 ops/s
Iteration  21: 834904.627 ops/s
Iteration  22: 817955.168 ops/s
Iteration  23: 847145.355 ops/s
Iteration  24: 846963.026 ops/s
Iteration  25: 885186.781 ops/s
Iteration  26: 852931.618 ops/s
Iteration  27: 860106.205 ops/s
Iteration  28: 843557.712 ops/s
Iteration  29: 859372.174 ops/s
Iteration  30: 832976.935 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_fusedObservable":
  847122.725 ±(99.9%) 15192.759 ops/s [Average]
  (min, avg, max) = (802761.313, 847122.725, 894431.149), stdev = 22739.809
  CI (99.9%): [831929.965, 862315.484] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_fusedObservable  thrpt   30  847122.725 ± 15192.759  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambArrayOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambArrayOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 297041.165 ops/s
# Warmup Iteration   2: 514633.919 ops/s
# Warmup Iteration   3: 598857.630 ops/s
# Warmup Iteration   4: 665005.320 ops/s
# Warmup Iteration   5: 595385.544 ops/s
# Warmup Iteration   6: 676629.456 ops/s
# Warmup Iteration   7: 682350.620 ops/s
# Warmup Iteration   8: 695607.846 ops/s
# Warmup Iteration   9: 673135.480 ops/s
# Warmup Iteration  10: 694409.461 ops/s
# Warmup Iteration  11: 668756.990 ops/s
# Warmup Iteration  12: 681133.816 ops/s
# Warmup Iteration  13: 698319.551 ops/s
# Warmup Iteration  14: 678711.665 ops/s
# Warmup Iteration  15: 669390.332 ops/s
# Warmup Iteration  16: 681463.473 ops/s
# Warmup Iteration  17: 720888.814 ops/s
# Warmup Iteration  18: 745309.431 ops/s
# Warmup Iteration  19: 744231.109 ops/s
# Warmup Iteration  20: 747064.639 ops/s
# Warmup Iteration  21: 720352.215 ops/s
# Warmup Iteration  22: 735588.328 ops/s
# Warmup Iteration  23: 751735.165 ops/s
# Warmup Iteration  24: 750303.780 ops/s
# Warmup Iteration  25: 688175.473 ops/s
# Warmup Iteration  26: 731686.293 ops/s
# Warmup Iteration  27: 700880.124 ops/s
# Warmup Iteration  28: 719553.095 ops/s
# Warmup Iteration  29: 752393.689 ops/s
# Warmup Iteration  30: 735604.535 ops/s
Iteration   1: 711290.341 ops/s
Iteration   2: 742548.623 ops/s
Iteration   3: 709003.618 ops/s
Iteration   4: 741357.729 ops/s
Iteration   5: 713591.236 ops/s
Iteration   6: 722814.504 ops/s
Iteration   7: 745401.969 ops/s
Iteration   8: 705726.886 ops/s
Iteration   9: 739522.868 ops/s
Iteration  10: 703793.306 ops/s
Iteration  11: 728000.572 ops/s
Iteration  12: 736479.261 ops/s
Iteration  13: 735703.472 ops/s
Iteration  14: 713315.947 ops/s
Iteration  15: 704597.332 ops/s
Iteration  16: 744786.414 ops/s
Iteration  17: 742058.503 ops/s
Iteration  18: 700547.120 ops/s
Iteration  19: 758814.211 ops/s
Iteration  20: 719761.117 ops/s
Iteration  21: 735684.866 ops/s
Iteration  22: 725196.741 ops/s
Iteration  23: 732627.885 ops/s
Iteration  24: 746215.275 ops/s
Iteration  25: 708182.824 ops/s
Iteration  26: 751378.960 ops/s
Iteration  27: 712080.439 ops/s
Iteration  28: 729761.019 ops/s
Iteration  29: 711495.878 ops/s
Iteration  30: 750781.557 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambArrayOrder":
  727417.349 ±(99.9%) 11319.582 ops/s [Average]
  (min, avg, max) = (700547.120, 727417.349, 758814.211), stdev = 16942.618
  CI (99.9%): [716097.767, 738736.931] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
CompletableAmbTest._Benchmark.benchmark_ambArrayOrder  thrpt   30  727417.349 ± 11319.582  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambWithOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambWithOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 332773.454 ops/s
# Warmup Iteration   2: 559373.090 ops/s
# Warmup Iteration   3: 648135.982 ops/s
# Warmup Iteration   4: 686965.284 ops/s
# Warmup Iteration   5: 711776.915 ops/s
# Warmup Iteration   6: 672445.093 ops/s
# Warmup Iteration   7: 674007.989 ops/s
# Warmup Iteration   8: 693556.514 ops/s
# Warmup Iteration   9: 662980.612 ops/s
# Warmup Iteration  10: 524710.131 ops/s
# Warmup Iteration  11: 685383.764 ops/s
# Warmup Iteration  12: 678996.593 ops/s
# Warmup Iteration  13: 683991.336 ops/s
# Warmup Iteration  14: 704972.706 ops/s
# Warmup Iteration  15: 663832.591 ops/s
# Warmup Iteration  16: 701236.723 ops/s
# Warmup Iteration  17: 725557.939 ops/s
# Warmup Iteration  18: 702322.998 ops/s
# Warmup Iteration  19: 764730.927 ops/s
# Warmup Iteration  20: 676747.294 ops/s
# Warmup Iteration  21: 752761.110 ops/s
# Warmup Iteration  22: 714483.349 ops/s
# Warmup Iteration  23: 737405.468 ops/s
# Warmup Iteration  24: 733387.377 ops/s
# Warmup Iteration  25: 723636.731 ops/s
# Warmup Iteration  26: 753138.762 ops/s
# Warmup Iteration  27: 731668.633 ops/s
# Warmup Iteration  28: 749624.283 ops/s
# Warmup Iteration  29: 736991.692 ops/s
# Warmup Iteration  30: 723435.880 ops/s
Iteration   1: 753522.515 ops/s
Iteration   2: 734643.830 ops/s
Iteration   3: 704144.378 ops/s
Iteration   4: 710893.486 ops/s
Iteration   5: 751117.495 ops/s
Iteration   6: 763161.785 ops/s
Iteration   7: 747831.209 ops/s
Iteration   8: 715643.215 ops/s
Iteration   9: 754748.876 ops/s
Iteration  10: 737066.369 ops/s
Iteration  11: 724248.388 ops/s
Iteration  12: 742934.005 ops/s
Iteration  13: 709314.651 ops/s
Iteration  14: 735602.907 ops/s
Iteration  15: 721846.714 ops/s
Iteration  16: 728847.781 ops/s
Iteration  17: 715269.589 ops/s
Iteration  18: 745517.711 ops/s
Iteration  19: 715102.288 ops/s
Iteration  20: 723523.533 ops/s
Iteration  21: 773183.479 ops/s
Iteration  22: 713097.156 ops/s
Iteration  23: 740813.022 ops/s
Iteration  24: 711132.575 ops/s
Iteration  25: 735176.700 ops/s
Iteration  26: 732317.816 ops/s
Iteration  27: 747591.113 ops/s
Iteration  28: 711406.653 ops/s
Iteration  29: 721078.523 ops/s
Iteration  30: 717311.429 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambWithOrder":
  731269.640 ±(99.9%) 11959.750 ops/s [Average]
  (min, avg, max) = (704144.378, 731269.640, 773183.479), stdev = 17900.792
  CI (99.9%): [719309.890, 743229.389] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
CompletableAmbTest._Benchmark.benchmark_ambWithOrder  thrpt   30  731269.640 ± 11959.750  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSequenceEqualTest._Benchmark.benchmark_secondFails$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSequenceEqualTest._Benchmark.benchmark_secondFails

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 264445.050 ops/s
# Warmup Iteration   2: 511777.313 ops/s
# Warmup Iteration   3: 566502.288 ops/s
# Warmup Iteration   4: 630601.303 ops/s
# Warmup Iteration   5: 541417.190 ops/s
# Warmup Iteration   6: 639680.448 ops/s
# Warmup Iteration   7: 608206.487 ops/s
# Warmup Iteration   8: 624345.916 ops/s
# Warmup Iteration   9: 639698.463 ops/s
# Warmup Iteration  10: 628743.821 ops/s
# Warmup Iteration  11: 637702.164 ops/s
# Warmup Iteration  12: 642287.502 ops/s
# Warmup Iteration  13: 639515.839 ops/s
# Warmup Iteration  14: 638190.999 ops/s
# Warmup Iteration  15: 642346.127 ops/s
# Warmup Iteration  16: 639984.184 ops/s
# Warmup Iteration  17: 659772.038 ops/s
# Warmup Iteration  18: 678278.918 ops/s
# Warmup Iteration  19: 659599.511 ops/s
# Warmup Iteration  20: 674262.276 ops/s
# Warmup Iteration  21: 668583.319 ops/s
# Warmup Iteration  22: 657085.461 ops/s
# Warmup Iteration  23: 681353.282 ops/s
# Warmup Iteration  24: 681667.074 ops/s
# Warmup Iteration  25: 638221.754 ops/s
# Warmup Iteration  26: 679823.819 ops/s
# Warmup Iteration  27: 671769.991 ops/s
# Warmup Iteration  28: 680412.684 ops/s
# Warmup Iteration  29: 671731.731 ops/s
# Warmup Iteration  30: 661583.377 ops/s
Iteration   1: 685303.579 ops/s
Iteration   2: 666418.665 ops/s
Iteration   3: 684209.671 ops/s
Iteration   4: 669736.636 ops/s
Iteration   5: 653091.327 ops/s
Iteration   6: 688154.531 ops/s
Iteration   7: 673643.955 ops/s
Iteration   8: 670754.966 ops/s
Iteration   9: 674100.346 ops/s
Iteration  10: 681986.575 ops/s
Iteration  11: 686506.930 ops/s
Iteration  12: 645873.471 ops/s
Iteration  13: 676680.014 ops/s
Iteration  14: 675550.513 ops/s
Iteration  15: 681822.429 ops/s
Iteration  16: 643323.214 ops/s
Iteration  17: 716994.544 ops/s
Iteration  18: 650070.130 ops/s
Iteration  19: 680572.796 ops/s
Iteration  20: 680008.203 ops/s
Iteration  21: 652000.899 ops/s
Iteration  22: 692462.765 ops/s
Iteration  23: 650636.494 ops/s
Iteration  24: 691951.834 ops/s
Iteration  25: 662930.403 ops/s
Iteration  26: 676540.834 ops/s
Iteration  27: 674713.220 ops/s
Iteration  28: 672616.534 ops/s
Iteration  29: 694711.590 ops/s
Iteration  30: 648024.854 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableSequenceEqualTest._Benchmark.benchmark_secondFails":
  673379.731 ±(99.9%) 11368.065 ops/s [Average]
  (min, avg, max) = (643323.214, 673379.731, 716994.544), stdev = 17015.186
  CI (99.9%): [662011.666, 684747.796] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
CompletableSequenceEqualTest._Benchmark.benchmark_secondFails  thrpt   30  673379.731 ± 11368.065  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_delayErrorIterableCancelAfterNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_delayErrorIterableCancelAfterNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1342100.691 ops/s
# Warmup Iteration   2: 3291264.786 ops/s
# Warmup Iteration   3: 3976440.172 ops/s
# Warmup Iteration   4: 3988069.396 ops/s
# Warmup Iteration   5: 3519774.940 ops/s
# Warmup Iteration   6: 4098568.670 ops/s
# Warmup Iteration   7: 4245529.678 ops/s
# Warmup Iteration   8: 4065884.694 ops/s
# Warmup Iteration   9: 4327856.475 ops/s
# Warmup Iteration  10: 4316849.078 ops/s
# Warmup Iteration  11: 4088148.431 ops/s
# Warmup Iteration  12: 4282709.666 ops/s
# Warmup Iteration  13: 4111160.761 ops/s
# Warmup Iteration  14: 4254430.356 ops/s
# Warmup Iteration  15: 4307322.773 ops/s
# Warmup Iteration  16: 4060309.761 ops/s
# Warmup Iteration  17: 4308969.746 ops/s
# Warmup Iteration  18: 4122957.315 ops/s
# Warmup Iteration  19: 4245933.214 ops/s
# Warmup Iteration  20: 4222764.567 ops/s
# Warmup Iteration  21: 4132398.674 ops/s
# Warmup Iteration  22: 4321613.418 ops/s
# Warmup Iteration  23: 4130641.475 ops/s
# Warmup Iteration  24: 4216478.736 ops/s
# Warmup Iteration  25: 4348189.940 ops/s
# Warmup Iteration  26: 4171217.776 ops/s
# Warmup Iteration  27: 4331849.990 ops/s
# Warmup Iteration  28: 4172971.209 ops/s
# Warmup Iteration  29: 4212657.437 ops/s
# Warmup Iteration  30: 4299157.246 ops/s
Iteration   1: 4127571.107 ops/s
Iteration   2: 4360929.022 ops/s
Iteration   3: 4088240.746 ops/s
Iteration   4: 4225804.323 ops/s
Iteration   5: 4138251.479 ops/s
Iteration   6: 4224997.562 ops/s
Iteration   7: 4319081.224 ops/s
Iteration   8: 4122984.039 ops/s
Iteration   9: 4414393.987 ops/s
Iteration  10: 4298571.357 ops/s
Iteration  11: 4121420.566 ops/s
Iteration  12: 4320727.425 ops/s
Iteration  13: 4131382.527 ops/s
Iteration  14: 4192994.778 ops/s
Iteration  15: 4265431.514 ops/s
Iteration  16: 4041050.341 ops/s
Iteration  17: 4294128.828 ops/s
Iteration  18: 4169568.393 ops/s
Iteration  19: 4402273.949 ops/s
Iteration  20: 4158235.963 ops/s
Iteration  21: 4184956.976 ops/s
Iteration  22: 4254706.457 ops/s
Iteration  23: 4161636.975 ops/s
Iteration  24: 4305009.582 ops/s
Iteration  25: 4089580.091 ops/s
Iteration  26: 4220297.211 ops/s
Iteration  27: 4191207.703 ops/s
Iteration  28: 4125460.577 ops/s
Iteration  29: 4214059.707 ops/s
Iteration  30: 4096599.670 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_delayErrorIterableCancelAfterNext":
  4208718.469 ±(99.9%) 65012.465 ops/s [Average]
  (min, avg, max) = (4041050.341, 4208718.469, 4414393.987), stdev = 97307.604
  CI (99.9%): [4143706.004, 4273730.934] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_delayErrorIterableCancelAfterNext  thrpt   30  4208718.469 ± 65012.465  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuterObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuterObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32128.407 ops/s
# Warmup Iteration   2: 109396.922 ops/s
# Warmup Iteration   3: 233487.419 ops/s
# Warmup Iteration   4: 317182.100 ops/s
# Warmup Iteration   5: 335486.925 ops/s
# Warmup Iteration   6: 329368.392 ops/s
# Warmup Iteration   7: 317358.812 ops/s
# Warmup Iteration   8: 333730.782 ops/s
# Warmup Iteration   9: 329093.548 ops/s
# Warmup Iteration  10: 339113.596 ops/s
# Warmup Iteration  11: 320662.860 ops/s
# Warmup Iteration  12: 330210.369 ops/s
# Warmup Iteration  13: 328271.796 ops/s
# Warmup Iteration  14: 332328.298 ops/s
# Warmup Iteration  15: 336488.528 ops/s
# Warmup Iteration  16: 312434.555 ops/s
# Warmup Iteration  17: 354384.897 ops/s
# Warmup Iteration  18: 341161.514 ops/s
# Warmup Iteration  19: 345219.781 ops/s
# Warmup Iteration  20: 341958.879 ops/s
# Warmup Iteration  21: 352424.201 ops/s
# Warmup Iteration  22: 333766.720 ops/s
# Warmup Iteration  23: 350976.368 ops/s
# Warmup Iteration  24: 346597.280 ops/s
# Warmup Iteration  25: 325705.247 ops/s
# Warmup Iteration  26: 340567.547 ops/s
# Warmup Iteration  27: 328246.671 ops/s
# Warmup Iteration  28: 334841.070 ops/s
# Warmup Iteration  29: 358121.180 ops/s
# Warmup Iteration  30: 325918.992 ops/s
Iteration   1: 351397.658 ops/s
Iteration   2: 332712.885 ops/s
Iteration   3: 337217.063 ops/s
Iteration   4: 352540.969 ops/s
Iteration   5: 328368.445 ops/s
Iteration   6: 341555.501 ops/s
Iteration   7: 338894.020 ops/s
Iteration   8: 346203.465 ops/s
Iteration   9: 342587.905 ops/s
Iteration  10: 336214.521 ops/s
Iteration  11: 346612.019 ops/s
Iteration  12: 330932.839 ops/s
Iteration  13: 346524.338 ops/s
Iteration  14: 332459.561 ops/s
Iteration  15: 327160.436 ops/s
Iteration  16: 352882.482 ops/s
Iteration  17: 337866.990 ops/s
Iteration  18: 354187.314 ops/s
Iteration  19: 337716.223 ops/s
Iteration  20: 338252.159 ops/s
Iteration  21: 351953.672 ops/s
Iteration  22: 342079.759 ops/s
Iteration  23: 351902.930 ops/s
Iteration  24: 338400.254 ops/s
Iteration  25: 350538.091 ops/s
Iteration  26: 331152.427 ops/s
Iteration  27: 335848.191 ops/s
Iteration  28: 339845.632 ops/s
Iteration  29: 346678.779 ops/s
Iteration  30: 331240.768 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuterObservable":
  341064.243 ±(99.9%) 5410.938 ops/s [Average]
  (min, avg, max) = (327160.436, 341064.243, 354187.314), stdev = 8098.838
  CI (99.9%): [335653.305, 346475.182] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score      Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_normalNonDelayErrorOuterObservable  thrpt   30  341064.243 ± 5410.938  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_delayErrorIterableCancelAfterHasNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_delayErrorIterableCancelAfterHasNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1221626.499 ops/s
# Warmup Iteration   2: 3507684.590 ops/s
# Warmup Iteration   3: 4272378.423 ops/s
# Warmup Iteration   4: 4292886.440 ops/s
# Warmup Iteration   5: 4365907.920 ops/s
# Warmup Iteration   6: 4392121.778 ops/s
# Warmup Iteration   7: 4174519.542 ops/s
# Warmup Iteration   8: 4184564.124 ops/s
# Warmup Iteration   9: 4399308.874 ops/s
# Warmup Iteration  10: 4319326.211 ops/s
# Warmup Iteration  11: 4050880.038 ops/s
# Warmup Iteration  12: 4262276.879 ops/s
# Warmup Iteration  13: 4234608.861 ops/s
# Warmup Iteration  14: 4144569.261 ops/s
# Warmup Iteration  15: 4388082.990 ops/s
# Warmup Iteration  16: 4141839.887 ops/s
# Warmup Iteration  17: 4443142.913 ops/s
# Warmup Iteration  18: 4244432.053 ops/s
# Warmup Iteration  19: 4380703.588 ops/s
# Warmup Iteration  20: 4197153.733 ops/s
# Warmup Iteration  21: 4400291.598 ops/s
# Warmup Iteration  22: 4395401.224 ops/s
# Warmup Iteration  23: 4167029.563 ops/s
# Warmup Iteration  24: 4362479.086 ops/s
# Warmup Iteration  25: 4171133.858 ops/s
# Warmup Iteration  26: 4291612.285 ops/s
# Warmup Iteration  27: 4318579.992 ops/s
# Warmup Iteration  28: 4155989.020 ops/s
# Warmup Iteration  29: 4335151.418 ops/s
# Warmup Iteration  30: 4225186.041 ops/s
Iteration   1: 4174156.287 ops/s
Iteration   2: 4103874.671 ops/s
Iteration   3: 4284205.866 ops/s
Iteration   4: 4180408.498 ops/s
Iteration   5: 4249909.588 ops/s
Iteration   6: 4242393.048 ops/s
Iteration   7: 4333841.063 ops/s
Iteration   8: 4290680.831 ops/s
Iteration   9: 4406784.722 ops/s
Iteration  10: 4363372.899 ops/s
Iteration  11: 4432659.376 ops/s
Iteration  12: 4133770.105 ops/s
Iteration  13: 4436760.078 ops/s
Iteration  14: 4268194.000 ops/s
Iteration  15: 4140490.897 ops/s
Iteration  16: 4283524.407 ops/s
Iteration  17: 4348114.503 ops/s
Iteration  18: 4241801.803 ops/s
Iteration  19: 4275671.065 ops/s
Iteration  20: 4252415.013 ops/s
Iteration  21: 4322696.253 ops/s
Iteration  22: 4231088.876 ops/s
Iteration  23: 4282510.442 ops/s
Iteration  24: 4319941.223 ops/s
Iteration  25: 4238968.750 ops/s
Iteration  26: 4367631.925 ops/s
Iteration  27: 4207693.230 ops/s
Iteration  28: 4183943.626 ops/s
Iteration  29: 4396458.771 ops/s
Iteration  30: 4100675.349 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_delayErrorIterableCancelAfterHasNext":
  4269821.239 ±(99.9%) 61848.665 ops/s [Average]
  (min, avg, max) = (4100675.349, 4269821.239, 4436760.078), stdev = 92572.177
  CI (99.9%): [4207972.574, 4331669.904] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_delayErrorIterableCancelAfterHasNext  thrpt   30  4269821.239 ± 61848.665  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_mainDoubleOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_mainDoubleOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16163.683 ops/s
# Warmup Iteration   2: 67791.882 ops/s
# Warmup Iteration   3: 154518.795 ops/s
# Warmup Iteration   4: 144382.199 ops/s
# Warmup Iteration   5: 152671.474 ops/s
# Warmup Iteration   6: 165651.841 ops/s
# Warmup Iteration   7: 153996.359 ops/s
# Warmup Iteration   8: 160213.237 ops/s
# Warmup Iteration   9: 155533.859 ops/s
# Warmup Iteration  10: 152298.258 ops/s
# Warmup Iteration  11: 157397.543 ops/s
# Warmup Iteration  12: 156259.017 ops/s
# Warmup Iteration  13: 162312.966 ops/s
# Warmup Iteration  14: 161838.399 ops/s
# Warmup Iteration  15: 157185.742 ops/s
# Warmup Iteration  16: 161001.868 ops/s
# Warmup Iteration  17: 161019.670 ops/s
# Warmup Iteration  18: 161204.427 ops/s
# Warmup Iteration  19: 162376.538 ops/s
# Warmup Iteration  20: 163606.409 ops/s
# Warmup Iteration  21: 171414.495 ops/s
# Warmup Iteration  22: 155852.031 ops/s
# Warmup Iteration  23: 160946.702 ops/s
# Warmup Iteration  24: 165024.329 ops/s
# Warmup Iteration  25: 163720.165 ops/s
# Warmup Iteration  26: 165242.493 ops/s
# Warmup Iteration  27: 172025.244 ops/s
# Warmup Iteration  28: 157458.681 ops/s
# Warmup Iteration  29: 165012.213 ops/s
# Warmup Iteration  30: 166092.067 ops/s
Iteration   1: 169694.107 ops/s
Iteration   2: 160278.894 ops/s
Iteration   3: 165970.169 ops/s
Iteration   4: 166410.992 ops/s
Iteration   5: 161253.239 ops/s
Iteration   6: 166397.667 ops/s
Iteration   7: 166072.840 ops/s
Iteration   8: 167373.727 ops/s
Iteration   9: 160681.577 ops/s
Iteration  10: 165940.204 ops/s
Iteration  11: 166499.007 ops/s
Iteration  12: 165894.288 ops/s
Iteration  13: 167236.885 ops/s
Iteration  14: 161958.478 ops/s
Iteration  15: 164062.367 ops/s
Iteration  16: 164810.022 ops/s
Iteration  17: 164435.744 ops/s
Iteration  18: 166443.749 ops/s
Iteration  19: 163500.900 ops/s
Iteration  20: 165427.982 ops/s
Iteration  21: 162879.388 ops/s
Iteration  22: 171502.415 ops/s
Iteration  23: 156980.475 ops/s
Iteration  24: 163672.211 ops/s
Iteration  25: 163726.677 ops/s
Iteration  26: 140064.325 ops/s
Iteration  27: 170481.598 ops/s
Iteration  28: 162206.451 ops/s
Iteration  29: 162929.960 ops/s
Iteration  30: 170637.424 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_mainDoubleOnError":
  164180.792 ±(99.9%) 3727.466 ops/s [Average]
  (min, avg, max) = (140064.325, 164180.792, 171502.415), stdev = 5579.097
  CI (99.9%): [160453.326, 167908.258] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
CompletableMergeTest._Benchmark.benchmark_mainDoubleOnError  thrpt   30  164180.792 ± 3727.466  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65697.469 ops/s
# Warmup Iteration   2: 228493.423 ops/s
# Warmup Iteration   3: 562631.322 ops/s
# Warmup Iteration   4: 543121.248 ops/s
# Warmup Iteration   5: 562173.713 ops/s
# Warmup Iteration   6: 579137.042 ops/s
# Warmup Iteration   7: 634165.390 ops/s
# Warmup Iteration   8: 604650.644 ops/s
# Warmup Iteration   9: 605667.489 ops/s
# Warmup Iteration  10: 625433.854 ops/s
# Warmup Iteration  11: 604622.747 ops/s
# Warmup Iteration  12: 599727.154 ops/s
# Warmup Iteration  13: 627844.891 ops/s
# Warmup Iteration  14: 610782.012 ops/s
# Warmup Iteration  15: 626822.539 ops/s
# Warmup Iteration  16: 604986.945 ops/s
# Warmup Iteration  17: 635258.048 ops/s
# Warmup Iteration  18: 644637.763 ops/s
# Warmup Iteration  19: 625299.022 ops/s
# Warmup Iteration  20: 641081.653 ops/s
# Warmup Iteration  21: 609578.224 ops/s
# Warmup Iteration  22: 634556.385 ops/s
# Warmup Iteration  23: 638920.545 ops/s
# Warmup Iteration  24: 632901.593 ops/s
# Warmup Iteration  25: 643977.256 ops/s
# Warmup Iteration  26: 643202.648 ops/s
# Warmup Iteration  27: 665963.833 ops/s
# Warmup Iteration  28: 653349.920 ops/s
# Warmup Iteration  29: 651221.216 ops/s
# Warmup Iteration  30: 654185.638 ops/s
Iteration   1: 661969.403 ops/s
Iteration   2: 625909.936 ops/s
Iteration   3: 653025.554 ops/s
Iteration   4: 634339.112 ops/s
Iteration   5: 657295.494 ops/s
Iteration   6: 639453.206 ops/s
Iteration   7: 655131.189 ops/s
Iteration   8: 665409.508 ops/s
Iteration   9: 617585.522 ops/s
Iteration  10: 667239.918 ops/s
Iteration  11: 628294.598 ops/s
Iteration  12: 648665.704 ops/s
Iteration  13: 637277.531 ops/s
Iteration  14: 648790.958 ops/s
Iteration  15: 657136.958 ops/s
Iteration  16: 638355.984 ops/s
Iteration  17: 652765.435 ops/s
Iteration  18: 615655.431 ops/s
Iteration  19: 642157.018 ops/s
Iteration  20: 646777.939 ops/s
Iteration  21: 615901.101 ops/s
Iteration  22: 654685.037 ops/s
Iteration  23: 612965.181 ops/s
Iteration  24: 631782.051 ops/s
Iteration  25: 657299.703 ops/s
Iteration  26: 618382.422 ops/s
Iteration  27: 651951.719 ops/s
Iteration  28: 618712.020 ops/s
Iteration  29: 662877.363 ops/s
Iteration  30: 627794.144 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull":
  641519.571 ±(99.9%) 11276.494 ops/s [Average]
  (min, avg, max) = (612965.181, 641519.571, 667239.918), stdev = 16878.127
  CI (99.9%): [630243.077, 652796.066] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull  thrpt   30  641519.571 ± 11276.494  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribeCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribeCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 125542.917 ops/s
# Warmup Iteration   2: 390579.084 ops/s
# Warmup Iteration   3: 514923.186 ops/s
# Warmup Iteration   4: 492988.474 ops/s
# Warmup Iteration   5: 505322.383 ops/s
# Warmup Iteration   6: 490724.241 ops/s
# Warmup Iteration   7: 516844.191 ops/s
# Warmup Iteration   8: 513872.841 ops/s
# Warmup Iteration   9: 508378.619 ops/s
# Warmup Iteration  10: 491830.327 ops/s
# Warmup Iteration  11: 512460.948 ops/s
# Warmup Iteration  12: 517833.359 ops/s
# Warmup Iteration  13: 499758.866 ops/s
# Warmup Iteration  14: 500404.617 ops/s
# Warmup Iteration  15: 503081.861 ops/s
# Warmup Iteration  16: 497500.081 ops/s
# Warmup Iteration  17: 528794.835 ops/s
# Warmup Iteration  18: 512610.038 ops/s
# Warmup Iteration  19: 531215.390 ops/s
# Warmup Iteration  20: 522357.665 ops/s
# Warmup Iteration  21: 532703.833 ops/s
# Warmup Iteration  22: 499223.898 ops/s
# Warmup Iteration  23: 542206.168 ops/s
# Warmup Iteration  24: 532677.962 ops/s
# Warmup Iteration  25: 519575.118 ops/s
# Warmup Iteration  26: 517948.535 ops/s
# Warmup Iteration  27: 533107.047 ops/s
# Warmup Iteration  28: 515849.816 ops/s
# Warmup Iteration  29: 514158.126 ops/s
# Warmup Iteration  30: 533880.684 ops/s
Iteration   1: 513414.734 ops/s
Iteration   2: 535504.857 ops/s
Iteration   3: 525939.185 ops/s
Iteration   4: 531104.786 ops/s
Iteration   5: 528471.648 ops/s
Iteration   6: 511107.167 ops/s
Iteration   7: 524621.554 ops/s
Iteration   8: 517969.581 ops/s
Iteration   9: 554798.551 ops/s
Iteration  10: 516687.290 ops/s
Iteration  11: 545268.686 ops/s
Iteration  12: 518556.261 ops/s
Iteration  13: 508660.382 ops/s
Iteration  14: 533049.533 ops/s
Iteration  15: 522364.838 ops/s
Iteration  16: 528700.002 ops/s
Iteration  17: 553818.759 ops/s
Iteration  18: 524313.251 ops/s
Iteration  19: 530165.696 ops/s
Iteration  20: 538277.382 ops/s
Iteration  21: 466764.934 ops/s
Iteration  22: 500476.565 ops/s
Iteration  23: 526055.431 ops/s
Iteration  24: 541714.316 ops/s
Iteration  25: 522450.507 ops/s
Iteration  26: 546495.086 ops/s
Iteration  27: 540647.000 ops/s
Iteration  28: 520179.250 ops/s
Iteration  29: 520020.319 ops/s
Iteration  30: 544509.706 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribeCompletable":
  526403.575 ±(99.9%) 11564.913 ops/s [Average]
  (min, avg, max) = (466764.934, 526403.575, 554798.551), stdev = 17309.818
  CI (99.9%): [514838.663, 537968.488] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribeCompletable  thrpt   30  526403.575 ± 11564.913  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_noUnsubscribeAndNoLeak$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_noUnsubscribeAndNoLeak

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 37782.297 ops/s
# Warmup Iteration   2: 219773.753 ops/s
# Warmup Iteration   3: 333921.707 ops/s
# Warmup Iteration   4: 639482.812 ops/s
# Warmup Iteration   5: 798045.666 ops/s
# Warmup Iteration   6: 804375.011 ops/s
# Warmup Iteration   7: 792667.360 ops/s
# Warmup Iteration   8: 794014.124 ops/s
# Warmup Iteration   9: 818245.872 ops/s
# Warmup Iteration  10: 772009.010 ops/s
# Warmup Iteration  11: 782763.739 ops/s
# Warmup Iteration  12: 783230.607 ops/s
# Warmup Iteration  13: 835800.139 ops/s
# Warmup Iteration  14: 752773.771 ops/s
# Warmup Iteration  15: 816172.760 ops/s
# Warmup Iteration  16: 818316.076 ops/s
# Warmup Iteration  17: 783564.648 ops/s
# Warmup Iteration  18: 810767.849 ops/s
# Warmup Iteration  19: 795843.737 ops/s
# Warmup Iteration  20: 790589.062 ops/s
# Warmup Iteration  21: 779239.347 ops/s
# Warmup Iteration  22: 777369.147 ops/s
# Warmup Iteration  23: 828531.373 ops/s
# Warmup Iteration  24: 804228.732 ops/s
# Warmup Iteration  25: 765222.154 ops/s
# Warmup Iteration  26: 789772.434 ops/s
# Warmup Iteration  27: 813890.165 ops/s
# Warmup Iteration  28: 765232.647 ops/s
# Warmup Iteration  29: 805425.208 ops/s
# Warmup Iteration  30: 766353.241 ops/s
Iteration   1: 786433.917 ops/s
Iteration   2: 781677.532 ops/s
Iteration   3: 771664.667 ops/s
Iteration   4: 790301.235 ops/s
Iteration   5: 763360.046 ops/s
Iteration   6: 793819.986 ops/s
Iteration   7: 756434.973 ops/s
Iteration   8: 784822.028 ops/s
Iteration   9: 794090.034 ops/s
Iteration  10: 787762.186 ops/s
Iteration  11: 801024.035 ops/s
Iteration  12: 780697.868 ops/s
Iteration  13: 825412.813 ops/s
Iteration  14: 761173.295 ops/s
Iteration  15: 793095.386 ops/s
Iteration  16: 784910.748 ops/s
Iteration  17: 781622.698 ops/s
Iteration  18: 806518.568 ops/s
Iteration  19: 778757.201 ops/s
Iteration  20: 777937.187 ops/s
Iteration  21: 811155.999 ops/s
Iteration  22: 775962.131 ops/s
Iteration  23: 791384.019 ops/s
Iteration  24: 817197.493 ops/s
Iteration  25: 783605.292 ops/s
Iteration  26: 784985.732 ops/s
Iteration  27: 803378.152 ops/s
Iteration  28: 825109.929 ops/s
Iteration  29: 732272.392 ops/s
Iteration  30: 807629.719 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_noUnsubscribeAndNoLeak":
  787806.575 ±(99.9%) 13376.166 ops/s [Average]
  (min, avg, max) = (732272.392, 787806.575, 825412.813), stdev = 20020.817
  CI (99.9%): [774430.410, 801182.741] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score       Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_noUnsubscribeAndNoLeak  thrpt   30  787806.575 ± 13376.166  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31168.057 ops/s
# Warmup Iteration   2: 161426.100 ops/s
# Warmup Iteration   3: 180245.624 ops/s
# Warmup Iteration   4: 205255.740 ops/s
# Warmup Iteration   5: 201201.630 ops/s
# Warmup Iteration   6: 205591.885 ops/s
# Warmup Iteration   7: 211073.851 ops/s
# Warmup Iteration   8: 222295.405 ops/s
# Warmup Iteration   9: 209072.184 ops/s
# Warmup Iteration  10: 207943.571 ops/s
# Warmup Iteration  11: 214730.109 ops/s
# Warmup Iteration  12: 217902.412 ops/s
# Warmup Iteration  13: 209890.764 ops/s
# Warmup Iteration  14: 213244.120 ops/s
# Warmup Iteration  15: 208979.881 ops/s
# Warmup Iteration  16: 211859.481 ops/s
# Warmup Iteration  17: 227883.130 ops/s
# Warmup Iteration  18: 211850.930 ops/s
# Warmup Iteration  19: 227257.624 ops/s
# Warmup Iteration  20: 222153.275 ops/s
# Warmup Iteration  21: 217355.671 ops/s
# Warmup Iteration  22: 223226.938 ops/s
# Warmup Iteration  23: 212309.371 ops/s
# Warmup Iteration  24: 216866.545 ops/s
# Warmup Iteration  25: 230563.024 ops/s
# Warmup Iteration  26: 206769.163 ops/s
# Warmup Iteration  27: 221681.762 ops/s
# Warmup Iteration  28: 212227.926 ops/s
# Warmup Iteration  29: 213956.447 ops/s
# Warmup Iteration  30: 218956.015 ops/s
Iteration   1: 210452.702 ops/s
Iteration   2: 217178.971 ops/s
Iteration   3: 212817.241 ops/s
Iteration   4: 214680.715 ops/s
Iteration   5: 222205.431 ops/s
Iteration   6: 218182.124 ops/s
Iteration   7: 220988.905 ops/s
Iteration   8: 216776.535 ops/s
Iteration   9: 224114.921 ops/s
Iteration  10: 217416.360 ops/s
Iteration  11: 215158.497 ops/s
Iteration  12: 225468.808 ops/s
Iteration  13: 213132.554 ops/s
Iteration  14: 226098.590 ops/s
Iteration  15: 178623.649 ops/s
Iteration  16: 224776.420 ops/s
Iteration  17: 223772.026 ops/s
Iteration  18: 214021.500 ops/s
Iteration  19: 221695.730 ops/s
Iteration  20: 214808.219 ops/s
Iteration  21: 229379.475 ops/s
Iteration  22: 220023.172 ops/s
Iteration  23: 219795.913 ops/s
Iteration  24: 216630.407 ops/s
Iteration  25: 218815.923 ops/s
Iteration  26: 226681.913 ops/s
Iteration  27: 211260.531 ops/s
Iteration  28: 216912.027 ops/s
Iteration  29: 219154.210 ops/s
Iteration  30: 213904.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd":
  217497.604 ±(99.9%) 5892.527 ops/s [Average]
  (min, avg, max) = (178623.649, 217497.604, 229379.475), stdev = 8819.658
  CI (99.9%): [211605.076, 223390.131] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd  thrpt   30  217497.604 ± 5892.527  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeOverlapping$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeOverlapping

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11428.884 ops/s
# Warmup Iteration   2: 73275.756 ops/s
# Warmup Iteration   3: 209302.022 ops/s
# Warmup Iteration   4: 287785.142 ops/s
# Warmup Iteration   5: 329397.489 ops/s
# Warmup Iteration   6: 319211.825 ops/s
# Warmup Iteration   7: 283604.092 ops/s
# Warmup Iteration   8: 304919.674 ops/s
# Warmup Iteration   9: 319943.238 ops/s
# Warmup Iteration  10: 319131.705 ops/s
# Warmup Iteration  11: 327030.701 ops/s
# Warmup Iteration  12: 330218.196 ops/s
# Warmup Iteration  13: 313013.297 ops/s
# Warmup Iteration  14: 304388.396 ops/s
# Warmup Iteration  15: 334599.851 ops/s
# Warmup Iteration  16: 319458.691 ops/s
# Warmup Iteration  17: 320808.464 ops/s
# Warmup Iteration  18: 318604.120 ops/s
# Warmup Iteration  19: 318756.920 ops/s
# Warmup Iteration  20: 322774.637 ops/s
# Warmup Iteration  21: 316591.429 ops/s
# Warmup Iteration  22: 331358.942 ops/s
# Warmup Iteration  23: 312872.976 ops/s
# Warmup Iteration  24: 328435.651 ops/s
# Warmup Iteration  25: 329564.261 ops/s
# Warmup Iteration  26: 309927.254 ops/s
# Warmup Iteration  27: 325759.767 ops/s
# Warmup Iteration  28: 315316.024 ops/s
# Warmup Iteration  29: 332683.801 ops/s
# Warmup Iteration  30: 316019.928 ops/s
Iteration   1: 321091.959 ops/s
Iteration   2: 326254.861 ops/s
Iteration   3: 318538.979 ops/s
Iteration   4: 325042.235 ops/s
Iteration   5: 315740.137 ops/s
Iteration   6: 329470.503 ops/s
Iteration   7: 320080.989 ops/s
Iteration   8: 318516.155 ops/s
Iteration   9: 329411.019 ops/s
Iteration  10: 320573.272 ops/s
Iteration  11: 324886.160 ops/s
Iteration  12: 312948.419 ops/s
Iteration  13: 327131.634 ops/s
Iteration  14: 325778.323 ops/s
Iteration  15: 317611.939 ops/s
Iteration  16: 302409.120 ops/s
Iteration  17: 331062.167 ops/s
Iteration  18: 313367.494 ops/s
Iteration  19: 314129.039 ops/s
Iteration  20: 327826.535 ops/s
Iteration  21: 323164.242 ops/s
Iteration  22: 329768.379 ops/s
Iteration  23: 326325.741 ops/s
Iteration  24: 321228.299 ops/s
Iteration  25: 331036.541 ops/s
Iteration  26: 306576.364 ops/s
Iteration  27: 323094.877 ops/s
Iteration  28: 326998.372 ops/s
Iteration  29: 314674.636 ops/s
Iteration  30: 330533.280 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeOverlapping":
  321842.389 ±(99.9%) 4879.543 ops/s [Average]
  (min, avg, max) = (302409.120, 321842.389, 331062.167), stdev = 7303.471
  CI (99.9%): [316962.846, 326721.932] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_windowUnsubscribeOverlapping  thrpt   30  321842.389 ± 4879.543  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_nearMaxValueWithBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_nearMaxValueWithBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 439047.021 ops/s
# Warmup Iteration   2: 3095432.281 ops/s
# Warmup Iteration   3: 4268316.737 ops/s
# Warmup Iteration   4: 3767959.101 ops/s
# Warmup Iteration   5: 3953964.071 ops/s
# Warmup Iteration   6: 4333377.144 ops/s
# Warmup Iteration   7: 4099696.781 ops/s
# Warmup Iteration   8: 4247317.436 ops/s
# Warmup Iteration   9: 4317511.215 ops/s
# Warmup Iteration  10: 4109301.769 ops/s
# Warmup Iteration  11: 4133396.579 ops/s
# Warmup Iteration  12: 4355957.965 ops/s
# Warmup Iteration  13: 4118604.735 ops/s
# Warmup Iteration  14: 4377439.000 ops/s
# Warmup Iteration  15: 4088495.088 ops/s
# Warmup Iteration  16: 4329467.261 ops/s
# Warmup Iteration  17: 4046667.125 ops/s
# Warmup Iteration  18: 4110725.761 ops/s
# Warmup Iteration  19: 4314329.075 ops/s
# Warmup Iteration  20: 4179374.257 ops/s
# Warmup Iteration  21: 4362735.587 ops/s
# Warmup Iteration  22: 4027432.373 ops/s
# Warmup Iteration  23: 4324424.364 ops/s
# Warmup Iteration  24: 4194477.403 ops/s
# Warmup Iteration  25: 4044236.055 ops/s
# Warmup Iteration  26: 4322135.327 ops/s
# Warmup Iteration  27: 4155769.202 ops/s
# Warmup Iteration  28: 4254016.278 ops/s
# Warmup Iteration  29: 4179972.296 ops/s
# Warmup Iteration  30: 4206115.882 ops/s
Iteration   1: 4225361.470 ops/s
Iteration   2: 4254268.253 ops/s
Iteration   3: 4188728.541 ops/s
Iteration   4: 4071067.105 ops/s
Iteration   5: 4316139.916 ops/s
Iteration   6: 4139641.261 ops/s
Iteration   7: 4188584.249 ops/s
Iteration   8: 4134306.803 ops/s
Iteration   9: 4242074.947 ops/s
Iteration  10: 3313225.001 ops/s
Iteration  11: 4379263.126 ops/s
Iteration  12: 4298451.490 ops/s
Iteration  13: 4115938.846 ops/s
Iteration  14: 4253702.721 ops/s
Iteration  15: 4264473.795 ops/s
Iteration  16: 4115140.787 ops/s
Iteration  17: 4299422.513 ops/s
Iteration  18: 4383522.444 ops/s
Iteration  19: 4101259.942 ops/s
Iteration  20: 4290555.348 ops/s
Iteration  21: 4021665.870 ops/s
Iteration  22: 4394212.637 ops/s
Iteration  23: 4256415.009 ops/s
Iteration  24: 4189452.404 ops/s
Iteration  25: 4115852.323 ops/s
Iteration  26: 4387233.338 ops/s
Iteration  27: 4165249.452 ops/s
Iteration  28: 4219982.738 ops/s
Iteration  29: 4343720.334 ops/s
Iteration  30: 4112284.610 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_nearMaxValueWithBackpressure":
  4192706.576 ±(99.9%) 130003.863 ops/s [Average]
  (min, avg, max) = (3313225.001, 4192706.576, 4394212.637), stdev = 194583.677
  CI (99.9%): [4062702.712, 4322710.439] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
FlowableRangeTest._Benchmark.benchmark_nearMaxValueWithBackpressure  thrpt   30  4192706.576 ± 130003.863  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromPubisherTest._Benchmark.benchmark_range$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromPubisherTest._Benchmark.benchmark_range

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 897395.032 ops/s
# Warmup Iteration   2: 3747607.490 ops/s
# Warmup Iteration   3: 3850814.512 ops/s
# Warmup Iteration   4: 4669569.204 ops/s
# Warmup Iteration   5: 4897649.038 ops/s
# Warmup Iteration   6: 4675175.736 ops/s
# Warmup Iteration   7: 4594644.457 ops/s
# Warmup Iteration   8: 4697135.333 ops/s
# Warmup Iteration   9: 4844105.545 ops/s
# Warmup Iteration  10: 4558157.877 ops/s
# Warmup Iteration  11: 4704227.730 ops/s
# Warmup Iteration  12: 4658485.381 ops/s
# Warmup Iteration  13: 4695855.445 ops/s
# Warmup Iteration  14: 4759064.498 ops/s
# Warmup Iteration  15: 4626855.921 ops/s
# Warmup Iteration  16: 4797854.425 ops/s
# Warmup Iteration  17: 4695552.583 ops/s
# Warmup Iteration  18: 4510536.645 ops/s
# Warmup Iteration  19: 4848966.730 ops/s
# Warmup Iteration  20: 4681217.895 ops/s
# Warmup Iteration  21: 4688738.506 ops/s
# Warmup Iteration  22: 4679238.582 ops/s
# Warmup Iteration  23: 4703740.911 ops/s
# Warmup Iteration  24: 4713697.403 ops/s
# Warmup Iteration  25: 4490024.919 ops/s
# Warmup Iteration  26: 4740233.441 ops/s
# Warmup Iteration  27: 4711211.592 ops/s
# Warmup Iteration  28: 4630793.969 ops/s
# Warmup Iteration  29: 4850559.503 ops/s
# Warmup Iteration  30: 4562886.068 ops/s
Iteration   1: 4789254.071 ops/s
Iteration   2: 4514177.451 ops/s
Iteration   3: 4742978.697 ops/s
Iteration   4: 4848722.458 ops/s
Iteration   5: 4603326.116 ops/s
Iteration   6: 4806582.227 ops/s
Iteration   7: 4623583.783 ops/s
Iteration   8: 4662957.046 ops/s
Iteration   9: 4867406.684 ops/s
Iteration  10: 4623226.983 ops/s
Iteration  11: 4889949.371 ops/s
Iteration  12: 4832303.647 ops/s
Iteration  13: 4582402.167 ops/s
Iteration  14: 4743912.536 ops/s
Iteration  15: 4731481.141 ops/s
Iteration  16: 4558197.254 ops/s
Iteration  17: 4875456.795 ops/s
Iteration  18: 4710867.242 ops/s
Iteration  19: 4553147.361 ops/s
Iteration  20: 4743015.327 ops/s
Iteration  21: 4674257.507 ops/s
Iteration  22: 4687964.476 ops/s
Iteration  23: 4601358.438 ops/s
Iteration  24: 4828264.625 ops/s
Iteration  25: 4519685.273 ops/s
Iteration  26: 4878258.420 ops/s
Iteration  27: 4706689.228 ops/s
Iteration  28: 4512668.414 ops/s
Iteration  29: 4626633.077 ops/s
Iteration  30: 4705816.902 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromPubisherTest._Benchmark.benchmark_range":
  4701484.824 ±(99.9%) 78937.832 ops/s [Average]
  (min, avg, max) = (4512668.414, 4701484.824, 4889949.371), stdev = 118150.440
  CI (99.9%): [4622546.992, 4780422.656] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
MaybeFromPubisherTest._Benchmark.benchmark_range  thrpt   30  4701484.824 ± 78937.832  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87025.738 ops/s
# Warmup Iteration   2: 288915.714 ops/s
# Warmup Iteration   3: 758015.705 ops/s
# Warmup Iteration   4: 779467.304 ops/s
# Warmup Iteration   5: 966095.343 ops/s
# Warmup Iteration   6: 886752.453 ops/s
# Warmup Iteration   7: 897410.308 ops/s
# Warmup Iteration   8: 946518.355 ops/s
# Warmup Iteration   9: 964090.484 ops/s
# Warmup Iteration  10: 915031.072 ops/s
# Warmup Iteration  11: 930617.873 ops/s
# Warmup Iteration  12: 914081.187 ops/s
# Warmup Iteration  13: 936810.745 ops/s
# Warmup Iteration  14: 959116.909 ops/s
# Warmup Iteration  15: 882618.004 ops/s
# Warmup Iteration  16: 956059.645 ops/s
# Warmup Iteration  17: 921625.952 ops/s
# Warmup Iteration  18: 956244.355 ops/s
# Warmup Iteration  19: 913679.195 ops/s
# Warmup Iteration  20: 909930.765 ops/s
# Warmup Iteration  21: 931256.146 ops/s
# Warmup Iteration  22: 924519.914 ops/s
# Warmup Iteration  23: 916008.396 ops/s
# Warmup Iteration  24: 963584.782 ops/s
# Warmup Iteration  25: 920625.702 ops/s
# Warmup Iteration  26: 921610.998 ops/s
# Warmup Iteration  27: 916608.880 ops/s
# Warmup Iteration  28: 916202.709 ops/s
# Warmup Iteration  29: 966642.062 ops/s
# Warmup Iteration  30: 932086.790 ops/s
Iteration   1: 963113.616 ops/s
Iteration   2: 917425.681 ops/s
Iteration   3: 968134.643 ops/s
Iteration   4: 745070.034 ops/s
Iteration   5: 838214.714 ops/s
Iteration   6: 963306.333 ops/s
Iteration   7: 925936.918 ops/s
Iteration   8: 944976.227 ops/s
Iteration   9: 922007.012 ops/s
Iteration  10: 943457.011 ops/s
Iteration  11: 925372.095 ops/s
Iteration  12: 945963.997 ops/s
Iteration  13: 932037.739 ops/s
Iteration  14: 890816.097 ops/s
Iteration  15: 953185.247 ops/s
Iteration  16: 890846.876 ops/s
Iteration  17: 971918.562 ops/s
Iteration  18: 899212.547 ops/s
Iteration  19: 905581.547 ops/s
Iteration  20: 903797.318 ops/s
Iteration  21: 975313.386 ops/s
Iteration  22: 921602.312 ops/s
Iteration  23: 944257.367 ops/s
Iteration  24: 926623.512 ops/s
Iteration  25: 948961.047 ops/s
Iteration  26: 994820.791 ops/s
Iteration  27: 922564.904 ops/s
Iteration  28: 943447.119 ops/s
Iteration  29: 925947.450 ops/s
Iteration  30: 951054.832 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSkip":
  926832.231 ±(99.9%) 30916.038 ops/s [Average]
  (min, avg, max) = (745070.034, 926832.231, 994820.791), stdev = 46273.674
  CI (99.9%): [895916.193, 957748.269] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamSkip  thrpt   30  926832.231 ± 30916.038  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mapperCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mapperCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1087557.158 ops/s
# Warmup Iteration   2: 3875000.172 ops/s
# Warmup Iteration   3: 4412459.165 ops/s
# Warmup Iteration   4: 4910512.442 ops/s
# Warmup Iteration   5: 5017724.262 ops/s
# Warmup Iteration   6: 4873062.726 ops/s
# Warmup Iteration   7: 5017677.262 ops/s
# Warmup Iteration   8: 4861512.594 ops/s
# Warmup Iteration   9: 5022019.808 ops/s
# Warmup Iteration  10: 5007618.467 ops/s
# Warmup Iteration  11: 4877257.831 ops/s
# Warmup Iteration  12: 5001375.183 ops/s
# Warmup Iteration  13: 4833961.958 ops/s
# Warmup Iteration  14: 5084208.671 ops/s
# Warmup Iteration  15: 4987169.503 ops/s
# Warmup Iteration  16: 5064088.495 ops/s
# Warmup Iteration  17: 4936691.252 ops/s
# Warmup Iteration  18: 4868185.391 ops/s
# Warmup Iteration  19: 5129323.630 ops/s
# Warmup Iteration  20: 4873042.273 ops/s
# Warmup Iteration  21: 5097223.915 ops/s
# Warmup Iteration  22: 4965827.777 ops/s
# Warmup Iteration  23: 4877230.745 ops/s
# Warmup Iteration  24: 4969216.439 ops/s
# Warmup Iteration  25: 4890088.928 ops/s
# Warmup Iteration  26: 4933869.612 ops/s
# Warmup Iteration  27: 5142370.740 ops/s
# Warmup Iteration  28: 4870745.182 ops/s
# Warmup Iteration  29: 5092457.351 ops/s
# Warmup Iteration  30: 4848972.107 ops/s
Iteration   1: 5056688.954 ops/s
Iteration   2: 5194737.338 ops/s
Iteration   3: 4904027.473 ops/s
Iteration   4: 4912861.881 ops/s
Iteration   5: 4803180.052 ops/s
Iteration   6: 5084459.076 ops/s
Iteration   7: 5031698.260 ops/s
Iteration   8: 4903417.354 ops/s
Iteration   9: 5017593.176 ops/s
Iteration  10: 4975146.379 ops/s
Iteration  11: 5116841.730 ops/s
Iteration  12: 4779673.009 ops/s
Iteration  13: 4947114.601 ops/s
Iteration  14: 4950012.326 ops/s
Iteration  15: 4921762.882 ops/s
Iteration  16: 4991406.091 ops/s
Iteration  17: 4839174.907 ops/s
Iteration  18: 5061253.790 ops/s
Iteration  19: 4981426.752 ops/s
Iteration  20: 4918925.060 ops/s
Iteration  21: 5212508.616 ops/s
Iteration  22: 4842401.314 ops/s
Iteration  23: 4962276.326 ops/s
Iteration  24: 5146347.331 ops/s
Iteration  25: 5102613.721 ops/s
Iteration  26: 4891845.691 ops/s
Iteration  27: 5058422.260 ops/s
Iteration  28: 5042770.116 ops/s
Iteration  29: 4933697.186 ops/s
Iteration  30: 5019270.317 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletableTest._Benchmark.benchmark_mapperCancels":
  4986785.132 ±(99.9%) 72885.544 ops/s [Average]
  (min, avg, max) = (4779673.009, 4986785.132, 5212508.616), stdev = 109091.659
  CI (99.9%): [4913899.588, 5059670.676] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableSwitchMapCompletableTest._Benchmark.benchmark_mapperCancels  thrpt   30  4986785.132 ± 72885.544  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_clearIsEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_clearIsEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3619799.635 ops/s
# Warmup Iteration   2: 6605824.759 ops/s
# Warmup Iteration   3: 7267761.987 ops/s
# Warmup Iteration   4: 7936107.053 ops/s
# Warmup Iteration   5: 8501708.026 ops/s
# Warmup Iteration   6: 8231146.332 ops/s
# Warmup Iteration   7: 8087440.686 ops/s
# Warmup Iteration   8: 7999068.359 ops/s
# Warmup Iteration   9: 7888405.901 ops/s
# Warmup Iteration  10: 8368079.516 ops/s
# Warmup Iteration  11: 8107357.428 ops/s
# Warmup Iteration  12: 7930404.986 ops/s
# Warmup Iteration  13: 8386482.212 ops/s
# Warmup Iteration  14: 8163143.142 ops/s
# Warmup Iteration  15: 8033826.951 ops/s
# Warmup Iteration  16: 8325016.678 ops/s
# Warmup Iteration  17: 8018547.144 ops/s
# Warmup Iteration  18: 8273800.169 ops/s
# Warmup Iteration  19: 8456248.588 ops/s
# Warmup Iteration  20: 8189657.572 ops/s
# Warmup Iteration  21: 8549374.216 ops/s
# Warmup Iteration  22: 8010651.085 ops/s
# Warmup Iteration  23: 8393165.007 ops/s
# Warmup Iteration  24: 8163077.599 ops/s
# Warmup Iteration  25: 8101420.686 ops/s
# Warmup Iteration  26: 8480329.780 ops/s
# Warmup Iteration  27: 7943771.882 ops/s
# Warmup Iteration  28: 8059457.006 ops/s
# Warmup Iteration  29: 7325419.345 ops/s
# Warmup Iteration  30: 7811671.179 ops/s
Iteration   1: 8103554.210 ops/s
Iteration   2: 8154921.517 ops/s
Iteration   3: 8306845.615 ops/s
Iteration   4: 8177990.694 ops/s
Iteration   5: 8468395.881 ops/s
Iteration   6: 8111192.620 ops/s
Iteration   7: 8366997.421 ops/s
Iteration   8: 8226870.977 ops/s
Iteration   9: 7967868.058 ops/s
Iteration  10: 8676526.094 ops/s
Iteration  11: 8235170.819 ops/s
Iteration  12: 7826195.417 ops/s
Iteration  13: 8486673.431 ops/s
Iteration  14: 8527122.481 ops/s
Iteration  15: 7855637.559 ops/s
Iteration  16: 8242129.318 ops/s
Iteration  17: 8346243.123 ops/s
Iteration  18: 8158340.427 ops/s
Iteration  19: 8476533.769 ops/s
Iteration  20: 8151805.097 ops/s
Iteration  21: 8266556.518 ops/s
Iteration  22: 8468125.925 ops/s
Iteration  23: 8127458.651 ops/s
Iteration  24: 8348310.691 ops/s
Iteration  25: 7750309.355 ops/s
Iteration  26: 8159268.720 ops/s
Iteration  27: 8048805.585 ops/s
Iteration  28: 8198914.144 ops/s
Iteration  29: 8327384.763 ops/s
Iteration  30: 8065233.400 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_clearIsEmpty":
  8220912.743 ±(99.9%) 142364.982 ops/s [Average]
  (min, avg, max) = (7750309.355, 8220912.743, 8676526.094), stdev = 213085.219
  CI (99.9%): [8078547.761, 8363277.724] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_clearIsEmpty  thrpt   30  8220912.743 ± 142364.982  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_takeMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_takeMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 472241.322 ops/s
# Warmup Iteration   2: 2061885.581 ops/s
# Warmup Iteration   3: 2602629.757 ops/s
# Warmup Iteration   4: 3101202.530 ops/s
# Warmup Iteration   5: 3183863.552 ops/s
# Warmup Iteration   6: 3039764.402 ops/s
# Warmup Iteration   7: 3193555.767 ops/s
# Warmup Iteration   8: 3230123.270 ops/s
# Warmup Iteration   9: 3057457.461 ops/s
# Warmup Iteration  10: 3201915.959 ops/s
# Warmup Iteration  11: 3047993.295 ops/s
# Warmup Iteration  12: 3100214.188 ops/s
# Warmup Iteration  13: 3152647.613 ops/s
# Warmup Iteration  14: 3026266.447 ops/s
# Warmup Iteration  15: 3244615.888 ops/s
# Warmup Iteration  16: 3042329.973 ops/s
# Warmup Iteration  17: 3075950.554 ops/s
# Warmup Iteration  18: 3175591.977 ops/s
# Warmup Iteration  19: 3058206.360 ops/s
# Warmup Iteration  20: 3203555.721 ops/s
# Warmup Iteration  21: 3070061.609 ops/s
# Warmup Iteration  22: 3184907.024 ops/s
# Warmup Iteration  23: 3084856.286 ops/s
# Warmup Iteration  24: 3073198.026 ops/s
# Warmup Iteration  25: 3209065.608 ops/s
# Warmup Iteration  26: 3086999.916 ops/s
# Warmup Iteration  27: 3197865.303 ops/s
# Warmup Iteration  28: 3203400.946 ops/s
# Warmup Iteration  29: 3081204.671 ops/s
# Warmup Iteration  30: 3134434.533 ops/s
Iteration   1: 3124238.954 ops/s
Iteration   2: 3118307.337 ops/s
Iteration   3: 3133604.947 ops/s
Iteration   4: 3178200.663 ops/s
Iteration   5: 3166515.634 ops/s
Iteration   6: 3142834.839 ops/s
Iteration   7: 3016873.256 ops/s
Iteration   8: 3199624.649 ops/s
Iteration   9: 3011660.349 ops/s
Iteration  10: 3123276.362 ops/s
Iteration  11: 3048185.149 ops/s
Iteration  12: 3167209.614 ops/s
Iteration  13: 3208878.096 ops/s
Iteration  14: 3018796.130 ops/s
Iteration  15: 3108530.582 ops/s
Iteration  16: 3240413.212 ops/s
Iteration  17: 3062093.376 ops/s
Iteration  18: 3136550.516 ops/s
Iteration  19: 3065273.792 ops/s
Iteration  20: 3216126.654 ops/s
Iteration  21: 3090962.867 ops/s
Iteration  22: 3112065.334 ops/s
Iteration  23: 3127784.821 ops/s
Iteration  24: 3132813.558 ops/s
Iteration  25: 3207764.177 ops/s
Iteration  26: 3098209.593 ops/s
Iteration  27: 3253133.463 ops/s
Iteration  28: 3094876.735 ops/s
Iteration  29: 3146468.686 ops/s
Iteration  30: 3146928.497 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_takeMain":
  3129940.061 ±(99.9%) 42463.800 ops/s [Average]
  (min, avg, max) = (3011660.349, 3129940.061, 3253133.463), stdev = 63557.822
  CI (99.9%): [3087476.261, 3172403.862] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableConcatWithSingleTest._Benchmark.benchmark_takeMain  thrpt   30  3129940.061 ± 42463.800  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9329.615 ops/s
# Warmup Iteration   2: 26595.623 ops/s
# Warmup Iteration   3: 62210.138 ops/s
# Warmup Iteration   4: 79004.973 ops/s
# Warmup Iteration   5: 102740.961 ops/s
# Warmup Iteration   6: 103678.757 ops/s
# Warmup Iteration   7: 90883.593 ops/s
# Warmup Iteration   8: 87593.059 ops/s
# Warmup Iteration   9: 89299.655 ops/s
# Warmup Iteration  10: 106131.510 ops/s
# Warmup Iteration  11: 95885.270 ops/s
# Warmup Iteration  12: 101302.304 ops/s
# Warmup Iteration  13: 89531.519 ops/s
# Warmup Iteration  14: 103034.876 ops/s
# Warmup Iteration  15: 94174.125 ops/s
# Warmup Iteration  16: 99740.993 ops/s
# Warmup Iteration  17: 95793.472 ops/s
# Warmup Iteration  18: 102609.865 ops/s
# Warmup Iteration  19: 91889.336 ops/s
# Warmup Iteration  20: 92192.580 ops/s
# Warmup Iteration  21: 105990.328 ops/s
# Warmup Iteration  22: 94902.444 ops/s
# Warmup Iteration  23: 103301.350 ops/s
# Warmup Iteration  24: 94698.721 ops/s
# Warmup Iteration  25: 106341.763 ops/s
# Warmup Iteration  26: 103765.964 ops/s
# Warmup Iteration  27: 94226.556 ops/s
# Warmup Iteration  28: 93632.719 ops/s
# Warmup Iteration  29: 104015.039 ops/s
# Warmup Iteration  30: 106355.965 ops/s
Iteration   1: 104971.386 ops/s
Iteration   2: 101509.291 ops/s
Iteration   3: 106079.774 ops/s
Iteration   4: 97038.512 ops/s
Iteration   5: 100823.135 ops/s
Iteration   6: 92868.338 ops/s
Iteration   7: 97989.450 ops/s
Iteration   8: 99808.329 ops/s
Iteration   9: 97484.797 ops/s
Iteration  10: 98490.255 ops/s
Iteration  11: 88884.321 ops/s
Iteration  12: 107514.821 ops/s
Iteration  13: 106013.130 ops/s
Iteration  14: 107640.910 ops/s
Iteration  15: 100745.677 ops/s
Iteration  16: 114078.486 ops/s
Iteration  17: 95340.196 ops/s
Iteration  18: 101977.926 ops/s
Iteration  19: 106767.259 ops/s
Iteration  20: 106623.997 ops/s
Iteration  21: 110221.552 ops/s
Iteration  22: 101218.270 ops/s
Iteration  23: 90923.661 ops/s
Iteration  24: 112153.445 ops/s
Iteration  25: 107943.456 ops/s
Iteration  26: 106340.026 ops/s
Iteration  27: 101841.755 ops/s
Iteration  28: 106375.657 ops/s
Iteration  29: 97401.411 ops/s
Iteration  30: 88043.971 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSize":
  101837.106 ±(99.9%) 4399.370 ops/s [Average]
  (min, avg, max) = (88043.971, 101837.106, 114078.486), stdev = 6584.771
  CI (99.9%): [97437.736, 106236.476] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSize  thrpt   30  101837.106 ± 4399.370  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_takeThenTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_takeThenTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 209669.256 ops/s
# Warmup Iteration   2: 530504.759 ops/s
# Warmup Iteration   3: 820305.524 ops/s
# Warmup Iteration   4: 1742285.889 ops/s
# Warmup Iteration   5: 1895857.457 ops/s
# Warmup Iteration   6: 2108056.452 ops/s
# Warmup Iteration   7: 2047438.891 ops/s
# Warmup Iteration   8: 1943434.867 ops/s
# Warmup Iteration   9: 2069907.531 ops/s
# Warmup Iteration  10: 1986678.916 ops/s
# Warmup Iteration  11: 1986102.052 ops/s
# Warmup Iteration  12: 2028436.345 ops/s
# Warmup Iteration  13: 1961419.691 ops/s
# Warmup Iteration  14: 1995224.605 ops/s
# Warmup Iteration  15: 2052518.844 ops/s
# Warmup Iteration  16: 1883605.311 ops/s
# Warmup Iteration  17: 2043298.640 ops/s
# Warmup Iteration  18: 1896564.177 ops/s
# Warmup Iteration  19: 2000670.172 ops/s
# Warmup Iteration  20: 2019917.131 ops/s
# Warmup Iteration  21: 1990729.999 ops/s
# Warmup Iteration  22: 2015491.509 ops/s
# Warmup Iteration  23: 2026918.562 ops/s
# Warmup Iteration  24: 1976423.063 ops/s
# Warmup Iteration  25: 2050948.676 ops/s
# Warmup Iteration  26: 1977677.429 ops/s
# Warmup Iteration  27: 2012493.780 ops/s
# Warmup Iteration  28: 2021114.830 ops/s
# Warmup Iteration  29: 1982336.382 ops/s
# Warmup Iteration  30: 2039281.555 ops/s
Iteration   1: 1948718.919 ops/s
Iteration   2: 2052293.522 ops/s
Iteration   3: 1967970.088 ops/s
Iteration   4: 2031983.596 ops/s
Iteration   5: 1966149.974 ops/s
Iteration   6: 2038136.769 ops/s
Iteration   7: 2083541.433 ops/s
Iteration   8: 1972464.243 ops/s
Iteration   9: 2066962.977 ops/s
Iteration  10: 1952080.995 ops/s
Iteration  11: 1959088.318 ops/s
Iteration  12: 2095971.920 ops/s
Iteration  13: 1990297.549 ops/s
Iteration  14: 1994185.234 ops/s
Iteration  15: 1977011.849 ops/s
Iteration  16: 2129925.655 ops/s
Iteration  17: 1951101.203 ops/s
Iteration  18: 2033433.193 ops/s
Iteration  19: 1943680.245 ops/s
Iteration  20: 1973274.715 ops/s
Iteration  21: 2048745.505 ops/s
Iteration  22: 1957733.435 ops/s
Iteration  23: 2077383.591 ops/s
Iteration  24: 2084332.343 ops/s
Iteration  25: 1985431.240 ops/s
Iteration  26: 2069660.241 ops/s
Iteration  27: 1953198.844 ops/s
Iteration  28: 2052361.318 ops/s
Iteration  29: 2051276.681 ops/s
Iteration  30: 1935401.905 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_takeThenTake":
  2011459.917 ±(99.9%) 37316.596 ops/s [Average]
  (min, avg, max) = (1935401.905, 2011459.917, 2129925.655), stdev = 55853.729
  CI (99.9%): [1974143.320, 2048776.513] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableTakeTest2._Benchmark.benchmark_takeThenTake  thrpt   30  2011459.917 ± 37316.596  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_syncFusedCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_syncFusedCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9705.895 ops/s
# Warmup Iteration   2: 76387.022 ops/s
# Warmup Iteration   3: 130533.380 ops/s
# Warmup Iteration   4: 141063.422 ops/s
# Warmup Iteration   5: 139705.588 ops/s
# Warmup Iteration   6: 134012.020 ops/s
# Warmup Iteration   7: 156683.688 ops/s
# Warmup Iteration   8: 144831.135 ops/s
# Warmup Iteration   9: 152656.842 ops/s
# Warmup Iteration  10: 148398.698 ops/s
# Warmup Iteration  11: 151644.865 ops/s
# Warmup Iteration  12: 150231.477 ops/s
# Warmup Iteration  13: 149960.806 ops/s
# Warmup Iteration  14: 153071.451 ops/s
# Warmup Iteration  15: 148221.051 ops/s
# Warmup Iteration  16: 152080.723 ops/s
# Warmup Iteration  17: 118498.537 ops/s
# Warmup Iteration  18: 159780.428 ops/s
# Warmup Iteration  19: 164513.857 ops/s
# Warmup Iteration  20: 158982.652 ops/s
# Warmup Iteration  21: 165990.883 ops/s
# Warmup Iteration  22: 159574.621 ops/s
# Warmup Iteration  23: 162010.933 ops/s
# Warmup Iteration  24: 158714.058 ops/s
# Warmup Iteration  25: 162517.354 ops/s
# Warmup Iteration  26: 154221.181 ops/s
# Warmup Iteration  27: 161101.430 ops/s
# Warmup Iteration  28: 165704.162 ops/s
# Warmup Iteration  29: 159750.493 ops/s
# Warmup Iteration  30: 159084.205 ops/s
Iteration   1: 160596.943 ops/s
Iteration   2: 157488.506 ops/s
Iteration   3: 163771.338 ops/s
Iteration   4: 154043.206 ops/s
Iteration   5: 157843.333 ops/s
Iteration   6: 164747.582 ops/s
Iteration   7: 155666.415 ops/s
Iteration   8: 161773.963 ops/s
Iteration   9: 152929.344 ops/s
Iteration  10: 158607.661 ops/s
Iteration  11: 165551.523 ops/s
Iteration  12: 157582.083 ops/s
Iteration  13: 159916.285 ops/s
Iteration  14: 164847.854 ops/s
Iteration  15: 155787.889 ops/s
Iteration  16: 160419.776 ops/s
Iteration  17: 157720.011 ops/s
Iteration  18: 160597.923 ops/s
Iteration  19: 158110.947 ops/s
Iteration  20: 160988.998 ops/s
Iteration  21: 160307.302 ops/s
Iteration  22: 157083.750 ops/s
Iteration  23: 162740.144 ops/s
Iteration  24: 157130.836 ops/s
Iteration  25: 161847.454 ops/s
Iteration  26: 164647.976 ops/s
Iteration  27: 157610.863 ops/s
Iteration  28: 160473.655 ops/s
Iteration  29: 159947.914 ops/s
Iteration  30: 164370.523 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_syncFusedCrash":
  159838.400 ±(99.9%) 2216.661 ops/s [Average]
  (min, avg, max) = (152929.344, 159838.400, 165551.523), stdev = 3317.795
  CI (99.9%): [157621.739, 162055.061] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_syncFusedCrash  thrpt   30  159838.400 ± 2216.661  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedNone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedNone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1389976.623 ops/s
# Warmup Iteration   2: 3715894.787 ops/s
# Warmup Iteration   3: 5137474.457 ops/s
# Warmup Iteration   4: 5302773.080 ops/s
# Warmup Iteration   5: 5511005.505 ops/s
# Warmup Iteration   6: 5341993.986 ops/s
# Warmup Iteration   7: 5255249.587 ops/s
# Warmup Iteration   8: 5282622.236 ops/s
# Warmup Iteration   9: 5454549.824 ops/s
# Warmup Iteration  10: 5347344.757 ops/s
# Warmup Iteration  11: 5388545.519 ops/s
# Warmup Iteration  12: 5264846.863 ops/s
# Warmup Iteration  13: 5406052.857 ops/s
# Warmup Iteration  14: 5392705.257 ops/s
# Warmup Iteration  15: 5415700.236 ops/s
# Warmup Iteration  16: 5506868.923 ops/s
# Warmup Iteration  17: 5333545.124 ops/s
# Warmup Iteration  18: 5518958.461 ops/s
# Warmup Iteration  19: 5323230.340 ops/s
# Warmup Iteration  20: 5444766.887 ops/s
# Warmup Iteration  21: 5265907.061 ops/s
# Warmup Iteration  22: 5358648.435 ops/s
# Warmup Iteration  23: 5425566.061 ops/s
# Warmup Iteration  24: 5304732.098 ops/s
# Warmup Iteration  25: 5412408.363 ops/s
# Warmup Iteration  26: 5296565.944 ops/s
# Warmup Iteration  27: 5481103.692 ops/s
# Warmup Iteration  28: 5337425.591 ops/s
# Warmup Iteration  29: 5418864.891 ops/s
# Warmup Iteration  30: 5400590.846 ops/s
Iteration   1: 5267037.445 ops/s
Iteration   2: 5488233.056 ops/s
Iteration   3: 5253711.511 ops/s
Iteration   4: 5260036.471 ops/s
Iteration   5: 5288566.940 ops/s
Iteration   6: 5571799.280 ops/s
Iteration   7: 5627213.635 ops/s
Iteration   8: 5242388.670 ops/s
Iteration   9: 5403489.181 ops/s
Iteration  10: 5484347.017 ops/s
Iteration  11: 5461709.390 ops/s
Iteration  12: 5215380.431 ops/s
Iteration  13: 5352683.446 ops/s
Iteration  14: 5556500.494 ops/s
Iteration  15: 5444959.360 ops/s
Iteration  16: 5152736.972 ops/s
Iteration  17: 5450705.531 ops/s
Iteration  18: 5373904.437 ops/s
Iteration  19: 5345225.790 ops/s
Iteration  20: 5564442.249 ops/s
Iteration  21: 5241742.635 ops/s
Iteration  22: 5507504.593 ops/s
Iteration  23: 5443557.313 ops/s
Iteration  24: 5271293.962 ops/s
Iteration  25: 5448784.438 ops/s
Iteration  26: 5098893.903 ops/s
Iteration  27: 5636087.144 ops/s
Iteration  28: 5188070.972 ops/s
Iteration  29: 5437423.707 ops/s
Iteration  30: 5367636.125 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedNone":
  5381535.537 ±(99.9%) 95622.102 ops/s [Average]
  (min, avg, max) = (5098893.903, 5381535.537, 5636087.144), stdev = 143122.672
  CI (99.9%): [5285913.434, 5477157.639] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_syncFusedNone  thrpt   30  5381535.537 ± 95622.102  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedAll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedAll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 469668.308 ops/s
# Warmup Iteration   2: 2734629.938 ops/s
# Warmup Iteration   3: 3483259.714 ops/s
# Warmup Iteration   4: 3780542.149 ops/s
# Warmup Iteration   5: 4002221.291 ops/s
# Warmup Iteration   6: 3911009.877 ops/s
# Warmup Iteration   7: 3952317.306 ops/s
# Warmup Iteration   8: 3891725.032 ops/s
# Warmup Iteration   9: 3920767.062 ops/s
# Warmup Iteration  10: 3914902.583 ops/s
# Warmup Iteration  11: 3951554.298 ops/s
# Warmup Iteration  12: 3037864.677 ops/s
# Warmup Iteration  13: 4000822.779 ops/s
# Warmup Iteration  14: 3807275.861 ops/s
# Warmup Iteration  15: 3988712.490 ops/s
# Warmup Iteration  16: 3975534.225 ops/s
# Warmup Iteration  17: 3805701.268 ops/s
# Warmup Iteration  18: 4007430.573 ops/s
# Warmup Iteration  19: 3852643.585 ops/s
# Warmup Iteration  20: 3925926.597 ops/s
# Warmup Iteration  21: 3862968.366 ops/s
# Warmup Iteration  22: 3918326.221 ops/s
# Warmup Iteration  23: 3995723.312 ops/s
# Warmup Iteration  24: 3807931.834 ops/s
# Warmup Iteration  25: 4057392.677 ops/s
# Warmup Iteration  26: 3941441.448 ops/s
# Warmup Iteration  27: 3855760.028 ops/s
# Warmup Iteration  28: 4019589.638 ops/s
# Warmup Iteration  29: 3849239.000 ops/s
# Warmup Iteration  30: 3878404.108 ops/s
Iteration   1: 3974292.739 ops/s
Iteration   2: 3866542.852 ops/s
Iteration   3: 3994376.374 ops/s
Iteration   4: 3887656.271 ops/s
Iteration   5: 3910911.613 ops/s
Iteration   6: 3830403.433 ops/s
Iteration   7: 3943618.643 ops/s
Iteration   8: 4008890.553 ops/s
Iteration   9: 3841040.634 ops/s
Iteration  10: 4000280.704 ops/s
Iteration  11: 3851004.086 ops/s
Iteration  12: 4005461.870 ops/s
Iteration  13: 3799814.226 ops/s
Iteration  14: 3841948.540 ops/s
Iteration  15: 4012811.744 ops/s
Iteration  16: 4019682.662 ops/s
Iteration  17: 3837370.433 ops/s
Iteration  18: 4009591.606 ops/s
Iteration  19: 3780850.495 ops/s
Iteration  20: 3991350.983 ops/s
Iteration  21: 3841966.729 ops/s
Iteration  22: 3886457.627 ops/s
Iteration  23: 4015102.800 ops/s
Iteration  24: 3891864.988 ops/s
Iteration  25: 3969593.035 ops/s
Iteration  26: 3941581.858 ops/s
Iteration  27: 4003989.983 ops/s
Iteration  28: 3847762.040 ops/s
Iteration  29: 4005778.575 ops/s
Iteration  30: 3883344.030 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedAll":
  3923178.071 ±(99.9%) 51563.882 ops/s [Average]
  (min, avg, max) = (3780850.495, 3923178.071, 4019682.662), stdev = 77178.398
  CI (99.9%): [3871614.189, 3974741.953] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_syncFusedAll  thrpt   30  3923178.071 ± 51563.882  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedMixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedMixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 671003.871 ops/s
# Warmup Iteration   2: 2082044.030 ops/s
# Warmup Iteration   3: 3360359.371 ops/s
# Warmup Iteration   4: 3586259.700 ops/s
# Warmup Iteration   5: 3739980.161 ops/s
# Warmup Iteration   6: 3693814.797 ops/s
# Warmup Iteration   7: 3500941.022 ops/s
# Warmup Iteration   8: 3707995.960 ops/s
# Warmup Iteration   9: 3604728.642 ops/s
# Warmup Iteration  10: 3633760.772 ops/s
# Warmup Iteration  11: 3631035.104 ops/s
# Warmup Iteration  12: 3634063.004 ops/s
# Warmup Iteration  13: 3643792.505 ops/s
# Warmup Iteration  14: 3650628.556 ops/s
# Warmup Iteration  15: 3666270.843 ops/s
# Warmup Iteration  16: 3655525.856 ops/s
# Warmup Iteration  17: 3594056.656 ops/s
# Warmup Iteration  18: 3521917.829 ops/s
# Warmup Iteration  19: 3609086.238 ops/s
# Warmup Iteration  20: 3657715.315 ops/s
# Warmup Iteration  21: 3676147.685 ops/s
# Warmup Iteration  22: 3474519.837 ops/s
# Warmup Iteration  23: 3605915.949 ops/s
# Warmup Iteration  24: 3549774.108 ops/s
# Warmup Iteration  25: 3541389.956 ops/s
# Warmup Iteration  26: 3596817.427 ops/s
# Warmup Iteration  27: 3526353.162 ops/s
# Warmup Iteration  28: 3758556.904 ops/s
# Warmup Iteration  29: 3410953.067 ops/s
# Warmup Iteration  30: 3565178.990 ops/s
Iteration   1: 3688548.239 ops/s
Iteration   2: 3608582.570 ops/s
Iteration   3: 3781009.572 ops/s
Iteration   4: 3629491.907 ops/s
Iteration   5: 3422754.732 ops/s
Iteration   6: 3704387.382 ops/s
Iteration   7: 3515660.479 ops/s
Iteration   8: 3541953.113 ops/s
Iteration   9: 3646173.211 ops/s
Iteration  10: 3616356.981 ops/s
Iteration  11: 3731276.602 ops/s
Iteration  12: 3598269.640 ops/s
Iteration  13: 3749972.821 ops/s
Iteration  14: 3681524.025 ops/s
Iteration  15: 3591532.164 ops/s
Iteration  16: 3591812.518 ops/s
Iteration  17: 3700462.018 ops/s
Iteration  18: 3517985.453 ops/s
Iteration  19: 3780807.732 ops/s
Iteration  20: 3553969.069 ops/s
Iteration  21: 3704509.004 ops/s
Iteration  22: 3674125.502 ops/s
Iteration  23: 3590889.622 ops/s
Iteration  24: 3770670.959 ops/s
Iteration  25: 3470439.126 ops/s
Iteration  26: 3556607.143 ops/s
Iteration  27: 3622727.743 ops/s
Iteration  28: 3622730.874 ops/s
Iteration  29: 3709470.504 ops/s
Iteration  30: 3571309.089 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedMixed":
  3631533.660 ±(99.9%) 61182.295 ops/s [Average]
  (min, avg, max) = (3422754.732, 3631533.660, 3781009.572), stdev = 91574.786
  CI (99.9%): [3570351.365, 3692715.955] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_syncFusedMixed  thrpt   30  3631533.660 ± 61182.295  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_prefetchFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_prefetchFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 394912.571 ops/s
# Warmup Iteration   2: 1406620.058 ops/s
# Warmup Iteration   3: 1501129.312 ops/s
# Warmup Iteration   4: 1578038.026 ops/s
# Warmup Iteration   5: 1778858.749 ops/s
# Warmup Iteration   6: 1775478.732 ops/s
# Warmup Iteration   7: 1180338.042 ops/s
# Warmup Iteration   8: 1795185.185 ops/s
# Warmup Iteration   9: 1705062.880 ops/s
# Warmup Iteration  10: 1761145.035 ops/s
# Warmup Iteration  11: 1768291.626 ops/s
# Warmup Iteration  12: 1701451.134 ops/s
# Warmup Iteration  13: 1747046.395 ops/s
# Warmup Iteration  14: 1681890.338 ops/s
# Warmup Iteration  15: 1771627.195 ops/s
# Warmup Iteration  16: 1718477.159 ops/s
# Warmup Iteration  17: 1719544.151 ops/s
# Warmup Iteration  18: 1759467.382 ops/s
# Warmup Iteration  19: 1756880.002 ops/s
# Warmup Iteration  20: 1681579.841 ops/s
# Warmup Iteration  21: 1747396.396 ops/s
# Warmup Iteration  22: 1702485.720 ops/s
# Warmup Iteration  23: 1785687.316 ops/s
# Warmup Iteration  24: 1714024.443 ops/s
# Warmup Iteration  25: 1791676.016 ops/s
# Warmup Iteration  26: 1675829.438 ops/s
# Warmup Iteration  27: 1731014.923 ops/s
# Warmup Iteration  28: 1763786.966 ops/s
# Warmup Iteration  29: 1661908.314 ops/s
# Warmup Iteration  30: 1767625.697 ops/s
Iteration   1: 1717782.672 ops/s
Iteration   2: 1719907.181 ops/s
Iteration   3: 1708507.355 ops/s
Iteration   4: 1768939.227 ops/s
Iteration   5: 1713459.547 ops/s
Iteration   6: 1711991.467 ops/s
Iteration   7: 1717819.103 ops/s
Iteration   8: 1801584.651 ops/s
Iteration   9: 1689159.296 ops/s
Iteration  10: 1758453.020 ops/s
Iteration  11: 1714904.476 ops/s
Iteration  12: 1754331.473 ops/s
Iteration  13: 1700912.746 ops/s
Iteration  14: 1733519.093 ops/s
Iteration  15: 1749496.071 ops/s
Iteration  16: 1696056.955 ops/s
Iteration  17: 1759361.272 ops/s
Iteration  18: 1694198.009 ops/s
Iteration  19: 1759181.052 ops/s
Iteration  20: 1703931.235 ops/s
Iteration  21: 1764281.616 ops/s
Iteration  22: 1781648.748 ops/s
Iteration  23: 1688024.247 ops/s
Iteration  24: 1771745.472 ops/s
Iteration  25: 1666807.270 ops/s
Iteration  26: 1770514.565 ops/s
Iteration  27: 1661284.821 ops/s
Iteration  28: 1728530.639 ops/s
Iteration  29: 1763724.342 ops/s
Iteration  30: 1734252.059 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_prefetchFlowable":
  1730143.656 ±(99.9%) 23645.455 ops/s [Average]
  (min, avg, max) = (1661284.821, 1730143.656, 1801584.651), stdev = 35391.406
  CI (99.9%): [1706498.201, 1753789.111] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_prefetchFlowable  thrpt   30  1730143.656 ± 23645.455  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedNoneConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedNoneConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 967956.917 ops/s
# Warmup Iteration   2: 3723100.351 ops/s
# Warmup Iteration   3: 5001952.800 ops/s
# Warmup Iteration   4: 5094674.949 ops/s
# Warmup Iteration   5: 5437922.560 ops/s
# Warmup Iteration   6: 5137185.042 ops/s
# Warmup Iteration   7: 5154591.529 ops/s
# Warmup Iteration   8: 5326103.719 ops/s
# Warmup Iteration   9: 5077646.896 ops/s
# Warmup Iteration  10: 5531980.850 ops/s
# Warmup Iteration  11: 5168589.436 ops/s
# Warmup Iteration  12: 5314621.708 ops/s
# Warmup Iteration  13: 5287367.397 ops/s
# Warmup Iteration  14: 5315914.741 ops/s
# Warmup Iteration  15: 5348149.073 ops/s
# Warmup Iteration  16: 5247265.619 ops/s
# Warmup Iteration  17: 5155329.702 ops/s
# Warmup Iteration  18: 5467723.610 ops/s
# Warmup Iteration  19: 5013132.030 ops/s
# Warmup Iteration  20: 5484593.197 ops/s
# Warmup Iteration  21: 5079289.056 ops/s
# Warmup Iteration  22: 5267309.847 ops/s
# Warmup Iteration  23: 5428493.382 ops/s
# Warmup Iteration  24: 5189208.491 ops/s
# Warmup Iteration  25: 5015356.506 ops/s
# Warmup Iteration  26: 5142359.750 ops/s
# Warmup Iteration  27: 5206600.948 ops/s
# Warmup Iteration  28: 5321866.070 ops/s
# Warmup Iteration  29: 5196842.101 ops/s
# Warmup Iteration  30: 5308167.296 ops/s
Iteration   1: 5516599.174 ops/s
Iteration   2: 5100090.997 ops/s
Iteration   3: 5116357.966 ops/s
Iteration   4: 5279419.408 ops/s
Iteration   5: 5172290.758 ops/s
Iteration   6: 5327783.011 ops/s
Iteration   7: 5300758.029 ops/s
Iteration   8: 5123100.074 ops/s
Iteration   9: 5344011.097 ops/s
Iteration  10: 5355136.189 ops/s
Iteration  11: 5120220.040 ops/s
Iteration  12: 5367359.086 ops/s
Iteration  13: 5262572.680 ops/s
Iteration  14: 5339960.069 ops/s
Iteration  15: 5362616.804 ops/s
Iteration  16: 5099313.097 ops/s
Iteration  17: 5345408.506 ops/s
Iteration  18: 5074423.994 ops/s
Iteration  19: 5220985.584 ops/s
Iteration  20: 5088514.062 ops/s
Iteration  21: 5348890.281 ops/s
Iteration  22: 5116797.713 ops/s
Iteration  23: 5213485.775 ops/s
Iteration  24: 5276734.448 ops/s
Iteration  25: 5383609.197 ops/s
Iteration  26: 5500983.658 ops/s
Iteration  27: 5041687.250 ops/s
Iteration  28: 5481517.919 ops/s
Iteration  29: 5217361.319 ops/s
Iteration  30: 5076740.194 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_syncFusedNoneConditional":
  5252490.946 ±(99.9%) 91366.986 ops/s [Average]
  (min, avg, max) = (5041687.250, 5252490.946, 5516599.174), stdev = 136753.814
  CI (99.9%): [5161123.959, 5343857.932] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_syncFusedNoneConditional  thrpt   30  5252490.946 ± 91366.986  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 188720.638 ops/s
# Warmup Iteration   2: 331928.485 ops/s
# Warmup Iteration   3: 940545.392 ops/s
# Warmup Iteration   4: 1002799.583 ops/s
# Warmup Iteration   5: 963462.967 ops/s
# Warmup Iteration   6: 1053229.395 ops/s
# Warmup Iteration   7: 1093507.125 ops/s
# Warmup Iteration   8: 1135717.191 ops/s
# Warmup Iteration   9: 1062437.358 ops/s
# Warmup Iteration  10: 1107970.197 ops/s
# Warmup Iteration  11: 1037526.894 ops/s
# Warmup Iteration  12: 1110473.082 ops/s
# Warmup Iteration  13: 1085138.995 ops/s
# Warmup Iteration  14: 1093893.587 ops/s
# Warmup Iteration  15: 1100157.063 ops/s
# Warmup Iteration  16: 1102264.390 ops/s
# Warmup Iteration  17: 1096869.005 ops/s
# Warmup Iteration  18: 1126697.409 ops/s
# Warmup Iteration  19: 1057303.159 ops/s
# Warmup Iteration  20: 1117448.232 ops/s
# Warmup Iteration  21: 1068411.944 ops/s
# Warmup Iteration  22: 1068693.265 ops/s
# Warmup Iteration  23: 1108709.915 ops/s
# Warmup Iteration  24: 1088476.304 ops/s
# Warmup Iteration  25: 1122718.661 ops/s
# Warmup Iteration  26: 1122411.085 ops/s
# Warmup Iteration  27: 1075102.884 ops/s
# Warmup Iteration  28: 1079965.648 ops/s
# Warmup Iteration  29: 1072876.648 ops/s
# Warmup Iteration  30: 1073880.443 ops/s
Iteration   1: 1114440.055 ops/s
Iteration   2: 1064268.726 ops/s
Iteration   3: 1101676.867 ops/s
Iteration   4: 1168102.288 ops/s
Iteration   5: 1060515.973 ops/s
Iteration   6: 1108469.026 ops/s
Iteration   7: 1067520.367 ops/s
Iteration   8: 1090744.774 ops/s
Iteration   9: 1104244.456 ops/s
Iteration  10: 1068449.852 ops/s
Iteration  11: 1109685.949 ops/s
Iteration  12: 1112671.580 ops/s
Iteration  13: 1102836.900 ops/s
Iteration  14: 1100598.632 ops/s
Iteration  15: 1061244.409 ops/s
Iteration  16: 1126905.826 ops/s
Iteration  17: 1080122.862 ops/s
Iteration  18: 1078513.534 ops/s
Iteration  19: 1135294.299 ops/s
Iteration  20: 1093878.069 ops/s
Iteration  21: 1115340.929 ops/s
Iteration  22: 1083872.321 ops/s
Iteration  23: 1098408.207 ops/s
Iteration  24: 1096279.707 ops/s
Iteration  25: 1104501.222 ops/s
Iteration  26: 1081947.229 ops/s
Iteration  27: 1074819.730 ops/s
Iteration  28: 1135615.530 ops/s
Iteration  29: 1100071.532 ops/s
Iteration  30: 1088613.163 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStream":
  1097655.134 ±(99.9%) 16301.536 ops/s [Average]
  (min, avg, max) = (1060515.973, 1097655.134, 1168102.288), stdev = 24399.374
  CI (99.9%): [1081353.597, 1113956.670] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStream  thrpt   30  1097655.134 ± 16301.536  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_notVeryEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_notVeryEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 108225.546 ops/s
# Warmup Iteration   2: 483479.538 ops/s
# Warmup Iteration   3: 549216.156 ops/s
# Warmup Iteration   4: 554744.380 ops/s
# Warmup Iteration   5: 510689.852 ops/s
# Warmup Iteration   6: 567903.596 ops/s
# Warmup Iteration   7: 582650.562 ops/s
# Warmup Iteration   8: 619703.551 ops/s
# Warmup Iteration   9: 588903.724 ops/s
# Warmup Iteration  10: 576764.594 ops/s
# Warmup Iteration  11: 605530.611 ops/s
# Warmup Iteration  12: 585405.469 ops/s
# Warmup Iteration  13: 587366.443 ops/s
# Warmup Iteration  14: 577770.255 ops/s
# Warmup Iteration  15: 591403.046 ops/s
# Warmup Iteration  16: 596329.533 ops/s
# Warmup Iteration  17: 598829.820 ops/s
# Warmup Iteration  18: 625756.423 ops/s
# Warmup Iteration  19: 603757.866 ops/s
# Warmup Iteration  20: 618243.248 ops/s
# Warmup Iteration  21: 617384.792 ops/s
# Warmup Iteration  22: 594156.681 ops/s
# Warmup Iteration  23: 624533.583 ops/s
# Warmup Iteration  24: 621109.128 ops/s
# Warmup Iteration  25: 588932.380 ops/s
# Warmup Iteration  26: 613912.868 ops/s
# Warmup Iteration  27: 604360.312 ops/s
# Warmup Iteration  28: 616407.456 ops/s
# Warmup Iteration  29: 610231.762 ops/s
# Warmup Iteration  30: 624178.678 ops/s
Iteration   1: 624517.415 ops/s
Iteration   2: 601320.004 ops/s
Iteration   3: 624464.426 ops/s
Iteration   4: 611261.703 ops/s
Iteration   5: 606712.609 ops/s
Iteration   6: 646810.149 ops/s
Iteration   7: 580551.858 ops/s
Iteration   8: 644315.208 ops/s
Iteration   9: 599557.009 ops/s
Iteration  10: 628123.688 ops/s
Iteration  11: 602740.754 ops/s
Iteration  12: 610919.861 ops/s
Iteration  13: 619012.568 ops/s
Iteration  14: 614790.592 ops/s
Iteration  15: 631386.570 ops/s
Iteration  16: 628962.727 ops/s
Iteration  17: 599858.688 ops/s
Iteration  18: 651213.175 ops/s
Iteration  19: 581878.910 ops/s
Iteration  20: 624080.666 ops/s
Iteration  21: 599691.836 ops/s
Iteration  22: 624648.333 ops/s
Iteration  23: 631214.846 ops/s
Iteration  24: 601018.388 ops/s
Iteration  25: 630032.841 ops/s
Iteration  26: 611784.395 ops/s
Iteration  27: 626515.515 ops/s
Iteration  28: 616583.975 ops/s
Iteration  29: 485987.803 ops/s
Iteration  30: 634574.477 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_notVeryEnd":
  613151.033 ±(99.9%) 19760.054 ops/s [Average]
  (min, avg, max) = (485987.803, 613151.033, 651213.175), stdev = 29575.920
  CI (99.9%): [593390.979, 632911.087] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_notVeryEnd  thrpt   30  613151.033 ± 19760.054  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12853.140 ops/s
# Warmup Iteration   2: 48035.648 ops/s
# Warmup Iteration   3: 40993.075 ops/s
# Warmup Iteration   4: 97844.308 ops/s
# Warmup Iteration   5: 136315.553 ops/s
# Warmup Iteration   6: 133179.740 ops/s
# Warmup Iteration   7: 130017.304 ops/s
# Warmup Iteration   8: 129056.070 ops/s
# Warmup Iteration   9: 130341.276 ops/s
# Warmup Iteration  10: 132074.456 ops/s
# Warmup Iteration  11: 130328.101 ops/s
# Warmup Iteration  12: 132860.543 ops/s
# Warmup Iteration  13: 130570.727 ops/s
# Warmup Iteration  14: 128699.813 ops/s
# Warmup Iteration  15: 134563.846 ops/s
# Warmup Iteration  16: 127646.477 ops/s
# Warmup Iteration  17: 125732.274 ops/s
# Warmup Iteration  18: 133681.473 ops/s
# Warmup Iteration  19: 132246.786 ops/s
# Warmup Iteration  20: 132743.156 ops/s
# Warmup Iteration  21: 130539.675 ops/s
# Warmup Iteration  22: 131395.157 ops/s
# Warmup Iteration  23: 128291.815 ops/s
# Warmup Iteration  24: 128219.121 ops/s
# Warmup Iteration  25: 135153.586 ops/s
# Warmup Iteration  26: 125953.846 ops/s
# Warmup Iteration  27: 134019.605 ops/s
# Warmup Iteration  28: 129491.376 ops/s
# Warmup Iteration  29: 128436.746 ops/s
# Warmup Iteration  30: 132963.247 ops/s
Iteration   1: 128285.551 ops/s
Iteration   2: 129185.356 ops/s
Iteration   3: 128254.370 ops/s
Iteration   4: 130691.859 ops/s
Iteration   5: 132945.192 ops/s
Iteration   6: 132933.710 ops/s
Iteration   7: 126747.861 ops/s
Iteration   8: 134055.071 ops/s
Iteration   9: 129592.228 ops/s
Iteration  10: 128089.131 ops/s
Iteration  11: 135346.271 ops/s
Iteration  12: 129346.390 ops/s
Iteration  13: 131281.398 ops/s
Iteration  14: 127002.450 ops/s
Iteration  15: 129560.408 ops/s
Iteration  16: 134271.379 ops/s
Iteration  17: 130930.505 ops/s
Iteration  18: 136601.391 ops/s
Iteration  19: 131691.478 ops/s
Iteration  20: 128062.731 ops/s
Iteration  21: 134524.421 ops/s
Iteration  22: 130964.397 ops/s
Iteration  23: 133346.538 ops/s
Iteration  24: 129035.576 ops/s
Iteration  25: 131485.198 ops/s
Iteration  26: 131766.143 ops/s
Iteration  27: 127735.330 ops/s
Iteration  28: 133430.029 ops/s
Iteration  29: 131491.416 ops/s
Iteration  30: 128516.146 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_backpressure":
  130905.664 ±(99.9%) 1754.326 ops/s [Average]
  (min, avg, max) = (126747.861, 130905.664, 136601.391), stdev = 2625.793
  CI (99.9%): [129151.338, 132659.990] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowableReplayTest._Benchmark.benchmark_backpressure  thrpt   30  130905.664 ± 1754.326  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailHandlerThrowsConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailHandlerThrowsConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7302.407 ops/s
# Warmup Iteration   2: 52816.615 ops/s
# Warmup Iteration   3: 137909.697 ops/s
# Warmup Iteration   4: 163205.939 ops/s
# Warmup Iteration   5: 158633.251 ops/s
# Warmup Iteration   6: 153088.285 ops/s
# Warmup Iteration   7: 159127.727 ops/s
# Warmup Iteration   8: 143975.081 ops/s
# Warmup Iteration   9: 164730.597 ops/s
# Warmup Iteration  10: 156680.275 ops/s
# Warmup Iteration  11: 162706.519 ops/s
# Warmup Iteration  12: 164223.797 ops/s
# Warmup Iteration  13: 155270.042 ops/s
# Warmup Iteration  14: 164698.437 ops/s
# Warmup Iteration  15: 162252.064 ops/s
# Warmup Iteration  16: 159066.507 ops/s
# Warmup Iteration  17: 160113.634 ops/s
# Warmup Iteration  18: 168163.754 ops/s
# Warmup Iteration  19: 170275.660 ops/s
# Warmup Iteration  20: 159396.362 ops/s
# Warmup Iteration  21: 155011.361 ops/s
# Warmup Iteration  22: 167871.944 ops/s
# Warmup Iteration  23: 161472.944 ops/s
# Warmup Iteration  24: 163859.014 ops/s
# Warmup Iteration  25: 172769.056 ops/s
# Warmup Iteration  26: 157380.143 ops/s
# Warmup Iteration  27: 164877.967 ops/s
# Warmup Iteration  28: 164185.737 ops/s
# Warmup Iteration  29: 168623.131 ops/s
# Warmup Iteration  30: 165027.787 ops/s
Iteration   1: 163297.927 ops/s
Iteration   2: 167090.586 ops/s
Iteration   3: 161795.851 ops/s
Iteration   4: 167793.443 ops/s
Iteration   5: 158589.690 ops/s
Iteration   6: 164497.064 ops/s
Iteration   7: 163746.594 ops/s
Iteration   8: 161836.943 ops/s
Iteration   9: 162910.723 ops/s
Iteration  10: 165189.687 ops/s
Iteration  11: 170815.726 ops/s
Iteration  12: 162350.860 ops/s
Iteration  13: 163352.022 ops/s
Iteration  14: 162607.932 ops/s
Iteration  15: 156241.381 ops/s
Iteration  16: 169775.672 ops/s
Iteration  17: 165185.194 ops/s
Iteration  18: 165060.260 ops/s
Iteration  19: 162528.915 ops/s
Iteration  20: 173498.904 ops/s
Iteration  21: 157843.103 ops/s
Iteration  22: 165508.991 ops/s
Iteration  23: 151537.266 ops/s
Iteration  24: 146801.858 ops/s
Iteration  25: 168471.171 ops/s
Iteration  26: 167497.922 ops/s
Iteration  27: 161534.711 ops/s
Iteration  28: 169412.701 ops/s
Iteration  29: 162059.417 ops/s
Iteration  30: 166035.497 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailHandlerThrowsConditional":
  163495.600 ±(99.9%) 3649.556 ops/s [Average]
  (min, avg, max) = (146801.858, 163495.600, 173498.904), stdev = 5462.484
  CI (99.9%): [159846.044, 167145.157] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailHandlerThrowsConditional  thrpt   30  163495.600 ± 3649.556  ops/s
----------------------------------------
