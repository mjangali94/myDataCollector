=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip5$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip5

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 669251.262 ops/s
# Warmup Iteration   2: 1944282.973 ops/s
# Warmup Iteration   3: 2408574.286 ops/s
# Warmup Iteration   4: 2435993.333 ops/s
# Warmup Iteration   5: 2449652.630 ops/s
# Warmup Iteration   6: 2422712.975 ops/s
# Warmup Iteration   7: 2424721.146 ops/s
# Warmup Iteration   8: 2451657.763 ops/s
# Warmup Iteration   9: 2421844.416 ops/s
# Warmup Iteration  10: 2434358.733 ops/s
# Warmup Iteration  11: 2413785.412 ops/s
# Warmup Iteration  12: 2425325.346 ops/s
# Warmup Iteration  13: 2429467.847 ops/s
# Warmup Iteration  14: 2443474.391 ops/s
# Warmup Iteration  15: 2418097.611 ops/s
# Warmup Iteration  16: 2440515.619 ops/s
# Warmup Iteration  17: 2421868.508 ops/s
# Warmup Iteration  18: 2435065.832 ops/s
# Warmup Iteration  19: 2434673.796 ops/s
# Warmup Iteration  20: 2423834.458 ops/s
# Warmup Iteration  21: 2436356.963 ops/s
# Warmup Iteration  22: 2414381.749 ops/s
# Warmup Iteration  23: 2431061.593 ops/s
# Warmup Iteration  24: 2426576.892 ops/s
# Warmup Iteration  25: 2433395.318 ops/s
# Warmup Iteration  26: 2423514.116 ops/s
# Warmup Iteration  27: 2430649.986 ops/s
# Warmup Iteration  28: 2437829.189 ops/s
# Warmup Iteration  29: 2431527.527 ops/s
# Warmup Iteration  30: 2428548.656 ops/s
Iteration   1: 2431568.496 ops/s
Iteration   2: 2431779.682 ops/s
Iteration   3: 2432546.481 ops/s
Iteration   4: 2421919.127 ops/s
Iteration   5: 2426773.689 ops/s
Iteration   6: 2435005.453 ops/s
Iteration   7: 2425883.771 ops/s
Iteration   8: 2436769.107 ops/s
Iteration   9: 2410567.144 ops/s
Iteration  10: 2429835.690 ops/s
Iteration  11: 2412749.517 ops/s
Iteration  12: 2428304.660 ops/s
Iteration  13: 2436142.010 ops/s
Iteration  14: 2429942.300 ops/s
Iteration  15: 2425114.052 ops/s
Iteration  16: 2431872.256 ops/s
Iteration  17: 2408619.573 ops/s
Iteration  18: 2450428.407 ops/s
Iteration  19: 2426851.713 ops/s
Iteration  20: 2442726.185 ops/s
Iteration  21: 2443571.217 ops/s
Iteration  22: 2425815.193 ops/s
Iteration  23: 2429464.827 ops/s
Iteration  24: 2418059.818 ops/s
Iteration  25: 2429623.711 ops/s
Iteration  26: 2439034.752 ops/s
Iteration  27: 2430121.543 ops/s
Iteration  28: 2432582.885 ops/s
Iteration  29: 2436878.049 ops/s
Iteration  30: 2436573.900 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip5":
  2429904.174 ±(99.9%) 6188.888 ops/s [Average]
  (min, avg, max) = (2408619.573, 2429904.174, 2450428.407), stdev = 9263.238
  CI (99.9%): [2423715.285, 2436093.062] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_zip5  thrpt   30  2429904.174 ± 6188.888  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip6$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip6

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1244407.191 ops/s
# Warmup Iteration   2: 1974351.467 ops/s
# Warmup Iteration   3: 2239300.455 ops/s
# Warmup Iteration   4: 2248326.835 ops/s
# Warmup Iteration   5: 2225631.042 ops/s
# Warmup Iteration   6: 2215577.708 ops/s
# Warmup Iteration   7: 2208473.902 ops/s
# Warmup Iteration   8: 2225822.577 ops/s
# Warmup Iteration   9: 2235399.683 ops/s
# Warmup Iteration  10: 2239083.345 ops/s
# Warmup Iteration  11: 2229366.731 ops/s
# Warmup Iteration  12: 2242970.196 ops/s
# Warmup Iteration  13: 2233838.940 ops/s
# Warmup Iteration  14: 2228826.407 ops/s
# Warmup Iteration  15: 2222022.635 ops/s
# Warmup Iteration  16: 2206159.262 ops/s
# Warmup Iteration  17: 2245262.564 ops/s
# Warmup Iteration  18: 2233121.618 ops/s
# Warmup Iteration  19: 2227180.860 ops/s
# Warmup Iteration  20: 2237351.195 ops/s
# Warmup Iteration  21: 2237099.551 ops/s
# Warmup Iteration  22: 2217876.764 ops/s
# Warmup Iteration  23: 2225163.469 ops/s
# Warmup Iteration  24: 2220769.522 ops/s
# Warmup Iteration  25: 2231076.258 ops/s
# Warmup Iteration  26: 2232627.787 ops/s
# Warmup Iteration  27: 2223694.743 ops/s
# Warmup Iteration  28: 2233417.915 ops/s
# Warmup Iteration  29: 2229246.194 ops/s
# Warmup Iteration  30: 2232156.849 ops/s
Iteration   1: 2211953.484 ops/s
Iteration   2: 2229193.777 ops/s
Iteration   3: 2212890.657 ops/s
Iteration   4: 2219053.782 ops/s
Iteration   5: 2226276.251 ops/s
Iteration   6: 2221774.561 ops/s
Iteration   7: 2214313.108 ops/s
Iteration   8: 2228690.637 ops/s
Iteration   9: 2231101.077 ops/s
Iteration  10: 2223939.077 ops/s
Iteration  11: 2233794.714 ops/s
Iteration  12: 2232435.640 ops/s
Iteration  13: 2235035.076 ops/s
Iteration  14: 2225288.847 ops/s
Iteration  15: 2200430.648 ops/s
Iteration  16: 2235696.716 ops/s
Iteration  17: 2228626.884 ops/s
Iteration  18: 2236011.058 ops/s
Iteration  19: 2231554.704 ops/s
Iteration  20: 2241820.651 ops/s
Iteration  21: 2223634.970 ops/s
Iteration  22: 2224537.499 ops/s
Iteration  23: 2226021.202 ops/s
Iteration  24: 2221368.807 ops/s
Iteration  25: 2227465.940 ops/s
Iteration  26: 2222326.347 ops/s
Iteration  27: 2214193.903 ops/s
Iteration  28: 2189565.121 ops/s
Iteration  29: 2219261.193 ops/s
Iteration  30: 2223958.212 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip6":
  2223740.485 ±(99.9%) 7178.835 ops/s [Average]
  (min, avg, max) = (2189565.121, 2223740.485, 2241820.651), stdev = 10744.943
  CI (99.9%): [2216561.650, 2230919.320] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_zip6  thrpt   30  2223740.485 ± 7178.835  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip7$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip7

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1046554.037 ops/s
# Warmup Iteration   2: 1661239.573 ops/s
# Warmup Iteration   3: 1929426.869 ops/s
# Warmup Iteration   4: 1915956.574 ops/s
# Warmup Iteration   5: 1933142.121 ops/s
# Warmup Iteration   6: 1922867.674 ops/s
# Warmup Iteration   7: 1914440.644 ops/s
# Warmup Iteration   8: 1940589.196 ops/s
# Warmup Iteration   9: 1938463.608 ops/s
# Warmup Iteration  10: 1916349.913 ops/s
# Warmup Iteration  11: 1941812.356 ops/s
# Warmup Iteration  12: 1939287.691 ops/s
# Warmup Iteration  13: 1933330.404 ops/s
# Warmup Iteration  14: 1920319.983 ops/s
# Warmup Iteration  15: 1931694.125 ops/s
# Warmup Iteration  16: 1934238.067 ops/s
# Warmup Iteration  17: 1937097.117 ops/s
# Warmup Iteration  18: 1923670.815 ops/s
# Warmup Iteration  19: 1930987.944 ops/s
# Warmup Iteration  20: 1923512.265 ops/s
# Warmup Iteration  21: 1932270.071 ops/s
# Warmup Iteration  22: 1931986.581 ops/s
# Warmup Iteration  23: 1935794.939 ops/s
# Warmup Iteration  24: 1932021.721 ops/s
# Warmup Iteration  25: 1938232.520 ops/s
# Warmup Iteration  26: 1922407.422 ops/s
# Warmup Iteration  27: 1921446.458 ops/s
# Warmup Iteration  28: 1934152.795 ops/s
# Warmup Iteration  29: 1889248.320 ops/s
# Warmup Iteration  30: 1922873.812 ops/s
Iteration   1: 1935152.372 ops/s
Iteration   2: 1942277.534 ops/s
Iteration   3: 1935681.762 ops/s
Iteration   4: 1930877.615 ops/s
Iteration   5: 1918319.294 ops/s
Iteration   6: 1923979.425 ops/s
Iteration   7: 1929778.429 ops/s
Iteration   8: 1922674.917 ops/s
Iteration   9: 1924481.009 ops/s
Iteration  10: 1933281.798 ops/s
Iteration  11: 1923800.169 ops/s
Iteration  12: 1929487.025 ops/s
Iteration  13: 1930086.076 ops/s
Iteration  14: 1914808.445 ops/s
Iteration  15: 1926842.587 ops/s
Iteration  16: 1922025.827 ops/s
Iteration  17: 1917766.568 ops/s
Iteration  18: 1923467.700 ops/s
Iteration  19: 1942121.205 ops/s
Iteration  20: 1924480.370 ops/s
Iteration  21: 1939117.106 ops/s
Iteration  22: 1920590.466 ops/s
Iteration  23: 1928114.459 ops/s
Iteration  24: 1923512.927 ops/s
Iteration  25: 1933006.056 ops/s
Iteration  26: 1917924.322 ops/s
Iteration  27: 1922816.956 ops/s
Iteration  28: 1930512.458 ops/s
Iteration  29: 1938692.651 ops/s
Iteration  30: 1932670.274 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip7":
  1927944.927 ±(99.9%) 4917.021 ops/s [Average]
  (min, avg, max) = (1914808.445, 1927944.927, 1942277.534), stdev = 7359.567
  CI (99.9%): [1923027.905, 1932861.948] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_zip7  thrpt   30  1927944.927 ± 4917.021  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip8$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip8

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 990293.243 ops/s
# Warmup Iteration   2: 1582081.097 ops/s
# Warmup Iteration   3: 1834292.092 ops/s
# Warmup Iteration   4: 1846338.077 ops/s
# Warmup Iteration   5: 1838908.886 ops/s
# Warmup Iteration   6: 1833003.732 ops/s
# Warmup Iteration   7: 1839135.766 ops/s
# Warmup Iteration   8: 1860691.004 ops/s
# Warmup Iteration   9: 1811774.777 ops/s
# Warmup Iteration  10: 1842062.040 ops/s
# Warmup Iteration  11: 1858523.987 ops/s
# Warmup Iteration  12: 1838027.551 ops/s
# Warmup Iteration  13: 1853344.279 ops/s
# Warmup Iteration  14: 1843934.032 ops/s
# Warmup Iteration  15: 1844783.672 ops/s
# Warmup Iteration  16: 1845447.181 ops/s
# Warmup Iteration  17: 1831103.761 ops/s
# Warmup Iteration  18: 1826215.379 ops/s
# Warmup Iteration  19: 1836120.235 ops/s
# Warmup Iteration  20: 1832537.575 ops/s
# Warmup Iteration  21: 1827570.006 ops/s
# Warmup Iteration  22: 1834032.681 ops/s
# Warmup Iteration  23: 1835077.938 ops/s
# Warmup Iteration  24: 1845158.570 ops/s
# Warmup Iteration  25: 1831238.264 ops/s
# Warmup Iteration  26: 1835139.691 ops/s
# Warmup Iteration  27: 1842919.403 ops/s
# Warmup Iteration  28: 1822657.018 ops/s
# Warmup Iteration  29: 1843913.306 ops/s
# Warmup Iteration  30: 1841781.201 ops/s
Iteration   1: 1828238.379 ops/s
Iteration   2: 1835379.968 ops/s
Iteration   3: 1833029.042 ops/s
Iteration   4: 1837618.484 ops/s
Iteration   5: 1836356.672 ops/s
Iteration   6: 1840436.701 ops/s
Iteration   7: 1826351.574 ops/s
Iteration   8: 1843174.622 ops/s
Iteration   9: 1842731.868 ops/s
Iteration  10: 1839170.172 ops/s
Iteration  11: 1847022.803 ops/s
Iteration  12: 1828283.056 ops/s
Iteration  13: 1836426.496 ops/s
Iteration  14: 1833389.661 ops/s
Iteration  15: 1833764.284 ops/s
Iteration  16: 1829071.384 ops/s
Iteration  17: 1846135.214 ops/s
Iteration  18: 1832580.811 ops/s
Iteration  19: 1835554.179 ops/s
Iteration  20: 1838053.977 ops/s
Iteration  21: 1858706.523 ops/s
Iteration  22: 1830115.718 ops/s
Iteration  23: 1823948.228 ops/s
Iteration  24: 1826587.695 ops/s
Iteration  25: 1824001.690 ops/s
Iteration  26: 1819133.475 ops/s
Iteration  27: 1831569.333 ops/s
Iteration  28: 1835883.753 ops/s
Iteration  29: 1834278.625 ops/s
Iteration  30: 1837042.401 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip8":
  1834801.226 ±(99.9%) 5328.714 ops/s [Average]
  (min, avg, max) = (1819133.475, 1834801.226, 1858706.523), stdev = 7975.768
  CI (99.9%): [1829472.513, 1840129.940] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_zip8  thrpt   30  1834801.226 ± 5328.714  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip9$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip9

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 896041.585 ops/s
# Warmup Iteration   2: 1454454.862 ops/s
# Warmup Iteration   3: 1705905.010 ops/s
# Warmup Iteration   4: 1703963.282 ops/s
# Warmup Iteration   5: 1721991.037 ops/s
# Warmup Iteration   6: 1693613.369 ops/s
# Warmup Iteration   7: 1696427.220 ops/s
# Warmup Iteration   8: 1713410.399 ops/s
# Warmup Iteration   9: 1702578.825 ops/s
# Warmup Iteration  10: 1716546.259 ops/s
# Warmup Iteration  11: 1695490.279 ops/s
# Warmup Iteration  12: 1717649.797 ops/s
# Warmup Iteration  13: 1685395.669 ops/s
# Warmup Iteration  14: 1716567.066 ops/s
# Warmup Iteration  15: 1715604.602 ops/s
# Warmup Iteration  16: 1703882.607 ops/s
# Warmup Iteration  17: 1706840.910 ops/s
# Warmup Iteration  18: 1701459.165 ops/s
# Warmup Iteration  19: 1703509.709 ops/s
# Warmup Iteration  20: 1703328.295 ops/s
# Warmup Iteration  21: 1700867.719 ops/s
# Warmup Iteration  22: 1704700.694 ops/s
# Warmup Iteration  23: 1717818.057 ops/s
# Warmup Iteration  24: 1712678.239 ops/s
# Warmup Iteration  25: 1706764.148 ops/s
# Warmup Iteration  26: 1713496.936 ops/s
# Warmup Iteration  27: 1719264.034 ops/s
# Warmup Iteration  28: 1716554.486 ops/s
# Warmup Iteration  29: 1710665.696 ops/s
# Warmup Iteration  30: 1715888.534 ops/s
Iteration   1: 1708946.099 ops/s
Iteration   2: 1709154.306 ops/s
Iteration   3: 1710622.807 ops/s
Iteration   4: 1703142.937 ops/s
Iteration   5: 1708454.945 ops/s
Iteration   6: 1705298.138 ops/s
Iteration   7: 1706283.847 ops/s
Iteration   8: 1675338.540 ops/s
Iteration   9: 1712770.201 ops/s
Iteration  10: 1705645.145 ops/s
Iteration  11: 1695765.789 ops/s
Iteration  12: 1707354.844 ops/s
Iteration  13: 1718249.464 ops/s
Iteration  14: 1713854.937 ops/s
Iteration  15: 1712237.265 ops/s
Iteration  16: 1702191.490 ops/s
Iteration  17: 1704234.203 ops/s
Iteration  18: 1702323.954 ops/s
Iteration  19: 1702594.271 ops/s
Iteration  20: 1708158.079 ops/s
Iteration  21: 1701870.118 ops/s
Iteration  22: 1711565.311 ops/s
Iteration  23: 1711361.742 ops/s
Iteration  24: 1714005.925 ops/s
Iteration  25: 1705051.580 ops/s
Iteration  26: 1706495.407 ops/s
Iteration  27: 1712057.747 ops/s
Iteration  28: 1700139.994 ops/s
Iteration  29: 1717490.316 ops/s
Iteration  30: 1705665.777 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip9":
  1706610.839 ±(99.9%) 5233.543 ops/s [Average]
  (min, avg, max) = (1675338.540, 1706610.839, 1718249.464), stdev = 7833.321
  CI (99.9%): [1701377.296, 1711844.382] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt        Score      Error  Units
MaybeTest._Benchmark.benchmark_zip9  thrpt   30  1706610.839 ± 5233.543  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ignoreElementErrorMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ignoreElementErrorMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 721787.906 ops/s
# Warmup Iteration   2: 819703.678 ops/s
# Warmup Iteration   3: 913996.718 ops/s
# Warmup Iteration   4: 853893.007 ops/s
# Warmup Iteration   5: 939319.248 ops/s
# Warmup Iteration   6: 946897.858 ops/s
# Warmup Iteration   7: 940488.395 ops/s
# Warmup Iteration   8: 943916.222 ops/s
# Warmup Iteration   9: 942596.795 ops/s
# Warmup Iteration  10: 945479.606 ops/s
# Warmup Iteration  11: 942626.932 ops/s
# Warmup Iteration  12: 944667.559 ops/s
# Warmup Iteration  13: 935991.382 ops/s
# Warmup Iteration  14: 944699.302 ops/s
# Warmup Iteration  15: 941411.616 ops/s
# Warmup Iteration  16: 948301.516 ops/s
# Warmup Iteration  17: 989859.495 ops/s
# Warmup Iteration  18: 992022.093 ops/s
# Warmup Iteration  19: 986368.883 ops/s
# Warmup Iteration  20: 990872.974 ops/s
# Warmup Iteration  21: 995131.356 ops/s
# Warmup Iteration  22: 993612.508 ops/s
# Warmup Iteration  23: 995514.562 ops/s
# Warmup Iteration  24: 998718.983 ops/s
# Warmup Iteration  25: 996497.538 ops/s
# Warmup Iteration  26: 987851.894 ops/s
# Warmup Iteration  27: 995422.853 ops/s
# Warmup Iteration  28: 994412.210 ops/s
# Warmup Iteration  29: 992722.123 ops/s
# Warmup Iteration  30: 989024.121 ops/s
Iteration   1: 1001923.403 ops/s
Iteration   2: 990192.692 ops/s
Iteration   3: 994922.354 ops/s
Iteration   4: 989606.124 ops/s
Iteration   5: 989167.394 ops/s
Iteration   6: 986204.759 ops/s
Iteration   7: 984588.864 ops/s
Iteration   8: 992277.854 ops/s
Iteration   9: 989111.822 ops/s
Iteration  10: 991103.197 ops/s
Iteration  11: 994764.723 ops/s
Iteration  12: 993818.067 ops/s
Iteration  13: 1000744.919 ops/s
Iteration  14: 996828.125 ops/s
Iteration  15: 983743.772 ops/s
Iteration  16: 984908.635 ops/s
Iteration  17: 992444.698 ops/s
Iteration  18: 979261.487 ops/s
Iteration  19: 989285.342 ops/s
Iteration  20: 992007.060 ops/s
Iteration  21: 994452.527 ops/s
Iteration  22: 994584.989 ops/s
Iteration  23: 988914.931 ops/s
Iteration  24: 989277.875 ops/s
Iteration  25: 985093.753 ops/s
Iteration  26: 987640.933 ops/s
Iteration  27: 987482.272 ops/s
Iteration  28: 992832.376 ops/s
Iteration  29: 994087.524 ops/s
Iteration  30: 977059.034 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ignoreElementErrorMaybe":
  990277.717 ±(99.9%) 3673.716 ops/s [Average]
  (min, avg, max) = (977059.034, 990277.717, 1001923.403), stdev = 5498.646
  CI (99.9%): [986604.000, 993951.433] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_ignoreElementErrorMaybe  thrpt   30  990277.717 ± 3673.716  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_liftThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_liftThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 679775.339 ops/s
# Warmup Iteration   2: 822292.981 ops/s
# Warmup Iteration   3: 825062.062 ops/s
# Warmup Iteration   4: 884786.799 ops/s
# Warmup Iteration   5: 888380.860 ops/s
# Warmup Iteration   6: 888628.923 ops/s
# Warmup Iteration   7: 880814.146 ops/s
# Warmup Iteration   8: 885940.436 ops/s
# Warmup Iteration   9: 882633.564 ops/s
# Warmup Iteration  10: 883467.284 ops/s
# Warmup Iteration  11: 883683.750 ops/s
# Warmup Iteration  12: 881081.741 ops/s
# Warmup Iteration  13: 882404.318 ops/s
# Warmup Iteration  14: 879229.966 ops/s
# Warmup Iteration  15: 880739.893 ops/s
# Warmup Iteration  16: 874488.337 ops/s
# Warmup Iteration  17: 928720.303 ops/s
# Warmup Iteration  18: 924424.705 ops/s
# Warmup Iteration  19: 927497.286 ops/s
# Warmup Iteration  20: 930358.975 ops/s
# Warmup Iteration  21: 926853.180 ops/s
# Warmup Iteration  22: 925532.292 ops/s
# Warmup Iteration  23: 929775.819 ops/s
# Warmup Iteration  24: 926352.145 ops/s
# Warmup Iteration  25: 929026.149 ops/s
# Warmup Iteration  26: 928701.157 ops/s
# Warmup Iteration  27: 937227.890 ops/s
# Warmup Iteration  28: 927449.402 ops/s
# Warmup Iteration  29: 925514.895 ops/s
# Warmup Iteration  30: 933845.477 ops/s
Iteration   1: 923342.060 ops/s
Iteration   2: 931180.929 ops/s
Iteration   3: 935982.867 ops/s
Iteration   4: 935392.891 ops/s
Iteration   5: 920127.714 ops/s
Iteration   6: 926613.496 ops/s
Iteration   7: 931271.645 ops/s
Iteration   8: 932308.249 ops/s
Iteration   9: 931616.404 ops/s
Iteration  10: 930257.007 ops/s
Iteration  11: 932371.807 ops/s
Iteration  12: 937307.680 ops/s
Iteration  13: 928658.289 ops/s
Iteration  14: 920597.805 ops/s
Iteration  15: 928137.767 ops/s
Iteration  16: 927215.105 ops/s
Iteration  17: 932933.942 ops/s
Iteration  18: 930676.016 ops/s
Iteration  19: 927671.075 ops/s
Iteration  20: 931776.025 ops/s
Iteration  21: 931066.263 ops/s
Iteration  22: 929210.741 ops/s
Iteration  23: 929759.051 ops/s
Iteration  24: 932235.166 ops/s
Iteration  25: 934113.935 ops/s
Iteration  26: 926797.704 ops/s
Iteration  27: 928916.610 ops/s
Iteration  28: 928192.777 ops/s
Iteration  29: 934030.916 ops/s
Iteration  30: 928863.402 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_liftThrows":
  929954.178 ±(99.9%) 2670.034 ops/s [Average]
  (min, avg, max) = (920127.714, 929954.178, 937307.680), stdev = 3996.381
  CI (99.9%): [927284.144, 932624.212] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_liftThrows  thrpt   30  929954.178 ± 2670.034  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_using$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_using

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2968404.086 ops/s
# Warmup Iteration   2: 5037461.364 ops/s
# Warmup Iteration   3: 5468088.690 ops/s
# Warmup Iteration   4: 5489563.695 ops/s
# Warmup Iteration   5: 5430922.347 ops/s
# Warmup Iteration   6: 5516503.778 ops/s
# Warmup Iteration   7: 5445854.908 ops/s
# Warmup Iteration   8: 5453027.409 ops/s
# Warmup Iteration   9: 5431989.262 ops/s
# Warmup Iteration  10: 5479842.172 ops/s
# Warmup Iteration  11: 5466256.584 ops/s
# Warmup Iteration  12: 5457976.024 ops/s
# Warmup Iteration  13: 5475792.986 ops/s
# Warmup Iteration  14: 5470974.710 ops/s
# Warmup Iteration  15: 5460643.940 ops/s
# Warmup Iteration  16: 5483011.995 ops/s
# Warmup Iteration  17: 5494150.993 ops/s
# Warmup Iteration  18: 5460583.008 ops/s
# Warmup Iteration  19: 5493575.603 ops/s
# Warmup Iteration  20: 5480140.517 ops/s
# Warmup Iteration  21: 5502739.585 ops/s
# Warmup Iteration  22: 5516847.073 ops/s
# Warmup Iteration  23: 5479714.444 ops/s
# Warmup Iteration  24: 5513437.513 ops/s
# Warmup Iteration  25: 5497271.740 ops/s
# Warmup Iteration  26: 5514671.072 ops/s
# Warmup Iteration  27: 5479205.872 ops/s
# Warmup Iteration  28: 5473890.123 ops/s
# Warmup Iteration  29: 5490323.274 ops/s
# Warmup Iteration  30: 5492017.363 ops/s
Iteration   1: 5440060.441 ops/s
Iteration   2: 5490291.927 ops/s
Iteration   3: 5472269.643 ops/s
Iteration   4: 5472208.954 ops/s
Iteration   5: 5485308.764 ops/s
Iteration   6: 5475501.508 ops/s
Iteration   7: 5475406.743 ops/s
Iteration   8: 5472334.783 ops/s
Iteration   9: 5485764.199 ops/s
Iteration  10: 5489083.465 ops/s
Iteration  11: 5452974.016 ops/s
Iteration  12: 5457105.949 ops/s
Iteration  13: 5492290.380 ops/s
Iteration  14: 5479653.820 ops/s
Iteration  15: 5486339.402 ops/s
Iteration  16: 5458022.387 ops/s
Iteration  17: 5460645.516 ops/s
Iteration  18: 5504219.176 ops/s
Iteration  19: 5472266.176 ops/s
Iteration  20: 5437887.247 ops/s
Iteration  21: 5449373.169 ops/s
Iteration  22: 5517304.131 ops/s
Iteration  23: 5449768.278 ops/s
Iteration  24: 5451884.180 ops/s
Iteration  25: 5471591.956 ops/s
Iteration  26: 5463083.294 ops/s
Iteration  27: 5524905.412 ops/s
Iteration  28: 5475496.110 ops/s
Iteration  29: 5470906.381 ops/s
Iteration  30: 5515779.151 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_using":
  5474990.885 ±(99.9%) 14588.510 ops/s [Average]
  (min, avg, max) = (5437887.247, 5474990.885, 5524905.412), stdev = 21835.396
  CI (99.9%): [5460402.376, 5489579.395] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_using  thrpt   30  5474990.885 ± 14588.510  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_usingNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_usingNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2870526.398 ops/s
# Warmup Iteration   2: 4943811.494 ops/s
# Warmup Iteration   3: 5710726.059 ops/s
# Warmup Iteration   4: 5699224.751 ops/s
# Warmup Iteration   5: 5762090.959 ops/s
# Warmup Iteration   6: 5735903.325 ops/s
# Warmup Iteration   7: 5694751.088 ops/s
# Warmup Iteration   8: 5726290.005 ops/s
# Warmup Iteration   9: 5753225.816 ops/s
# Warmup Iteration  10: 5671780.114 ops/s
# Warmup Iteration  11: 5687755.499 ops/s
# Warmup Iteration  12: 5649360.871 ops/s
# Warmup Iteration  13: 5714045.284 ops/s
# Warmup Iteration  14: 5731984.128 ops/s
# Warmup Iteration  15: 5753952.358 ops/s
# Warmup Iteration  16: 5692031.069 ops/s
# Warmup Iteration  17: 5728450.459 ops/s
# Warmup Iteration  18: 5725246.718 ops/s
# Warmup Iteration  19: 5729296.022 ops/s
# Warmup Iteration  20: 5742935.198 ops/s
# Warmup Iteration  21: 5749616.975 ops/s
# Warmup Iteration  22: 5753893.579 ops/s
# Warmup Iteration  23: 5762820.677 ops/s
# Warmup Iteration  24: 5722737.485 ops/s
# Warmup Iteration  25: 5705948.146 ops/s
# Warmup Iteration  26: 5727268.861 ops/s
# Warmup Iteration  27: 5742820.034 ops/s
# Warmup Iteration  28: 5688460.878 ops/s
# Warmup Iteration  29: 5717394.638 ops/s
# Warmup Iteration  30: 5737713.771 ops/s
Iteration   1: 5703409.000 ops/s
Iteration   2: 5719464.839 ops/s
Iteration   3: 5729500.541 ops/s
Iteration   4: 5694518.599 ops/s
Iteration   5: 5758799.655 ops/s
Iteration   6: 5714439.693 ops/s
Iteration   7: 5740078.907 ops/s
Iteration   8: 5694938.654 ops/s
Iteration   9: 5693006.439 ops/s
Iteration  10: 5749501.796 ops/s
Iteration  11: 5717801.245 ops/s
Iteration  12: 5727591.975 ops/s
Iteration  13: 5752514.077 ops/s
Iteration  14: 5741135.173 ops/s
Iteration  15: 5712370.815 ops/s
Iteration  16: 5771839.765 ops/s
Iteration  17: 5699134.520 ops/s
Iteration  18: 5742226.336 ops/s
Iteration  19: 5750835.876 ops/s
Iteration  20: 5686261.705 ops/s
Iteration  21: 5735812.578 ops/s
Iteration  22: 5614639.921 ops/s
Iteration  23: 5716118.197 ops/s
Iteration  24: 5739666.295 ops/s
Iteration  25: 5739917.823 ops/s
Iteration  26: 5748345.561 ops/s
Iteration  27: 5731967.749 ops/s
Iteration  28: 5737898.542 ops/s
Iteration  29: 5708379.706 ops/s
Iteration  30: 5700332.549 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_usingNonEager":
  5722414.951 ±(99.9%) 20110.605 ops/s [Average]
  (min, avg, max) = (5614639.921, 5722414.951, 5771839.765), stdev = 30100.609
  CI (99.9%): [5702304.346, 5742525.556] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_usingNonEager  thrpt   30  5722414.951 ± 20110.605  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 707528.168 ops/s
# Warmup Iteration   2: 803913.929 ops/s
# Warmup Iteration   3: 874313.289 ops/s
# Warmup Iteration   4: 810094.288 ops/s
# Warmup Iteration   5: 919105.692 ops/s
# Warmup Iteration   6: 920245.845 ops/s
# Warmup Iteration   7: 917607.551 ops/s
# Warmup Iteration   8: 927403.767 ops/s
# Warmup Iteration   9: 917391.023 ops/s
# Warmup Iteration  10: 919913.908 ops/s
# Warmup Iteration  11: 921358.959 ops/s
# Warmup Iteration  12: 924973.531 ops/s
# Warmup Iteration  13: 918293.718 ops/s
# Warmup Iteration  14: 918357.708 ops/s
# Warmup Iteration  15: 925859.692 ops/s
# Warmup Iteration  16: 920877.943 ops/s
# Warmup Iteration  17: 962873.627 ops/s
# Warmup Iteration  18: 967986.336 ops/s
# Warmup Iteration  19: 969479.998 ops/s
# Warmup Iteration  20: 962511.622 ops/s
# Warmup Iteration  21: 967932.261 ops/s
# Warmup Iteration  22: 961392.625 ops/s
# Warmup Iteration  23: 960025.199 ops/s
# Warmup Iteration  24: 947822.286 ops/s
# Warmup Iteration  25: 956843.830 ops/s
# Warmup Iteration  26: 955610.115 ops/s
# Warmup Iteration  27: 964423.651 ops/s
# Warmup Iteration  28: 964466.139 ops/s
# Warmup Iteration  29: 965539.071 ops/s
# Warmup Iteration  30: 965901.865 ops/s
Iteration   1: 957019.978 ops/s
Iteration   2: 962117.388 ops/s
Iteration   3: 964603.563 ops/s
Iteration   4: 961609.670 ops/s
Iteration   5: 964475.252 ops/s
Iteration   6: 947754.362 ops/s
Iteration   7: 957730.601 ops/s
Iteration   8: 963815.928 ops/s
Iteration   9: 967797.230 ops/s
Iteration  10: 965906.422 ops/s
Iteration  11: 966256.454 ops/s
Iteration  12: 965911.549 ops/s
Iteration  13: 963907.529 ops/s
Iteration  14: 967198.746 ops/s
Iteration  15: 960201.949 ops/s
Iteration  16: 969008.303 ops/s
Iteration  17: 966087.473 ops/s
Iteration  18: 953440.173 ops/s
Iteration  19: 960689.028 ops/s
Iteration  20: 943791.559 ops/s
Iteration  21: 961947.146 ops/s
Iteration  22: 962327.282 ops/s
Iteration  23: 965695.622 ops/s
Iteration  24: 965041.714 ops/s
Iteration  25: 964924.945 ops/s
Iteration  26: 969544.209 ops/s
Iteration  27: 964214.552 ops/s
Iteration  28: 961293.312 ops/s
Iteration  29: 966810.622 ops/s
Iteration  30: 966033.318 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterableOneIsNull":
  962571.863 ±(99.9%) 3872.696 ops/s [Average]
  (min, avg, max) = (943791.559, 962571.863, 969544.209), stdev = 5796.470
  CI (99.9%): [958699.166, 966444.559] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_ambIterableOneIsNull  thrpt   30  962571.863 ± 3872.696  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_badInnerSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_badInnerSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 111044.766 ops/s
# Warmup Iteration   2: 159248.985 ops/s
# Warmup Iteration   3: 191027.758 ops/s
# Warmup Iteration   4: 178219.777 ops/s
# Warmup Iteration   5: 194435.536 ops/s
# Warmup Iteration   6: 193805.358 ops/s
# Warmup Iteration   7: 193725.426 ops/s
# Warmup Iteration   8: 193266.308 ops/s
# Warmup Iteration   9: 193185.079 ops/s
# Warmup Iteration  10: 193851.407 ops/s
# Warmup Iteration  11: 194631.642 ops/s
# Warmup Iteration  12: 194262.625 ops/s
# Warmup Iteration  13: 192489.192 ops/s
# Warmup Iteration  14: 193101.399 ops/s
# Warmup Iteration  15: 192412.829 ops/s
# Warmup Iteration  16: 191017.911 ops/s
# Warmup Iteration  17: 198098.476 ops/s
# Warmup Iteration  18: 199477.333 ops/s
# Warmup Iteration  19: 198869.672 ops/s
# Warmup Iteration  20: 197926.122 ops/s
# Warmup Iteration  21: 199186.514 ops/s
# Warmup Iteration  22: 198955.531 ops/s
# Warmup Iteration  23: 195595.065 ops/s
# Warmup Iteration  24: 198505.334 ops/s
# Warmup Iteration  25: 199816.961 ops/s
# Warmup Iteration  26: 198484.516 ops/s
# Warmup Iteration  27: 198208.406 ops/s
# Warmup Iteration  28: 199161.926 ops/s
# Warmup Iteration  29: 197573.179 ops/s
# Warmup Iteration  30: 199712.214 ops/s
Iteration   1: 198980.522 ops/s
Iteration   2: 198282.153 ops/s
Iteration   3: 197654.778 ops/s
Iteration   4: 198579.158 ops/s
Iteration   5: 199748.151 ops/s
Iteration   6: 200131.715 ops/s
Iteration   7: 199328.316 ops/s
Iteration   8: 197628.601 ops/s
Iteration   9: 198096.833 ops/s
Iteration  10: 199612.958 ops/s
Iteration  11: 200465.774 ops/s
Iteration  12: 198325.008 ops/s
Iteration  13: 200054.697 ops/s
Iteration  14: 199468.335 ops/s
Iteration  15: 198604.839 ops/s
Iteration  16: 198252.651 ops/s
Iteration  17: 198549.134 ops/s
Iteration  18: 198930.347 ops/s
Iteration  19: 198458.232 ops/s
Iteration  20: 197374.842 ops/s
Iteration  21: 198797.587 ops/s
Iteration  22: 198183.849 ops/s
Iteration  23: 199474.417 ops/s
Iteration  24: 198258.969 ops/s
Iteration  25: 198706.291 ops/s
Iteration  26: 199398.135 ops/s
Iteration  27: 199419.241 ops/s
Iteration  28: 197964.310 ops/s
Iteration  29: 197924.535 ops/s
Iteration  30: 198251.302 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_badInnerSource":
  198763.523 ±(99.9%) 531.171 ops/s [Average]
  (min, avg, max) = (197374.842, 198763.523, 200465.774), stdev = 795.031
  CI (99.9%): [198232.352, 199294.693] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_badInnerSource  thrpt   30  198763.523 ± 531.171  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3307113.520 ops/s
# Warmup Iteration   2: 4462301.753 ops/s
# Warmup Iteration   3: 5161783.146 ops/s
# Warmup Iteration   4: 5295494.048 ops/s
# Warmup Iteration   5: 5453107.439 ops/s
# Warmup Iteration   6: 5425220.936 ops/s
# Warmup Iteration   7: 5421182.822 ops/s
# Warmup Iteration   8: 5421673.943 ops/s
# Warmup Iteration   9: 5426266.033 ops/s
# Warmup Iteration  10: 5376203.172 ops/s
# Warmup Iteration  11: 5394756.595 ops/s
# Warmup Iteration  12: 5391505.774 ops/s
# Warmup Iteration  13: 5405763.594 ops/s
# Warmup Iteration  14: 5402876.123 ops/s
# Warmup Iteration  15: 5464202.335 ops/s
# Warmup Iteration  16: 5396435.203 ops/s
# Warmup Iteration  17: 5453788.810 ops/s
# Warmup Iteration  18: 5391947.860 ops/s
# Warmup Iteration  19: 5417723.017 ops/s
# Warmup Iteration  20: 5409276.867 ops/s
# Warmup Iteration  21: 5457343.937 ops/s
# Warmup Iteration  22: 5469642.691 ops/s
# Warmup Iteration  23: 5399553.524 ops/s
# Warmup Iteration  24: 5442970.981 ops/s
# Warmup Iteration  25: 5434097.106 ops/s
# Warmup Iteration  26: 5451013.332 ops/s
# Warmup Iteration  27: 5453488.706 ops/s
# Warmup Iteration  28: 5463063.701 ops/s
# Warmup Iteration  29: 5426048.474 ops/s
# Warmup Iteration  30: 5411759.458 ops/s
Iteration   1: 5441061.778 ops/s
Iteration   2: 5453809.523 ops/s
Iteration   3: 5432420.176 ops/s
Iteration   4: 5447729.805 ops/s
Iteration   5: 5437968.498 ops/s
Iteration   6: 5437557.033 ops/s
Iteration   7: 5464506.497 ops/s
Iteration   8: 5468299.876 ops/s
Iteration   9: 5484402.932 ops/s
Iteration  10: 5446187.336 ops/s
Iteration  11: 5454004.626 ops/s
Iteration  12: 5484625.834 ops/s
Iteration  13: 5460747.161 ops/s
Iteration  14: 5442881.497 ops/s
Iteration  15: 5411715.828 ops/s
Iteration  16: 5364279.412 ops/s
Iteration  17: 5421156.917 ops/s
Iteration  18: 5343175.341 ops/s
Iteration  19: 5442337.911 ops/s
Iteration  20: 5408769.382 ops/s
Iteration  21: 5396973.556 ops/s
Iteration  22: 5471316.179 ops/s
Iteration  23: 5464613.575 ops/s
Iteration  24: 5460211.963 ops/s
Iteration  25: 5410469.677 ops/s
Iteration  26: 5415909.901 ops/s
Iteration  27: 5460474.013 ops/s
Iteration  28: 5314687.271 ops/s
Iteration  29: 5421407.176 ops/s
Iteration  30: 5378677.214 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_disposed":
  5431412.596 ±(99.9%) 26872.806 ops/s [Average]
  (min, avg, max) = (5314687.271, 5431412.596, 5484625.834), stdev = 40221.954
  CI (99.9%): [5404539.790, 5458285.402] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_disposed  thrpt   30  5431412.596 ± 26872.806  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_ambLots$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_ambLots

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 404954.152 ops/s
# Warmup Iteration   2: 515176.550 ops/s
# Warmup Iteration   3: 580048.608 ops/s
# Warmup Iteration   4: 788677.501 ops/s
# Warmup Iteration   5: 1056898.249 ops/s
# Warmup Iteration   6: 1051918.347 ops/s
# Warmup Iteration   7: 1049946.566 ops/s
# Warmup Iteration   8: 1056829.736 ops/s
# Warmup Iteration   9: 1054426.076 ops/s
# Warmup Iteration  10: 1054752.276 ops/s
# Warmup Iteration  11: 1047259.953 ops/s
# Warmup Iteration  12: 1050502.956 ops/s
# Warmup Iteration  13: 1048867.991 ops/s
# Warmup Iteration  14: 1056195.636 ops/s
# Warmup Iteration  15: 1058626.829 ops/s
# Warmup Iteration  16: 1051290.148 ops/s
# Warmup Iteration  17: 1038580.667 ops/s
# Warmup Iteration  18: 1051865.577 ops/s
# Warmup Iteration  19: 1051999.576 ops/s
# Warmup Iteration  20: 1054849.346 ops/s
# Warmup Iteration  21: 1051767.249 ops/s
# Warmup Iteration  22: 1058981.713 ops/s
# Warmup Iteration  23: 1049259.371 ops/s
# Warmup Iteration  24: 1053357.698 ops/s
# Warmup Iteration  25: 1052245.718 ops/s
# Warmup Iteration  26: 1052684.810 ops/s
# Warmup Iteration  27: 1049984.151 ops/s
# Warmup Iteration  28: 1052128.048 ops/s
# Warmup Iteration  29: 1053962.934 ops/s
# Warmup Iteration  30: 1055508.867 ops/s
Iteration   1: 1058360.599 ops/s
Iteration   2: 1051199.585 ops/s
Iteration   3: 1039895.245 ops/s
Iteration   4: 1052852.413 ops/s
Iteration   5: 1065140.025 ops/s
Iteration   6: 1045161.460 ops/s
Iteration   7: 1036124.873 ops/s
Iteration   8: 1056373.645 ops/s
Iteration   9: 1055636.804 ops/s
Iteration  10: 1055298.280 ops/s
Iteration  11: 1054062.097 ops/s
Iteration  12: 1053825.555 ops/s
Iteration  13: 1048449.670 ops/s
Iteration  14: 1054085.215 ops/s
Iteration  15: 1056617.943 ops/s
Iteration  16: 1054527.655 ops/s
Iteration  17: 1049275.175 ops/s
Iteration  18: 1059098.504 ops/s
Iteration  19: 1058840.141 ops/s
Iteration  20: 1054393.485 ops/s
Iteration  21: 1055016.329 ops/s
Iteration  22: 1052622.069 ops/s
Iteration  23: 1055926.121 ops/s
Iteration  24: 1055221.960 ops/s
Iteration  25: 1061079.609 ops/s
Iteration  26: 1053512.274 ops/s
Iteration  27: 1049738.638 ops/s
Iteration  28: 1048204.871 ops/s
Iteration  29: 1050386.202 ops/s
Iteration  30: 1046894.064 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_ambLots":
  1052927.350 ±(99.9%) 3938.976 ops/s [Average]
  (min, avg, max) = (1036124.873, 1052927.350, 1065140.025), stdev = 5895.674
  CI (99.9%): [1048988.374, 1056866.326] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score      Error  Units
MaybeAmbTest._Benchmark.benchmark_ambLots  thrpt   30  1052927.350 ± 3938.976  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.IoSchedulerInternalTest._Benchmark.benchmark_noExpiredWorker$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.IoSchedulerInternalTest._Benchmark.benchmark_noExpiredWorker

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 230409.577 ops/s
# Warmup Iteration   2: 239615.127 ops/s
# Warmup Iteration   3: 399061.113 ops/s
# Warmup Iteration   4: 371595.630 ops/s
# Warmup Iteration   5: 448182.259 ops/s
# Warmup Iteration   6: 438221.192 ops/s
# Warmup Iteration   7: 349231.298 ops/s
# Warmup Iteration   8: 480501.055 ops/s
# Warmup Iteration   9: 369240.701 ops/s
# Warmup Iteration  10: 384915.782 ops/s
# Warmup Iteration  11: 485031.726 ops/s
# Warmup Iteration  12: 357502.919 ops/s
# Warmup Iteration  13: 478363.114 ops/s
# Warmup Iteration  14: 362733.612 ops/s
# Warmup Iteration  15: 457335.847 ops/s
# Warmup Iteration  16: 359805.439 ops/s
# Warmup Iteration  17: 471778.767 ops/s
# Warmup Iteration  18: 368229.524 ops/s
# Warmup Iteration  19: 471561.248 ops/s
# Warmup Iteration  20: 376672.397 ops/s
# Warmup Iteration  21: 465271.479 ops/s
# Warmup Iteration  22: 375143.245 ops/s
# Warmup Iteration  23: 462189.807 ops/s
# Warmup Iteration  24: 384670.876 ops/s
# Warmup Iteration  25: 458658.270 ops/s
# Warmup Iteration  26: 466424.736 ops/s
# Warmup Iteration  27: 330238.561 ops/s
# Warmup Iteration  28: 453903.276 ops/s
# Warmup Iteration  29: 465828.216 ops/s
# Warmup Iteration  30: 341678.861 ops/s
Iteration   1: 426739.450 ops/s
Iteration   2: 455231.492 ops/s
Iteration   3: 357115.653 ops/s
Iteration   4: 458234.285 ops/s
Iteration   5: 458208.004 ops/s
Iteration   6: 346093.877 ops/s
Iteration   7: 436795.752 ops/s
Iteration   8: 459761.951 ops/s
Iteration   9: 353979.454 ops/s
Iteration  10: 444444.294 ops/s
Iteration  11: 456374.735 ops/s
Iteration  12: 438373.614 ops/s
Iteration  13: 321389.492 ops/s
Iteration  14: 446082.228 ops/s
Iteration  15: 452026.953 ops/s
Iteration  16: 439168.022 ops/s
Iteration  17: 323655.854 ops/s
Iteration  18: 438932.877 ops/s
Iteration  19: 453734.177 ops/s
Iteration  20: 450626.852 ops/s
Iteration  21: 334983.721 ops/s
Iteration  22: 445493.640 ops/s
Iteration  23: 444644.056 ops/s
Iteration  24: 454035.288 ops/s
Iteration  25: 337569.903 ops/s
Iteration  26: 444346.801 ops/s
Iteration  27: 424493.063 ops/s
Iteration  28: 449705.680 ops/s
Iteration  29: 351511.598 ops/s
Iteration  30: 442330.765 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.IoSchedulerInternalTest._Benchmark.benchmark_noExpiredWorker":
  418202.784 ±(99.9%) 32505.398 ops/s [Average]
  (min, avg, max) = (321389.492, 418202.784, 459761.951), stdev = 48652.553
  CI (99.9%): [385697.387, 450708.182] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
IoSchedulerInternalTest._Benchmark.benchmark_noExpiredWorker  thrpt   30  418202.784 ± 32505.398  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_badSourceObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_badSourceObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 182825.372 ops/s
# Warmup Iteration   2: 258042.238 ops/s
# Warmup Iteration   3: 257463.580 ops/s
# Warmup Iteration   4: 294937.490 ops/s
# Warmup Iteration   5: 299536.644 ops/s
# Warmup Iteration   6: 298056.494 ops/s
# Warmup Iteration   7: 299235.334 ops/s
# Warmup Iteration   8: 298093.897 ops/s
# Warmup Iteration   9: 298786.710 ops/s
# Warmup Iteration  10: 296902.234 ops/s
# Warmup Iteration  11: 296942.914 ops/s
# Warmup Iteration  12: 296041.588 ops/s
# Warmup Iteration  13: 296162.332 ops/s
# Warmup Iteration  14: 294611.820 ops/s
# Warmup Iteration  15: 294559.087 ops/s
# Warmup Iteration  16: 295595.714 ops/s
# Warmup Iteration  17: 302759.524 ops/s
# Warmup Iteration  18: 304378.947 ops/s
# Warmup Iteration  19: 304713.494 ops/s
# Warmup Iteration  20: 304724.332 ops/s
# Warmup Iteration  21: 302799.139 ops/s
# Warmup Iteration  22: 305820.791 ops/s
# Warmup Iteration  23: 303119.650 ops/s
# Warmup Iteration  24: 304366.547 ops/s
# Warmup Iteration  25: 305603.183 ops/s
# Warmup Iteration  26: 306059.378 ops/s
# Warmup Iteration  27: 299670.127 ops/s
# Warmup Iteration  28: 303659.556 ops/s
# Warmup Iteration  29: 303449.003 ops/s
# Warmup Iteration  30: 301819.442 ops/s
Iteration   1: 303755.862 ops/s
Iteration   2: 304294.787 ops/s
Iteration   3: 302329.623 ops/s
Iteration   4: 304637.928 ops/s
Iteration   5: 304555.501 ops/s
Iteration   6: 303515.046 ops/s
Iteration   7: 304524.414 ops/s
Iteration   8: 303961.626 ops/s
Iteration   9: 304875.322 ops/s
Iteration  10: 304964.667 ops/s
Iteration  11: 304925.520 ops/s
Iteration  12: 304816.291 ops/s
Iteration  13: 305100.490 ops/s
Iteration  14: 304306.066 ops/s
Iteration  15: 303372.691 ops/s
Iteration  16: 303807.633 ops/s
Iteration  17: 304905.971 ops/s
Iteration  18: 304196.541 ops/s
Iteration  19: 303195.068 ops/s
Iteration  20: 303434.571 ops/s
Iteration  21: 303484.888 ops/s
Iteration  22: 305990.677 ops/s
Iteration  23: 303445.860 ops/s
Iteration  24: 304461.766 ops/s
Iteration  25: 305400.104 ops/s
Iteration  26: 303189.401 ops/s
Iteration  27: 304780.085 ops/s
Iteration  28: 301847.566 ops/s
Iteration  29: 303937.497 ops/s
Iteration  30: 303678.269 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_badSourceObservable":
  304123.058 ±(99.9%) 597.659 ops/s [Average]
  (min, avg, max) = (301847.566, 304123.058, 305990.677), stdev = 894.548
  CI (99.9%): [303525.398, 304720.717] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_badSourceObservable  thrpt   30  304123.058 ± 597.659  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_disposeThrowsIAE$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_disposeThrowsIAE

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 560463.054 ops/s
# Warmup Iteration   2: 605094.837 ops/s
# Warmup Iteration   3: 599711.272 ops/s
# Warmup Iteration   4: 647583.394 ops/s
# Warmup Iteration   5: 638857.048 ops/s
# Warmup Iteration   6: 640668.734 ops/s
# Warmup Iteration   7: 646492.083 ops/s
# Warmup Iteration   8: 644006.659 ops/s
# Warmup Iteration   9: 643547.584 ops/s
# Warmup Iteration  10: 643310.351 ops/s
# Warmup Iteration  11: 643649.390 ops/s
# Warmup Iteration  12: 644757.449 ops/s
# Warmup Iteration  13: 640750.007 ops/s
# Warmup Iteration  14: 643384.053 ops/s
# Warmup Iteration  15: 642729.905 ops/s
# Warmup Iteration  16: 631899.463 ops/s
# Warmup Iteration  17: 665608.104 ops/s
# Warmup Iteration  18: 665481.927 ops/s
# Warmup Iteration  19: 665030.101 ops/s
# Warmup Iteration  20: 663119.316 ops/s
# Warmup Iteration  21: 663674.577 ops/s
# Warmup Iteration  22: 646292.157 ops/s
# Warmup Iteration  23: 666758.047 ops/s
# Warmup Iteration  24: 659684.387 ops/s
# Warmup Iteration  25: 660669.385 ops/s
# Warmup Iteration  26: 661890.606 ops/s
# Warmup Iteration  27: 662969.582 ops/s
# Warmup Iteration  28: 664004.468 ops/s
# Warmup Iteration  29: 658505.524 ops/s
# Warmup Iteration  30: 668172.439 ops/s
Iteration   1: 655735.646 ops/s
Iteration   2: 661261.944 ops/s
Iteration   3: 664952.551 ops/s
Iteration   4: 662270.911 ops/s
Iteration   5: 665533.628 ops/s
Iteration   6: 656663.769 ops/s
Iteration   7: 666382.790 ops/s
Iteration   8: 659685.355 ops/s
Iteration   9: 661956.457 ops/s
Iteration  10: 661947.728 ops/s
Iteration  11: 664675.010 ops/s
Iteration  12: 665633.763 ops/s
Iteration  13: 663697.888 ops/s
Iteration  14: 662848.301 ops/s
Iteration  15: 662594.575 ops/s
Iteration  16: 662780.920 ops/s
Iteration  17: 669468.344 ops/s
Iteration  18: 666335.411 ops/s
Iteration  19: 663510.564 ops/s
Iteration  20: 663912.376 ops/s
Iteration  21: 661371.210 ops/s
Iteration  22: 659452.611 ops/s
Iteration  23: 665150.560 ops/s
Iteration  24: 668745.533 ops/s
Iteration  25: 664942.779 ops/s
Iteration  26: 654117.316 ops/s
Iteration  27: 663954.422 ops/s
Iteration  28: 663304.096 ops/s
Iteration  29: 661825.656 ops/s
Iteration  30: 666504.028 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_disposeThrowsIAE":
  663040.538 ±(99.9%) 2307.792 ops/s [Average]
  (min, avg, max) = (654117.316, 663040.538, 669468.344), stdev = 3454.195
  CI (99.9%): [660732.746, 665348.330] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
CompositeDisposableTest._Benchmark.benchmark_disposeThrowsIAE  thrpt   30  663040.538 ± 2307.792  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 133243.382 ops/s
# Warmup Iteration   2: 187182.120 ops/s
# Warmup Iteration   3: 198622.516 ops/s
# Warmup Iteration   4: 211544.155 ops/s
# Warmup Iteration   5: 218752.150 ops/s
# Warmup Iteration   6: 217063.073 ops/s
# Warmup Iteration   7: 217258.891 ops/s
# Warmup Iteration   8: 218970.698 ops/s
# Warmup Iteration   9: 219542.287 ops/s
# Warmup Iteration  10: 218770.526 ops/s
# Warmup Iteration  11: 219079.844 ops/s
# Warmup Iteration  12: 216536.035 ops/s
# Warmup Iteration  13: 217570.314 ops/s
# Warmup Iteration  14: 216382.483 ops/s
# Warmup Iteration  15: 216595.430 ops/s
# Warmup Iteration  16: 216147.242 ops/s
# Warmup Iteration  17: 225226.023 ops/s
# Warmup Iteration  18: 223905.483 ops/s
# Warmup Iteration  19: 224494.077 ops/s
# Warmup Iteration  20: 224800.548 ops/s
# Warmup Iteration  21: 225231.834 ops/s
# Warmup Iteration  22: 223789.323 ops/s
# Warmup Iteration  23: 225075.122 ops/s
# Warmup Iteration  24: 224323.197 ops/s
# Warmup Iteration  25: 224714.410 ops/s
# Warmup Iteration  26: 223911.561 ops/s
# Warmup Iteration  27: 223685.262 ops/s
# Warmup Iteration  28: 225052.548 ops/s
# Warmup Iteration  29: 223716.733 ops/s
# Warmup Iteration  30: 223931.195 ops/s
Iteration   1: 225776.949 ops/s
Iteration   2: 223327.613 ops/s
Iteration   3: 225252.241 ops/s
Iteration   4: 223966.701 ops/s
Iteration   5: 224840.696 ops/s
Iteration   6: 224413.154 ops/s
Iteration   7: 224948.028 ops/s
Iteration   8: 225958.649 ops/s
Iteration   9: 224712.903 ops/s
Iteration  10: 225367.313 ops/s
Iteration  11: 224929.065 ops/s
Iteration  12: 226012.985 ops/s
Iteration  13: 227100.419 ops/s
Iteration  14: 225842.617 ops/s
Iteration  15: 225756.080 ops/s
Iteration  16: 224641.542 ops/s
Iteration  17: 224668.198 ops/s
Iteration  18: 225715.887 ops/s
Iteration  19: 225083.618 ops/s
Iteration  20: 225854.596 ops/s
Iteration  21: 225197.464 ops/s
Iteration  22: 225688.956 ops/s
Iteration  23: 224511.943 ops/s
Iteration  24: 224448.888 ops/s
Iteration  25: 223358.850 ops/s
Iteration  26: 224911.133 ops/s
Iteration  27: 224944.022 ops/s
Iteration  28: 223663.996 ops/s
Iteration  29: 224881.050 ops/s
Iteration  30: 226508.770 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_badSource":
  225076.144 ±(99.9%) 580.795 ops/s [Average]
  (min, avg, max) = (223327.613, 225076.144, 227100.419), stdev = 869.307
  CI (99.9%): [224495.349, 225656.940] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_badSource  thrpt   30  225076.144 ± 580.795  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_mainAndBoundaryDisposeOnNoWindows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_mainAndBoundaryDisposeOnNoWindows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 238050.151 ops/s
# Warmup Iteration   2: 545108.186 ops/s
# Warmup Iteration   3: 595916.663 ops/s
# Warmup Iteration   4: 634635.693 ops/s
# Warmup Iteration   5: 648456.828 ops/s
# Warmup Iteration   6: 636584.151 ops/s
# Warmup Iteration   7: 645984.496 ops/s
# Warmup Iteration   8: 645541.819 ops/s
# Warmup Iteration   9: 635050.549 ops/s
# Warmup Iteration  10: 646120.768 ops/s
# Warmup Iteration  11: 642049.839 ops/s
# Warmup Iteration  12: 642334.303 ops/s
# Warmup Iteration  13: 643535.001 ops/s
# Warmup Iteration  14: 635623.717 ops/s
# Warmup Iteration  15: 649021.106 ops/s
# Warmup Iteration  16: 635128.233 ops/s
# Warmup Iteration  17: 641230.938 ops/s
# Warmup Iteration  18: 637219.279 ops/s
# Warmup Iteration  19: 639030.470 ops/s
# Warmup Iteration  20: 643405.182 ops/s
# Warmup Iteration  21: 641174.110 ops/s
# Warmup Iteration  22: 644064.093 ops/s
# Warmup Iteration  23: 640359.797 ops/s
# Warmup Iteration  24: 641801.320 ops/s
# Warmup Iteration  25: 643473.087 ops/s
# Warmup Iteration  26: 640861.831 ops/s
# Warmup Iteration  27: 644059.070 ops/s
# Warmup Iteration  28: 641275.740 ops/s
# Warmup Iteration  29: 644191.167 ops/s
# Warmup Iteration  30: 646488.673 ops/s
Iteration   1: 639614.616 ops/s
Iteration   2: 640027.611 ops/s
Iteration   3: 644380.611 ops/s
Iteration   4: 643345.057 ops/s
Iteration   5: 642888.320 ops/s
Iteration   6: 637520.904 ops/s
Iteration   7: 642393.713 ops/s
Iteration   8: 641819.055 ops/s
Iteration   9: 642014.341 ops/s
Iteration  10: 644574.816 ops/s
Iteration  11: 640457.336 ops/s
Iteration  12: 635321.670 ops/s
Iteration  13: 646618.007 ops/s
Iteration  14: 639571.552 ops/s
Iteration  15: 644934.169 ops/s
Iteration  16: 644808.263 ops/s
Iteration  17: 636336.081 ops/s
Iteration  18: 645494.790 ops/s
Iteration  19: 640334.083 ops/s
Iteration  20: 643234.806 ops/s
Iteration  21: 642024.727 ops/s
Iteration  22: 645565.053 ops/s
Iteration  23: 643892.559 ops/s
Iteration  24: 645619.898 ops/s
Iteration  25: 640739.655 ops/s
Iteration  26: 641506.373 ops/s
Iteration  27: 644646.005 ops/s
Iteration  28: 642902.783 ops/s
Iteration  29: 645048.110 ops/s
Iteration  30: 636172.260 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_mainAndBoundaryDisposeOnNoWindows":
  642126.907 ±(99.9%) 2022.811 ops/s [Average]
  (min, avg, max) = (635321.670, 642126.907, 646618.007), stdev = 3027.648
  CI (99.9%): [640104.097, 644149.718] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt       Score      Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_mainAndBoundaryDisposeOnNoWindows  thrpt   30  642126.907 ± 2022.811  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 465741.270 ops/s
# Warmup Iteration   2: 622671.293 ops/s
# Warmup Iteration   3: 617469.796 ops/s
# Warmup Iteration   4: 667659.900 ops/s
# Warmup Iteration   5: 668912.121 ops/s
# Warmup Iteration   6: 681544.212 ops/s
# Warmup Iteration   7: 676627.447 ops/s
# Warmup Iteration   8: 682313.207 ops/s
# Warmup Iteration   9: 676284.001 ops/s
# Warmup Iteration  10: 675944.399 ops/s
# Warmup Iteration  11: 679102.235 ops/s
# Warmup Iteration  12: 668968.599 ops/s
# Warmup Iteration  13: 677999.711 ops/s
# Warmup Iteration  14: 672736.892 ops/s
# Warmup Iteration  15: 675054.606 ops/s
# Warmup Iteration  16: 671517.569 ops/s
# Warmup Iteration  17: 701060.610 ops/s
# Warmup Iteration  18: 699837.163 ops/s
# Warmup Iteration  19: 701788.944 ops/s
# Warmup Iteration  20: 698719.553 ops/s
# Warmup Iteration  21: 694944.484 ops/s
# Warmup Iteration  22: 705414.161 ops/s
# Warmup Iteration  23: 705603.937 ops/s
# Warmup Iteration  24: 697732.858 ops/s
# Warmup Iteration  25: 699326.773 ops/s
# Warmup Iteration  26: 699591.295 ops/s
# Warmup Iteration  27: 702959.103 ops/s
# Warmup Iteration  28: 700532.536 ops/s
# Warmup Iteration  29: 702631.434 ops/s
# Warmup Iteration  30: 694432.596 ops/s
Iteration   1: 705049.396 ops/s
Iteration   2: 699673.611 ops/s
Iteration   3: 699439.179 ops/s
Iteration   4: 701670.654 ops/s
Iteration   5: 700185.363 ops/s
Iteration   6: 701080.367 ops/s
Iteration   7: 699141.775 ops/s
Iteration   8: 700201.397 ops/s
Iteration   9: 695178.409 ops/s
Iteration  10: 703559.381 ops/s
Iteration  11: 697578.014 ops/s
Iteration  12: 701080.410 ops/s
Iteration  13: 700934.109 ops/s
Iteration  14: 698291.090 ops/s
Iteration  15: 698396.730 ops/s
Iteration  16: 696361.542 ops/s
Iteration  17: 704152.132 ops/s
Iteration  18: 705505.539 ops/s
Iteration  19: 685832.932 ops/s
Iteration  20: 703175.580 ops/s
Iteration  21: 702265.704 ops/s
Iteration  22: 700602.629 ops/s
Iteration  23: 697791.344 ops/s
Iteration  24: 700127.900 ops/s
Iteration  25: 701466.942 ops/s
Iteration  26: 702690.783 ops/s
Iteration  27: 702014.920 ops/s
Iteration  28: 703480.306 ops/s
Iteration  29: 699529.109 ops/s
Iteration  30: 694923.923 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe":
  700046.039 ±(99.9%) 2522.715 ops/s [Average]
  (min, avg, max) = (685832.932, 700046.039, 705505.539), stdev = 3775.881
  CI (99.9%): [697523.324, 702568.754] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableFlatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  700046.039 ± 2522.715  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 185361.907 ops/s
# Warmup Iteration   2: 246234.243 ops/s
# Warmup Iteration   3: 278644.492 ops/s
# Warmup Iteration   4: 277518.553 ops/s
# Warmup Iteration   5: 282277.633 ops/s
# Warmup Iteration   6: 283264.577 ops/s
# Warmup Iteration   7: 281952.253 ops/s
# Warmup Iteration   8: 281627.981 ops/s
# Warmup Iteration   9: 282154.471 ops/s
# Warmup Iteration  10: 281471.525 ops/s
# Warmup Iteration  11: 280805.696 ops/s
# Warmup Iteration  12: 281884.577 ops/s
# Warmup Iteration  13: 277908.703 ops/s
# Warmup Iteration  14: 281210.477 ops/s
# Warmup Iteration  15: 281569.168 ops/s
# Warmup Iteration  16: 280684.888 ops/s
# Warmup Iteration  17: 290681.963 ops/s
# Warmup Iteration  18: 292680.365 ops/s
# Warmup Iteration  19: 292426.615 ops/s
# Warmup Iteration  20: 290939.608 ops/s
# Warmup Iteration  21: 288952.432 ops/s
# Warmup Iteration  22: 291675.586 ops/s
# Warmup Iteration  23: 292666.089 ops/s
# Warmup Iteration  24: 291204.517 ops/s
# Warmup Iteration  25: 291996.451 ops/s
# Warmup Iteration  26: 294337.737 ops/s
# Warmup Iteration  27: 291294.477 ops/s
# Warmup Iteration  28: 290684.980 ops/s
# Warmup Iteration  29: 292444.237 ops/s
# Warmup Iteration  30: 291676.402 ops/s
Iteration   1: 292217.408 ops/s
Iteration   2: 292872.429 ops/s
Iteration   3: 293103.440 ops/s
Iteration   4: 289770.931 ops/s
Iteration   5: 292374.163 ops/s
Iteration   6: 287999.104 ops/s
Iteration   7: 293562.984 ops/s
Iteration   8: 291365.325 ops/s
Iteration   9: 291482.336 ops/s
Iteration  10: 292630.949 ops/s
Iteration  11: 293111.187 ops/s
Iteration  12: 292762.159 ops/s
Iteration  13: 291203.943 ops/s
Iteration  14: 293506.544 ops/s
Iteration  15: 292834.092 ops/s
Iteration  16: 291847.668 ops/s
Iteration  17: 289616.768 ops/s
Iteration  18: 288911.276 ops/s
Iteration  19: 291083.796 ops/s
Iteration  20: 293101.924 ops/s
Iteration  21: 292435.563 ops/s
Iteration  22: 290019.063 ops/s
Iteration  23: 291801.697 ops/s
Iteration  24: 292108.099 ops/s
Iteration  25: 292006.429 ops/s
Iteration  26: 291171.545 ops/s
Iteration  27: 291889.578 ops/s
Iteration  28: 291690.330 ops/s
Iteration  29: 292152.395 ops/s
Iteration  30: 292028.410 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  291755.385 ±(99.9%) 899.398 ops/s [Average]
  (min, avg, max) = (287999.104, 291755.385, 293562.984), stdev = 1346.176
  CI (99.9%): [290855.987, 292654.782] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score     Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  291755.385 ± 899.398  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerErrorAfterPoll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerErrorAfterPoll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 232066.148 ops/s
# Warmup Iteration   2: 444734.001 ops/s
# Warmup Iteration   3: 442498.823 ops/s
# Warmup Iteration   4: 491072.589 ops/s
# Warmup Iteration   5: 491424.577 ops/s
# Warmup Iteration   6: 492085.086 ops/s
# Warmup Iteration   7: 488879.616 ops/s
# Warmup Iteration   8: 485220.916 ops/s
# Warmup Iteration   9: 489903.817 ops/s
# Warmup Iteration  10: 487661.736 ops/s
# Warmup Iteration  11: 484684.529 ops/s
# Warmup Iteration  12: 487899.424 ops/s
# Warmup Iteration  13: 484541.945 ops/s
# Warmup Iteration  14: 487755.189 ops/s
# Warmup Iteration  15: 483629.188 ops/s
# Warmup Iteration  16: 488307.292 ops/s
# Warmup Iteration  17: 512214.570 ops/s
# Warmup Iteration  18: 508312.772 ops/s
# Warmup Iteration  19: 506109.071 ops/s
# Warmup Iteration  20: 508834.713 ops/s
# Warmup Iteration  21: 508336.977 ops/s
# Warmup Iteration  22: 508523.695 ops/s
# Warmup Iteration  23: 505495.029 ops/s
# Warmup Iteration  24: 510544.084 ops/s
# Warmup Iteration  25: 504258.172 ops/s
# Warmup Iteration  26: 509989.910 ops/s
# Warmup Iteration  27: 506197.942 ops/s
# Warmup Iteration  28: 512020.846 ops/s
# Warmup Iteration  29: 510832.211 ops/s
# Warmup Iteration  30: 511709.372 ops/s
Iteration   1: 510235.172 ops/s
Iteration   2: 510306.795 ops/s
Iteration   3: 511603.490 ops/s
Iteration   4: 508309.821 ops/s
Iteration   5: 511082.601 ops/s
Iteration   6: 508539.661 ops/s
Iteration   7: 508092.719 ops/s
Iteration   8: 510798.675 ops/s
Iteration   9: 510951.773 ops/s
Iteration  10: 510005.923 ops/s
Iteration  11: 508212.035 ops/s
Iteration  12: 511671.498 ops/s
Iteration  13: 508992.719 ops/s
Iteration  14: 510320.259 ops/s
Iteration  15: 508378.054 ops/s
Iteration  16: 514176.421 ops/s
Iteration  17: 510145.826 ops/s
Iteration  18: 510185.613 ops/s
Iteration  19: 511196.802 ops/s
Iteration  20: 509079.532 ops/s
Iteration  21: 508489.807 ops/s
Iteration  22: 508182.622 ops/s
Iteration  23: 508580.822 ops/s
Iteration  24: 511800.100 ops/s
Iteration  25: 511152.112 ops/s
Iteration  26: 500065.034 ops/s
Iteration  27: 507100.370 ops/s
Iteration  28: 508397.011 ops/s
Iteration  29: 511319.199 ops/s
Iteration  30: 507986.297 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerErrorAfterPoll":
  509511.959 ±(99.9%) 1589.181 ops/s [Average]
  (min, avg, max) = (500065.034, 509511.959, 514176.421), stdev = 2378.611
  CI (99.9%): [507922.778, 511101.139] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_innerErrorAfterPoll  thrpt   30  509511.959 ± 1589.181  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_basicSyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_basicSyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1724953.851 ops/s
# Warmup Iteration   2: 2272554.555 ops/s
# Warmup Iteration   3: 2443145.134 ops/s
# Warmup Iteration   4: 2639309.806 ops/s
# Warmup Iteration   5: 2644116.063 ops/s
# Warmup Iteration   6: 2627716.792 ops/s
# Warmup Iteration   7: 2636492.596 ops/s
# Warmup Iteration   8: 2636111.722 ops/s
# Warmup Iteration   9: 2644807.368 ops/s
# Warmup Iteration  10: 2630134.470 ops/s
# Warmup Iteration  11: 2605725.018 ops/s
# Warmup Iteration  12: 2627563.908 ops/s
# Warmup Iteration  13: 2623760.382 ops/s
# Warmup Iteration  14: 2611797.942 ops/s
# Warmup Iteration  15: 2620428.656 ops/s
# Warmup Iteration  16: 2608975.460 ops/s
# Warmup Iteration  17: 2590810.321 ops/s
# Warmup Iteration  18: 2567310.522 ops/s
# Warmup Iteration  19: 2581580.848 ops/s
# Warmup Iteration  20: 2585488.320 ops/s
# Warmup Iteration  21: 2595673.855 ops/s
# Warmup Iteration  22: 2568287.305 ops/s
# Warmup Iteration  23: 2582973.499 ops/s
# Warmup Iteration  24: 2585122.952 ops/s
# Warmup Iteration  25: 2574657.674 ops/s
# Warmup Iteration  26: 2586411.802 ops/s
# Warmup Iteration  27: 2598729.394 ops/s
# Warmup Iteration  28: 2564839.187 ops/s
# Warmup Iteration  29: 2579293.104 ops/s
# Warmup Iteration  30: 2575502.633 ops/s
Iteration   1: 2576841.829 ops/s
Iteration   2: 2572555.263 ops/s
Iteration   3: 2575630.937 ops/s
Iteration   4: 2579770.097 ops/s
Iteration   5: 2580390.530 ops/s
Iteration   6: 2587022.537 ops/s
Iteration   7: 2578938.423 ops/s
Iteration   8: 2590133.583 ops/s
Iteration   9: 2578513.992 ops/s
Iteration  10: 2542668.000 ops/s
Iteration  11: 2565983.589 ops/s
Iteration  12: 2584852.949 ops/s
Iteration  13: 2573481.666 ops/s
Iteration  14: 2569991.075 ops/s
Iteration  15: 2572993.755 ops/s
Iteration  16: 2588159.884 ops/s
Iteration  17: 2587433.703 ops/s
Iteration  18: 2580904.642 ops/s
Iteration  19: 2587498.853 ops/s
Iteration  20: 2573566.082 ops/s
Iteration  21: 2570904.504 ops/s
Iteration  22: 2557610.766 ops/s
Iteration  23: 2589614.806 ops/s
Iteration  24: 2590941.607 ops/s
Iteration  25: 2580026.261 ops/s
Iteration  26: 2570522.804 ops/s
Iteration  27: 2581353.005 ops/s
Iteration  28: 2584440.102 ops/s
Iteration  29: 2592643.201 ops/s
Iteration  30: 2586725.964 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_basicSyncFused":
  2578403.814 ±(99.9%) 7129.127 ops/s [Average]
  (min, avg, max) = (2542668.000, 2578403.814, 2592643.201), stdev = 10670.543
  CI (99.9%): [2571274.687, 2585532.941] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_basicSyncFused  thrpt   30  2578403.814 ± 7129.127  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1843924.550 ops/s
# Warmup Iteration   2: 2384798.165 ops/s
# Warmup Iteration   3: 2503776.315 ops/s
# Warmup Iteration   4: 2737510.960 ops/s
# Warmup Iteration   5: 2739932.922 ops/s
# Warmup Iteration   6: 2749020.837 ops/s
# Warmup Iteration   7: 2734015.351 ops/s
# Warmup Iteration   8: 2732902.892 ops/s
# Warmup Iteration   9: 2743592.142 ops/s
# Warmup Iteration  10: 2717853.271 ops/s
# Warmup Iteration  11: 2731690.832 ops/s
# Warmup Iteration  12: 2706050.426 ops/s
# Warmup Iteration  13: 2712958.174 ops/s
# Warmup Iteration  14: 2706199.913 ops/s
# Warmup Iteration  15: 2706663.840 ops/s
# Warmup Iteration  16: 2733047.028 ops/s
# Warmup Iteration  17: 2713286.784 ops/s
# Warmup Iteration  18: 2713992.149 ops/s
# Warmup Iteration  19: 2708148.510 ops/s
# Warmup Iteration  20: 2688750.989 ops/s
# Warmup Iteration  21: 2709782.200 ops/s
# Warmup Iteration  22: 2725736.657 ops/s
# Warmup Iteration  23: 2719992.243 ops/s
# Warmup Iteration  24: 2704657.038 ops/s
# Warmup Iteration  25: 2708298.027 ops/s
# Warmup Iteration  26: 2708896.643 ops/s
# Warmup Iteration  27: 2677457.146 ops/s
# Warmup Iteration  28: 2712210.324 ops/s
# Warmup Iteration  29: 2705665.943 ops/s
# Warmup Iteration  30: 2725496.563 ops/s
Iteration   1: 2728153.253 ops/s
Iteration   2: 2729227.682 ops/s
Iteration   3: 2718795.106 ops/s
Iteration   4: 2706758.079 ops/s
Iteration   5: 2707696.752 ops/s
Iteration   6: 2710169.071 ops/s
Iteration   7: 2712052.048 ops/s
Iteration   8: 2723441.369 ops/s
Iteration   9: 2701059.664 ops/s
Iteration  10: 2721826.450 ops/s
Iteration  11: 2714705.566 ops/s
Iteration  12: 2710802.576 ops/s
Iteration  13: 2709656.761 ops/s
Iteration  14: 2711858.789 ops/s
Iteration  15: 2716189.237 ops/s
Iteration  16: 2715339.102 ops/s
Iteration  17: 2723256.992 ops/s
Iteration  18: 2706414.185 ops/s
Iteration  19: 2708678.552 ops/s
Iteration  20: 2708182.977 ops/s
Iteration  21: 2730369.429 ops/s
Iteration  22: 2723248.342 ops/s
Iteration  23: 2707171.754 ops/s
Iteration  24: 2724751.831 ops/s
Iteration  25: 2729405.944 ops/s
Iteration  26: 2711355.255 ops/s
Iteration  27: 2713568.833 ops/s
Iteration  28: 2717862.510 ops/s
Iteration  29: 2736785.404 ops/s
Iteration  30: 2729130.020 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_simple":
  2716930.451 ±(99.9%) 6072.183 ops/s [Average]
  (min, avg, max) = (2701059.664, 2716930.451, 2736785.404), stdev = 9088.559
  CI (99.9%): [2710858.268, 2723002.634] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_simple  thrpt   30  2716930.451 ± 6072.183  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 595192.191 ops/s
# Warmup Iteration   2: 744157.292 ops/s
# Warmup Iteration   3: 859420.754 ops/s
# Warmup Iteration   4: 860603.673 ops/s
# Warmup Iteration   5: 867157.462 ops/s
# Warmup Iteration   6: 861618.868 ops/s
# Warmup Iteration   7: 863434.345 ops/s
# Warmup Iteration   8: 857193.725 ops/s
# Warmup Iteration   9: 860467.861 ops/s
# Warmup Iteration  10: 859416.951 ops/s
# Warmup Iteration  11: 860397.088 ops/s
# Warmup Iteration  12: 856990.435 ops/s
# Warmup Iteration  13: 862204.893 ops/s
# Warmup Iteration  14: 862897.093 ops/s
# Warmup Iteration  15: 862793.367 ops/s
# Warmup Iteration  16: 864917.213 ops/s
# Warmup Iteration  17: 914209.917 ops/s
# Warmup Iteration  18: 906143.785 ops/s
# Warmup Iteration  19: 908961.173 ops/s
# Warmup Iteration  20: 912625.605 ops/s
# Warmup Iteration  21: 907658.379 ops/s
# Warmup Iteration  22: 915218.589 ops/s
# Warmup Iteration  23: 905113.423 ops/s
# Warmup Iteration  24: 909860.479 ops/s
# Warmup Iteration  25: 910687.245 ops/s
# Warmup Iteration  26: 896532.778 ops/s
# Warmup Iteration  27: 902965.592 ops/s
# Warmup Iteration  28: 900836.215 ops/s
# Warmup Iteration  29: 903652.449 ops/s
# Warmup Iteration  30: 908383.757 ops/s
Iteration   1: 863831.567 ops/s
Iteration   2: 905310.265 ops/s
Iteration   3: 908324.455 ops/s
Iteration   4: 902168.078 ops/s
Iteration   5: 903824.444 ops/s
Iteration   6: 914365.461 ops/s
Iteration   7: 900039.746 ops/s
Iteration   8: 908443.165 ops/s
Iteration   9: 904739.627 ops/s
Iteration  10: 911535.255 ops/s
Iteration  11: 907271.721 ops/s
Iteration  12: 909246.563 ops/s
Iteration  13: 907123.453 ops/s
Iteration  14: 907708.297 ops/s
Iteration  15: 897767.726 ops/s
Iteration  16: 907023.523 ops/s
Iteration  17: 895288.599 ops/s
Iteration  18: 901583.095 ops/s
Iteration  19: 912186.858 ops/s
Iteration  20: 906087.239 ops/s
Iteration  21: 907915.535 ops/s
Iteration  22: 908676.124 ops/s
Iteration  23: 906553.692 ops/s
Iteration  24: 902453.366 ops/s
Iteration  25: 909536.305 ops/s
Iteration  26: 903709.788 ops/s
Iteration  27: 904668.555 ops/s
Iteration  28: 907752.574 ops/s
Iteration  29: 903961.368 ops/s
Iteration  30: 908541.468 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_innerError":
  904587.930 ±(99.9%) 5821.785 ops/s [Average]
  (min, avg, max) = (863831.567, 904587.930, 914365.461), stdev = 8713.774
  CI (99.9%): [898766.146, 910409.715] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_innerError  thrpt   30  904587.930 ± 5821.785  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_simple2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_simple2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1495716.695 ops/s
# Warmup Iteration   2: 2042874.554 ops/s
# Warmup Iteration   3: 1999471.904 ops/s
# Warmup Iteration   4: 2251686.282 ops/s
# Warmup Iteration   5: 2264751.640 ops/s
# Warmup Iteration   6: 2249613.354 ops/s
# Warmup Iteration   7: 2255569.997 ops/s
# Warmup Iteration   8: 2252776.500 ops/s
# Warmup Iteration   9: 2245397.897 ops/s
# Warmup Iteration  10: 2249441.456 ops/s
# Warmup Iteration  11: 2241018.629 ops/s
# Warmup Iteration  12: 2238494.230 ops/s
# Warmup Iteration  13: 2248845.752 ops/s
# Warmup Iteration  14: 2242054.310 ops/s
# Warmup Iteration  15: 2262255.791 ops/s
# Warmup Iteration  16: 2242736.516 ops/s
# Warmup Iteration  17: 2240009.615 ops/s
# Warmup Iteration  18: 2255305.269 ops/s
# Warmup Iteration  19: 2247680.762 ops/s
# Warmup Iteration  20: 2243237.511 ops/s
# Warmup Iteration  21: 2236080.935 ops/s
# Warmup Iteration  22: 2238278.807 ops/s
# Warmup Iteration  23: 2218088.994 ops/s
# Warmup Iteration  24: 2223588.695 ops/s
# Warmup Iteration  25: 2261690.311 ops/s
# Warmup Iteration  26: 2247496.258 ops/s
# Warmup Iteration  27: 2236023.067 ops/s
# Warmup Iteration  28: 2246339.461 ops/s
# Warmup Iteration  29: 2253164.172 ops/s
# Warmup Iteration  30: 2247227.247 ops/s
Iteration   1: 2246038.403 ops/s
Iteration   2: 2250846.959 ops/s
Iteration   3: 2242173.904 ops/s
Iteration   4: 2241936.697 ops/s
Iteration   5: 2236732.078 ops/s
Iteration   6: 2236772.592 ops/s
Iteration   7: 2250230.025 ops/s
Iteration   8: 2253948.603 ops/s
Iteration   9: 2251819.158 ops/s
Iteration  10: 2251672.861 ops/s
Iteration  11: 2237111.604 ops/s
Iteration  12: 2260377.771 ops/s
Iteration  13: 2235403.085 ops/s
Iteration  14: 2241939.561 ops/s
Iteration  15: 2247515.248 ops/s
Iteration  16: 2259551.864 ops/s
Iteration  17: 2238578.447 ops/s
Iteration  18: 2240618.286 ops/s
Iteration  19: 2253412.792 ops/s
Iteration  20: 2257519.098 ops/s
Iteration  21: 2252273.904 ops/s
Iteration  22: 2244130.390 ops/s
Iteration  23: 2208678.944 ops/s
Iteration  24: 2246431.905 ops/s
Iteration  25: 2239935.209 ops/s
Iteration  26: 2244940.998 ops/s
Iteration  27: 2248201.024 ops/s
Iteration  28: 2246159.307 ops/s
Iteration  29: 2246942.334 ops/s
Iteration  30: 2251444.955 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_simple2":
  2245444.600 ±(99.9%) 6500.007 ops/s [Average]
  (min, avg, max) = (2208678.944, 2245444.600, 2260377.771), stdev = 9728.905
  CI (99.9%): [2238944.593, 2251944.607] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_simple2  thrpt   30  2245444.600 ± 6500.007  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 570974.201 ops/s
# Warmup Iteration   2: 702807.374 ops/s
# Warmup Iteration   3: 744963.488 ops/s
# Warmup Iteration   4: 781698.193 ops/s
# Warmup Iteration   5: 782938.159 ops/s
# Warmup Iteration   6: 778192.650 ops/s
# Warmup Iteration   7: 776648.978 ops/s
# Warmup Iteration   8: 782511.964 ops/s
# Warmup Iteration   9: 775299.937 ops/s
# Warmup Iteration  10: 775806.988 ops/s
# Warmup Iteration  11: 777962.406 ops/s
# Warmup Iteration  12: 777026.825 ops/s
# Warmup Iteration  13: 773322.624 ops/s
# Warmup Iteration  14: 772981.314 ops/s
# Warmup Iteration  15: 772166.797 ops/s
# Warmup Iteration  16: 775640.739 ops/s
# Warmup Iteration  17: 807810.963 ops/s
# Warmup Iteration  18: 810116.297 ops/s
# Warmup Iteration  19: 804221.423 ops/s
# Warmup Iteration  20: 803684.734 ops/s
# Warmup Iteration  21: 799807.637 ops/s
# Warmup Iteration  22: 807869.936 ops/s
# Warmup Iteration  23: 807019.558 ops/s
# Warmup Iteration  24: 809702.411 ops/s
# Warmup Iteration  25: 803627.433 ops/s
# Warmup Iteration  26: 806345.821 ops/s
# Warmup Iteration  27: 806412.413 ops/s
# Warmup Iteration  28: 810031.712 ops/s
# Warmup Iteration  29: 809589.276 ops/s
# Warmup Iteration  30: 807634.635 ops/s
Iteration   1: 807927.375 ops/s
Iteration   2: 806418.955 ops/s
Iteration   3: 807950.250 ops/s
Iteration   4: 810624.808 ops/s
Iteration   5: 806566.678 ops/s
Iteration   6: 807023.260 ops/s
Iteration   7: 801595.769 ops/s
Iteration   8: 805735.832 ops/s
Iteration   9: 809711.991 ops/s
Iteration  10: 809898.606 ops/s
Iteration  11: 810461.907 ops/s
Iteration  12: 805686.083 ops/s
Iteration  13: 810091.495 ops/s
Iteration  14: 811413.426 ops/s
Iteration  15: 808903.178 ops/s
Iteration  16: 804271.782 ops/s
Iteration  17: 805218.698 ops/s
Iteration  18: 806883.045 ops/s
Iteration  19: 806540.380 ops/s
Iteration  20: 808320.473 ops/s
Iteration  21: 808452.578 ops/s
Iteration  22: 810079.356 ops/s
Iteration  23: 808611.538 ops/s
Iteration  24: 808626.401 ops/s
Iteration  25: 804488.510 ops/s
Iteration  26: 806060.703 ops/s
Iteration  27: 793509.162 ops/s
Iteration  28: 808545.046 ops/s
Iteration  29: 814222.378 ops/s
Iteration  30: 805457.203 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_mapperCrash":
  807309.896 ±(99.9%) 2421.721 ops/s [Average]
  (min, avg, max) = (793509.162, 807309.896, 814222.378), stdev = 3624.718
  CI (99.9%): [804888.175, 809731.616] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_mapperCrash  thrpt   30  807309.896 ± 2421.721  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_basicFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_basicFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4395962.378 ops/s
# Warmup Iteration   2: 8103013.586 ops/s
# Warmup Iteration   3: 8244796.416 ops/s
# Warmup Iteration   4: 8035646.960 ops/s
# Warmup Iteration   5: 8202429.450 ops/s
# Warmup Iteration   6: 8222915.272 ops/s
# Warmup Iteration   7: 8170670.456 ops/s
# Warmup Iteration   8: 8163439.961 ops/s
# Warmup Iteration   9: 8232519.505 ops/s
# Warmup Iteration  10: 8192604.372 ops/s
# Warmup Iteration  11: 8193527.187 ops/s
# Warmup Iteration  12: 8208418.038 ops/s
# Warmup Iteration  13: 8218433.865 ops/s
# Warmup Iteration  14: 8230058.431 ops/s
# Warmup Iteration  15: 8245459.024 ops/s
# Warmup Iteration  16: 8243287.447 ops/s
# Warmup Iteration  17: 8274094.518 ops/s
# Warmup Iteration  18: 8272894.318 ops/s
# Warmup Iteration  19: 8265784.963 ops/s
# Warmup Iteration  20: 8238000.554 ops/s
# Warmup Iteration  21: 8236622.105 ops/s
# Warmup Iteration  22: 8267726.062 ops/s
# Warmup Iteration  23: 8291046.994 ops/s
# Warmup Iteration  24: 8266782.883 ops/s
# Warmup Iteration  25: 8256794.674 ops/s
# Warmup Iteration  26: 8229009.296 ops/s
# Warmup Iteration  27: 8220312.761 ops/s
# Warmup Iteration  28: 8272644.558 ops/s
# Warmup Iteration  29: 8283765.235 ops/s
# Warmup Iteration  30: 8225023.382 ops/s
Iteration   1: 8254210.555 ops/s
Iteration   2: 8181767.864 ops/s
Iteration   3: 8259904.623 ops/s
Iteration   4: 8279588.568 ops/s
Iteration   5: 8233494.678 ops/s
Iteration   6: 8244245.468 ops/s
Iteration   7: 8264307.223 ops/s
Iteration   8: 8103183.105 ops/s
Iteration   9: 8208722.295 ops/s
Iteration  10: 8301645.069 ops/s
Iteration  11: 8231555.074 ops/s
Iteration  12: 8253561.036 ops/s
Iteration  13: 8294178.835 ops/s
Iteration  14: 8139833.986 ops/s
Iteration  15: 8240898.807 ops/s
Iteration  16: 8194079.181 ops/s
Iteration  17: 8231958.244 ops/s
Iteration  18: 8140131.691 ops/s
Iteration  19: 8230002.868 ops/s
Iteration  20: 8247310.856 ops/s
Iteration  21: 8255618.416 ops/s
Iteration  22: 8275901.446 ops/s
Iteration  23: 8251896.583 ops/s
Iteration  24: 8245583.456 ops/s
Iteration  25: 8256852.654 ops/s
Iteration  26: 8291657.188 ops/s
Iteration  27: 8245308.143 ops/s
Iteration  28: 8273955.888 ops/s
Iteration  29: 8287602.479 ops/s
Iteration  30: 8231296.402 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_basicFusionRejected":
  8238341.756 ±(99.9%) 31221.226 ops/s [Average]
  (min, avg, max) = (8103183.105, 8238341.756, 8301645.069), stdev = 46730.465
  CI (99.9%): [8207120.530, 8269562.982] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_basicFusionRejected  thrpt   30  8238341.756 ± 31221.226  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_basicNonFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_basicNonFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1009357.831 ops/s
# Warmup Iteration   2: 1411925.497 ops/s
# Warmup Iteration   3: 1485574.311 ops/s
# Warmup Iteration   4: 1605548.496 ops/s
# Warmup Iteration   5: 1597807.681 ops/s
# Warmup Iteration   6: 1601374.217 ops/s
# Warmup Iteration   7: 1605364.021 ops/s
# Warmup Iteration   8: 1596718.907 ops/s
# Warmup Iteration   9: 1608850.708 ops/s
# Warmup Iteration  10: 1605519.078 ops/s
# Warmup Iteration  11: 1610608.561 ops/s
# Warmup Iteration  12: 1594019.224 ops/s
# Warmup Iteration  13: 1588768.530 ops/s
# Warmup Iteration  14: 1591221.947 ops/s
# Warmup Iteration  15: 1591486.755 ops/s
# Warmup Iteration  16: 1586025.341 ops/s
# Warmup Iteration  17: 1596087.364 ops/s
# Warmup Iteration  18: 1599561.414 ops/s
# Warmup Iteration  19: 1592023.440 ops/s
# Warmup Iteration  20: 1597415.571 ops/s
# Warmup Iteration  21: 1591959.773 ops/s
# Warmup Iteration  22: 1588241.676 ops/s
# Warmup Iteration  23: 1591586.596 ops/s
# Warmup Iteration  24: 1590036.860 ops/s
# Warmup Iteration  25: 1588034.603 ops/s
# Warmup Iteration  26: 1589115.539 ops/s
# Warmup Iteration  27: 1582527.572 ops/s
# Warmup Iteration  28: 1592303.546 ops/s
# Warmup Iteration  29: 1583994.889 ops/s
# Warmup Iteration  30: 1588462.943 ops/s
Iteration   1: 1600861.999 ops/s
Iteration   2: 1589844.904 ops/s
Iteration   3: 1576091.615 ops/s
Iteration   4: 1588427.947 ops/s
Iteration   5: 1589859.475 ops/s
Iteration   6: 1595505.461 ops/s
Iteration   7: 1597045.943 ops/s
Iteration   8: 1592877.268 ops/s
Iteration   9: 1598856.222 ops/s
Iteration  10: 1590035.045 ops/s
Iteration  11: 1592879.092 ops/s
Iteration  12: 1580111.171 ops/s
Iteration  13: 1596297.203 ops/s
Iteration  14: 1589212.415 ops/s
Iteration  15: 1594532.139 ops/s
Iteration  16: 1593265.288 ops/s
Iteration  17: 1594769.010 ops/s
Iteration  18: 1591090.796 ops/s
Iteration  19: 1597717.795 ops/s
Iteration  20: 1591247.424 ops/s
Iteration  21: 1602846.867 ops/s
Iteration  22: 1584254.728 ops/s
Iteration  23: 1589808.852 ops/s
Iteration  24: 1589895.721 ops/s
Iteration  25: 1581519.853 ops/s
Iteration  26: 1594392.620 ops/s
Iteration  27: 1601545.488 ops/s
Iteration  28: 1598587.686 ops/s
Iteration  29: 1590478.690 ops/s
Iteration  30: 1594134.443 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_basicNonFused":
  1592266.439 ±(99.9%) 4120.003 ops/s [Average]
  (min, avg, max) = (1576091.615, 1592266.439, 1602846.867), stdev = 6166.627
  CI (99.9%): [1588146.436, 1596386.441] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_basicNonFused  thrpt   30  1592266.439 ± 4120.003  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_fusedPollCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_fusedPollCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 325687.029 ops/s
# Warmup Iteration   2: 479307.774 ops/s
# Warmup Iteration   3: 516861.800 ops/s
# Warmup Iteration   4: 470073.146 ops/s
# Warmup Iteration   5: 535244.476 ops/s
# Warmup Iteration   6: 535684.778 ops/s
# Warmup Iteration   7: 538370.296 ops/s
# Warmup Iteration   8: 535902.816 ops/s
# Warmup Iteration   9: 536511.281 ops/s
# Warmup Iteration  10: 535359.548 ops/s
# Warmup Iteration  11: 536728.587 ops/s
# Warmup Iteration  12: 537408.441 ops/s
# Warmup Iteration  13: 533353.167 ops/s
# Warmup Iteration  14: 537315.881 ops/s
# Warmup Iteration  15: 534522.076 ops/s
# Warmup Iteration  16: 530498.308 ops/s
# Warmup Iteration  17: 552059.635 ops/s
# Warmup Iteration  18: 554554.503 ops/s
# Warmup Iteration  19: 549850.706 ops/s
# Warmup Iteration  20: 552515.377 ops/s
# Warmup Iteration  21: 549245.382 ops/s
# Warmup Iteration  22: 551533.006 ops/s
# Warmup Iteration  23: 554846.485 ops/s
# Warmup Iteration  24: 553448.756 ops/s
# Warmup Iteration  25: 555780.416 ops/s
# Warmup Iteration  26: 548607.426 ops/s
# Warmup Iteration  27: 550892.130 ops/s
# Warmup Iteration  28: 552754.305 ops/s
# Warmup Iteration  29: 550741.839 ops/s
# Warmup Iteration  30: 550170.558 ops/s
Iteration   1: 548816.360 ops/s
Iteration   2: 551601.350 ops/s
Iteration   3: 551071.563 ops/s
Iteration   4: 548995.302 ops/s
Iteration   5: 550185.251 ops/s
Iteration   6: 552421.846 ops/s
Iteration   7: 546265.734 ops/s
Iteration   8: 551873.582 ops/s
Iteration   9: 552562.724 ops/s
Iteration  10: 549468.960 ops/s
Iteration  11: 550437.918 ops/s
Iteration  12: 551420.751 ops/s
Iteration  13: 556569.768 ops/s
Iteration  14: 552202.961 ops/s
Iteration  15: 551592.137 ops/s
Iteration  16: 551484.351 ops/s
Iteration  17: 548611.104 ops/s
Iteration  18: 553756.016 ops/s
Iteration  19: 553061.676 ops/s
Iteration  20: 554732.929 ops/s
Iteration  21: 549295.089 ops/s
Iteration  22: 551439.182 ops/s
Iteration  23: 553705.463 ops/s
Iteration  24: 551054.436 ops/s
Iteration  25: 550877.554 ops/s
Iteration  26: 547912.329 ops/s
Iteration  27: 554873.345 ops/s
Iteration  28: 550087.872 ops/s
Iteration  29: 549500.131 ops/s
Iteration  30: 546612.141 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_fusedPollCrash":
  551082.994 ±(99.9%) 1578.799 ops/s [Average]
  (min, avg, max) = (546265.734, 551082.994, 556569.768), stdev = 2363.072
  CI (99.9%): [549504.196, 552661.793] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_fusedPollCrash  thrpt   30  551082.994 ± 1578.799  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_basicAsyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_basicAsyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 681803.384 ops/s
# Warmup Iteration   2: 1111860.423 ops/s
# Warmup Iteration   3: 1243580.982 ops/s
# Warmup Iteration   4: 1283215.486 ops/s
# Warmup Iteration   5: 1289281.166 ops/s
# Warmup Iteration   6: 1290102.068 ops/s
# Warmup Iteration   7: 1291136.163 ops/s
# Warmup Iteration   8: 1291628.451 ops/s
# Warmup Iteration   9: 1284127.937 ops/s
# Warmup Iteration  10: 1282430.845 ops/s
# Warmup Iteration  11: 1274380.386 ops/s
# Warmup Iteration  12: 1290806.942 ops/s
# Warmup Iteration  13: 1282199.275 ops/s
# Warmup Iteration  14: 1286553.657 ops/s
# Warmup Iteration  15: 1285593.145 ops/s
# Warmup Iteration  16: 1287979.116 ops/s
# Warmup Iteration  17: 1287730.910 ops/s
# Warmup Iteration  18: 1294441.481 ops/s
# Warmup Iteration  19: 1287052.192 ops/s
# Warmup Iteration  20: 1282954.744 ops/s
# Warmup Iteration  21: 1290267.343 ops/s
# Warmup Iteration  22: 1288508.612 ops/s
# Warmup Iteration  23: 1273792.693 ops/s
# Warmup Iteration  24: 1284726.156 ops/s
# Warmup Iteration  25: 1280294.505 ops/s
# Warmup Iteration  26: 1285197.179 ops/s
# Warmup Iteration  27: 1287057.929 ops/s
# Warmup Iteration  28: 1287080.969 ops/s
# Warmup Iteration  29: 1275416.748 ops/s
# Warmup Iteration  30: 1289083.931 ops/s
Iteration   1: 1286627.085 ops/s
Iteration   2: 1289372.676 ops/s
Iteration   3: 1285188.309 ops/s
Iteration   4: 1286938.531 ops/s
Iteration   5: 1281063.637 ops/s
Iteration   6: 1275725.480 ops/s
Iteration   7: 1287293.102 ops/s
Iteration   8: 1286479.419 ops/s
Iteration   9: 1290184.969 ops/s
Iteration  10: 1290088.682 ops/s
Iteration  11: 1282956.665 ops/s
Iteration  12: 1285460.556 ops/s
Iteration  13: 1289668.465 ops/s
Iteration  14: 1287973.644 ops/s
Iteration  15: 1285167.788 ops/s
Iteration  16: 1264422.522 ops/s
Iteration  17: 1286764.385 ops/s
Iteration  18: 1284426.209 ops/s
Iteration  19: 1292465.618 ops/s
Iteration  20: 1285478.957 ops/s
Iteration  21: 1275854.125 ops/s
Iteration  22: 1284093.330 ops/s
Iteration  23: 1290729.797 ops/s
Iteration  24: 1290870.754 ops/s
Iteration  25: 1286850.289 ops/s
Iteration  26: 1281992.365 ops/s
Iteration  27: 1286784.787 ops/s
Iteration  28: 1290223.701 ops/s
Iteration  29: 1293141.212 ops/s
Iteration  30: 1288920.715 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_basicAsyncFused":
  1285773.592 ±(99.9%) 3851.220 ops/s [Average]
  (min, avg, max) = (1264422.522, 1285773.592, 1293141.212), stdev = 5764.326
  CI (99.9%): [1281922.372, 1289624.813] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_basicAsyncFused  thrpt   30  1285773.592 ± 3851.220  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 619335.249 ops/s
# Warmup Iteration   2: 778203.452 ops/s
# Warmup Iteration   3: 840745.941 ops/s
# Warmup Iteration   4: 820087.988 ops/s
# Warmup Iteration   5: 890977.016 ops/s
# Warmup Iteration   6: 878937.976 ops/s
# Warmup Iteration   7: 880033.008 ops/s
# Warmup Iteration   8: 894049.184 ops/s
# Warmup Iteration   9: 887224.883 ops/s
# Warmup Iteration  10: 884154.106 ops/s
# Warmup Iteration  11: 887616.839 ops/s
# Warmup Iteration  12: 888830.982 ops/s
# Warmup Iteration  13: 885983.552 ops/s
# Warmup Iteration  14: 880866.532 ops/s
# Warmup Iteration  15: 884600.757 ops/s
# Warmup Iteration  16: 866692.863 ops/s
# Warmup Iteration  17: 933077.794 ops/s
# Warmup Iteration  18: 937380.643 ops/s
# Warmup Iteration  19: 934810.957 ops/s
# Warmup Iteration  20: 937966.737 ops/s
# Warmup Iteration  21: 932887.247 ops/s
# Warmup Iteration  22: 933084.067 ops/s
# Warmup Iteration  23: 933969.265 ops/s
# Warmup Iteration  24: 935834.087 ops/s
# Warmup Iteration  25: 932601.797 ops/s
# Warmup Iteration  26: 939087.945 ops/s
# Warmup Iteration  27: 930343.668 ops/s
# Warmup Iteration  28: 938999.691 ops/s
# Warmup Iteration  29: 931426.804 ops/s
# Warmup Iteration  30: 931579.223 ops/s
Iteration   1: 935761.943 ops/s
Iteration   2: 934498.250 ops/s
Iteration   3: 936413.853 ops/s
Iteration   4: 945819.425 ops/s
Iteration   5: 940343.186 ops/s
Iteration   6: 932968.561 ops/s
Iteration   7: 932453.836 ops/s
Iteration   8: 933977.537 ops/s
Iteration   9: 934777.065 ops/s
Iteration  10: 932210.258 ops/s
Iteration  11: 931875.698 ops/s
Iteration  12: 936275.300 ops/s
Iteration  13: 924939.507 ops/s
Iteration  14: 940447.736 ops/s
Iteration  15: 937494.190 ops/s
Iteration  16: 935528.001 ops/s
Iteration  17: 938078.318 ops/s
Iteration  18: 937705.350 ops/s
Iteration  19: 917681.541 ops/s
Iteration  20: 921822.273 ops/s
Iteration  21: 938016.260 ops/s
Iteration  22: 936759.686 ops/s
Iteration  23: 940179.372 ops/s
Iteration  24: 943222.105 ops/s
Iteration  25: 932749.385 ops/s
Iteration  26: 935680.401 ops/s
Iteration  27: 936062.372 ops/s
Iteration  28: 936031.869 ops/s
Iteration  29: 929582.872 ops/s
Iteration  30: 936613.849 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_mainError":
  934865.667 ±(99.9%) 3829.659 ops/s [Average]
  (min, avg, max) = (917681.541, 934865.667, 945819.425), stdev = 5732.054
  CI (99.9%): [931036.007, 938695.326] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_mainError  thrpt   30  934865.667 ± 3829.659  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_doneButNotEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_doneButNotEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1216372.255 ops/s
# Warmup Iteration   2: 1841630.112 ops/s
# Warmup Iteration   3: 1943470.217 ops/s
# Warmup Iteration   4: 2098377.426 ops/s
# Warmup Iteration   5: 2095695.613 ops/s
# Warmup Iteration   6: 2102139.433 ops/s
# Warmup Iteration   7: 2084769.123 ops/s
# Warmup Iteration   8: 2093232.623 ops/s
# Warmup Iteration   9: 2083497.301 ops/s
# Warmup Iteration  10: 2082125.625 ops/s
# Warmup Iteration  11: 2079160.906 ops/s
# Warmup Iteration  12: 2089595.158 ops/s
# Warmup Iteration  13: 2078355.041 ops/s
# Warmup Iteration  14: 2079067.483 ops/s
# Warmup Iteration  15: 2082819.076 ops/s
# Warmup Iteration  16: 2083354.017 ops/s
# Warmup Iteration  17: 2116503.022 ops/s
# Warmup Iteration  18: 2119512.991 ops/s
# Warmup Iteration  19: 2116296.665 ops/s
# Warmup Iteration  20: 2124977.415 ops/s
# Warmup Iteration  21: 2109541.654 ops/s
# Warmup Iteration  22: 2100477.695 ops/s
# Warmup Iteration  23: 2112673.814 ops/s
# Warmup Iteration  24: 2103576.720 ops/s
# Warmup Iteration  25: 2110352.199 ops/s
# Warmup Iteration  26: 2105481.712 ops/s
# Warmup Iteration  27: 2113460.571 ops/s
# Warmup Iteration  28: 2107006.750 ops/s
# Warmup Iteration  29: 2112707.087 ops/s
# Warmup Iteration  30: 2118771.420 ops/s
Iteration   1: 2113629.528 ops/s
Iteration   2: 2090127.095 ops/s
Iteration   3: 2102579.039 ops/s
Iteration   4: 2116657.811 ops/s
Iteration   5: 2110552.037 ops/s
Iteration   6: 2110415.856 ops/s
Iteration   7: 2118480.847 ops/s
Iteration   8: 2109430.053 ops/s
Iteration   9: 2108592.188 ops/s
Iteration  10: 2121130.130 ops/s
Iteration  11: 2114521.535 ops/s
Iteration  12: 2102341.956 ops/s
Iteration  13: 2106203.397 ops/s
Iteration  14: 2117445.265 ops/s
Iteration  15: 2109439.923 ops/s
Iteration  16: 2113970.175 ops/s
Iteration  17: 2114169.015 ops/s
Iteration  18: 2117828.364 ops/s
Iteration  19: 2122536.207 ops/s
Iteration  20: 2116386.072 ops/s
Iteration  21: 2112308.741 ops/s
Iteration  22: 2112249.305 ops/s
Iteration  23: 2119016.360 ops/s
Iteration  24: 2129158.702 ops/s
Iteration  25: 2121969.681 ops/s
Iteration  26: 2121906.339 ops/s
Iteration  27: 2102062.932 ops/s
Iteration  28: 2103468.727 ops/s
Iteration  29: 2108221.565 ops/s
Iteration  30: 2131768.682 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_doneButNotEmpty":
  2113285.584 ±(99.9%) 5753.109 ops/s [Average]
  (min, avg, max) = (2090127.095, 2113285.584, 2131768.682), stdev = 8610.983
  CI (99.9%): [2107532.475, 2119038.693] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_doneButNotEmpty  thrpt   30  2113285.584 ± 5753.109  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_endError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_endError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 406781.590 ops/s
# Warmup Iteration   2: 554759.195 ops/s
# Warmup Iteration   3: 638951.982 ops/s
# Warmup Iteration   4: 640512.579 ops/s
# Warmup Iteration   5: 643668.043 ops/s
# Warmup Iteration   6: 645644.741 ops/s
# Warmup Iteration   7: 646979.391 ops/s
# Warmup Iteration   8: 642740.566 ops/s
# Warmup Iteration   9: 641819.094 ops/s
# Warmup Iteration  10: 642201.037 ops/s
# Warmup Iteration  11: 641098.551 ops/s
# Warmup Iteration  12: 645404.055 ops/s
# Warmup Iteration  13: 639699.538 ops/s
# Warmup Iteration  14: 643032.971 ops/s
# Warmup Iteration  15: 646292.403 ops/s
# Warmup Iteration  16: 644600.643 ops/s
# Warmup Iteration  17: 671732.940 ops/s
# Warmup Iteration  18: 671963.637 ops/s
# Warmup Iteration  19: 670460.264 ops/s
# Warmup Iteration  20: 666455.543 ops/s
# Warmup Iteration  21: 669682.304 ops/s
# Warmup Iteration  22: 667019.993 ops/s
# Warmup Iteration  23: 670616.005 ops/s
# Warmup Iteration  24: 670376.454 ops/s
# Warmup Iteration  25: 667474.232 ops/s
# Warmup Iteration  26: 668166.845 ops/s
# Warmup Iteration  27: 670829.601 ops/s
# Warmup Iteration  28: 670232.306 ops/s
# Warmup Iteration  29: 674498.721 ops/s
# Warmup Iteration  30: 667549.527 ops/s
Iteration   1: 666412.839 ops/s
Iteration   2: 672717.139 ops/s
Iteration   3: 667356.921 ops/s
Iteration   4: 668267.297 ops/s
Iteration   5: 672354.100 ops/s
Iteration   6: 671703.783 ops/s
Iteration   7: 669199.423 ops/s
Iteration   8: 671014.877 ops/s
Iteration   9: 675272.498 ops/s
Iteration  10: 669447.917 ops/s
Iteration  11: 672631.542 ops/s
Iteration  12: 669874.291 ops/s
Iteration  13: 668031.295 ops/s
Iteration  14: 665683.846 ops/s
Iteration  15: 673428.133 ops/s
Iteration  16: 671338.124 ops/s
Iteration  17: 669709.542 ops/s
Iteration  18: 670739.676 ops/s
Iteration  19: 666069.441 ops/s
Iteration  20: 671000.670 ops/s
Iteration  21: 665570.679 ops/s
Iteration  22: 669107.605 ops/s
Iteration  23: 666355.715 ops/s
Iteration  24: 673368.387 ops/s
Iteration  25: 670870.595 ops/s
Iteration  26: 674958.950 ops/s
Iteration  27: 667997.824 ops/s
Iteration  28: 667920.795 ops/s
Iteration  29: 671566.520 ops/s
Iteration  30: 666872.405 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_endError":
  669894.761 ±(99.9%) 1836.653 ops/s [Average]
  (min, avg, max) = (665570.679, 669894.761, 675272.498), stdev = 2749.015
  CI (99.9%): [668058.108, 671731.413] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_endError  thrpt   30  669894.761 ± 1836.653  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_boundaryError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_boundaryError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 400550.482 ops/s
# Warmup Iteration   2: 632646.569 ops/s
# Warmup Iteration   3: 681924.805 ops/s
# Warmup Iteration   4: 635367.014 ops/s
# Warmup Iteration   5: 713290.020 ops/s
# Warmup Iteration   6: 713411.304 ops/s
# Warmup Iteration   7: 713683.766 ops/s
# Warmup Iteration   8: 708669.303 ops/s
# Warmup Iteration   9: 715880.063 ops/s
# Warmup Iteration  10: 711855.636 ops/s
# Warmup Iteration  11: 699120.872 ops/s
# Warmup Iteration  12: 711119.324 ops/s
# Warmup Iteration  13: 710920.265 ops/s
# Warmup Iteration  14: 711403.660 ops/s
# Warmup Iteration  15: 707832.870 ops/s
# Warmup Iteration  16: 707977.322 ops/s
# Warmup Iteration  17: 732736.809 ops/s
# Warmup Iteration  18: 745541.853 ops/s
# Warmup Iteration  19: 738427.684 ops/s
# Warmup Iteration  20: 735636.116 ops/s
# Warmup Iteration  21: 741120.009 ops/s
# Warmup Iteration  22: 746343.871 ops/s
# Warmup Iteration  23: 745782.147 ops/s
# Warmup Iteration  24: 743239.467 ops/s
# Warmup Iteration  25: 744364.438 ops/s
# Warmup Iteration  26: 738613.853 ops/s
# Warmup Iteration  27: 740135.202 ops/s
# Warmup Iteration  28: 746628.559 ops/s
# Warmup Iteration  29: 747053.437 ops/s
# Warmup Iteration  30: 733933.683 ops/s
Iteration   1: 739875.638 ops/s
Iteration   2: 737355.615 ops/s
Iteration   3: 741711.313 ops/s
Iteration   4: 739617.039 ops/s
Iteration   5: 741695.322 ops/s
Iteration   6: 743662.241 ops/s
Iteration   7: 741496.019 ops/s
Iteration   8: 741497.215 ops/s
Iteration   9: 741111.806 ops/s
Iteration  10: 738844.172 ops/s
Iteration  11: 740514.346 ops/s
Iteration  12: 739882.170 ops/s
Iteration  13: 743981.464 ops/s
Iteration  14: 739449.875 ops/s
Iteration  15: 742063.502 ops/s
Iteration  16: 741263.999 ops/s
Iteration  17: 741513.908 ops/s
Iteration  18: 742744.640 ops/s
Iteration  19: 743014.223 ops/s
Iteration  20: 740715.207 ops/s
Iteration  21: 743217.830 ops/s
Iteration  22: 738276.835 ops/s
Iteration  23: 747161.162 ops/s
Iteration  24: 748548.512 ops/s
Iteration  25: 744111.901 ops/s
Iteration  26: 744219.146 ops/s
Iteration  27: 741038.018 ops/s
Iteration  28: 742409.754 ops/s
Iteration  29: 741337.957 ops/s
Iteration  30: 735422.056 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_boundaryError":
  741591.763 ±(99.9%) 1759.566 ops/s [Average]
  (min, avg, max) = (735422.056, 741591.763, 748548.512), stdev = 2633.636
  CI (99.9%): [739832.197, 743351.329] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_boundaryError  thrpt   30  741591.763 ± 1759.566  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_immediateError2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_immediateError2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 439404.800 ops/s
# Warmup Iteration   2: 625545.590 ops/s
# Warmup Iteration   3: 714352.357 ops/s
# Warmup Iteration   4: 679138.677 ops/s
# Warmup Iteration   5: 741689.039 ops/s
# Warmup Iteration   6: 737356.311 ops/s
# Warmup Iteration   7: 742801.225 ops/s
# Warmup Iteration   8: 741765.998 ops/s
# Warmup Iteration   9: 741466.128 ops/s
# Warmup Iteration  10: 727457.190 ops/s
# Warmup Iteration  11: 734645.270 ops/s
# Warmup Iteration  12: 741088.307 ops/s
# Warmup Iteration  13: 739232.007 ops/s
# Warmup Iteration  14: 743631.534 ops/s
# Warmup Iteration  15: 736182.028 ops/s
# Warmup Iteration  16: 738022.061 ops/s
# Warmup Iteration  17: 770464.119 ops/s
# Warmup Iteration  18: 770116.417 ops/s
# Warmup Iteration  19: 772383.885 ops/s
# Warmup Iteration  20: 776536.044 ops/s
# Warmup Iteration  21: 772682.793 ops/s
# Warmup Iteration  22: 770761.313 ops/s
# Warmup Iteration  23: 775433.004 ops/s
# Warmup Iteration  24: 775269.561 ops/s
# Warmup Iteration  25: 771226.686 ops/s
# Warmup Iteration  26: 772483.158 ops/s
# Warmup Iteration  27: 770130.622 ops/s
# Warmup Iteration  28: 768220.920 ops/s
# Warmup Iteration  29: 776254.641 ops/s
# Warmup Iteration  30: 768695.543 ops/s
Iteration   1: 773420.589 ops/s
Iteration   2: 763302.973 ops/s
Iteration   3: 764567.785 ops/s
Iteration   4: 777601.954 ops/s
Iteration   5: 772297.855 ops/s
Iteration   6: 769867.683 ops/s
Iteration   7: 771468.658 ops/s
Iteration   8: 771229.512 ops/s
Iteration   9: 767411.283 ops/s
Iteration  10: 775818.856 ops/s
Iteration  11: 769317.246 ops/s
Iteration  12: 770324.134 ops/s
Iteration  13: 772615.731 ops/s
Iteration  14: 774439.818 ops/s
Iteration  15: 769325.784 ops/s
Iteration  16: 767911.796 ops/s
Iteration  17: 766861.067 ops/s
Iteration  18: 768238.352 ops/s
Iteration  19: 775712.861 ops/s
Iteration  20: 776461.275 ops/s
Iteration  21: 772494.006 ops/s
Iteration  22: 771875.535 ops/s
Iteration  23: 773479.017 ops/s
Iteration  24: 770892.275 ops/s
Iteration  25: 774220.528 ops/s
Iteration  26: 772883.977 ops/s
Iteration  27: 773034.198 ops/s
Iteration  28: 774807.160 ops/s
Iteration  29: 765222.797 ops/s
Iteration  30: 769650.083 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_immediateError2":
  771225.160 ±(99.9%) 2391.775 ops/s [Average]
  (min, avg, max) = (763302.973, 771225.160, 777601.954), stdev = 3579.896
  CI (99.9%): [768833.385, 773616.934] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_immediateError2  thrpt   30  771225.160 ± 2391.775  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_immediateError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_immediateError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 461012.731 ops/s
# Warmup Iteration   2: 625279.814 ops/s
# Warmup Iteration   3: 729486.211 ops/s
# Warmup Iteration   4: 728820.515 ops/s
# Warmup Iteration   5: 732349.187 ops/s
# Warmup Iteration   6: 729001.320 ops/s
# Warmup Iteration   7: 730165.124 ops/s
# Warmup Iteration   8: 731247.977 ops/s
# Warmup Iteration   9: 725237.018 ops/s
# Warmup Iteration  10: 722485.670 ops/s
# Warmup Iteration  11: 726240.086 ops/s
# Warmup Iteration  12: 729818.178 ops/s
# Warmup Iteration  13: 730465.637 ops/s
# Warmup Iteration  14: 730407.508 ops/s
# Warmup Iteration  15: 724643.390 ops/s
# Warmup Iteration  16: 726071.088 ops/s
# Warmup Iteration  17: 757876.179 ops/s
# Warmup Iteration  18: 757453.685 ops/s
# Warmup Iteration  19: 763573.312 ops/s
# Warmup Iteration  20: 764718.622 ops/s
# Warmup Iteration  21: 765020.146 ops/s
# Warmup Iteration  22: 758346.695 ops/s
# Warmup Iteration  23: 764301.976 ops/s
# Warmup Iteration  24: 758659.982 ops/s
# Warmup Iteration  25: 765402.903 ops/s
# Warmup Iteration  26: 763583.969 ops/s
# Warmup Iteration  27: 752405.169 ops/s
# Warmup Iteration  28: 751569.160 ops/s
# Warmup Iteration  29: 760428.520 ops/s
# Warmup Iteration  30: 764493.329 ops/s
Iteration   1: 766362.622 ops/s
Iteration   2: 764327.358 ops/s
Iteration   3: 756866.037 ops/s
Iteration   4: 759435.435 ops/s
Iteration   5: 762073.068 ops/s
Iteration   6: 761512.355 ops/s
Iteration   7: 751259.702 ops/s
Iteration   8: 775044.463 ops/s
Iteration   9: 764626.108 ops/s
Iteration  10: 759522.502 ops/s
Iteration  11: 763872.370 ops/s
Iteration  12: 759130.179 ops/s
Iteration  13: 763522.181 ops/s
Iteration  14: 764079.993 ops/s
Iteration  15: 764133.040 ops/s
Iteration  16: 761643.812 ops/s
Iteration  17: 763064.904 ops/s
Iteration  18: 761219.490 ops/s
Iteration  19: 758356.900 ops/s
Iteration  20: 762319.304 ops/s
Iteration  21: 764809.155 ops/s
Iteration  22: 766884.144 ops/s
Iteration  23: 758876.530 ops/s
Iteration  24: 760697.518 ops/s
Iteration  25: 759910.306 ops/s
Iteration  26: 760515.577 ops/s
Iteration  27: 769277.876 ops/s
Iteration  28: 761891.887 ops/s
Iteration  29: 762706.203 ops/s
Iteration  30: 766580.936 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_immediateError":
  762484.065 ±(99.9%) 2806.060 ops/s [Average]
  (min, avg, max) = (751259.702, 762484.065, 775044.463), stdev = 4199.978
  CI (99.9%): [759678.005, 765290.125] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_immediateError  thrpt   30  762484.065 ± 2806.060  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_queueOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_queueOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 139467.576 ops/s
# Warmup Iteration   2: 191763.956 ops/s
# Warmup Iteration   3: 225175.013 ops/s
# Warmup Iteration   4: 225936.143 ops/s
# Warmup Iteration   5: 227671.036 ops/s
# Warmup Iteration   6: 227063.815 ops/s
# Warmup Iteration   7: 227486.759 ops/s
# Warmup Iteration   8: 225014.309 ops/s
# Warmup Iteration   9: 226137.520 ops/s
# Warmup Iteration  10: 227127.460 ops/s
# Warmup Iteration  11: 227178.113 ops/s
# Warmup Iteration  12: 225376.461 ops/s
# Warmup Iteration  13: 226135.113 ops/s
# Warmup Iteration  14: 226578.827 ops/s
# Warmup Iteration  15: 225152.869 ops/s
# Warmup Iteration  16: 226416.920 ops/s
# Warmup Iteration  17: 236084.994 ops/s
# Warmup Iteration  18: 235713.316 ops/s
# Warmup Iteration  19: 235869.220 ops/s
# Warmup Iteration  20: 236107.760 ops/s
# Warmup Iteration  21: 235970.822 ops/s
# Warmup Iteration  22: 236186.174 ops/s
# Warmup Iteration  23: 235813.573 ops/s
# Warmup Iteration  24: 236172.979 ops/s
# Warmup Iteration  25: 234884.870 ops/s
# Warmup Iteration  26: 236896.961 ops/s
# Warmup Iteration  27: 235359.778 ops/s
# Warmup Iteration  28: 235304.529 ops/s
# Warmup Iteration  29: 236012.902 ops/s
# Warmup Iteration  30: 234630.081 ops/s
Iteration   1: 232646.917 ops/s
Iteration   2: 234706.493 ops/s
Iteration   3: 235060.339 ops/s
Iteration   4: 235250.687 ops/s
Iteration   5: 235130.341 ops/s
Iteration   6: 233473.632 ops/s
Iteration   7: 234545.088 ops/s
Iteration   8: 231244.253 ops/s
Iteration   9: 235996.234 ops/s
Iteration  10: 236760.420 ops/s
Iteration  11: 234810.711 ops/s
Iteration  12: 232919.135 ops/s
Iteration  13: 236635.184 ops/s
Iteration  14: 235567.655 ops/s
Iteration  15: 233373.408 ops/s
Iteration  16: 236192.882 ops/s
Iteration  17: 235675.998 ops/s
Iteration  18: 235194.941 ops/s
Iteration  19: 234869.140 ops/s
Iteration  20: 233333.812 ops/s
Iteration  21: 234692.557 ops/s
Iteration  22: 235622.311 ops/s
Iteration  23: 232237.337 ops/s
Iteration  24: 234653.635 ops/s
Iteration  25: 235592.587 ops/s
Iteration  26: 235890.844 ops/s
Iteration  27: 234550.429 ops/s
Iteration  28: 236381.228 ops/s
Iteration  29: 235255.040 ops/s
Iteration  30: 236418.222 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_queueOverflow":
  234822.715 ±(99.9%) 909.847 ops/s [Average]
  (min, avg, max) = (231244.253, 234822.715, 236760.420), stdev = 1361.816
  CI (99.9%): [233912.869, 235732.562] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_queueOverflow  thrpt   30  234822.715 ± 909.847  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 156489.257 ops/s
# Warmup Iteration   2: 225543.531 ops/s
# Warmup Iteration   3: 247449.943 ops/s
# Warmup Iteration   4: 246938.561 ops/s
# Warmup Iteration   5: 255854.578 ops/s
# Warmup Iteration   6: 253084.668 ops/s
# Warmup Iteration   7: 253908.227 ops/s
# Warmup Iteration   8: 253559.606 ops/s
# Warmup Iteration   9: 253188.522 ops/s
# Warmup Iteration  10: 254507.779 ops/s
# Warmup Iteration  11: 252964.017 ops/s
# Warmup Iteration  12: 251098.464 ops/s
# Warmup Iteration  13: 251474.068 ops/s
# Warmup Iteration  14: 252101.951 ops/s
# Warmup Iteration  15: 248491.322 ops/s
# Warmup Iteration  16: 253080.338 ops/s
# Warmup Iteration  17: 261291.752 ops/s
# Warmup Iteration  18: 259023.044 ops/s
# Warmup Iteration  19: 261182.113 ops/s
# Warmup Iteration  20: 258801.879 ops/s
# Warmup Iteration  21: 259743.098 ops/s
# Warmup Iteration  22: 260672.649 ops/s
# Warmup Iteration  23: 260328.113 ops/s
# Warmup Iteration  24: 260265.822 ops/s
# Warmup Iteration  25: 260293.624 ops/s
# Warmup Iteration  26: 257577.892 ops/s
# Warmup Iteration  27: 260153.473 ops/s
# Warmup Iteration  28: 261632.277 ops/s
# Warmup Iteration  29: 255056.553 ops/s
# Warmup Iteration  30: 259793.998 ops/s
Iteration   1: 259181.545 ops/s
Iteration   2: 259608.965 ops/s
Iteration   3: 258775.601 ops/s
Iteration   4: 261483.644 ops/s
Iteration   5: 260953.813 ops/s
Iteration   6: 257175.386 ops/s
Iteration   7: 260795.586 ops/s
Iteration   8: 260913.183 ops/s
Iteration   9: 260617.700 ops/s
Iteration  10: 262174.901 ops/s
Iteration  11: 259523.493 ops/s
Iteration  12: 259537.768 ops/s
Iteration  13: 261346.698 ops/s
Iteration  14: 259633.473 ops/s
Iteration  15: 261016.009 ops/s
Iteration  16: 257852.137 ops/s
Iteration  17: 259106.717 ops/s
Iteration  18: 260072.651 ops/s
Iteration  19: 261383.757 ops/s
Iteration  20: 260204.622 ops/s
Iteration  21: 258993.573 ops/s
Iteration  22: 260850.292 ops/s
Iteration  23: 260466.168 ops/s
Iteration  24: 260417.408 ops/s
Iteration  25: 257802.134 ops/s
Iteration  26: 257101.508 ops/s
Iteration  27: 259943.062 ops/s
Iteration  28: 259944.499 ops/s
Iteration  29: 259219.226 ops/s
Iteration  30: 259863.585 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel":
  259865.303 ±(99.9%) 843.587 ops/s [Average]
  (min, avg, max) = (257101.508, 259865.303, 262174.901), stdev = 1262.641
  CI (99.9%): [259021.717, 260708.890] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  259865.303 ± 843.587  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 151211.391 ops/s
# Warmup Iteration   2: 224809.263 ops/s
# Warmup Iteration   3: 225395.453 ops/s
# Warmup Iteration   4: 253089.229 ops/s
# Warmup Iteration   5: 257304.405 ops/s
# Warmup Iteration   6: 257369.231 ops/s
# Warmup Iteration   7: 257401.963 ops/s
# Warmup Iteration   8: 258152.002 ops/s
# Warmup Iteration   9: 256875.746 ops/s
# Warmup Iteration  10: 257012.882 ops/s
# Warmup Iteration  11: 258338.126 ops/s
# Warmup Iteration  12: 256238.258 ops/s
# Warmup Iteration  13: 256589.886 ops/s
# Warmup Iteration  14: 253441.707 ops/s
# Warmup Iteration  15: 255099.745 ops/s
# Warmup Iteration  16: 254329.932 ops/s
# Warmup Iteration  17: 265965.924 ops/s
# Warmup Iteration  18: 265425.414 ops/s
# Warmup Iteration  19: 264818.445 ops/s
# Warmup Iteration  20: 262483.586 ops/s
# Warmup Iteration  21: 263150.068 ops/s
# Warmup Iteration  22: 264316.725 ops/s
# Warmup Iteration  23: 264726.372 ops/s
# Warmup Iteration  24: 265332.541 ops/s
# Warmup Iteration  25: 263281.179 ops/s
# Warmup Iteration  26: 262993.739 ops/s
# Warmup Iteration  27: 265901.082 ops/s
# Warmup Iteration  28: 265253.339 ops/s
# Warmup Iteration  29: 265776.472 ops/s
# Warmup Iteration  30: 263050.375 ops/s
Iteration   1: 264706.028 ops/s
Iteration   2: 266049.706 ops/s
Iteration   3: 263053.935 ops/s
Iteration   4: 263293.794 ops/s
Iteration   5: 265936.764 ops/s
Iteration   6: 264535.859 ops/s
Iteration   7: 262327.806 ops/s
Iteration   8: 261973.458 ops/s
Iteration   9: 266089.119 ops/s
Iteration  10: 265723.981 ops/s
Iteration  11: 264582.859 ops/s
Iteration  12: 264856.601 ops/s
Iteration  13: 265542.786 ops/s
Iteration  14: 263796.595 ops/s
Iteration  15: 264909.744 ops/s
Iteration  16: 265910.502 ops/s
Iteration  17: 265619.030 ops/s
Iteration  18: 263634.177 ops/s
Iteration  19: 264451.869 ops/s
Iteration  20: 262893.502 ops/s
Iteration  21: 262471.145 ops/s
Iteration  22: 265837.031 ops/s
Iteration  23: 263970.400 ops/s
Iteration  24: 262989.459 ops/s
Iteration  25: 263329.171 ops/s
Iteration  26: 264532.882 ops/s
Iteration  27: 264340.746 ops/s
Iteration  28: 264967.959 ops/s
Iteration  29: 266266.729 ops/s
Iteration  30: 265177.351 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  264459.033 ±(99.9%) 834.581 ops/s [Average]
  (min, avg, max) = (261973.458, 264459.033, 266266.729), stdev = 1249.162
  CI (99.9%): [263624.452, 265293.614] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score     Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  264459.033 ± 834.581  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 537351.233 ops/s
# Warmup Iteration   2: 667190.700 ops/s
# Warmup Iteration   3: 776298.414 ops/s
# Warmup Iteration   4: 785374.200 ops/s
# Warmup Iteration   5: 815115.693 ops/s
# Warmup Iteration   6: 816367.737 ops/s
# Warmup Iteration   7: 815816.848 ops/s
# Warmup Iteration   8: 809386.329 ops/s
# Warmup Iteration   9: 807408.363 ops/s
# Warmup Iteration  10: 815629.385 ops/s
# Warmup Iteration  11: 811323.575 ops/s
# Warmup Iteration  12: 811110.999 ops/s
# Warmup Iteration  13: 809024.562 ops/s
# Warmup Iteration  14: 812117.674 ops/s
# Warmup Iteration  15: 809721.138 ops/s
# Warmup Iteration  16: 809107.845 ops/s
# Warmup Iteration  17: 851091.230 ops/s
# Warmup Iteration  18: 852374.327 ops/s
# Warmup Iteration  19: 849804.934 ops/s
# Warmup Iteration  20: 853232.125 ops/s
# Warmup Iteration  21: 848980.933 ops/s
# Warmup Iteration  22: 853488.934 ops/s
# Warmup Iteration  23: 851799.940 ops/s
# Warmup Iteration  24: 847817.720 ops/s
# Warmup Iteration  25: 853478.861 ops/s
# Warmup Iteration  26: 847206.094 ops/s
# Warmup Iteration  27: 852025.719 ops/s
# Warmup Iteration  28: 853652.047 ops/s
# Warmup Iteration  29: 846477.953 ops/s
# Warmup Iteration  30: 850060.899 ops/s
Iteration   1: 857426.275 ops/s
Iteration   2: 852198.263 ops/s
Iteration   3: 852462.301 ops/s
Iteration   4: 850427.007 ops/s
Iteration   5: 851071.202 ops/s
Iteration   6: 857942.974 ops/s
Iteration   7: 848843.244 ops/s
Iteration   8: 854903.785 ops/s
Iteration   9: 858418.868 ops/s
Iteration  10: 855713.236 ops/s
Iteration  11: 851228.805 ops/s
Iteration  12: 853527.730 ops/s
Iteration  13: 853672.143 ops/s
Iteration  14: 845670.349 ops/s
Iteration  15: 853734.906 ops/s
Iteration  16: 855632.280 ops/s
Iteration  17: 851073.752 ops/s
Iteration  18: 854652.296 ops/s
Iteration  19: 845784.430 ops/s
Iteration  20: 851475.557 ops/s
Iteration  21: 849137.514 ops/s
Iteration  22: 843476.740 ops/s
Iteration  23: 854566.942 ops/s
Iteration  24: 853476.824 ops/s
Iteration  25: 850838.956 ops/s
Iteration  26: 848957.710 ops/s
Iteration  27: 854715.536 ops/s
Iteration  28: 850478.707 ops/s
Iteration  29: 850614.764 ops/s
Iteration  30: 848085.084 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_error":
  852006.939 ±(99.9%) 2411.087 ops/s [Average]
  (min, avg, max) = (843476.740, 852006.939, 858418.868), stdev = 3608.802
  CI (99.9%): [849595.852, 854418.026] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableThrottleLatestTest._Benchmark.benchmark_error  thrpt   30  852006.939 ± 2411.087  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapNoError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapNoError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 413420.621 ops/s
# Warmup Iteration   2: 659089.501 ops/s
# Warmup Iteration   3: 766594.734 ops/s
# Warmup Iteration   4: 775566.117 ops/s
# Warmup Iteration   5: 770340.110 ops/s
# Warmup Iteration   6: 771184.508 ops/s
# Warmup Iteration   7: 769958.137 ops/s
# Warmup Iteration   8: 771876.468 ops/s
# Warmup Iteration   9: 765806.997 ops/s
# Warmup Iteration  10: 769270.405 ops/s
# Warmup Iteration  11: 769300.853 ops/s
# Warmup Iteration  12: 766269.313 ops/s
# Warmup Iteration  13: 769539.558 ops/s
# Warmup Iteration  14: 767819.499 ops/s
# Warmup Iteration  15: 769808.138 ops/s
# Warmup Iteration  16: 758403.566 ops/s
# Warmup Iteration  17: 769461.044 ops/s
# Warmup Iteration  18: 772213.437 ops/s
# Warmup Iteration  19: 766153.917 ops/s
# Warmup Iteration  20: 771203.164 ops/s
# Warmup Iteration  21: 772785.358 ops/s
# Warmup Iteration  22: 773765.394 ops/s
# Warmup Iteration  23: 776315.122 ops/s
# Warmup Iteration  24: 770749.256 ops/s
# Warmup Iteration  25: 768409.683 ops/s
# Warmup Iteration  26: 774883.456 ops/s
# Warmup Iteration  27: 768876.261 ops/s
# Warmup Iteration  28: 768677.748 ops/s
# Warmup Iteration  29: 771658.120 ops/s
# Warmup Iteration  30: 767233.340 ops/s
Iteration   1: 755752.831 ops/s
Iteration   2: 769965.496 ops/s
Iteration   3: 769419.081 ops/s
Iteration   4: 771692.630 ops/s
Iteration   5: 768678.232 ops/s
Iteration   6: 769054.653 ops/s
Iteration   7: 769250.712 ops/s
Iteration   8: 773730.977 ops/s
Iteration   9: 767833.947 ops/s
Iteration  10: 768659.639 ops/s
Iteration  11: 768960.782 ops/s
Iteration  12: 769049.971 ops/s
Iteration  13: 770478.735 ops/s
Iteration  14: 766823.486 ops/s
Iteration  15: 766380.074 ops/s
Iteration  16: 768597.415 ops/s
Iteration  17: 768719.259 ops/s
Iteration  18: 769781.298 ops/s
Iteration  19: 762028.125 ops/s
Iteration  20: 765152.833 ops/s
Iteration  21: 767009.672 ops/s
Iteration  22: 768197.296 ops/s
Iteration  23: 770972.194 ops/s
Iteration  24: 770804.259 ops/s
Iteration  25: 770340.942 ops/s
Iteration  26: 765556.075 ops/s
Iteration  27: 772501.542 ops/s
Iteration  28: 766943.913 ops/s
Iteration  29: 771764.919 ops/s
Iteration  30: 768115.534 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapNoError":
  768407.217 ±(99.9%) 2239.052 ops/s [Average]
  (min, avg, max) = (755752.831, 768407.217, 773730.977), stdev = 3351.307
  CI (99.9%): [766168.166, 770646.269] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapNoError  thrpt   30  768407.217 ± 2239.052  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_rangeEmitLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_rangeEmitLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 113226.775 ops/s
# Warmup Iteration   2: 225313.947 ops/s
# Warmup Iteration   3: 147941.032 ops/s
# Warmup Iteration   4: 127896.214 ops/s
# Warmup Iteration   5: 101565.049 ops/s
# Warmup Iteration   6: 179396.461 ops/s
# Warmup Iteration   7: 209446.555 ops/s
# Warmup Iteration   8: 283279.057 ops/s
# Warmup Iteration   9: 273975.778 ops/s
# Warmup Iteration  10: 283576.959 ops/s
# Warmup Iteration  11: 243643.250 ops/s
# Warmup Iteration  12: 107011.466 ops/s
# Warmup Iteration  13: 272918.447 ops/s
# Warmup Iteration  14: 278902.279 ops/s
# Warmup Iteration  15: 275732.158 ops/s
# Warmup Iteration  16: 280032.253 ops/s
# Warmup Iteration  17: 287197.409 ops/s
# Warmup Iteration  18: 176911.752 ops/s
# Warmup Iteration  19: 279951.428 ops/s
# Warmup Iteration  20: 294833.231 ops/s
# Warmup Iteration  21: 282583.806 ops/s
# Warmup Iteration  22: 283368.702 ops/s
# Warmup Iteration  23: 279272.585 ops/s
# Warmup Iteration  24: 288461.982 ops/s
# Warmup Iteration  25: 284941.465 ops/s
# Warmup Iteration  26: 266583.031 ops/s
# Warmup Iteration  27: 283850.550 ops/s
# Warmup Iteration  28: 285009.516 ops/s
# Warmup Iteration  29: 278265.856 ops/s
# Warmup Iteration  30: 273657.223 ops/s
Iteration   1: 292026.596 ops/s
Iteration   2: 279111.861 ops/s
Iteration   3: 141324.352 ops/s
Iteration   4: 273774.330 ops/s
Iteration   5: 274516.765 ops/s
Iteration   6: 279889.100 ops/s
Iteration   7: 283959.994 ops/s
Iteration   8: 273467.206 ops/s
Iteration   9: 280179.006 ops/s
Iteration  10: 285952.925 ops/s
Iteration  11: 281549.893 ops/s
Iteration  12: 281135.316 ops/s
Iteration  13: 281700.383 ops/s
Iteration  14: 284703.151 ops/s
Iteration  15: 285234.664 ops/s
Iteration  16: 160164.637 ops/s
Iteration  17: 278137.149 ops/s
Iteration  18: 273846.706 ops/s
Iteration  19: 275397.775 ops/s
Iteration  20: 256416.393 ops/s
Iteration  21: 282964.200 ops/s
Iteration  22: 280344.695 ops/s
Iteration  23: 274296.534 ops/s
Iteration  24: 273592.303 ops/s
Iteration  25: 281998.199 ops/s
Iteration  26: 271698.296 ops/s
Iteration  27: 276097.602 ops/s
Iteration  28: 223699.857 ops/s
Iteration  29: 282204.101 ops/s
Iteration  30: 287673.715 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_rangeEmitLatest":
  268568.590 ±(99.9%) 22896.082 ops/s [Average]
  (min, avg, max) = (141324.352, 268568.590, 292026.596), stdev = 34269.780
  CI (99.9%): [245672.509, 291464.672] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
FlowableThrottleLatestTest._Benchmark.benchmark_rangeEmitLatest  thrpt   30  268568.590 ± 22896.082  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 635771.909 ops/s
# Warmup Iteration   2: 807277.302 ops/s
# Warmup Iteration   3: 913961.011 ops/s
# Warmup Iteration   4: 910265.753 ops/s
# Warmup Iteration   5: 911487.370 ops/s
# Warmup Iteration   6: 908462.516 ops/s
# Warmup Iteration   7: 912407.731 ops/s
# Warmup Iteration   8: 909062.460 ops/s
# Warmup Iteration   9: 911289.216 ops/s
# Warmup Iteration  10: 879752.128 ops/s
# Warmup Iteration  11: 913282.100 ops/s
# Warmup Iteration  12: 897732.685 ops/s
# Warmup Iteration  13: 910300.725 ops/s
# Warmup Iteration  14: 903031.071 ops/s
# Warmup Iteration  15: 911379.524 ops/s
# Warmup Iteration  16: 900734.659 ops/s
# Warmup Iteration  17: 956983.130 ops/s
# Warmup Iteration  18: 954156.452 ops/s
# Warmup Iteration  19: 961660.710 ops/s
# Warmup Iteration  20: 955868.706 ops/s
# Warmup Iteration  21: 963319.435 ops/s
# Warmup Iteration  22: 955340.885 ops/s
# Warmup Iteration  23: 962405.651 ops/s
# Warmup Iteration  24: 960592.193 ops/s
# Warmup Iteration  25: 963962.181 ops/s
# Warmup Iteration  26: 955420.726 ops/s
# Warmup Iteration  27: 957981.464 ops/s
# Warmup Iteration  28: 963058.774 ops/s
# Warmup Iteration  29: 956090.194 ops/s
# Warmup Iteration  30: 958730.848 ops/s
Iteration   1: 961053.677 ops/s
Iteration   2: 962025.809 ops/s
Iteration   3: 967324.362 ops/s
Iteration   4: 962839.617 ops/s
Iteration   5: 961805.830 ops/s
Iteration   6: 957601.720 ops/s
Iteration   7: 956527.003 ops/s
Iteration   8: 961158.403 ops/s
Iteration   9: 954103.082 ops/s
Iteration  10: 964978.186 ops/s
Iteration  11: 954048.884 ops/s
Iteration  12: 953659.272 ops/s
Iteration  13: 957389.462 ops/s
Iteration  14: 954881.504 ops/s
Iteration  15: 950384.478 ops/s
Iteration  16: 952101.329 ops/s
Iteration  17: 959393.872 ops/s
Iteration  18: 957493.204 ops/s
Iteration  19: 956643.330 ops/s
Iteration  20: 960629.170 ops/s
Iteration  21: 961203.714 ops/s
Iteration  22: 957452.668 ops/s
Iteration  23: 961103.221 ops/s
Iteration  24: 959150.299 ops/s
Iteration  25: 953432.799 ops/s
Iteration  26: 967558.344 ops/s
Iteration  27: 956218.657 ops/s
Iteration  28: 952888.545 ops/s
Iteration  29: 952324.282 ops/s
Iteration  30: 965212.953 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_error":
  958419.589 ±(99.9%) 3081.367 ops/s [Average]
  (min, avg, max) = (950384.478, 958419.589, 967558.344), stdev = 4612.046
  CI (99.9%): [955338.222, 961500.956] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowableUnsubscribeOnTest._Benchmark.benchmark_error  thrpt   30  958419.589 ± 3081.367  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapConditionalNoError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapConditionalNoError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 362145.799 ops/s
# Warmup Iteration   2: 560107.948 ops/s
# Warmup Iteration   3: 673075.199 ops/s
# Warmup Iteration   4: 677406.011 ops/s
# Warmup Iteration   5: 673380.383 ops/s
# Warmup Iteration   6: 673219.307 ops/s
# Warmup Iteration   7: 674100.101 ops/s
# Warmup Iteration   8: 671701.633 ops/s
# Warmup Iteration   9: 669760.865 ops/s
# Warmup Iteration  10: 674020.086 ops/s
# Warmup Iteration  11: 675015.595 ops/s
# Warmup Iteration  12: 672779.960 ops/s
# Warmup Iteration  13: 670479.353 ops/s
# Warmup Iteration  14: 676912.449 ops/s
# Warmup Iteration  15: 676390.737 ops/s
# Warmup Iteration  16: 671473.808 ops/s
# Warmup Iteration  17: 672673.940 ops/s
# Warmup Iteration  18: 672373.974 ops/s
# Warmup Iteration  19: 672098.656 ops/s
# Warmup Iteration  20: 667264.199 ops/s
# Warmup Iteration  21: 667552.787 ops/s
# Warmup Iteration  22: 671089.124 ops/s
# Warmup Iteration  23: 670391.099 ops/s
# Warmup Iteration  24: 675965.038 ops/s
# Warmup Iteration  25: 671578.107 ops/s
# Warmup Iteration  26: 668725.052 ops/s
# Warmup Iteration  27: 656896.042 ops/s
# Warmup Iteration  28: 673124.678 ops/s
# Warmup Iteration  29: 672208.619 ops/s
# Warmup Iteration  30: 671959.577 ops/s
Iteration   1: 667945.847 ops/s
Iteration   2: 668641.669 ops/s
Iteration   3: 671118.482 ops/s
Iteration   4: 672623.105 ops/s
Iteration   5: 668935.368 ops/s
Iteration   6: 672389.094 ops/s
Iteration   7: 666779.320 ops/s
Iteration   8: 667022.384 ops/s
Iteration   9: 668679.643 ops/s
Iteration  10: 669829.723 ops/s
Iteration  11: 671514.984 ops/s
Iteration  12: 671801.157 ops/s
Iteration  13: 670434.323 ops/s
Iteration  14: 671248.163 ops/s
Iteration  15: 672126.447 ops/s
Iteration  16: 670191.930 ops/s
Iteration  17: 662343.268 ops/s
Iteration  18: 669738.788 ops/s
Iteration  19: 668602.720 ops/s
Iteration  20: 669278.788 ops/s
Iteration  21: 666949.533 ops/s
Iteration  22: 671970.047 ops/s
Iteration  23: 672978.526 ops/s
Iteration  24: 669602.026 ops/s
Iteration  25: 669355.459 ops/s
Iteration  26: 669256.297 ops/s
Iteration  27: 669699.053 ops/s
Iteration  28: 669930.508 ops/s
Iteration  29: 665976.325 ops/s
Iteration  30: 666560.420 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapConditionalNoError":
  669450.780 ±(99.9%) 1556.076 ops/s [Average]
  (min, avg, max) = (662343.268, 669450.780, 672978.526), stdev = 2329.062
  CI (99.9%): [667894.703, 671006.856] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapConditionalNoError  thrpt   30  669450.780 ± 1556.076  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1335657.156 ops/s
# Warmup Iteration   2: 2010415.083 ops/s
# Warmup Iteration   3: 2486069.891 ops/s
# Warmup Iteration   4: 2523983.622 ops/s
# Warmup Iteration   5: 2515134.854 ops/s
# Warmup Iteration   6: 2501884.144 ops/s
# Warmup Iteration   7: 2452643.481 ops/s
# Warmup Iteration   8: 2525642.746 ops/s
# Warmup Iteration   9: 2509593.745 ops/s
# Warmup Iteration  10: 2504187.693 ops/s
# Warmup Iteration  11: 2511355.581 ops/s
# Warmup Iteration  12: 2488957.087 ops/s
# Warmup Iteration  13: 2495234.052 ops/s
# Warmup Iteration  14: 2499956.304 ops/s
# Warmup Iteration  15: 2495067.277 ops/s
# Warmup Iteration  16: 2486140.535 ops/s
# Warmup Iteration  17: 2490263.625 ops/s
# Warmup Iteration  18: 2504403.552 ops/s
# Warmup Iteration  19: 2487706.479 ops/s
# Warmup Iteration  20: 2502015.975 ops/s
# Warmup Iteration  21: 2481191.355 ops/s
# Warmup Iteration  22: 2464248.583 ops/s
# Warmup Iteration  23: 2479418.845 ops/s
# Warmup Iteration  24: 2494534.124 ops/s
# Warmup Iteration  25: 2492080.532 ops/s
# Warmup Iteration  26: 2465325.630 ops/s
# Warmup Iteration  27: 2505484.877 ops/s
# Warmup Iteration  28: 2500292.256 ops/s
# Warmup Iteration  29: 2503366.527 ops/s
# Warmup Iteration  30: 2484541.066 ops/s
Iteration   1: 2481015.180 ops/s
Iteration   2: 2495943.543 ops/s
Iteration   3: 2491542.396 ops/s
Iteration   4: 2498053.361 ops/s
Iteration   5: 2474628.074 ops/s
Iteration   6: 2492261.802 ops/s
Iteration   7: 2489560.221 ops/s
Iteration   8: 2497556.207 ops/s
Iteration   9: 2493423.980 ops/s
Iteration  10: 2495502.364 ops/s
Iteration  11: 2495192.361 ops/s
Iteration  12: 2493974.219 ops/s
Iteration  13: 2501283.336 ops/s
Iteration  14: 2496012.051 ops/s
Iteration  15: 2483706.002 ops/s
Iteration  16: 2481306.539 ops/s
Iteration  17: 2494930.646 ops/s
Iteration  18: 2489933.819 ops/s
Iteration  19: 2476892.789 ops/s
Iteration  20: 2485092.227 ops/s
Iteration  21: 2480942.324 ops/s
Iteration  22: 2480581.111 ops/s
Iteration  23: 2489311.246 ops/s
Iteration  24: 2491044.491 ops/s
Iteration  25: 2479744.509 ops/s
Iteration  26: 2500935.112 ops/s
Iteration  27: 2485657.923 ops/s
Iteration  28: 2483789.760 ops/s
Iteration  29: 2503033.076 ops/s
Iteration  30: 2488203.547 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithSkip":
  2489701.807 ±(99.9%) 5101.052 ops/s [Average]
  (min, avg, max) = (2474628.074, 2489701.807, 2503033.076), stdev = 7635.015
  CI (99.9%): [2484600.756, 2494802.859] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithSkip  thrpt   30  2489701.807 ± 5101.052  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetryLimited$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetryLimited

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1023740.374 ops/s
# Warmup Iteration   2: 1946033.097 ops/s
# Warmup Iteration   3: 2423209.338 ops/s
# Warmup Iteration   4: 2430029.447 ops/s
# Warmup Iteration   5: 2413275.694 ops/s
# Warmup Iteration   6: 2389916.113 ops/s
# Warmup Iteration   7: 2411486.393 ops/s
# Warmup Iteration   8: 2412143.287 ops/s
# Warmup Iteration   9: 2414725.709 ops/s
# Warmup Iteration  10: 2415292.387 ops/s
# Warmup Iteration  11: 2409623.993 ops/s
# Warmup Iteration  12: 2412675.954 ops/s
# Warmup Iteration  13: 2418198.764 ops/s
# Warmup Iteration  14: 2410309.173 ops/s
# Warmup Iteration  15: 2400550.088 ops/s
# Warmup Iteration  16: 2417432.094 ops/s
# Warmup Iteration  17: 2415817.434 ops/s
# Warmup Iteration  18: 2411196.007 ops/s
# Warmup Iteration  19: 2402759.196 ops/s
# Warmup Iteration  20: 2408240.528 ops/s
# Warmup Iteration  21: 2419283.948 ops/s
# Warmup Iteration  22: 2326561.731 ops/s
# Warmup Iteration  23: 2424112.905 ops/s
# Warmup Iteration  24: 2407866.497 ops/s
# Warmup Iteration  25: 2411094.784 ops/s
# Warmup Iteration  26: 2409471.711 ops/s
# Warmup Iteration  27: 2409364.145 ops/s
# Warmup Iteration  28: 2415122.853 ops/s
# Warmup Iteration  29: 2409073.332 ops/s
# Warmup Iteration  30: 2418636.251 ops/s
Iteration   1: 2398977.403 ops/s
Iteration   2: 2421829.150 ops/s
Iteration   3: 2410574.168 ops/s
Iteration   4: 2421702.615 ops/s
Iteration   5: 2414099.593 ops/s
Iteration   6: 2419009.877 ops/s
Iteration   7: 2433308.439 ops/s
Iteration   8: 2414570.817 ops/s
Iteration   9: 2410497.020 ops/s
Iteration  10: 2434829.429 ops/s
Iteration  11: 2370216.062 ops/s
Iteration  12: 2428761.464 ops/s
Iteration  13: 2376558.028 ops/s
Iteration  14: 2407340.240 ops/s
Iteration  15: 2429599.613 ops/s
Iteration  16: 2422463.764 ops/s
Iteration  17: 2414902.256 ops/s
Iteration  18: 2418536.832 ops/s
Iteration  19: 2414206.903 ops/s
Iteration  20: 2422085.485 ops/s
Iteration  21: 2417934.376 ops/s
Iteration  22: 2402466.131 ops/s
Iteration  23: 2413342.791 ops/s
Iteration  24: 2426709.795 ops/s
Iteration  25: 2421572.879 ops/s
Iteration  26: 2413694.534 ops/s
Iteration  27: 2408323.244 ops/s
Iteration  28: 2422319.648 ops/s
Iteration  29: 2422103.323 ops/s
Iteration  30: 2403107.682 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetryLimited":
  2414521.452 ±(99.9%) 9473.700 ops/s [Average]
  (min, avg, max) = (2370216.062, 2414521.452, 2434829.429), stdev = 14179.789
  CI (99.9%): [2405047.752, 2423995.152] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetryLimited  thrpt   30  2414521.452 ± 9473.700  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetry$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetry

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1285193.778 ops/s
# Warmup Iteration   2: 1962933.290 ops/s
# Warmup Iteration   3: 2358863.924 ops/s
# Warmup Iteration   4: 2368544.405 ops/s
# Warmup Iteration   5: 2348605.414 ops/s
# Warmup Iteration   6: 2347905.823 ops/s
# Warmup Iteration   7: 2346495.448 ops/s
# Warmup Iteration   8: 2344403.460 ops/s
# Warmup Iteration   9: 2356665.013 ops/s
# Warmup Iteration  10: 2348286.373 ops/s
# Warmup Iteration  11: 2324396.138 ops/s
# Warmup Iteration  12: 2353904.709 ops/s
# Warmup Iteration  13: 2353848.008 ops/s
# Warmup Iteration  14: 2374551.215 ops/s
# Warmup Iteration  15: 2345738.140 ops/s
# Warmup Iteration  16: 2355076.892 ops/s
# Warmup Iteration  17: 2351438.298 ops/s
# Warmup Iteration  18: 2359158.290 ops/s
# Warmup Iteration  19: 2340257.548 ops/s
# Warmup Iteration  20: 2362268.463 ops/s
# Warmup Iteration  21: 2357967.107 ops/s
# Warmup Iteration  22: 2335653.977 ops/s
# Warmup Iteration  23: 2342796.450 ops/s
# Warmup Iteration  24: 2364376.745 ops/s
# Warmup Iteration  25: 2366089.884 ops/s
# Warmup Iteration  26: 2337852.501 ops/s
# Warmup Iteration  27: 2346703.082 ops/s
# Warmup Iteration  28: 2354393.947 ops/s
# Warmup Iteration  29: 2353375.816 ops/s
# Warmup Iteration  30: 2361671.854 ops/s
Iteration   1: 2340382.951 ops/s
Iteration   2: 2350442.896 ops/s
Iteration   3: 2354367.033 ops/s
Iteration   4: 2340167.620 ops/s
Iteration   5: 2364281.411 ops/s
Iteration   6: 2347602.848 ops/s
Iteration   7: 2362527.451 ops/s
Iteration   8: 2345610.032 ops/s
Iteration   9: 2334852.990 ops/s
Iteration  10: 2355197.596 ops/s
Iteration  11: 2354906.541 ops/s
Iteration  12: 2365805.492 ops/s
Iteration  13: 2372131.466 ops/s
Iteration  14: 2346643.921 ops/s
Iteration  15: 2337863.693 ops/s
Iteration  16: 2333512.816 ops/s
Iteration  17: 2371968.096 ops/s
Iteration  18: 2363468.002 ops/s
Iteration  19: 2356412.810 ops/s
Iteration  20: 2344727.172 ops/s
Iteration  21: 2361513.118 ops/s
Iteration  22: 2347030.323 ops/s
Iteration  23: 2348808.514 ops/s
Iteration  24: 2344599.310 ops/s
Iteration  25: 2356830.011 ops/s
Iteration  26: 2357709.654 ops/s
Iteration  27: 2358824.157 ops/s
Iteration  28: 2357048.924 ops/s
Iteration  29: 2356544.122 ops/s
Iteration  30: 2362126.806 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetry":
  2353130.259 ±(99.9%) 6884.571 ops/s [Average]
  (min, avg, max) = (2333512.816, 2353130.259, 2372131.466), stdev = 10304.503
  CI (99.9%): [2346245.688, 2360014.830] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetry  thrpt   30  2353130.259 ± 6884.571  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithStop$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithStop

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1396220.192 ops/s
# Warmup Iteration   2: 2078061.999 ops/s
# Warmup Iteration   3: 2556391.712 ops/s
# Warmup Iteration   4: 2536611.888 ops/s
# Warmup Iteration   5: 2586216.401 ops/s
# Warmup Iteration   6: 2586723.391 ops/s
# Warmup Iteration   7: 2570822.871 ops/s
# Warmup Iteration   8: 2589790.603 ops/s
# Warmup Iteration   9: 2600802.794 ops/s
# Warmup Iteration  10: 2575926.848 ops/s
# Warmup Iteration  11: 2550387.217 ops/s
# Warmup Iteration  12: 2569489.916 ops/s
# Warmup Iteration  13: 2583226.957 ops/s
# Warmup Iteration  14: 2571060.649 ops/s
# Warmup Iteration  15: 2594969.709 ops/s
# Warmup Iteration  16: 2580113.164 ops/s
# Warmup Iteration  17: 2575324.888 ops/s
# Warmup Iteration  18: 2590209.263 ops/s
# Warmup Iteration  19: 2564098.658 ops/s
# Warmup Iteration  20: 2583928.239 ops/s
# Warmup Iteration  21: 2581245.720 ops/s
# Warmup Iteration  22: 2569190.163 ops/s
# Warmup Iteration  23: 2573010.891 ops/s
# Warmup Iteration  24: 2561276.141 ops/s
# Warmup Iteration  25: 2573184.268 ops/s
# Warmup Iteration  26: 2583822.766 ops/s
# Warmup Iteration  27: 2584783.202 ops/s
# Warmup Iteration  28: 2583238.651 ops/s
# Warmup Iteration  29: 2572356.044 ops/s
# Warmup Iteration  30: 2565159.832 ops/s
Iteration   1: 2586366.413 ops/s
Iteration   2: 2556662.716 ops/s
Iteration   3: 2567339.361 ops/s
Iteration   4: 2592229.944 ops/s
Iteration   5: 2586308.975 ops/s
Iteration   6: 2572135.332 ops/s
Iteration   7: 2581231.431 ops/s
Iteration   8: 2560980.475 ops/s
Iteration   9: 2572437.672 ops/s
Iteration  10: 2579686.889 ops/s
Iteration  11: 2582795.457 ops/s
Iteration  12: 2567327.089 ops/s
Iteration  13: 2574001.844 ops/s
Iteration  14: 2574824.960 ops/s
Iteration  15: 2577698.931 ops/s
Iteration  16: 2544910.916 ops/s
Iteration  17: 2558657.520 ops/s
Iteration  18: 2566346.426 ops/s
Iteration  19: 2553384.622 ops/s
Iteration  20: 2576522.805 ops/s
Iteration  21: 2570454.968 ops/s
Iteration  22: 2567154.165 ops/s
Iteration  23: 2583268.913 ops/s
Iteration  24: 2571466.933 ops/s
Iteration  25: 2577435.424 ops/s
Iteration  26: 2592951.155 ops/s
Iteration  27: 2558479.114 ops/s
Iteration  28: 2566872.385 ops/s
Iteration  29: 2566701.328 ops/s
Iteration  30: 2585154.160 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithStop":
  2572392.944 ±(99.9%) 7712.188 ops/s [Average]
  (min, avg, max) = (2544910.916, 2572392.944, 2592951.155), stdev = 11543.241
  CI (99.9%): [2564680.756, 2580105.133] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithStop  thrpt   30  2572392.944 ± 7712.188  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_mapCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_mapCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 244667.049 ops/s
# Warmup Iteration   2: 322078.531 ops/s
# Warmup Iteration   3: 319987.541 ops/s
# Warmup Iteration   4: 344823.657 ops/s
# Warmup Iteration   5: 342268.668 ops/s
# Warmup Iteration   6: 344950.879 ops/s
# Warmup Iteration   7: 345629.495 ops/s
# Warmup Iteration   8: 345596.913 ops/s
# Warmup Iteration   9: 344763.067 ops/s
# Warmup Iteration  10: 342176.600 ops/s
# Warmup Iteration  11: 346198.200 ops/s
# Warmup Iteration  12: 343192.574 ops/s
# Warmup Iteration  13: 342838.646 ops/s
# Warmup Iteration  14: 344300.621 ops/s
# Warmup Iteration  15: 345970.081 ops/s
# Warmup Iteration  16: 344649.319 ops/s
# Warmup Iteration  17: 351035.711 ops/s
# Warmup Iteration  18: 353155.913 ops/s
# Warmup Iteration  19: 353283.440 ops/s
# Warmup Iteration  20: 352233.644 ops/s
# Warmup Iteration  21: 350610.577 ops/s
# Warmup Iteration  22: 350606.753 ops/s
# Warmup Iteration  23: 352022.961 ops/s
# Warmup Iteration  24: 343349.637 ops/s
# Warmup Iteration  25: 354010.903 ops/s
# Warmup Iteration  26: 354177.913 ops/s
# Warmup Iteration  27: 355236.328 ops/s
# Warmup Iteration  28: 356927.455 ops/s
# Warmup Iteration  29: 352845.985 ops/s
# Warmup Iteration  30: 354167.885 ops/s
Iteration   1: 349928.577 ops/s
Iteration   2: 352011.080 ops/s
Iteration   3: 350349.654 ops/s
Iteration   4: 352670.159 ops/s
Iteration   5: 353089.450 ops/s
Iteration   6: 352814.099 ops/s
Iteration   7: 351815.657 ops/s
Iteration   8: 354542.841 ops/s
Iteration   9: 351748.828 ops/s
Iteration  10: 351727.897 ops/s
Iteration  11: 351759.025 ops/s
Iteration  12: 353972.131 ops/s
Iteration  13: 352420.979 ops/s
Iteration  14: 351458.223 ops/s
Iteration  15: 350022.398 ops/s
Iteration  16: 353051.744 ops/s
Iteration  17: 350589.621 ops/s
Iteration  18: 352171.599 ops/s
Iteration  19: 353336.920 ops/s
Iteration  20: 351985.273 ops/s
Iteration  21: 351717.991 ops/s
Iteration  22: 352715.869 ops/s
Iteration  23: 352874.373 ops/s
Iteration  24: 353602.670 ops/s
Iteration  25: 352368.046 ops/s
Iteration  26: 350498.971 ops/s
Iteration  27: 349604.102 ops/s
Iteration  28: 352283.481 ops/s
Iteration  29: 352965.204 ops/s
Iteration  30: 353070.366 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_mapCrash":
  352105.574 ±(99.9%) 814.205 ops/s [Average]
  (min, avg, max) = (349604.102, 352105.574, 354542.841), stdev = 1218.664
  CI (99.9%): [351291.369, 352919.779] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ParallelMapOptionalTest._Benchmark.benchmark_mapCrash  thrpt   30  352105.574 ± 814.205  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithSkipConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithSkipConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1239617.019 ops/s
# Warmup Iteration   2: 1887468.633 ops/s
# Warmup Iteration   3: 2389181.504 ops/s
# Warmup Iteration   4: 2396774.599 ops/s
# Warmup Iteration   5: 2380998.755 ops/s
# Warmup Iteration   6: 2395232.889 ops/s
# Warmup Iteration   7: 2400866.452 ops/s
# Warmup Iteration   8: 2389485.351 ops/s
# Warmup Iteration   9: 2379294.206 ops/s
# Warmup Iteration  10: 2395017.377 ops/s
# Warmup Iteration  11: 2396703.865 ops/s
# Warmup Iteration  12: 2399244.323 ops/s
# Warmup Iteration  13: 2388121.864 ops/s
# Warmup Iteration  14: 2388836.785 ops/s
# Warmup Iteration  15: 2381313.078 ops/s
# Warmup Iteration  16: 2391236.322 ops/s
# Warmup Iteration  17: 2397702.336 ops/s
# Warmup Iteration  18: 2378221.993 ops/s
# Warmup Iteration  19: 2396725.882 ops/s
# Warmup Iteration  20: 2384570.274 ops/s
# Warmup Iteration  21: 2395426.249 ops/s
# Warmup Iteration  22: 2382981.566 ops/s
# Warmup Iteration  23: 2359048.439 ops/s
# Warmup Iteration  24: 2406736.311 ops/s
# Warmup Iteration  25: 2403450.448 ops/s
# Warmup Iteration  26: 2384022.062 ops/s
# Warmup Iteration  27: 2378680.159 ops/s
# Warmup Iteration  28: 2373919.087 ops/s
# Warmup Iteration  29: 2382980.825 ops/s
# Warmup Iteration  30: 2391243.520 ops/s
Iteration   1: 2394259.680 ops/s
Iteration   2: 2386742.493 ops/s
Iteration   3: 2377840.821 ops/s
Iteration   4: 2405765.257 ops/s
Iteration   5: 2362746.008 ops/s
Iteration   6: 2393231.304 ops/s
Iteration   7: 2393875.102 ops/s
Iteration   8: 2382698.122 ops/s
Iteration   9: 2386603.069 ops/s
Iteration  10: 2386914.948 ops/s
Iteration  11: 2387571.337 ops/s
Iteration  12: 2385596.513 ops/s
Iteration  13: 2393139.128 ops/s
Iteration  14: 2374589.093 ops/s
Iteration  15: 2373286.510 ops/s
Iteration  16: 2372468.787 ops/s
Iteration  17: 2389834.756 ops/s
Iteration  18: 2374520.251 ops/s
Iteration  19: 2393798.895 ops/s
Iteration  20: 2382479.824 ops/s
Iteration  21: 2389697.126 ops/s
Iteration  22: 2398767.549 ops/s
Iteration  23: 2398038.892 ops/s
Iteration  24: 2384391.673 ops/s
Iteration  25: 2402134.255 ops/s
Iteration  26: 2388564.093 ops/s
Iteration  27: 2378887.905 ops/s
Iteration  28: 2373554.914 ops/s
Iteration  29: 2377097.184 ops/s
Iteration  30: 2378619.938 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithSkipConditional":
  2385590.514 ±(99.9%) 6642.609 ops/s [Average]
  (min, avg, max) = (2362746.008, 2385590.514, 2405765.257), stdev = 9942.346
  CI (99.9%): [2378947.905, 2392233.124] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithSkipConditional  thrpt   30  2385590.514 ± 6642.609  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetryLimitedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetryLimitedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1198868.326 ops/s
# Warmup Iteration   2: 1743903.926 ops/s
# Warmup Iteration   3: 2221390.011 ops/s
# Warmup Iteration   4: 2216962.412 ops/s
# Warmup Iteration   5: 2208656.301 ops/s
# Warmup Iteration   6: 2209634.296 ops/s
# Warmup Iteration   7: 2192417.434 ops/s
# Warmup Iteration   8: 2197855.729 ops/s
# Warmup Iteration   9: 2193689.845 ops/s
# Warmup Iteration  10: 2200218.577 ops/s
# Warmup Iteration  11: 2166504.769 ops/s
# Warmup Iteration  12: 2195929.427 ops/s
# Warmup Iteration  13: 2193950.507 ops/s
# Warmup Iteration  14: 2194360.680 ops/s
# Warmup Iteration  15: 2195792.614 ops/s
# Warmup Iteration  16: 2192282.853 ops/s
# Warmup Iteration  17: 2195965.668 ops/s
# Warmup Iteration  18: 2199037.904 ops/s
# Warmup Iteration  19: 2193231.458 ops/s
# Warmup Iteration  20: 2189944.338 ops/s
# Warmup Iteration  21: 2202361.809 ops/s
# Warmup Iteration  22: 2195763.696 ops/s
# Warmup Iteration  23: 2215100.927 ops/s
# Warmup Iteration  24: 2198319.772 ops/s
# Warmup Iteration  25: 2197758.926 ops/s
# Warmup Iteration  26: 2202961.422 ops/s
# Warmup Iteration  27: 2202193.370 ops/s
# Warmup Iteration  28: 2182712.927 ops/s
# Warmup Iteration  29: 2212699.088 ops/s
# Warmup Iteration  30: 2191107.503 ops/s
Iteration   1: 2202983.378 ops/s
Iteration   2: 2208536.675 ops/s
Iteration   3: 2209646.407 ops/s
Iteration   4: 2196595.663 ops/s
Iteration   5: 2199460.764 ops/s
Iteration   6: 2192451.335 ops/s
Iteration   7: 2198505.414 ops/s
Iteration   8: 2180325.507 ops/s
Iteration   9: 2188511.734 ops/s
Iteration  10: 2204158.774 ops/s
Iteration  11: 2205682.689 ops/s
Iteration  12: 2195235.829 ops/s
Iteration  13: 2186460.360 ops/s
Iteration  14: 2211381.234 ops/s
Iteration  15: 2198184.513 ops/s
Iteration  16: 2199581.581 ops/s
Iteration  17: 2187010.294 ops/s
Iteration  18: 2202589.493 ops/s
Iteration  19: 2192339.992 ops/s
Iteration  20: 2213151.471 ops/s
Iteration  21: 2198115.573 ops/s
Iteration  22: 2193736.011 ops/s
Iteration  23: 2177933.348 ops/s
Iteration  24: 2198146.384 ops/s
Iteration  25: 2198015.647 ops/s
Iteration  26: 2191998.646 ops/s
Iteration  27: 2199074.938 ops/s
Iteration  28: 2203746.273 ops/s
Iteration  29: 2200312.582 ops/s
Iteration  30: 2185689.077 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetryLimitedConditional":
  2197318.720 ±(99.9%) 5773.924 ops/s [Average]
  (min, avg, max) = (2177933.348, 2197318.720, 2213151.471), stdev = 8642.139
  CI (99.9%): [2191544.795, 2203092.644] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetryLimitedConditional  thrpt   30  2197318.720 ± 5773.924  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetryConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetryConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1076961.072 ops/s
# Warmup Iteration   2: 1694972.039 ops/s
# Warmup Iteration   3: 2115916.019 ops/s
# Warmup Iteration   4: 2108903.958 ops/s
# Warmup Iteration   5: 2110745.427 ops/s
# Warmup Iteration   6: 2127848.544 ops/s
# Warmup Iteration   7: 2111594.008 ops/s
# Warmup Iteration   8: 2099613.678 ops/s
# Warmup Iteration   9: 2114314.978 ops/s
# Warmup Iteration  10: 2106985.925 ops/s
# Warmup Iteration  11: 2116367.789 ops/s
# Warmup Iteration  12: 2102458.652 ops/s
# Warmup Iteration  13: 2127841.108 ops/s
# Warmup Iteration  14: 2130117.970 ops/s
# Warmup Iteration  15: 2076169.724 ops/s
# Warmup Iteration  16: 2096029.381 ops/s
# Warmup Iteration  17: 2108081.516 ops/s
# Warmup Iteration  18: 2115431.815 ops/s
# Warmup Iteration  19: 2120369.128 ops/s
# Warmup Iteration  20: 2133196.190 ops/s
# Warmup Iteration  21: 2114843.592 ops/s
# Warmup Iteration  22: 2107832.949 ops/s
# Warmup Iteration  23: 2116181.718 ops/s
# Warmup Iteration  24: 2123447.771 ops/s
# Warmup Iteration  25: 2114578.791 ops/s
# Warmup Iteration  26: 2118951.400 ops/s
# Warmup Iteration  27: 2125683.114 ops/s
# Warmup Iteration  28: 2129769.948 ops/s
# Warmup Iteration  29: 2117992.141 ops/s
# Warmup Iteration  30: 2121241.459 ops/s
Iteration   1: 2121183.264 ops/s
Iteration   2: 2130731.403 ops/s
Iteration   3: 2128156.004 ops/s
Iteration   4: 2121411.485 ops/s
Iteration   5: 2122318.131 ops/s
Iteration   6: 2125436.183 ops/s
Iteration   7: 2112528.297 ops/s
Iteration   8: 2109840.793 ops/s
Iteration   9: 2098833.533 ops/s
Iteration  10: 2123213.589 ops/s
Iteration  11: 2112899.634 ops/s
Iteration  12: 2110542.526 ops/s
Iteration  13: 2125404.800 ops/s
Iteration  14: 2127564.159 ops/s
Iteration  15: 2125842.032 ops/s
Iteration  16: 2119877.308 ops/s
Iteration  17: 2118602.782 ops/s
Iteration  18: 2113699.140 ops/s
Iteration  19: 2132652.838 ops/s
Iteration  20: 2120340.084 ops/s
Iteration  21: 2110749.948 ops/s
Iteration  22: 2118620.441 ops/s
Iteration  23: 2131327.184 ops/s
Iteration  24: 2123992.690 ops/s
Iteration  25: 2126132.716 ops/s
Iteration  26: 2114435.724 ops/s
Iteration  27: 2115995.746 ops/s
Iteration  28: 2113251.762 ops/s
Iteration  29: 2100919.169 ops/s
Iteration  30: 2124425.787 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetryConditional":
  2119364.305 ±(99.9%) 5594.071 ops/s [Average]
  (min, avg, max) = (2098833.533, 2119364.305, 2132652.838), stdev = 8372.942
  CI (99.9%): [2113770.234, 2124958.376] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithRetryConditional  thrpt   30  2119364.305 ± 5594.071  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithStopConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithStopConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1348437.488 ops/s
# Warmup Iteration   2: 2075299.790 ops/s
# Warmup Iteration   3: 2501088.316 ops/s
# Warmup Iteration   4: 2504750.495 ops/s
# Warmup Iteration   5: 2511635.051 ops/s
# Warmup Iteration   6: 2501427.952 ops/s
# Warmup Iteration   7: 2489054.645 ops/s
# Warmup Iteration   8: 2491283.551 ops/s
# Warmup Iteration   9: 2502284.283 ops/s
# Warmup Iteration  10: 2499513.569 ops/s
# Warmup Iteration  11: 2499383.275 ops/s
# Warmup Iteration  12: 2495734.478 ops/s
# Warmup Iteration  13: 2502002.998 ops/s
# Warmup Iteration  14: 2486634.328 ops/s
# Warmup Iteration  15: 2505753.694 ops/s
# Warmup Iteration  16: 2495909.684 ops/s
# Warmup Iteration  17: 2497853.861 ops/s
# Warmup Iteration  18: 2487975.042 ops/s
# Warmup Iteration  19: 2483140.417 ops/s
# Warmup Iteration  20: 2503575.372 ops/s
# Warmup Iteration  21: 2476432.834 ops/s
# Warmup Iteration  22: 2503223.043 ops/s
# Warmup Iteration  23: 2498268.009 ops/s
# Warmup Iteration  24: 2494925.172 ops/s
# Warmup Iteration  25: 2445571.768 ops/s
# Warmup Iteration  26: 2501744.612 ops/s
# Warmup Iteration  27: 2497858.962 ops/s
# Warmup Iteration  28: 2508588.169 ops/s
# Warmup Iteration  29: 2502338.887 ops/s
# Warmup Iteration  30: 2497992.914 ops/s
Iteration   1: 2511480.082 ops/s
Iteration   2: 2508627.921 ops/s
Iteration   3: 2507038.461 ops/s
Iteration   4: 2498869.441 ops/s
Iteration   5: 2503909.548 ops/s
Iteration   6: 2488704.378 ops/s
Iteration   7: 2501044.823 ops/s
Iteration   8: 2457312.386 ops/s
Iteration   9: 2504919.765 ops/s
Iteration  10: 2491134.512 ops/s
Iteration  11: 2498765.497 ops/s
Iteration  12: 2489710.847 ops/s
Iteration  13: 2491998.118 ops/s
Iteration  14: 2490659.106 ops/s
Iteration  15: 2479922.036 ops/s
Iteration  16: 2496318.382 ops/s
Iteration  17: 2496025.456 ops/s
Iteration  18: 2498443.657 ops/s
Iteration  19: 2499588.826 ops/s
Iteration  20: 2492317.680 ops/s
Iteration  21: 2503691.776 ops/s
Iteration  22: 2460678.755 ops/s
Iteration  23: 2506279.857 ops/s
Iteration  24: 2492926.792 ops/s
Iteration  25: 2492538.019 ops/s
Iteration  26: 2504552.667 ops/s
Iteration  27: 2489136.487 ops/s
Iteration  28: 2482287.646 ops/s
Iteration  29: 2494909.289 ops/s
Iteration  30: 2498935.748 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithStopConditional":
  2494424.265 ±(99.9%) 8164.413 ops/s [Average]
  (min, avg, max) = (2457312.386, 2494424.265, 2511480.082), stdev = 12220.110
  CI (99.9%): [2486259.852, 2502588.678] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithStopConditional  thrpt   30  2494424.265 ± 8164.413  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_doubleFilter$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_doubleFilter

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 432023.493 ops/s
# Warmup Iteration   2: 637222.876 ops/s
# Warmup Iteration   3: 713908.000 ops/s
# Warmup Iteration   4: 725054.000 ops/s
# Warmup Iteration   5: 727203.650 ops/s
# Warmup Iteration   6: 722445.286 ops/s
# Warmup Iteration   7: 729712.930 ops/s
# Warmup Iteration   8: 726183.391 ops/s
# Warmup Iteration   9: 724035.009 ops/s
# Warmup Iteration  10: 724857.863 ops/s
# Warmup Iteration  11: 722809.750 ops/s
# Warmup Iteration  12: 724163.632 ops/s
# Warmup Iteration  13: 720794.019 ops/s
# Warmup Iteration  14: 725562.006 ops/s
# Warmup Iteration  15: 718996.555 ops/s
# Warmup Iteration  16: 725193.337 ops/s
# Warmup Iteration  17: 716782.144 ops/s
# Warmup Iteration  18: 728855.015 ops/s
# Warmup Iteration  19: 723318.020 ops/s
# Warmup Iteration  20: 721564.861 ops/s
# Warmup Iteration  21: 724714.423 ops/s
# Warmup Iteration  22: 724671.921 ops/s
# Warmup Iteration  23: 727370.730 ops/s
# Warmup Iteration  24: 723189.798 ops/s
# Warmup Iteration  25: 731301.751 ops/s
# Warmup Iteration  26: 730702.328 ops/s
# Warmup Iteration  27: 724679.548 ops/s
# Warmup Iteration  28: 724926.980 ops/s
# Warmup Iteration  29: 727413.437 ops/s
# Warmup Iteration  30: 727474.941 ops/s
Iteration   1: 726191.755 ops/s
Iteration   2: 723637.545 ops/s
Iteration   3: 721299.813 ops/s
Iteration   4: 731007.586 ops/s
Iteration   5: 722386.041 ops/s
Iteration   6: 723041.997 ops/s
Iteration   7: 726182.751 ops/s
Iteration   8: 726536.277 ops/s
Iteration   9: 725938.502 ops/s
Iteration  10: 724357.695 ops/s
Iteration  11: 722183.460 ops/s
Iteration  12: 726470.637 ops/s
Iteration  13: 723458.418 ops/s
Iteration  14: 726473.271 ops/s
Iteration  15: 724212.589 ops/s
Iteration  16: 729166.857 ops/s
Iteration  17: 726703.169 ops/s
Iteration  18: 723059.870 ops/s
Iteration  19: 722713.738 ops/s
Iteration  20: 728107.358 ops/s
Iteration  21: 725524.043 ops/s
Iteration  22: 722195.050 ops/s
Iteration  23: 722244.126 ops/s
Iteration  24: 724285.664 ops/s
Iteration  25: 722157.021 ops/s
Iteration  26: 725387.926 ops/s
Iteration  27: 727661.285 ops/s
Iteration  28: 712527.029 ops/s
Iteration  29: 726428.215 ops/s
Iteration  30: 719139.073 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_doubleFilter":
  724355.959 ±(99.9%) 2267.499 ops/s [Average]
  (min, avg, max) = (712527.029, 724355.959, 731007.586), stdev = 3393.886
  CI (99.9%): [722088.460, 726623.458] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ParallelMapOptionalTest._Benchmark.benchmark_doubleFilter  thrpt   30  724355.959 ± 2267.499  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1101522.223 ops/s
# Warmup Iteration   2: 1787555.055 ops/s
# Warmup Iteration   3: 2276957.303 ops/s
# Warmup Iteration   4: 2310819.767 ops/s
# Warmup Iteration   5: 2284339.921 ops/s
# Warmup Iteration   6: 2288877.497 ops/s
# Warmup Iteration   7: 2287776.158 ops/s
# Warmup Iteration   8: 2293945.015 ops/s
# Warmup Iteration   9: 2287256.622 ops/s
# Warmup Iteration  10: 2301445.618 ops/s
# Warmup Iteration  11: 2271624.723 ops/s
# Warmup Iteration  12: 2290676.341 ops/s
# Warmup Iteration  13: 2277720.338 ops/s
# Warmup Iteration  14: 2290588.324 ops/s
# Warmup Iteration  15: 2285621.087 ops/s
# Warmup Iteration  16: 2285856.047 ops/s
# Warmup Iteration  17: 2294172.925 ops/s
# Warmup Iteration  18: 2294118.540 ops/s
# Warmup Iteration  19: 2278974.910 ops/s
# Warmup Iteration  20: 2289668.887 ops/s
# Warmup Iteration  21: 2275140.626 ops/s
# Warmup Iteration  22: 2286337.790 ops/s
# Warmup Iteration  23: 2290472.907 ops/s
# Warmup Iteration  24: 2288369.493 ops/s
# Warmup Iteration  25: 2285044.686 ops/s
# Warmup Iteration  26: 2285183.499 ops/s
# Warmup Iteration  27: 2288265.492 ops/s
# Warmup Iteration  28: 2291659.558 ops/s
# Warmup Iteration  29: 2275676.281 ops/s
# Warmup Iteration  30: 2292110.625 ops/s
Iteration   1: 2283982.044 ops/s
Iteration   2: 2281722.248 ops/s
Iteration   3: 2298328.029 ops/s
Iteration   4: 2283418.548 ops/s
Iteration   5: 2287286.071 ops/s
Iteration   6: 2271871.330 ops/s
Iteration   7: 2289953.788 ops/s
Iteration   8: 2286721.167 ops/s
Iteration   9: 2280516.763 ops/s
Iteration  10: 2275524.154 ops/s
Iteration  11: 2292801.883 ops/s
Iteration  12: 2288079.203 ops/s
Iteration  13: 2276613.531 ops/s
Iteration  14: 2283321.978 ops/s
Iteration  15: 2279726.434 ops/s
Iteration  16: 2293780.468 ops/s
Iteration  17: 2278031.030 ops/s
Iteration  18: 2284599.573 ops/s
Iteration  19: 2279817.307 ops/s
Iteration  20: 2284598.655 ops/s
Iteration  21: 2297032.757 ops/s
Iteration  22: 2296404.752 ops/s
Iteration  23: 2228897.401 ops/s
Iteration  24: 2294025.479 ops/s
Iteration  25: 2281759.703 ops/s
Iteration  26: 2272405.374 ops/s
Iteration  27: 2284750.326 ops/s
Iteration  28: 2275114.352 ops/s
Iteration  29: 2274787.647 ops/s
Iteration  30: 2278073.749 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithError":
  2282131.525 ±(99.9%) 8329.222 ops/s [Average]
  (min, avg, max) = (2228897.401, 2282131.525, 2298328.029), stdev = 12466.788
  CI (99.9%): [2273802.303, 2290460.747] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithError  thrpt   30  2282131.525 ± 8329.222  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_mapCrashConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_mapCrashConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 223106.901 ops/s
# Warmup Iteration   2: 305696.518 ops/s
# Warmup Iteration   3: 304387.164 ops/s
# Warmup Iteration   4: 327691.764 ops/s
# Warmup Iteration   5: 329030.886 ops/s
# Warmup Iteration   6: 326216.949 ops/s
# Warmup Iteration   7: 328554.503 ops/s
# Warmup Iteration   8: 325728.318 ops/s
# Warmup Iteration   9: 327231.387 ops/s
# Warmup Iteration  10: 326954.502 ops/s
# Warmup Iteration  11: 328365.691 ops/s
# Warmup Iteration  12: 325569.016 ops/s
# Warmup Iteration  13: 325402.970 ops/s
# Warmup Iteration  14: 324814.574 ops/s
# Warmup Iteration  15: 326828.031 ops/s
# Warmup Iteration  16: 326529.420 ops/s
# Warmup Iteration  17: 329582.112 ops/s
# Warmup Iteration  18: 330112.178 ops/s
# Warmup Iteration  19: 329785.582 ops/s
# Warmup Iteration  20: 330180.369 ops/s
# Warmup Iteration  21: 329597.070 ops/s
# Warmup Iteration  22: 331643.534 ops/s
# Warmup Iteration  23: 330346.595 ops/s
# Warmup Iteration  24: 329601.963 ops/s
# Warmup Iteration  25: 329513.431 ops/s
# Warmup Iteration  26: 331161.436 ops/s
# Warmup Iteration  27: 328607.305 ops/s
# Warmup Iteration  28: 332570.353 ops/s
# Warmup Iteration  29: 330433.583 ops/s
# Warmup Iteration  30: 330977.362 ops/s
Iteration   1: 330905.833 ops/s
Iteration   2: 329670.968 ops/s
Iteration   3: 332168.281 ops/s
Iteration   4: 332215.038 ops/s
Iteration   5: 326286.235 ops/s
Iteration   6: 331021.154 ops/s
Iteration   7: 331212.781 ops/s
Iteration   8: 330948.355 ops/s
Iteration   9: 330632.959 ops/s
Iteration  10: 331025.145 ops/s
Iteration  11: 329793.464 ops/s
Iteration  12: 328016.782 ops/s
Iteration  13: 331420.302 ops/s
Iteration  14: 331476.750 ops/s
Iteration  15: 330931.319 ops/s
Iteration  16: 330615.957 ops/s
Iteration  17: 330211.041 ops/s
Iteration  18: 330059.564 ops/s
Iteration  19: 328977.289 ops/s
Iteration  20: 332178.032 ops/s
Iteration  21: 331145.855 ops/s
Iteration  22: 329362.278 ops/s
Iteration  23: 331706.787 ops/s
Iteration  24: 329634.355 ops/s
Iteration  25: 330771.975 ops/s
Iteration  26: 329158.448 ops/s
Iteration  27: 332106.054 ops/s
Iteration  28: 332936.030 ops/s
Iteration  29: 332050.728 ops/s
Iteration  30: 331767.809 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_mapCrashConditional":
  330680.252 ±(99.9%) 936.890 ops/s [Average]
  (min, avg, max) = (326286.235, 330680.252, 332936.030), stdev = 1402.294
  CI (99.9%): [329743.362, 331617.143] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ParallelMapOptionalTest._Benchmark.benchmark_mapCrashConditional  thrpt   30  330680.252 ± 936.890  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithErrorConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithErrorConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1063430.838 ops/s
# Warmup Iteration   2: 1698771.546 ops/s
# Warmup Iteration   3: 2133603.094 ops/s
# Warmup Iteration   4: 2154684.795 ops/s
# Warmup Iteration   5: 2154940.059 ops/s
# Warmup Iteration   6: 2149173.322 ops/s
# Warmup Iteration   7: 2135407.677 ops/s
# Warmup Iteration   8: 2122560.293 ops/s
# Warmup Iteration   9: 2138720.672 ops/s
# Warmup Iteration  10: 2129848.410 ops/s
# Warmup Iteration  11: 2132236.956 ops/s
# Warmup Iteration  12: 2130867.038 ops/s
# Warmup Iteration  13: 2140274.798 ops/s
# Warmup Iteration  14: 2142147.448 ops/s
# Warmup Iteration  15: 2148992.853 ops/s
# Warmup Iteration  16: 2137769.047 ops/s
# Warmup Iteration  17: 2148040.345 ops/s
# Warmup Iteration  18: 2143179.787 ops/s
# Warmup Iteration  19: 2143887.031 ops/s
# Warmup Iteration  20: 2144201.792 ops/s
# Warmup Iteration  21: 2128107.388 ops/s
# Warmup Iteration  22: 2126972.525 ops/s
# Warmup Iteration  23: 2129872.521 ops/s
# Warmup Iteration  24: 2127923.155 ops/s
# Warmup Iteration  25: 2131172.473 ops/s
# Warmup Iteration  26: 2131021.609 ops/s
# Warmup Iteration  27: 2144586.622 ops/s
# Warmup Iteration  28: 2144272.850 ops/s
# Warmup Iteration  29: 2135092.446 ops/s
# Warmup Iteration  30: 2138677.944 ops/s
Iteration   1: 2117582.742 ops/s
Iteration   2: 2141042.231 ops/s
Iteration   3: 2140736.247 ops/s
Iteration   4: 2136058.580 ops/s
Iteration   5: 2140381.386 ops/s
Iteration   6: 2136821.539 ops/s
Iteration   7: 2140815.265 ops/s
Iteration   8: 2140891.588 ops/s
Iteration   9: 2154114.314 ops/s
Iteration  10: 2130341.864 ops/s
Iteration  11: 2128205.154 ops/s
Iteration  12: 2128131.236 ops/s
Iteration  13: 2132305.043 ops/s
Iteration  14: 2127953.338 ops/s
Iteration  15: 2142858.499 ops/s
Iteration  16: 2146362.086 ops/s
Iteration  17: 2137367.698 ops/s
Iteration  18: 2126620.912 ops/s
Iteration  19: 2104516.225 ops/s
Iteration  20: 2130072.473 ops/s
Iteration  21: 2128325.412 ops/s
Iteration  22: 2087385.065 ops/s
Iteration  23: 2109065.300 ops/s
Iteration  24: 2091265.178 ops/s
Iteration  25: 2126263.865 ops/s
Iteration  26: 2140839.526 ops/s
Iteration  27: 2148821.222 ops/s
Iteration  28: 2135560.386 ops/s
Iteration  29: 2129329.741 ops/s
Iteration  30: 2132371.052 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithErrorConditional":
  2130413.506 ±(99.9%) 10260.035 ops/s [Average]
  (min, avg, max) = (2087385.065, 2130413.506, 2154114.314), stdev = 15356.739
  CI (99.9%): [2120153.470, 2140673.541] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailWithErrorConditional  thrpt   30  2130413.506 ± 10260.035  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailHandlerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailHandlerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105430.599 ops/s
# Warmup Iteration   2: 207856.550 ops/s
# Warmup Iteration   3: 196289.240 ops/s
# Warmup Iteration   4: 223649.230 ops/s
# Warmup Iteration   5: 224628.527 ops/s
# Warmup Iteration   6: 223480.443 ops/s
# Warmup Iteration   7: 224200.698 ops/s
# Warmup Iteration   8: 224512.736 ops/s
# Warmup Iteration   9: 224742.920 ops/s
# Warmup Iteration  10: 224393.152 ops/s
# Warmup Iteration  11: 223896.446 ops/s
# Warmup Iteration  12: 223046.905 ops/s
# Warmup Iteration  13: 223381.916 ops/s
# Warmup Iteration  14: 223012.739 ops/s
# Warmup Iteration  15: 221017.160 ops/s
# Warmup Iteration  16: 221619.870 ops/s
# Warmup Iteration  17: 228912.331 ops/s
# Warmup Iteration  18: 229583.652 ops/s
# Warmup Iteration  19: 227342.389 ops/s
# Warmup Iteration  20: 228302.016 ops/s
# Warmup Iteration  21: 228688.447 ops/s
# Warmup Iteration  22: 227129.526 ops/s
# Warmup Iteration  23: 228934.024 ops/s
# Warmup Iteration  24: 221531.747 ops/s
# Warmup Iteration  25: 228828.673 ops/s
# Warmup Iteration  26: 223873.334 ops/s
# Warmup Iteration  27: 229269.033 ops/s
# Warmup Iteration  28: 230180.893 ops/s
# Warmup Iteration  29: 226773.030 ops/s
# Warmup Iteration  30: 227673.297 ops/s
Iteration   1: 228902.542 ops/s
Iteration   2: 229500.653 ops/s
Iteration   3: 228420.757 ops/s
Iteration   4: 228497.216 ops/s
Iteration   5: 230495.986 ops/s
Iteration   6: 228425.472 ops/s
Iteration   7: 228459.667 ops/s
Iteration   8: 230332.243 ops/s
Iteration   9: 228991.394 ops/s
Iteration  10: 229507.949 ops/s
Iteration  11: 229444.084 ops/s
Iteration  12: 225044.637 ops/s
Iteration  13: 228881.086 ops/s
Iteration  14: 228470.315 ops/s
Iteration  15: 228002.140 ops/s
Iteration  16: 229592.232 ops/s
Iteration  17: 229027.432 ops/s
Iteration  18: 223397.259 ops/s
Iteration  19: 229144.910 ops/s
Iteration  20: 229487.320 ops/s
Iteration  21: 227807.302 ops/s
Iteration  22: 228830.171 ops/s
Iteration  23: 227888.977 ops/s
Iteration  24: 228761.235 ops/s
Iteration  25: 227897.624 ops/s
Iteration  26: 227981.743 ops/s
Iteration  27: 227317.687 ops/s
Iteration  28: 228403.091 ops/s
Iteration  29: 227773.945 ops/s
Iteration  30: 229658.625 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailHandlerThrows":
  228478.190 ±(99.9%) 935.230 ops/s [Average]
  (min, avg, max) = (223397.259, 228478.190, 230495.986), stdev = 1399.808
  CI (99.9%): [227542.960, 229413.419] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapFailHandlerThrows  thrpt   30  228478.190 ± 935.230  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedToParallel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedToParallel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 325300.596 ops/s
# Warmup Iteration   2: 549170.914 ops/s
# Warmup Iteration   3: 529754.856 ops/s
# Warmup Iteration   4: 599048.284 ops/s
# Warmup Iteration   5: 622486.738 ops/s
# Warmup Iteration   6: 623100.386 ops/s
# Warmup Iteration   7: 621283.712 ops/s
# Warmup Iteration   8: 620087.126 ops/s
# Warmup Iteration   9: 617797.584 ops/s
# Warmup Iteration  10: 620781.422 ops/s
# Warmup Iteration  11: 620940.561 ops/s
# Warmup Iteration  12: 614947.774 ops/s
# Warmup Iteration  13: 617121.686 ops/s
# Warmup Iteration  14: 620140.132 ops/s
# Warmup Iteration  15: 621159.374 ops/s
# Warmup Iteration  16: 624583.705 ops/s
# Warmup Iteration  17: 616394.438 ops/s
# Warmup Iteration  18: 615187.493 ops/s
# Warmup Iteration  19: 618884.769 ops/s
# Warmup Iteration  20: 620503.687 ops/s
# Warmup Iteration  21: 617102.426 ops/s
# Warmup Iteration  22: 618550.307 ops/s
# Warmup Iteration  23: 623778.000 ops/s
# Warmup Iteration  24: 615503.193 ops/s
# Warmup Iteration  25: 618687.893 ops/s
# Warmup Iteration  26: 617842.605 ops/s
# Warmup Iteration  27: 616041.787 ops/s
# Warmup Iteration  28: 620770.983 ops/s
# Warmup Iteration  29: 614302.921 ops/s
# Warmup Iteration  30: 616680.557 ops/s
Iteration   1: 620452.631 ops/s
Iteration   2: 621988.434 ops/s
Iteration   3: 620945.896 ops/s
Iteration   4: 621739.523 ops/s
Iteration   5: 617216.321 ops/s
Iteration   6: 620583.789 ops/s
Iteration   7: 618573.972 ops/s
Iteration   8: 619154.447 ops/s
Iteration   9: 618632.812 ops/s
Iteration  10: 617193.791 ops/s
Iteration  11: 617225.679 ops/s
Iteration  12: 621915.236 ops/s
Iteration  13: 620761.409 ops/s
Iteration  14: 614842.482 ops/s
Iteration  15: 617373.109 ops/s
Iteration  16: 623892.869 ops/s
Iteration  17: 621209.164 ops/s
Iteration  18: 620030.094 ops/s
Iteration  19: 618785.164 ops/s
Iteration  20: 621511.066 ops/s
Iteration  21: 611131.179 ops/s
Iteration  22: 615147.745 ops/s
Iteration  23: 613351.604 ops/s
Iteration  24: 622588.503 ops/s
Iteration  25: 618582.037 ops/s
Iteration  26: 622832.067 ops/s
Iteration  27: 621765.214 ops/s
Iteration  28: 620515.065 ops/s
Iteration  29: 617565.295 ops/s
Iteration  30: 619471.100 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedToParallel":
  619232.590 ±(99.9%) 1959.833 ops/s [Average]
  (min, avg, max) = (611131.179, 619232.590, 623892.869), stdev = 2933.386
  CI (99.9%): [617272.757, 621192.423] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_fusedToParallel  thrpt   30  619232.590 ± 1959.833  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapErrorConditionalNoError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapErrorConditionalNoError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 115249.763 ops/s
# Warmup Iteration   2: 153493.302 ops/s
# Warmup Iteration   3: 176697.270 ops/s
# Warmup Iteration   4: 177133.035 ops/s
# Warmup Iteration   5: 177288.915 ops/s
# Warmup Iteration   6: 177346.217 ops/s
# Warmup Iteration   7: 177945.744 ops/s
# Warmup Iteration   8: 176645.775 ops/s
# Warmup Iteration   9: 177930.496 ops/s
# Warmup Iteration  10: 177042.834 ops/s
# Warmup Iteration  11: 175717.725 ops/s
# Warmup Iteration  12: 177935.818 ops/s
# Warmup Iteration  13: 178198.581 ops/s
# Warmup Iteration  14: 176372.974 ops/s
# Warmup Iteration  15: 178553.058 ops/s
# Warmup Iteration  16: 177291.997 ops/s
# Warmup Iteration  17: 186350.376 ops/s
# Warmup Iteration  18: 183483.611 ops/s
# Warmup Iteration  19: 183607.549 ops/s
# Warmup Iteration  20: 183211.791 ops/s
# Warmup Iteration  21: 184785.741 ops/s
# Warmup Iteration  22: 185058.446 ops/s
# Warmup Iteration  23: 183873.663 ops/s
# Warmup Iteration  24: 185159.263 ops/s
# Warmup Iteration  25: 183835.153 ops/s
# Warmup Iteration  26: 184541.032 ops/s
# Warmup Iteration  27: 184804.471 ops/s
# Warmup Iteration  28: 184375.941 ops/s
# Warmup Iteration  29: 183629.329 ops/s
# Warmup Iteration  30: 185405.175 ops/s
Iteration   1: 185022.953 ops/s
Iteration   2: 185834.023 ops/s
Iteration   3: 183637.067 ops/s
Iteration   4: 184682.269 ops/s
Iteration   5: 184832.410 ops/s
Iteration   6: 184613.682 ops/s
Iteration   7: 185560.826 ops/s
Iteration   8: 184305.490 ops/s
Iteration   9: 186357.034 ops/s
Iteration  10: 185313.648 ops/s
Iteration  11: 185869.546 ops/s
Iteration  12: 185626.567 ops/s
Iteration  13: 185159.631 ops/s
Iteration  14: 185617.638 ops/s
Iteration  15: 186131.659 ops/s
Iteration  16: 184991.422 ops/s
Iteration  17: 184842.074 ops/s
Iteration  18: 183557.748 ops/s
Iteration  19: 184215.736 ops/s
Iteration  20: 185448.171 ops/s
Iteration  21: 186544.770 ops/s
Iteration  22: 184846.228 ops/s
Iteration  23: 184428.299 ops/s
Iteration  24: 184697.095 ops/s
Iteration  25: 184877.020 ops/s
Iteration  26: 185549.130 ops/s
Iteration  27: 185092.443 ops/s
Iteration  28: 184673.630 ops/s
Iteration  29: 185967.258 ops/s
Iteration  30: 184337.057 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapErrorConditionalNoError":
  185087.751 ±(99.9%) 492.064 ops/s [Average]
  (min, avg, max) = (183557.748, 185087.751, 186544.770), stdev = 736.499
  CI (99.9%): [184595.687, 185579.815] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapErrorConditionalNoError  thrpt   30  185087.751 ± 492.064  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedToParallel2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedToParallel2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 357133.829 ops/s
# Warmup Iteration   2: 587738.097 ops/s
# Warmup Iteration   3: 580970.089 ops/s
# Warmup Iteration   4: 652684.863 ops/s
# Warmup Iteration   5: 670114.580 ops/s
# Warmup Iteration   6: 671817.214 ops/s
# Warmup Iteration   7: 673334.029 ops/s
# Warmup Iteration   8: 674345.172 ops/s
# Warmup Iteration   9: 675141.869 ops/s
# Warmup Iteration  10: 672351.798 ops/s
# Warmup Iteration  11: 670807.483 ops/s
# Warmup Iteration  12: 668429.022 ops/s
# Warmup Iteration  13: 668064.558 ops/s
# Warmup Iteration  14: 671217.999 ops/s
# Warmup Iteration  15: 665335.508 ops/s
# Warmup Iteration  16: 669573.083 ops/s
# Warmup Iteration  17: 668595.571 ops/s
# Warmup Iteration  18: 664537.672 ops/s
# Warmup Iteration  19: 666177.009 ops/s
# Warmup Iteration  20: 671844.574 ops/s
# Warmup Iteration  21: 659612.686 ops/s
# Warmup Iteration  22: 664848.017 ops/s
# Warmup Iteration  23: 672200.718 ops/s
# Warmup Iteration  24: 672317.063 ops/s
# Warmup Iteration  25: 672025.888 ops/s
# Warmup Iteration  26: 652705.150 ops/s
# Warmup Iteration  27: 663687.689 ops/s
# Warmup Iteration  28: 668107.127 ops/s
# Warmup Iteration  29: 663696.339 ops/s
# Warmup Iteration  30: 668999.041 ops/s
Iteration   1: 668395.218 ops/s
Iteration   2: 664103.671 ops/s
Iteration   3: 665965.141 ops/s
Iteration   4: 665707.398 ops/s
Iteration   5: 667732.618 ops/s
Iteration   6: 666198.512 ops/s
Iteration   7: 664123.602 ops/s
Iteration   8: 664144.100 ops/s
Iteration   9: 667388.891 ops/s
Iteration  10: 665925.089 ops/s
Iteration  11: 667620.905 ops/s
Iteration  12: 664957.704 ops/s
Iteration  13: 666185.734 ops/s
Iteration  14: 670326.066 ops/s
Iteration  15: 658427.368 ops/s
Iteration  16: 668382.119 ops/s
Iteration  17: 668107.044 ops/s
Iteration  18: 664622.157 ops/s
Iteration  19: 649872.691 ops/s
Iteration  20: 667913.694 ops/s
Iteration  21: 665778.755 ops/s
Iteration  22: 666344.748 ops/s
Iteration  23: 665743.319 ops/s
Iteration  24: 671304.311 ops/s
Iteration  25: 669707.246 ops/s
Iteration  26: 666521.022 ops/s
Iteration  27: 667647.750 ops/s
Iteration  28: 666687.195 ops/s
Iteration  29: 666571.987 ops/s
Iteration  30: 667203.379 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedToParallel2":
  665986.981 ±(99.9%) 2555.495 ops/s [Average]
  (min, avg, max) = (649872.691, 665986.981, 671304.311), stdev = 3824.945
  CI (99.9%): [663431.486, 668542.476] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_fusedToParallel2  thrpt   30  665986.981 ± 2555.495  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_overflowQueue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_overflowQueue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 153268.353 ops/s
# Warmup Iteration   2: 245562.119 ops/s
# Warmup Iteration   3: 254034.732 ops/s
# Warmup Iteration   4: 260384.331 ops/s
# Warmup Iteration   5: 276302.356 ops/s
# Warmup Iteration   6: 275298.970 ops/s
# Warmup Iteration   7: 277198.008 ops/s
# Warmup Iteration   8: 276903.519 ops/s
# Warmup Iteration   9: 275732.440 ops/s
# Warmup Iteration  10: 276839.125 ops/s
# Warmup Iteration  11: 275602.735 ops/s
# Warmup Iteration  12: 274411.825 ops/s
# Warmup Iteration  13: 276061.748 ops/s
# Warmup Iteration  14: 275017.618 ops/s
# Warmup Iteration  15: 274333.703 ops/s
# Warmup Iteration  16: 274885.041 ops/s
# Warmup Iteration  17: 284106.666 ops/s
# Warmup Iteration  18: 282375.133 ops/s
# Warmup Iteration  19: 281275.102 ops/s
# Warmup Iteration  20: 281760.545 ops/s
# Warmup Iteration  21: 281938.164 ops/s
# Warmup Iteration  22: 279615.812 ops/s
# Warmup Iteration  23: 282420.129 ops/s
# Warmup Iteration  24: 281329.308 ops/s
# Warmup Iteration  25: 282293.455 ops/s
# Warmup Iteration  26: 281983.715 ops/s
# Warmup Iteration  27: 283236.736 ops/s
# Warmup Iteration  28: 281152.371 ops/s
# Warmup Iteration  29: 282126.964 ops/s
# Warmup Iteration  30: 283029.222 ops/s
Iteration   1: 281372.780 ops/s
Iteration   2: 281900.017 ops/s
Iteration   3: 280199.673 ops/s
Iteration   4: 281591.423 ops/s
Iteration   5: 280480.486 ops/s
Iteration   6: 281589.027 ops/s
Iteration   7: 284088.020 ops/s
Iteration   8: 280751.134 ops/s
Iteration   9: 280591.686 ops/s
Iteration  10: 282542.555 ops/s
Iteration  11: 281155.370 ops/s
Iteration  12: 280646.204 ops/s
Iteration  13: 282215.152 ops/s
Iteration  14: 279893.829 ops/s
Iteration  15: 280272.524 ops/s
Iteration  16: 282272.174 ops/s
Iteration  17: 281014.595 ops/s
Iteration  18: 282187.583 ops/s
Iteration  19: 282816.156 ops/s
Iteration  20: 281054.541 ops/s
Iteration  21: 281683.559 ops/s
Iteration  22: 283610.983 ops/s
Iteration  23: 281620.682 ops/s
Iteration  24: 281452.234 ops/s
Iteration  25: 281454.234 ops/s
Iteration  26: 282723.786 ops/s
Iteration  27: 282030.919 ops/s
Iteration  28: 282461.853 ops/s
Iteration  29: 281731.142 ops/s
Iteration  30: 281691.002 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_overflowQueue":
  281636.511 ±(99.9%) 650.827 ops/s [Average]
  (min, avg, max) = (279893.829, 281636.511, 284088.020), stdev = 974.127
  CI (99.9%): [280985.684, 282287.337] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
FlowablePublishTest._Benchmark.benchmark_overflowQueue  thrpt   30  281636.511 ± 650.827  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_multicastSelectorCallableConnectableCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_multicastSelectorCallableConnectableCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 662351.776 ops/s
# Warmup Iteration   2: 816592.473 ops/s
# Warmup Iteration   3: 804155.109 ops/s
# Warmup Iteration   4: 865149.130 ops/s
# Warmup Iteration   5: 869987.781 ops/s
# Warmup Iteration   6: 860594.968 ops/s
# Warmup Iteration   7: 869332.661 ops/s
# Warmup Iteration   8: 867078.478 ops/s
# Warmup Iteration   9: 861994.804 ops/s
# Warmup Iteration  10: 864500.455 ops/s
# Warmup Iteration  11: 854930.316 ops/s
# Warmup Iteration  12: 859747.919 ops/s
# Warmup Iteration  13: 856060.137 ops/s
# Warmup Iteration  14: 849986.937 ops/s
# Warmup Iteration  15: 857455.450 ops/s
# Warmup Iteration  16: 856227.407 ops/s
# Warmup Iteration  17: 894611.984 ops/s
# Warmup Iteration  18: 898188.250 ops/s
# Warmup Iteration  19: 904369.500 ops/s
# Warmup Iteration  20: 905546.461 ops/s
# Warmup Iteration  21: 908520.071 ops/s
# Warmup Iteration  22: 896994.995 ops/s
# Warmup Iteration  23: 903194.122 ops/s
# Warmup Iteration  24: 897543.643 ops/s
# Warmup Iteration  25: 900667.322 ops/s
# Warmup Iteration  26: 890825.516 ops/s
# Warmup Iteration  27: 899068.999 ops/s
# Warmup Iteration  28: 907431.954 ops/s
# Warmup Iteration  29: 903795.857 ops/s
# Warmup Iteration  30: 896013.419 ops/s
Iteration   1: 903528.475 ops/s
Iteration   2: 902226.135 ops/s
Iteration   3: 897819.156 ops/s
Iteration   4: 901094.281 ops/s
Iteration   5: 899817.128 ops/s
Iteration   6: 900153.065 ops/s
Iteration   7: 901151.297 ops/s
Iteration   8: 902599.588 ops/s
Iteration   9: 899101.248 ops/s
Iteration  10: 899761.520 ops/s
Iteration  11: 904436.360 ops/s
Iteration  12: 903412.647 ops/s
Iteration  13: 908441.947 ops/s
Iteration  14: 901289.848 ops/s
Iteration  15: 903218.561 ops/s
Iteration  16: 897254.595 ops/s
Iteration  17: 904947.196 ops/s
Iteration  18: 896788.137 ops/s
Iteration  19: 904500.616 ops/s
Iteration  20: 898845.984 ops/s
Iteration  21: 901895.944 ops/s
Iteration  22: 902009.502 ops/s
Iteration  23: 900063.871 ops/s
Iteration  24: 899621.706 ops/s
Iteration  25: 905315.336 ops/s
Iteration  26: 904229.137 ops/s
Iteration  27: 906202.550 ops/s
Iteration  28: 901093.826 ops/s
Iteration  29: 898123.305 ops/s
Iteration  30: 905361.284 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_multicastSelectorCallableConnectableCrash":
  901810.142 ±(99.9%) 1915.796 ops/s [Average]
  (min, avg, max) = (896788.137, 901810.142, 908441.947), stdev = 2867.473
  CI (99.9%): [899894.346, 903725.937] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_multicastSelectorCallableConnectableCrash  thrpt   30  901810.142 ± 1915.796  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_multicastSelectorCallableConnectableCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_multicastSelectorCallableConnectableCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 649705.930 ops/s
# Warmup Iteration   2: 798934.575 ops/s
# Warmup Iteration   3: 782531.222 ops/s
# Warmup Iteration   4: 847389.780 ops/s
# Warmup Iteration   5: 850197.122 ops/s
# Warmup Iteration   6: 854025.574 ops/s
# Warmup Iteration   7: 852772.988 ops/s
# Warmup Iteration   8: 846078.861 ops/s
# Warmup Iteration   9: 847597.363 ops/s
# Warmup Iteration  10: 847994.189 ops/s
# Warmup Iteration  11: 846005.631 ops/s
# Warmup Iteration  12: 846612.568 ops/s
# Warmup Iteration  13: 851220.933 ops/s
# Warmup Iteration  14: 845956.700 ops/s
# Warmup Iteration  15: 845830.976 ops/s
# Warmup Iteration  16: 839802.532 ops/s
# Warmup Iteration  17: 897065.688 ops/s
# Warmup Iteration  18: 896259.582 ops/s
# Warmup Iteration  19: 894356.034 ops/s
# Warmup Iteration  20: 895081.153 ops/s
# Warmup Iteration  21: 887153.546 ops/s
# Warmup Iteration  22: 898819.478 ops/s
# Warmup Iteration  23: 892710.551 ops/s
# Warmup Iteration  24: 891618.914 ops/s
# Warmup Iteration  25: 895241.074 ops/s
# Warmup Iteration  26: 893186.525 ops/s
# Warmup Iteration  27: 889556.721 ops/s
# Warmup Iteration  28: 893526.165 ops/s
# Warmup Iteration  29: 893528.784 ops/s
# Warmup Iteration  30: 897219.042 ops/s
Iteration   1: 889316.752 ops/s
Iteration   2: 891986.865 ops/s
Iteration   3: 899510.166 ops/s
Iteration   4: 891671.038 ops/s
Iteration   5: 893224.408 ops/s
Iteration   6: 898492.286 ops/s
Iteration   7: 895133.405 ops/s
Iteration   8: 889944.282 ops/s
Iteration   9: 894049.453 ops/s
Iteration  10: 895873.821 ops/s
Iteration  11: 896820.579 ops/s
Iteration  12: 892352.402 ops/s
Iteration  13: 893359.372 ops/s
Iteration  14: 892428.418 ops/s
Iteration  15: 890378.904 ops/s
Iteration  16: 886123.366 ops/s
Iteration  17: 891851.166 ops/s
Iteration  18: 893252.603 ops/s
Iteration  19: 884410.595 ops/s
Iteration  20: 893078.602 ops/s
Iteration  21: 894260.737 ops/s
Iteration  22: 876670.767 ops/s
Iteration  23: 895439.011 ops/s
Iteration  24: 897050.682 ops/s
Iteration  25: 891343.177 ops/s
Iteration  26: 891559.985 ops/s
Iteration  27: 888907.040 ops/s
Iteration  28: 895244.518 ops/s
Iteration  29: 897329.089 ops/s
Iteration  30: 897079.928 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_multicastSelectorCallableConnectableCrash":
  892604.781 ±(99.9%) 3051.363 ops/s [Average]
  (min, avg, max) = (876670.767, 892604.781, 899510.166), stdev = 4567.137
  CI (99.9%): [889553.417, 895656.144] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
FlowableReplayTest._Benchmark.benchmark_multicastSelectorCallableConnectableCrash  thrpt   30  892604.781 ± 3051.363  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_doubleSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_doubleSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 626014.872 ops/s
# Warmup Iteration   2: 712138.614 ops/s
# Warmup Iteration   3: 696873.639 ops/s
# Warmup Iteration   4: 766490.452 ops/s
# Warmup Iteration   5: 777739.278 ops/s
# Warmup Iteration   6: 776144.345 ops/s
# Warmup Iteration   7: 774956.005 ops/s
# Warmup Iteration   8: 775264.141 ops/s
# Warmup Iteration   9: 778910.993 ops/s
# Warmup Iteration  10: 777992.733 ops/s
# Warmup Iteration  11: 776077.588 ops/s
# Warmup Iteration  12: 770091.910 ops/s
# Warmup Iteration  13: 775234.900 ops/s
# Warmup Iteration  14: 774024.513 ops/s
# Warmup Iteration  15: 769065.489 ops/s
# Warmup Iteration  16: 770721.403 ops/s
# Warmup Iteration  17: 806105.267 ops/s
# Warmup Iteration  18: 808215.917 ops/s
# Warmup Iteration  19: 808069.176 ops/s
# Warmup Iteration  20: 808640.327 ops/s
# Warmup Iteration  21: 806779.518 ops/s
# Warmup Iteration  22: 809915.665 ops/s
# Warmup Iteration  23: 804494.613 ops/s
# Warmup Iteration  24: 806859.303 ops/s
# Warmup Iteration  25: 803698.391 ops/s
# Warmup Iteration  26: 800147.000 ops/s
# Warmup Iteration  27: 812391.507 ops/s
# Warmup Iteration  28: 808694.283 ops/s
# Warmup Iteration  29: 808839.003 ops/s
# Warmup Iteration  30: 804281.738 ops/s
Iteration   1: 802817.528 ops/s
Iteration   2: 807711.889 ops/s
Iteration   3: 806611.218 ops/s
Iteration   4: 806144.118 ops/s
Iteration   5: 804645.209 ops/s
Iteration   6: 805543.953 ops/s
Iteration   7: 809501.000 ops/s
Iteration   8: 803552.732 ops/s
Iteration   9: 809232.683 ops/s
Iteration  10: 805386.260 ops/s
Iteration  11: 806611.077 ops/s
Iteration  12: 810864.227 ops/s
Iteration  13: 805043.860 ops/s
Iteration  14: 795953.949 ops/s
Iteration  15: 801859.187 ops/s
Iteration  16: 807432.734 ops/s
Iteration  17: 807344.122 ops/s
Iteration  18: 807461.069 ops/s
Iteration  19: 809359.216 ops/s
Iteration  20: 806545.868 ops/s
Iteration  21: 812765.705 ops/s
Iteration  22: 805652.060 ops/s
Iteration  23: 807942.376 ops/s
Iteration  24: 805319.835 ops/s
Iteration  25: 801955.781 ops/s
Iteration  26: 806454.705 ops/s
Iteration  27: 800554.504 ops/s
Iteration  28: 805296.450 ops/s
Iteration  29: 813056.642 ops/s
Iteration  30: 809957.956 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_doubleSubscribe":
  806285.930 ±(99.9%) 2370.315 ops/s [Average]
  (min, avg, max) = (795953.949, 806285.930, 813056.642), stdev = 3547.776
  CI (99.9%): [803915.615, 808656.246] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableSubscriberTest._Benchmark.benchmark_doubleSubscribe  thrpt   30  806285.930 ± 2370.315  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanNoSeedDoesNotEmitErrorTwiceIfScanFunctionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanNoSeedDoesNotEmitErrorTwiceIfScanFunctionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90327.962 ops/s
# Warmup Iteration   2: 138865.252 ops/s
# Warmup Iteration   3: 162717.323 ops/s
# Warmup Iteration   4: 162751.090 ops/s
# Warmup Iteration   5: 163301.304 ops/s
# Warmup Iteration   6: 163058.883 ops/s
# Warmup Iteration   7: 163559.458 ops/s
# Warmup Iteration   8: 161508.294 ops/s
# Warmup Iteration   9: 162837.518 ops/s
# Warmup Iteration  10: 160659.240 ops/s
# Warmup Iteration  11: 162651.237 ops/s
# Warmup Iteration  12: 161287.091 ops/s
# Warmup Iteration  13: 163429.935 ops/s
# Warmup Iteration  14: 163194.712 ops/s
# Warmup Iteration  15: 162849.889 ops/s
# Warmup Iteration  16: 162224.031 ops/s
# Warmup Iteration  17: 168047.583 ops/s
# Warmup Iteration  18: 167304.548 ops/s
# Warmup Iteration  19: 166215.717 ops/s
# Warmup Iteration  20: 167554.496 ops/s
# Warmup Iteration  21: 165703.410 ops/s
# Warmup Iteration  22: 167438.735 ops/s
# Warmup Iteration  23: 167631.057 ops/s
# Warmup Iteration  24: 166533.720 ops/s
# Warmup Iteration  25: 167719.399 ops/s
# Warmup Iteration  26: 166794.832 ops/s
# Warmup Iteration  27: 167585.378 ops/s
# Warmup Iteration  28: 166392.749 ops/s
# Warmup Iteration  29: 162467.958 ops/s
# Warmup Iteration  30: 166819.119 ops/s
Iteration   1: 167437.506 ops/s
Iteration   2: 167470.737 ops/s
Iteration   3: 166943.656 ops/s
Iteration   4: 166098.899 ops/s
Iteration   5: 167959.921 ops/s
Iteration   6: 167676.952 ops/s
Iteration   7: 167660.308 ops/s
Iteration   8: 166968.250 ops/s
Iteration   9: 167118.416 ops/s
Iteration  10: 167430.563 ops/s
Iteration  11: 167630.323 ops/s
Iteration  12: 166740.428 ops/s
Iteration  13: 167967.189 ops/s
Iteration  14: 167829.144 ops/s
Iteration  15: 167304.781 ops/s
Iteration  16: 166727.543 ops/s
Iteration  17: 167240.223 ops/s
Iteration  18: 166448.259 ops/s
Iteration  19: 167543.780 ops/s
Iteration  20: 167212.653 ops/s
Iteration  21: 165078.053 ops/s
Iteration  22: 166968.913 ops/s
Iteration  23: 168120.231 ops/s
Iteration  24: 167592.750 ops/s
Iteration  25: 167369.614 ops/s
Iteration  26: 166354.555 ops/s
Iteration  27: 167905.833 ops/s
Iteration  28: 168539.073 ops/s
Iteration  29: 166805.894 ops/s
Iteration  30: 167720.850 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanNoSeedDoesNotEmitErrorTwiceIfScanFunctionThrows":
  167262.177 ±(99.9%) 459.895 ops/s [Average]
  (min, avg, max) = (165078.053, 167262.177, 168539.073), stdev = 688.349
  CI (99.9%): [166802.282, 167722.071] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score     Error  Units
FlowableScanTest._Benchmark.benchmark_scanNoSeedDoesNotEmitErrorTwiceIfScanFunctionThrows  thrpt   30  167262.177 ± 459.895  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 336728.390 ops/s
# Warmup Iteration   2: 553937.730 ops/s
# Warmup Iteration   3: 533324.676 ops/s
# Warmup Iteration   4: 614405.391 ops/s
# Warmup Iteration   5: 627885.889 ops/s
# Warmup Iteration   6: 628530.378 ops/s
# Warmup Iteration   7: 626704.849 ops/s
# Warmup Iteration   8: 631478.316 ops/s
# Warmup Iteration   9: 626662.377 ops/s
# Warmup Iteration  10: 626452.925 ops/s
# Warmup Iteration  11: 631576.337 ops/s
# Warmup Iteration  12: 624461.401 ops/s
# Warmup Iteration  13: 627728.828 ops/s
# Warmup Iteration  14: 625353.845 ops/s
# Warmup Iteration  15: 631124.896 ops/s
# Warmup Iteration  16: 624981.533 ops/s
# Warmup Iteration  17: 653963.482 ops/s
# Warmup Iteration  18: 658052.556 ops/s
# Warmup Iteration  19: 650489.376 ops/s
# Warmup Iteration  20: 653712.562 ops/s
# Warmup Iteration  21: 647772.990 ops/s
# Warmup Iteration  22: 650140.044 ops/s
# Warmup Iteration  23: 653339.666 ops/s
# Warmup Iteration  24: 653848.661 ops/s
# Warmup Iteration  25: 653351.139 ops/s
# Warmup Iteration  26: 653771.300 ops/s
# Warmup Iteration  27: 651398.195 ops/s
# Warmup Iteration  28: 649985.921 ops/s
# Warmup Iteration  29: 650981.378 ops/s
# Warmup Iteration  30: 647790.210 ops/s
Iteration   1: 654069.693 ops/s
Iteration   2: 653023.721 ops/s
Iteration   3: 650670.049 ops/s
Iteration   4: 647656.432 ops/s
Iteration   5: 648404.540 ops/s
Iteration   6: 653029.456 ops/s
Iteration   7: 657341.836 ops/s
Iteration   8: 659053.312 ops/s
Iteration   9: 650219.507 ops/s
Iteration  10: 654633.127 ops/s
Iteration  11: 650478.233 ops/s
Iteration  12: 624012.173 ops/s
Iteration  13: 648584.038 ops/s
Iteration  14: 658159.924 ops/s
Iteration  15: 652903.941 ops/s
Iteration  16: 655919.659 ops/s
Iteration  17: 649613.687 ops/s
Iteration  18: 649698.484 ops/s
Iteration  19: 655014.299 ops/s
Iteration  20: 650486.351 ops/s
Iteration  21: 649681.389 ops/s
Iteration  22: 652293.497 ops/s
Iteration  23: 647339.712 ops/s
Iteration  24: 654222.171 ops/s
Iteration  25: 648272.294 ops/s
Iteration  26: 639055.840 ops/s
Iteration  27: 648636.565 ops/s
Iteration  28: 654312.024 ops/s
Iteration  29: 650984.879 ops/s
Iteration  30: 654273.021 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_badRequest":
  650734.795 ±(99.9%) 4280.775 ops/s [Average]
  (min, avg, max) = (624012.173, 650734.795, 659053.312), stdev = 6407.263
  CI (99.9%): [646454.020, 655015.570] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_badRequest  thrpt   30  650734.795 ± 4280.775  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 384317.897 ops/s
# Warmup Iteration   2: 543831.465 ops/s
# Warmup Iteration   3: 524443.603 ops/s
# Warmup Iteration   4: 602135.097 ops/s
# Warmup Iteration   5: 618199.043 ops/s
# Warmup Iteration   6: 616841.695 ops/s
# Warmup Iteration   7: 618329.600 ops/s
# Warmup Iteration   8: 617050.140 ops/s
# Warmup Iteration   9: 616879.414 ops/s
# Warmup Iteration  10: 617991.293 ops/s
# Warmup Iteration  11: 616097.769 ops/s
# Warmup Iteration  12: 610171.570 ops/s
# Warmup Iteration  13: 613188.258 ops/s
# Warmup Iteration  14: 616362.302 ops/s
# Warmup Iteration  15: 615031.578 ops/s
# Warmup Iteration  16: 617360.070 ops/s
# Warmup Iteration  17: 638097.511 ops/s
# Warmup Iteration  18: 634179.460 ops/s
# Warmup Iteration  19: 638717.077 ops/s
# Warmup Iteration  20: 637464.306 ops/s
# Warmup Iteration  21: 642334.154 ops/s
# Warmup Iteration  22: 640271.587 ops/s
# Warmup Iteration  23: 639202.093 ops/s
# Warmup Iteration  24: 639605.411 ops/s
# Warmup Iteration  25: 644556.301 ops/s
# Warmup Iteration  26: 641079.320 ops/s
# Warmup Iteration  27: 640704.319 ops/s
# Warmup Iteration  28: 639376.665 ops/s
# Warmup Iteration  29: 637662.628 ops/s
# Warmup Iteration  30: 644289.121 ops/s
Iteration   1: 639353.636 ops/s
Iteration   2: 637732.266 ops/s
Iteration   3: 639161.281 ops/s
Iteration   4: 641221.188 ops/s
Iteration   5: 645014.473 ops/s
Iteration   6: 643536.678 ops/s
Iteration   7: 640067.854 ops/s
Iteration   8: 640816.872 ops/s
Iteration   9: 639414.911 ops/s
Iteration  10: 633977.542 ops/s
Iteration  11: 638780.270 ops/s
Iteration  12: 646007.574 ops/s
Iteration  13: 639827.094 ops/s
Iteration  14: 640835.277 ops/s
Iteration  15: 640567.452 ops/s
Iteration  16: 637710.467 ops/s
Iteration  17: 647260.016 ops/s
Iteration  18: 639097.175 ops/s
Iteration  19: 644830.873 ops/s
Iteration  20: 632483.628 ops/s
Iteration  21: 641915.064 ops/s
Iteration  22: 638574.536 ops/s
Iteration  23: 635540.979 ops/s
Iteration  24: 641028.526 ops/s
Iteration  25: 637990.876 ops/s
Iteration  26: 640798.261 ops/s
Iteration  27: 636910.585 ops/s
Iteration  28: 635076.863 ops/s
Iteration  29: 640222.959 ops/s
Iteration  30: 638014.573 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_badRequest":
  639792.325 ±(99.9%) 2245.935 ops/s [Average]
  (min, avg, max) = (632483.628, 639792.325, 647260.016), stdev = 3361.610
  CI (99.9%): [637546.390, 642038.260] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_badRequest  thrpt   30  639792.325 ± 2245.935  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecentTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecentTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 407047.086 ops/s
# Warmup Iteration   2: 470967.297 ops/s
# Warmup Iteration   3: 475422.227 ops/s
# Warmup Iteration   4: 506957.736 ops/s
# Warmup Iteration   5: 508662.938 ops/s
# Warmup Iteration   6: 505703.746 ops/s
# Warmup Iteration   7: 509836.430 ops/s
# Warmup Iteration   8: 506732.765 ops/s
# Warmup Iteration   9: 507722.462 ops/s
# Warmup Iteration  10: 504165.082 ops/s
# Warmup Iteration  11: 506687.374 ops/s
# Warmup Iteration  12: 507700.480 ops/s
# Warmup Iteration  13: 502453.226 ops/s
# Warmup Iteration  14: 503214.926 ops/s
# Warmup Iteration  15: 504297.648 ops/s
# Warmup Iteration  16: 505083.642 ops/s
# Warmup Iteration  17: 531788.631 ops/s
# Warmup Iteration  18: 536781.151 ops/s
# Warmup Iteration  19: 531514.524 ops/s
# Warmup Iteration  20: 531963.965 ops/s
# Warmup Iteration  21: 530203.590 ops/s
# Warmup Iteration  22: 537056.681 ops/s
# Warmup Iteration  23: 535611.492 ops/s
# Warmup Iteration  24: 533217.654 ops/s
# Warmup Iteration  25: 532811.045 ops/s
# Warmup Iteration  26: 533424.885 ops/s
# Warmup Iteration  27: 536199.668 ops/s
# Warmup Iteration  28: 529472.167 ops/s
# Warmup Iteration  29: 535136.725 ops/s
# Warmup Iteration  30: 533112.294 ops/s
Iteration   1: 533636.240 ops/s
Iteration   2: 527483.421 ops/s
Iteration   3: 537815.713 ops/s
Iteration   4: 537029.451 ops/s
Iteration   5: 531239.280 ops/s
Iteration   6: 533626.438 ops/s
Iteration   7: 532555.325 ops/s
Iteration   8: 536048.754 ops/s
Iteration   9: 532379.022 ops/s
Iteration  10: 536360.291 ops/s
Iteration  11: 536491.737 ops/s
Iteration  12: 529913.842 ops/s
Iteration  13: 533126.837 ops/s
Iteration  14: 533979.347 ops/s
Iteration  15: 536425.694 ops/s
Iteration  16: 534010.723 ops/s
Iteration  17: 534805.749 ops/s
Iteration  18: 534319.901 ops/s
Iteration  19: 529932.906 ops/s
Iteration  20: 533275.207 ops/s
Iteration  21: 532807.358 ops/s
Iteration  22: 534664.421 ops/s
Iteration  23: 533570.275 ops/s
Iteration  24: 535753.117 ops/s
Iteration  25: 534751.541 ops/s
Iteration  26: 539334.002 ops/s
Iteration  27: 532822.931 ops/s
Iteration  28: 537162.145 ops/s
Iteration  29: 536741.615 ops/s
Iteration  30: 524932.288 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecentTest._Benchmark.benchmark_empty":
  533899.852 ±(99.9%) 2042.043 ops/s [Average]
  (min, avg, max) = (524932.288, 533899.852, 539334.002), stdev = 3056.435
  CI (99.9%): [531857.809, 535941.896] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
BlockingFlowableMostRecentTest._Benchmark.benchmark_empty  thrpt   30  533899.852 ± 2042.043  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 659865.739 ops/s
# Warmup Iteration   2: 793968.760 ops/s
# Warmup Iteration   3: 838925.641 ops/s
# Warmup Iteration   4: 891001.524 ops/s
# Warmup Iteration   5: 891934.169 ops/s
# Warmup Iteration   6: 891410.211 ops/s
# Warmup Iteration   7: 886129.973 ops/s
# Warmup Iteration   8: 885598.326 ops/s
# Warmup Iteration   9: 886057.771 ops/s
# Warmup Iteration  10: 887200.825 ops/s
# Warmup Iteration  11: 886658.881 ops/s
# Warmup Iteration  12: 889216.890 ops/s
# Warmup Iteration  13: 886459.282 ops/s
# Warmup Iteration  14: 883185.523 ops/s
# Warmup Iteration  15: 876150.089 ops/s
# Warmup Iteration  16: 887063.056 ops/s
# Warmup Iteration  17: 931089.340 ops/s
# Warmup Iteration  18: 936466.121 ops/s
# Warmup Iteration  19: 935893.666 ops/s
# Warmup Iteration  20: 935013.403 ops/s
# Warmup Iteration  21: 936777.271 ops/s
# Warmup Iteration  22: 932003.748 ops/s
# Warmup Iteration  23: 930956.664 ops/s
# Warmup Iteration  24: 935860.980 ops/s
# Warmup Iteration  25: 937472.583 ops/s
# Warmup Iteration  26: 938614.337 ops/s
# Warmup Iteration  27: 936603.678 ops/s
# Warmup Iteration  28: 933686.077 ops/s
# Warmup Iteration  29: 931652.244 ops/s
# Warmup Iteration  30: 932974.917 ops/s
Iteration   1: 935772.619 ops/s
Iteration   2: 937069.839 ops/s
Iteration   3: 932681.649 ops/s
Iteration   4: 938701.671 ops/s
Iteration   5: 935717.501 ops/s
Iteration   6: 928987.864 ops/s
Iteration   7: 937935.190 ops/s
Iteration   8: 938598.849 ops/s
Iteration   9: 938284.357 ops/s
Iteration  10: 935881.670 ops/s
Iteration  11: 933570.788 ops/s
Iteration  12: 939718.848 ops/s
Iteration  13: 927748.702 ops/s
Iteration  14: 932542.591 ops/s
Iteration  15: 936868.171 ops/s
Iteration  16: 936505.481 ops/s
Iteration  17: 934257.775 ops/s
Iteration  18: 938775.293 ops/s
Iteration  19: 928771.327 ops/s
Iteration  20: 941424.412 ops/s
Iteration  21: 935994.351 ops/s
Iteration  22: 937935.997 ops/s
Iteration  23: 941924.814 ops/s
Iteration  24: 932150.816 ops/s
Iteration  25: 930014.596 ops/s
Iteration  26: 935530.172 ops/s
Iteration  27: 936318.536 ops/s
Iteration  28: 936067.257 ops/s
Iteration  29: 933322.371 ops/s
Iteration  30: 932037.545 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapNull":
  935370.368 ±(99.9%) 2413.634 ops/s [Average]
  (min, avg, max) = (927748.702, 935370.368, 941924.814), stdev = 3612.614
  CI (99.9%): [932956.735, 937784.002] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapNull  thrpt   30  935370.368 ± 2413.634  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 647891.352 ops/s
# Warmup Iteration   2: 812164.059 ops/s
# Warmup Iteration   3: 852356.624 ops/s
# Warmup Iteration   4: 889986.014 ops/s
# Warmup Iteration   5: 915884.495 ops/s
# Warmup Iteration   6: 915271.395 ops/s
# Warmup Iteration   7: 926610.132 ops/s
# Warmup Iteration   8: 922578.708 ops/s
# Warmup Iteration   9: 925299.791 ops/s
# Warmup Iteration  10: 924146.114 ops/s
# Warmup Iteration  11: 924159.451 ops/s
# Warmup Iteration  12: 926585.013 ops/s
# Warmup Iteration  13: 922118.266 ops/s
# Warmup Iteration  14: 918776.028 ops/s
# Warmup Iteration  15: 923665.459 ops/s
# Warmup Iteration  16: 902267.810 ops/s
# Warmup Iteration  17: 979317.947 ops/s
# Warmup Iteration  18: 962074.839 ops/s
# Warmup Iteration  19: 977237.815 ops/s
# Warmup Iteration  20: 975840.032 ops/s
# Warmup Iteration  21: 973577.880 ops/s
# Warmup Iteration  22: 968559.723 ops/s
# Warmup Iteration  23: 973507.757 ops/s
# Warmup Iteration  24: 969232.065 ops/s
# Warmup Iteration  25: 974239.433 ops/s
# Warmup Iteration  26: 980133.613 ops/s
# Warmup Iteration  27: 977282.759 ops/s
# Warmup Iteration  28: 977845.924 ops/s
# Warmup Iteration  29: 972068.718 ops/s
# Warmup Iteration  30: 984936.702 ops/s
Iteration   1: 978211.195 ops/s
Iteration   2: 980535.634 ops/s
Iteration   3: 979832.085 ops/s
Iteration   4: 981111.851 ops/s
Iteration   5: 969320.020 ops/s
Iteration   6: 980409.417 ops/s
Iteration   7: 972864.217 ops/s
Iteration   8: 969100.689 ops/s
Iteration   9: 973217.317 ops/s
Iteration  10: 976331.311 ops/s
Iteration  11: 974099.950 ops/s
Iteration  12: 972873.130 ops/s
Iteration  13: 976671.681 ops/s
Iteration  14: 974352.539 ops/s
Iteration  15: 975366.729 ops/s
Iteration  16: 976332.111 ops/s
Iteration  17: 978067.684 ops/s
Iteration  18: 973756.675 ops/s
Iteration  19: 974342.088 ops/s
Iteration  20: 977597.522 ops/s
Iteration  21: 974231.548 ops/s
Iteration  22: 978808.018 ops/s
Iteration  23: 973334.748 ops/s
Iteration  24: 981780.720 ops/s
Iteration  25: 976258.555 ops/s
Iteration  26: 977293.168 ops/s
Iteration  27: 977800.288 ops/s
Iteration  28: 979823.992 ops/s
Iteration  29: 976703.296 ops/s
Iteration  30: 972406.631 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_mainError":
  976094.494 ±(99.9%) 2189.945 ops/s [Average]
  (min, avg, max) = (969100.689, 976094.494, 981780.720), stdev = 3277.807
  CI (99.9%): [973904.548, 978284.439] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableConcatWithCompletableTest._Benchmark.benchmark_mainError  thrpt   30  976094.494 ± 2189.945  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_flatMapEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_flatMapEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43126945.723 ops/s
# Warmup Iteration   2: 70882142.491 ops/s
# Warmup Iteration   3: 77392218.539 ops/s
# Warmup Iteration   4: 76454037.350 ops/s
# Warmup Iteration   5: 77193331.568 ops/s
# Warmup Iteration   6: 77440554.031 ops/s
# Warmup Iteration   7: 76726543.150 ops/s
# Warmup Iteration   8: 76384253.824 ops/s
# Warmup Iteration   9: 76376844.835 ops/s
# Warmup Iteration  10: 76778374.373 ops/s
# Warmup Iteration  11: 76563955.966 ops/s
# Warmup Iteration  12: 76746440.869 ops/s
# Warmup Iteration  13: 77069465.471 ops/s
# Warmup Iteration  14: 76852435.806 ops/s
# Warmup Iteration  15: 77102552.843 ops/s
# Warmup Iteration  16: 76805212.718 ops/s
# Warmup Iteration  17: 77015250.842 ops/s
# Warmup Iteration  18: 77217610.572 ops/s
# Warmup Iteration  19: 77151280.912 ops/s
# Warmup Iteration  20: 77075329.695 ops/s
# Warmup Iteration  21: 77261009.532 ops/s
# Warmup Iteration  22: 77167556.553 ops/s
# Warmup Iteration  23: 77302714.162 ops/s
# Warmup Iteration  24: 76946343.468 ops/s
# Warmup Iteration  25: 77259590.988 ops/s
# Warmup Iteration  26: 76520101.877 ops/s
# Warmup Iteration  27: 76700426.401 ops/s
# Warmup Iteration  28: 77095075.601 ops/s
# Warmup Iteration  29: 77610555.009 ops/s
# Warmup Iteration  30: 77510796.971 ops/s
Iteration   1: 77672601.882 ops/s
Iteration   2: 76411911.947 ops/s
Iteration   3: 77076107.513 ops/s
Iteration   4: 77365781.032 ops/s
Iteration   5: 77465242.793 ops/s
Iteration   6: 76699732.676 ops/s
Iteration   7: 76720075.826 ops/s
Iteration   8: 77020838.315 ops/s
Iteration   9: 76861177.461 ops/s
Iteration  10: 76944294.503 ops/s
Iteration  11: 77317775.197 ops/s
Iteration  12: 76697574.959 ops/s
Iteration  13: 77339966.230 ops/s
Iteration  14: 77333923.995 ops/s
Iteration  15: 76807124.286 ops/s
Iteration  16: 77271777.595 ops/s
Iteration  17: 77230928.242 ops/s
Iteration  18: 77007417.185 ops/s
Iteration  19: 77287109.039 ops/s
Iteration  20: 77413439.586 ops/s
Iteration  21: 77432990.656 ops/s
Iteration  22: 77090231.416 ops/s
Iteration  23: 77196450.058 ops/s
Iteration  24: 77068261.604 ops/s
Iteration  25: 76936452.739 ops/s
Iteration  26: 77139155.107 ops/s
Iteration  27: 76781378.020 ops/s
Iteration  28: 77828900.809 ops/s
Iteration  29: 77481745.850 ops/s
Iteration  30: 76720860.062 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_flatMapEmpty":
  77120707.553 ±(99.9%) 216776.821 ops/s [Average]
  (min, avg, max) = (76411911.947, 77120707.553, 77828900.809), stdev = 324461.366
  CI (99.9%): [76903930.731, 77337484.374] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
FlowableFlatMapTest._Benchmark.benchmark_flatMapEmpty  thrpt   30  77120707.553 ± 216776.821  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3518815.260 ops/s
# Warmup Iteration   2: 4740051.477 ops/s
# Warmup Iteration   3: 5342877.627 ops/s
# Warmup Iteration   4: 5319438.125 ops/s
# Warmup Iteration   5: 5316059.522 ops/s
# Warmup Iteration   6: 5351659.431 ops/s
# Warmup Iteration   7: 5308769.767 ops/s
# Warmup Iteration   8: 5326213.613 ops/s
# Warmup Iteration   9: 5328408.565 ops/s
# Warmup Iteration  10: 5330396.839 ops/s
# Warmup Iteration  11: 5348952.899 ops/s
# Warmup Iteration  12: 5333769.744 ops/s
# Warmup Iteration  13: 5337807.570 ops/s
# Warmup Iteration  14: 5300151.885 ops/s
# Warmup Iteration  15: 5347368.291 ops/s
# Warmup Iteration  16: 5287392.970 ops/s
# Warmup Iteration  17: 5364836.943 ops/s
# Warmup Iteration  18: 5344436.565 ops/s
# Warmup Iteration  19: 5341398.148 ops/s
# Warmup Iteration  20: 5320283.109 ops/s
# Warmup Iteration  21: 5333777.594 ops/s
# Warmup Iteration  22: 5319283.679 ops/s
# Warmup Iteration  23: 5318007.233 ops/s
# Warmup Iteration  24: 5322016.653 ops/s
# Warmup Iteration  25: 5346132.246 ops/s
# Warmup Iteration  26: 5353524.606 ops/s
# Warmup Iteration  27: 5373975.521 ops/s
# Warmup Iteration  28: 5309729.614 ops/s
# Warmup Iteration  29: 5331555.040 ops/s
# Warmup Iteration  30: 5296023.648 ops/s
Iteration   1: 5371684.182 ops/s
Iteration   2: 5345593.470 ops/s
Iteration   3: 5333579.230 ops/s
Iteration   4: 5333084.031 ops/s
Iteration   5: 5318515.477 ops/s
Iteration   6: 5333654.599 ops/s
Iteration   7: 5328032.596 ops/s
Iteration   8: 5322085.461 ops/s
Iteration   9: 5318083.259 ops/s
Iteration  10: 5335961.759 ops/s
Iteration  11: 5344832.667 ops/s
Iteration  12: 5338266.117 ops/s
Iteration  13: 5318246.872 ops/s
Iteration  14: 5338586.082 ops/s
Iteration  15: 5361829.463 ops/s
Iteration  16: 5339553.662 ops/s
Iteration  17: 5338862.629 ops/s
Iteration  18: 5344399.353 ops/s
Iteration  19: 5363850.587 ops/s
Iteration  20: 5305651.907 ops/s
Iteration  21: 5382593.730 ops/s
Iteration  22: 5345864.834 ops/s
Iteration  23: 5331799.292 ops/s
Iteration  24: 5244880.596 ops/s
Iteration  25: 5318292.422 ops/s
Iteration  26: 5340190.351 ops/s
Iteration  27: 5294439.759 ops/s
Iteration  28: 5341580.123 ops/s
Iteration  29: 5284770.113 ops/s
Iteration  30: 5337687.425 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_empty":
  5331881.735 ±(99.9%) 17513.023 ops/s [Average]
  (min, avg, max) = (5244880.596, 5331881.735, 5382593.730), stdev = 26212.670
  CI (99.9%): [5314368.712, 5349394.757] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
FlowableCacheTest._Benchmark.benchmark_empty  thrpt   30  5331881.735 ± 17513.023  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_toIteratorWithException$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_toIteratorWithException

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 582099.363 ops/s
# Warmup Iteration   2: 729468.818 ops/s
# Warmup Iteration   3: 786808.267 ops/s
# Warmup Iteration   4: 796025.582 ops/s
# Warmup Iteration   5: 795415.145 ops/s
# Warmup Iteration   6: 792217.090 ops/s
# Warmup Iteration   7: 789802.180 ops/s
# Warmup Iteration   8: 790298.369 ops/s
# Warmup Iteration   9: 794514.842 ops/s
# Warmup Iteration  10: 788883.187 ops/s
# Warmup Iteration  11: 787156.508 ops/s
# Warmup Iteration  12: 787631.234 ops/s
# Warmup Iteration  13: 786904.595 ops/s
# Warmup Iteration  14: 790713.391 ops/s
# Warmup Iteration  15: 788416.154 ops/s
# Warmup Iteration  16: 786933.271 ops/s
# Warmup Iteration  17: 827937.617 ops/s
# Warmup Iteration  18: 833118.551 ops/s
# Warmup Iteration  19: 823616.009 ops/s
# Warmup Iteration  20: 833407.500 ops/s
# Warmup Iteration  21: 828958.874 ops/s
# Warmup Iteration  22: 829527.623 ops/s
# Warmup Iteration  23: 830108.907 ops/s
# Warmup Iteration  24: 836451.180 ops/s
# Warmup Iteration  25: 829908.149 ops/s
# Warmup Iteration  26: 835487.345 ops/s
# Warmup Iteration  27: 830265.244 ops/s
# Warmup Iteration  28: 832325.130 ops/s
# Warmup Iteration  29: 831126.979 ops/s
# Warmup Iteration  30: 829599.347 ops/s
Iteration   1: 831771.443 ops/s
Iteration   2: 827652.999 ops/s
Iteration   3: 832790.751 ops/s
Iteration   4: 828509.979 ops/s
Iteration   5: 829260.196 ops/s
Iteration   6: 829761.088 ops/s
Iteration   7: 828089.880 ops/s
Iteration   8: 824633.502 ops/s
Iteration   9: 828018.569 ops/s
Iteration  10: 831965.918 ops/s
Iteration  11: 832066.314 ops/s
Iteration  12: 822579.837 ops/s
Iteration  13: 829728.262 ops/s
Iteration  14: 830952.609 ops/s
Iteration  15: 828355.404 ops/s
Iteration  16: 831724.175 ops/s
Iteration  17: 827363.755 ops/s
Iteration  18: 830222.681 ops/s
Iteration  19: 833184.562 ops/s
Iteration  20: 826691.126 ops/s
Iteration  21: 828672.008 ops/s
Iteration  22: 831358.627 ops/s
Iteration  23: 823511.345 ops/s
Iteration  24: 831412.378 ops/s
Iteration  25: 836165.326 ops/s
Iteration  26: 828144.015 ops/s
Iteration  27: 835122.893 ops/s
Iteration  28: 830626.726 ops/s
Iteration  29: 829037.276 ops/s
Iteration  30: 833299.204 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_toIteratorWithException":
  829755.762 ±(99.9%) 2073.773 ops/s [Average]
  (min, avg, max) = (822579.837, 829755.762, 836165.326), stdev = 3103.926
  CI (99.9%): [827681.989, 831829.535] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
BlockingFlowableToIteratorTest._Benchmark.benchmark_toIteratorWithException  thrpt   30  829755.762 ± 2073.773  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNullFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNullFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 526968.910 ops/s
# Warmup Iteration   2: 681562.627 ops/s
# Warmup Iteration   3: 746313.651 ops/s
# Warmup Iteration   4: 678779.482 ops/s
# Warmup Iteration   5: 783684.500 ops/s
# Warmup Iteration   6: 775116.195 ops/s
# Warmup Iteration   7: 784853.156 ops/s
# Warmup Iteration   8: 780581.811 ops/s
# Warmup Iteration   9: 781139.930 ops/s
# Warmup Iteration  10: 777648.481 ops/s
# Warmup Iteration  11: 765647.464 ops/s
# Warmup Iteration  12: 774215.968 ops/s
# Warmup Iteration  13: 772007.434 ops/s
# Warmup Iteration  14: 770029.871 ops/s
# Warmup Iteration  15: 774036.115 ops/s
# Warmup Iteration  16: 779662.107 ops/s
# Warmup Iteration  17: 811897.213 ops/s
# Warmup Iteration  18: 807843.609 ops/s
# Warmup Iteration  19: 812383.633 ops/s
# Warmup Iteration  20: 817467.199 ops/s
# Warmup Iteration  21: 808521.893 ops/s
# Warmup Iteration  22: 813748.833 ops/s
# Warmup Iteration  23: 812894.657 ops/s
# Warmup Iteration  24: 814896.170 ops/s
# Warmup Iteration  25: 808120.977 ops/s
# Warmup Iteration  26: 811330.458 ops/s
# Warmup Iteration  27: 805972.075 ops/s
# Warmup Iteration  28: 808549.678 ops/s
# Warmup Iteration  29: 815979.661 ops/s
# Warmup Iteration  30: 813075.469 ops/s
Iteration   1: 814089.172 ops/s
Iteration   2: 817546.254 ops/s
Iteration   3: 781594.944 ops/s
Iteration   4: 807804.903 ops/s
Iteration   5: 805508.727 ops/s
Iteration   6: 812301.239 ops/s
Iteration   7: 810528.878 ops/s
Iteration   8: 811395.240 ops/s
Iteration   9: 808372.154 ops/s
Iteration  10: 812285.382 ops/s
Iteration  11: 812003.924 ops/s
Iteration  12: 812331.418 ops/s
Iteration  13: 812170.466 ops/s
Iteration  14: 796385.902 ops/s
Iteration  15: 806611.307 ops/s
Iteration  16: 793350.940 ops/s
Iteration  17: 812479.057 ops/s
Iteration  18: 815606.641 ops/s
Iteration  19: 813969.355 ops/s
Iteration  20: 806237.077 ops/s
Iteration  21: 814169.611 ops/s
Iteration  22: 814838.954 ops/s
Iteration  23: 811666.873 ops/s
Iteration  24: 812010.261 ops/s
Iteration  25: 810965.944 ops/s
Iteration  26: 811109.362 ops/s
Iteration  27: 809173.835 ops/s
Iteration  28: 816812.386 ops/s
Iteration  29: 805265.000 ops/s
Iteration  30: 808751.755 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNullFlowable":
  809244.565 ±(99.9%) 4931.986 ops/s [Average]
  (min, avg, max) = (781594.944, 809244.565, 817546.254), stdev = 7381.965
  CI (99.9%): [804312.580, 814176.551] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNullFlowable  thrpt   30  809244.565 ± 4931.986  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperThrowsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperThrowsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 509251.641 ops/s
# Warmup Iteration   2: 663807.344 ops/s
# Warmup Iteration   3: 699646.520 ops/s
# Warmup Iteration   4: 754115.504 ops/s
# Warmup Iteration   5: 756867.683 ops/s
# Warmup Iteration   6: 747200.371 ops/s
# Warmup Iteration   7: 758409.011 ops/s
# Warmup Iteration   8: 759659.801 ops/s
# Warmup Iteration   9: 755273.681 ops/s
# Warmup Iteration  10: 750211.650 ops/s
# Warmup Iteration  11: 749435.894 ops/s
# Warmup Iteration  12: 747083.010 ops/s
# Warmup Iteration  13: 738142.449 ops/s
# Warmup Iteration  14: 751318.748 ops/s
# Warmup Iteration  15: 748365.875 ops/s
# Warmup Iteration  16: 749809.716 ops/s
# Warmup Iteration  17: 782551.807 ops/s
# Warmup Iteration  18: 783866.809 ops/s
# Warmup Iteration  19: 786794.502 ops/s
# Warmup Iteration  20: 788798.747 ops/s
# Warmup Iteration  21: 788563.821 ops/s
# Warmup Iteration  22: 786673.760 ops/s
# Warmup Iteration  23: 784971.275 ops/s
# Warmup Iteration  24: 784430.337 ops/s
# Warmup Iteration  25: 783943.585 ops/s
# Warmup Iteration  26: 787962.755 ops/s
# Warmup Iteration  27: 789311.992 ops/s
# Warmup Iteration  28: 787142.587 ops/s
# Warmup Iteration  29: 784685.797 ops/s
# Warmup Iteration  30: 788564.412 ops/s
Iteration   1: 783923.972 ops/s
Iteration   2: 790410.176 ops/s
Iteration   3: 786908.193 ops/s
Iteration   4: 787035.065 ops/s
Iteration   5: 779348.415 ops/s
Iteration   6: 788668.089 ops/s
Iteration   7: 783994.854 ops/s
Iteration   8: 787144.318 ops/s
Iteration   9: 785500.013 ops/s
Iteration  10: 787338.227 ops/s
Iteration  11: 788895.089 ops/s
Iteration  12: 789657.228 ops/s
Iteration  13: 786170.154 ops/s
Iteration  14: 789125.764 ops/s
Iteration  15: 782677.568 ops/s
Iteration  16: 785132.679 ops/s
Iteration  17: 789036.972 ops/s
Iteration  18: 788213.892 ops/s
Iteration  19: 785360.463 ops/s
Iteration  20: 784137.277 ops/s
Iteration  21: 788778.832 ops/s
Iteration  22: 789621.349 ops/s
Iteration  23: 785063.180 ops/s
Iteration  24: 790773.120 ops/s
Iteration  25: 787021.810 ops/s
Iteration  26: 782217.782 ops/s
Iteration  27: 789809.715 ops/s
Iteration  28: 788629.548 ops/s
Iteration  29: 786920.081 ops/s
Iteration  30: 787640.845 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperThrowsFlowable":
  786838.489 ±(99.9%) 1795.567 ops/s [Average]
  (min, avg, max) = (779348.415, 786838.489, 790773.120), stdev = 2687.521
  CI (99.9%): [785042.922, 788634.056] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperThrowsFlowable  thrpt   30  786838.489 ± 1795.567  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 634744.532 ops/s
# Warmup Iteration   2: 792896.807 ops/s
# Warmup Iteration   3: 870698.737 ops/s
# Warmup Iteration   4: 859550.719 ops/s
# Warmup Iteration   5: 901774.959 ops/s
# Warmup Iteration   6: 901757.885 ops/s
# Warmup Iteration   7: 902399.184 ops/s
# Warmup Iteration   8: 899619.229 ops/s
# Warmup Iteration   9: 904519.723 ops/s
# Warmup Iteration  10: 898684.340 ops/s
# Warmup Iteration  11: 902549.468 ops/s
# Warmup Iteration  12: 892977.265 ops/s
# Warmup Iteration  13: 899339.847 ops/s
# Warmup Iteration  14: 897906.052 ops/s
# Warmup Iteration  15: 898061.762 ops/s
# Warmup Iteration  16: 895585.706 ops/s
# Warmup Iteration  17: 947132.287 ops/s
# Warmup Iteration  18: 946993.971 ops/s
# Warmup Iteration  19: 947553.619 ops/s
# Warmup Iteration  20: 947829.874 ops/s
# Warmup Iteration  21: 944938.394 ops/s
# Warmup Iteration  22: 943738.742 ops/s
# Warmup Iteration  23: 937329.184 ops/s
# Warmup Iteration  24: 948192.120 ops/s
# Warmup Iteration  25: 948779.744 ops/s
# Warmup Iteration  26: 945539.728 ops/s
# Warmup Iteration  27: 940119.705 ops/s
# Warmup Iteration  28: 949435.569 ops/s
# Warmup Iteration  29: 949246.676 ops/s
# Warmup Iteration  30: 945803.332 ops/s
Iteration   1: 943611.297 ops/s
Iteration   2: 942711.285 ops/s
Iteration   3: 942403.952 ops/s
Iteration   4: 951684.253 ops/s
Iteration   5: 923877.321 ops/s
Iteration   6: 940345.350 ops/s
Iteration   7: 946171.951 ops/s
Iteration   8: 947706.607 ops/s
Iteration   9: 947589.484 ops/s
Iteration  10: 954922.761 ops/s
Iteration  11: 931465.703 ops/s
Iteration  12: 945730.021 ops/s
Iteration  13: 940962.169 ops/s
Iteration  14: 940059.553 ops/s
Iteration  15: 942603.724 ops/s
Iteration  16: 955170.616 ops/s
Iteration  17: 946354.729 ops/s
Iteration  18: 944366.115 ops/s
Iteration  19: 940723.579 ops/s
Iteration  20: 951491.017 ops/s
Iteration  21: 945444.014 ops/s
Iteration  22: 944993.050 ops/s
Iteration  23: 940114.750 ops/s
Iteration  24: 946524.231 ops/s
Iteration  25: 946018.769 ops/s
Iteration  26: 947821.532 ops/s
Iteration  27: 946555.871 ops/s
Iteration  28: 944663.254 ops/s
Iteration  29: 947673.667 ops/s
Iteration  30: 940622.861 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_error":
  944346.116 ±(99.9%) 4092.183 ops/s [Average]
  (min, avg, max) = (923877.321, 944346.116, 955170.616), stdev = 6124.987
  CI (99.9%): [940253.933, 948438.299] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
FlowableTakeLastTest._Benchmark.benchmark_error  thrpt   30  944346.116 ± 4092.183  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_emptyDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_emptyDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2151222.854 ops/s
# Warmup Iteration   2: 3100258.111 ops/s
# Warmup Iteration   3: 3426049.445 ops/s
# Warmup Iteration   4: 3449480.184 ops/s
# Warmup Iteration   5: 3423761.410 ops/s
# Warmup Iteration   6: 3421537.256 ops/s
# Warmup Iteration   7: 3403463.751 ops/s
# Warmup Iteration   8: 3416613.666 ops/s
# Warmup Iteration   9: 3368627.222 ops/s
# Warmup Iteration  10: 3420514.862 ops/s
# Warmup Iteration  11: 3411974.511 ops/s
# Warmup Iteration  12: 3452654.598 ops/s
# Warmup Iteration  13: 3437878.230 ops/s
# Warmup Iteration  14: 3456397.773 ops/s
# Warmup Iteration  15: 3422790.557 ops/s
# Warmup Iteration  16: 3442349.188 ops/s
# Warmup Iteration  17: 3446992.515 ops/s
# Warmup Iteration  18: 3453578.215 ops/s
# Warmup Iteration  19: 3477297.626 ops/s
# Warmup Iteration  20: 3445555.179 ops/s
# Warmup Iteration  21: 3487984.915 ops/s
# Warmup Iteration  22: 3440599.479 ops/s
# Warmup Iteration  23: 3439170.111 ops/s
# Warmup Iteration  24: 3449326.152 ops/s
# Warmup Iteration  25: 3478760.365 ops/s
# Warmup Iteration  26: 3479689.419 ops/s
# Warmup Iteration  27: 3474358.059 ops/s
# Warmup Iteration  28: 3435885.741 ops/s
# Warmup Iteration  29: 3475855.785 ops/s
# Warmup Iteration  30: 3512255.936 ops/s
Iteration   1: 3461652.846 ops/s
Iteration   2: 3434209.203 ops/s
Iteration   3: 3443199.908 ops/s
Iteration   4: 3465294.492 ops/s
Iteration   5: 3398792.185 ops/s
Iteration   6: 3485391.524 ops/s
Iteration   7: 3442612.000 ops/s
Iteration   8: 3494437.342 ops/s
Iteration   9: 3461198.662 ops/s
Iteration  10: 3474306.442 ops/s
Iteration  11: 3452449.532 ops/s
Iteration  12: 3447387.472 ops/s
Iteration  13: 3468484.045 ops/s
Iteration  14: 3466488.702 ops/s
Iteration  15: 3455203.652 ops/s
Iteration  16: 3456837.139 ops/s
Iteration  17: 3461266.535 ops/s
Iteration  18: 3440779.255 ops/s
Iteration  19: 3432757.407 ops/s
Iteration  20: 3452472.227 ops/s
Iteration  21: 3513599.088 ops/s
Iteration  22: 3447480.251 ops/s
Iteration  23: 3424490.264 ops/s
Iteration  24: 3443097.419 ops/s
Iteration  25: 3475536.984 ops/s
Iteration  26: 3445255.050 ops/s
Iteration  27: 3435746.050 ops/s
Iteration  28: 3439485.082 ops/s
Iteration  29: 3461646.328 ops/s
Iteration  30: 3451818.813 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_emptyDelayError":
  3454445.863 ±(99.9%) 14566.513 ops/s [Average]
  (min, avg, max) = (3398792.185, 3454445.863, 3513599.088), stdev = 21802.473
  CI (99.9%): [3439879.350, 3469012.377] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_emptyDelayError  thrpt   30  3454445.863 ± 14566.513  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 627522.189 ops/s
# Warmup Iteration   2: 779193.735 ops/s
# Warmup Iteration   3: 906362.932 ops/s
# Warmup Iteration   4: 902410.378 ops/s
# Warmup Iteration   5: 904280.245 ops/s
# Warmup Iteration   6: 904478.031 ops/s
# Warmup Iteration   7: 905056.030 ops/s
# Warmup Iteration   8: 903933.880 ops/s
# Warmup Iteration   9: 899670.302 ops/s
# Warmup Iteration  10: 901966.407 ops/s
# Warmup Iteration  11: 901199.183 ops/s
# Warmup Iteration  12: 903274.818 ops/s
# Warmup Iteration  13: 893690.175 ops/s
# Warmup Iteration  14: 902863.096 ops/s
# Warmup Iteration  15: 904211.035 ops/s
# Warmup Iteration  16: 896589.573 ops/s
# Warmup Iteration  17: 943976.161 ops/s
# Warmup Iteration  18: 959302.628 ops/s
# Warmup Iteration  19: 960373.264 ops/s
# Warmup Iteration  20: 962019.738 ops/s
# Warmup Iteration  21: 953958.592 ops/s
# Warmup Iteration  22: 960844.220 ops/s
# Warmup Iteration  23: 959952.541 ops/s
# Warmup Iteration  24: 964885.713 ops/s
# Warmup Iteration  25: 952980.077 ops/s
# Warmup Iteration  26: 963430.338 ops/s
# Warmup Iteration  27: 960717.941 ops/s
# Warmup Iteration  28: 953844.851 ops/s
# Warmup Iteration  29: 957412.225 ops/s
# Warmup Iteration  30: 953993.282 ops/s
Iteration   1: 954118.813 ops/s
Iteration   2: 958394.806 ops/s
Iteration   3: 957043.217 ops/s
Iteration   4: 956655.500 ops/s
Iteration   5: 954965.049 ops/s
Iteration   6: 957939.901 ops/s
Iteration   7: 955826.823 ops/s
Iteration   8: 954609.622 ops/s
Iteration   9: 959777.262 ops/s
Iteration  10: 955623.658 ops/s
Iteration  11: 965413.759 ops/s
Iteration  12: 958164.520 ops/s
Iteration  13: 963534.083 ops/s
Iteration  14: 960114.596 ops/s
Iteration  15: 956340.664 ops/s
Iteration  16: 957859.963 ops/s
Iteration  17: 954615.971 ops/s
Iteration  18: 959460.199 ops/s
Iteration  19: 952030.109 ops/s
Iteration  20: 962622.766 ops/s
Iteration  21: 947677.299 ops/s
Iteration  22: 964755.669 ops/s
Iteration  23: 952436.369 ops/s
Iteration  24: 966166.783 ops/s
Iteration  25: 961009.864 ops/s
Iteration  26: 961352.714 ops/s
Iteration  27: 961689.183 ops/s
Iteration  28: 960047.909 ops/s
Iteration  29: 960215.123 ops/s
Iteration  30: 949059.213 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorSkip":
  957984.047 ±(99.9%) 3009.510 ops/s [Average]
  (min, avg, max) = (947677.299, 957984.047, 966166.783), stdev = 4504.493
  CI (99.9%): [954974.537, 960993.557] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_errorSkip  thrpt   30  957984.047 ± 3009.510  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorExact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorExact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 648771.785 ops/s
# Warmup Iteration   2: 806331.472 ops/s
# Warmup Iteration   3: 852671.498 ops/s
# Warmup Iteration   4: 865862.083 ops/s
# Warmup Iteration   5: 916860.774 ops/s
# Warmup Iteration   6: 916427.035 ops/s
# Warmup Iteration   7: 900019.909 ops/s
# Warmup Iteration   8: 915653.947 ops/s
# Warmup Iteration   9: 912573.340 ops/s
# Warmup Iteration  10: 915911.925 ops/s
# Warmup Iteration  11: 916149.911 ops/s
# Warmup Iteration  12: 915116.507 ops/s
# Warmup Iteration  13: 913615.517 ops/s
# Warmup Iteration  14: 918662.677 ops/s
# Warmup Iteration  15: 913140.179 ops/s
# Warmup Iteration  16: 903474.856 ops/s
# Warmup Iteration  17: 970965.804 ops/s
# Warmup Iteration  18: 968865.136 ops/s
# Warmup Iteration  19: 967920.042 ops/s
# Warmup Iteration  20: 967363.400 ops/s
# Warmup Iteration  21: 964767.237 ops/s
# Warmup Iteration  22: 972238.047 ops/s
# Warmup Iteration  23: 956635.794 ops/s
# Warmup Iteration  24: 965016.048 ops/s
# Warmup Iteration  25: 965199.991 ops/s
# Warmup Iteration  26: 964981.685 ops/s
# Warmup Iteration  27: 969223.872 ops/s
# Warmup Iteration  28: 967830.521 ops/s
# Warmup Iteration  29: 954935.597 ops/s
# Warmup Iteration  30: 966682.661 ops/s
Iteration   1: 962742.599 ops/s
Iteration   2: 968606.567 ops/s
Iteration   3: 968759.488 ops/s
Iteration   4: 962186.705 ops/s
Iteration   5: 959502.064 ops/s
Iteration   6: 969212.596 ops/s
Iteration   7: 964545.102 ops/s
Iteration   8: 968119.965 ops/s
Iteration   9: 962236.508 ops/s
Iteration  10: 963060.735 ops/s
Iteration  11: 949172.379 ops/s
Iteration  12: 975296.275 ops/s
Iteration  13: 975496.356 ops/s
Iteration  14: 967104.131 ops/s
Iteration  15: 961244.483 ops/s
Iteration  16: 966172.014 ops/s
Iteration  17: 960264.057 ops/s
Iteration  18: 970551.858 ops/s
Iteration  19: 964258.967 ops/s
Iteration  20: 968735.896 ops/s
Iteration  21: 963168.851 ops/s
Iteration  22: 961905.312 ops/s
Iteration  23: 964736.842 ops/s
Iteration  24: 967734.917 ops/s
Iteration  25: 966178.926 ops/s
Iteration  26: 963728.964 ops/s
Iteration  27: 952193.739 ops/s
Iteration  28: 963796.890 ops/s
Iteration  29: 961515.251 ops/s
Iteration  30: 971408.822 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorExact":
  964787.909 ±(99.9%) 3731.518 ops/s [Average]
  (min, avg, max) = (949172.379, 964787.909, 975496.356), stdev = 5585.161
  CI (99.9%): [961056.391, 968519.427] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_errorExact  thrpt   30  964787.909 ± 3731.518  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_errorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_errorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 445983.622 ops/s
# Warmup Iteration   2: 580550.322 ops/s
# Warmup Iteration   3: 681749.282 ops/s
# Warmup Iteration   4: 694200.205 ops/s
# Warmup Iteration   5: 693416.917 ops/s
# Warmup Iteration   6: 693021.540 ops/s
# Warmup Iteration   7: 694492.289 ops/s
# Warmup Iteration   8: 692283.828 ops/s
# Warmup Iteration   9: 688833.001 ops/s
# Warmup Iteration  10: 691039.355 ops/s
# Warmup Iteration  11: 687143.983 ops/s
# Warmup Iteration  12: 685881.703 ops/s
# Warmup Iteration  13: 691353.851 ops/s
# Warmup Iteration  14: 692814.134 ops/s
# Warmup Iteration  15: 689964.658 ops/s
# Warmup Iteration  16: 691066.868 ops/s
# Warmup Iteration  17: 724442.879 ops/s
# Warmup Iteration  18: 712417.200 ops/s
# Warmup Iteration  19: 706042.295 ops/s
# Warmup Iteration  20: 719138.630 ops/s
# Warmup Iteration  21: 710887.359 ops/s
# Warmup Iteration  22: 722368.798 ops/s
# Warmup Iteration  23: 719188.467 ops/s
# Warmup Iteration  24: 718753.267 ops/s
# Warmup Iteration  25: 722334.080 ops/s
# Warmup Iteration  26: 727290.091 ops/s
# Warmup Iteration  27: 713303.880 ops/s
# Warmup Iteration  28: 717526.858 ops/s
# Warmup Iteration  29: 722145.581 ops/s
# Warmup Iteration  30: 720544.740 ops/s
Iteration   1: 721018.674 ops/s
Iteration   2: 722486.285 ops/s
Iteration   3: 721756.336 ops/s
Iteration   4: 718480.426 ops/s
Iteration   5: 711173.571 ops/s
Iteration   6: 717969.590 ops/s
Iteration   7: 714668.554 ops/s
Iteration   8: 720583.268 ops/s
Iteration   9: 718203.538 ops/s
Iteration  10: 689012.933 ops/s
Iteration  11: 724772.057 ops/s
Iteration  12: 716570.552 ops/s
Iteration  13: 717532.375 ops/s
Iteration  14: 718568.588 ops/s
Iteration  15: 717479.069 ops/s
Iteration  16: 725303.220 ops/s
Iteration  17: 723094.123 ops/s
Iteration  18: 721276.512 ops/s
Iteration  19: 723072.999 ops/s
Iteration  20: 724181.274 ops/s
Iteration  21: 718365.957 ops/s
Iteration  22: 710276.479 ops/s
Iteration  23: 722229.531 ops/s
Iteration  24: 721410.971 ops/s
Iteration  25: 723731.789 ops/s
Iteration  26: 717668.806 ops/s
Iteration  27: 720733.250 ops/s
Iteration  28: 718528.375 ops/s
Iteration  29: 713643.815 ops/s
Iteration  30: 705149.197 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_errorDelayed":
  717964.737 ±(99.9%) 4748.699 ops/s [Average]
  (min, avg, max) = (689012.933, 717964.737, 725303.220), stdev = 7107.629
  CI (99.9%): [713216.039, 722713.436] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableSkipLastTimedTest._Benchmark.benchmark_errorDelayed  thrpt   30  717964.737 ± 4748.699  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_eventOrdering$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_eventOrdering

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 620182.170 ops/s
# Warmup Iteration   2: 728210.045 ops/s
# Warmup Iteration   3: 841132.533 ops/s
# Warmup Iteration   4: 783472.186 ops/s
# Warmup Iteration   5: 855071.712 ops/s
# Warmup Iteration   6: 855326.785 ops/s
# Warmup Iteration   7: 855703.834 ops/s
# Warmup Iteration   8: 852198.247 ops/s
# Warmup Iteration   9: 855158.156 ops/s
# Warmup Iteration  10: 858806.627 ops/s
# Warmup Iteration  11: 857952.384 ops/s
# Warmup Iteration  12: 851723.783 ops/s
# Warmup Iteration  13: 857854.838 ops/s
# Warmup Iteration  14: 855977.521 ops/s
# Warmup Iteration  15: 850882.039 ops/s
# Warmup Iteration  16: 851651.516 ops/s
# Warmup Iteration  17: 908770.372 ops/s
# Warmup Iteration  18: 904966.555 ops/s
# Warmup Iteration  19: 908107.141 ops/s
# Warmup Iteration  20: 892372.443 ops/s
# Warmup Iteration  21: 913710.969 ops/s
# Warmup Iteration  22: 905921.479 ops/s
# Warmup Iteration  23: 906465.188 ops/s
# Warmup Iteration  24: 901175.614 ops/s
# Warmup Iteration  25: 904701.028 ops/s
# Warmup Iteration  26: 905786.294 ops/s
# Warmup Iteration  27: 905410.366 ops/s
# Warmup Iteration  28: 909765.588 ops/s
# Warmup Iteration  29: 906387.164 ops/s
# Warmup Iteration  30: 901767.402 ops/s
Iteration   1: 907203.925 ops/s
Iteration   2: 912837.265 ops/s
Iteration   3: 905995.984 ops/s
Iteration   4: 908277.309 ops/s
Iteration   5: 899959.024 ops/s
Iteration   6: 910423.270 ops/s
Iteration   7: 911580.656 ops/s
Iteration   8: 910028.258 ops/s
Iteration   9: 907666.013 ops/s
Iteration  10: 906222.762 ops/s
Iteration  11: 908311.021 ops/s
Iteration  12: 907980.371 ops/s
Iteration  13: 909187.244 ops/s
Iteration  14: 910858.037 ops/s
Iteration  15: 907020.036 ops/s
Iteration  16: 915595.798 ops/s
Iteration  17: 912222.585 ops/s
Iteration  18: 903950.962 ops/s
Iteration  19: 909450.799 ops/s
Iteration  20: 910800.667 ops/s
Iteration  21: 915064.255 ops/s
Iteration  22: 907259.311 ops/s
Iteration  23: 911418.621 ops/s
Iteration  24: 900731.473 ops/s
Iteration  25: 903233.701 ops/s
Iteration  26: 909751.234 ops/s
Iteration  27: 910490.451 ops/s
Iteration  28: 906659.566 ops/s
Iteration  29: 907274.515 ops/s
Iteration  30: 905237.778 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_eventOrdering":
  908423.096 ±(99.9%) 2427.710 ops/s [Average]
  (min, avg, max) = (899959.024, 908423.096, 915595.798), stdev = 3633.682
  CI (99.9%): [905995.387, 910850.806] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_eventOrdering  thrpt   30  908423.096 ± 2427.710  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_emptyIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_emptyIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4809371.230 ops/s
# Warmup Iteration   2: 7539948.153 ops/s
# Warmup Iteration   3: 8007801.838 ops/s
# Warmup Iteration   4: 7988630.294 ops/s
# Warmup Iteration   5: 7930947.278 ops/s
# Warmup Iteration   6: 8014516.520 ops/s
# Warmup Iteration   7: 8001747.353 ops/s
# Warmup Iteration   8: 8018063.668 ops/s
# Warmup Iteration   9: 8011143.705 ops/s
# Warmup Iteration  10: 8009721.572 ops/s
# Warmup Iteration  11: 8056000.015 ops/s
# Warmup Iteration  12: 8016027.281 ops/s
# Warmup Iteration  13: 7973702.877 ops/s
# Warmup Iteration  14: 7994695.983 ops/s
# Warmup Iteration  15: 7957120.437 ops/s
# Warmup Iteration  16: 7991457.546 ops/s
# Warmup Iteration  17: 7967851.892 ops/s
# Warmup Iteration  18: 8047430.738 ops/s
# Warmup Iteration  19: 8028203.655 ops/s
# Warmup Iteration  20: 7939290.164 ops/s
# Warmup Iteration  21: 8022471.245 ops/s
# Warmup Iteration  22: 8041176.658 ops/s
# Warmup Iteration  23: 8034388.507 ops/s
# Warmup Iteration  24: 7946497.495 ops/s
# Warmup Iteration  25: 8011005.730 ops/s
# Warmup Iteration  26: 7993082.538 ops/s
# Warmup Iteration  27: 8011528.579 ops/s
# Warmup Iteration  28: 8036766.663 ops/s
# Warmup Iteration  29: 7976645.796 ops/s
# Warmup Iteration  30: 8013443.648 ops/s
Iteration   1: 8005497.181 ops/s
Iteration   2: 7963964.547 ops/s
Iteration   3: 7988264.747 ops/s
Iteration   4: 8002755.263 ops/s
Iteration   5: 7995878.022 ops/s
Iteration   6: 8014318.120 ops/s
Iteration   7: 8075656.397 ops/s
Iteration   8: 8005442.200 ops/s
Iteration   9: 8018143.044 ops/s
Iteration  10: 7895252.358 ops/s
Iteration  11: 8029124.559 ops/s
Iteration  12: 7998915.686 ops/s
Iteration  13: 8042503.356 ops/s
Iteration  14: 8033311.976 ops/s
Iteration  15: 8032143.009 ops/s
Iteration  16: 7976675.197 ops/s
Iteration  17: 8000196.978 ops/s
Iteration  18: 8015874.850 ops/s
Iteration  19: 7931624.526 ops/s
Iteration  20: 8000755.766 ops/s
Iteration  21: 7995852.004 ops/s
Iteration  22: 8026780.675 ops/s
Iteration  23: 8045630.001 ops/s
Iteration  24: 7981731.366 ops/s
Iteration  25: 7992413.511 ops/s
Iteration  26: 8003683.587 ops/s
Iteration  27: 8007589.899 ops/s
Iteration  28: 7976206.543 ops/s
Iteration  29: 8033606.714 ops/s
Iteration  30: 8055055.949 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_emptyIterable":
  8004828.268 ±(99.9%) 23646.700 ops/s [Average]
  (min, avg, max) = (7895252.358, 8004828.268, 8075656.397), stdev = 35393.270
  CI (99.9%): [7981181.568, 8028474.968] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
FlowableAmbTest._Benchmark.benchmark_emptyIterable  thrpt   30  8004828.268 ± 23646.700  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 668397.722 ops/s
# Warmup Iteration   2: 814039.855 ops/s
# Warmup Iteration   3: 864690.548 ops/s
# Warmup Iteration   4: 879330.432 ops/s
# Warmup Iteration   5: 933793.731 ops/s
# Warmup Iteration   6: 932501.901 ops/s
# Warmup Iteration   7: 927707.785 ops/s
# Warmup Iteration   8: 930181.783 ops/s
# Warmup Iteration   9: 927694.527 ops/s
# Warmup Iteration  10: 928113.203 ops/s
# Warmup Iteration  11: 933114.857 ops/s
# Warmup Iteration  12: 927831.299 ops/s
# Warmup Iteration  13: 924588.277 ops/s
# Warmup Iteration  14: 924859.402 ops/s
# Warmup Iteration  15: 924358.245 ops/s
# Warmup Iteration  16: 926683.929 ops/s
# Warmup Iteration  17: 968053.708 ops/s
# Warmup Iteration  18: 977495.342 ops/s
# Warmup Iteration  19: 967476.788 ops/s
# Warmup Iteration  20: 969865.897 ops/s
# Warmup Iteration  21: 963722.850 ops/s
# Warmup Iteration  22: 978130.824 ops/s
# Warmup Iteration  23: 954866.154 ops/s
# Warmup Iteration  24: 968103.427 ops/s
# Warmup Iteration  25: 970094.857 ops/s
# Warmup Iteration  26: 969853.808 ops/s
# Warmup Iteration  27: 971068.759 ops/s
# Warmup Iteration  28: 963985.577 ops/s
# Warmup Iteration  29: 972145.696 ops/s
# Warmup Iteration  30: 970616.201 ops/s
Iteration   1: 971006.596 ops/s
Iteration   2: 963524.752 ops/s
Iteration   3: 972192.116 ops/s
Iteration   4: 968784.311 ops/s
Iteration   5: 961213.423 ops/s
Iteration   6: 968969.436 ops/s
Iteration   7: 968169.360 ops/s
Iteration   8: 971013.266 ops/s
Iteration   9: 945537.324 ops/s
Iteration  10: 972616.978 ops/s
Iteration  11: 975296.592 ops/s
Iteration  12: 975310.695 ops/s
Iteration  13: 974093.190 ops/s
Iteration  14: 981861.110 ops/s
Iteration  15: 971241.054 ops/s
Iteration  16: 967792.817 ops/s
Iteration  17: 972066.771 ops/s
Iteration  18: 978286.162 ops/s
Iteration  19: 971290.892 ops/s
Iteration  20: 964932.030 ops/s
Iteration  21: 976555.195 ops/s
Iteration  22: 974251.642 ops/s
Iteration  23: 976264.629 ops/s
Iteration  24: 975631.962 ops/s
Iteration  25: 975043.989 ops/s
Iteration  26: 968134.349 ops/s
Iteration  27: 957583.554 ops/s
Iteration  28: 973844.519 ops/s
Iteration  29: 970789.438 ops/s
Iteration  30: 968355.279 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_error":
  970388.448 ±(99.9%) 4619.196 ops/s [Average]
  (min, avg, max) = (945537.324, 970388.448, 981861.110), stdev = 6913.796
  CI (99.9%): [965769.252, 975007.644] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
FlowableScanTest._Benchmark.benchmark_error  thrpt   30  970388.448 ± 4619.196  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_asyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_asyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1024021.082 ops/s
# Warmup Iteration   2: 1633018.415 ops/s
# Warmup Iteration   3: 1865269.925 ops/s
# Warmup Iteration   4: 1857569.758 ops/s
# Warmup Iteration   5: 1859223.637 ops/s
# Warmup Iteration   6: 1847201.406 ops/s
# Warmup Iteration   7: 1847644.843 ops/s
# Warmup Iteration   8: 1851809.717 ops/s
# Warmup Iteration   9: 1849201.214 ops/s
# Warmup Iteration  10: 1848639.129 ops/s
# Warmup Iteration  11: 1852647.296 ops/s
# Warmup Iteration  12: 1846660.627 ops/s
# Warmup Iteration  13: 1847843.250 ops/s
# Warmup Iteration  14: 1857331.598 ops/s
# Warmup Iteration  15: 1844109.591 ops/s
# Warmup Iteration  16: 1860269.037 ops/s
# Warmup Iteration  17: 1846642.034 ops/s
# Warmup Iteration  18: 1845439.962 ops/s
# Warmup Iteration  19: 1846750.780 ops/s
# Warmup Iteration  20: 1849666.126 ops/s
# Warmup Iteration  21: 1838084.569 ops/s
# Warmup Iteration  22: 1825389.616 ops/s
# Warmup Iteration  23: 1844008.177 ops/s
# Warmup Iteration  24: 1846430.703 ops/s
# Warmup Iteration  25: 1853274.657 ops/s
# Warmup Iteration  26: 1846470.908 ops/s
# Warmup Iteration  27: 1851099.167 ops/s
# Warmup Iteration  28: 1826550.084 ops/s
# Warmup Iteration  29: 1838445.640 ops/s
# Warmup Iteration  30: 1849136.423 ops/s
Iteration   1: 1839603.529 ops/s
Iteration   2: 1837187.320 ops/s
Iteration   3: 1853362.287 ops/s
Iteration   4: 1828674.093 ops/s
Iteration   5: 1842498.826 ops/s
Iteration   6: 1858606.715 ops/s
Iteration   7: 1860666.049 ops/s
Iteration   8: 1854583.923 ops/s
Iteration   9: 1852444.391 ops/s
Iteration  10: 1842300.879 ops/s
Iteration  11: 1838017.279 ops/s
Iteration  12: 1850966.616 ops/s
Iteration  13: 1853301.706 ops/s
Iteration  14: 1847035.216 ops/s
Iteration  15: 1859113.449 ops/s
Iteration  16: 1843474.036 ops/s
Iteration  17: 1846158.048 ops/s
Iteration  18: 1839615.221 ops/s
Iteration  19: 1849387.000 ops/s
Iteration  20: 1879313.816 ops/s
Iteration  21: 1852156.410 ops/s
Iteration  22: 1855920.314 ops/s
Iteration  23: 1841499.160 ops/s
Iteration  24: 1845836.569 ops/s
Iteration  25: 1851208.530 ops/s
Iteration  26: 1859996.356 ops/s
Iteration  27: 1855382.829 ops/s
Iteration  28: 1863455.647 ops/s
Iteration  29: 1853348.323 ops/s
Iteration  30: 1852233.292 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_asyncFused":
  1850244.928 ±(99.9%) 6560.202 ops/s [Average]
  (min, avg, max) = (1828674.093, 1850244.928, 1879313.816), stdev = 9819.002
  CI (99.9%): [1843684.726, 1856805.129] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_asyncFused  thrpt   30  1850244.928 ± 6560.202  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_errorNotMatches$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_errorNotMatches

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 496512.410 ops/s
# Warmup Iteration   2: 669703.983 ops/s
# Warmup Iteration   3: 684974.839 ops/s
# Warmup Iteration   4: 728371.402 ops/s
# Warmup Iteration   5: 740252.301 ops/s
# Warmup Iteration   6: 743487.333 ops/s
# Warmup Iteration   7: 742744.928 ops/s
# Warmup Iteration   8: 739493.309 ops/s
# Warmup Iteration   9: 738046.323 ops/s
# Warmup Iteration  10: 746579.907 ops/s
# Warmup Iteration  11: 736578.155 ops/s
# Warmup Iteration  12: 734363.769 ops/s
# Warmup Iteration  13: 736438.615 ops/s
# Warmup Iteration  14: 737841.812 ops/s
# Warmup Iteration  15: 738185.248 ops/s
# Warmup Iteration  16: 737176.814 ops/s
# Warmup Iteration  17: 770242.670 ops/s
# Warmup Iteration  18: 766706.955 ops/s
# Warmup Iteration  19: 771520.390 ops/s
# Warmup Iteration  20: 767823.461 ops/s
# Warmup Iteration  21: 774188.844 ops/s
# Warmup Iteration  22: 766764.061 ops/s
# Warmup Iteration  23: 761776.388 ops/s
# Warmup Iteration  24: 768185.538 ops/s
# Warmup Iteration  25: 775004.437 ops/s
# Warmup Iteration  26: 765360.656 ops/s
# Warmup Iteration  27: 768958.524 ops/s
# Warmup Iteration  28: 766456.081 ops/s
# Warmup Iteration  29: 766905.620 ops/s
# Warmup Iteration  30: 769471.928 ops/s
Iteration   1: 764747.626 ops/s
Iteration   2: 773055.857 ops/s
Iteration   3: 773530.683 ops/s
Iteration   4: 765024.497 ops/s
Iteration   5: 765735.550 ops/s
Iteration   6: 771671.074 ops/s
Iteration   7: 766393.847 ops/s
Iteration   8: 771397.615 ops/s
Iteration   9: 770742.889 ops/s
Iteration  10: 766595.011 ops/s
Iteration  11: 770860.034 ops/s
Iteration  12: 770462.613 ops/s
Iteration  13: 766581.958 ops/s
Iteration  14: 753155.226 ops/s
Iteration  15: 768549.552 ops/s
Iteration  16: 770478.626 ops/s
Iteration  17: 762544.110 ops/s
Iteration  18: 768317.589 ops/s
Iteration  19: 770483.556 ops/s
Iteration  20: 771503.253 ops/s
Iteration  21: 766595.310 ops/s
Iteration  22: 768213.085 ops/s
Iteration  23: 766420.111 ops/s
Iteration  24: 761831.643 ops/s
Iteration  25: 766160.684 ops/s
Iteration  26: 766342.578 ops/s
Iteration  27: 770792.337 ops/s
Iteration  28: 768830.638 ops/s
Iteration  29: 761175.719 ops/s
Iteration  30: 766040.484 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_errorNotMatches":
  767474.459 ±(99.9%) 2797.638 ops/s [Average]
  (min, avg, max) = (753155.226, 767474.459, 773530.683), stdev = 4187.373
  CI (99.9%): [764676.820, 770272.097] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableOnErrorCompleteTest._Benchmark.benchmark_errorNotMatches  thrpt   30  767474.459 ± 2797.638  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundary$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundary

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1035151.201 ops/s
# Warmup Iteration   2: 1525089.651 ops/s
# Warmup Iteration   3: 1740305.557 ops/s
# Warmup Iteration   4: 1732414.456 ops/s
# Warmup Iteration   5: 1748748.397 ops/s
# Warmup Iteration   6: 1742275.611 ops/s
# Warmup Iteration   7: 1726369.873 ops/s
# Warmup Iteration   8: 1741224.973 ops/s
# Warmup Iteration   9: 1729950.468 ops/s
# Warmup Iteration  10: 1734755.305 ops/s
# Warmup Iteration  11: 1738163.753 ops/s
# Warmup Iteration  12: 1743321.348 ops/s
# Warmup Iteration  13: 1750603.627 ops/s
# Warmup Iteration  14: 1726778.371 ops/s
# Warmup Iteration  15: 1750013.660 ops/s
# Warmup Iteration  16: 1731814.778 ops/s
# Warmup Iteration  17: 1750503.082 ops/s
# Warmup Iteration  18: 1744333.623 ops/s
# Warmup Iteration  19: 1745914.348 ops/s
# Warmup Iteration  20: 1727769.721 ops/s
# Warmup Iteration  21: 1754528.309 ops/s
# Warmup Iteration  22: 1758995.180 ops/s
# Warmup Iteration  23: 1746586.269 ops/s
# Warmup Iteration  24: 1740026.804 ops/s
# Warmup Iteration  25: 1740723.449 ops/s
# Warmup Iteration  26: 1759343.710 ops/s
# Warmup Iteration  27: 1755052.627 ops/s
# Warmup Iteration  28: 1745038.273 ops/s
# Warmup Iteration  29: 1750152.007 ops/s
# Warmup Iteration  30: 1756463.382 ops/s
Iteration   1: 1743659.695 ops/s
Iteration   2: 1733029.272 ops/s
Iteration   3: 1735340.452 ops/s
Iteration   4: 1760351.910 ops/s
Iteration   5: 1734282.978 ops/s
Iteration   6: 1758478.006 ops/s
Iteration   7: 1762723.160 ops/s
Iteration   8: 1747400.478 ops/s
Iteration   9: 1751054.107 ops/s
Iteration  10: 1740161.303 ops/s
Iteration  11: 1750477.389 ops/s
Iteration  12: 1731549.749 ops/s
Iteration  13: 1754764.511 ops/s
Iteration  14: 1751849.747 ops/s
Iteration  15: 1745040.839 ops/s
Iteration  16: 1742162.462 ops/s
Iteration  17: 1742166.974 ops/s
Iteration  18: 1750501.713 ops/s
Iteration  19: 1750079.130 ops/s
Iteration  20: 1755603.489 ops/s
Iteration  21: 1751619.355 ops/s
Iteration  22: 1752281.856 ops/s
Iteration  23: 1767772.995 ops/s
Iteration  24: 1743539.754 ops/s
Iteration  25: 1722025.338 ops/s
Iteration  26: 1751621.473 ops/s
Iteration  27: 1757033.210 ops/s
Iteration  28: 1746219.836 ops/s
Iteration  29: 1738439.093 ops/s
Iteration  30: 1745576.037 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundary":
  1747226.877 ±(99.9%) 6702.340 ops/s [Average]
  (min, avg, max) = (1722025.338, 1747226.877, 1767772.995), stdev = 10031.748
  CI (99.9%): [1740524.537, 1753929.217] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundary  thrpt   30  1747226.877 ± 6702.340  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_asyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_asyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 731124.650 ops/s
# Warmup Iteration   2: 1166359.917 ops/s
# Warmup Iteration   3: 1363743.508 ops/s
# Warmup Iteration   4: 1373913.253 ops/s
# Warmup Iteration   5: 1366748.252 ops/s
# Warmup Iteration   6: 1352740.195 ops/s
# Warmup Iteration   7: 1354625.455 ops/s
# Warmup Iteration   8: 1370699.805 ops/s
# Warmup Iteration   9: 1378000.195 ops/s
# Warmup Iteration  10: 1376171.803 ops/s
# Warmup Iteration  11: 1370705.464 ops/s
# Warmup Iteration  12: 1369526.149 ops/s
# Warmup Iteration  13: 1344385.724 ops/s
# Warmup Iteration  14: 1374880.246 ops/s
# Warmup Iteration  15: 1354066.287 ops/s
# Warmup Iteration  16: 1363674.882 ops/s
# Warmup Iteration  17: 1359369.917 ops/s
# Warmup Iteration  18: 1383370.755 ops/s
# Warmup Iteration  19: 1371287.665 ops/s
# Warmup Iteration  20: 1361721.718 ops/s
# Warmup Iteration  21: 1375584.030 ops/s
# Warmup Iteration  22: 1366221.551 ops/s
# Warmup Iteration  23: 1361669.669 ops/s
# Warmup Iteration  24: 1352293.524 ops/s
# Warmup Iteration  25: 1352053.320 ops/s
# Warmup Iteration  26: 1374829.607 ops/s
# Warmup Iteration  27: 1359441.414 ops/s
# Warmup Iteration  28: 1366359.671 ops/s
# Warmup Iteration  29: 1368311.014 ops/s
# Warmup Iteration  30: 1370496.935 ops/s
Iteration   1: 1366553.928 ops/s
Iteration   2: 1363782.169 ops/s
Iteration   3: 1361624.350 ops/s
Iteration   4: 1369374.917 ops/s
Iteration   5: 1367933.974 ops/s
Iteration   6: 1361209.533 ops/s
Iteration   7: 1365378.136 ops/s
Iteration   8: 1356826.179 ops/s
Iteration   9: 1370960.552 ops/s
Iteration  10: 1371537.431 ops/s
Iteration  11: 1362025.345 ops/s
Iteration  12: 1355820.330 ops/s
Iteration  13: 1371510.768 ops/s
Iteration  14: 1371450.314 ops/s
Iteration  15: 1377590.004 ops/s
Iteration  16: 1355589.669 ops/s
Iteration  17: 1366099.084 ops/s
Iteration  18: 1341875.517 ops/s
Iteration  19: 1362381.878 ops/s
Iteration  20: 1367864.063 ops/s
Iteration  21: 1369405.720 ops/s
Iteration  22: 1363756.190 ops/s
Iteration  23: 1360790.807 ops/s
Iteration  24: 1375298.805 ops/s
Iteration  25: 1370358.074 ops/s
Iteration  26: 1371367.980 ops/s
Iteration  27: 1374349.887 ops/s
Iteration  28: 1356205.091 ops/s
Iteration  29: 1361493.736 ops/s
Iteration  30: 1352360.426 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_asyncFused":
  1364759.162 ±(99.9%) 5155.653 ops/s [Average]
  (min, avg, max) = (1341875.517, 1364759.162, 1377590.004), stdev = 7716.739
  CI (99.9%): [1359603.509, 1369914.815] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_asyncFused  thrpt   30  1364759.162 ± 5155.653  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_asyncFusedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_asyncFusedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1043532.025 ops/s
# Warmup Iteration   2: 1777568.973 ops/s
# Warmup Iteration   3: 2003441.251 ops/s
# Warmup Iteration   4: 2013069.475 ops/s
# Warmup Iteration   5: 2010647.652 ops/s
# Warmup Iteration   6: 2028412.841 ops/s
# Warmup Iteration   7: 2008846.562 ops/s
# Warmup Iteration   8: 2021419.936 ops/s
# Warmup Iteration   9: 2011828.650 ops/s
# Warmup Iteration  10: 2012350.642 ops/s
# Warmup Iteration  11: 2009688.754 ops/s
# Warmup Iteration  12: 2009435.345 ops/s
# Warmup Iteration  13: 2016628.890 ops/s
# Warmup Iteration  14: 2021428.975 ops/s
# Warmup Iteration  15: 2008048.844 ops/s
# Warmup Iteration  16: 2034839.489 ops/s
# Warmup Iteration  17: 2029337.258 ops/s
# Warmup Iteration  18: 2007685.474 ops/s
# Warmup Iteration  19: 2020697.182 ops/s
# Warmup Iteration  20: 2013743.958 ops/s
# Warmup Iteration  21: 2008083.588 ops/s
# Warmup Iteration  22: 2012817.877 ops/s
# Warmup Iteration  23: 2029603.459 ops/s
# Warmup Iteration  24: 2016926.571 ops/s
# Warmup Iteration  25: 2014204.151 ops/s
# Warmup Iteration  26: 2019194.751 ops/s
# Warmup Iteration  27: 2003619.346 ops/s
# Warmup Iteration  28: 2013165.550 ops/s
# Warmup Iteration  29: 2021620.430 ops/s
# Warmup Iteration  30: 2025607.940 ops/s
Iteration   1: 2018504.297 ops/s
Iteration   2: 2020937.753 ops/s
Iteration   3: 2027235.716 ops/s
Iteration   4: 2021375.324 ops/s
Iteration   5: 2014295.290 ops/s
Iteration   6: 2004470.503 ops/s
Iteration   7: 2001072.309 ops/s
Iteration   8: 2014415.712 ops/s
Iteration   9: 2006056.412 ops/s
Iteration  10: 2020030.872 ops/s
Iteration  11: 2027120.227 ops/s
Iteration  12: 2036368.101 ops/s
Iteration  13: 2024247.368 ops/s
Iteration  14: 2020778.275 ops/s
Iteration  15: 2006259.717 ops/s
Iteration  16: 2036806.403 ops/s
Iteration  17: 2015091.743 ops/s
Iteration  18: 2020080.297 ops/s
Iteration  19: 2027026.851 ops/s
Iteration  20: 2023096.534 ops/s
Iteration  21: 2023472.475 ops/s
Iteration  22: 2007439.173 ops/s
Iteration  23: 2033339.814 ops/s
Iteration  24: 2024715.594 ops/s
Iteration  25: 2029950.152 ops/s
Iteration  26: 2009513.673 ops/s
Iteration  27: 2016705.239 ops/s
Iteration  28: 2022372.215 ops/s
Iteration  29: 2015022.080 ops/s
Iteration  30: 2025815.253 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_asyncFusedConditional":
  2019787.179 ±(99.9%) 6152.470 ops/s [Average]
  (min, avg, max) = (2001072.309, 2019787.179, 2036806.403), stdev = 9208.729
  CI (99.9%): [2013634.709, 2025939.649] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_asyncFusedConditional  thrpt   30  2019787.179 ± 6152.470  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_noReuse$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_noReuse

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 472795.031 ops/s
# Warmup Iteration   2: 620313.208 ops/s
# Warmup Iteration   3: 622203.826 ops/s
# Warmup Iteration   4: 692078.154 ops/s
# Warmup Iteration   5: 701449.081 ops/s
# Warmup Iteration   6: 702080.335 ops/s
# Warmup Iteration   7: 707058.685 ops/s
# Warmup Iteration   8: 704215.885 ops/s
# Warmup Iteration   9: 702052.913 ops/s
# Warmup Iteration  10: 700091.857 ops/s
# Warmup Iteration  11: 697972.963 ops/s
# Warmup Iteration  12: 702289.488 ops/s
# Warmup Iteration  13: 703304.506 ops/s
# Warmup Iteration  14: 698350.052 ops/s
# Warmup Iteration  15: 697175.065 ops/s
# Warmup Iteration  16: 695680.846 ops/s
# Warmup Iteration  17: 728475.510 ops/s
# Warmup Iteration  18: 727350.097 ops/s
# Warmup Iteration  19: 723847.770 ops/s
# Warmup Iteration  20: 725667.558 ops/s
# Warmup Iteration  21: 723718.132 ops/s
# Warmup Iteration  22: 729398.482 ops/s
# Warmup Iteration  23: 728640.628 ops/s
# Warmup Iteration  24: 722761.247 ops/s
# Warmup Iteration  25: 723442.932 ops/s
# Warmup Iteration  26: 729737.616 ops/s
# Warmup Iteration  27: 715661.621 ops/s
# Warmup Iteration  28: 725892.730 ops/s
# Warmup Iteration  29: 726110.521 ops/s
# Warmup Iteration  30: 724430.592 ops/s
Iteration   1: 725507.145 ops/s
Iteration   2: 726809.162 ops/s
Iteration   3: 728496.168 ops/s
Iteration   4: 727045.375 ops/s
Iteration   5: 722794.442 ops/s
Iteration   6: 726606.589 ops/s
Iteration   7: 730180.124 ops/s
Iteration   8: 727770.645 ops/s
Iteration   9: 731973.181 ops/s
Iteration  10: 732849.721 ops/s
Iteration  11: 720258.007 ops/s
Iteration  12: 732012.713 ops/s
Iteration  13: 727099.560 ops/s
Iteration  14: 727533.874 ops/s
Iteration  15: 726735.274 ops/s
Iteration  16: 729834.207 ops/s
Iteration  17: 732490.714 ops/s
Iteration  18: 730485.440 ops/s
Iteration  19: 725485.187 ops/s
Iteration  20: 729915.141 ops/s
Iteration  21: 720098.197 ops/s
Iteration  22: 727600.088 ops/s
Iteration  23: 726832.721 ops/s
Iteration  24: 726207.344 ops/s
Iteration  25: 727179.289 ops/s
Iteration  26: 724567.432 ops/s
Iteration  27: 729970.806 ops/s
Iteration  28: 730553.907 ops/s
Iteration  29: 731542.400 ops/s
Iteration  30: 727478.063 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_noReuse":
  727797.097 ±(99.9%) 2155.785 ops/s [Average]
  (min, avg, max) = (720098.197, 727797.097, 732849.721), stdev = 3226.678
  CI (99.9%): [725641.312, 729952.883] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FlowableFromStreamTest._Benchmark.benchmark_noReuse  thrpt   30  727797.097 ± 2155.785  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 448893.708 ops/s
# Warmup Iteration   2: 627324.950 ops/s
# Warmup Iteration   3: 706972.439 ops/s
# Warmup Iteration   4: 736202.893 ops/s
# Warmup Iteration   5: 731428.010 ops/s
# Warmup Iteration   6: 730661.845 ops/s
# Warmup Iteration   7: 732437.242 ops/s
# Warmup Iteration   8: 734189.924 ops/s
# Warmup Iteration   9: 730243.003 ops/s
# Warmup Iteration  10: 732515.982 ops/s
# Warmup Iteration  11: 721939.920 ops/s
# Warmup Iteration  12: 733624.612 ops/s
# Warmup Iteration  13: 730288.447 ops/s
# Warmup Iteration  14: 727982.747 ops/s
# Warmup Iteration  15: 719922.214 ops/s
# Warmup Iteration  16: 728996.280 ops/s
# Warmup Iteration  17: 748563.120 ops/s
# Warmup Iteration  18: 770282.116 ops/s
# Warmup Iteration  19: 765895.169 ops/s
# Warmup Iteration  20: 762497.840 ops/s
# Warmup Iteration  21: 762883.203 ops/s
# Warmup Iteration  22: 765543.671 ops/s
# Warmup Iteration  23: 766841.073 ops/s
# Warmup Iteration  24: 762479.721 ops/s
# Warmup Iteration  25: 768253.037 ops/s
# Warmup Iteration  26: 760041.639 ops/s
# Warmup Iteration  27: 764299.987 ops/s
# Warmup Iteration  28: 761911.576 ops/s
# Warmup Iteration  29: 763160.415 ops/s
# Warmup Iteration  30: 759780.353 ops/s
Iteration   1: 761903.068 ops/s
Iteration   2: 763589.752 ops/s
Iteration   3: 763215.541 ops/s
Iteration   4: 762782.022 ops/s
Iteration   5: 764850.077 ops/s
Iteration   6: 769718.177 ops/s
Iteration   7: 759946.556 ops/s
Iteration   8: 764880.605 ops/s
Iteration   9: 764570.808 ops/s
Iteration  10: 769395.961 ops/s
Iteration  11: 760345.744 ops/s
Iteration  12: 764384.127 ops/s
Iteration  13: 764025.573 ops/s
Iteration  14: 767459.642 ops/s
Iteration  15: 767883.514 ops/s
Iteration  16: 764950.587 ops/s
Iteration  17: 763755.922 ops/s
Iteration  18: 761654.514 ops/s
Iteration  19: 762987.613 ops/s
Iteration  20: 766258.933 ops/s
Iteration  21: 768816.268 ops/s
Iteration  22: 767988.734 ops/s
Iteration  23: 765070.590 ops/s
Iteration  24: 760604.769 ops/s
Iteration  25: 764175.649 ops/s
Iteration  26: 767983.238 ops/s
Iteration  27: 761608.293 ops/s
Iteration  28: 766032.582 ops/s
Iteration  29: 764756.029 ops/s
Iteration  30: 760766.842 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError":
  764545.391 ±(99.9%) 1838.127 ops/s [Average]
  (min, avg, max) = (759946.556, 764545.391, 769718.177), stdev = 2751.223
  CI (99.9%): [762707.264, 766383.518] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerCompleteDelayError  thrpt   30  764545.391 ± 1838.127  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 406073.793 ops/s
# Warmup Iteration   2: 629039.871 ops/s
# Warmup Iteration   3: 687285.653 ops/s
# Warmup Iteration   4: 648820.939 ops/s
# Warmup Iteration   5: 722264.315 ops/s
# Warmup Iteration   6: 719120.702 ops/s
# Warmup Iteration   7: 719271.749 ops/s
# Warmup Iteration   8: 721578.664 ops/s
# Warmup Iteration   9: 722596.787 ops/s
# Warmup Iteration  10: 722281.767 ops/s
# Warmup Iteration  11: 720449.515 ops/s
# Warmup Iteration  12: 717647.864 ops/s
# Warmup Iteration  13: 718412.375 ops/s
# Warmup Iteration  14: 718881.206 ops/s
# Warmup Iteration  15: 718160.041 ops/s
# Warmup Iteration  16: 715851.118 ops/s
# Warmup Iteration  17: 744861.419 ops/s
# Warmup Iteration  18: 746719.289 ops/s
# Warmup Iteration  19: 743220.429 ops/s
# Warmup Iteration  20: 744559.263 ops/s
# Warmup Iteration  21: 745756.622 ops/s
# Warmup Iteration  22: 743119.783 ops/s
# Warmup Iteration  23: 743324.379 ops/s
# Warmup Iteration  24: 745345.039 ops/s
# Warmup Iteration  25: 743451.842 ops/s
# Warmup Iteration  26: 743931.421 ops/s
# Warmup Iteration  27: 746658.526 ops/s
# Warmup Iteration  28: 740886.433 ops/s
# Warmup Iteration  29: 741861.988 ops/s
# Warmup Iteration  30: 747018.803 ops/s
Iteration   1: 746729.843 ops/s
Iteration   2: 746750.989 ops/s
Iteration   3: 742630.151 ops/s
Iteration   4: 741174.112 ops/s
Iteration   5: 748093.975 ops/s
Iteration   6: 747435.330 ops/s
Iteration   7: 742464.424 ops/s
Iteration   8: 739434.142 ops/s
Iteration   9: 735077.269 ops/s
Iteration  10: 747381.549 ops/s
Iteration  11: 747035.199 ops/s
Iteration  12: 743178.179 ops/s
Iteration  13: 745989.706 ops/s
Iteration  14: 748526.373 ops/s
Iteration  15: 750843.836 ops/s
Iteration  16: 748838.741 ops/s
Iteration  17: 750983.029 ops/s
Iteration  18: 746540.557 ops/s
Iteration  19: 745895.875 ops/s
Iteration  20: 746207.822 ops/s
Iteration  21: 743183.815 ops/s
Iteration  22: 748333.594 ops/s
Iteration  23: 741302.674 ops/s
Iteration  24: 745659.256 ops/s
Iteration  25: 747760.218 ops/s
Iteration  26: 748188.190 ops/s
Iteration  27: 745100.858 ops/s
Iteration  28: 745677.872 ops/s
Iteration  29: 742930.422 ops/s
Iteration  30: 742891.433 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError":
  745407.981 ±(99.9%) 2301.253 ops/s [Average]
  (min, avg, max) = (735077.269, 745407.981, 750983.029), stdev = 3444.408
  CI (99.9%): [743106.728, 747709.234] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_mainErrorInnerSuccessDelayError  thrpt   30  745407.981 ± 2301.253  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchOnNextTest._Benchmark.benchmark_delaySwitch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchOnNextTest._Benchmark.benchmark_delaySwitch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 431539.260 ops/s
# Warmup Iteration   2: 599901.919 ops/s
# Warmup Iteration   3: 657930.490 ops/s
# Warmup Iteration   4: 651231.722 ops/s
# Warmup Iteration   5: 700068.009 ops/s
# Warmup Iteration   6: 700389.180 ops/s
# Warmup Iteration   7: 703023.766 ops/s
# Warmup Iteration   8: 702026.025 ops/s
# Warmup Iteration   9: 698508.984 ops/s
# Warmup Iteration  10: 697336.597 ops/s
# Warmup Iteration  11: 700687.339 ops/s
# Warmup Iteration  12: 700764.536 ops/s
# Warmup Iteration  13: 695186.213 ops/s
# Warmup Iteration  14: 695307.486 ops/s
# Warmup Iteration  15: 697624.565 ops/s
# Warmup Iteration  16: 693418.152 ops/s
# Warmup Iteration  17: 720795.958 ops/s
# Warmup Iteration  18: 727907.437 ops/s
# Warmup Iteration  19: 724957.548 ops/s
# Warmup Iteration  20: 725995.433 ops/s
# Warmup Iteration  21: 718827.064 ops/s
# Warmup Iteration  22: 727334.291 ops/s
# Warmup Iteration  23: 725020.438 ops/s
# Warmup Iteration  24: 727216.418 ops/s
# Warmup Iteration  25: 722634.707 ops/s
# Warmup Iteration  26: 722958.898 ops/s
# Warmup Iteration  27: 721213.878 ops/s
# Warmup Iteration  28: 722189.688 ops/s
# Warmup Iteration  29: 716344.626 ops/s
# Warmup Iteration  30: 726805.444 ops/s
Iteration   1: 727087.642 ops/s
Iteration   2: 726055.671 ops/s
Iteration   3: 725519.406 ops/s
Iteration   4: 723598.054 ops/s
Iteration   5: 721193.817 ops/s
Iteration   6: 723645.748 ops/s
Iteration   7: 726127.218 ops/s
Iteration   8: 723870.445 ops/s
Iteration   9: 723343.684 ops/s
Iteration  10: 721183.718 ops/s
Iteration  11: 722620.492 ops/s
Iteration  12: 725540.456 ops/s
Iteration  13: 725046.812 ops/s
Iteration  14: 726390.740 ops/s
Iteration  15: 726177.301 ops/s
Iteration  16: 720769.672 ops/s
Iteration  17: 722512.709 ops/s
Iteration  18: 730257.177 ops/s
Iteration  19: 724103.803 ops/s
Iteration  20: 727512.058 ops/s
Iteration  21: 718362.556 ops/s
Iteration  22: 730772.702 ops/s
Iteration  23: 723514.625 ops/s
Iteration  24: 723693.453 ops/s
Iteration  25: 726662.576 ops/s
Iteration  26: 723617.346 ops/s
Iteration  27: 722901.357 ops/s
Iteration  28: 722588.899 ops/s
Iteration  29: 720569.600 ops/s
Iteration  30: 724400.637 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchOnNextTest._Benchmark.benchmark_delaySwitch":
  724321.346 ±(99.9%) 1816.407 ops/s [Average]
  (min, avg, max) = (718362.556, 724321.346, 730772.702), stdev = 2718.712
  CI (99.9%): [722504.939, 726137.753] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
MaybeSwitchOnNextTest._Benchmark.benchmark_delaySwitch  thrpt   30  724321.346 ± 1816.407  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_switchOverDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_switchOverDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 404346.167 ops/s
# Warmup Iteration   2: 573238.350 ops/s
# Warmup Iteration   3: 658291.523 ops/s
# Warmup Iteration   4: 682311.002 ops/s
# Warmup Iteration   5: 679959.171 ops/s
# Warmup Iteration   6: 680851.479 ops/s
# Warmup Iteration   7: 683073.104 ops/s
# Warmup Iteration   8: 686267.755 ops/s
# Warmup Iteration   9: 684666.551 ops/s
# Warmup Iteration  10: 685560.033 ops/s
# Warmup Iteration  11: 679397.169 ops/s
# Warmup Iteration  12: 683555.738 ops/s
# Warmup Iteration  13: 678774.913 ops/s
# Warmup Iteration  14: 680084.210 ops/s
# Warmup Iteration  15: 677969.394 ops/s
# Warmup Iteration  16: 684413.013 ops/s
# Warmup Iteration  17: 712535.919 ops/s
# Warmup Iteration  18: 712439.148 ops/s
# Warmup Iteration  19: 712456.010 ops/s
# Warmup Iteration  20: 705201.818 ops/s
# Warmup Iteration  21: 709473.608 ops/s
# Warmup Iteration  22: 713735.615 ops/s
# Warmup Iteration  23: 708688.349 ops/s
# Warmup Iteration  24: 711362.271 ops/s
# Warmup Iteration  25: 710942.982 ops/s
# Warmup Iteration  26: 709615.125 ops/s
# Warmup Iteration  27: 711413.525 ops/s
# Warmup Iteration  28: 709108.502 ops/s
# Warmup Iteration  29: 710608.978 ops/s
# Warmup Iteration  30: 706717.559 ops/s
Iteration   1: 713916.604 ops/s
Iteration   2: 705784.345 ops/s
Iteration   3: 705808.241 ops/s
Iteration   4: 707427.306 ops/s
Iteration   5: 706770.433 ops/s
Iteration   6: 712874.968 ops/s
Iteration   7: 709914.263 ops/s
Iteration   8: 711269.952 ops/s
Iteration   9: 706463.936 ops/s
Iteration  10: 711458.990 ops/s
Iteration  11: 708707.412 ops/s
Iteration  12: 716107.137 ops/s
Iteration  13: 713392.135 ops/s
Iteration  14: 709085.110 ops/s
Iteration  15: 709966.176 ops/s
Iteration  16: 708486.550 ops/s
Iteration  17: 703320.691 ops/s
Iteration  18: 714486.342 ops/s
Iteration  19: 710336.020 ops/s
Iteration  20: 709091.042 ops/s
Iteration  21: 712908.952 ops/s
Iteration  22: 705499.671 ops/s
Iteration  23: 709484.409 ops/s
Iteration  24: 709761.823 ops/s
Iteration  25: 710132.831 ops/s
Iteration  26: 698884.363 ops/s
Iteration  27: 712735.107 ops/s
Iteration  28: 708881.406 ops/s
Iteration  29: 701351.906 ops/s
Iteration  30: 711351.844 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_switchOverDelayError":
  709188.665 ±(99.9%) 2571.915 ops/s [Average]
  (min, avg, max) = (698884.363, 709188.665, 716107.137), stdev = 3849.522
  CI (99.9%): [706616.750, 711760.580] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_switchOverDelayError  thrpt   30  709188.665 ± 2571.915  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_innerErrorAfterTermination$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_innerErrorAfterTermination

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 134136.923 ops/s
# Warmup Iteration   2: 194746.834 ops/s
# Warmup Iteration   3: 219311.057 ops/s
# Warmup Iteration   4: 224508.732 ops/s
# Warmup Iteration   5: 233741.880 ops/s
# Warmup Iteration   6: 232171.217 ops/s
# Warmup Iteration   7: 231279.189 ops/s
# Warmup Iteration   8: 231579.032 ops/s
# Warmup Iteration   9: 232435.489 ops/s
# Warmup Iteration  10: 229987.858 ops/s
# Warmup Iteration  11: 224082.491 ops/s
# Warmup Iteration  12: 231327.528 ops/s
# Warmup Iteration  13: 230681.722 ops/s
# Warmup Iteration  14: 230295.582 ops/s
# Warmup Iteration  15: 232049.398 ops/s
# Warmup Iteration  16: 230717.293 ops/s
# Warmup Iteration  17: 242429.722 ops/s
# Warmup Iteration  18: 238985.336 ops/s
# Warmup Iteration  19: 240657.224 ops/s
# Warmup Iteration  20: 241529.994 ops/s
# Warmup Iteration  21: 241247.850 ops/s
# Warmup Iteration  22: 240839.338 ops/s
# Warmup Iteration  23: 240018.824 ops/s
# Warmup Iteration  24: 240345.846 ops/s
# Warmup Iteration  25: 241237.703 ops/s
# Warmup Iteration  26: 239202.237 ops/s
# Warmup Iteration  27: 240744.709 ops/s
# Warmup Iteration  28: 240757.898 ops/s
# Warmup Iteration  29: 238871.766 ops/s
# Warmup Iteration  30: 239830.678 ops/s
Iteration   1: 239839.466 ops/s
Iteration   2: 239615.582 ops/s
Iteration   3: 240666.758 ops/s
Iteration   4: 240776.185 ops/s
Iteration   5: 241115.973 ops/s
Iteration   6: 240006.575 ops/s
Iteration   7: 240514.723 ops/s
Iteration   8: 240464.055 ops/s
Iteration   9: 241716.209 ops/s
Iteration  10: 241088.684 ops/s
Iteration  11: 239445.083 ops/s
Iteration  12: 242766.232 ops/s
Iteration  13: 239541.142 ops/s
Iteration  14: 239221.691 ops/s
Iteration  15: 242975.353 ops/s
Iteration  16: 241120.944 ops/s
Iteration  17: 236993.084 ops/s
Iteration  18: 238758.065 ops/s
Iteration  19: 240595.620 ops/s
Iteration  20: 240665.677 ops/s
Iteration  21: 240836.605 ops/s
Iteration  22: 241656.939 ops/s
Iteration  23: 241158.236 ops/s
Iteration  24: 241263.914 ops/s
Iteration  25: 240323.414 ops/s
Iteration  26: 240268.308 ops/s
Iteration  27: 241664.492 ops/s
Iteration  28: 240745.664 ops/s
Iteration  29: 241448.304 ops/s
Iteration  30: 240148.652 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_innerErrorAfterTermination":
  240580.054 ±(99.9%) 777.343 ops/s [Average]
  (min, avg, max) = (236993.084, 240580.054, 242975.353), stdev = 1163.490
  CI (99.9%): [239802.712, 241357.397] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_innerErrorAfterTermination  thrpt   30  240580.054 ± 777.343  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 550253.612 ops/s
# Warmup Iteration   2: 730533.624 ops/s
# Warmup Iteration   3: 814179.221 ops/s
# Warmup Iteration   4: 780089.999 ops/s
# Warmup Iteration   5: 848510.988 ops/s
# Warmup Iteration   6: 846368.175 ops/s
# Warmup Iteration   7: 843360.647 ops/s
# Warmup Iteration   8: 843626.315 ops/s
# Warmup Iteration   9: 845179.139 ops/s
# Warmup Iteration  10: 839760.764 ops/s
# Warmup Iteration  11: 841482.930 ops/s
# Warmup Iteration  12: 844387.490 ops/s
# Warmup Iteration  13: 841831.943 ops/s
# Warmup Iteration  14: 845913.560 ops/s
# Warmup Iteration  15: 844609.247 ops/s
# Warmup Iteration  16: 840595.393 ops/s
# Warmup Iteration  17: 887036.751 ops/s
# Warmup Iteration  18: 884884.099 ops/s
# Warmup Iteration  19: 881706.322 ops/s
# Warmup Iteration  20: 884886.336 ops/s
# Warmup Iteration  21: 881909.384 ops/s
# Warmup Iteration  22: 890665.374 ops/s
# Warmup Iteration  23: 885543.470 ops/s
# Warmup Iteration  24: 886274.885 ops/s
# Warmup Iteration  25: 885962.017 ops/s
# Warmup Iteration  26: 891188.876 ops/s
# Warmup Iteration  27: 882695.473 ops/s
# Warmup Iteration  28: 890285.573 ops/s
# Warmup Iteration  29: 883643.253 ops/s
# Warmup Iteration  30: 887706.823 ops/s
Iteration   1: 885282.923 ops/s
Iteration   2: 887966.415 ops/s
Iteration   3: 878289.857 ops/s
Iteration   4: 885162.314 ops/s
Iteration   5: 888783.564 ops/s
Iteration   6: 884509.801 ops/s
Iteration   7: 887212.015 ops/s
Iteration   8: 889814.426 ops/s
Iteration   9: 881565.298 ops/s
Iteration  10: 884128.615 ops/s
Iteration  11: 886758.084 ops/s
Iteration  12: 886065.924 ops/s
Iteration  13: 880584.507 ops/s
Iteration  14: 884189.596 ops/s
Iteration  15: 884801.985 ops/s
Iteration  16: 880324.589 ops/s
Iteration  17: 888987.788 ops/s
Iteration  18: 885329.408 ops/s
Iteration  19: 887077.652 ops/s
Iteration  20: 880823.791 ops/s
Iteration  21: 888910.217 ops/s
Iteration  22: 883234.639 ops/s
Iteration  23: 885322.797 ops/s
Iteration  24: 881182.311 ops/s
Iteration  25: 884893.958 ops/s
Iteration  26: 881895.029 ops/s
Iteration  27: 879787.594 ops/s
Iteration  28: 886311.621 ops/s
Iteration  29: 885201.085 ops/s
Iteration  30: 883027.116 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_otherError":
  884580.831 ±(99.9%) 2013.731 ops/s [Average]
  (min, avg, max) = (878289.857, 884580.831, 889814.426), stdev = 3014.058
  CI (99.9%): [882567.100, 886594.561] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_otherError  thrpt   30  884580.831 ± 2013.731  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeCompleteDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeCompleteDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2148059.313 ops/s
# Warmup Iteration   2: 2961049.164 ops/s
# Warmup Iteration   3: 3552293.648 ops/s
# Warmup Iteration   4: 3573868.046 ops/s
# Warmup Iteration   5: 3580347.907 ops/s
# Warmup Iteration   6: 3554175.032 ops/s
# Warmup Iteration   7: 3547240.381 ops/s
# Warmup Iteration   8: 3547286.889 ops/s
# Warmup Iteration   9: 3572264.734 ops/s
# Warmup Iteration  10: 3535401.652 ops/s
# Warmup Iteration  11: 3575777.135 ops/s
# Warmup Iteration  12: 3574274.914 ops/s
# Warmup Iteration  13: 3567583.512 ops/s
# Warmup Iteration  14: 3570749.040 ops/s
# Warmup Iteration  15: 3551822.642 ops/s
# Warmup Iteration  16: 3551728.120 ops/s
# Warmup Iteration  17: 3563371.184 ops/s
# Warmup Iteration  18: 3551628.776 ops/s
# Warmup Iteration  19: 3566348.715 ops/s
# Warmup Iteration  20: 3557288.729 ops/s
# Warmup Iteration  21: 3565796.031 ops/s
# Warmup Iteration  22: 3531929.711 ops/s
# Warmup Iteration  23: 3544381.421 ops/s
# Warmup Iteration  24: 3560842.425 ops/s
# Warmup Iteration  25: 3577521.766 ops/s
# Warmup Iteration  26: 3553520.329 ops/s
# Warmup Iteration  27: 3567388.039 ops/s
# Warmup Iteration  28: 3550636.129 ops/s
# Warmup Iteration  29: 3508985.244 ops/s
# Warmup Iteration  30: 3568522.686 ops/s
Iteration   1: 3557845.213 ops/s
Iteration   2: 3558581.479 ops/s
Iteration   3: 3500496.936 ops/s
Iteration   4: 3576482.948 ops/s
Iteration   5: 3574025.034 ops/s
Iteration   6: 3562421.274 ops/s
Iteration   7: 3548719.519 ops/s
Iteration   8: 3564415.948 ops/s
Iteration   9: 3584459.931 ops/s
Iteration  10: 3557768.266 ops/s
Iteration  11: 3566889.512 ops/s
Iteration  12: 3528942.197 ops/s
Iteration  13: 3562612.622 ops/s
Iteration  14: 3567902.695 ops/s
Iteration  15: 3571341.211 ops/s
Iteration  16: 3564118.591 ops/s
Iteration  17: 3563082.367 ops/s
Iteration  18: 3557371.486 ops/s
Iteration  19: 3534218.571 ops/s
Iteration  20: 3580242.735 ops/s
Iteration  21: 3548635.639 ops/s
Iteration  22: 3577521.583 ops/s
Iteration  23: 3544348.470 ops/s
Iteration  24: 3567387.433 ops/s
Iteration  25: 3590015.739 ops/s
Iteration  26: 3570767.572 ops/s
Iteration  27: 3586392.752 ops/s
Iteration  28: 3565411.524 ops/s
Iteration  29: 3584266.791 ops/s
Iteration  30: 3565106.728 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeCompleteDelayError":
  3562726.426 ±(99.9%) 12381.532 ops/s [Average]
  (min, avg, max) = (3500496.936, 3562726.426, 3590015.739), stdev = 18532.095
  CI (99.9%): [3550344.894, 3575107.957] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeCompleteDelayError  thrpt   30  3562726.426 ± 12381.532  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 701790.798 ops/s
# Warmup Iteration   2: 830775.020 ops/s
# Warmup Iteration   3: 939008.633 ops/s
# Warmup Iteration   4: 934354.178 ops/s
# Warmup Iteration   5: 941945.616 ops/s
# Warmup Iteration   6: 925507.982 ops/s
# Warmup Iteration   7: 936139.655 ops/s
# Warmup Iteration   8: 940134.579 ops/s
# Warmup Iteration   9: 936556.021 ops/s
# Warmup Iteration  10: 936240.418 ops/s
# Warmup Iteration  11: 931338.057 ops/s
# Warmup Iteration  12: 928431.614 ops/s
# Warmup Iteration  13: 934565.667 ops/s
# Warmup Iteration  14: 930100.922 ops/s
# Warmup Iteration  15: 930512.839 ops/s
# Warmup Iteration  16: 927296.873 ops/s
# Warmup Iteration  17: 981385.546 ops/s
# Warmup Iteration  18: 985444.655 ops/s
# Warmup Iteration  19: 985187.472 ops/s
# Warmup Iteration  20: 980981.743 ops/s
# Warmup Iteration  21: 987023.770 ops/s
# Warmup Iteration  22: 991235.060 ops/s
# Warmup Iteration  23: 978523.868 ops/s
# Warmup Iteration  24: 983917.242 ops/s
# Warmup Iteration  25: 986610.587 ops/s
# Warmup Iteration  26: 983833.676 ops/s
# Warmup Iteration  27: 987773.712 ops/s
# Warmup Iteration  28: 980526.450 ops/s
# Warmup Iteration  29: 978203.692 ops/s
# Warmup Iteration  30: 983687.316 ops/s
Iteration   1: 991472.166 ops/s
Iteration   2: 986294.649 ops/s
Iteration   3: 989688.097 ops/s
Iteration   4: 988630.060 ops/s
Iteration   5: 988845.227 ops/s
Iteration   6: 983826.566 ops/s
Iteration   7: 989029.308 ops/s
Iteration   8: 987957.176 ops/s
Iteration   9: 987757.576 ops/s
Iteration  10: 995849.088 ops/s
Iteration  11: 985204.462 ops/s
Iteration  12: 985629.569 ops/s
Iteration  13: 990346.113 ops/s
Iteration  14: 985378.682 ops/s
Iteration  15: 988884.846 ops/s
Iteration  16: 982879.087 ops/s
Iteration  17: 988116.536 ops/s
Iteration  18: 987482.565 ops/s
Iteration  19: 984431.836 ops/s
Iteration  20: 984243.596 ops/s
Iteration  21: 989422.362 ops/s
Iteration  22: 983852.893 ops/s
Iteration  23: 983297.922 ops/s
Iteration  24: 975992.041 ops/s
Iteration  25: 985289.952 ops/s
Iteration  26: 980410.360 ops/s
Iteration  27: 987517.436 ops/s
Iteration  28: 987560.210 ops/s
Iteration  29: 984882.984 ops/s
Iteration  30: 992038.239 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_mainError":
  986740.387 ±(99.9%) 2507.015 ops/s [Average]
  (min, avg, max) = (975992.041, 986740.387, 995849.088), stdev = 3752.382
  CI (99.9%): [984233.372, 989247.402] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
MaybeDelaySubscriptionTest._Benchmark.benchmark_mainError  thrpt   30  986740.387 ± 2507.015  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 146443.280 ops/s
# Warmup Iteration   2: 214574.255 ops/s
# Warmup Iteration   3: 208600.393 ops/s
# Warmup Iteration   4: 232527.594 ops/s
# Warmup Iteration   5: 237839.169 ops/s
# Warmup Iteration   6: 233825.439 ops/s
# Warmup Iteration   7: 239569.881 ops/s
# Warmup Iteration   8: 237664.054 ops/s
# Warmup Iteration   9: 238115.097 ops/s
# Warmup Iteration  10: 237718.223 ops/s
# Warmup Iteration  11: 239461.043 ops/s
# Warmup Iteration  12: 238070.598 ops/s
# Warmup Iteration  13: 236666.219 ops/s
# Warmup Iteration  14: 236275.649 ops/s
# Warmup Iteration  15: 235996.371 ops/s
# Warmup Iteration  16: 237026.572 ops/s
# Warmup Iteration  17: 256574.031 ops/s
# Warmup Iteration  18: 254261.004 ops/s
# Warmup Iteration  19: 255503.985 ops/s
# Warmup Iteration  20: 255968.040 ops/s
# Warmup Iteration  21: 256583.797 ops/s
# Warmup Iteration  22: 256227.203 ops/s
# Warmup Iteration  23: 255961.647 ops/s
# Warmup Iteration  24: 254864.469 ops/s
# Warmup Iteration  25: 254572.418 ops/s
# Warmup Iteration  26: 255121.809 ops/s
# Warmup Iteration  27: 256578.503 ops/s
# Warmup Iteration  28: 253375.782 ops/s
# Warmup Iteration  29: 254064.360 ops/s
# Warmup Iteration  30: 255439.044 ops/s
Iteration   1: 254947.229 ops/s
Iteration   2: 254700.794 ops/s
Iteration   3: 253997.140 ops/s
Iteration   4: 254430.153 ops/s
Iteration   5: 254936.383 ops/s
Iteration   6: 253027.896 ops/s
Iteration   7: 256237.750 ops/s
Iteration   8: 255944.546 ops/s
Iteration   9: 254765.420 ops/s
Iteration  10: 251977.054 ops/s
Iteration  11: 255133.697 ops/s
Iteration  12: 254341.736 ops/s
Iteration  13: 254676.308 ops/s
Iteration  14: 255486.994 ops/s
Iteration  15: 255975.836 ops/s
Iteration  16: 255354.795 ops/s
Iteration  17: 255288.401 ops/s
Iteration  18: 255055.889 ops/s
Iteration  19: 254013.575 ops/s
Iteration  20: 255558.141 ops/s
Iteration  21: 254712.749 ops/s
Iteration  22: 255550.117 ops/s
Iteration  23: 252484.040 ops/s
Iteration  24: 253975.482 ops/s
Iteration  25: 254951.840 ops/s
Iteration  26: 256336.484 ops/s
Iteration  27: 256248.741 ops/s
Iteration  28: 257791.704 ops/s
Iteration  29: 255286.008 ops/s
Iteration  30: 254142.298 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  254910.973 ±(99.9%) 781.332 ops/s [Average]
  (min, avg, max) = (251977.054, 254910.973, 257791.704), stdev = 1169.461
  CI (99.9%): [254129.641, 255692.305] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score     Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  254910.973 ± 781.332  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSources$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSources

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 809020.792 ops/s
# Warmup Iteration   2: 1384993.969 ops/s
# Warmup Iteration   3: 1593257.840 ops/s
# Warmup Iteration   4: 1648075.504 ops/s
# Warmup Iteration   5: 1787920.873 ops/s
# Warmup Iteration   6: 1802413.884 ops/s
# Warmup Iteration   7: 1794250.965 ops/s
# Warmup Iteration   8: 1801644.247 ops/s
# Warmup Iteration   9: 1789589.895 ops/s
# Warmup Iteration  10: 1791917.213 ops/s
# Warmup Iteration  11: 1775048.032 ops/s
# Warmup Iteration  12: 1793685.714 ops/s
# Warmup Iteration  13: 1801808.797 ops/s
# Warmup Iteration  14: 1797209.620 ops/s
# Warmup Iteration  15: 1815831.715 ops/s
# Warmup Iteration  16: 1780663.243 ops/s
# Warmup Iteration  17: 1814477.853 ops/s
# Warmup Iteration  18: 1798417.522 ops/s
# Warmup Iteration  19: 1825332.742 ops/s
# Warmup Iteration  20: 1820301.471 ops/s
# Warmup Iteration  21: 1791504.033 ops/s
# Warmup Iteration  22: 1802757.620 ops/s
# Warmup Iteration  23: 1803149.479 ops/s
# Warmup Iteration  24: 1812516.590 ops/s
# Warmup Iteration  25: 1820150.923 ops/s
# Warmup Iteration  26: 1793847.907 ops/s
# Warmup Iteration  27: 1811829.242 ops/s
# Warmup Iteration  28: 1799502.705 ops/s
# Warmup Iteration  29: 1808725.567 ops/s
# Warmup Iteration  30: 1801783.787 ops/s
Iteration   1: 1805308.317 ops/s
Iteration   2: 1814021.338 ops/s
Iteration   3: 1800506.088 ops/s
Iteration   4: 1812336.688 ops/s
Iteration   5: 1810014.784 ops/s
Iteration   6: 1810470.180 ops/s
Iteration   7: 1791896.405 ops/s
Iteration   8: 1791853.416 ops/s
Iteration   9: 1770964.460 ops/s
Iteration  10: 1815427.819 ops/s
Iteration  11: 1788334.305 ops/s
Iteration  12: 1795881.128 ops/s
Iteration  13: 1798437.631 ops/s
Iteration  14: 1804676.512 ops/s
Iteration  15: 1790750.417 ops/s
Iteration  16: 1808964.554 ops/s
Iteration  17: 1807870.947 ops/s
Iteration  18: 1801745.401 ops/s
Iteration  19: 1815064.388 ops/s
Iteration  20: 1800746.623 ops/s
Iteration  21: 1800483.042 ops/s
Iteration  22: 1800624.056 ops/s
Iteration  23: 1814228.724 ops/s
Iteration  24: 1814671.120 ops/s
Iteration  25: 1783947.316 ops/s
Iteration  26: 1789474.574 ops/s
Iteration  27: 1807139.242 ops/s
Iteration  28: 1812107.540 ops/s
Iteration  29: 1813475.025 ops/s
Iteration  30: 1799928.936 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSources":
  1802378.366 ±(99.9%) 7268.450 ops/s [Average]
  (min, avg, max) = (1770964.460, 1802378.366, 1815427.819), stdev = 10879.075
  CI (99.9%): [1795109.915, 1809646.816] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorArrayOfSources  thrpt   30  1802378.366 ± 7268.450  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSources$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSources

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 836816.816 ops/s
# Warmup Iteration   2: 1412901.892 ops/s
# Warmup Iteration   3: 1612250.449 ops/s
# Warmup Iteration   4: 1666554.155 ops/s
# Warmup Iteration   5: 1780036.793 ops/s
# Warmup Iteration   6: 1781963.009 ops/s
# Warmup Iteration   7: 1799775.069 ops/s
# Warmup Iteration   8: 1810632.610 ops/s
# Warmup Iteration   9: 1803563.269 ops/s
# Warmup Iteration  10: 1800855.411 ops/s
# Warmup Iteration  11: 1802623.136 ops/s
# Warmup Iteration  12: 1794071.959 ops/s
# Warmup Iteration  13: 1776538.595 ops/s
# Warmup Iteration  14: 1805294.173 ops/s
# Warmup Iteration  15: 1783336.951 ops/s
# Warmup Iteration  16: 1794065.332 ops/s
# Warmup Iteration  17: 1806347.842 ops/s
# Warmup Iteration  18: 1797855.189 ops/s
# Warmup Iteration  19: 1800113.202 ops/s
# Warmup Iteration  20: 1810063.332 ops/s
# Warmup Iteration  21: 1802042.332 ops/s
# Warmup Iteration  22: 1799316.284 ops/s
# Warmup Iteration  23: 1798013.124 ops/s
# Warmup Iteration  24: 1809856.796 ops/s
# Warmup Iteration  25: 1804607.081 ops/s
# Warmup Iteration  26: 1812900.887 ops/s
# Warmup Iteration  27: 1803205.579 ops/s
# Warmup Iteration  28: 1807947.615 ops/s
# Warmup Iteration  29: 1811871.359 ops/s
# Warmup Iteration  30: 1790139.129 ops/s
Iteration   1: 1817288.381 ops/s
Iteration   2: 1796067.260 ops/s
Iteration   3: 1796477.512 ops/s
Iteration   4: 1791897.070 ops/s
Iteration   5: 1804927.788 ops/s
Iteration   6: 1787797.143 ops/s
Iteration   7: 1793316.680 ops/s
Iteration   8: 1811328.126 ops/s
Iteration   9: 1807542.359 ops/s
Iteration  10: 1793008.914 ops/s
Iteration  11: 1806001.966 ops/s
Iteration  12: 1787513.134 ops/s
Iteration  13: 1801325.456 ops/s
Iteration  14: 1794584.809 ops/s
Iteration  15: 1799636.209 ops/s
Iteration  16: 1799037.313 ops/s
Iteration  17: 1801091.691 ops/s
Iteration  18: 1804558.930 ops/s
Iteration  19: 1795845.131 ops/s
Iteration  20: 1799085.669 ops/s
Iteration  21: 1781796.604 ops/s
Iteration  22: 1790423.675 ops/s
Iteration  23: 1785664.852 ops/s
Iteration  24: 1792363.090 ops/s
Iteration  25: 1798678.171 ops/s
Iteration  26: 1805508.269 ops/s
Iteration  27: 1785778.103 ops/s
Iteration  28: 1820433.846 ops/s
Iteration  29: 1809603.123 ops/s
Iteration  30: 1800440.178 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSources":
  1798634.048 ±(99.9%) 6183.078 ops/s [Average]
  (min, avg, max) = (1781796.604, 1798634.048, 1820433.846), stdev = 9254.540
  CI (99.9%): [1792450.971, 1804817.126] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSources  thrpt   30  1798634.048 ± 6183.078  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_cancelMainOnOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_cancelMainOnOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 484272.737 ops/s
# Warmup Iteration   2: 671291.870 ops/s
# Warmup Iteration   3: 725735.204 ops/s
# Warmup Iteration   4: 740529.707 ops/s
# Warmup Iteration   5: 779852.259 ops/s
# Warmup Iteration   6: 784079.636 ops/s
# Warmup Iteration   7: 783592.856 ops/s
# Warmup Iteration   8: 783073.773 ops/s
# Warmup Iteration   9: 786449.435 ops/s
# Warmup Iteration  10: 779295.692 ops/s
# Warmup Iteration  11: 781749.942 ops/s
# Warmup Iteration  12: 787605.766 ops/s
# Warmup Iteration  13: 780482.859 ops/s
# Warmup Iteration  14: 778086.049 ops/s
# Warmup Iteration  15: 775921.216 ops/s
# Warmup Iteration  16: 781089.233 ops/s
# Warmup Iteration  17: 819489.433 ops/s
# Warmup Iteration  18: 824029.205 ops/s
# Warmup Iteration  19: 816971.811 ops/s
# Warmup Iteration  20: 814519.150 ops/s
# Warmup Iteration  21: 817530.826 ops/s
# Warmup Iteration  22: 815191.033 ops/s
# Warmup Iteration  23: 819378.021 ops/s
# Warmup Iteration  24: 818046.391 ops/s
# Warmup Iteration  25: 816579.743 ops/s
# Warmup Iteration  26: 818484.018 ops/s
# Warmup Iteration  27: 820131.519 ops/s
# Warmup Iteration  28: 818347.886 ops/s
# Warmup Iteration  29: 819433.898 ops/s
# Warmup Iteration  30: 816434.282 ops/s
Iteration   1: 808639.391 ops/s
Iteration   2: 820497.709 ops/s
Iteration   3: 821554.862 ops/s
Iteration   4: 813826.382 ops/s
Iteration   5: 811344.616 ops/s
Iteration   6: 815746.810 ops/s
Iteration   7: 817409.841 ops/s
Iteration   8: 815309.186 ops/s
Iteration   9: 821086.290 ops/s
Iteration  10: 817148.792 ops/s
Iteration  11: 817261.913 ops/s
Iteration  12: 820361.367 ops/s
Iteration  13: 820759.040 ops/s
Iteration  14: 815241.715 ops/s
Iteration  15: 818471.012 ops/s
Iteration  16: 817272.856 ops/s
Iteration  17: 811811.002 ops/s
Iteration  18: 821189.340 ops/s
Iteration  19: 817316.002 ops/s
Iteration  20: 809157.486 ops/s
Iteration  21: 807880.621 ops/s
Iteration  22: 823641.710 ops/s
Iteration  23: 819446.766 ops/s
Iteration  24: 813660.705 ops/s
Iteration  25: 818481.628 ops/s
Iteration  26: 811760.672 ops/s
Iteration  27: 817209.172 ops/s
Iteration  28: 818623.652 ops/s
Iteration  29: 820251.423 ops/s
Iteration  30: 808448.551 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_cancelMainOnOtherError":
  816360.350 ±(99.9%) 2913.095 ops/s [Average]
  (min, avg, max) = (807880.621, 816360.350, 823641.710), stdev = 4360.184
  CI (99.9%): [813447.255, 819273.446] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_cancelMainOnOtherError  thrpt   30  816360.350 ± 2913.095  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147215.325 ops/s
# Warmup Iteration   2: 213381.195 ops/s
# Warmup Iteration   3: 206908.132 ops/s
# Warmup Iteration   4: 234439.739 ops/s
# Warmup Iteration   5: 237695.786 ops/s
# Warmup Iteration   6: 238091.030 ops/s
# Warmup Iteration   7: 239076.891 ops/s
# Warmup Iteration   8: 239091.349 ops/s
# Warmup Iteration   9: 237146.488 ops/s
# Warmup Iteration  10: 235983.175 ops/s
# Warmup Iteration  11: 235446.499 ops/s
# Warmup Iteration  12: 238390.090 ops/s
# Warmup Iteration  13: 236334.341 ops/s
# Warmup Iteration  14: 236072.558 ops/s
# Warmup Iteration  15: 236036.603 ops/s
# Warmup Iteration  16: 237945.292 ops/s
# Warmup Iteration  17: 255221.103 ops/s
# Warmup Iteration  18: 253548.237 ops/s
# Warmup Iteration  19: 253983.459 ops/s
# Warmup Iteration  20: 254723.752 ops/s
# Warmup Iteration  21: 255414.097 ops/s
# Warmup Iteration  22: 253180.547 ops/s
# Warmup Iteration  23: 253347.773 ops/s
# Warmup Iteration  24: 253819.665 ops/s
# Warmup Iteration  25: 255341.632 ops/s
# Warmup Iteration  26: 251054.285 ops/s
# Warmup Iteration  27: 253667.146 ops/s
# Warmup Iteration  28: 255203.730 ops/s
# Warmup Iteration  29: 253317.748 ops/s
# Warmup Iteration  30: 255444.856 ops/s
Iteration   1: 253572.421 ops/s
Iteration   2: 255644.142 ops/s
Iteration   3: 255014.985 ops/s
Iteration   4: 254796.872 ops/s
Iteration   5: 252625.943 ops/s
Iteration   6: 251931.712 ops/s
Iteration   7: 253502.094 ops/s
Iteration   8: 253312.363 ops/s
Iteration   9: 254125.050 ops/s
Iteration  10: 254830.779 ops/s
Iteration  11: 253255.691 ops/s
Iteration  12: 254567.086 ops/s
Iteration  13: 255121.672 ops/s
Iteration  14: 253476.058 ops/s
Iteration  15: 252733.269 ops/s
Iteration  16: 254049.696 ops/s
Iteration  17: 255761.050 ops/s
Iteration  18: 253759.547 ops/s
Iteration  19: 252935.386 ops/s
Iteration  20: 254169.692 ops/s
Iteration  21: 255208.899 ops/s
Iteration  22: 253015.718 ops/s
Iteration  23: 254866.668 ops/s
Iteration  24: 252465.065 ops/s
Iteration  25: 255101.830 ops/s
Iteration  26: 254223.917 ops/s
Iteration  27: 256230.495 ops/s
Iteration  28: 252323.700 ops/s
Iteration  29: 254022.971 ops/s
Iteration  30: 254697.200 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  254044.732 ±(99.9%) 739.138 ops/s [Average]
  (min, avg, max) = (251931.712, 254044.732, 256230.495), stdev = 1106.307
  CI (99.9%): [253305.595, 254783.870] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score     Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  254044.732 ± 739.138  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 984087.207 ops/s
# Warmup Iteration   2: 1689565.561 ops/s
# Warmup Iteration   3: 1912052.982 ops/s
# Warmup Iteration   4: 1993191.623 ops/s
# Warmup Iteration   5: 2153451.931 ops/s
# Warmup Iteration   6: 2141196.766 ops/s
# Warmup Iteration   7: 2162252.137 ops/s
# Warmup Iteration   8: 2161850.944 ops/s
# Warmup Iteration   9: 2113603.050 ops/s
# Warmup Iteration  10: 2158706.507 ops/s
# Warmup Iteration  11: 2158501.360 ops/s
# Warmup Iteration  12: 2138191.269 ops/s
# Warmup Iteration  13: 2146624.164 ops/s
# Warmup Iteration  14: 2157915.724 ops/s
# Warmup Iteration  15: 2158680.394 ops/s
# Warmup Iteration  16: 2155574.655 ops/s
# Warmup Iteration  17: 2136813.968 ops/s
# Warmup Iteration  18: 2144661.977 ops/s
# Warmup Iteration  19: 2156372.392 ops/s
# Warmup Iteration  20: 2160582.438 ops/s
# Warmup Iteration  21: 2141856.847 ops/s
# Warmup Iteration  22: 2152842.182 ops/s
# Warmup Iteration  23: 2131832.369 ops/s
# Warmup Iteration  24: 2148456.949 ops/s
# Warmup Iteration  25: 2156901.009 ops/s
# Warmup Iteration  26: 2163055.561 ops/s
# Warmup Iteration  27: 2137555.037 ops/s
# Warmup Iteration  28: 2157302.992 ops/s
# Warmup Iteration  29: 2170899.342 ops/s
# Warmup Iteration  30: 2140680.234 ops/s
Iteration   1: 2143533.480 ops/s
Iteration   2: 2150243.177 ops/s
Iteration   3: 2153824.779 ops/s
Iteration   4: 2151253.450 ops/s
Iteration   5: 2149193.033 ops/s
Iteration   6: 2152926.292 ops/s
Iteration   7: 2157191.667 ops/s
Iteration   8: 2153879.589 ops/s
Iteration   9: 2115217.379 ops/s
Iteration  10: 2150511.203 ops/s
Iteration  11: 2167753.816 ops/s
Iteration  12: 2138750.723 ops/s
Iteration  13: 2150389.385 ops/s
Iteration  14: 2129176.233 ops/s
Iteration  15: 2148560.774 ops/s
Iteration  16: 2144992.099 ops/s
Iteration  17: 2142832.262 ops/s
Iteration  18: 2153457.339 ops/s
Iteration  19: 2115339.487 ops/s
Iteration  20: 2169381.145 ops/s
Iteration  21: 2122326.872 ops/s
Iteration  22: 2137908.685 ops/s
Iteration  23: 2164644.752 ops/s
Iteration  24: 2156310.902 ops/s
Iteration  25: 2139404.652 ops/s
Iteration  26: 2137638.610 ops/s
Iteration  27: 2143453.793 ops/s
Iteration  28: 2140890.280 ops/s
Iteration  29: 2142675.880 ops/s
Iteration  30: 2151955.422 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedNormal":
  2145853.905 ±(99.9%) 8760.554 ops/s [Average]
  (min, avg, max) = (2115217.379, 2145853.905, 2169381.145), stdev = 13112.385
  CI (99.9%): [2137093.352, 2154614.459] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_fusedNormal  thrpt   30  2145853.905 ± 8760.554  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_nonFusedDelayErrorMoreWorkBeforeTermination$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_nonFusedDelayErrorMoreWorkBeforeTermination

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 518254.536 ops/s
# Warmup Iteration   2: 1041513.587 ops/s
# Warmup Iteration   3: 1276950.242 ops/s
# Warmup Iteration   4: 1320619.257 ops/s
# Warmup Iteration   5: 1412228.588 ops/s
# Warmup Iteration   6: 1393572.306 ops/s
# Warmup Iteration   7: 1405169.055 ops/s
# Warmup Iteration   8: 1413853.928 ops/s
# Warmup Iteration   9: 1412833.482 ops/s
# Warmup Iteration  10: 1422825.976 ops/s
# Warmup Iteration  11: 1398026.346 ops/s
# Warmup Iteration  12: 1397291.393 ops/s
# Warmup Iteration  13: 1403344.851 ops/s
# Warmup Iteration  14: 1380538.895 ops/s
# Warmup Iteration  15: 1403407.412 ops/s
# Warmup Iteration  16: 1411809.021 ops/s
# Warmup Iteration  17: 1382708.467 ops/s
# Warmup Iteration  18: 1412419.631 ops/s
# Warmup Iteration  19: 1416816.797 ops/s
# Warmup Iteration  20: 1408862.731 ops/s
# Warmup Iteration  21: 1409248.103 ops/s
# Warmup Iteration  22: 1413398.114 ops/s
# Warmup Iteration  23: 1398681.570 ops/s
# Warmup Iteration  24: 1404261.595 ops/s
# Warmup Iteration  25: 1406782.054 ops/s
# Warmup Iteration  26: 1409578.942 ops/s
# Warmup Iteration  27: 1415579.545 ops/s
# Warmup Iteration  28: 1401081.705 ops/s
# Warmup Iteration  29: 1407019.388 ops/s
# Warmup Iteration  30: 1412074.749 ops/s
Iteration   1: 1394939.033 ops/s
Iteration   2: 1410547.478 ops/s
Iteration   3: 1411418.690 ops/s
Iteration   4: 1415058.747 ops/s
Iteration   5: 1408782.357 ops/s
Iteration   6: 1408422.813 ops/s
Iteration   7: 1410923.328 ops/s
Iteration   8: 1408221.477 ops/s
Iteration   9: 1387552.162 ops/s
Iteration  10: 1425777.659 ops/s
Iteration  11: 1418210.481 ops/s
Iteration  12: 1406968.262 ops/s
Iteration  13: 1404566.148 ops/s
Iteration  14: 1414883.534 ops/s
Iteration  15: 1408698.290 ops/s
Iteration  16: 1408844.402 ops/s
Iteration  17: 1422776.424 ops/s
Iteration  18: 1403016.835 ops/s
Iteration  19: 1398418.732 ops/s
Iteration  20: 1415108.183 ops/s
Iteration  21: 1407183.927 ops/s
Iteration  22: 1402399.637 ops/s
Iteration  23: 1411735.083 ops/s
Iteration  24: 1393285.660 ops/s
Iteration  25: 1418119.057 ops/s
Iteration  26: 1405311.249 ops/s
Iteration  27: 1403546.060 ops/s
Iteration  28: 1392015.499 ops/s
Iteration  29: 1410566.665 ops/s
Iteration  30: 1400789.587 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_nonFusedDelayErrorMoreWorkBeforeTermination":
  1407602.915 ±(99.9%) 5864.817 ops/s [Average]
  (min, avg, max) = (1387552.162, 1407602.915, 1425777.659), stdev = 8778.183
  CI (99.9%): [1401738.098, 1413467.733] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_nonFusedDelayErrorMoreWorkBeforeTermination  thrpt   30  1407602.915 ± 5864.817  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryUntil$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryUntil

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 284819.181 ops/s
# Warmup Iteration   2: 376746.606 ops/s
# Warmup Iteration   3: 436494.447 ops/s
# Warmup Iteration   4: 439651.925 ops/s
# Warmup Iteration   5: 440934.298 ops/s
# Warmup Iteration   6: 441119.351 ops/s
# Warmup Iteration   7: 441726.069 ops/s
# Warmup Iteration   8: 443496.694 ops/s
# Warmup Iteration   9: 441434.957 ops/s
# Warmup Iteration  10: 439822.173 ops/s
# Warmup Iteration  11: 440053.966 ops/s
# Warmup Iteration  12: 437078.560 ops/s
# Warmup Iteration  13: 440063.534 ops/s
# Warmup Iteration  14: 438942.727 ops/s
# Warmup Iteration  15: 439951.825 ops/s
# Warmup Iteration  16: 437257.309 ops/s
# Warmup Iteration  17: 451275.123 ops/s
# Warmup Iteration  18: 449980.391 ops/s
# Warmup Iteration  19: 450127.749 ops/s
# Warmup Iteration  20: 451194.463 ops/s
# Warmup Iteration  21: 450142.406 ops/s
# Warmup Iteration  22: 447639.190 ops/s
# Warmup Iteration  23: 450241.762 ops/s
# Warmup Iteration  24: 449193.610 ops/s
# Warmup Iteration  25: 450476.385 ops/s
# Warmup Iteration  26: 453038.588 ops/s
# Warmup Iteration  27: 444534.280 ops/s
# Warmup Iteration  28: 450155.577 ops/s
# Warmup Iteration  29: 450021.150 ops/s
# Warmup Iteration  30: 450697.530 ops/s
Iteration   1: 449216.266 ops/s
Iteration   2: 449834.262 ops/s
Iteration   3: 447096.360 ops/s
Iteration   4: 449802.412 ops/s
Iteration   5: 449453.388 ops/s
Iteration   6: 452238.479 ops/s
Iteration   7: 453860.394 ops/s
Iteration   8: 451822.025 ops/s
Iteration   9: 450562.669 ops/s
Iteration  10: 449305.797 ops/s
Iteration  11: 452455.640 ops/s
Iteration  12: 451550.224 ops/s
Iteration  13: 449984.273 ops/s
Iteration  14: 448004.645 ops/s
Iteration  15: 449402.678 ops/s
Iteration  16: 451875.489 ops/s
Iteration  17: 449209.518 ops/s
Iteration  18: 449340.820 ops/s
Iteration  19: 453000.683 ops/s
Iteration  20: 449547.926 ops/s
Iteration  21: 449560.198 ops/s
Iteration  22: 448192.740 ops/s
Iteration  23: 450742.228 ops/s
Iteration  24: 443286.388 ops/s
Iteration  25: 449740.587 ops/s
Iteration  26: 449784.885 ops/s
Iteration  27: 450207.054 ops/s
Iteration  28: 450553.944 ops/s
Iteration  29: 451380.515 ops/s
Iteration  30: 447900.405 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryUntil":
  449963.763 ±(99.9%) 1335.192 ops/s [Average]
  (min, avg, max) = (443286.388, 449963.763, 453860.394), stdev = 1998.453
  CI (99.9%): [448628.571, 451298.956] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
FlowableRetryTest._Benchmark.benchmark_retryUntil  thrpt   30  449963.763 ± 1335.192  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenTakeOnInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenTakeOnInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53850.758 ops/s
# Warmup Iteration   2: 207957.862 ops/s
# Warmup Iteration   3: 239890.722 ops/s
# Warmup Iteration   4: 264349.223 ops/s
# Warmup Iteration   5: 263243.607 ops/s
# Warmup Iteration   6: 262140.757 ops/s
# Warmup Iteration   7: 260896.616 ops/s
# Warmup Iteration   8: 262650.817 ops/s
# Warmup Iteration   9: 264193.057 ops/s
# Warmup Iteration  10: 261383.087 ops/s
# Warmup Iteration  11: 261028.697 ops/s
# Warmup Iteration  12: 261077.333 ops/s
# Warmup Iteration  13: 262490.799 ops/s
# Warmup Iteration  14: 261889.912 ops/s
# Warmup Iteration  15: 261687.511 ops/s
# Warmup Iteration  16: 262393.753 ops/s
# Warmup Iteration  17: 263960.525 ops/s
# Warmup Iteration  18: 263082.927 ops/s
# Warmup Iteration  19: 261782.877 ops/s
# Warmup Iteration  20: 263886.561 ops/s
# Warmup Iteration  21: 263588.760 ops/s
# Warmup Iteration  22: 263088.520 ops/s
# Warmup Iteration  23: 262999.227 ops/s
# Warmup Iteration  24: 262041.894 ops/s
# Warmup Iteration  25: 263076.477 ops/s
# Warmup Iteration  26: 265346.353 ops/s
# Warmup Iteration  27: 263422.947 ops/s
# Warmup Iteration  28: 261964.698 ops/s
# Warmup Iteration  29: 259649.660 ops/s
# Warmup Iteration  30: 262317.903 ops/s
Iteration   1: 261666.320 ops/s
Iteration   2: 260646.203 ops/s
Iteration   3: 262661.892 ops/s
Iteration   4: 263944.544 ops/s
Iteration   5: 263148.539 ops/s
Iteration   6: 261894.554 ops/s
Iteration   7: 261194.869 ops/s
Iteration   8: 261951.310 ops/s
Iteration   9: 262912.432 ops/s
Iteration  10: 261849.048 ops/s
Iteration  11: 262876.687 ops/s
Iteration  12: 261909.368 ops/s
Iteration  13: 263133.081 ops/s
Iteration  14: 262435.738 ops/s
Iteration  15: 263286.847 ops/s
Iteration  16: 262478.697 ops/s
Iteration  17: 262026.644 ops/s
Iteration  18: 262019.925 ops/s
Iteration  19: 261716.492 ops/s
Iteration  20: 261954.987 ops/s
Iteration  21: 264515.505 ops/s
Iteration  22: 263204.282 ops/s
Iteration  23: 260969.123 ops/s
Iteration  24: 262734.658 ops/s
Iteration  25: 261380.578 ops/s
Iteration  26: 262259.528 ops/s
Iteration  27: 261856.506 ops/s
Iteration  28: 263337.983 ops/s
Iteration  29: 261931.803 ops/s
Iteration  30: 261768.367 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenTakeOnInner":
  262322.217 ±(99.9%) 579.330 ops/s [Average]
  (min, avg, max) = (260646.203, 262322.217, 264515.505), stdev = 867.114
  CI (99.9%): [261742.887, 262901.547] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score     Error  Units
FlowableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenTakeOnInner  thrpt   30  262322.217 ± 579.330  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureBufferNegativeCapacity$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureBufferNegativeCapacity

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 719550.011 ops/s
# Warmup Iteration   2: 825395.875 ops/s
# Warmup Iteration   3: 949085.979 ops/s
# Warmup Iteration   4: 879116.165 ops/s
# Warmup Iteration   5: 949901.107 ops/s
# Warmup Iteration   6: 951059.973 ops/s
# Warmup Iteration   7: 956372.002 ops/s
# Warmup Iteration   8: 947528.156 ops/s
# Warmup Iteration   9: 955601.252 ops/s
# Warmup Iteration  10: 957021.818 ops/s
# Warmup Iteration  11: 953473.364 ops/s
# Warmup Iteration  12: 949535.545 ops/s
# Warmup Iteration  13: 949846.200 ops/s
# Warmup Iteration  14: 955890.256 ops/s
# Warmup Iteration  15: 944613.472 ops/s
# Warmup Iteration  16: 944463.586 ops/s
# Warmup Iteration  17: 1004052.165 ops/s
# Warmup Iteration  18: 1001026.618 ops/s
# Warmup Iteration  19: 1012885.674 ops/s
# Warmup Iteration  20: 997106.341 ops/s
# Warmup Iteration  21: 1004815.920 ops/s
# Warmup Iteration  22: 1006253.215 ops/s
# Warmup Iteration  23: 1009716.507 ops/s
# Warmup Iteration  24: 1001895.998 ops/s
# Warmup Iteration  25: 999614.720 ops/s
# Warmup Iteration  26: 1003613.049 ops/s
# Warmup Iteration  27: 998091.474 ops/s
# Warmup Iteration  28: 996169.759 ops/s
# Warmup Iteration  29: 995352.396 ops/s
# Warmup Iteration  30: 995421.121 ops/s
Iteration   1: 995330.542 ops/s
Iteration   2: 1005106.759 ops/s
Iteration   3: 999673.231 ops/s
Iteration   4: 1002087.063 ops/s
Iteration   5: 1001272.833 ops/s
Iteration   6: 999846.883 ops/s
Iteration   7: 995665.689 ops/s
Iteration   8: 1000956.009 ops/s
Iteration   9: 1005360.180 ops/s
Iteration  10: 1003152.268 ops/s
Iteration  11: 1000221.304 ops/s
Iteration  12: 999245.077 ops/s
Iteration  13: 1001208.062 ops/s
Iteration  14: 997760.238 ops/s
Iteration  15: 1003182.847 ops/s
Iteration  16: 997933.587 ops/s
Iteration  17: 1000773.665 ops/s
Iteration  18: 1001388.654 ops/s
Iteration  19: 999593.503 ops/s
Iteration  20: 1006756.754 ops/s
Iteration  21: 1002068.729 ops/s
Iteration  22: 1005634.183 ops/s
Iteration  23: 999068.660 ops/s
Iteration  24: 996223.829 ops/s
Iteration  25: 989796.512 ops/s
Iteration  26: 998666.381 ops/s
Iteration  27: 995215.641 ops/s
Iteration  28: 991560.631 ops/s
Iteration  29: 991826.745 ops/s
Iteration  30: 999196.825 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureBufferNegativeCapacity":
  999525.776 ±(99.9%) 2757.639 ops/s [Average]
  (min, avg, max) = (989796.512, 999525.776, 1006756.754), stdev = 4127.505
  CI (99.9%): [996768.137, 1002283.415] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureBufferNegativeCapacity  thrpt   30  999525.776 ± 2757.639  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_clearIsEmptyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_clearIsEmptyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7875777.052 ops/s
# Warmup Iteration   2: 11210484.750 ops/s
# Warmup Iteration   3: 13021139.370 ops/s
# Warmup Iteration   4: 13104028.260 ops/s
# Warmup Iteration   5: 12967675.108 ops/s
# Warmup Iteration   6: 13074252.705 ops/s
# Warmup Iteration   7: 13077425.392 ops/s
# Warmup Iteration   8: 13117444.655 ops/s
# Warmup Iteration   9: 13039340.188 ops/s
# Warmup Iteration  10: 13086404.149 ops/s
# Warmup Iteration  11: 13064299.997 ops/s
# Warmup Iteration  12: 13022767.974 ops/s
# Warmup Iteration  13: 13113063.430 ops/s
# Warmup Iteration  14: 12590261.080 ops/s
# Warmup Iteration  15: 13102845.765 ops/s
# Warmup Iteration  16: 13033669.865 ops/s
# Warmup Iteration  17: 12868055.414 ops/s
# Warmup Iteration  18: 13001016.250 ops/s
# Warmup Iteration  19: 12863933.973 ops/s
# Warmup Iteration  20: 12997518.438 ops/s
# Warmup Iteration  21: 13036222.801 ops/s
# Warmup Iteration  22: 13007676.905 ops/s
# Warmup Iteration  23: 13020312.888 ops/s
# Warmup Iteration  24: 13035218.482 ops/s
# Warmup Iteration  25: 13066902.510 ops/s
# Warmup Iteration  26: 12989838.699 ops/s
# Warmup Iteration  27: 13013256.882 ops/s
# Warmup Iteration  28: 13058142.307 ops/s
# Warmup Iteration  29: 12918223.006 ops/s
# Warmup Iteration  30: 13052948.529 ops/s
Iteration   1: 12897093.479 ops/s
Iteration   2: 13046695.952 ops/s
Iteration   3: 12886767.933 ops/s
Iteration   4: 13027186.879 ops/s
Iteration   5: 13045294.411 ops/s
Iteration   6: 13080891.485 ops/s
Iteration   7: 13104668.940 ops/s
Iteration   8: 12997814.952 ops/s
Iteration   9: 13123512.050 ops/s
Iteration  10: 12453930.079 ops/s
Iteration  11: 13046891.348 ops/s
Iteration  12: 13019429.682 ops/s
Iteration  13: 12932005.714 ops/s
Iteration  14: 13032207.508 ops/s
Iteration  15: 13014535.235 ops/s
Iteration  16: 13072411.929 ops/s
Iteration  17: 13111019.041 ops/s
Iteration  18: 13043891.662 ops/s
Iteration  19: 12779182.317 ops/s
Iteration  20: 13021284.322 ops/s
Iteration  21: 13127413.103 ops/s
Iteration  22: 13041380.932 ops/s
Iteration  23: 12968929.416 ops/s
Iteration  24: 13094468.144 ops/s
Iteration  25: 13085234.005 ops/s
Iteration  26: 12651440.873 ops/s
Iteration  27: 12952385.333 ops/s
Iteration  28: 13203831.518 ops/s
Iteration  29: 12987303.938 ops/s
Iteration  30: 13137944.850 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_clearIsEmptyConditional":
  12999568.234 ±(99.9%) 100491.778 ops/s [Average]
  (min, avg, max) = (12453930.079, 12999568.234, 13203831.518), stdev = 150411.374
  CI (99.9%): [12899076.456, 13100060.013] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_clearIsEmptyConditional  thrpt   30  12999568.234 ± 100491.778  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedSync2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedSync2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3795965.492 ops/s
# Warmup Iteration   2: 6020938.500 ops/s
# Warmup Iteration   3: 6482585.985 ops/s
# Warmup Iteration   4: 6425144.768 ops/s
# Warmup Iteration   5: 6458587.420 ops/s
# Warmup Iteration   6: 6498338.926 ops/s
# Warmup Iteration   7: 6469641.376 ops/s
# Warmup Iteration   8: 6464666.618 ops/s
# Warmup Iteration   9: 6506871.038 ops/s
# Warmup Iteration  10: 6467420.875 ops/s
# Warmup Iteration  11: 6457705.684 ops/s
# Warmup Iteration  12: 6412146.023 ops/s
# Warmup Iteration  13: 6473585.274 ops/s
# Warmup Iteration  14: 6479346.382 ops/s
# Warmup Iteration  15: 6468892.837 ops/s
# Warmup Iteration  16: 6463567.381 ops/s
# Warmup Iteration  17: 6451653.006 ops/s
# Warmup Iteration  18: 6420920.955 ops/s
# Warmup Iteration  19: 6504807.705 ops/s
# Warmup Iteration  20: 6431075.936 ops/s
# Warmup Iteration  21: 6434575.343 ops/s
# Warmup Iteration  22: 6484349.605 ops/s
# Warmup Iteration  23: 6430974.560 ops/s
# Warmup Iteration  24: 6479792.773 ops/s
# Warmup Iteration  25: 6409644.327 ops/s
# Warmup Iteration  26: 6451137.699 ops/s
# Warmup Iteration  27: 6455670.497 ops/s
# Warmup Iteration  28: 6474930.560 ops/s
# Warmup Iteration  29: 6461205.542 ops/s
# Warmup Iteration  30: 6403872.809 ops/s
Iteration   1: 6450483.448 ops/s
Iteration   2: 6446901.613 ops/s
Iteration   3: 6452085.455 ops/s
Iteration   4: 6403827.508 ops/s
Iteration   5: 6435235.968 ops/s
Iteration   6: 6423113.603 ops/s
Iteration   7: 6487842.401 ops/s
Iteration   8: 6459792.062 ops/s
Iteration   9: 6432122.570 ops/s
Iteration  10: 6440303.561 ops/s
Iteration  11: 6443321.444 ops/s
Iteration  12: 6462748.315 ops/s
Iteration  13: 6472153.861 ops/s
Iteration  14: 6455337.935 ops/s
Iteration  15: 6358294.967 ops/s
Iteration  16: 6497608.272 ops/s
Iteration  17: 6491533.362 ops/s
Iteration  18: 6437197.081 ops/s
Iteration  19: 6450354.466 ops/s
Iteration  20: 6431832.045 ops/s
Iteration  21: 6432222.837 ops/s
Iteration  22: 6463378.589 ops/s
Iteration  23: 6381221.865 ops/s
Iteration  24: 6455898.749 ops/s
Iteration  25: 6419597.742 ops/s
Iteration  26: 6457444.391 ops/s
Iteration  27: 6476864.979 ops/s
Iteration  28: 6452873.430 ops/s
Iteration  29: 6439098.267 ops/s
Iteration  30: 6447254.413 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedSync2":
  6445264.840 ±(99.9%) 19645.509 ops/s [Average]
  (min, avg, max) = (6358294.967, 6445264.840, 6497608.272), stdev = 29404.476
  CI (99.9%): [6425619.331, 6464910.349] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_conditionalFusedSync2  thrpt   30  6445264.840 ± 19645.509  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_syncNoneFused2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_syncNoneFused2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3764836.353 ops/s
# Warmup Iteration   2: 5946604.765 ops/s
# Warmup Iteration   3: 6403775.211 ops/s
# Warmup Iteration   4: 6439094.553 ops/s
# Warmup Iteration   5: 6386007.779 ops/s
# Warmup Iteration   6: 6375317.483 ops/s
# Warmup Iteration   7: 6435014.574 ops/s
# Warmup Iteration   8: 6406327.585 ops/s
# Warmup Iteration   9: 6385669.283 ops/s
# Warmup Iteration  10: 6436957.035 ops/s
# Warmup Iteration  11: 6423652.561 ops/s
# Warmup Iteration  12: 6413239.810 ops/s
# Warmup Iteration  13: 6430915.669 ops/s
# Warmup Iteration  14: 6407526.994 ops/s
# Warmup Iteration  15: 6383496.175 ops/s
# Warmup Iteration  16: 6418112.824 ops/s
# Warmup Iteration  17: 6452833.515 ops/s
# Warmup Iteration  18: 6393460.363 ops/s
# Warmup Iteration  19: 6435406.492 ops/s
# Warmup Iteration  20: 6443329.582 ops/s
# Warmup Iteration  21: 6417736.120 ops/s
# Warmup Iteration  22: 6448672.193 ops/s
# Warmup Iteration  23: 6421893.374 ops/s
# Warmup Iteration  24: 6300920.761 ops/s
# Warmup Iteration  25: 6400634.138 ops/s
# Warmup Iteration  26: 6444089.454 ops/s
# Warmup Iteration  27: 6442738.779 ops/s
# Warmup Iteration  28: 6413646.335 ops/s
# Warmup Iteration  29: 6399001.402 ops/s
# Warmup Iteration  30: 6426239.090 ops/s
Iteration   1: 6400267.396 ops/s
Iteration   2: 6423512.292 ops/s
Iteration   3: 6394884.162 ops/s
Iteration   4: 6395854.389 ops/s
Iteration   5: 6418404.791 ops/s
Iteration   6: 6396393.089 ops/s
Iteration   7: 6404964.716 ops/s
Iteration   8: 6450362.531 ops/s
Iteration   9: 6455947.691 ops/s
Iteration  10: 6400293.232 ops/s
Iteration  11: 6402781.147 ops/s
Iteration  12: 6431437.819 ops/s
Iteration  13: 6380545.805 ops/s
Iteration  14: 6429333.776 ops/s
Iteration  15: 6450664.909 ops/s
Iteration  16: 6399939.342 ops/s
Iteration  17: 6394306.498 ops/s
Iteration  18: 6435693.601 ops/s
Iteration  19: 6447115.254 ops/s
Iteration  20: 6405482.707 ops/s
Iteration  21: 6413254.818 ops/s
Iteration  22: 6325012.778 ops/s
Iteration  23: 6419226.312 ops/s
Iteration  24: 6397654.544 ops/s
Iteration  25: 6382614.188 ops/s
Iteration  26: 6424114.184 ops/s
Iteration  27: 6451876.620 ops/s
Iteration  28: 6410441.500 ops/s
Iteration  29: 6375221.677 ops/s
Iteration  30: 6448751.102 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_syncNoneFused2":
  6412211.762 ±(99.9%) 18967.121 ops/s [Average]
  (min, avg, max) = (6325012.778, 6412211.762, 6455947.691), stdev = 28389.096
  CI (99.9%): [6393244.641, 6431178.884] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_syncNoneFused2  thrpt   30  6412211.762 ± 18967.121  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_itemsThenError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_itemsThenError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1215769.835 ops/s
# Warmup Iteration   2: 1859511.586 ops/s
# Warmup Iteration   3: 1733272.947 ops/s
# Warmup Iteration   4: 1958675.705 ops/s
# Warmup Iteration   5: 2085379.171 ops/s
# Warmup Iteration   6: 2083767.974 ops/s
# Warmup Iteration   7: 2080813.343 ops/s
# Warmup Iteration   8: 2076677.756 ops/s
# Warmup Iteration   9: 2073259.489 ops/s
# Warmup Iteration  10: 2077677.300 ops/s
# Warmup Iteration  11: 2071580.323 ops/s
# Warmup Iteration  12: 2075802.530 ops/s
# Warmup Iteration  13: 2065258.802 ops/s
# Warmup Iteration  14: 2078954.942 ops/s
# Warmup Iteration  15: 2070704.628 ops/s
# Warmup Iteration  16: 2076591.718 ops/s
# Warmup Iteration  17: 2133844.511 ops/s
# Warmup Iteration  18: 2143868.251 ops/s
# Warmup Iteration  19: 2148383.160 ops/s
# Warmup Iteration  20: 2143772.244 ops/s
# Warmup Iteration  21: 2140620.257 ops/s
# Warmup Iteration  22: 2153936.719 ops/s
# Warmup Iteration  23: 2141091.583 ops/s
# Warmup Iteration  24: 2141161.697 ops/s
# Warmup Iteration  25: 2129128.350 ops/s
# Warmup Iteration  26: 2142382.564 ops/s
# Warmup Iteration  27: 2137741.417 ops/s
# Warmup Iteration  28: 2143719.784 ops/s
# Warmup Iteration  29: 2145424.207 ops/s
# Warmup Iteration  30: 2143799.371 ops/s
Iteration   1: 2120740.975 ops/s
Iteration   2: 2137316.494 ops/s
Iteration   3: 2135135.414 ops/s
Iteration   4: 2138704.643 ops/s
Iteration   5: 2139196.097 ops/s
Iteration   6: 2123047.095 ops/s
Iteration   7: 2135406.595 ops/s
Iteration   8: 2140816.652 ops/s
Iteration   9: 2128673.201 ops/s
Iteration  10: 2130643.821 ops/s
Iteration  11: 2137918.664 ops/s
Iteration  12: 2138745.267 ops/s
Iteration  13: 2139108.527 ops/s
Iteration  14: 2145451.721 ops/s
Iteration  15: 2129436.960 ops/s
Iteration  16: 2137185.004 ops/s
Iteration  17: 2134018.530 ops/s
Iteration  18: 2134044.101 ops/s
Iteration  19: 2134881.164 ops/s
Iteration  20: 2140397.247 ops/s
Iteration  21: 2137638.015 ops/s
Iteration  22: 2133754.816 ops/s
Iteration  23: 2141121.061 ops/s
Iteration  24: 2134656.652 ops/s
Iteration  25: 2137298.315 ops/s
Iteration  26: 2141042.295 ops/s
Iteration  27: 2135718.725 ops/s
Iteration  28: 2140231.135 ops/s
Iteration  29: 2154282.913 ops/s
Iteration  30: 2145732.005 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_itemsThenError":
  2136744.803 ±(99.9%) 4302.698 ops/s [Average]
  (min, avg, max) = (2120740.975, 2136744.803, 2154282.913), stdev = 6440.076
  CI (99.9%): [2132442.106, 2141047.501] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
FlowableOnErrorCompleteTest._Benchmark.benchmark_itemsThenError  thrpt   30  2136744.803 ± 4302.698  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalFastPathCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalFastPathCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2821668.548 ops/s
# Warmup Iteration   2: 4074407.717 ops/s
# Warmup Iteration   3: 4590242.960 ops/s
# Warmup Iteration   4: 4639833.832 ops/s
# Warmup Iteration   5: 4616504.573 ops/s
# Warmup Iteration   6: 4627083.499 ops/s
# Warmup Iteration   7: 4629024.886 ops/s
# Warmup Iteration   8: 4589282.485 ops/s
# Warmup Iteration   9: 4621633.969 ops/s
# Warmup Iteration  10: 4599159.403 ops/s
# Warmup Iteration  11: 4641170.352 ops/s
# Warmup Iteration  12: 4641548.152 ops/s
# Warmup Iteration  13: 4645578.401 ops/s
# Warmup Iteration  14: 4625880.907 ops/s
# Warmup Iteration  15: 4601820.617 ops/s
# Warmup Iteration  16: 4633067.817 ops/s
# Warmup Iteration  17: 4611857.831 ops/s
# Warmup Iteration  18: 4606037.324 ops/s
# Warmup Iteration  19: 4613863.772 ops/s
# Warmup Iteration  20: 4645695.481 ops/s
# Warmup Iteration  21: 4613373.349 ops/s
# Warmup Iteration  22: 4621439.844 ops/s
# Warmup Iteration  23: 4618406.353 ops/s
# Warmup Iteration  24: 4627073.535 ops/s
# Warmup Iteration  25: 4625299.313 ops/s
# Warmup Iteration  26: 4634713.771 ops/s
# Warmup Iteration  27: 4611831.927 ops/s
# Warmup Iteration  28: 4603623.079 ops/s
# Warmup Iteration  29: 4623346.825 ops/s
# Warmup Iteration  30: 4630970.750 ops/s
Iteration   1: 4609977.571 ops/s
Iteration   2: 4613678.904 ops/s
Iteration   3: 4603821.566 ops/s
Iteration   4: 4623012.650 ops/s
Iteration   5: 4618734.358 ops/s
Iteration   6: 4617378.018 ops/s
Iteration   7: 4619842.958 ops/s
Iteration   8: 4643130.750 ops/s
Iteration   9: 4618105.567 ops/s
Iteration  10: 4622093.069 ops/s
Iteration  11: 4594800.808 ops/s
Iteration  12: 4615457.517 ops/s
Iteration  13: 4608532.670 ops/s
Iteration  14: 4613971.323 ops/s
Iteration  15: 4610120.015 ops/s
Iteration  16: 4544980.513 ops/s
Iteration  17: 4621550.560 ops/s
Iteration  18: 4539626.854 ops/s
Iteration  19: 4637936.712 ops/s
Iteration  20: 4587955.986 ops/s
Iteration  21: 4618121.077 ops/s
Iteration  22: 4616258.262 ops/s
Iteration  23: 4626872.251 ops/s
Iteration  24: 4603682.692 ops/s
Iteration  25: 4596184.330 ops/s
Iteration  26: 4612400.213 ops/s
Iteration  27: 4569825.903 ops/s
Iteration  28: 4610703.592 ops/s
Iteration  29: 4620069.281 ops/s
Iteration  30: 4614701.961 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalFastPathCancel":
  4608450.931 ±(99.9%) 15148.689 ops/s [Average]
  (min, avg, max) = (4539626.854, 4608450.931, 4643130.750), stdev = 22673.847
  CI (99.9%): [4593302.242, 4623599.620] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_conditionalFastPathCancel  thrpt   30  4608450.931 ± 15148.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_emptyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_emptyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4738538.780 ops/s
# Warmup Iteration   2: 6805306.790 ops/s
# Warmup Iteration   3: 7733271.589 ops/s
# Warmup Iteration   4: 7705057.917 ops/s
# Warmup Iteration   5: 7732198.032 ops/s
# Warmup Iteration   6: 7607586.415 ops/s
# Warmup Iteration   7: 7606140.643 ops/s
# Warmup Iteration   8: 7658185.684 ops/s
# Warmup Iteration   9: 7731759.673 ops/s
# Warmup Iteration  10: 7746628.452 ops/s
# Warmup Iteration  11: 7689548.686 ops/s
# Warmup Iteration  12: 7719335.400 ops/s
# Warmup Iteration  13: 7711719.461 ops/s
# Warmup Iteration  14: 7707099.401 ops/s
# Warmup Iteration  15: 7695808.698 ops/s
# Warmup Iteration  16: 7730998.246 ops/s
# Warmup Iteration  17: 7666125.460 ops/s
# Warmup Iteration  18: 7695903.689 ops/s
# Warmup Iteration  19: 7725163.490 ops/s
# Warmup Iteration  20: 7669437.031 ops/s
# Warmup Iteration  21: 7719021.326 ops/s
# Warmup Iteration  22: 7701054.119 ops/s
# Warmup Iteration  23: 7698360.581 ops/s
# Warmup Iteration  24: 7721704.071 ops/s
# Warmup Iteration  25: 7643604.961 ops/s
# Warmup Iteration  26: 7679167.104 ops/s
# Warmup Iteration  27: 7664423.822 ops/s
# Warmup Iteration  28: 7685216.013 ops/s
# Warmup Iteration  29: 7697085.881 ops/s
# Warmup Iteration  30: 7693961.074 ops/s
Iteration   1: 7672560.734 ops/s
Iteration   2: 7698552.612 ops/s
Iteration   3: 7701068.492 ops/s
Iteration   4: 7757807.708 ops/s
Iteration   5: 7685879.031 ops/s
Iteration   6: 7695056.658 ops/s
Iteration   7: 7696508.876 ops/s
Iteration   8: 7678938.725 ops/s
Iteration   9: 7720365.928 ops/s
Iteration  10: 7714121.307 ops/s
Iteration  11: 7708954.686 ops/s
Iteration  12: 7706567.606 ops/s
Iteration  13: 7728687.305 ops/s
Iteration  14: 7657652.741 ops/s
Iteration  15: 7734936.230 ops/s
Iteration  16: 7645894.566 ops/s
Iteration  17: 7675066.518 ops/s
Iteration  18: 7717854.678 ops/s
Iteration  19: 7476423.934 ops/s
Iteration  20: 7739529.611 ops/s
Iteration  21: 7670548.642 ops/s
Iteration  22: 7666004.219 ops/s
Iteration  23: 7738030.674 ops/s
Iteration  24: 7713043.075 ops/s
Iteration  25: 7696870.376 ops/s
Iteration  26: 7702172.614 ops/s
Iteration  27: 7665083.815 ops/s
Iteration  28: 7624662.776 ops/s
Iteration  29: 7675391.910 ops/s
Iteration  30: 7714157.917 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_emptyConditional":
  7689279.799 ±(99.9%) 33446.102 ops/s [Average]
  (min, avg, max) = (7476423.934, 7689279.799, 7757807.708), stdev = 50060.555
  CI (99.9%): [7655833.696, 7722725.901] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_emptyConditional  thrpt   30  7689279.799 ± 33446.102  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedSync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedSync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2655843.755 ops/s
# Warmup Iteration   2: 3974016.759 ops/s
# Warmup Iteration   3: 4695563.857 ops/s
# Warmup Iteration   4: 4659385.866 ops/s
# Warmup Iteration   5: 4651196.181 ops/s
# Warmup Iteration   6: 4661205.887 ops/s
# Warmup Iteration   7: 4668791.271 ops/s
# Warmup Iteration   8: 4694449.987 ops/s
# Warmup Iteration   9: 4658750.055 ops/s
# Warmup Iteration  10: 4652423.657 ops/s
# Warmup Iteration  11: 4649936.418 ops/s
# Warmup Iteration  12: 4686385.328 ops/s
# Warmup Iteration  13: 4646333.566 ops/s
# Warmup Iteration  14: 4662865.342 ops/s
# Warmup Iteration  15: 4669158.686 ops/s
# Warmup Iteration  16: 4682913.961 ops/s
# Warmup Iteration  17: 4662724.898 ops/s
# Warmup Iteration  18: 4687340.303 ops/s
# Warmup Iteration  19: 4691216.065 ops/s
# Warmup Iteration  20: 4659613.375 ops/s
# Warmup Iteration  21: 4654772.276 ops/s
# Warmup Iteration  22: 4667702.081 ops/s
# Warmup Iteration  23: 4561871.193 ops/s
# Warmup Iteration  24: 4660257.043 ops/s
# Warmup Iteration  25: 4660172.303 ops/s
# Warmup Iteration  26: 4673162.969 ops/s
# Warmup Iteration  27: 4665169.558 ops/s
# Warmup Iteration  28: 4645426.469 ops/s
# Warmup Iteration  29: 4681828.650 ops/s
# Warmup Iteration  30: 4692108.333 ops/s
Iteration   1: 4674602.315 ops/s
Iteration   2: 4633420.765 ops/s
Iteration   3: 4630591.966 ops/s
Iteration   4: 4660576.745 ops/s
Iteration   5: 4683802.213 ops/s
Iteration   6: 4680456.217 ops/s
Iteration   7: 4659331.463 ops/s
Iteration   8: 4658384.412 ops/s
Iteration   9: 4659584.620 ops/s
Iteration  10: 4641790.842 ops/s
Iteration  11: 4664617.328 ops/s
Iteration  12: 4670343.988 ops/s
Iteration  13: 4660454.225 ops/s
Iteration  14: 4699039.075 ops/s
Iteration  15: 4651707.011 ops/s
Iteration  16: 4669646.128 ops/s
Iteration  17: 4659195.910 ops/s
Iteration  18: 4666723.194 ops/s
Iteration  19: 4577973.325 ops/s
Iteration  20: 4683804.141 ops/s
Iteration  21: 4653846.015 ops/s
Iteration  22: 4584260.246 ops/s
Iteration  23: 4692284.306 ops/s
Iteration  24: 4685049.622 ops/s
Iteration  25: 4651981.558 ops/s
Iteration  26: 4685414.447 ops/s
Iteration  27: 4652070.156 ops/s
Iteration  28: 4695832.838 ops/s
Iteration  29: 4669358.548 ops/s
Iteration  30: 4674119.307 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedSync":
  4661008.764 ±(99.9%) 18409.208 ops/s [Average]
  (min, avg, max) = (4577973.325, 4661008.764, 4699039.075), stdev = 27554.037
  CI (99.9%): [4642599.557, 4679417.972] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_conditionalFusedSync  thrpt   30  4661008.764 ± 18409.208  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalCancel1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalCancel1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3743885.647 ops/s
# Warmup Iteration   2: 5108543.858 ops/s
# Warmup Iteration   3: 5815660.296 ops/s
# Warmup Iteration   4: 5819768.391 ops/s
# Warmup Iteration   5: 5851800.912 ops/s
# Warmup Iteration   6: 5782656.045 ops/s
# Warmup Iteration   7: 5822655.466 ops/s
# Warmup Iteration   8: 5784055.806 ops/s
# Warmup Iteration   9: 5784009.969 ops/s
# Warmup Iteration  10: 5851550.786 ops/s
# Warmup Iteration  11: 5863979.288 ops/s
# Warmup Iteration  12: 5816982.734 ops/s
# Warmup Iteration  13: 5843786.145 ops/s
# Warmup Iteration  14: 5813145.735 ops/s
# Warmup Iteration  15: 5817757.656 ops/s
# Warmup Iteration  16: 5832490.339 ops/s
# Warmup Iteration  17: 5767816.037 ops/s
# Warmup Iteration  18: 5799520.783 ops/s
# Warmup Iteration  19: 5841625.466 ops/s
# Warmup Iteration  20: 5844725.817 ops/s
# Warmup Iteration  21: 5824229.777 ops/s
# Warmup Iteration  22: 5836464.779 ops/s
# Warmup Iteration  23: 5829879.225 ops/s
# Warmup Iteration  24: 5839338.842 ops/s
# Warmup Iteration  25: 5797938.367 ops/s
# Warmup Iteration  26: 5822333.863 ops/s
# Warmup Iteration  27: 5833613.970 ops/s
# Warmup Iteration  28: 5852449.989 ops/s
# Warmup Iteration  29: 5833222.076 ops/s
# Warmup Iteration  30: 5843077.732 ops/s
Iteration   1: 5806072.865 ops/s
Iteration   2: 5802003.347 ops/s
Iteration   3: 5846309.549 ops/s
Iteration   4: 5845865.566 ops/s
Iteration   5: 5840289.360 ops/s
Iteration   6: 5835003.753 ops/s
Iteration   7: 5846745.977 ops/s
Iteration   8: 5843549.476 ops/s
Iteration   9: 5801618.423 ops/s
Iteration  10: 5844799.670 ops/s
Iteration  11: 5834378.992 ops/s
Iteration  12: 5831774.183 ops/s
Iteration  13: 5833848.920 ops/s
Iteration  14: 5830268.429 ops/s
Iteration  15: 5841632.367 ops/s
Iteration  16: 5764228.473 ops/s
Iteration  17: 5817173.086 ops/s
Iteration  18: 5773164.160 ops/s
Iteration  19: 5763553.797 ops/s
Iteration  20: 5838714.020 ops/s
Iteration  21: 5822569.816 ops/s
Iteration  22: 5799170.510 ops/s
Iteration  23: 5810586.203 ops/s
Iteration  24: 5825242.730 ops/s
Iteration  25: 5778653.515 ops/s
Iteration  26: 5837184.184 ops/s
Iteration  27: 5769472.440 ops/s
Iteration  28: 5826280.518 ops/s
Iteration  29: 5812732.879 ops/s
Iteration  30: 5809546.801 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalCancel1":
  5817747.800 ±(99.9%) 17484.637 ops/s [Average]
  (min, avg, max) = (5763553.797, 5817747.800, 5846745.977), stdev = 26170.184
  CI (99.9%): [5800263.163, 5835232.438] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_conditionalCancel1  thrpt   30  5817747.800 ± 17484.637  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 192599.504 ops/s
# Warmup Iteration   2: 281265.646 ops/s
# Warmup Iteration   3: 268028.504 ops/s
# Warmup Iteration   4: 307173.062 ops/s
# Warmup Iteration   5: 316444.867 ops/s
# Warmup Iteration   6: 316490.750 ops/s
# Warmup Iteration   7: 318377.920 ops/s
# Warmup Iteration   8: 316377.172 ops/s
# Warmup Iteration   9: 318723.159 ops/s
# Warmup Iteration  10: 316043.182 ops/s
# Warmup Iteration  11: 315779.474 ops/s
# Warmup Iteration  12: 317132.591 ops/s
# Warmup Iteration  13: 314566.497 ops/s
# Warmup Iteration  14: 313962.615 ops/s
# Warmup Iteration  15: 316626.215 ops/s
# Warmup Iteration  16: 312714.721 ops/s
# Warmup Iteration  17: 326659.193 ops/s
# Warmup Iteration  18: 327213.654 ops/s
# Warmup Iteration  19: 328634.466 ops/s
# Warmup Iteration  20: 325613.555 ops/s
# Warmup Iteration  21: 327749.443 ops/s
# Warmup Iteration  22: 328214.451 ops/s
# Warmup Iteration  23: 327738.072 ops/s
# Warmup Iteration  24: 324815.767 ops/s
# Warmup Iteration  25: 327702.348 ops/s
# Warmup Iteration  26: 325952.778 ops/s
# Warmup Iteration  27: 327832.833 ops/s
# Warmup Iteration  28: 326038.233 ops/s
# Warmup Iteration  29: 328091.802 ops/s
# Warmup Iteration  30: 327733.185 ops/s
Iteration   1: 327372.749 ops/s
Iteration   2: 328277.032 ops/s
Iteration   3: 326753.655 ops/s
Iteration   4: 327445.877 ops/s
Iteration   5: 327142.871 ops/s
Iteration   6: 327716.000 ops/s
Iteration   7: 327348.124 ops/s
Iteration   8: 326940.424 ops/s
Iteration   9: 322806.563 ops/s
Iteration  10: 329758.113 ops/s
Iteration  11: 327401.109 ops/s
Iteration  12: 327055.565 ops/s
Iteration  13: 329329.333 ops/s
Iteration  14: 328482.545 ops/s
Iteration  15: 327014.289 ops/s
Iteration  16: 327570.729 ops/s
Iteration  17: 329272.822 ops/s
Iteration  18: 330458.842 ops/s
Iteration  19: 326904.880 ops/s
Iteration  20: 327343.569 ops/s
Iteration  21: 325531.439 ops/s
Iteration  22: 327756.997 ops/s
Iteration  23: 327244.284 ops/s
Iteration  24: 327199.089 ops/s
Iteration  25: 328431.034 ops/s
Iteration  26: 325981.031 ops/s
Iteration  27: 327387.686 ops/s
Iteration  28: 328407.876 ops/s
Iteration  29: 328887.397 ops/s
Iteration  30: 326697.158 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_badRequest":
  327530.636 ±(99.9%) 932.586 ops/s [Average]
  (min, avg, max) = (322806.563, 327530.636, 330458.842), stdev = 1395.850
  CI (99.9%): [326598.051, 328463.222] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
FlowableRangeLongTest._Benchmark.benchmark_badRequest  thrpt   30  327530.636 ± 932.586  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalCancel2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalCancel2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2774832.341 ops/s
# Warmup Iteration   2: 4080162.910 ops/s
# Warmup Iteration   3: 4549393.678 ops/s
# Warmup Iteration   4: 4634411.660 ops/s
# Warmup Iteration   5: 4592897.843 ops/s
# Warmup Iteration   6: 4597477.378 ops/s
# Warmup Iteration   7: 4577350.755 ops/s
# Warmup Iteration   8: 4564297.444 ops/s
# Warmup Iteration   9: 4610920.506 ops/s
# Warmup Iteration  10: 4612859.021 ops/s
# Warmup Iteration  11: 4565018.504 ops/s
# Warmup Iteration  12: 4569592.798 ops/s
# Warmup Iteration  13: 4598583.717 ops/s
# Warmup Iteration  14: 4595601.470 ops/s
# Warmup Iteration  15: 4603456.571 ops/s
# Warmup Iteration  16: 4566632.361 ops/s
# Warmup Iteration  17: 4539500.872 ops/s
# Warmup Iteration  18: 4562438.598 ops/s
# Warmup Iteration  19: 4547276.653 ops/s
# Warmup Iteration  20: 4588580.903 ops/s
# Warmup Iteration  21: 4604289.115 ops/s
# Warmup Iteration  22: 4573060.378 ops/s
# Warmup Iteration  23: 4575369.235 ops/s
# Warmup Iteration  24: 4546216.215 ops/s
# Warmup Iteration  25: 4577806.972 ops/s
# Warmup Iteration  26: 4569149.900 ops/s
# Warmup Iteration  27: 4575884.223 ops/s
# Warmup Iteration  28: 4581806.779 ops/s
# Warmup Iteration  29: 4535226.639 ops/s
# Warmup Iteration  30: 4621858.625 ops/s
Iteration   1: 4560464.826 ops/s
Iteration   2: 4574411.058 ops/s
Iteration   3: 4514472.081 ops/s
Iteration   4: 4525869.466 ops/s
Iteration   5: 4592856.942 ops/s
Iteration   6: 4591013.088 ops/s
Iteration   7: 4591047.341 ops/s
Iteration   8: 4539707.308 ops/s
Iteration   9: 4570851.374 ops/s
Iteration  10: 4566510.015 ops/s
Iteration  11: 4579311.223 ops/s
Iteration  12: 4602021.548 ops/s
Iteration  13: 4584816.998 ops/s
Iteration  14: 4562841.773 ops/s
Iteration  15: 4577670.587 ops/s
Iteration  16: 4568920.869 ops/s
Iteration  17: 4572326.133 ops/s
Iteration  18: 4609317.712 ops/s
Iteration  19: 4596073.919 ops/s
Iteration  20: 4537066.697 ops/s
Iteration  21: 4608575.993 ops/s
Iteration  22: 4560202.134 ops/s
Iteration  23: 4558830.089 ops/s
Iteration  24: 4541326.330 ops/s
Iteration  25: 4573140.851 ops/s
Iteration  26: 4570926.959 ops/s
Iteration  27: 4561493.470 ops/s
Iteration  28: 4520506.512 ops/s
Iteration  29: 4562263.872 ops/s
Iteration  30: 4568880.797 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_conditionalCancel2":
  4568123.932 ±(99.9%) 16297.793 ops/s [Average]
  (min, avg, max) = (4514472.081, 4568123.932, 4609317.712), stdev = 24393.771
  CI (99.9%): [4551826.139, 4584421.725] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_conditionalCancel2  thrpt   30  4568123.932 ± 16297.793  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapCombinerCombinerReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapCombinerCombinerReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 431893.145 ops/s
# Warmup Iteration   2: 519612.585 ops/s
# Warmup Iteration   3: 527260.244 ops/s
# Warmup Iteration   4: 564311.025 ops/s
# Warmup Iteration   5: 564385.137 ops/s
# Warmup Iteration   6: 563389.117 ops/s
# Warmup Iteration   7: 567173.899 ops/s
# Warmup Iteration   8: 562312.362 ops/s
# Warmup Iteration   9: 559658.037 ops/s
# Warmup Iteration  10: 559157.431 ops/s
# Warmup Iteration  11: 561258.594 ops/s
# Warmup Iteration  12: 558622.312 ops/s
# Warmup Iteration  13: 560651.249 ops/s
# Warmup Iteration  14: 559637.778 ops/s
# Warmup Iteration  15: 564278.915 ops/s
# Warmup Iteration  16: 560754.420 ops/s
# Warmup Iteration  17: 580818.938 ops/s
# Warmup Iteration  18: 581004.652 ops/s
# Warmup Iteration  19: 580757.147 ops/s
# Warmup Iteration  20: 581585.629 ops/s
# Warmup Iteration  21: 578575.131 ops/s
# Warmup Iteration  22: 574914.793 ops/s
# Warmup Iteration  23: 574828.400 ops/s
# Warmup Iteration  24: 579551.672 ops/s
# Warmup Iteration  25: 576732.046 ops/s
# Warmup Iteration  26: 580464.204 ops/s
# Warmup Iteration  27: 578468.026 ops/s
# Warmup Iteration  28: 575755.996 ops/s
# Warmup Iteration  29: 581774.377 ops/s
# Warmup Iteration  30: 578632.432 ops/s
Iteration   1: 583185.833 ops/s
Iteration   2: 578974.854 ops/s
Iteration   3: 578567.845 ops/s
Iteration   4: 581304.244 ops/s
Iteration   5: 579388.425 ops/s
Iteration   6: 576557.063 ops/s
Iteration   7: 579075.907 ops/s
Iteration   8: 573481.240 ops/s
Iteration   9: 576959.148 ops/s
Iteration  10: 578152.576 ops/s
Iteration  11: 580184.717 ops/s
Iteration  12: 579891.819 ops/s
Iteration  13: 578915.186 ops/s
Iteration  14: 579008.533 ops/s
Iteration  15: 578226.314 ops/s
Iteration  16: 583513.299 ops/s
Iteration  17: 581929.883 ops/s
Iteration  18: 583736.612 ops/s
Iteration  19: 580342.335 ops/s
Iteration  20: 579223.384 ops/s
Iteration  21: 579752.457 ops/s
Iteration  22: 576969.151 ops/s
Iteration  23: 580702.930 ops/s
Iteration  24: 578699.122 ops/s
Iteration  25: 578772.482 ops/s
Iteration  26: 583327.507 ops/s
Iteration  27: 579799.336 ops/s
Iteration  28: 576824.765 ops/s
Iteration  29: 578451.748 ops/s
Iteration  30: 579447.924 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapCombinerCombinerReturnsNull":
  579445.555 ±(99.9%) 1503.728 ops/s [Average]
  (min, avg, max) = (573481.240, 579445.555, 583736.612), stdev = 2250.709
  CI (99.9%): [577941.827, 580949.282] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_flatMapCombinerCombinerReturnsNull  thrpt   30  579445.555 ± 1503.728  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_nonFatalExceptionFromOverflowActionIsNotReportedFromUpstreamOperator$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_nonFatalExceptionFromOverflowActionIsNotReportedFromUpstreamOperator

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 529168.306 ops/s
# Warmup Iteration   2: 649078.330 ops/s
# Warmup Iteration   3: 675153.736 ops/s
# Warmup Iteration   4: 733639.558 ops/s
# Warmup Iteration   5: 731774.095 ops/s
# Warmup Iteration   6: 737750.225 ops/s
# Warmup Iteration   7: 736667.366 ops/s
# Warmup Iteration   8: 736874.234 ops/s
# Warmup Iteration   9: 734116.097 ops/s
# Warmup Iteration  10: 736186.821 ops/s
# Warmup Iteration  11: 732734.413 ops/s
# Warmup Iteration  12: 728531.697 ops/s
# Warmup Iteration  13: 731590.809 ops/s
# Warmup Iteration  14: 732369.635 ops/s
# Warmup Iteration  15: 727046.127 ops/s
# Warmup Iteration  16: 725077.201 ops/s
# Warmup Iteration  17: 754954.102 ops/s
# Warmup Iteration  18: 756269.369 ops/s
# Warmup Iteration  19: 758409.236 ops/s
# Warmup Iteration  20: 755952.614 ops/s
# Warmup Iteration  21: 757598.316 ops/s
# Warmup Iteration  22: 758444.604 ops/s
# Warmup Iteration  23: 759511.429 ops/s
# Warmup Iteration  24: 756485.230 ops/s
# Warmup Iteration  25: 760786.237 ops/s
# Warmup Iteration  26: 762547.549 ops/s
# Warmup Iteration  27: 754029.555 ops/s
# Warmup Iteration  28: 756390.137 ops/s
# Warmup Iteration  29: 764373.554 ops/s
# Warmup Iteration  30: 762931.899 ops/s
Iteration   1: 757725.793 ops/s
Iteration   2: 756127.443 ops/s
Iteration   3: 756208.076 ops/s
Iteration   4: 762193.331 ops/s
Iteration   5: 757891.177 ops/s
Iteration   6: 755787.272 ops/s
Iteration   7: 755971.582 ops/s
Iteration   8: 758731.523 ops/s
Iteration   9: 755949.894 ops/s
Iteration  10: 763796.118 ops/s
Iteration  11: 750351.003 ops/s
Iteration  12: 753132.218 ops/s
Iteration  13: 755702.098 ops/s
Iteration  14: 752535.160 ops/s
Iteration  15: 758983.825 ops/s
Iteration  16: 759737.289 ops/s
Iteration  17: 762391.459 ops/s
Iteration  18: 758527.705 ops/s
Iteration  19: 751417.882 ops/s
Iteration  20: 754666.211 ops/s
Iteration  21: 755159.075 ops/s
Iteration  22: 758243.388 ops/s
Iteration  23: 758845.690 ops/s
Iteration  24: 746365.270 ops/s
Iteration  25: 753738.658 ops/s
Iteration  26: 755734.817 ops/s
Iteration  27: 759870.615 ops/s
Iteration  28: 757832.944 ops/s
Iteration  29: 754919.028 ops/s
Iteration  30: 758521.731 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_nonFatalExceptionFromOverflowActionIsNotReportedFromUpstreamOperator":
  756568.609 ±(99.9%) 2438.746 ops/s [Average]
  (min, avg, max) = (746365.270, 756568.609, 763796.118), stdev = 3650.201
  CI (99.9%): [754129.863, 759007.355] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                  Mode  Cnt       Score      Error  Units
FlowableOnBackpressureDropTest._Benchmark.benchmark_nonFatalExceptionFromOverflowActionIsNotReportedFromUpstreamOperator  thrpt   30  756568.609 ± 2438.746  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_unsubscribeFromSynchronousInfiniteFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_unsubscribeFromSynchronousInfiniteFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4401061.722 ops/s
# Warmup Iteration   2: 5406061.115 ops/s
# Warmup Iteration   3: 5222317.438 ops/s
# Warmup Iteration   4: 5847974.559 ops/s
# Warmup Iteration   5: 5887365.318 ops/s
# Warmup Iteration   6: 5885687.546 ops/s
# Warmup Iteration   7: 5950780.009 ops/s
# Warmup Iteration   8: 5903104.879 ops/s
# Warmup Iteration   9: 5935201.604 ops/s
# Warmup Iteration  10: 5915526.205 ops/s
# Warmup Iteration  11: 5936327.947 ops/s
# Warmup Iteration  12: 5885311.876 ops/s
# Warmup Iteration  13: 5896471.462 ops/s
# Warmup Iteration  14: 5900653.150 ops/s
# Warmup Iteration  15: 5886463.253 ops/s
# Warmup Iteration  16: 5922297.031 ops/s
# Warmup Iteration  17: 5878338.504 ops/s
# Warmup Iteration  18: 5918695.740 ops/s
# Warmup Iteration  19: 5929909.841 ops/s
# Warmup Iteration  20: 5903651.321 ops/s
# Warmup Iteration  21: 5884397.976 ops/s
# Warmup Iteration  22: 5927859.068 ops/s
# Warmup Iteration  23: 5931036.937 ops/s
# Warmup Iteration  24: 5928555.741 ops/s
# Warmup Iteration  25: 5910079.647 ops/s
# Warmup Iteration  26: 5914804.191 ops/s
# Warmup Iteration  27: 5919567.637 ops/s
# Warmup Iteration  28: 5946577.890 ops/s
# Warmup Iteration  29: 5913466.458 ops/s
# Warmup Iteration  30: 5906977.776 ops/s
Iteration   1: 5903733.886 ops/s
Iteration   2: 5912193.784 ops/s
Iteration   3: 5927725.757 ops/s
Iteration   4: 5907901.329 ops/s
Iteration   5: 5911906.004 ops/s
Iteration   6: 5930247.933 ops/s
Iteration   7: 5938123.987 ops/s
Iteration   8: 5899311.490 ops/s
Iteration   9: 5830681.886 ops/s
Iteration  10: 5887979.105 ops/s
Iteration  11: 5872840.252 ops/s
Iteration  12: 5993570.863 ops/s
Iteration  13: 5925515.068 ops/s
Iteration  14: 5922988.834 ops/s
Iteration  15: 5938259.107 ops/s
Iteration  16: 5927464.961 ops/s
Iteration  17: 5919290.560 ops/s
Iteration  18: 5938634.374 ops/s
Iteration  19: 5903794.125 ops/s
Iteration  20: 5880714.829 ops/s
Iteration  21: 5897629.558 ops/s
Iteration  22: 5963810.025 ops/s
Iteration  23: 5901308.565 ops/s
Iteration  24: 5950614.586 ops/s
Iteration  25: 5913665.253 ops/s
Iteration  26: 5910643.293 ops/s
Iteration  27: 5910148.557 ops/s
Iteration  28: 5923446.166 ops/s
Iteration  29: 5913697.147 ops/s
Iteration  30: 5929473.133 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_unsubscribeFromSynchronousInfiniteFlowable":
  5916243.814 ±(99.9%) 19351.721 ops/s [Average]
  (min, avg, max) = (5830681.886, 5916243.814, 5993570.863), stdev = 28964.746
  CI (99.9%): [5896892.093, 5935595.534] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
FlowableTakeTest._Benchmark.benchmark_unsubscribeFromSynchronousInfiniteFlowable  thrpt   30  5916243.814 ± 19351.721  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnTerminateError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnTerminateError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 640249.714 ops/s
# Warmup Iteration   2: 760922.303 ops/s
# Warmup Iteration   3: 860918.978 ops/s
# Warmup Iteration   4: 867741.058 ops/s
# Warmup Iteration   5: 867270.067 ops/s
# Warmup Iteration   6: 869716.271 ops/s
# Warmup Iteration   7: 865703.847 ops/s
# Warmup Iteration   8: 865509.862 ops/s
# Warmup Iteration   9: 866642.025 ops/s
# Warmup Iteration  10: 866381.283 ops/s
# Warmup Iteration  11: 857322.065 ops/s
# Warmup Iteration  12: 862538.295 ops/s
# Warmup Iteration  13: 859980.878 ops/s
# Warmup Iteration  14: 858975.965 ops/s
# Warmup Iteration  15: 864429.476 ops/s
# Warmup Iteration  16: 856465.487 ops/s
# Warmup Iteration  17: 913292.281 ops/s
# Warmup Iteration  18: 919300.342 ops/s
# Warmup Iteration  19: 912322.925 ops/s
# Warmup Iteration  20: 904836.485 ops/s
# Warmup Iteration  21: 906171.768 ops/s
# Warmup Iteration  22: 911489.464 ops/s
# Warmup Iteration  23: 908815.356 ops/s
# Warmup Iteration  24: 907547.937 ops/s
# Warmup Iteration  25: 904760.134 ops/s
# Warmup Iteration  26: 910856.703 ops/s
# Warmup Iteration  27: 914794.043 ops/s
# Warmup Iteration  28: 908182.242 ops/s
# Warmup Iteration  29: 908465.582 ops/s
# Warmup Iteration  30: 909083.577 ops/s
Iteration   1: 908442.882 ops/s
Iteration   2: 908806.339 ops/s
Iteration   3: 914426.875 ops/s
Iteration   4: 908226.060 ops/s
Iteration   5: 907726.423 ops/s
Iteration   6: 911547.214 ops/s
Iteration   7: 910724.315 ops/s
Iteration   8: 911360.615 ops/s
Iteration   9: 905211.560 ops/s
Iteration  10: 906940.578 ops/s
Iteration  11: 911645.721 ops/s
Iteration  12: 893139.633 ops/s
Iteration  13: 906350.542 ops/s
Iteration  14: 913537.527 ops/s
Iteration  15: 909323.914 ops/s
Iteration  16: 906927.711 ops/s
Iteration  17: 910840.267 ops/s
Iteration  18: 904535.420 ops/s
Iteration  19: 904175.335 ops/s
Iteration  20: 910919.332 ops/s
Iteration  21: 912040.706 ops/s
Iteration  22: 906737.744 ops/s
Iteration  23: 902803.979 ops/s
Iteration  24: 910063.070 ops/s
Iteration  25: 911727.337 ops/s
Iteration  26: 911353.083 ops/s
Iteration  27: 912780.473 ops/s
Iteration  28: 909645.048 ops/s
Iteration  29: 907950.413 ops/s
Iteration  30: 913688.773 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnTerminateError":
  908786.630 ±(99.9%) 2801.175 ops/s [Average]
  (min, avg, max) = (893139.633, 908786.630, 914426.875), stdev = 4192.667
  CI (99.9%): [905985.455, 911587.804] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableDoOnTest._Benchmark.benchmark_doOnTerminateError  thrpt   30  908786.630 ± 2801.175  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalRequestOneByOne2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalRequestOneByOne2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2498326.124 ops/s
# Warmup Iteration   2: 3329694.359 ops/s
# Warmup Iteration   3: 3820961.940 ops/s
# Warmup Iteration   4: 3854844.840 ops/s
# Warmup Iteration   5: 3835867.086 ops/s
# Warmup Iteration   6: 3883953.465 ops/s
# Warmup Iteration   7: 3846293.893 ops/s
# Warmup Iteration   8: 3825268.506 ops/s
# Warmup Iteration   9: 3856016.834 ops/s
# Warmup Iteration  10: 3830209.161 ops/s
# Warmup Iteration  11: 3819782.828 ops/s
# Warmup Iteration  12: 3834771.281 ops/s
# Warmup Iteration  13: 3829588.465 ops/s
# Warmup Iteration  14: 3847166.384 ops/s
# Warmup Iteration  15: 3854591.069 ops/s
# Warmup Iteration  16: 3847298.583 ops/s
# Warmup Iteration  17: 3873124.057 ops/s
# Warmup Iteration  18: 3834349.008 ops/s
# Warmup Iteration  19: 3863903.736 ops/s
# Warmup Iteration  20: 3869386.393 ops/s
# Warmup Iteration  21: 3837021.678 ops/s
# Warmup Iteration  22: 3856676.636 ops/s
# Warmup Iteration  23: 3874497.201 ops/s
# Warmup Iteration  24: 3813076.272 ops/s
# Warmup Iteration  25: 3870492.203 ops/s
# Warmup Iteration  26: 3854592.705 ops/s
# Warmup Iteration  27: 3860098.901 ops/s
# Warmup Iteration  28: 3865944.238 ops/s
# Warmup Iteration  29: 3830189.080 ops/s
# Warmup Iteration  30: 3839285.857 ops/s
Iteration   1: 3852359.633 ops/s
Iteration   2: 3850839.672 ops/s
Iteration   3: 3883187.990 ops/s
Iteration   4: 3851502.324 ops/s
Iteration   5: 3861605.824 ops/s
Iteration   6: 3862109.155 ops/s
Iteration   7: 3841604.376 ops/s
Iteration   8: 3848465.268 ops/s
Iteration   9: 3858316.159 ops/s
Iteration  10: 3868411.696 ops/s
Iteration  11: 3882221.656 ops/s
Iteration  12: 3866456.465 ops/s
Iteration  13: 3860665.148 ops/s
Iteration  14: 3855204.883 ops/s
Iteration  15: 3867166.471 ops/s
Iteration  16: 3841824.030 ops/s
Iteration  17: 3851849.027 ops/s
Iteration  18: 3850014.625 ops/s
Iteration  19: 3855397.341 ops/s
Iteration  20: 3875857.061 ops/s
Iteration  21: 3849193.744 ops/s
Iteration  22: 3855717.611 ops/s
Iteration  23: 3862645.306 ops/s
Iteration  24: 3837408.411 ops/s
Iteration  25: 3840545.847 ops/s
Iteration  26: 3847962.118 ops/s
Iteration  27: 3862264.786 ops/s
Iteration  28: 3874386.381 ops/s
Iteration  29: 3888887.871 ops/s
Iteration  30: 3830329.004 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalRequestOneByOne2":
  3857813.329 ±(99.9%) 9319.841 ops/s [Average]
  (min, avg, max) = (3830329.004, 3857813.329, 3888887.871), stdev = 13949.500
  CI (99.9%): [3848493.489, 3867133.170] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
FlowableRangeLongTest._Benchmark.benchmark_conditionalRequestOneByOne2  thrpt   30  3857813.329 ± 9319.841  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_errorConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_errorConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 635749.661 ops/s
# Warmup Iteration   2: 789593.133 ops/s
# Warmup Iteration   3: 812456.531 ops/s
# Warmup Iteration   4: 843253.955 ops/s
# Warmup Iteration   5: 886233.073 ops/s
# Warmup Iteration   6: 880848.204 ops/s
# Warmup Iteration   7: 885333.150 ops/s
# Warmup Iteration   8: 878113.902 ops/s
# Warmup Iteration   9: 883465.335 ops/s
# Warmup Iteration  10: 884816.886 ops/s
# Warmup Iteration  11: 884321.274 ops/s
# Warmup Iteration  12: 883991.648 ops/s
# Warmup Iteration  13: 869574.768 ops/s
# Warmup Iteration  14: 883501.966 ops/s
# Warmup Iteration  15: 878258.293 ops/s
# Warmup Iteration  16: 873433.251 ops/s
# Warmup Iteration  17: 912532.291 ops/s
# Warmup Iteration  18: 915470.920 ops/s
# Warmup Iteration  19: 919501.511 ops/s
# Warmup Iteration  20: 919043.133 ops/s
# Warmup Iteration  21: 915116.611 ops/s
# Warmup Iteration  22: 913242.804 ops/s
# Warmup Iteration  23: 921677.291 ops/s
# Warmup Iteration  24: 920072.731 ops/s
# Warmup Iteration  25: 919860.482 ops/s
# Warmup Iteration  26: 916675.357 ops/s
# Warmup Iteration  27: 915080.558 ops/s
# Warmup Iteration  28: 924850.552 ops/s
# Warmup Iteration  29: 908234.534 ops/s
# Warmup Iteration  30: 918438.057 ops/s
Iteration   1: 920153.681 ops/s
Iteration   2: 913224.807 ops/s
Iteration   3: 922895.400 ops/s
Iteration   4: 917841.726 ops/s
Iteration   5: 908745.130 ops/s
Iteration   6: 918031.832 ops/s
Iteration   7: 900424.081 ops/s
Iteration   8: 925429.615 ops/s
Iteration   9: 926139.595 ops/s
Iteration  10: 918887.328 ops/s
Iteration  11: 918686.892 ops/s
Iteration  12: 917771.123 ops/s
Iteration  13: 921369.906 ops/s
Iteration  14: 913109.220 ops/s
Iteration  15: 915007.287 ops/s
Iteration  16: 920395.119 ops/s
Iteration  17: 916369.576 ops/s
Iteration  18: 918596.370 ops/s
Iteration  19: 917844.957 ops/s
Iteration  20: 921304.784 ops/s
Iteration  21: 923541.088 ops/s
Iteration  22: 921267.041 ops/s
Iteration  23: 917604.359 ops/s
Iteration  24: 916394.574 ops/s
Iteration  25: 917036.237 ops/s
Iteration  26: 922121.319 ops/s
Iteration  27: 918745.730 ops/s
Iteration  28: 914862.642 ops/s
Iteration  29: 918806.406 ops/s
Iteration  30: 910366.216 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_errorConditional":
  917765.801 ±(99.9%) 3425.630 ops/s [Average]
  (min, avg, max) = (900424.081, 917765.801, 926139.595), stdev = 5127.322
  CI (99.9%): [914340.172, 921191.431] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_errorConditional  thrpt   30  917765.801 ± 3425.630  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_streamOfNullConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_streamOfNullConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 514108.563 ops/s
# Warmup Iteration   2: 645850.443 ops/s
# Warmup Iteration   3: 659713.086 ops/s
# Warmup Iteration   4: 626459.480 ops/s
# Warmup Iteration   5: 715782.888 ops/s
# Warmup Iteration   6: 713611.499 ops/s
# Warmup Iteration   7: 715039.919 ops/s
# Warmup Iteration   8: 709479.011 ops/s
# Warmup Iteration   9: 711939.031 ops/s
# Warmup Iteration  10: 710882.004 ops/s
# Warmup Iteration  11: 713753.269 ops/s
# Warmup Iteration  12: 717085.256 ops/s
# Warmup Iteration  13: 718027.011 ops/s
# Warmup Iteration  14: 715309.926 ops/s
# Warmup Iteration  15: 711459.941 ops/s
# Warmup Iteration  16: 701417.653 ops/s
# Warmup Iteration  17: 737960.880 ops/s
# Warmup Iteration  18: 739374.767 ops/s
# Warmup Iteration  19: 738363.387 ops/s
# Warmup Iteration  20: 736663.849 ops/s
# Warmup Iteration  21: 733985.618 ops/s
# Warmup Iteration  22: 729598.660 ops/s
# Warmup Iteration  23: 739919.585 ops/s
# Warmup Iteration  24: 735901.712 ops/s
# Warmup Iteration  25: 735006.783 ops/s
# Warmup Iteration  26: 736834.214 ops/s
# Warmup Iteration  27: 739044.289 ops/s
# Warmup Iteration  28: 737162.923 ops/s
# Warmup Iteration  29: 731082.186 ops/s
# Warmup Iteration  30: 734204.900 ops/s
Iteration   1: 737700.397 ops/s
Iteration   2: 739818.302 ops/s
Iteration   3: 736630.773 ops/s
Iteration   4: 738055.714 ops/s
Iteration   5: 735878.610 ops/s
Iteration   6: 737064.452 ops/s
Iteration   7: 732405.971 ops/s
Iteration   8: 736589.325 ops/s
Iteration   9: 735216.516 ops/s
Iteration  10: 734752.330 ops/s
Iteration  11: 735391.401 ops/s
Iteration  12: 738376.925 ops/s
Iteration  13: 735458.224 ops/s
Iteration  14: 734470.586 ops/s
Iteration  15: 740942.551 ops/s
Iteration  16: 733973.844 ops/s
Iteration  17: 735296.276 ops/s
Iteration  18: 733781.283 ops/s
Iteration  19: 737576.934 ops/s
Iteration  20: 737825.978 ops/s
Iteration  21: 738918.270 ops/s
Iteration  22: 732843.930 ops/s
Iteration  23: 729512.707 ops/s
Iteration  24: 736727.843 ops/s
Iteration  25: 739827.051 ops/s
Iteration  26: 733561.557 ops/s
Iteration  27: 735850.275 ops/s
Iteration  28: 734688.208 ops/s
Iteration  29: 733944.040 ops/s
Iteration  30: 735303.029 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_streamOfNullConditional":
  735946.110 ±(99.9%) 1641.963 ops/s [Average]
  (min, avg, max) = (729512.707, 735946.110, 740942.551), stdev = 2457.613
  CI (99.9%): [734304.147, 737588.073] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableFromStreamTest._Benchmark.benchmark_streamOfNullConditional  thrpt   30  735946.110 ± 1641.963  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalErrorConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalErrorConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 606665.366 ops/s
# Warmup Iteration   2: 765366.188 ops/s
# Warmup Iteration   3: 868485.989 ops/s
# Warmup Iteration   4: 820336.638 ops/s
# Warmup Iteration   5: 892960.200 ops/s
# Warmup Iteration   6: 887423.775 ops/s
# Warmup Iteration   7: 883428.832 ops/s
# Warmup Iteration   8: 893985.275 ops/s
# Warmup Iteration   9: 892137.256 ops/s
# Warmup Iteration  10: 893362.452 ops/s
# Warmup Iteration  11: 877488.794 ops/s
# Warmup Iteration  12: 892290.695 ops/s
# Warmup Iteration  13: 894360.281 ops/s
# Warmup Iteration  14: 886640.064 ops/s
# Warmup Iteration  15: 882909.150 ops/s
# Warmup Iteration  16: 878529.126 ops/s
# Warmup Iteration  17: 948985.535 ops/s
# Warmup Iteration  18: 934785.320 ops/s
# Warmup Iteration  19: 945863.764 ops/s
# Warmup Iteration  20: 939549.805 ops/s
# Warmup Iteration  21: 944422.285 ops/s
# Warmup Iteration  22: 941724.062 ops/s
# Warmup Iteration  23: 940227.238 ops/s
# Warmup Iteration  24: 931424.185 ops/s
# Warmup Iteration  25: 937309.614 ops/s
# Warmup Iteration  26: 943326.181 ops/s
# Warmup Iteration  27: 948551.726 ops/s
# Warmup Iteration  28: 940149.708 ops/s
# Warmup Iteration  29: 936547.748 ops/s
# Warmup Iteration  30: 938424.159 ops/s
Iteration   1: 931562.414 ops/s
Iteration   2: 927133.682 ops/s
Iteration   3: 939328.418 ops/s
Iteration   4: 946761.584 ops/s
Iteration   5: 940679.154 ops/s
Iteration   6: 938729.261 ops/s
Iteration   7: 938561.803 ops/s
Iteration   8: 940389.309 ops/s
Iteration   9: 930767.595 ops/s
Iteration  10: 945188.678 ops/s
Iteration  11: 939314.442 ops/s
Iteration  12: 935780.291 ops/s
Iteration  13: 934694.057 ops/s
Iteration  14: 933970.427 ops/s
Iteration  15: 938054.070 ops/s
Iteration  16: 941433.025 ops/s
Iteration  17: 944271.326 ops/s
Iteration  18: 940473.855 ops/s
Iteration  19: 940176.239 ops/s
Iteration  20: 941568.399 ops/s
Iteration  21: 938809.145 ops/s
Iteration  22: 938934.703 ops/s
Iteration  23: 944882.619 ops/s
Iteration  24: 943559.963 ops/s
Iteration  25: 941098.544 ops/s
Iteration  26: 935085.894 ops/s
Iteration  27: 939586.060 ops/s
Iteration  28: 948804.399 ops/s
Iteration  29: 941295.525 ops/s
Iteration  30: 938800.735 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalErrorConditional":
  939323.187 ±(99.9%) 3139.689 ops/s [Average]
  (min, avg, max) = (927133.682, 939323.187, 948804.399), stdev = 4699.340
  CI (99.9%): [936183.498, 942462.877] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_normalErrorConditional  thrpt   30  939323.187 ± 3139.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_fusedPollCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_fusedPollCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 314733.924 ops/s
# Warmup Iteration   2: 412760.821 ops/s
# Warmup Iteration   3: 450301.215 ops/s
# Warmup Iteration   4: 472636.940 ops/s
# Warmup Iteration   5: 479837.471 ops/s
# Warmup Iteration   6: 479940.602 ops/s
# Warmup Iteration   7: 480961.104 ops/s
# Warmup Iteration   8: 478086.847 ops/s
# Warmup Iteration   9: 480011.958 ops/s
# Warmup Iteration  10: 481360.638 ops/s
# Warmup Iteration  11: 475925.017 ops/s
# Warmup Iteration  12: 478780.363 ops/s
# Warmup Iteration  13: 473557.094 ops/s
# Warmup Iteration  14: 470573.834 ops/s
# Warmup Iteration  15: 473670.017 ops/s
# Warmup Iteration  16: 475326.892 ops/s
# Warmup Iteration  17: 489102.907 ops/s
# Warmup Iteration  18: 490010.162 ops/s
# Warmup Iteration  19: 487090.445 ops/s
# Warmup Iteration  20: 489776.579 ops/s
# Warmup Iteration  21: 489791.717 ops/s
# Warmup Iteration  22: 491720.393 ops/s
# Warmup Iteration  23: 490447.252 ops/s
# Warmup Iteration  24: 483151.276 ops/s
# Warmup Iteration  25: 488094.496 ops/s
# Warmup Iteration  26: 490677.025 ops/s
# Warmup Iteration  27: 489932.627 ops/s
# Warmup Iteration  28: 488578.788 ops/s
# Warmup Iteration  29: 489930.792 ops/s
# Warmup Iteration  30: 488997.785 ops/s
Iteration   1: 491569.368 ops/s
Iteration   2: 492417.517 ops/s
Iteration   3: 490731.343 ops/s
Iteration   4: 494391.223 ops/s
Iteration   5: 493272.829 ops/s
Iteration   6: 493387.158 ops/s
Iteration   7: 489595.386 ops/s
Iteration   8: 491298.442 ops/s
Iteration   9: 491327.447 ops/s
Iteration  10: 490233.278 ops/s
Iteration  11: 488725.445 ops/s
Iteration  12: 491117.884 ops/s
Iteration  13: 494130.936 ops/s
Iteration  14: 488775.868 ops/s
Iteration  15: 484561.218 ops/s
Iteration  16: 490330.554 ops/s
Iteration  17: 491028.772 ops/s
Iteration  18: 492638.959 ops/s
Iteration  19: 488723.828 ops/s
Iteration  20: 490812.277 ops/s
Iteration  21: 488484.853 ops/s
Iteration  22: 488537.008 ops/s
Iteration  23: 486875.092 ops/s
Iteration  24: 493658.462 ops/s
Iteration  25: 490148.986 ops/s
Iteration  26: 494461.360 ops/s
Iteration  27: 493247.037 ops/s
Iteration  28: 491004.736 ops/s
Iteration  29: 489177.202 ops/s
Iteration  30: 489752.613 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_fusedPollCrash":
  490813.903 ±(99.9%) 1546.307 ops/s [Average]
  (min, avg, max) = (484561.218, 490813.903, 494461.360), stdev = 2314.440
  CI (99.9%): [489267.595, 492360.210] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_fusedPollCrash  thrpt   30  490813.903 ± 1546.307  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_pollThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_pollThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 310589.699 ops/s
# Warmup Iteration   2: 441459.727 ops/s
# Warmup Iteration   3: 480542.175 ops/s
# Warmup Iteration   4: 496350.272 ops/s
# Warmup Iteration   5: 497622.784 ops/s
# Warmup Iteration   6: 495553.350 ops/s
# Warmup Iteration   7: 491113.932 ops/s
# Warmup Iteration   8: 494687.667 ops/s
# Warmup Iteration   9: 497235.387 ops/s
# Warmup Iteration  10: 494637.070 ops/s
# Warmup Iteration  11: 493193.254 ops/s
# Warmup Iteration  12: 492150.319 ops/s
# Warmup Iteration  13: 491631.907 ops/s
# Warmup Iteration  14: 493141.801 ops/s
# Warmup Iteration  15: 495406.882 ops/s
# Warmup Iteration  16: 498685.897 ops/s
# Warmup Iteration  17: 512274.405 ops/s
# Warmup Iteration  18: 501599.700 ops/s
# Warmup Iteration  19: 506418.587 ops/s
# Warmup Iteration  20: 503256.394 ops/s
# Warmup Iteration  21: 505227.644 ops/s
# Warmup Iteration  22: 506595.879 ops/s
# Warmup Iteration  23: 508442.557 ops/s
# Warmup Iteration  24: 506663.862 ops/s
# Warmup Iteration  25: 501687.442 ops/s
# Warmup Iteration  26: 513417.952 ops/s
# Warmup Iteration  27: 510037.945 ops/s
# Warmup Iteration  28: 510051.727 ops/s
# Warmup Iteration  29: 512073.025 ops/s
# Warmup Iteration  30: 505096.421 ops/s
Iteration   1: 506589.610 ops/s
Iteration   2: 509999.950 ops/s
Iteration   3: 509008.548 ops/s
Iteration   4: 508134.624 ops/s
Iteration   5: 507350.921 ops/s
Iteration   6: 508214.870 ops/s
Iteration   7: 509288.084 ops/s
Iteration   8: 510988.200 ops/s
Iteration   9: 510502.139 ops/s
Iteration  10: 506353.298 ops/s
Iteration  11: 508107.956 ops/s
Iteration  12: 509815.715 ops/s
Iteration  13: 508134.880 ops/s
Iteration  14: 506481.251 ops/s
Iteration  15: 510645.052 ops/s
Iteration  16: 506484.122 ops/s
Iteration  17: 511512.939 ops/s
Iteration  18: 507921.202 ops/s
Iteration  19: 510795.221 ops/s
Iteration  20: 508891.208 ops/s
Iteration  21: 505682.139 ops/s
Iteration  22: 513204.640 ops/s
Iteration  23: 509102.276 ops/s
Iteration  24: 507037.930 ops/s
Iteration  25: 505718.158 ops/s
Iteration  26: 504388.138 ops/s
Iteration  27: 510329.796 ops/s
Iteration  28: 507826.544 ops/s
Iteration  29: 506308.589 ops/s
Iteration  30: 505533.493 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_pollThrows":
  508345.050 ±(99.9%) 1396.048 ops/s [Average]
  (min, avg, max) = (504388.138, 508345.050, 513204.640), stdev = 2089.539
  CI (99.9%): [506949.002, 509741.098] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_pollThrows  thrpt   30  508345.050 ± 1396.048  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_invalidSubscriberCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_invalidSubscriberCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 327079.214 ops/s
# Warmup Iteration   2: 412099.658 ops/s
# Warmup Iteration   3: 450472.466 ops/s
# Warmup Iteration   4: 459249.180 ops/s
# Warmup Iteration   5: 462462.572 ops/s
# Warmup Iteration   6: 460251.167 ops/s
# Warmup Iteration   7: 462649.451 ops/s
# Warmup Iteration   8: 462695.836 ops/s
# Warmup Iteration   9: 458958.116 ops/s
# Warmup Iteration  10: 455969.575 ops/s
# Warmup Iteration  11: 457459.380 ops/s
# Warmup Iteration  12: 452507.634 ops/s
# Warmup Iteration  13: 452973.079 ops/s
# Warmup Iteration  14: 455530.051 ops/s
# Warmup Iteration  15: 457788.377 ops/s
# Warmup Iteration  16: 454045.197 ops/s
# Warmup Iteration  17: 450784.940 ops/s
# Warmup Iteration  18: 465716.664 ops/s
# Warmup Iteration  19: 471348.001 ops/s
# Warmup Iteration  20: 470016.753 ops/s
# Warmup Iteration  21: 462800.223 ops/s
# Warmup Iteration  22: 462540.132 ops/s
# Warmup Iteration  23: 468918.334 ops/s
# Warmup Iteration  24: 469121.596 ops/s
# Warmup Iteration  25: 467251.355 ops/s
# Warmup Iteration  26: 468659.964 ops/s
# Warmup Iteration  27: 470456.876 ops/s
# Warmup Iteration  28: 468211.657 ops/s
# Warmup Iteration  29: 469340.370 ops/s
# Warmup Iteration  30: 469102.478 ops/s
Iteration   1: 470471.391 ops/s
Iteration   2: 466764.921 ops/s
Iteration   3: 463178.158 ops/s
Iteration   4: 471929.747 ops/s
Iteration   5: 469522.094 ops/s
Iteration   6: 466931.447 ops/s
Iteration   7: 464159.511 ops/s
Iteration   8: 469438.008 ops/s
Iteration   9: 464944.648 ops/s
Iteration  10: 464489.435 ops/s
Iteration  11: 465165.379 ops/s
Iteration  12: 471077.087 ops/s
Iteration  13: 467336.929 ops/s
Iteration  14: 469603.496 ops/s
Iteration  15: 471227.998 ops/s
Iteration  16: 467603.810 ops/s
Iteration  17: 461749.256 ops/s
Iteration  18: 468450.179 ops/s
Iteration  19: 469838.109 ops/s
Iteration  20: 466660.965 ops/s
Iteration  21: 472796.499 ops/s
Iteration  22: 468083.921 ops/s
Iteration  23: 469273.887 ops/s
Iteration  24: 468330.784 ops/s
Iteration  25: 467109.131 ops/s
Iteration  26: 466265.002 ops/s
Iteration  27: 469273.621 ops/s
Iteration  28: 467994.567 ops/s
Iteration  29: 467242.523 ops/s
Iteration  30: 469453.828 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_invalidSubscriberCount":
  467878.878 ±(99.9%) 1737.881 ops/s [Average]
  (min, avg, max) = (461749.256, 467878.878, 472796.499), stdev = 2601.178
  CI (99.9%): [466140.997, 469616.758] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ParallelMapOptionalTest._Benchmark.benchmark_invalidSubscriberCount  thrpt   30  467878.878 ± 1737.881  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mapperChashConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mapperChashConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 446951.150 ops/s
# Warmup Iteration   2: 568813.738 ops/s
# Warmup Iteration   3: 594727.426 ops/s
# Warmup Iteration   4: 591834.617 ops/s
# Warmup Iteration   5: 649793.707 ops/s
# Warmup Iteration   6: 651981.537 ops/s
# Warmup Iteration   7: 648611.075 ops/s
# Warmup Iteration   8: 642973.940 ops/s
# Warmup Iteration   9: 646075.119 ops/s
# Warmup Iteration  10: 650530.767 ops/s
# Warmup Iteration  11: 646697.170 ops/s
# Warmup Iteration  12: 644729.965 ops/s
# Warmup Iteration  13: 650557.410 ops/s
# Warmup Iteration  14: 647651.915 ops/s
# Warmup Iteration  15: 640858.806 ops/s
# Warmup Iteration  16: 647512.656 ops/s
# Warmup Iteration  17: 670308.697 ops/s
# Warmup Iteration  18: 672365.110 ops/s
# Warmup Iteration  19: 675720.312 ops/s
# Warmup Iteration  20: 667350.791 ops/s
# Warmup Iteration  21: 669714.261 ops/s
# Warmup Iteration  22: 669907.203 ops/s
# Warmup Iteration  23: 662937.366 ops/s
# Warmup Iteration  24: 673663.209 ops/s
# Warmup Iteration  25: 673134.762 ops/s
# Warmup Iteration  26: 671390.470 ops/s
# Warmup Iteration  27: 669111.295 ops/s
# Warmup Iteration  28: 668549.725 ops/s
# Warmup Iteration  29: 671083.813 ops/s
# Warmup Iteration  30: 669819.481 ops/s
Iteration   1: 668720.450 ops/s
Iteration   2: 669913.017 ops/s
Iteration   3: 661108.809 ops/s
Iteration   4: 669812.694 ops/s
Iteration   5: 670438.754 ops/s
Iteration   6: 675080.519 ops/s
Iteration   7: 667507.505 ops/s
Iteration   8: 667264.499 ops/s
Iteration   9: 666060.773 ops/s
Iteration  10: 668253.615 ops/s
Iteration  11: 671827.182 ops/s
Iteration  12: 668703.747 ops/s
Iteration  13: 669221.790 ops/s
Iteration  14: 669565.046 ops/s
Iteration  15: 669689.183 ops/s
Iteration  16: 666351.134 ops/s
Iteration  17: 666033.041 ops/s
Iteration  18: 668385.766 ops/s
Iteration  19: 666376.145 ops/s
Iteration  20: 666451.526 ops/s
Iteration  21: 671752.304 ops/s
Iteration  22: 661829.052 ops/s
Iteration  23: 673431.642 ops/s
Iteration  24: 669574.106 ops/s
Iteration  25: 669474.424 ops/s
Iteration  26: 670704.509 ops/s
Iteration  27: 667306.947 ops/s
Iteration  28: 669104.999 ops/s
Iteration  29: 667118.144 ops/s
Iteration  30: 651965.652 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_mapperChashConditional":
  667967.566 ±(99.9%) 2781.195 ops/s [Average]
  (min, avg, max) = (651965.652, 667967.566, 675080.519), stdev = 4162.762
  CI (99.9%): [665186.371, 670748.761] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_mapperChashConditional  thrpt   30  667967.566 ± 2781.195  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 217095.373 ops/s
# Warmup Iteration   2: 277625.860 ops/s
# Warmup Iteration   3: 271762.058 ops/s
# Warmup Iteration   4: 288445.828 ops/s
# Warmup Iteration   5: 299806.450 ops/s
# Warmup Iteration   6: 299732.545 ops/s
# Warmup Iteration   7: 299478.985 ops/s
# Warmup Iteration   8: 299146.520 ops/s
# Warmup Iteration   9: 299565.854 ops/s
# Warmup Iteration  10: 299025.167 ops/s
# Warmup Iteration  11: 300909.828 ops/s
# Warmup Iteration  12: 299549.806 ops/s
# Warmup Iteration  13: 299918.707 ops/s
# Warmup Iteration  14: 299167.595 ops/s
# Warmup Iteration  15: 298571.989 ops/s
# Warmup Iteration  16: 299716.976 ops/s
# Warmup Iteration  17: 311056.082 ops/s
# Warmup Iteration  18: 312296.675 ops/s
# Warmup Iteration  19: 310516.900 ops/s
# Warmup Iteration  20: 311316.804 ops/s
# Warmup Iteration  21: 309834.043 ops/s
# Warmup Iteration  22: 310440.796 ops/s
# Warmup Iteration  23: 307448.777 ops/s
# Warmup Iteration  24: 309615.873 ops/s
# Warmup Iteration  25: 309566.496 ops/s
# Warmup Iteration  26: 306503.715 ops/s
# Warmup Iteration  27: 308251.507 ops/s
# Warmup Iteration  28: 308216.984 ops/s
# Warmup Iteration  29: 309502.182 ops/s
# Warmup Iteration  30: 308888.573 ops/s
Iteration   1: 309596.095 ops/s
Iteration   2: 307056.760 ops/s
Iteration   3: 309186.812 ops/s
Iteration   4: 308446.762 ops/s
Iteration   5: 310461.780 ops/s
Iteration   6: 306104.082 ops/s
Iteration   7: 310293.339 ops/s
Iteration   8: 307556.425 ops/s
Iteration   9: 309723.519 ops/s
Iteration  10: 310971.558 ops/s
Iteration  11: 309633.638 ops/s
Iteration  12: 308642.873 ops/s
Iteration  13: 307983.718 ops/s
Iteration  14: 309740.437 ops/s
Iteration  15: 302286.428 ops/s
Iteration  16: 308640.025 ops/s
Iteration  17: 305890.373 ops/s
Iteration  18: 310151.423 ops/s
Iteration  19: 310516.333 ops/s
Iteration  20: 309637.826 ops/s
Iteration  21: 309570.870 ops/s
Iteration  22: 307268.680 ops/s
Iteration  23: 305908.764 ops/s
Iteration  24: 310096.733 ops/s
Iteration  25: 308213.576 ops/s
Iteration  26: 309356.004 ops/s
Iteration  27: 308479.001 ops/s
Iteration  28: 305840.788 ops/s
Iteration  29: 308416.332 ops/s
Iteration  30: 307863.568 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe":
  308451.151 ±(99.9%) 1252.081 ops/s [Average]
  (min, avg, max) = (302286.428, 308451.151, 310971.558), stdev = 1874.055
  CI (99.9%): [307199.070, 309703.231] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  308451.151 ± 1252.081  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedNoneAsync2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedNoneAsync2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 860668.947 ops/s
# Warmup Iteration   2: 1245124.735 ops/s
# Warmup Iteration   3: 1467416.095 ops/s
# Warmup Iteration   4: 1484841.171 ops/s
# Warmup Iteration   5: 1477632.149 ops/s
# Warmup Iteration   6: 1475672.121 ops/s
# Warmup Iteration   7: 1471409.645 ops/s
# Warmup Iteration   8: 1474546.332 ops/s
# Warmup Iteration   9: 1472119.575 ops/s
# Warmup Iteration  10: 1467359.792 ops/s
# Warmup Iteration  11: 1473228.162 ops/s
# Warmup Iteration  12: 1471572.390 ops/s
# Warmup Iteration  13: 1475847.372 ops/s
# Warmup Iteration  14: 1486461.755 ops/s
# Warmup Iteration  15: 1463986.073 ops/s
# Warmup Iteration  16: 1462161.988 ops/s
# Warmup Iteration  17: 1464679.149 ops/s
# Warmup Iteration  18: 1471439.554 ops/s
# Warmup Iteration  19: 1458060.459 ops/s
# Warmup Iteration  20: 1466547.798 ops/s
# Warmup Iteration  21: 1476126.498 ops/s
# Warmup Iteration  22: 1476681.464 ops/s
# Warmup Iteration  23: 1466439.316 ops/s
# Warmup Iteration  24: 1452236.602 ops/s
# Warmup Iteration  25: 1465756.742 ops/s
# Warmup Iteration  26: 1471475.118 ops/s
# Warmup Iteration  27: 1472781.795 ops/s
# Warmup Iteration  28: 1483804.623 ops/s
# Warmup Iteration  29: 1437387.379 ops/s
# Warmup Iteration  30: 1458044.484 ops/s
Iteration   1: 1461242.295 ops/s
Iteration   2: 1469412.693 ops/s
Iteration   3: 1475044.404 ops/s
Iteration   4: 1465120.821 ops/s
Iteration   5: 1463252.750 ops/s
Iteration   6: 1478111.124 ops/s
Iteration   7: 1477283.798 ops/s
Iteration   8: 1474589.894 ops/s
Iteration   9: 1468636.454 ops/s
Iteration  10: 1472492.760 ops/s
Iteration  11: 1466822.973 ops/s
Iteration  12: 1472796.472 ops/s
Iteration  13: 1462219.053 ops/s
Iteration  14: 1467081.522 ops/s
Iteration  15: 1463827.400 ops/s
Iteration  16: 1466338.949 ops/s
Iteration  17: 1470399.234 ops/s
Iteration  18: 1469478.703 ops/s
Iteration  19: 1473671.581 ops/s
Iteration  20: 1465553.213 ops/s
Iteration  21: 1478012.498 ops/s
Iteration  22: 1464899.362 ops/s
Iteration  23: 1463297.436 ops/s
Iteration  24: 1473811.910 ops/s
Iteration  25: 1464736.980 ops/s
Iteration  26: 1468890.605 ops/s
Iteration  27: 1456744.795 ops/s
Iteration  28: 1467070.783 ops/s
Iteration  29: 1470068.029 ops/s
Iteration  30: 1461280.251 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedNoneAsync2":
  1468406.291 ±(99.9%) 3627.069 ops/s [Average]
  (min, avg, max) = (1456744.795, 1468406.291, 1478111.124), stdev = 5428.827
  CI (99.9%): [1464779.222, 1472033.361] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
FlowableFilterTest._Benchmark.benchmark_conditionalFusedNoneAsync2  thrpt   30  1468406.291 ± 3627.069  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedNoneAsync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedNoneAsync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 865694.656 ops/s
# Warmup Iteration   2: 1114880.409 ops/s
# Warmup Iteration   3: 1322133.736 ops/s
# Warmup Iteration   4: 1322016.184 ops/s
# Warmup Iteration   5: 1324253.524 ops/s
# Warmup Iteration   6: 1321892.592 ops/s
# Warmup Iteration   7: 1321475.175 ops/s
# Warmup Iteration   8: 1321134.407 ops/s
# Warmup Iteration   9: 1322250.522 ops/s
# Warmup Iteration  10: 1316859.904 ops/s
# Warmup Iteration  11: 1324262.350 ops/s
# Warmup Iteration  12: 1312812.744 ops/s
# Warmup Iteration  13: 1323133.113 ops/s
# Warmup Iteration  14: 1320719.540 ops/s
# Warmup Iteration  15: 1321321.502 ops/s
# Warmup Iteration  16: 1318728.181 ops/s
# Warmup Iteration  17: 1293831.560 ops/s
# Warmup Iteration  18: 1309117.223 ops/s
# Warmup Iteration  19: 1310024.553 ops/s
# Warmup Iteration  20: 1310088.486 ops/s
# Warmup Iteration  21: 1315891.787 ops/s
# Warmup Iteration  22: 1304148.102 ops/s
# Warmup Iteration  23: 1310154.245 ops/s
# Warmup Iteration  24: 1297438.715 ops/s
# Warmup Iteration  25: 1305076.604 ops/s
# Warmup Iteration  26: 1308512.104 ops/s
# Warmup Iteration  27: 1310105.677 ops/s
# Warmup Iteration  28: 1300695.881 ops/s
# Warmup Iteration  29: 1304246.180 ops/s
# Warmup Iteration  30: 1311767.030 ops/s
Iteration   1: 1290082.828 ops/s
Iteration   2: 1303504.307 ops/s
Iteration   3: 1307367.493 ops/s
Iteration   4: 1320294.152 ops/s
Iteration   5: 1309596.880 ops/s
Iteration   6: 1302801.020 ops/s
Iteration   7: 1311172.595 ops/s
Iteration   8: 1320158.522 ops/s
Iteration   9: 1311281.264 ops/s
Iteration  10: 1314720.996 ops/s
Iteration  11: 1310295.047 ops/s
Iteration  12: 1313780.423 ops/s
Iteration  13: 1312222.740 ops/s
Iteration  14: 1311432.782 ops/s
Iteration  15: 1299122.398 ops/s
Iteration  16: 1296058.079 ops/s
Iteration  17: 1320213.778 ops/s
Iteration  18: 1312244.118 ops/s
Iteration  19: 1305294.532 ops/s
Iteration  20: 1308485.030 ops/s
Iteration  21: 1315771.440 ops/s
Iteration  22: 1310509.825 ops/s
Iteration  23: 1310474.099 ops/s
Iteration  24: 1299841.806 ops/s
Iteration  25: 1299332.886 ops/s
Iteration  26: 1311561.310 ops/s
Iteration  27: 1311407.676 ops/s
Iteration  28: 1305282.743 ops/s
Iteration  29: 1306514.344 ops/s
Iteration  30: 1305509.398 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedNoneAsync":
  1308544.484 ±(99.9%) 4718.309 ops/s [Average]
  (min, avg, max) = (1290082.828, 1308544.484, 1320294.152), stdev = 7062.144
  CI (99.9%): [1303826.175, 1313262.793] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
FlowableFilterTest._Benchmark.benchmark_conditionalFusedNoneAsync  thrpt   30  1308544.484 ± 4718.309  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedAsync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedAsync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 945058.175 ops/s
# Warmup Iteration   2: 1282288.832 ops/s
# Warmup Iteration   3: 1484341.039 ops/s
# Warmup Iteration   4: 1476041.037 ops/s
# Warmup Iteration   5: 1474167.185 ops/s
# Warmup Iteration   6: 1464694.397 ops/s
# Warmup Iteration   7: 1469516.983 ops/s
# Warmup Iteration   8: 1468994.178 ops/s
# Warmup Iteration   9: 1478315.918 ops/s
# Warmup Iteration  10: 1473524.929 ops/s
# Warmup Iteration  11: 1473000.304 ops/s
# Warmup Iteration  12: 1478897.692 ops/s
# Warmup Iteration  13: 1473915.035 ops/s
# Warmup Iteration  14: 1475901.932 ops/s
# Warmup Iteration  15: 1468724.428 ops/s
# Warmup Iteration  16: 1475285.908 ops/s
# Warmup Iteration  17: 1496010.763 ops/s
# Warmup Iteration  18: 1496131.457 ops/s
# Warmup Iteration  19: 1493216.563 ops/s
# Warmup Iteration  20: 1489780.404 ops/s
# Warmup Iteration  21: 1491847.661 ops/s
# Warmup Iteration  22: 1486929.691 ops/s
# Warmup Iteration  23: 1486653.599 ops/s
# Warmup Iteration  24: 1493550.336 ops/s
# Warmup Iteration  25: 1482695.419 ops/s
# Warmup Iteration  26: 1489819.205 ops/s
# Warmup Iteration  27: 1495444.194 ops/s
# Warmup Iteration  28: 1495820.380 ops/s
# Warmup Iteration  29: 1483965.287 ops/s
# Warmup Iteration  30: 1475213.068 ops/s
Iteration   1: 1507133.919 ops/s
Iteration   2: 1495392.345 ops/s
Iteration   3: 1497696.405 ops/s
Iteration   4: 1483284.626 ops/s
Iteration   5: 1462938.754 ops/s
Iteration   6: 1479973.995 ops/s
Iteration   7: 1485015.444 ops/s
Iteration   8: 1496273.723 ops/s
Iteration   9: 1498208.961 ops/s
Iteration  10: 1481302.603 ops/s
Iteration  11: 1484494.647 ops/s
Iteration  12: 1488177.270 ops/s
Iteration  13: 1489676.414 ops/s
Iteration  14: 1488380.996 ops/s
Iteration  15: 1501463.262 ops/s
Iteration  16: 1490453.396 ops/s
Iteration  17: 1487356.685 ops/s
Iteration  18: 1490341.693 ops/s
Iteration  19: 1491276.955 ops/s
Iteration  20: 1492886.383 ops/s
Iteration  21: 1489338.124 ops/s
Iteration  22: 1498484.738 ops/s
Iteration  23: 1492998.163 ops/s
Iteration  24: 1485716.922 ops/s
Iteration  25: 1482888.166 ops/s
Iteration  26: 1498117.955 ops/s
Iteration  27: 1486257.011 ops/s
Iteration  28: 1490314.100 ops/s
Iteration  29: 1488066.218 ops/s
Iteration  30: 1492968.249 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_conditionalFusedAsync":
  1489895.937 ±(99.9%) 5400.281 ops/s [Average]
  (min, avg, max) = (1462938.754, 1489895.937, 1507133.919), stdev = 8082.887
  CI (99.9%): [1484495.656, 1495296.219] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FlowableFilterTest._Benchmark.benchmark_conditionalFusedAsync  thrpt   30  1489895.937 ± 5400.281  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_asyncFusedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_asyncFusedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 662332.209 ops/s
# Warmup Iteration   2: 1078437.295 ops/s
# Warmup Iteration   3: 1266491.180 ops/s
# Warmup Iteration   4: 1270305.989 ops/s
# Warmup Iteration   5: 1260739.988 ops/s
# Warmup Iteration   6: 1274769.312 ops/s
# Warmup Iteration   7: 1280335.640 ops/s
# Warmup Iteration   8: 1274253.533 ops/s
# Warmup Iteration   9: 1277240.848 ops/s
# Warmup Iteration  10: 1281677.814 ops/s
# Warmup Iteration  11: 1273588.173 ops/s
# Warmup Iteration  12: 1269484.127 ops/s
# Warmup Iteration  13: 1272290.578 ops/s
# Warmup Iteration  14: 1274611.098 ops/s
# Warmup Iteration  15: 1279636.881 ops/s
# Warmup Iteration  16: 1284050.945 ops/s
# Warmup Iteration  17: 1276028.339 ops/s
# Warmup Iteration  18: 1270245.348 ops/s
# Warmup Iteration  19: 1260943.594 ops/s
# Warmup Iteration  20: 1273968.767 ops/s
# Warmup Iteration  21: 1274110.749 ops/s
# Warmup Iteration  22: 1284740.632 ops/s
# Warmup Iteration  23: 1277709.248 ops/s
# Warmup Iteration  24: 1250907.966 ops/s
# Warmup Iteration  25: 1275310.036 ops/s
# Warmup Iteration  26: 1274201.222 ops/s
# Warmup Iteration  27: 1281759.652 ops/s
# Warmup Iteration  28: 1282452.919 ops/s
# Warmup Iteration  29: 1280395.368 ops/s
# Warmup Iteration  30: 1273928.519 ops/s
Iteration   1: 1282460.022 ops/s
Iteration   2: 1277796.723 ops/s
Iteration   3: 1269165.031 ops/s
Iteration   4: 1270799.067 ops/s
Iteration   5: 1277042.119 ops/s
Iteration   6: 1272512.573 ops/s
Iteration   7: 1271197.437 ops/s
Iteration   8: 1256336.686 ops/s
Iteration   9: 1272291.948 ops/s
Iteration  10: 1248616.164 ops/s
Iteration  11: 1264132.704 ops/s
Iteration  12: 1274765.148 ops/s
Iteration  13: 1262596.107 ops/s
Iteration  14: 1268230.313 ops/s
Iteration  15: 1278952.743 ops/s
Iteration  16: 1288763.769 ops/s
Iteration  17: 1284641.513 ops/s
Iteration  18: 1279874.330 ops/s
Iteration  19: 1281565.084 ops/s
Iteration  20: 1270733.761 ops/s
Iteration  21: 1275787.663 ops/s
Iteration  22: 1281958.212 ops/s
Iteration  23: 1275960.450 ops/s
Iteration  24: 1281976.075 ops/s
Iteration  25: 1276091.486 ops/s
Iteration  26: 1264729.826 ops/s
Iteration  27: 1280497.100 ops/s
Iteration  28: 1279657.034 ops/s
Iteration  29: 1288657.623 ops/s
Iteration  30: 1253300.503 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_asyncFusedConditional":
  1273702.974 ±(99.9%) 6514.083 ops/s [Average]
  (min, avg, max) = (1248616.164, 1273702.974, 1288763.769), stdev = 9749.974
  CI (99.9%): [1267188.891, 1280217.057] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_asyncFusedConditional  thrpt   30  1273702.974 ± 6514.083  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancel2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancel2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 143392.406 ops/s
# Warmup Iteration   2: 185389.676 ops/s
# Warmup Iteration   3: 215106.917 ops/s
# Warmup Iteration   4: 216256.757 ops/s
# Warmup Iteration   5: 217915.560 ops/s
# Warmup Iteration   6: 219587.204 ops/s
# Warmup Iteration   7: 218340.226 ops/s
# Warmup Iteration   8: 218902.335 ops/s
# Warmup Iteration   9: 218358.871 ops/s
# Warmup Iteration  10: 217318.052 ops/s
# Warmup Iteration  11: 217604.843 ops/s
# Warmup Iteration  12: 217366.444 ops/s
# Warmup Iteration  13: 217490.479 ops/s
# Warmup Iteration  14: 216867.839 ops/s
# Warmup Iteration  15: 217204.254 ops/s
# Warmup Iteration  16: 211821.985 ops/s
# Warmup Iteration  17: 226587.722 ops/s
# Warmup Iteration  18: 226980.380 ops/s
# Warmup Iteration  19: 223328.981 ops/s
# Warmup Iteration  20: 227550.464 ops/s
# Warmup Iteration  21: 226152.963 ops/s
# Warmup Iteration  22: 226548.698 ops/s
# Warmup Iteration  23: 223777.557 ops/s
# Warmup Iteration  24: 225898.657 ops/s
# Warmup Iteration  25: 225770.589 ops/s
# Warmup Iteration  26: 224354.425 ops/s
# Warmup Iteration  27: 224724.524 ops/s
# Warmup Iteration  28: 226632.518 ops/s
# Warmup Iteration  29: 227360.975 ops/s
# Warmup Iteration  30: 226400.807 ops/s
Iteration   1: 226332.341 ops/s
Iteration   2: 228197.449 ops/s
Iteration   3: 225745.754 ops/s
Iteration   4: 226298.408 ops/s
Iteration   5: 227743.389 ops/s
Iteration   6: 225506.786 ops/s
Iteration   7: 226415.756 ops/s
Iteration   8: 227135.009 ops/s
Iteration   9: 227178.846 ops/s
Iteration  10: 226426.520 ops/s
Iteration  11: 225473.593 ops/s
Iteration  12: 225538.449 ops/s
Iteration  13: 227182.457 ops/s
Iteration  14: 225457.286 ops/s
Iteration  15: 226639.931 ops/s
Iteration  16: 227099.833 ops/s
Iteration  17: 225947.588 ops/s
Iteration  18: 228806.130 ops/s
Iteration  19: 227949.850 ops/s
Iteration  20: 227144.865 ops/s
Iteration  21: 227547.001 ops/s
Iteration  22: 226257.327 ops/s
Iteration  23: 226177.942 ops/s
Iteration  24: 227225.260 ops/s
Iteration  25: 226608.130 ops/s
Iteration  26: 223954.005 ops/s
Iteration  27: 226456.518 ops/s
Iteration  28: 225521.576 ops/s
Iteration  29: 225355.927 ops/s
Iteration  30: 227444.519 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancel2":
  226558.948 ±(99.9%) 683.086 ops/s [Average]
  (min, avg, max) = (223954.005, 226558.948, 228806.130), stdev = 1022.411
  CI (99.9%): [225875.862, 227242.034] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancel2  thrpt   30  226558.948 ± 683.086  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_delayedUpstreamSubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_delayedUpstreamSubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1236215.722 ops/s
# Warmup Iteration   2: 1774171.631 ops/s
# Warmup Iteration   3: 1896509.424 ops/s
# Warmup Iteration   4: 2325188.510 ops/s
# Warmup Iteration   5: 3000534.647 ops/s
# Warmup Iteration   6: 2970571.117 ops/s
# Warmup Iteration   7: 2975551.985 ops/s
# Warmup Iteration   8: 2966099.966 ops/s
# Warmup Iteration   9: 2981911.484 ops/s
# Warmup Iteration  10: 2997465.599 ops/s
# Warmup Iteration  11: 2964220.196 ops/s
# Warmup Iteration  12: 2972773.040 ops/s
# Warmup Iteration  13: 2962783.549 ops/s
# Warmup Iteration  14: 2981576.073 ops/s
# Warmup Iteration  15: 2975627.229 ops/s
# Warmup Iteration  16: 2980638.070 ops/s
# Warmup Iteration  17: 2961108.492 ops/s
# Warmup Iteration  18: 2975208.508 ops/s
# Warmup Iteration  19: 2975610.664 ops/s
# Warmup Iteration  20: 2977845.293 ops/s
# Warmup Iteration  21: 2948942.924 ops/s
# Warmup Iteration  22: 2968223.552 ops/s
# Warmup Iteration  23: 2974438.166 ops/s
# Warmup Iteration  24: 2959045.126 ops/s
# Warmup Iteration  25: 2974586.100 ops/s
# Warmup Iteration  26: 2978246.316 ops/s
# Warmup Iteration  27: 2996366.482 ops/s
# Warmup Iteration  28: 2962176.856 ops/s
# Warmup Iteration  29: 2974471.256 ops/s
# Warmup Iteration  30: 2964806.554 ops/s
Iteration   1: 2975903.459 ops/s
Iteration   2: 2980568.714 ops/s
Iteration   3: 2980412.592 ops/s
Iteration   4: 2977128.920 ops/s
Iteration   5: 2967365.949 ops/s
Iteration   6: 2960022.698 ops/s
Iteration   7: 2966452.789 ops/s
Iteration   8: 2985578.152 ops/s
Iteration   9: 2976906.773 ops/s
Iteration  10: 2981571.109 ops/s
Iteration  11: 2973055.083 ops/s
Iteration  12: 2966853.274 ops/s
Iteration  13: 2989410.327 ops/s
Iteration  14: 2970039.386 ops/s
Iteration  15: 2965143.654 ops/s
Iteration  16: 2995683.897 ops/s
Iteration  17: 2965319.280 ops/s
Iteration  18: 2980222.274 ops/s
Iteration  19: 2965602.045 ops/s
Iteration  20: 2957530.259 ops/s
Iteration  21: 2971889.628 ops/s
Iteration  22: 2970162.463 ops/s
Iteration  23: 2973901.951 ops/s
Iteration  24: 2978083.968 ops/s
Iteration  25: 2981127.217 ops/s
Iteration  26: 2981094.835 ops/s
Iteration  27: 2996936.150 ops/s
Iteration  28: 2980732.409 ops/s
Iteration  29: 2982557.787 ops/s
Iteration  30: 2963936.451 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_delayedUpstreamSubscription":
  2975373.116 ±(99.9%) 6482.102 ops/s [Average]
  (min, avg, max) = (2957530.259, 2975373.116, 2996936.150), stdev = 9702.105
  CI (99.9%): [2968891.015, 2981855.218] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
FlowableReplayTest._Benchmark.benchmark_delayedUpstreamSubscription  thrpt   30  2975373.116 ± 6482.102  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapperToCrashingCallable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapperToCrashingCallable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 719329.396 ops/s
# Warmup Iteration   2: 789388.948 ops/s
# Warmup Iteration   3: 841412.550 ops/s
# Warmup Iteration   4: 879217.563 ops/s
# Warmup Iteration   5: 880549.624 ops/s
# Warmup Iteration   6: 881142.870 ops/s
# Warmup Iteration   7: 880529.262 ops/s
# Warmup Iteration   8: 881833.799 ops/s
# Warmup Iteration   9: 877543.093 ops/s
# Warmup Iteration  10: 877533.359 ops/s
# Warmup Iteration  11: 877542.673 ops/s
# Warmup Iteration  12: 874357.172 ops/s
# Warmup Iteration  13: 870563.310 ops/s
# Warmup Iteration  14: 880236.057 ops/s
# Warmup Iteration  15: 869120.987 ops/s
# Warmup Iteration  16: 881333.446 ops/s
# Warmup Iteration  17: 908370.416 ops/s
# Warmup Iteration  18: 919222.631 ops/s
# Warmup Iteration  19: 925279.663 ops/s
# Warmup Iteration  20: 913196.106 ops/s
# Warmup Iteration  21: 920668.070 ops/s
# Warmup Iteration  22: 922878.055 ops/s
# Warmup Iteration  23: 921379.006 ops/s
# Warmup Iteration  24: 923850.153 ops/s
# Warmup Iteration  25: 917454.886 ops/s
# Warmup Iteration  26: 923380.844 ops/s
# Warmup Iteration  27: 918983.018 ops/s
# Warmup Iteration  28: 912245.045 ops/s
# Warmup Iteration  29: 920589.399 ops/s
# Warmup Iteration  30: 920787.866 ops/s
Iteration   1: 919956.759 ops/s
Iteration   2: 922834.969 ops/s
Iteration   3: 917930.337 ops/s
Iteration   4: 923849.959 ops/s
Iteration   5: 923967.257 ops/s
Iteration   6: 927403.558 ops/s
Iteration   7: 925273.536 ops/s
Iteration   8: 923388.540 ops/s
Iteration   9: 923735.511 ops/s
Iteration  10: 924726.488 ops/s
Iteration  11: 913229.576 ops/s
Iteration  12: 925057.508 ops/s
Iteration  13: 925061.266 ops/s
Iteration  14: 923344.687 ops/s
Iteration  15: 920150.614 ops/s
Iteration  16: 908249.236 ops/s
Iteration  17: 924773.082 ops/s
Iteration  18: 918770.610 ops/s
Iteration  19: 917213.420 ops/s
Iteration  20: 927352.926 ops/s
Iteration  21: 925594.796 ops/s
Iteration  22: 921824.255 ops/s
Iteration  23: 922268.468 ops/s
Iteration  24: 922550.301 ops/s
Iteration  25: 917637.998 ops/s
Iteration  26: 922265.541 ops/s
Iteration  27: 920843.784 ops/s
Iteration  28: 916543.907 ops/s
Iteration  29: 922998.419 ops/s
Iteration  30: 921425.683 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapperToCrashingCallable":
  921674.100 ±(99.9%) 2780.625 ops/s [Average]
  (min, avg, max) = (908249.236, 921674.100, 927403.558), stdev = 4161.909
  CI (99.9%): [918893.475, 924454.724] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableScalarXMapTest._Benchmark.benchmark_mapperToCrashingCallable  thrpt   30  921674.100 ± 2780.625  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 609307.714 ops/s
# Warmup Iteration   2: 740322.465 ops/s
# Warmup Iteration   3: 864306.235 ops/s
# Warmup Iteration   4: 800591.310 ops/s
# Warmup Iteration   5: 879295.254 ops/s
# Warmup Iteration   6: 877880.285 ops/s
# Warmup Iteration   7: 874557.609 ops/s
# Warmup Iteration   8: 878391.930 ops/s
# Warmup Iteration   9: 875164.772 ops/s
# Warmup Iteration  10: 875019.650 ops/s
# Warmup Iteration  11: 869720.064 ops/s
# Warmup Iteration  12: 871238.328 ops/s
# Warmup Iteration  13: 866032.505 ops/s
# Warmup Iteration  14: 874113.053 ops/s
# Warmup Iteration  15: 871646.614 ops/s
# Warmup Iteration  16: 869970.710 ops/s
# Warmup Iteration  17: 905310.213 ops/s
# Warmup Iteration  18: 912462.626 ops/s
# Warmup Iteration  19: 920010.272 ops/s
# Warmup Iteration  20: 912926.546 ops/s
# Warmup Iteration  21: 905825.564 ops/s
# Warmup Iteration  22: 914681.252 ops/s
# Warmup Iteration  23: 912634.635 ops/s
# Warmup Iteration  24: 907946.453 ops/s
# Warmup Iteration  25: 915437.251 ops/s
# Warmup Iteration  26: 909465.884 ops/s
# Warmup Iteration  27: 911251.194 ops/s
# Warmup Iteration  28: 913175.621 ops/s
# Warmup Iteration  29: 911427.327 ops/s
# Warmup Iteration  30: 910029.047 ops/s
Iteration   1: 909054.585 ops/s
Iteration   2: 914310.618 ops/s
Iteration   3: 910758.698 ops/s
Iteration   4: 915472.866 ops/s
Iteration   5: 914127.989 ops/s
Iteration   6: 912326.721 ops/s
Iteration   7: 903903.343 ops/s
Iteration   8: 911547.029 ops/s
Iteration   9: 910380.719 ops/s
Iteration  10: 897119.504 ops/s
Iteration  11: 915122.107 ops/s
Iteration  12: 911687.254 ops/s
Iteration  13: 914543.050 ops/s
Iteration  14: 916890.166 ops/s
Iteration  15: 914496.022 ops/s
Iteration  16: 914198.959 ops/s
Iteration  17: 911415.018 ops/s
Iteration  18: 911756.902 ops/s
Iteration  19: 911711.931 ops/s
Iteration  20: 912394.613 ops/s
Iteration  21: 919463.091 ops/s
Iteration  22: 910800.266 ops/s
Iteration  23: 914763.681 ops/s
Iteration  24: 913805.724 ops/s
Iteration  25: 914809.821 ops/s
Iteration  26: 913095.256 ops/s
Iteration  27: 915552.172 ops/s
Iteration  28: 906530.127 ops/s
Iteration  29: 905593.347 ops/s
Iteration  30: 909933.012 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_mainError":
  911918.820 ±(99.9%) 2879.770 ops/s [Average]
  (min, avg, max) = (897119.504, 911918.820, 919463.091), stdev = 4310.304
  CI (99.9%): [909039.050, 914798.589] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableMergeWithCompletableTest._Benchmark.benchmark_mainError  thrpt   30  911918.820 ± 2879.770  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 625772.155 ops/s
# Warmup Iteration   2: 764512.320 ops/s
# Warmup Iteration   3: 863847.476 ops/s
# Warmup Iteration   4: 858448.986 ops/s
# Warmup Iteration   5: 864344.060 ops/s
# Warmup Iteration   6: 871162.053 ops/s
# Warmup Iteration   7: 865802.210 ops/s
# Warmup Iteration   8: 864601.318 ops/s
# Warmup Iteration   9: 862245.678 ops/s
# Warmup Iteration  10: 860637.331 ops/s
# Warmup Iteration  11: 860994.978 ops/s
# Warmup Iteration  12: 856550.519 ops/s
# Warmup Iteration  13: 862850.366 ops/s
# Warmup Iteration  14: 862326.905 ops/s
# Warmup Iteration  15: 859621.376 ops/s
# Warmup Iteration  16: 850501.745 ops/s
# Warmup Iteration  17: 904840.980 ops/s
# Warmup Iteration  18: 906628.671 ops/s
# Warmup Iteration  19: 906201.861 ops/s
# Warmup Iteration  20: 905816.078 ops/s
# Warmup Iteration  21: 916516.436 ops/s
# Warmup Iteration  22: 895226.602 ops/s
# Warmup Iteration  23: 912092.682 ops/s
# Warmup Iteration  24: 910122.572 ops/s
# Warmup Iteration  25: 906436.989 ops/s
# Warmup Iteration  26: 907580.793 ops/s
# Warmup Iteration  27: 907806.548 ops/s
# Warmup Iteration  28: 903358.066 ops/s
# Warmup Iteration  29: 901661.386 ops/s
# Warmup Iteration  30: 909934.093 ops/s
Iteration   1: 911922.857 ops/s
Iteration   2: 904982.539 ops/s
Iteration   3: 911072.741 ops/s
Iteration   4: 907259.266 ops/s
Iteration   5: 917450.286 ops/s
Iteration   6: 913156.457 ops/s
Iteration   7: 909096.931 ops/s
Iteration   8: 909536.064 ops/s
Iteration   9: 912395.367 ops/s
Iteration  10: 908569.096 ops/s
Iteration  11: 915140.999 ops/s
Iteration  12: 913310.009 ops/s
Iteration  13: 908583.972 ops/s
Iteration  14: 912324.308 ops/s
Iteration  15: 910940.474 ops/s
Iteration  16: 909792.659 ops/s
Iteration  17: 907805.955 ops/s
Iteration  18: 913763.879 ops/s
Iteration  19: 910831.084 ops/s
Iteration  20: 911614.924 ops/s
Iteration  21: 912285.126 ops/s
Iteration  22: 907203.294 ops/s
Iteration  23: 912384.232 ops/s
Iteration  24: 911315.261 ops/s
Iteration  25: 912442.301 ops/s
Iteration  26: 901053.050 ops/s
Iteration  27: 905529.316 ops/s
Iteration  28: 913299.102 ops/s
Iteration  29: 906801.194 ops/s
Iteration  30: 889493.689 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_otherError":
  909711.881 ±(99.9%) 3387.267 ops/s [Average]
  (min, avg, max) = (889493.689, 909711.881, 917450.286), stdev = 5069.903
  CI (99.9%): [906324.614, 913099.149] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableMergeWithCompletableTest._Benchmark.benchmark_otherError  thrpt   30  909711.881 ± 3387.267  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1852850.310 ops/s
# Warmup Iteration   2: 2422541.913 ops/s
# Warmup Iteration   3: 3000619.499 ops/s
# Warmup Iteration   4: 3025843.611 ops/s
# Warmup Iteration   5: 3016801.438 ops/s
# Warmup Iteration   6: 3009179.578 ops/s
# Warmup Iteration   7: 2999638.530 ops/s
# Warmup Iteration   8: 3001865.861 ops/s
# Warmup Iteration   9: 2998484.236 ops/s
# Warmup Iteration  10: 3014622.704 ops/s
# Warmup Iteration  11: 3005520.024 ops/s
# Warmup Iteration  12: 3011053.157 ops/s
# Warmup Iteration  13: 2998472.929 ops/s
# Warmup Iteration  14: 3011308.285 ops/s
# Warmup Iteration  15: 2990773.139 ops/s
# Warmup Iteration  16: 3000821.081 ops/s
# Warmup Iteration  17: 3000833.105 ops/s
# Warmup Iteration  18: 3014649.370 ops/s
# Warmup Iteration  19: 3026152.612 ops/s
# Warmup Iteration  20: 2991070.448 ops/s
# Warmup Iteration  21: 3010562.627 ops/s
# Warmup Iteration  22: 3003387.688 ops/s
# Warmup Iteration  23: 3019010.604 ops/s
# Warmup Iteration  24: 2988665.200 ops/s
# Warmup Iteration  25: 2993564.626 ops/s
# Warmup Iteration  26: 3008236.844 ops/s
# Warmup Iteration  27: 2992596.965 ops/s
# Warmup Iteration  28: 3004297.302 ops/s
# Warmup Iteration  29: 2981383.393 ops/s
# Warmup Iteration  30: 3007872.982 ops/s
Iteration   1: 3019172.424 ops/s
Iteration   2: 2998324.975 ops/s
Iteration   3: 3014278.378 ops/s
Iteration   4: 3031702.115 ops/s
Iteration   5: 2990378.963 ops/s
Iteration   6: 3011274.031 ops/s
Iteration   7: 2994639.437 ops/s
Iteration   8: 2990823.506 ops/s
Iteration   9: 3031168.171 ops/s
Iteration  10: 3023868.899 ops/s
Iteration  11: 3002306.710 ops/s
Iteration  12: 3015097.706 ops/s
Iteration  13: 3013339.731 ops/s
Iteration  14: 3000239.444 ops/s
Iteration  15: 3030712.567 ops/s
Iteration  16: 2999130.572 ops/s
Iteration  17: 3009948.751 ops/s
Iteration  18: 3003915.535 ops/s
Iteration  19: 3003275.592 ops/s
Iteration  20: 3002254.830 ops/s
Iteration  21: 3005063.272 ops/s
Iteration  22: 3011590.346 ops/s
Iteration  23: 3002594.036 ops/s
Iteration  24: 3020534.675 ops/s
Iteration  25: 2999811.960 ops/s
Iteration  26: 3020902.746 ops/s
Iteration  27: 3004394.290 ops/s
Iteration  28: 2995850.452 ops/s
Iteration  29: 3000643.701 ops/s
Iteration  30: 3012821.622 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_take":
  3008668.648 ±(99.9%) 7758.596 ops/s [Average]
  (min, avg, max) = (2990378.963, 3008668.648, 3031702.115), stdev = 11612.702
  CI (99.9%): [3000910.052, 3016427.244] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FlowableMergeWithCompletableTest._Benchmark.benchmark_take  thrpt   30  3008668.648 ± 7758.596  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestFromFinalSubscribeWithRequestValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestFromFinalSubscribeWithRequestValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9483019.777 ops/s
# Warmup Iteration   2: 12287031.596 ops/s
# Warmup Iteration   3: 13510978.819 ops/s
# Warmup Iteration   4: 13457147.854 ops/s
# Warmup Iteration   5: 13439327.624 ops/s
# Warmup Iteration   6: 13484897.454 ops/s
# Warmup Iteration   7: 13401878.905 ops/s
# Warmup Iteration   8: 13562777.496 ops/s
# Warmup Iteration   9: 13430554.810 ops/s
# Warmup Iteration  10: 13423803.308 ops/s
# Warmup Iteration  11: 13396595.603 ops/s
# Warmup Iteration  12: 13552975.639 ops/s
# Warmup Iteration  13: 13444017.945 ops/s
# Warmup Iteration  14: 13406749.932 ops/s
# Warmup Iteration  15: 13448019.821 ops/s
# Warmup Iteration  16: 13507033.834 ops/s
# Warmup Iteration  17: 13390070.671 ops/s
# Warmup Iteration  18: 13539228.539 ops/s
# Warmup Iteration  19: 13420840.984 ops/s
# Warmup Iteration  20: 13396508.789 ops/s
# Warmup Iteration  21: 13418001.989 ops/s
# Warmup Iteration  22: 13497487.891 ops/s
# Warmup Iteration  23: 13438008.241 ops/s
# Warmup Iteration  24: 13385143.556 ops/s
# Warmup Iteration  25: 13439672.179 ops/s
# Warmup Iteration  26: 13498660.365 ops/s
# Warmup Iteration  27: 13516972.293 ops/s
# Warmup Iteration  28: 13522727.711 ops/s
# Warmup Iteration  29: 13442797.168 ops/s
# Warmup Iteration  30: 13547785.426 ops/s
Iteration   1: 13513531.834 ops/s
Iteration   2: 13450803.311 ops/s
Iteration   3: 13480896.377 ops/s
Iteration   4: 13548476.701 ops/s
Iteration   5: 13516082.751 ops/s
Iteration   6: 13501411.482 ops/s
Iteration   7: 13418103.888 ops/s
Iteration   8: 13505387.739 ops/s
Iteration   9: 13520063.750 ops/s
Iteration  10: 13482834.915 ops/s
Iteration  11: 13435799.946 ops/s
Iteration  12: 13475884.788 ops/s
Iteration  13: 13484361.581 ops/s
Iteration  14: 13419610.913 ops/s
Iteration  15: 13451458.438 ops/s
Iteration  16: 13527955.443 ops/s
Iteration  17: 13453263.188 ops/s
Iteration  18: 13505894.873 ops/s
Iteration  19: 13511493.600 ops/s
Iteration  20: 13566378.474 ops/s
Iteration  21: 13532850.849 ops/s
Iteration  22: 13442890.635 ops/s
Iteration  23: 13539699.422 ops/s
Iteration  24: 13564380.989 ops/s
Iteration  25: 13331930.686 ops/s
Iteration  26: 13562676.990 ops/s
Iteration  27: 13461761.338 ops/s
Iteration  28: 13611080.891 ops/s
Iteration  29: 13495608.150 ops/s
Iteration  30: 13476636.178 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestFromFinalSubscribeWithRequestValue":
  13492973.671 ±(99.9%) 37103.657 ops/s [Average]
  (min, avg, max) = (13331930.686, 13492973.671, 13611080.891), stdev = 55535.011
  CI (99.9%): [13455870.014, 13530077.327] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt         Score       Error  Units
FlowableSubscriberTest._Benchmark.benchmark_requestFromFinalSubscribeWithRequestValue  thrpt   30  13492973.671 ± 37103.657  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_publishersInIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_publishersInIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2097282.461 ops/s
# Warmup Iteration   2: 3392617.905 ops/s
# Warmup Iteration   3: 3671386.381 ops/s
# Warmup Iteration   4: 3643901.059 ops/s
# Warmup Iteration   5: 3651078.060 ops/s
# Warmup Iteration   6: 3643389.626 ops/s
# Warmup Iteration   7: 3665854.869 ops/s
# Warmup Iteration   8: 3653393.362 ops/s
# Warmup Iteration   9: 3662606.713 ops/s
# Warmup Iteration  10: 3632321.975 ops/s
# Warmup Iteration  11: 3645998.486 ops/s
# Warmup Iteration  12: 3647721.935 ops/s
# Warmup Iteration  13: 3669526.961 ops/s
# Warmup Iteration  14: 3677053.095 ops/s
# Warmup Iteration  15: 3669655.760 ops/s
# Warmup Iteration  16: 3664568.284 ops/s
# Warmup Iteration  17: 3629558.789 ops/s
# Warmup Iteration  18: 3633262.992 ops/s
# Warmup Iteration  19: 3652314.706 ops/s
# Warmup Iteration  20: 3640245.388 ops/s
# Warmup Iteration  21: 3626016.666 ops/s
# Warmup Iteration  22: 3623571.073 ops/s
# Warmup Iteration  23: 3630907.980 ops/s
# Warmup Iteration  24: 3619414.368 ops/s
# Warmup Iteration  25: 3623002.762 ops/s
# Warmup Iteration  26: 3660620.748 ops/s
# Warmup Iteration  27: 3630959.434 ops/s
# Warmup Iteration  28: 3652502.785 ops/s
# Warmup Iteration  29: 3659059.440 ops/s
# Warmup Iteration  30: 3664753.188 ops/s
Iteration   1: 3648423.502 ops/s
Iteration   2: 3646194.610 ops/s
Iteration   3: 3640416.534 ops/s
Iteration   4: 3647820.261 ops/s
Iteration   5: 3635829.385 ops/s
Iteration   6: 3641557.871 ops/s
Iteration   7: 3673881.945 ops/s
Iteration   8: 3658252.411 ops/s
Iteration   9: 3649552.897 ops/s
Iteration  10: 3645520.175 ops/s
Iteration  11: 3654794.095 ops/s
Iteration  12: 3622088.434 ops/s
Iteration  13: 3643931.624 ops/s
Iteration  14: 3639697.675 ops/s
Iteration  15: 3640425.419 ops/s
Iteration  16: 3653031.646 ops/s
Iteration  17: 3646803.163 ops/s
Iteration  18: 3652222.023 ops/s
Iteration  19: 3661539.922 ops/s
Iteration  20: 3626505.833 ops/s
Iteration  21: 3639418.623 ops/s
Iteration  22: 3646520.173 ops/s
Iteration  23: 3641455.994 ops/s
Iteration  24: 3631335.681 ops/s
Iteration  25: 3644892.119 ops/s
Iteration  26: 3618987.655 ops/s
Iteration  27: 3626499.140 ops/s
Iteration  28: 3642659.360 ops/s
Iteration  29: 3660123.393 ops/s
Iteration  30: 3634533.215 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_publishersInIterable":
  3643830.493 ±(99.9%) 7972.888 ops/s [Average]
  (min, avg, max) = (3618987.655, 3643830.493, 3673881.945), stdev = 11933.444
  CI (99.9%): [3635857.605, 3651803.381] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FlowableAmbTest._Benchmark.benchmark_publishersInIterable  thrpt   30  3643830.493 ± 7972.888  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_combineToNull1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_combineToNull1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 492009.826 ops/s
# Warmup Iteration   2: 628153.532 ops/s
# Warmup Iteration   3: 664125.279 ops/s
# Warmup Iteration   4: 716159.348 ops/s
# Warmup Iteration   5: 718919.376 ops/s
# Warmup Iteration   6: 721106.604 ops/s
# Warmup Iteration   7: 717613.076 ops/s
# Warmup Iteration   8: 721172.604 ops/s
# Warmup Iteration   9: 718455.595 ops/s
# Warmup Iteration  10: 714050.919 ops/s
# Warmup Iteration  11: 718155.721 ops/s
# Warmup Iteration  12: 720899.657 ops/s
# Warmup Iteration  13: 712777.778 ops/s
# Warmup Iteration  14: 712106.824 ops/s
# Warmup Iteration  15: 703312.155 ops/s
# Warmup Iteration  16: 715082.875 ops/s
# Warmup Iteration  17: 742643.726 ops/s
# Warmup Iteration  18: 749246.826 ops/s
# Warmup Iteration  19: 738347.959 ops/s
# Warmup Iteration  20: 741102.820 ops/s
# Warmup Iteration  21: 744977.209 ops/s
# Warmup Iteration  22: 746972.479 ops/s
# Warmup Iteration  23: 744778.276 ops/s
# Warmup Iteration  24: 742905.183 ops/s
# Warmup Iteration  25: 743608.674 ops/s
# Warmup Iteration  26: 742607.888 ops/s
# Warmup Iteration  27: 742626.270 ops/s
# Warmup Iteration  28: 741358.725 ops/s
# Warmup Iteration  29: 744768.579 ops/s
# Warmup Iteration  30: 740787.937 ops/s
Iteration   1: 743758.145 ops/s
Iteration   2: 743736.471 ops/s
Iteration   3: 737845.078 ops/s
Iteration   4: 749740.705 ops/s
Iteration   5: 746096.900 ops/s
Iteration   6: 744296.798 ops/s
Iteration   7: 749624.798 ops/s
Iteration   8: 749838.142 ops/s
Iteration   9: 741609.519 ops/s
Iteration  10: 740666.892 ops/s
Iteration  11: 743236.613 ops/s
Iteration  12: 742066.086 ops/s
Iteration  13: 749502.553 ops/s
Iteration  14: 746624.631 ops/s
Iteration  15: 741309.676 ops/s
Iteration  16: 747386.994 ops/s
Iteration  17: 746075.763 ops/s
Iteration  18: 743267.527 ops/s
Iteration  19: 739818.875 ops/s
Iteration  20: 748076.638 ops/s
Iteration  21: 747581.840 ops/s
Iteration  22: 744651.514 ops/s
Iteration  23: 744920.762 ops/s
Iteration  24: 746370.745 ops/s
Iteration  25: 744005.835 ops/s
Iteration  26: 744609.728 ops/s
Iteration  27: 749456.888 ops/s
Iteration  28: 745432.695 ops/s
Iteration  29: 748790.490 ops/s
Iteration  30: 742810.303 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_combineToNull1":
  745106.987 ±(99.9%) 2136.914 ops/s [Average]
  (min, avg, max) = (737845.078, 745106.987, 749838.142), stdev = 3198.433
  CI (99.9%): [742970.073, 747243.901] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_combineToNull1  thrpt   30  745106.987 ± 2136.914  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_manySources$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_manySources

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 295496.197 ops/s
# Warmup Iteration   2: 370783.708 ops/s
# Warmup Iteration   3: 446965.905 ops/s
# Warmup Iteration   4: 449302.908 ops/s
# Warmup Iteration   5: 450620.589 ops/s
# Warmup Iteration   6: 451127.554 ops/s
# Warmup Iteration   7: 451695.042 ops/s
# Warmup Iteration   8: 449256.419 ops/s
# Warmup Iteration   9: 446551.062 ops/s
# Warmup Iteration  10: 449677.555 ops/s
# Warmup Iteration  11: 449120.636 ops/s
# Warmup Iteration  12: 448589.567 ops/s
# Warmup Iteration  13: 449697.470 ops/s
# Warmup Iteration  14: 448617.962 ops/s
# Warmup Iteration  15: 449992.943 ops/s
# Warmup Iteration  16: 448413.811 ops/s
# Warmup Iteration  17: 449703.920 ops/s
# Warmup Iteration  18: 449925.963 ops/s
# Warmup Iteration  19: 453645.391 ops/s
# Warmup Iteration  20: 454279.067 ops/s
# Warmup Iteration  21: 449266.240 ops/s
# Warmup Iteration  22: 450550.385 ops/s
# Warmup Iteration  23: 451410.530 ops/s
# Warmup Iteration  24: 450700.285 ops/s
# Warmup Iteration  25: 450153.941 ops/s
# Warmup Iteration  26: 451200.116 ops/s
# Warmup Iteration  27: 451547.721 ops/s
# Warmup Iteration  28: 450044.557 ops/s
# Warmup Iteration  29: 452273.337 ops/s
# Warmup Iteration  30: 449725.656 ops/s
Iteration   1: 450632.047 ops/s
Iteration   2: 451653.318 ops/s
Iteration   3: 453846.004 ops/s
Iteration   4: 448737.665 ops/s
Iteration   5: 453998.037 ops/s
Iteration   6: 452960.303 ops/s
Iteration   7: 451268.576 ops/s
Iteration   8: 450290.888 ops/s
Iteration   9: 452248.792 ops/s
Iteration  10: 450173.142 ops/s
Iteration  11: 445996.703 ops/s
Iteration  12: 453672.548 ops/s
Iteration  13: 453222.781 ops/s
Iteration  14: 449738.691 ops/s
Iteration  15: 446436.768 ops/s
Iteration  16: 449656.887 ops/s
Iteration  17: 449816.267 ops/s
Iteration  18: 452594.289 ops/s
Iteration  19: 452320.272 ops/s
Iteration  20: 452163.701 ops/s
Iteration  21: 449945.324 ops/s
Iteration  22: 450039.777 ops/s
Iteration  23: 451426.260 ops/s
Iteration  24: 448418.994 ops/s
Iteration  25: 450680.403 ops/s
Iteration  26: 449360.805 ops/s
Iteration  27: 453997.372 ops/s
Iteration  28: 452316.196 ops/s
Iteration  29: 449487.754 ops/s
Iteration  30: 453426.948 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_manySources":
  451017.584 ±(99.9%) 1405.585 ops/s [Average]
  (min, avg, max) = (445996.703, 451017.584, 453998.037), stdev = 2103.813
  CI (99.9%): [449611.999, 452423.168] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
FlowableAmbTest._Benchmark.benchmark_manySources  thrpt   30  451017.584 ± 1405.585  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_completeTriggersSubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_completeTriggersSubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1975472.901 ops/s
# Warmup Iteration   2: 3439987.305 ops/s
# Warmup Iteration   3: 3932007.833 ops/s
# Warmup Iteration   4: 3911631.623 ops/s
# Warmup Iteration   5: 3896967.111 ops/s
# Warmup Iteration   6: 3893199.691 ops/s
# Warmup Iteration   7: 3932995.151 ops/s
# Warmup Iteration   8: 3897786.849 ops/s
# Warmup Iteration   9: 3897155.496 ops/s
# Warmup Iteration  10: 3898326.921 ops/s
# Warmup Iteration  11: 3889876.547 ops/s
# Warmup Iteration  12: 3888930.496 ops/s
# Warmup Iteration  13: 3910653.438 ops/s
# Warmup Iteration  14: 3898004.722 ops/s
# Warmup Iteration  15: 3901842.456 ops/s
# Warmup Iteration  16: 3886729.287 ops/s
# Warmup Iteration  17: 3924460.477 ops/s
# Warmup Iteration  18: 3914625.914 ops/s
# Warmup Iteration  19: 3889978.004 ops/s
# Warmup Iteration  20: 3910112.593 ops/s
# Warmup Iteration  21: 3915725.801 ops/s
# Warmup Iteration  22: 3898676.278 ops/s
# Warmup Iteration  23: 3903986.059 ops/s
# Warmup Iteration  24: 3897501.260 ops/s
# Warmup Iteration  25: 3912516.223 ops/s
# Warmup Iteration  26: 3932326.683 ops/s
# Warmup Iteration  27: 3899886.945 ops/s
# Warmup Iteration  28: 3874032.365 ops/s
# Warmup Iteration  29: 3911253.615 ops/s
# Warmup Iteration  30: 3874867.113 ops/s
Iteration   1: 3921400.378 ops/s
Iteration   2: 3897702.397 ops/s
Iteration   3: 3912833.209 ops/s
Iteration   4: 3895328.412 ops/s
Iteration   5: 3919882.031 ops/s
Iteration   6: 3916714.268 ops/s
Iteration   7: 3893472.931 ops/s
Iteration   8: 3902733.073 ops/s
Iteration   9: 3851395.384 ops/s
Iteration  10: 3915368.358 ops/s
Iteration  11: 3896130.672 ops/s
Iteration  12: 3919562.240 ops/s
Iteration  13: 3910715.157 ops/s
Iteration  14: 3896676.843 ops/s
Iteration  15: 3889599.913 ops/s
Iteration  16: 3941994.437 ops/s
Iteration  17: 3924877.611 ops/s
Iteration  18: 3919412.320 ops/s
Iteration  19: 3900820.738 ops/s
Iteration  20: 3892106.331 ops/s
Iteration  21: 3875680.429 ops/s
Iteration  22: 3925928.327 ops/s
Iteration  23: 3917924.917 ops/s
Iteration  24: 3918991.321 ops/s
Iteration  25: 3882447.145 ops/s
Iteration  26: 3908644.685 ops/s
Iteration  27: 3911608.026 ops/s
Iteration  28: 3911266.071 ops/s
Iteration  29: 3889322.409 ops/s
Iteration  30: 3928854.611 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_completeTriggersSubscription":
  3906313.155 ±(99.9%) 12261.873 ops/s [Average]
  (min, avg, max) = (3851395.384, 3906313.155, 3941994.437), stdev = 18352.995
  CI (99.9%): [3894051.282, 3918575.028] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_completeTriggersSubscription  thrpt   30  3906313.155 ± 12261.873  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestFromDecoupledOperator$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestFromDecoupledOperator

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7809759.878 ops/s
# Warmup Iteration   2: 10843752.244 ops/s
# Warmup Iteration   3: 11521139.359 ops/s
# Warmup Iteration   4: 11375531.654 ops/s
# Warmup Iteration   5: 11477131.968 ops/s
# Warmup Iteration   6: 11356477.326 ops/s
# Warmup Iteration   7: 11428552.767 ops/s
# Warmup Iteration   8: 11488018.804 ops/s
# Warmup Iteration   9: 11490959.539 ops/s
# Warmup Iteration  10: 11398606.238 ops/s
# Warmup Iteration  11: 11432710.824 ops/s
# Warmup Iteration  12: 11413861.484 ops/s
# Warmup Iteration  13: 11365184.278 ops/s
# Warmup Iteration  14: 11457841.023 ops/s
# Warmup Iteration  15: 11384507.732 ops/s
# Warmup Iteration  16: 11489394.995 ops/s
# Warmup Iteration  17: 11459908.067 ops/s
# Warmup Iteration  18: 11445740.099 ops/s
# Warmup Iteration  19: 11500535.299 ops/s
# Warmup Iteration  20: 11480835.806 ops/s
# Warmup Iteration  21: 11534285.325 ops/s
# Warmup Iteration  22: 11486621.249 ops/s
# Warmup Iteration  23: 11484526.863 ops/s
# Warmup Iteration  24: 11428525.963 ops/s
# Warmup Iteration  25: 11482797.403 ops/s
# Warmup Iteration  26: 11419557.141 ops/s
# Warmup Iteration  27: 11373577.523 ops/s
# Warmup Iteration  28: 11478146.552 ops/s
# Warmup Iteration  29: 11394968.202 ops/s
# Warmup Iteration  30: 11492590.644 ops/s
Iteration   1: 11474075.316 ops/s
Iteration   2: 11465484.813 ops/s
Iteration   3: 11494399.468 ops/s
Iteration   4: 11400256.536 ops/s
Iteration   5: 11471891.855 ops/s
Iteration   6: 11467622.560 ops/s
Iteration   7: 11447011.159 ops/s
Iteration   8: 11410618.413 ops/s
Iteration   9: 11348600.879 ops/s
Iteration  10: 11603578.194 ops/s
Iteration  11: 11428737.963 ops/s
Iteration  12: 11503528.939 ops/s
Iteration  13: 11465961.762 ops/s
Iteration  14: 11500555.987 ops/s
Iteration  15: 11387740.007 ops/s
Iteration  16: 8889317.845 ops/s
Iteration  17: 8507397.435 ops/s
Iteration  18: 8444811.585 ops/s
Iteration  19: 8771917.435 ops/s
Iteration  20: 8142327.811 ops/s
Iteration  21: 8855320.089 ops/s
Iteration  22: 8558898.305 ops/s
Iteration  23: 8467591.289 ops/s
Iteration  24: 8730319.326 ops/s
Iteration  25: 8513116.602 ops/s
Iteration  26: 8526597.834 ops/s
Iteration  27: 9008622.730 ops/s
Iteration  28: 8390959.511 ops/s
Iteration  29: 8751043.607 ops/s
Iteration  30: 8651001.850 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_requestFromDecoupledOperator":
  10035976.903 ±(99.9%) 972298.477 ops/s [Average]
  (min, avg, max) = (8142327.811, 10035976.903, 11603578.194), stdev = 1455290.697
  CI (99.9%): [9063678.427, 11008275.380] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score        Error  Units
FlowableSubscriberTest._Benchmark.benchmark_requestFromDecoupledOperator  thrpt   30  10035976.903 ± 972298.477  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21568.737 ops/s
# Warmup Iteration   2: 132054.948 ops/s
# Warmup Iteration   3: 158268.345 ops/s
# Warmup Iteration   4: 168130.982 ops/s
# Warmup Iteration   5: 174086.712 ops/s
# Warmup Iteration   6: 173337.985 ops/s
# Warmup Iteration   7: 143235.404 ops/s
# Warmup Iteration   8: 174887.850 ops/s
# Warmup Iteration   9: 114246.620 ops/s
# Warmup Iteration  10: 164949.879 ops/s
# Warmup Iteration  11: 171894.110 ops/s
# Warmup Iteration  12: 169399.719 ops/s
# Warmup Iteration  13: 170793.663 ops/s
# Warmup Iteration  14: 175578.008 ops/s
# Warmup Iteration  15: 169252.957 ops/s
# Warmup Iteration  16: 173476.610 ops/s
# Warmup Iteration  17: 174522.032 ops/s
# Warmup Iteration  18: 174174.847 ops/s
# Warmup Iteration  19: 178595.012 ops/s
# Warmup Iteration  20: 169594.095 ops/s
# Warmup Iteration  21: 175632.684 ops/s
# Warmup Iteration  22: 175161.583 ops/s
# Warmup Iteration  23: 179112.224 ops/s
# Warmup Iteration  24: 181710.073 ops/s
# Warmup Iteration  25: 172116.929 ops/s
# Warmup Iteration  26: 180458.342 ops/s
# Warmup Iteration  27: 170540.983 ops/s
# Warmup Iteration  28: 176711.758 ops/s
# Warmup Iteration  29: 176655.150 ops/s
# Warmup Iteration  30: 173641.256 ops/s
Iteration   1: 177461.465 ops/s
Iteration   2: 174501.775 ops/s
Iteration   3: 173376.370 ops/s
Iteration   4: 177045.034 ops/s
Iteration   5: 169650.860 ops/s
Iteration   6: 183731.907 ops/s
Iteration   7: 177723.061 ops/s
Iteration   8: 170875.314 ops/s
Iteration   9: 181125.265 ops/s
Iteration  10: 174281.465 ops/s
Iteration  11: 178231.196 ops/s
Iteration  12: 177498.093 ops/s
Iteration  13: 177103.343 ops/s
Iteration  14: 175092.103 ops/s
Iteration  15: 177121.694 ops/s
Iteration  16: 174153.204 ops/s
Iteration  17: 171663.638 ops/s
Iteration  18: 178437.864 ops/s
Iteration  19: 172315.648 ops/s
Iteration  20: 179828.347 ops/s
Iteration  21: 177181.744 ops/s
Iteration  22: 174559.621 ops/s
Iteration  23: 179653.488 ops/s
Iteration  24: 175400.902 ops/s
Iteration  25: 180278.330 ops/s
Iteration  26: 171745.050 ops/s
Iteration  27: 181598.672 ops/s
Iteration  28: 182143.639 ops/s
Iteration  29: 174360.087 ops/s
Iteration  30: 180827.050 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_undeliverableUponCancel":
  176632.208 ±(99.9%) 2400.881 ops/s [Average]
  (min, avg, max) = (169650.860, 176632.208, 183731.907), stdev = 3593.526
  CI (99.9%): [174231.327, 179033.088] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
FlowableMergeWithCompletableTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  176632.208 ± 2400.881  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_timeoutFirstItemReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_timeoutFirstItemReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 188128.661 ops/s
# Warmup Iteration   2: 485289.177 ops/s
# Warmup Iteration   3: 495365.018 ops/s
# Warmup Iteration   4: 491390.018 ops/s
# Warmup Iteration   5: 549992.559 ops/s
# Warmup Iteration   6: 535039.486 ops/s
# Warmup Iteration   7: 496556.080 ops/s
# Warmup Iteration   8: 519400.118 ops/s
# Warmup Iteration   9: 520393.700 ops/s
# Warmup Iteration  10: 536872.132 ops/s
# Warmup Iteration  11: 562533.900 ops/s
# Warmup Iteration  12: 535032.880 ops/s
# Warmup Iteration  13: 550899.086 ops/s
# Warmup Iteration  14: 570721.742 ops/s
# Warmup Iteration  15: 515180.079 ops/s
# Warmup Iteration  16: 563643.280 ops/s
# Warmup Iteration  17: 549740.054 ops/s
# Warmup Iteration  18: 576040.663 ops/s
# Warmup Iteration  19: 556753.532 ops/s
# Warmup Iteration  20: 566529.466 ops/s
# Warmup Iteration  21: 577865.285 ops/s
# Warmup Iteration  22: 555209.623 ops/s
# Warmup Iteration  23: 572865.354 ops/s
# Warmup Iteration  24: 550977.235 ops/s
# Warmup Iteration  25: 565056.420 ops/s
# Warmup Iteration  26: 575495.286 ops/s
# Warmup Iteration  27: 547523.496 ops/s
# Warmup Iteration  28: 564359.165 ops/s
# Warmup Iteration  29: 573401.752 ops/s
# Warmup Iteration  30: 557335.927 ops/s
Iteration   1: 571476.587 ops/s
Iteration   2: 560628.873 ops/s
Iteration   3: 565652.734 ops/s
Iteration   4: 565632.145 ops/s
Iteration   5: 551235.197 ops/s
Iteration   6: 579034.464 ops/s
Iteration   7: 550139.165 ops/s
Iteration   8: 568812.904 ops/s
Iteration   9: 552509.661 ops/s
Iteration  10: 579544.469 ops/s
Iteration  11: 568122.116 ops/s
Iteration  12: 560436.126 ops/s
Iteration  13: 584180.117 ops/s
Iteration  14: 561018.450 ops/s
Iteration  15: 560525.251 ops/s
Iteration  16: 588466.901 ops/s
Iteration  17: 545742.010 ops/s
Iteration  18: 575158.906 ops/s
Iteration  19: 557092.336 ops/s
Iteration  20: 591420.499 ops/s
Iteration  21: 560094.100 ops/s
Iteration  22: 569368.625 ops/s
Iteration  23: 560120.640 ops/s
Iteration  24: 561471.410 ops/s
Iteration  25: 586274.860 ops/s
Iteration  26: 574997.236 ops/s
Iteration  27: 551200.341 ops/s
Iteration  28: 576035.943 ops/s
Iteration  29: 553635.034 ops/s
Iteration  30: 557544.950 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_timeoutFirstItemReturnsNull":
  566252.402 ±(99.9%) 8185.315 ops/s [Average]
  (min, avg, max) = (545742.010, 566252.402, 591420.499), stdev = 12251.395
  CI (99.9%): [558067.087, 574437.717] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_timeoutFirstItemReturnsNull  thrpt   30  566252.402 ± 8185.315  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_compositeTest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_compositeTest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7945.718 ops/s
# Warmup Iteration   2: 103361.702 ops/s
# Warmup Iteration   3: 100746.057 ops/s
# Warmup Iteration   4: 146783.393 ops/s
# Warmup Iteration   5: 136634.262 ops/s
# Warmup Iteration   6: 155292.082 ops/s
# Warmup Iteration   7: 332977.404 ops/s
# Warmup Iteration   8: 439069.255 ops/s
# Warmup Iteration   9: 452854.570 ops/s
# Warmup Iteration  10: 444479.461 ops/s
# Warmup Iteration  11: 449499.784 ops/s
# Warmup Iteration  12: 462680.367 ops/s
# Warmup Iteration  13: 443900.749 ops/s
# Warmup Iteration  14: 462145.443 ops/s
# Warmup Iteration  15: 437826.207 ops/s
# Warmup Iteration  16: 450452.306 ops/s
# Warmup Iteration  17: 455524.815 ops/s
# Warmup Iteration  18: 453684.964 ops/s
# Warmup Iteration  19: 420885.541 ops/s
# Warmup Iteration  20: 464032.410 ops/s
# Warmup Iteration  21: 439833.111 ops/s
# Warmup Iteration  22: 454227.735 ops/s
# Warmup Iteration  23: 460436.705 ops/s
# Warmup Iteration  24: 438711.762 ops/s
# Warmup Iteration  25: 444072.032 ops/s
# Warmup Iteration  26: 450963.225 ops/s
# Warmup Iteration  27: 450926.613 ops/s
# Warmup Iteration  28: 460152.788 ops/s
# Warmup Iteration  29: 449297.464 ops/s
# Warmup Iteration  30: 448369.446 ops/s
Iteration   1: 450904.595 ops/s
Iteration   2: 443678.755 ops/s
Iteration   3: 462043.553 ops/s
Iteration   4: 455067.823 ops/s
Iteration   5: 452535.310 ops/s
Iteration   6: 442337.226 ops/s
Iteration   7: 448952.846 ops/s
Iteration   8: 458938.140 ops/s
Iteration   9: 451678.434 ops/s
Iteration  10: 435499.631 ops/s
Iteration  11: 463546.137 ops/s
Iteration  12: 447700.772 ops/s
Iteration  13: 469378.400 ops/s
Iteration  14: 459667.593 ops/s
Iteration  15: 447445.111 ops/s
Iteration  16: 468033.771 ops/s
Iteration  17: 432352.080 ops/s
Iteration  18: 456740.232 ops/s
Iteration  19: 442341.940 ops/s
Iteration  20: 454001.541 ops/s
Iteration  21: 464435.172 ops/s
Iteration  22: 439396.394 ops/s
Iteration  23: 459844.777 ops/s
Iteration  24: 433902.753 ops/s
Iteration  25: 443003.939 ops/s
Iteration  26: 455217.201 ops/s
Iteration  27: 454223.531 ops/s
Iteration  28: 450074.432 ops/s
Iteration  29: 442736.369 ops/s
Iteration  30: 469635.006 ops/s


Result "io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_compositeTest":
  451843.782 ±(99.9%) 6906.486 ops/s [Average]
  (min, avg, max) = (432352.080, 451843.782, 469635.006), stdev = 10337.304
  CI (99.9%): [444937.296, 458750.268] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ConverterTest._Benchmark.benchmark_compositeTest  thrpt   30  451843.782 ± 6906.486  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toListSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toListSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 237695.542 ops/s
# Warmup Iteration   2: 431775.485 ops/s
# Warmup Iteration   3: 572000.092 ops/s
# Warmup Iteration   4: 526221.890 ops/s
# Warmup Iteration   5: 564418.702 ops/s
# Warmup Iteration   6: 505024.386 ops/s
# Warmup Iteration   7: 577387.252 ops/s
# Warmup Iteration   8: 588923.565 ops/s
# Warmup Iteration   9: 559052.964 ops/s
# Warmup Iteration  10: 593753.440 ops/s
# Warmup Iteration  11: 592711.925 ops/s
# Warmup Iteration  12: 574799.669 ops/s
# Warmup Iteration  13: 596452.187 ops/s
# Warmup Iteration  14: 575183.705 ops/s
# Warmup Iteration  15: 584833.386 ops/s
# Warmup Iteration  16: 588776.713 ops/s
# Warmup Iteration  17: 609592.445 ops/s
# Warmup Iteration  18: 620440.915 ops/s
# Warmup Iteration  19: 598792.222 ops/s
# Warmup Iteration  20: 612941.156 ops/s
# Warmup Iteration  21: 627352.396 ops/s
# Warmup Iteration  22: 607766.912 ops/s
# Warmup Iteration  23: 609050.987 ops/s
# Warmup Iteration  24: 610869.184 ops/s
# Warmup Iteration  25: 614937.803 ops/s
# Warmup Iteration  26: 628117.925 ops/s
# Warmup Iteration  27: 586936.974 ops/s
# Warmup Iteration  28: 622064.818 ops/s
# Warmup Iteration  29: 598227.287 ops/s
# Warmup Iteration  30: 606803.790 ops/s
Iteration   1: 624392.175 ops/s
Iteration   2: 594632.059 ops/s
Iteration   3: 592740.812 ops/s
Iteration   4: 617982.193 ops/s
Iteration   5: 604075.191 ops/s
Iteration   6: 605058.748 ops/s
Iteration   7: 640601.266 ops/s
Iteration   8: 615330.269 ops/s
Iteration   9: 600323.415 ops/s
Iteration  10: 637097.947 ops/s
Iteration  11: 636283.366 ops/s
Iteration  12: 594640.759 ops/s
Iteration  13: 631662.938 ops/s
Iteration  14: 605555.299 ops/s
Iteration  15: 606080.238 ops/s
Iteration  16: 626037.668 ops/s
Iteration  17: 596581.006 ops/s
Iteration  18: 628535.886 ops/s
Iteration  19: 633362.339 ops/s
Iteration  20: 595748.444 ops/s
Iteration  21: 626198.934 ops/s
Iteration  22: 606700.715 ops/s
Iteration  23: 637958.792 ops/s
Iteration  24: 598074.234 ops/s
Iteration  25: 629007.552 ops/s
Iteration  26: 625769.998 ops/s
Iteration  27: 595990.323 ops/s
Iteration  28: 603234.874 ops/s
Iteration  29: 622857.132 ops/s
Iteration  30: 503863.936 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toListSupplierReturnsNull":
  611212.617 ±(99.9%) 17125.246 ops/s [Average]
  (min, avg, max) = (503863.936, 611212.617, 640601.266), stdev = 25632.264
  CI (99.9%): [594087.371, 628337.863] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_toListSupplierReturnsNull  thrpt   30  611212.617 ± 17125.246  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateFunctionStateNullAllowed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateFunctionStateNullAllowed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1502372.438 ops/s
# Warmup Iteration   2: 5051069.339 ops/s
# Warmup Iteration   3: 5820951.328 ops/s
# Warmup Iteration   4: 7243418.452 ops/s
# Warmup Iteration   5: 6882821.790 ops/s
# Warmup Iteration   6: 6800009.525 ops/s
# Warmup Iteration   7: 7007215.748 ops/s
# Warmup Iteration   8: 6982030.435 ops/s
# Warmup Iteration   9: 7152493.920 ops/s
# Warmup Iteration  10: 7036911.643 ops/s
# Warmup Iteration  11: 6943879.737 ops/s
# Warmup Iteration  12: 7271207.382 ops/s
# Warmup Iteration  13: 6832910.193 ops/s
# Warmup Iteration  14: 7304542.886 ops/s
# Warmup Iteration  15: 6869072.450 ops/s
# Warmup Iteration  16: 7138941.177 ops/s
# Warmup Iteration  17: 6830163.263 ops/s
# Warmup Iteration  18: 6944735.728 ops/s
# Warmup Iteration  19: 7334783.006 ops/s
# Warmup Iteration  20: 6851158.786 ops/s
# Warmup Iteration  21: 7231189.322 ops/s
# Warmup Iteration  22: 6932305.179 ops/s
# Warmup Iteration  23: 7299717.856 ops/s
# Warmup Iteration  24: 6906733.818 ops/s
# Warmup Iteration  25: 6955894.368 ops/s
# Warmup Iteration  26: 7365662.782 ops/s
# Warmup Iteration  27: 7018732.662 ops/s
# Warmup Iteration  28: 7174642.425 ops/s
# Warmup Iteration  29: 7238540.898 ops/s
# Warmup Iteration  30: 6975285.990 ops/s
Iteration   1: 7028350.230 ops/s
Iteration   2: 7117669.554 ops/s
Iteration   3: 7034373.176 ops/s
Iteration   4: 7191460.718 ops/s
Iteration   5: 7024928.046 ops/s
Iteration   6: 6963978.474 ops/s
Iteration   7: 7170244.795 ops/s
Iteration   8: 7080494.833 ops/s
Iteration   9: 7283094.139 ops/s
Iteration  10: 6846520.742 ops/s
Iteration  11: 7377665.148 ops/s
Iteration  12: 6839023.859 ops/s
Iteration  13: 7100415.517 ops/s
Iteration  14: 7289511.929 ops/s
Iteration  15: 6948111.920 ops/s
Iteration  16: 7181226.636 ops/s
Iteration  17: 6954080.402 ops/s
Iteration  18: 7167264.252 ops/s
Iteration  19: 6852315.943 ops/s
Iteration  20: 7183217.940 ops/s
Iteration  21: 7169338.648 ops/s
Iteration  22: 6980779.309 ops/s
Iteration  23: 7218788.277 ops/s
Iteration  24: 7108429.100 ops/s
Iteration  25: 7196354.683 ops/s
Iteration  26: 6944038.199 ops/s
Iteration  27: 7027465.839 ops/s
Iteration  28: 7136565.554 ops/s
Iteration  29: 7238921.704 ops/s
Iteration  30: 7143248.117 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateFunctionStateNullAllowed":
  7093262.589 ±(99.9%) 91459.197 ops/s [Average]
  (min, avg, max) = (6839023.859, 7093262.589, 7377665.148), stdev = 136891.830
  CI (99.9%): [7001803.393, 7184721.786] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableNullTests._Benchmark.benchmark_generateFunctionStateNullAllowed  thrpt   30  7093262.589 ± 91459.197  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manyErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manyErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19216.914 ops/s
# Warmup Iteration   2: 87189.792 ops/s
# Warmup Iteration   3: 151760.720 ops/s
# Warmup Iteration   4: 152483.648 ops/s
# Warmup Iteration   5: 165615.304 ops/s
# Warmup Iteration   6: 153357.919 ops/s
# Warmup Iteration   7: 157678.940 ops/s
# Warmup Iteration   8: 157601.557 ops/s
# Warmup Iteration   9: 156661.406 ops/s
# Warmup Iteration  10: 160069.676 ops/s
# Warmup Iteration  11: 159055.291 ops/s
# Warmup Iteration  12: 153700.856 ops/s
# Warmup Iteration  13: 159136.613 ops/s
# Warmup Iteration  14: 152868.721 ops/s
# Warmup Iteration  15: 167607.279 ops/s
# Warmup Iteration  16: 156368.359 ops/s
# Warmup Iteration  17: 164673.999 ops/s
# Warmup Iteration  18: 169225.560 ops/s
# Warmup Iteration  19: 162244.548 ops/s
# Warmup Iteration  20: 169735.011 ops/s
# Warmup Iteration  21: 161779.491 ops/s
# Warmup Iteration  22: 163635.785 ops/s
# Warmup Iteration  23: 169672.402 ops/s
# Warmup Iteration  24: 159336.251 ops/s
# Warmup Iteration  25: 162359.930 ops/s
# Warmup Iteration  26: 163401.493 ops/s
# Warmup Iteration  27: 167138.574 ops/s
# Warmup Iteration  28: 163898.334 ops/s
# Warmup Iteration  29: 164985.767 ops/s
# Warmup Iteration  30: 168302.035 ops/s
Iteration   1: 163041.555 ops/s
Iteration   2: 166521.889 ops/s
Iteration   3: 158670.383 ops/s
Iteration   4: 164207.656 ops/s
Iteration   5: 163475.701 ops/s
Iteration   6: 161031.966 ops/s
Iteration   7: 167135.086 ops/s
Iteration   8: 164735.465 ops/s
Iteration   9: 165356.814 ops/s
Iteration  10: 158622.112 ops/s
Iteration  11: 168288.999 ops/s
Iteration  12: 166369.795 ops/s
Iteration  13: 160455.048 ops/s
Iteration  14: 157979.079 ops/s
Iteration  15: 157797.976 ops/s
Iteration  16: 165739.765 ops/s
Iteration  17: 169100.427 ops/s
Iteration  18: 162821.525 ops/s
Iteration  19: 170126.060 ops/s
Iteration  20: 168336.521 ops/s
Iteration  21: 162988.739 ops/s
Iteration  22: 168613.051 ops/s
Iteration  23: 166269.384 ops/s
Iteration  24: 119282.053 ops/s
Iteration  25: 167281.149 ops/s
Iteration  26: 163372.533 ops/s
Iteration  27: 167863.064 ops/s
Iteration  28: 162457.423 ops/s
Iteration  29: 159208.418 ops/s
Iteration  30: 165786.273 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manyErrors":
  162764.530 ±(99.9%) 5975.745 ops/s [Average]
  (min, avg, max) = (119282.053, 162764.530, 170126.060), stdev = 8944.215
  CI (99.9%): [156788.785, 168740.275] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_manyErrors  thrpt   30  162764.530 ± 5975.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_basicSyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_basicSyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 312984.758 ops/s
# Warmup Iteration   2: 1103931.277 ops/s
# Warmup Iteration   3: 1363186.053 ops/s
# Warmup Iteration   4: 1397158.884 ops/s
# Warmup Iteration   5: 1462472.083 ops/s
# Warmup Iteration   6: 1467203.892 ops/s
# Warmup Iteration   7: 1466835.392 ops/s
# Warmup Iteration   8: 1432259.291 ops/s
# Warmup Iteration   9: 1462824.161 ops/s
# Warmup Iteration  10: 1492067.023 ops/s
# Warmup Iteration  11: 1340010.152 ops/s
# Warmup Iteration  12: 1475448.124 ops/s
# Warmup Iteration  13: 1443243.786 ops/s
# Warmup Iteration  14: 1503105.403 ops/s
# Warmup Iteration  15: 1458228.729 ops/s
# Warmup Iteration  16: 1386896.085 ops/s
# Warmup Iteration  17: 1464764.993 ops/s
# Warmup Iteration  18: 1383875.781 ops/s
# Warmup Iteration  19: 1337378.621 ops/s
# Warmup Iteration  20: 1403041.785 ops/s
# Warmup Iteration  21: 1420999.071 ops/s
# Warmup Iteration  22: 1454216.450 ops/s
# Warmup Iteration  23: 1376378.828 ops/s
# Warmup Iteration  24: 1410409.262 ops/s
# Warmup Iteration  25: 1458542.395 ops/s
# Warmup Iteration  26: 1396219.761 ops/s
# Warmup Iteration  27: 1416977.210 ops/s
# Warmup Iteration  28: 1437593.377 ops/s
# Warmup Iteration  29: 1420672.677 ops/s
# Warmup Iteration  30: 1444918.047 ops/s
Iteration   1: 1394845.632 ops/s
Iteration   2: 1460287.602 ops/s
Iteration   3: 1397691.541 ops/s
Iteration   4: 1422295.289 ops/s
Iteration   5: 1452770.012 ops/s
Iteration   6: 1399104.830 ops/s
Iteration   7: 1411267.655 ops/s
Iteration   8: 1386526.154 ops/s
Iteration   9: 1443277.677 ops/s
Iteration  10: 1352676.349 ops/s
Iteration  11: 1423758.193 ops/s
Iteration  12: 1416093.028 ops/s
Iteration  13: 1388036.483 ops/s
Iteration  14: 1397990.509 ops/s
Iteration  15: 1366200.670 ops/s
Iteration  16: 1434298.762 ops/s
Iteration  17: 1357249.764 ops/s
Iteration  18: 1438662.339 ops/s
Iteration  19: 1368434.642 ops/s
Iteration  20: 1472280.173 ops/s
Iteration  21: 1407930.438 ops/s
Iteration  22: 1402538.868 ops/s
Iteration  23: 1461792.785 ops/s
Iteration  24: 1390056.858 ops/s
Iteration  25: 1374036.778 ops/s
Iteration  26: 1448033.334 ops/s
Iteration  27: 1358932.196 ops/s
Iteration  28: 1413173.930 ops/s
Iteration  29: 1397816.086 ops/s
Iteration  30: 1357545.297 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_basicSyncFused":
  1406520.129 ±(99.9%) 22728.831 ops/s [Average]
  (min, avg, max) = (1352676.349, 1406520.129, 1472280.173), stdev = 34019.447
  CI (99.9%): [1383791.298, 1429248.960] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_basicSyncFused  thrpt   30  1406520.129 ± 22728.831  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 344275.871 ops/s
# Warmup Iteration   2: 1409279.334 ops/s
# Warmup Iteration   3: 1522825.496 ops/s
# Warmup Iteration   4: 1444978.661 ops/s
# Warmup Iteration   5: 1703469.222 ops/s
# Warmup Iteration   6: 1686829.840 ops/s
# Warmup Iteration   7: 1774105.360 ops/s
# Warmup Iteration   8: 1634304.423 ops/s
# Warmup Iteration   9: 1746290.614 ops/s
# Warmup Iteration  10: 1707727.328 ops/s
# Warmup Iteration  11: 1722905.800 ops/s
# Warmup Iteration  12: 1693662.225 ops/s
# Warmup Iteration  13: 1785423.294 ops/s
# Warmup Iteration  14: 1685651.039 ops/s
# Warmup Iteration  15: 1746176.939 ops/s
# Warmup Iteration  16: 1747531.291 ops/s
# Warmup Iteration  17: 1675226.548 ops/s
# Warmup Iteration  18: 1681811.496 ops/s
# Warmup Iteration  19: 1729228.531 ops/s
# Warmup Iteration  20: 1703308.502 ops/s
# Warmup Iteration  21: 1784022.841 ops/s
# Warmup Iteration  22: 1671632.403 ops/s
# Warmup Iteration  23: 1708878.806 ops/s
# Warmup Iteration  24: 1744321.010 ops/s
# Warmup Iteration  25: 1634149.753 ops/s
# Warmup Iteration  26: 1708829.865 ops/s
# Warmup Iteration  27: 1654570.311 ops/s
# Warmup Iteration  28: 1683221.817 ops/s
# Warmup Iteration  29: 1695427.284 ops/s
# Warmup Iteration  30: 1770684.751 ops/s
Iteration   1: 1673655.351 ops/s
Iteration   2: 1719336.491 ops/s
Iteration   3: 1694013.920 ops/s
Iteration   4: 1714895.014 ops/s
Iteration   5: 1783195.290 ops/s
Iteration   6: 1692087.736 ops/s
Iteration   7: 1702713.668 ops/s
Iteration   8: 1710262.684 ops/s
Iteration   9: 1757965.354 ops/s
Iteration  10: 1678572.588 ops/s
Iteration  11: 1652408.368 ops/s
Iteration  12: 1741868.637 ops/s
Iteration  13: 1694745.880 ops/s
Iteration  14: 1762344.889 ops/s
Iteration  15: 1679699.769 ops/s
Iteration  16: 1697918.037 ops/s
Iteration  17: 1756655.891 ops/s
Iteration  18: 1524335.430 ops/s
Iteration  19: 1482758.381 ops/s
Iteration  20: 1622338.523 ops/s
Iteration  21: 1732787.280 ops/s
Iteration  22: 1670945.703 ops/s
Iteration  23: 1670585.754 ops/s
Iteration  24: 1753789.686 ops/s
Iteration  25: 1670895.943 ops/s
Iteration  26: 1791973.149 ops/s
Iteration  27: 1657139.461 ops/s
Iteration  28: 1684701.572 ops/s
Iteration  29: 1734458.666 ops/s
Iteration  30: 1684837.839 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_take":
  1693129.565 ±(99.9%) 43853.160 ops/s [Average]
  (min, avg, max) = (1482758.381, 1693129.565, 1791973.149), stdev = 65637.350
  CI (99.9%): [1649276.405, 1736982.725] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_take  thrpt   30  1693129.565 ± 43853.160  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_basicNonFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_basicNonFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 140969.970 ops/s
# Warmup Iteration   2: 613466.393 ops/s
# Warmup Iteration   3: 1033122.557 ops/s
# Warmup Iteration   4: 1019217.255 ops/s
# Warmup Iteration   5: 1053774.592 ops/s
# Warmup Iteration   6: 993283.891 ops/s
# Warmup Iteration   7: 1015485.484 ops/s
# Warmup Iteration   8: 1051282.730 ops/s
# Warmup Iteration   9: 998513.688 ops/s
# Warmup Iteration  10: 1066365.083 ops/s
# Warmup Iteration  11: 990983.729 ops/s
# Warmup Iteration  12: 1044087.941 ops/s
# Warmup Iteration  13: 1045677.977 ops/s
# Warmup Iteration  14: 965464.252 ops/s
# Warmup Iteration  15: 1038476.116 ops/s
# Warmup Iteration  16: 1069310.092 ops/s
# Warmup Iteration  17: 1045457.356 ops/s
# Warmup Iteration  18: 1054141.356 ops/s
# Warmup Iteration  19: 1094330.999 ops/s
# Warmup Iteration  20: 971934.011 ops/s
# Warmup Iteration  21: 1088047.932 ops/s
# Warmup Iteration  22: 1044399.784 ops/s
# Warmup Iteration  23: 1054438.599 ops/s
# Warmup Iteration  24: 1084324.701 ops/s
# Warmup Iteration  25: 1052172.299 ops/s
# Warmup Iteration  26: 1046116.245 ops/s
# Warmup Iteration  27: 1058086.287 ops/s
# Warmup Iteration  28: 1030982.138 ops/s
# Warmup Iteration  29: 1062341.223 ops/s
# Warmup Iteration  30: 1043690.115 ops/s
Iteration   1: 1078891.641 ops/s
Iteration   2: 996177.774 ops/s
Iteration   3: 1051093.543 ops/s
Iteration   4: 1073149.904 ops/s
Iteration   5: 1039979.114 ops/s
Iteration   6: 1034592.645 ops/s
Iteration   7: 1062856.224 ops/s
Iteration   8: 1005202.105 ops/s
Iteration   9: 1115390.903 ops/s
Iteration  10: 1011971.050 ops/s
Iteration  11: 1069811.297 ops/s
Iteration  12: 1048100.126 ops/s
Iteration  13: 1054534.847 ops/s
Iteration  14: 1091875.288 ops/s
Iteration  15: 1018230.708 ops/s
Iteration  16: 1058121.714 ops/s
Iteration  17: 1072185.936 ops/s
Iteration  18: 1027682.024 ops/s
Iteration  19: 1051653.756 ops/s
Iteration  20: 1078448.556 ops/s
Iteration  21: 1016176.204 ops/s
Iteration  22: 1060388.176 ops/s
Iteration  23: 1024810.808 ops/s
Iteration  24: 1068196.384 ops/s
Iteration  25: 1034820.504 ops/s
Iteration  26: 1061418.365 ops/s
Iteration  27: 1059522.643 ops/s
Iteration  28: 1065549.768 ops/s
Iteration  29: 1032322.929 ops/s
Iteration  30: 1007994.669 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_basicNonFused":
  1049038.320 ±(99.9%) 18613.381 ops/s [Average]
  (min, avg, max) = (996177.774, 1049038.320, 1115390.903), stdev = 27859.635
  CI (99.9%): [1030424.939, 1067651.701] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_basicNonFused  thrpt   30  1049038.320 ± 18613.381  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_basicAsyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_basicAsyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14795.848 ops/s
# Warmup Iteration   2: 246607.538 ops/s
# Warmup Iteration   3: 820581.659 ops/s
# Warmup Iteration   4: 866970.759 ops/s
# Warmup Iteration   5: 830130.446 ops/s
# Warmup Iteration   6: 777551.328 ops/s
# Warmup Iteration   7: 909465.183 ops/s
# Warmup Iteration   8: 934872.646 ops/s
# Warmup Iteration   9: 901004.161 ops/s
# Warmup Iteration  10: 925536.670 ops/s
# Warmup Iteration  11: 921086.053 ops/s
# Warmup Iteration  12: 892143.403 ops/s
# Warmup Iteration  13: 943217.060 ops/s
# Warmup Iteration  14: 895284.534 ops/s
# Warmup Iteration  15: 869144.112 ops/s
# Warmup Iteration  16: 916044.870 ops/s
# Warmup Iteration  17: 912588.429 ops/s
# Warmup Iteration  18: 911204.655 ops/s
# Warmup Iteration  19: 916698.364 ops/s
# Warmup Iteration  20: 915477.927 ops/s
# Warmup Iteration  21: 896517.259 ops/s
# Warmup Iteration  22: 913502.435 ops/s
# Warmup Iteration  23: 907723.492 ops/s
# Warmup Iteration  24: 911035.397 ops/s
# Warmup Iteration  25: 904847.842 ops/s
# Warmup Iteration  26: 900672.668 ops/s
# Warmup Iteration  27: 927922.651 ops/s
# Warmup Iteration  28: 906578.137 ops/s
# Warmup Iteration  29: 943312.237 ops/s
# Warmup Iteration  30: 911655.779 ops/s
Iteration   1: 899780.862 ops/s
Iteration   2: 942408.122 ops/s
Iteration   3: 937729.327 ops/s
Iteration   4: 899456.769 ops/s
Iteration   5: 941393.734 ops/s
Iteration   6: 887276.007 ops/s
Iteration   7: 941212.452 ops/s
Iteration   8: 903465.584 ops/s
Iteration   9: 914960.658 ops/s
Iteration  10: 952747.956 ops/s
Iteration  11: 874242.514 ops/s
Iteration  12: 915657.819 ops/s
Iteration  13: 777731.957 ops/s
Iteration  14: 888982.101 ops/s
Iteration  15: 871426.876 ops/s
Iteration  16: 962958.397 ops/s
Iteration  17: 931151.865 ops/s
Iteration  18: 901502.504 ops/s
Iteration  19: 935542.293 ops/s
Iteration  20: 885137.878 ops/s
Iteration  21: 928943.291 ops/s
Iteration  22: 886029.896 ops/s
Iteration  23: 919733.093 ops/s
Iteration  24: 902035.842 ops/s
Iteration  25: 924589.546 ops/s
Iteration  26: 938778.799 ops/s
Iteration  27: 888436.509 ops/s
Iteration  28: 937313.076 ops/s
Iteration  29: 893447.931 ops/s
Iteration  30: 915389.633 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_basicAsyncFused":
  909982.110 ±(99.9%) 23336.877 ops/s [Average]
  (min, avg, max) = (777731.957, 909982.110, 962958.397), stdev = 34929.542
  CI (99.9%): [886645.232, 933318.987] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_basicAsyncFused  thrpt   30  909982.110 ± 23336.877  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_fusedPollCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_fusedPollCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43780.062 ops/s
# Warmup Iteration   2: 293340.366 ops/s
# Warmup Iteration   3: 341791.403 ops/s
# Warmup Iteration   4: 324979.104 ops/s
# Warmup Iteration   5: 395883.693 ops/s
# Warmup Iteration   6: 357272.334 ops/s
# Warmup Iteration   7: 384957.185 ops/s
# Warmup Iteration   8: 394298.102 ops/s
# Warmup Iteration   9: 383355.864 ops/s
# Warmup Iteration  10: 380913.191 ops/s
# Warmup Iteration  11: 394147.846 ops/s
# Warmup Iteration  12: 376728.409 ops/s
# Warmup Iteration  13: 387517.440 ops/s
# Warmup Iteration  14: 398518.895 ops/s
# Warmup Iteration  15: 376501.712 ops/s
# Warmup Iteration  16: 406278.306 ops/s
# Warmup Iteration  17: 411327.537 ops/s
# Warmup Iteration  18: 380673.556 ops/s
# Warmup Iteration  19: 407806.082 ops/s
# Warmup Iteration  20: 395072.619 ops/s
# Warmup Iteration  21: 410549.352 ops/s
# Warmup Iteration  22: 396631.637 ops/s
# Warmup Iteration  23: 401705.670 ops/s
# Warmup Iteration  24: 389369.937 ops/s
# Warmup Iteration  25: 405446.716 ops/s
# Warmup Iteration  26: 391648.638 ops/s
# Warmup Iteration  27: 397432.485 ops/s
# Warmup Iteration  28: 387413.952 ops/s
# Warmup Iteration  29: 392719.823 ops/s
# Warmup Iteration  30: 395798.575 ops/s
Iteration   1: 394011.529 ops/s
Iteration   2: 393224.275 ops/s
Iteration   3: 391524.825 ops/s
Iteration   4: 389686.857 ops/s
Iteration   5: 401984.841 ops/s
Iteration   6: 384467.388 ops/s
Iteration   7: 405283.307 ops/s
Iteration   8: 377109.701 ops/s
Iteration   9: 401474.649 ops/s
Iteration  10: 390419.604 ops/s
Iteration  11: 414325.021 ops/s
Iteration  12: 391998.352 ops/s
Iteration  13: 390426.356 ops/s
Iteration  14: 402892.266 ops/s
Iteration  15: 415680.949 ops/s
Iteration  16: 384293.917 ops/s
Iteration  17: 397972.278 ops/s
Iteration  18: 407185.056 ops/s
Iteration  19: 395179.238 ops/s
Iteration  20: 417746.083 ops/s
Iteration  21: 390340.771 ops/s
Iteration  22: 389360.304 ops/s
Iteration  23: 410997.936 ops/s
Iteration  24: 394615.491 ops/s
Iteration  25: 386411.097 ops/s
Iteration  26: 405521.844 ops/s
Iteration  27: 399982.756 ops/s
Iteration  28: 413151.911 ops/s
Iteration  29: 391417.218 ops/s
Iteration  30: 396845.330 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_fusedPollCrash":
  397517.705 ±(99.9%) 6851.809 ops/s [Average]
  (min, avg, max) = (377109.701, 397517.705, 417746.083), stdev = 10255.465
  CI (99.9%): [390665.896, 404369.514] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_fusedPollCrash  thrpt   30  397517.705 ± 6851.809  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60277.977 ops/s
# Warmup Iteration   2: 269497.271 ops/s
# Warmup Iteration   3: 630179.721 ops/s
# Warmup Iteration   4: 641130.911 ops/s
# Warmup Iteration   5: 819119.757 ops/s
# Warmup Iteration   6: 685231.346 ops/s
# Warmup Iteration   7: 818217.751 ops/s
# Warmup Iteration   8: 783964.858 ops/s
# Warmup Iteration   9: 803456.711 ops/s
# Warmup Iteration  10: 830052.951 ops/s
# Warmup Iteration  11: 763569.521 ops/s
# Warmup Iteration  12: 813653.476 ops/s
# Warmup Iteration  13: 791769.502 ops/s
# Warmup Iteration  14: 811359.841 ops/s
# Warmup Iteration  15: 791639.249 ops/s
# Warmup Iteration  16: 777783.834 ops/s
# Warmup Iteration  17: 817301.726 ops/s
# Warmup Iteration  18: 771885.049 ops/s
# Warmup Iteration  19: 784805.559 ops/s
# Warmup Iteration  20: 818029.211 ops/s
# Warmup Iteration  21: 783568.112 ops/s
# Warmup Iteration  22: 791707.282 ops/s
# Warmup Iteration  23: 817622.895 ops/s
# Warmup Iteration  24: 809112.566 ops/s
# Warmup Iteration  25: 755298.984 ops/s
# Warmup Iteration  26: 811331.735 ops/s
# Warmup Iteration  27: 814102.287 ops/s
# Warmup Iteration  28: 784214.430 ops/s
# Warmup Iteration  29: 796859.619 ops/s
# Warmup Iteration  30: 811569.141 ops/s
Iteration   1: 816734.892 ops/s
Iteration   2: 806557.406 ops/s
Iteration   3: 772839.602 ops/s
Iteration   4: 815802.984 ops/s
Iteration   5: 767375.762 ops/s
Iteration   6: 796275.176 ops/s
Iteration   7: 679228.074 ops/s
Iteration   8: 785838.006 ops/s
Iteration   9: 773443.833 ops/s
Iteration  10: 805659.972 ops/s
Iteration  11: 787656.138 ops/s
Iteration  12: 807466.344 ops/s
Iteration  13: 771160.695 ops/s
Iteration  14: 801999.144 ops/s
Iteration  15: 785891.074 ops/s
Iteration  16: 788697.551 ops/s
Iteration  17: 780477.110 ops/s
Iteration  18: 813714.450 ops/s
Iteration  19: 819219.700 ops/s
Iteration  20: 742865.263 ops/s
Iteration  21: 757876.400 ops/s
Iteration  22: 787582.179 ops/s
Iteration  23: 773599.721 ops/s
Iteration  24: 797943.845 ops/s
Iteration  25: 745696.450 ops/s
Iteration  26: 788000.600 ops/s
Iteration  27: 759713.290 ops/s
Iteration  28: 754756.601 ops/s
Iteration  29: 775558.438 ops/s
Iteration  30: 746358.050 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_cancel":
  780199.625 ±(99.9%) 19455.686 ops/s [Average]
  (min, avg, max) = (679228.074, 780199.625, 819219.700), stdev = 29120.357
  CI (99.9%): [760743.939, 799655.311] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_cancel  thrpt   30  780199.625 ± 19455.686  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_basicFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_basicFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1067145.864 ops/s
# Warmup Iteration   2: 2945200.139 ops/s
# Warmup Iteration   3: 4808942.954 ops/s
# Warmup Iteration   4: 4622986.711 ops/s
# Warmup Iteration   5: 4576480.306 ops/s
# Warmup Iteration   6: 4781562.545 ops/s
# Warmup Iteration   7: 4722935.755 ops/s
# Warmup Iteration   8: 4730684.557 ops/s
# Warmup Iteration   9: 4920367.892 ops/s
# Warmup Iteration  10: 4632230.024 ops/s
# Warmup Iteration  11: 4868309.371 ops/s
# Warmup Iteration  12: 4670317.453 ops/s
# Warmup Iteration  13: 4570615.510 ops/s
# Warmup Iteration  14: 4701661.356 ops/s
# Warmup Iteration  15: 4762434.808 ops/s
# Warmup Iteration  16: 4606422.796 ops/s
# Warmup Iteration  17: 4526554.892 ops/s
# Warmup Iteration  18: 4622452.649 ops/s
# Warmup Iteration  19: 4877166.119 ops/s
# Warmup Iteration  20: 4566739.170 ops/s
# Warmup Iteration  21: 4917059.955 ops/s
# Warmup Iteration  22: 4829453.457 ops/s
# Warmup Iteration  23: 4627061.178 ops/s
# Warmup Iteration  24: 4733934.318 ops/s
# Warmup Iteration  25: 4664806.052 ops/s
# Warmup Iteration  26: 4872650.751 ops/s
# Warmup Iteration  27: 4689572.051 ops/s
# Warmup Iteration  28: 4613362.764 ops/s
# Warmup Iteration  29: 4897398.771 ops/s
# Warmup Iteration  30: 4684240.632 ops/s
Iteration   1: 4930635.495 ops/s
Iteration   2: 4619305.407 ops/s
Iteration   3: 4678102.734 ops/s
Iteration   4: 4790658.088 ops/s
Iteration   5: 4556742.278 ops/s
Iteration   6: 4773616.128 ops/s
Iteration   7: 3720209.331 ops/s
Iteration   8: 4732514.632 ops/s
Iteration   9: 4879082.598 ops/s
Iteration  10: 4813385.218 ops/s
Iteration  11: 4613542.670 ops/s
Iteration  12: 4635660.289 ops/s
Iteration  13: 4739533.204 ops/s
Iteration  14: 4749092.814 ops/s
Iteration  15: 4691618.020 ops/s
Iteration  16: 4744157.383 ops/s
Iteration  17: 4876608.463 ops/s
Iteration  18: 4685562.105 ops/s
Iteration  19: 4626752.015 ops/s
Iteration  20: 4898143.105 ops/s
Iteration  21: 4601250.585 ops/s
Iteration  22: 4770111.152 ops/s
Iteration  23: 4713548.270 ops/s
Iteration  24: 4795238.111 ops/s
Iteration  25: 4744067.235 ops/s
Iteration  26: 4914037.655 ops/s
Iteration  27: 4741651.580 ops/s
Iteration  28: 4714466.767 ops/s
Iteration  29: 4957584.240 ops/s
Iteration  30: 4769368.957 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_basicFusionRejected":
  4715874.884 ±(99.9%) 143142.257 ops/s [Average]
  (min, avg, max) = (3720209.331, 4715874.884, 4957584.240), stdev = 214248.607
  CI (99.9%): [4572732.628, 4859017.141] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score        Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_basicFusionRejected  thrpt   30  4715874.884 ± 143142.257  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 136296.603 ops/s
# Warmup Iteration   2: 532637.120 ops/s
# Warmup Iteration   3: 620571.314 ops/s
# Warmup Iteration   4: 627705.478 ops/s
# Warmup Iteration   5: 694146.196 ops/s
# Warmup Iteration   6: 683778.724 ops/s
# Warmup Iteration   7: 658110.499 ops/s
# Warmup Iteration   8: 674094.752 ops/s
# Warmup Iteration   9: 676149.026 ops/s
# Warmup Iteration  10: 646909.965 ops/s
# Warmup Iteration  11: 597162.096 ops/s
# Warmup Iteration  12: 663875.593 ops/s
# Warmup Iteration  13: 672276.033 ops/s
# Warmup Iteration  14: 683176.391 ops/s
# Warmup Iteration  15: 661150.524 ops/s
# Warmup Iteration  16: 688406.729 ops/s
# Warmup Iteration  17: 703678.201 ops/s
# Warmup Iteration  18: 694665.830 ops/s
# Warmup Iteration  19: 722857.509 ops/s
# Warmup Iteration  20: 700014.659 ops/s
# Warmup Iteration  21: 708045.089 ops/s
# Warmup Iteration  22: 694222.083 ops/s
# Warmup Iteration  23: 737160.141 ops/s
# Warmup Iteration  24: 689907.126 ops/s
# Warmup Iteration  25: 722625.971 ops/s
# Warmup Iteration  26: 690438.228 ops/s
# Warmup Iteration  27: 695547.661 ops/s
# Warmup Iteration  28: 726530.556 ops/s
# Warmup Iteration  29: 697059.225 ops/s
# Warmup Iteration  30: 723196.942 ops/s
Iteration   1: 687847.927 ops/s
Iteration   2: 704476.627 ops/s
Iteration   3: 733709.665 ops/s
Iteration   4: 701470.142 ops/s
Iteration   5: 714747.494 ops/s
Iteration   6: 680017.523 ops/s
Iteration   7: 708639.528 ops/s
Iteration   8: 738211.532 ops/s
Iteration   9: 670976.378 ops/s
Iteration  10: 718756.440 ops/s
Iteration  11: 686844.973 ops/s
Iteration  12: 716892.249 ops/s
Iteration  13: 697641.942 ops/s
Iteration  14: 705047.187 ops/s
Iteration  15: 712705.600 ops/s
Iteration  16: 705696.315 ops/s
Iteration  17: 740564.987 ops/s
Iteration  18: 714524.147 ops/s
Iteration  19: 696431.703 ops/s
Iteration  20: 721105.526 ops/s
Iteration  21: 693497.432 ops/s
Iteration  22: 729897.256 ops/s
Iteration  23: 698908.685 ops/s
Iteration  24: 728380.345 ops/s
Iteration  25: 721838.786 ops/s
Iteration  26: 699849.747 ops/s
Iteration  27: 730403.761 ops/s
Iteration  28: 687002.178 ops/s
Iteration  29: 710508.354 ops/s
Iteration  30: 718811.986 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mainError":
  709180.214 ±(99.9%) 11703.642 ops/s [Average]
  (min, avg, max) = (670976.378, 709180.214, 740564.987), stdev = 17517.461
  CI (99.9%): [697476.572, 720883.855] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_mainError  thrpt   30  709180.214 ± 11703.642  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 230791.347 ops/s
# Warmup Iteration   2: 1944415.099 ops/s
# Warmup Iteration   3: 3262004.959 ops/s
# Warmup Iteration   4: 3668314.433 ops/s
# Warmup Iteration   5: 3450026.406 ops/s
# Warmup Iteration   6: 3556176.165 ops/s
# Warmup Iteration   7: 3544044.228 ops/s
# Warmup Iteration   8: 3180258.687 ops/s
# Warmup Iteration   9: 3454562.704 ops/s
# Warmup Iteration  10: 3493886.213 ops/s
# Warmup Iteration  11: 3590639.114 ops/s
# Warmup Iteration  12: 3769870.564 ops/s
# Warmup Iteration  13: 3499443.340 ops/s
# Warmup Iteration  14: 3581698.071 ops/s
# Warmup Iteration  15: 3509183.275 ops/s
# Warmup Iteration  16: 3536267.091 ops/s
# Warmup Iteration  17: 3672756.165 ops/s
# Warmup Iteration  18: 3499132.341 ops/s
# Warmup Iteration  19: 3659936.408 ops/s
# Warmup Iteration  20: 3613458.346 ops/s
# Warmup Iteration  21: 3532008.138 ops/s
# Warmup Iteration  22: 3697207.416 ops/s
# Warmup Iteration  23: 3479865.801 ops/s
# Warmup Iteration  24: 3439684.136 ops/s
# Warmup Iteration  25: 3752762.980 ops/s
# Warmup Iteration  26: 3463466.387 ops/s
# Warmup Iteration  27: 3765259.009 ops/s
# Warmup Iteration  28: 3523635.330 ops/s
# Warmup Iteration  29: 3067470.938 ops/s
# Warmup Iteration  30: 3494419.608 ops/s
Iteration   1: 3500204.439 ops/s
Iteration   2: 3672044.280 ops/s
Iteration   3: 3678759.363 ops/s
Iteration   4: 3494800.561 ops/s
Iteration   5: 3430398.761 ops/s
Iteration   6: 3681713.621 ops/s
Iteration   7: 3590253.188 ops/s
Iteration   8: 3585824.180 ops/s
Iteration   9: 3708677.292 ops/s
Iteration  10: 3532034.303 ops/s
Iteration  11: 3702515.750 ops/s
Iteration  12: 3523539.335 ops/s
Iteration  13: 3629342.328 ops/s
Iteration  14: 3611565.293 ops/s
Iteration  15: 3636846.390 ops/s
Iteration  16: 3522326.241 ops/s
Iteration  17: 3743659.266 ops/s
Iteration  18: 3721813.946 ops/s
Iteration  19: 3568661.714 ops/s
Iteration  20: 3650335.213 ops/s
Iteration  21: 3568947.876 ops/s
Iteration  22: 3642862.698 ops/s
Iteration  23: 3652401.745 ops/s
Iteration  24: 3735268.735 ops/s
Iteration  25: 3496624.113 ops/s
Iteration  26: 3681543.158 ops/s
Iteration  27: 3503177.760 ops/s
Iteration  28: 3684508.271 ops/s
Iteration  29: 3623861.345 ops/s
Iteration  30: 3510959.776 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_disposed":
  3609515.698 ±(99.9%) 57096.940 ops/s [Average]
  (min, avg, max) = (3430398.761, 3609515.698, 3743659.266), stdev = 85460.019
  CI (99.9%): [3552418.758, 3666612.638] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_disposed  thrpt   30  3609515.698 ± 57096.940  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mainCompletesWhileInnerActive$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mainCompletesWhileInnerActive

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 156683.204 ops/s
# Warmup Iteration   2: 533608.771 ops/s
# Warmup Iteration   3: 1189103.816 ops/s
# Warmup Iteration   4: 1205310.497 ops/s
# Warmup Iteration   5: 1354659.559 ops/s
# Warmup Iteration   6: 1455484.809 ops/s
# Warmup Iteration   7: 1423694.398 ops/s
# Warmup Iteration   8: 1383621.919 ops/s
# Warmup Iteration   9: 1480454.851 ops/s
# Warmup Iteration  10: 1411906.625 ops/s
# Warmup Iteration  11: 1386872.417 ops/s
# Warmup Iteration  12: 1400344.324 ops/s
# Warmup Iteration  13: 1446335.067 ops/s
# Warmup Iteration  14: 1400679.125 ops/s
# Warmup Iteration  15: 1434336.729 ops/s
# Warmup Iteration  16: 1421223.418 ops/s
# Warmup Iteration  17: 1405131.995 ops/s
# Warmup Iteration  18: 1446376.435 ops/s
# Warmup Iteration  19: 1414736.960 ops/s
# Warmup Iteration  20: 1363131.849 ops/s
# Warmup Iteration  21: 1437093.125 ops/s
# Warmup Iteration  22: 1392958.187 ops/s
# Warmup Iteration  23: 1354181.430 ops/s
# Warmup Iteration  24: 1385617.591 ops/s
# Warmup Iteration  25: 1437942.448 ops/s
# Warmup Iteration  26: 1403074.246 ops/s
# Warmup Iteration  27: 1389525.425 ops/s
# Warmup Iteration  28: 1450692.673 ops/s
# Warmup Iteration  29: 1374571.502 ops/s
# Warmup Iteration  30: 1472309.013 ops/s
Iteration   1: 1405916.312 ops/s
Iteration   2: 1394922.240 ops/s
Iteration   3: 1419480.521 ops/s
Iteration   4: 1369440.551 ops/s
Iteration   5: 1481810.021 ops/s
Iteration   6: 1374629.293 ops/s
Iteration   7: 1381620.475 ops/s
Iteration   8: 1455928.240 ops/s
Iteration   9: 1387701.507 ops/s
Iteration  10: 1437468.469 ops/s
Iteration  11: 1158369.420 ops/s
Iteration  12: 1221417.212 ops/s
Iteration  13: 1449726.382 ops/s
Iteration  14: 1364623.930 ops/s
Iteration  15: 1375747.114 ops/s
Iteration  16: 1436119.964 ops/s
Iteration  17: 1362950.162 ops/s
Iteration  18: 1416551.006 ops/s
Iteration  19: 1380087.093 ops/s
Iteration  20: 1456128.605 ops/s
Iteration  21: 1374806.828 ops/s
Iteration  22: 1446206.323 ops/s
Iteration  23: 1387515.223 ops/s
Iteration  24: 1428733.785 ops/s
Iteration  25: 1465620.678 ops/s
Iteration  26: 1367412.523 ops/s
Iteration  27: 1453111.620 ops/s
Iteration  28: 1392251.671 ops/s
Iteration  29: 1426834.282 ops/s
Iteration  30: 1400015.502 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mainCompletesWhileInnerActive":
  1395771.565 ±(99.9%) 44213.832 ops/s [Average]
  (min, avg, max) = (1158369.420, 1395771.565, 1481810.021), stdev = 66177.187
  CI (99.9%): [1351557.733, 1439985.397] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_mainCompletesWhileInnerActive  thrpt   30  1395771.565 ± 44213.832  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43055.616 ops/s
# Warmup Iteration   2: 416934.286 ops/s
# Warmup Iteration   3: 457527.042 ops/s
# Warmup Iteration   4: 519533.635 ops/s
# Warmup Iteration   5: 490209.954 ops/s
# Warmup Iteration   6: 467302.297 ops/s
# Warmup Iteration   7: 521382.665 ops/s
# Warmup Iteration   8: 442038.041 ops/s
# Warmup Iteration   9: 533209.385 ops/s
# Warmup Iteration  10: 494828.378 ops/s
# Warmup Iteration  11: 505862.098 ops/s
# Warmup Iteration  12: 515691.491 ops/s
# Warmup Iteration  13: 509048.333 ops/s
# Warmup Iteration  14: 546921.926 ops/s
# Warmup Iteration  15: 526599.300 ops/s
# Warmup Iteration  16: 501143.249 ops/s
# Warmup Iteration  17: 546408.873 ops/s
# Warmup Iteration  18: 545161.893 ops/s
# Warmup Iteration  19: 541644.196 ops/s
# Warmup Iteration  20: 528694.471 ops/s
# Warmup Iteration  21: 541185.964 ops/s
# Warmup Iteration  22: 535139.261 ops/s
# Warmup Iteration  23: 536988.981 ops/s
# Warmup Iteration  24: 510017.483 ops/s
# Warmup Iteration  25: 558543.794 ops/s
# Warmup Iteration  26: 530363.280 ops/s
# Warmup Iteration  27: 552283.450 ops/s
# Warmup Iteration  28: 525605.715 ops/s
# Warmup Iteration  29: 542166.146 ops/s
# Warmup Iteration  30: 538315.220 ops/s
Iteration   1: 531156.476 ops/s
Iteration   2: 540322.304 ops/s
Iteration   3: 557468.387 ops/s
Iteration   4: 527422.850 ops/s
Iteration   5: 535171.560 ops/s
Iteration   6: 551704.759 ops/s
Iteration   7: 522682.273 ops/s
Iteration   8: 538243.130 ops/s
Iteration   9: 567706.948 ops/s
Iteration  10: 508718.023 ops/s
Iteration  11: 563232.126 ops/s
Iteration  12: 547023.926 ops/s
Iteration  13: 543368.973 ops/s
Iteration  14: 553018.302 ops/s
Iteration  15: 553929.416 ops/s
Iteration  16: 517900.915 ops/s
Iteration  17: 559973.902 ops/s
Iteration  18: 537314.322 ops/s
Iteration  19: 529855.777 ops/s
Iteration  20: 544232.512 ops/s
Iteration  21: 528471.772 ops/s
Iteration  22: 549734.523 ops/s
Iteration  23: 529130.220 ops/s
Iteration  24: 547919.642 ops/s
Iteration  25: 538558.105 ops/s
Iteration  26: 542209.259 ops/s
Iteration  27: 554642.403 ops/s
Iteration  28: 527266.859 ops/s
Iteration  29: 551630.223 ops/s
Iteration  30: 515075.135 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess":
  540502.834 ±(99.9%) 9825.025 ops/s [Average]
  (min, avg, max) = (508718.023, 540502.834, 567706.948), stdev = 14705.636
  CI (99.9%): [530677.809, 550327.859] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess  thrpt   30  540502.834 ± 9825.025  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53146.897 ops/s
# Warmup Iteration   2: 429398.936 ops/s
# Warmup Iteration   3: 492192.289 ops/s
# Warmup Iteration   4: 460981.046 ops/s
# Warmup Iteration   5: 553500.363 ops/s
# Warmup Iteration   6: 526607.160 ops/s
# Warmup Iteration   7: 537086.991 ops/s
# Warmup Iteration   8: 550898.332 ops/s
# Warmup Iteration   9: 518454.213 ops/s
# Warmup Iteration  10: 556000.577 ops/s
# Warmup Iteration  11: 520849.415 ops/s
# Warmup Iteration  12: 531504.226 ops/s
# Warmup Iteration  13: 549554.300 ops/s
# Warmup Iteration  14: 525285.765 ops/s
# Warmup Iteration  15: 540317.356 ops/s
# Warmup Iteration  16: 547541.023 ops/s
# Warmup Iteration  17: 542175.193 ops/s
# Warmup Iteration  18: 577410.068 ops/s
# Warmup Iteration  19: 550251.042 ops/s
# Warmup Iteration  20: 441460.591 ops/s
# Warmup Iteration  21: 575785.446 ops/s
# Warmup Iteration  22: 543854.123 ops/s
# Warmup Iteration  23: 585740.756 ops/s
# Warmup Iteration  24: 543763.183 ops/s
# Warmup Iteration  25: 509989.877 ops/s
# Warmup Iteration  26: 581998.440 ops/s
# Warmup Iteration  27: 563789.796 ops/s
# Warmup Iteration  28: 546552.073 ops/s
# Warmup Iteration  29: 559722.595 ops/s
# Warmup Iteration  30: 525196.121 ops/s
Iteration   1: 568688.299 ops/s
Iteration   2: 565129.095 ops/s
Iteration   3: 552361.136 ops/s
Iteration   4: 582539.264 ops/s
Iteration   5: 560771.956 ops/s
Iteration   6: 549072.581 ops/s
Iteration   7: 583358.053 ops/s
Iteration   8: 563014.163 ops/s
Iteration   9: 552451.884 ops/s
Iteration  10: 548377.901 ops/s
Iteration  11: 568311.879 ops/s
Iteration  12: 586186.323 ops/s
Iteration  13: 583755.351 ops/s
Iteration  14: 547581.147 ops/s
Iteration  15: 556678.633 ops/s
Iteration  16: 574332.695 ops/s
Iteration  17: 552982.156 ops/s
Iteration  18: 565072.348 ops/s
Iteration  19: 551812.413 ops/s
Iteration  20: 582197.102 ops/s
Iteration  21: 549926.145 ops/s
Iteration  22: 570132.973 ops/s
Iteration  23: 561946.194 ops/s
Iteration  24: 559429.850 ops/s
Iteration  25: 563734.176 ops/s
Iteration  26: 554493.575 ops/s
Iteration  27: 571110.444 ops/s
Iteration  28: 564843.829 ops/s
Iteration  29: 557747.054 ops/s
Iteration  30: 579239.957 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mapperCrash":
  564242.619 ±(99.9%) 7938.385 ops/s [Average]
  (min, avg, max) = (547581.147, 564242.619, 586186.323), stdev = 11881.802
  CI (99.9%): [556304.234, 572181.004] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_mapperCrash  thrpt   30  564242.619 ± 7938.385  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mainErrorAfterInnerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mainErrorAfterInnerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20483.201 ops/s
# Warmup Iteration   2: 105549.350 ops/s
# Warmup Iteration   3: 144156.850 ops/s
# Warmup Iteration   4: 159699.033 ops/s
# Warmup Iteration   5: 167481.018 ops/s
# Warmup Iteration   6: 164127.724 ops/s
# Warmup Iteration   7: 171308.502 ops/s
# Warmup Iteration   8: 168055.454 ops/s
# Warmup Iteration   9: 170698.113 ops/s
# Warmup Iteration  10: 167931.068 ops/s
# Warmup Iteration  11: 168223.231 ops/s
# Warmup Iteration  12: 172608.993 ops/s
# Warmup Iteration  13: 166208.825 ops/s
# Warmup Iteration  14: 174517.554 ops/s
# Warmup Iteration  15: 166984.362 ops/s
# Warmup Iteration  16: 173260.862 ops/s
# Warmup Iteration  17: 176548.020 ops/s
# Warmup Iteration  18: 174877.830 ops/s
# Warmup Iteration  19: 174601.983 ops/s
# Warmup Iteration  20: 176410.517 ops/s
# Warmup Iteration  21: 180616.294 ops/s
# Warmup Iteration  22: 178663.672 ops/s
# Warmup Iteration  23: 166920.446 ops/s
# Warmup Iteration  24: 178733.386 ops/s
# Warmup Iteration  25: 173263.967 ops/s
# Warmup Iteration  26: 173563.859 ops/s
# Warmup Iteration  27: 170075.588 ops/s
# Warmup Iteration  28: 173245.579 ops/s
# Warmup Iteration  29: 178851.807 ops/s
# Warmup Iteration  30: 172990.435 ops/s
Iteration   1: 180046.769 ops/s
Iteration   2: 171936.260 ops/s
Iteration   3: 181600.332 ops/s
Iteration   4: 172509.530 ops/s
Iteration   5: 179092.854 ops/s
Iteration   6: 176595.938 ops/s
Iteration   7: 174375.435 ops/s
Iteration   8: 181753.231 ops/s
Iteration   9: 173148.554 ops/s
Iteration  10: 175793.552 ops/s
Iteration  11: 173969.677 ops/s
Iteration  12: 178692.733 ops/s
Iteration  13: 176817.901 ops/s
Iteration  14: 168538.103 ops/s
Iteration  15: 175119.410 ops/s
Iteration  16: 181317.459 ops/s
Iteration  17: 176006.873 ops/s
Iteration  18: 177427.726 ops/s
Iteration  19: 177281.772 ops/s
Iteration  20: 175752.940 ops/s
Iteration  21: 180752.430 ops/s
Iteration  22: 174445.300 ops/s
Iteration  23: 183794.591 ops/s
Iteration  24: 170828.936 ops/s
Iteration  25: 178835.981 ops/s
Iteration  26: 173995.582 ops/s
Iteration  27: 176672.017 ops/s
Iteration  28: 177266.150 ops/s
Iteration  29: 175316.565 ops/s
Iteration  30: 176794.174 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_mainErrorAfterInnerError":
  176549.293 ±(99.9%) 2319.212 ops/s [Average]
  (min, avg, max) = (168538.103, 176549.293, 183794.591), stdev = 3471.287
  CI (99.9%): [174230.081, 178868.504] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_mainErrorAfterInnerError  thrpt   30  176549.293 ± 2319.212  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 121673.182 ops/s
# Warmup Iteration   2: 413473.141 ops/s
# Warmup Iteration   3: 466740.117 ops/s
# Warmup Iteration   4: 451823.480 ops/s
# Warmup Iteration   5: 444375.683 ops/s
# Warmup Iteration   6: 425466.143 ops/s
# Warmup Iteration   7: 457807.560 ops/s
# Warmup Iteration   8: 482683.720 ops/s
# Warmup Iteration   9: 470729.793 ops/s
# Warmup Iteration  10: 487539.266 ops/s
# Warmup Iteration  11: 483697.846 ops/s
# Warmup Iteration  12: 463484.081 ops/s
# Warmup Iteration  13: 495620.060 ops/s
# Warmup Iteration  14: 474656.782 ops/s
# Warmup Iteration  15: 354870.540 ops/s
# Warmup Iteration  16: 490802.132 ops/s
# Warmup Iteration  17: 491572.330 ops/s
# Warmup Iteration  18: 502261.270 ops/s
# Warmup Iteration  19: 486340.071 ops/s
# Warmup Iteration  20: 497145.529 ops/s
# Warmup Iteration  21: 494490.143 ops/s
# Warmup Iteration  22: 474824.619 ops/s
# Warmup Iteration  23: 520709.072 ops/s
# Warmup Iteration  24: 491406.693 ops/s
# Warmup Iteration  25: 495118.345 ops/s
# Warmup Iteration  26: 496618.236 ops/s
# Warmup Iteration  27: 480869.237 ops/s
# Warmup Iteration  28: 504180.342 ops/s
# Warmup Iteration  29: 488976.043 ops/s
# Warmup Iteration  30: 508249.030 ops/s
Iteration   1: 493957.914 ops/s
Iteration   2: 477283.612 ops/s
Iteration   3: 514062.484 ops/s
Iteration   4: 485380.661 ops/s
Iteration   5: 503930.793 ops/s
Iteration   6: 501407.167 ops/s
Iteration   7: 498602.578 ops/s
Iteration   8: 511490.065 ops/s
Iteration   9: 477058.404 ops/s
Iteration  10: 516532.606 ops/s
Iteration  11: 488440.527 ops/s
Iteration  12: 515411.566 ops/s
Iteration  13: 488401.337 ops/s
Iteration  14: 507165.323 ops/s
Iteration  15: 492512.440 ops/s
Iteration  16: 494721.982 ops/s
Iteration  17: 516457.415 ops/s
Iteration  18: 487732.009 ops/s
Iteration  19: 504320.944 ops/s
Iteration  20: 500329.636 ops/s
Iteration  21: 501557.180 ops/s
Iteration  22: 514117.957 ops/s
Iteration  23: 476254.790 ops/s
Iteration  24: 519318.656 ops/s
Iteration  25: 496106.035 ops/s
Iteration  26: 483294.157 ops/s
Iteration  27: 505585.207 ops/s
Iteration  28: 501401.857 ops/s
Iteration  29: 499111.297 ops/s
Iteration  30: 480164.335 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe":
  498403.698 ±(99.9%) 8577.689 ops/s [Average]
  (min, avg, max) = (476254.790, 498403.698, 519318.656), stdev = 12838.682
  CI (99.9%): [489826.009, 506981.387] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  498403.698 ± 8577.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_innerErrorAfterMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_innerErrorAfterMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14361.079 ops/s
# Warmup Iteration   2: 67873.764 ops/s
# Warmup Iteration   3: 74545.248 ops/s
# Warmup Iteration   4: 158111.895 ops/s
# Warmup Iteration   5: 168928.705 ops/s
# Warmup Iteration   6: 165820.216 ops/s
# Warmup Iteration   7: 177064.463 ops/s
# Warmup Iteration   8: 184655.287 ops/s
# Warmup Iteration   9: 169626.908 ops/s
# Warmup Iteration  10: 177905.331 ops/s
# Warmup Iteration  11: 186065.061 ops/s
# Warmup Iteration  12: 179861.584 ops/s
# Warmup Iteration  13: 176877.982 ops/s
# Warmup Iteration  14: 183304.610 ops/s
# Warmup Iteration  15: 174577.285 ops/s
# Warmup Iteration  16: 178427.173 ops/s
# Warmup Iteration  17: 188873.045 ops/s
# Warmup Iteration  18: 180909.048 ops/s
# Warmup Iteration  19: 187380.201 ops/s
# Warmup Iteration  20: 185964.708 ops/s
# Warmup Iteration  21: 183018.358 ops/s
# Warmup Iteration  22: 183790.899 ops/s
# Warmup Iteration  23: 182930.267 ops/s
# Warmup Iteration  24: 185561.476 ops/s
# Warmup Iteration  25: 178920.890 ops/s
# Warmup Iteration  26: 189933.090 ops/s
# Warmup Iteration  27: 179912.481 ops/s
# Warmup Iteration  28: 191803.838 ops/s
# Warmup Iteration  29: 183514.269 ops/s
# Warmup Iteration  30: 180760.965 ops/s
Iteration   1: 192957.309 ops/s
Iteration   2: 181487.347 ops/s
Iteration   3: 181798.378 ops/s
Iteration   4: 191023.963 ops/s
Iteration   5: 179613.959 ops/s
Iteration   6: 186793.564 ops/s
Iteration   7: 184021.705 ops/s
Iteration   8: 186135.674 ops/s
Iteration   9: 190302.443 ops/s
Iteration  10: 180943.307 ops/s
Iteration  11: 191553.291 ops/s
Iteration  12: 184186.121 ops/s
Iteration  13: 182805.588 ops/s
Iteration  14: 186137.625 ops/s
Iteration  15: 184526.055 ops/s
Iteration  16: 179826.125 ops/s
Iteration  17: 188840.412 ops/s
Iteration  18: 178093.602 ops/s
Iteration  19: 186085.047 ops/s
Iteration  20: 181906.781 ops/s
Iteration  21: 186231.823 ops/s
Iteration  22: 187449.141 ops/s
Iteration  23: 183459.241 ops/s
Iteration  24: 190157.097 ops/s
Iteration  25: 189285.203 ops/s
Iteration  26: 193571.788 ops/s
Iteration  27: 178655.174 ops/s
Iteration  28: 183194.086 ops/s
Iteration  29: 179309.634 ops/s
Iteration  30: 185050.698 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_innerErrorAfterMainError":
  185180.073 ±(99.9%) 2921.201 ops/s [Average]
  (min, avg, max) = (178093.602, 185180.073, 193571.788), stdev = 4372.317
  CI (99.9%): [182258.872, 188101.274] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_innerErrorAfterMainError  thrpt   30  185180.073 ± 2921.201  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDisposeError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDisposeError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 214536.425 ops/s
# Warmup Iteration   2: 556594.081 ops/s
# Warmup Iteration   3: 642196.956 ops/s
# Warmup Iteration   4: 739684.647 ops/s
# Warmup Iteration   5: 593560.257 ops/s
# Warmup Iteration   6: 715422.923 ops/s
# Warmup Iteration   7: 688490.770 ops/s
# Warmup Iteration   8: 726963.769 ops/s
# Warmup Iteration   9: 538116.656 ops/s
# Warmup Iteration  10: 728598.892 ops/s
# Warmup Iteration  11: 675434.981 ops/s
# Warmup Iteration  12: 732426.492 ops/s
# Warmup Iteration  13: 699567.554 ops/s
# Warmup Iteration  14: 710995.202 ops/s
# Warmup Iteration  15: 705533.623 ops/s
# Warmup Iteration  16: 704452.495 ops/s
# Warmup Iteration  17: 744915.540 ops/s
# Warmup Iteration  18: 746023.863 ops/s
# Warmup Iteration  19: 748240.775 ops/s
# Warmup Iteration  20: 769174.844 ops/s
# Warmup Iteration  21: 741161.048 ops/s
# Warmup Iteration  22: 764800.313 ops/s
# Warmup Iteration  23: 730155.634 ops/s
# Warmup Iteration  24: 742938.131 ops/s
# Warmup Iteration  25: 731493.212 ops/s
# Warmup Iteration  26: 772059.575 ops/s
# Warmup Iteration  27: 767781.319 ops/s
# Warmup Iteration  28: 741658.552 ops/s
# Warmup Iteration  29: 760381.714 ops/s
# Warmup Iteration  30: 746410.723 ops/s
Iteration   1: 776418.068 ops/s
Iteration   2: 747353.776 ops/s
Iteration   3: 743327.830 ops/s
Iteration   4: 755317.561 ops/s
Iteration   5: 740418.876 ops/s
Iteration   6: 753986.864 ops/s
Iteration   7: 759077.235 ops/s
Iteration   8: 736051.298 ops/s
Iteration   9: 762664.034 ops/s
Iteration  10: 739586.676 ops/s
Iteration  11: 761632.724 ops/s
Iteration  12: 767866.803 ops/s
Iteration  13: 741906.855 ops/s
Iteration  14: 763459.315 ops/s
Iteration  15: 759156.473 ops/s
Iteration  16: 737877.532 ops/s
Iteration  17: 728836.290 ops/s
Iteration  18: 768250.533 ops/s
Iteration  19: 731770.696 ops/s
Iteration  20: 771109.461 ops/s
Iteration  21: 788661.727 ops/s
Iteration  22: 737297.979 ops/s
Iteration  23: 764073.813 ops/s
Iteration  24: 729533.111 ops/s
Iteration  25: 760613.526 ops/s
Iteration  26: 780238.746 ops/s
Iteration  27: 717974.616 ops/s
Iteration  28: 748011.608 ops/s
Iteration  29: 774973.877 ops/s
Iteration  30: 723675.940 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDisposeError":
  752370.795 ±(99.9%) 12028.430 ops/s [Average]
  (min, avg, max) = (717974.616, 752370.795, 788661.727), stdev = 18003.590
  CI (99.9%): [740342.365, 764399.225] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnDisposeError  thrpt   30  752370.795 ± 12028.430  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 108286.589 ops/s
# Warmup Iteration   2: 453857.456 ops/s
# Warmup Iteration   3: 535657.993 ops/s
# Warmup Iteration   4: 496972.164 ops/s
# Warmup Iteration   5: 525550.542 ops/s
# Warmup Iteration   6: 531087.829 ops/s
# Warmup Iteration   7: 495389.109 ops/s
# Warmup Iteration   8: 519925.728 ops/s
# Warmup Iteration   9: 502365.319 ops/s
# Warmup Iteration  10: 511768.902 ops/s
# Warmup Iteration  11: 517791.660 ops/s
# Warmup Iteration  12: 532681.109 ops/s
# Warmup Iteration  13: 526292.765 ops/s
# Warmup Iteration  14: 518521.187 ops/s
# Warmup Iteration  15: 535910.090 ops/s
# Warmup Iteration  16: 515793.767 ops/s
# Warmup Iteration  17: 580049.328 ops/s
# Warmup Iteration  18: 540606.179 ops/s
# Warmup Iteration  19: 569765.055 ops/s
# Warmup Iteration  20: 572924.076 ops/s
# Warmup Iteration  21: 545569.956 ops/s
# Warmup Iteration  22: 545813.547 ops/s
# Warmup Iteration  23: 578160.472 ops/s
# Warmup Iteration  24: 568065.782 ops/s
# Warmup Iteration  25: 535290.866 ops/s
# Warmup Iteration  26: 564351.411 ops/s
# Warmup Iteration  27: 553451.602 ops/s
# Warmup Iteration  28: 549167.876 ops/s
# Warmup Iteration  29: 545861.822 ops/s
# Warmup Iteration  30: 536787.688 ops/s
Iteration   1: 575476.883 ops/s
Iteration   2: 543145.046 ops/s
Iteration   3: 556181.468 ops/s
Iteration   4: 526746.354 ops/s
Iteration   5: 542547.675 ops/s
Iteration   6: 559627.930 ops/s
Iteration   7: 551243.978 ops/s
Iteration   8: 572138.457 ops/s
Iteration   9: 570543.424 ops/s
Iteration  10: 573144.593 ops/s
Iteration  11: 527057.388 ops/s
Iteration  12: 571434.523 ops/s
Iteration  13: 544748.266 ops/s
Iteration  14: 555255.321 ops/s
Iteration  15: 550164.999 ops/s
Iteration  16: 550296.643 ops/s
Iteration  17: 568921.187 ops/s
Iteration  18: 568244.452 ops/s
Iteration  19: 541630.163 ops/s
Iteration  20: 572880.860 ops/s
Iteration  21: 534335.796 ops/s
Iteration  22: 568979.345 ops/s
Iteration  23: 553065.613 ops/s
Iteration  24: 549456.524 ops/s
Iteration  25: 577609.018 ops/s
Iteration  26: 530421.433 ops/s
Iteration  27: 545660.872 ops/s
Iteration  28: 573272.896 ops/s
Iteration  29: 544601.815 ops/s
Iteration  30: 565472.971 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_doubleOnSubscribe":
  555476.863 ±(99.9%) 10296.805 ops/s [Average]
  (min, avg, max) = (526746.354, 555476.863, 577609.018), stdev = 15411.773
  CI (99.9%): [545180.059, 565773.668] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
SingleTimeIntervalTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  555476.863 ± 10296.805  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 82664.116 ops/s
# Warmup Iteration   2: 330861.755 ops/s
# Warmup Iteration   3: 379122.443 ops/s
# Warmup Iteration   4: 278148.898 ops/s
# Warmup Iteration   5: 360894.151 ops/s
# Warmup Iteration   6: 364137.146 ops/s
# Warmup Iteration   7: 373137.600 ops/s
# Warmup Iteration   8: 369112.352 ops/s
# Warmup Iteration   9: 378354.288 ops/s
# Warmup Iteration  10: 379795.210 ops/s
# Warmup Iteration  11: 367714.148 ops/s
# Warmup Iteration  12: 383076.948 ops/s
# Warmup Iteration  13: 365698.778 ops/s
# Warmup Iteration  14: 374372.055 ops/s
# Warmup Iteration  15: 371851.277 ops/s
# Warmup Iteration  16: 371589.342 ops/s
# Warmup Iteration  17: 389302.431 ops/s
# Warmup Iteration  18: 377435.971 ops/s
# Warmup Iteration  19: 380006.665 ops/s
# Warmup Iteration  20: 391291.065 ops/s
# Warmup Iteration  21: 387030.345 ops/s
# Warmup Iteration  22: 380425.104 ops/s
# Warmup Iteration  23: 378690.107 ops/s
# Warmup Iteration  24: 380494.333 ops/s
# Warmup Iteration  25: 397308.293 ops/s
# Warmup Iteration  26: 374432.161 ops/s
# Warmup Iteration  27: 395117.918 ops/s
# Warmup Iteration  28: 373264.135 ops/s
# Warmup Iteration  29: 400328.713 ops/s
# Warmup Iteration  30: 383982.885 ops/s
Iteration   1: 378659.225 ops/s
Iteration   2: 393386.309 ops/s
Iteration   3: 376459.426 ops/s
Iteration   4: 384890.535 ops/s
Iteration   5: 386718.780 ops/s
Iteration   6: 379608.045 ops/s
Iteration   7: 396774.619 ops/s
Iteration   8: 390868.378 ops/s
Iteration   9: 378878.008 ops/s
Iteration  10: 394456.172 ops/s
Iteration  11: 376406.488 ops/s
Iteration  12: 401359.861 ops/s
Iteration  13: 372081.108 ops/s
Iteration  14: 378865.556 ops/s
Iteration  15: 398512.966 ops/s
Iteration  16: 401782.616 ops/s
Iteration  17: 368712.395 ops/s
Iteration  18: 380036.852 ops/s
Iteration  19: 399318.628 ops/s
Iteration  20: 374380.703 ops/s
Iteration  21: 397180.799 ops/s
Iteration  22: 377696.764 ops/s
Iteration  23: 394882.632 ops/s
Iteration  24: 378829.871 ops/s
Iteration  25: 381107.849 ops/s
Iteration  26: 397530.870 ops/s
Iteration  27: 376109.337 ops/s
Iteration  28: 397333.119 ops/s
Iteration  29: 393586.243 ops/s
Iteration  30: 389215.730 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_doubleOnSubscribe":
  386520.996 ±(99.9%) 6676.917 ops/s [Average]
  (min, avg, max) = (368712.395, 386520.996, 401782.616), stdev = 9993.696
  CI (99.9%): [379844.079, 393197.913] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SingleTimestampTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  386520.996 ± 6676.917  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 122494.423 ops/s
# Warmup Iteration   2: 442061.646 ops/s
# Warmup Iteration   3: 447165.017 ops/s
# Warmup Iteration   4: 493635.444 ops/s
# Warmup Iteration   5: 496236.577 ops/s
# Warmup Iteration   6: 506871.845 ops/s
# Warmup Iteration   7: 431467.134 ops/s
# Warmup Iteration   8: 512021.109 ops/s
# Warmup Iteration   9: 535073.359 ops/s
# Warmup Iteration  10: 492056.793 ops/s
# Warmup Iteration  11: 509430.829 ops/s
# Warmup Iteration  12: 517788.467 ops/s
# Warmup Iteration  13: 519477.514 ops/s
# Warmup Iteration  14: 495954.346 ops/s
# Warmup Iteration  15: 521958.830 ops/s
# Warmup Iteration  16: 499194.835 ops/s
# Warmup Iteration  17: 527930.640 ops/s
# Warmup Iteration  18: 548502.440 ops/s
# Warmup Iteration  19: 533389.208 ops/s
# Warmup Iteration  20: 509470.092 ops/s
# Warmup Iteration  21: 549749.430 ops/s
# Warmup Iteration  22: 527826.109 ops/s
# Warmup Iteration  23: 555585.375 ops/s
# Warmup Iteration  24: 509860.806 ops/s
# Warmup Iteration  25: 542797.049 ops/s
# Warmup Iteration  26: 521880.657 ops/s
# Warmup Iteration  27: 537648.968 ops/s
# Warmup Iteration  28: 545513.063 ops/s
# Warmup Iteration  29: 560997.598 ops/s
# Warmup Iteration  30: 510660.904 ops/s
Iteration   1: 545839.102 ops/s
Iteration   2: 515124.826 ops/s
Iteration   3: 543872.933 ops/s
Iteration   4: 536019.295 ops/s
Iteration   5: 521688.836 ops/s
Iteration   6: 537651.579 ops/s
Iteration   7: 532869.279 ops/s
Iteration   8: 547238.446 ops/s
Iteration   9: 519840.366 ops/s
Iteration  10: 545784.658 ops/s
Iteration  11: 540860.189 ops/s
Iteration  12: 532286.133 ops/s
Iteration  13: 550561.261 ops/s
Iteration  14: 527655.377 ops/s
Iteration  15: 522002.630 ops/s
Iteration  16: 541567.060 ops/s
Iteration  17: 521349.828 ops/s
Iteration  18: 552919.835 ops/s
Iteration  19: 517494.644 ops/s
Iteration  20: 539268.710 ops/s
Iteration  21: 531128.375 ops/s
Iteration  22: 549704.140 ops/s
Iteration  23: 545241.902 ops/s
Iteration  24: 519698.066 ops/s
Iteration  25: 541017.777 ops/s
Iteration  26: 535200.417 ops/s
Iteration  27: 527928.343 ops/s
Iteration  28: 550375.276 ops/s
Iteration  29: 520349.711 ops/s
Iteration  30: 547326.815 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe":
  535328.860 ±(99.9%) 7762.920 ops/s [Average]
  (min, avg, max) = (515124.826, 535328.860, 552919.835), stdev = 11619.174
  CI (99.9%): [527565.941, 543091.780] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SingleUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  535328.860 ± 7762.920  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 139669.386 ops/s
# Warmup Iteration   2: 340872.336 ops/s
# Warmup Iteration   3: 369525.929 ops/s
# Warmup Iteration   4: 377146.195 ops/s
# Warmup Iteration   5: 383615.274 ops/s
# Warmup Iteration   6: 376825.958 ops/s
# Warmup Iteration   7: 378789.569 ops/s
# Warmup Iteration   8: 373184.247 ops/s
# Warmup Iteration   9: 387310.456 ops/s
# Warmup Iteration  10: 361722.817 ops/s
# Warmup Iteration  11: 371673.304 ops/s
# Warmup Iteration  12: 390567.379 ops/s
# Warmup Iteration  13: 363171.724 ops/s
# Warmup Iteration  14: 400810.249 ops/s
# Warmup Iteration  15: 364785.505 ops/s
# Warmup Iteration  16: 375472.501 ops/s
# Warmup Iteration  17: 399660.091 ops/s
# Warmup Iteration  18: 385109.727 ops/s
# Warmup Iteration  19: 385179.020 ops/s
# Warmup Iteration  20: 397781.099 ops/s
# Warmup Iteration  21: 404634.694 ops/s
# Warmup Iteration  22: 400876.423 ops/s
# Warmup Iteration  23: 384089.622 ops/s
# Warmup Iteration  24: 389346.826 ops/s
# Warmup Iteration  25: 403016.588 ops/s
# Warmup Iteration  26: 382005.778 ops/s
# Warmup Iteration  27: 396478.496 ops/s
# Warmup Iteration  28: 386252.763 ops/s
# Warmup Iteration  29: 396588.035 ops/s
# Warmup Iteration  30: 385678.939 ops/s
Iteration   1: 400552.989 ops/s
Iteration   2: 391481.181 ops/s
Iteration   3: 384589.856 ops/s
Iteration   4: 397875.526 ops/s
Iteration   5: 388633.074 ops/s
Iteration   6: 407239.546 ops/s
Iteration   7: 376360.162 ops/s
Iteration   8: 395963.697 ops/s
Iteration   9: 407503.131 ops/s
Iteration  10: 386101.853 ops/s
Iteration  11: 402030.360 ops/s
Iteration  12: 381217.468 ops/s
Iteration  13: 393028.466 ops/s
Iteration  14: 385526.350 ops/s
Iteration  15: 398306.656 ops/s
Iteration  16: 399077.467 ops/s
Iteration  17: 387413.046 ops/s
Iteration  18: 404309.096 ops/s
Iteration  19: 383526.862 ops/s
Iteration  20: 407470.763 ops/s
Iteration  21: 400890.397 ops/s
Iteration  22: 386790.170 ops/s
Iteration  23: 407881.031 ops/s
Iteration  24: 389681.187 ops/s
Iteration  25: 402066.504 ops/s
Iteration  26: 387971.990 ops/s
Iteration  27: 384029.728 ops/s
Iteration  28: 405067.983 ops/s
Iteration  29: 385669.467 ops/s
Iteration  30: 409302.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeIntervalTest._Benchmark.benchmark_doubleOnSubscribe":
  394585.288 ±(99.9%) 6362.329 ops/s [Average]
  (min, avg, max) = (376360.162, 394585.288, 409302.647), stdev = 9522.835
  CI (99.9%): [388222.959, 400947.618] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MaybeTimeIntervalTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  394585.288 ± 6362.329  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_doubleOnXTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_doubleOnXTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32511.955 ops/s
# Warmup Iteration   2: 97744.716 ops/s
# Warmup Iteration   3: 156364.737 ops/s
# Warmup Iteration   4: 154947.794 ops/s
# Warmup Iteration   5: 177232.124 ops/s
# Warmup Iteration   6: 171427.419 ops/s
# Warmup Iteration   7: 174385.087 ops/s
# Warmup Iteration   8: 171848.407 ops/s
# Warmup Iteration   9: 174047.419 ops/s
# Warmup Iteration  10: 173285.506 ops/s
# Warmup Iteration  11: 174901.985 ops/s
# Warmup Iteration  12: 167196.333 ops/s
# Warmup Iteration  13: 178240.394 ops/s
# Warmup Iteration  14: 171374.393 ops/s
# Warmup Iteration  15: 156550.033 ops/s
# Warmup Iteration  16: 168962.246 ops/s
# Warmup Iteration  17: 178762.880 ops/s
# Warmup Iteration  18: 172366.300 ops/s
# Warmup Iteration  19: 188705.305 ops/s
# Warmup Iteration  20: 172615.831 ops/s
# Warmup Iteration  21: 182764.955 ops/s
# Warmup Iteration  22: 175826.678 ops/s
# Warmup Iteration  23: 178707.477 ops/s
# Warmup Iteration  24: 182704.034 ops/s
# Warmup Iteration  25: 176547.020 ops/s
# Warmup Iteration  26: 175756.796 ops/s
# Warmup Iteration  27: 179286.551 ops/s
# Warmup Iteration  28: 173987.569 ops/s
# Warmup Iteration  29: 182033.041 ops/s
# Warmup Iteration  30: 177072.961 ops/s
Iteration   1: 182806.213 ops/s
Iteration   2: 174156.689 ops/s
Iteration   3: 181903.482 ops/s
Iteration   4: 175623.407 ops/s
Iteration   5: 185213.440 ops/s
Iteration   6: 186079.509 ops/s
Iteration   7: 173504.651 ops/s
Iteration   8: 182537.531 ops/s
Iteration   9: 173873.299 ops/s
Iteration  10: 179019.455 ops/s
Iteration  11: 176108.735 ops/s
Iteration  12: 169201.122 ops/s
Iteration  13: 182860.439 ops/s
Iteration  14: 170058.008 ops/s
Iteration  15: 175830.372 ops/s
Iteration  16: 182251.827 ops/s
Iteration  17: 175628.161 ops/s
Iteration  18: 183764.618 ops/s
Iteration  19: 175456.125 ops/s
Iteration  20: 182451.609 ops/s
Iteration  21: 169870.954 ops/s
Iteration  22: 183056.902 ops/s
Iteration  23: 173182.922 ops/s
Iteration  24: 145558.155 ops/s
Iteration  25: 161446.111 ops/s
Iteration  26: 176705.041 ops/s
Iteration  27: 185122.598 ops/s
Iteration  28: 175110.103 ops/s
Iteration  29: 182100.658 ops/s
Iteration  30: 176432.799 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_doubleOnXTime":
  176563.831 ±(99.9%) 5478.690 ops/s [Average]
  (min, avg, max) = (145558.155, 176563.831, 186079.509), stdev = 8200.246
  CI (99.9%): [171085.141, 182042.521] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableRefCountTest._Benchmark.benchmark_doubleOnXTime  thrpt   30  176563.831 ± 5478.690  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleDirectPeriodic$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleDirectPeriodic

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 571324.179 ops/s
# Warmup Iteration   2: 601938.689 ops/s
# Warmup Iteration   3: 768801.272 ops/s
# Warmup Iteration   4: 680474.012 ops/s
# Warmup Iteration   5: 792295.504 ops/s
# Warmup Iteration   6: 679847.477 ops/s
# Warmup Iteration   7: 724618.249 ops/s
# Warmup Iteration   8: 783860.493 ops/s
# Warmup Iteration   9: 758902.738 ops/s
# Warmup Iteration  10: 791488.338 ops/s
# Warmup Iteration  11: 745206.027 ops/s
# Warmup Iteration  12: 766115.831 ops/s
# Warmup Iteration  13: 780382.727 ops/s
# Warmup Iteration  14: 782497.077 ops/s
# Warmup Iteration  15: 790927.525 ops/s
# Warmup Iteration  16: 768056.974 ops/s
# Warmup Iteration  17: 816345.956 ops/s
# Warmup Iteration  18: 839305.175 ops/s
# Warmup Iteration  19: 799679.076 ops/s
# Warmup Iteration  20: 858615.963 ops/s
# Warmup Iteration  21: 808060.755 ops/s
# Warmup Iteration  22: 832640.696 ops/s
# Warmup Iteration  23: 841562.149 ops/s
# Warmup Iteration  24: 824157.846 ops/s
# Warmup Iteration  25: 816043.923 ops/s
# Warmup Iteration  26: 810723.107 ops/s
# Warmup Iteration  27: 824886.491 ops/s
# Warmup Iteration  28: 812363.810 ops/s
# Warmup Iteration  29: 843628.286 ops/s
# Warmup Iteration  30: 821183.925 ops/s
Iteration   1: 838196.780 ops/s
Iteration   2: 840979.950 ops/s
Iteration   3: 790337.158 ops/s
Iteration   4: 848950.775 ops/s
Iteration   5: 802822.681 ops/s
Iteration   6: 830651.160 ops/s
Iteration   7: 837063.070 ops/s
Iteration   8: 821744.327 ops/s
Iteration   9: 853300.156 ops/s
Iteration  10: 792942.509 ops/s
Iteration  11: 833361.650 ops/s
Iteration  12: 821929.848 ops/s
Iteration  13: 805167.679 ops/s
Iteration  14: 832798.744 ops/s
Iteration  15: 865564.596 ops/s
Iteration  16: 826548.934 ops/s
Iteration  17: 782547.957 ops/s
Iteration  18: 856227.703 ops/s
Iteration  19: 813214.502 ops/s
Iteration  20: 821564.680 ops/s
Iteration  21: 792450.196 ops/s
Iteration  22: 823161.091 ops/s
Iteration  23: 868550.531 ops/s
Iteration  24: 801146.631 ops/s
Iteration  25: 852827.718 ops/s
Iteration  26: 813818.306 ops/s
Iteration  27: 850774.238 ops/s
Iteration  28: 803219.727 ops/s
Iteration  29: 840504.061 ops/s
Iteration  30: 798839.872 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleDirectPeriodic":
  825373.574 ±(99.9%) 15844.327 ops/s [Average]
  (min, avg, max) = (782547.957, 825373.574, 868550.531), stdev = 23715.045
  CI (99.9%): [809529.247, 841217.901] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleDirectPeriodic  thrpt   30  825373.574 ± 15844.327  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleDirectTimed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleDirectTimed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 597221.153 ops/s
# Warmup Iteration   2: 722083.310 ops/s
# Warmup Iteration   3: 758445.812 ops/s
# Warmup Iteration   4: 706444.683 ops/s
# Warmup Iteration   5: 753357.552 ops/s
# Warmup Iteration   6: 735033.347 ops/s
# Warmup Iteration   7: 737341.264 ops/s
# Warmup Iteration   8: 779028.590 ops/s
# Warmup Iteration   9: 761277.831 ops/s
# Warmup Iteration  10: 794812.438 ops/s
# Warmup Iteration  11: 740252.838 ops/s
# Warmup Iteration  12: 785589.727 ops/s
# Warmup Iteration  13: 779929.378 ops/s
# Warmup Iteration  14: 756556.249 ops/s
# Warmup Iteration  15: 796123.377 ops/s
# Warmup Iteration  16: 767924.939 ops/s
# Warmup Iteration  17: 824144.376 ops/s
# Warmup Iteration  18: 858549.920 ops/s
# Warmup Iteration  19: 803913.234 ops/s
# Warmup Iteration  20: 823042.192 ops/s
# Warmup Iteration  21: 820727.042 ops/s
# Warmup Iteration  22: 809984.301 ops/s
# Warmup Iteration  23: 845838.068 ops/s
# Warmup Iteration  24: 792691.284 ops/s
# Warmup Iteration  25: 843184.706 ops/s
# Warmup Iteration  26: 827318.955 ops/s
# Warmup Iteration  27: 827745.561 ops/s
# Warmup Iteration  28: 805183.439 ops/s
# Warmup Iteration  29: 817326.584 ops/s
# Warmup Iteration  30: 858424.594 ops/s
Iteration   1: 766834.019 ops/s
Iteration   2: 809830.193 ops/s
Iteration   3: 838702.747 ops/s
Iteration   4: 788290.199 ops/s
Iteration   5: 848507.327 ops/s
Iteration   6: 819274.593 ops/s
Iteration   7: 795615.866 ops/s
Iteration   8: 846333.507 ops/s
Iteration   9: 805904.366 ops/s
Iteration  10: 833894.843 ops/s
Iteration  11: 811742.611 ops/s
Iteration  12: 832519.424 ops/s
Iteration  13: 852258.596 ops/s
Iteration  14: 811298.363 ops/s
Iteration  15: 814870.378 ops/s
Iteration  16: 817924.866 ops/s
Iteration  17: 826458.948 ops/s
Iteration  18: 820077.929 ops/s
Iteration  19: 648185.111 ops/s
Iteration  20: 842225.370 ops/s
Iteration  21: 828715.744 ops/s
Iteration  22: 840645.816 ops/s
Iteration  23: 853603.165 ops/s
Iteration  24: 789109.056 ops/s
Iteration  25: 849823.100 ops/s
Iteration  26: 804629.469 ops/s
Iteration  27: 840469.995 ops/s
Iteration  28: 825317.934 ops/s
Iteration  29: 843028.337 ops/s
Iteration  30: 806301.151 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleDirectTimed":
  817079.767 ±(99.9%) 25674.954 ops/s [Average]
  (min, avg, max) = (648185.111, 817079.767, 853603.165), stdev = 38429.065
  CI (99.9%): [791404.813, 842754.721] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleDirectTimed  thrpt   30  817079.767 ± 25674.954  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_fromSupplierValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_fromSupplierValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1567844.949 ops/s
# Warmup Iteration   2: 5469437.876 ops/s
# Warmup Iteration   3: 7120810.042 ops/s
# Warmup Iteration   4: 7330626.647 ops/s
# Warmup Iteration   5: 7517995.696 ops/s
# Warmup Iteration   6: 7583017.889 ops/s
# Warmup Iteration   7: 7387349.064 ops/s
# Warmup Iteration   8: 7706068.178 ops/s
# Warmup Iteration   9: 7385485.568 ops/s
# Warmup Iteration  10: 7571254.797 ops/s
# Warmup Iteration  11: 7499970.001 ops/s
# Warmup Iteration  12: 7520520.962 ops/s
# Warmup Iteration  13: 7786760.513 ops/s
# Warmup Iteration  14: 7406180.918 ops/s
# Warmup Iteration  15: 7759995.427 ops/s
# Warmup Iteration  16: 7484161.965 ops/s
# Warmup Iteration  17: 7463030.679 ops/s
# Warmup Iteration  18: 7560900.241 ops/s
# Warmup Iteration  19: 7602748.155 ops/s
# Warmup Iteration  20: 7340002.192 ops/s
# Warmup Iteration  21: 7516677.547 ops/s
# Warmup Iteration  22: 7330679.048 ops/s
# Warmup Iteration  23: 7388575.841 ops/s
# Warmup Iteration  24: 7622125.239 ops/s
# Warmup Iteration  25: 7416848.242 ops/s
# Warmup Iteration  26: 7546141.377 ops/s
# Warmup Iteration  27: 7586195.712 ops/s
# Warmup Iteration  28: 7386447.007 ops/s
# Warmup Iteration  29: 7780043.499 ops/s
# Warmup Iteration  30: 7380146.892 ops/s
Iteration   1: 7588049.550 ops/s
Iteration   2: 7294712.402 ops/s
Iteration   3: 7328540.354 ops/s
Iteration   4: 7545234.410 ops/s
Iteration   5: 7396274.970 ops/s
Iteration   6: 7397142.861 ops/s
Iteration   7: 7883815.670 ops/s
Iteration   8: 7674139.026 ops/s
Iteration   9: 7371848.827 ops/s
Iteration  10: 7661182.211 ops/s
Iteration  11: 7495718.050 ops/s
Iteration  12: 7621675.420 ops/s
Iteration  13: 7585497.843 ops/s
Iteration  14: 7363704.718 ops/s
Iteration  15: 7381251.901 ops/s
Iteration  16: 7372122.329 ops/s
Iteration  17: 7360954.282 ops/s
Iteration  18: 7650795.286 ops/s
Iteration  19: 7217757.258 ops/s
Iteration  20: 7530071.982 ops/s
Iteration  21: 7684661.367 ops/s
Iteration  22: 7243389.930 ops/s
Iteration  23: 7482848.787 ops/s
Iteration  24: 7447932.943 ops/s
Iteration  25: 7383778.854 ops/s
Iteration  26: 7406143.450 ops/s
Iteration  27: 7756304.393 ops/s
Iteration  28: 7361542.729 ops/s
Iteration  29: 7656143.792 ops/s
Iteration  30: 7537521.900 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_fromSupplierValue":
  7489358.583 ±(99.9%) 107375.450 ops/s [Average]
  (min, avg, max) = (7217757.258, 7489358.583, 7883815.670), stdev = 160714.531
  CI (99.9%): [7381983.133, 7596734.033] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
SingleFromSupplierTest._Benchmark.benchmark_fromSupplierValue  thrpt   30  7489358.583 ± 107375.450  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_fromSupplierTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_fromSupplierTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 556830.606 ops/s
# Warmup Iteration   2: 2611730.023 ops/s
# Warmup Iteration   3: 3233043.493 ops/s
# Warmup Iteration   4: 3740631.340 ops/s
# Warmup Iteration   5: 3732906.710 ops/s
# Warmup Iteration   6: 3598489.967 ops/s
# Warmup Iteration   7: 3814249.509 ops/s
# Warmup Iteration   8: 3750464.619 ops/s
# Warmup Iteration   9: 3614966.639 ops/s
# Warmup Iteration  10: 3681194.778 ops/s
# Warmup Iteration  11: 3605972.230 ops/s
# Warmup Iteration  12: 3665320.427 ops/s
# Warmup Iteration  13: 3823949.896 ops/s
# Warmup Iteration  14: 3503139.555 ops/s
# Warmup Iteration  15: 3735594.492 ops/s
# Warmup Iteration  16: 3675922.311 ops/s
# Warmup Iteration  17: 3740054.123 ops/s
# Warmup Iteration  18: 3786228.784 ops/s
# Warmup Iteration  19: 3652761.979 ops/s
# Warmup Iteration  20: 3785847.180 ops/s
# Warmup Iteration  21: 3721260.133 ops/s
# Warmup Iteration  22: 3603410.347 ops/s
# Warmup Iteration  23: 3765162.768 ops/s
# Warmup Iteration  24: 3780045.037 ops/s
# Warmup Iteration  25: 3724513.808 ops/s
# Warmup Iteration  26: 3761545.831 ops/s
# Warmup Iteration  27: 3677815.917 ops/s
# Warmup Iteration  28: 3695286.406 ops/s
# Warmup Iteration  29: 3862583.721 ops/s
# Warmup Iteration  30: 3590662.906 ops/s
Iteration   1: 3647407.201 ops/s
Iteration   2: 3666171.361 ops/s
Iteration   3: 3845968.108 ops/s
Iteration   4: 3634551.273 ops/s
Iteration   5: 3701190.396 ops/s
Iteration   6: 3815282.843 ops/s
Iteration   7: 3664806.361 ops/s
Iteration   8: 3629146.493 ops/s
Iteration   9: 3723154.774 ops/s
Iteration  10: 3659160.338 ops/s
Iteration  11: 3677725.229 ops/s
Iteration  12: 3801359.993 ops/s
Iteration  13: 3781230.051 ops/s
Iteration  14: 2946580.500 ops/s
Iteration  15: 3754739.608 ops/s
Iteration  16: 3723235.949 ops/s
Iteration  17: 3598004.059 ops/s
Iteration  18: 3714095.297 ops/s
Iteration  19: 3814576.813 ops/s
Iteration  20: 3632348.486 ops/s
Iteration  21: 3792875.367 ops/s
Iteration  22: 3604441.016 ops/s
Iteration  23: 3863916.191 ops/s
Iteration  24: 3774827.986 ops/s
Iteration  25: 3653021.596 ops/s
Iteration  26: 3819628.024 ops/s
Iteration  27: 3621743.021 ops/s
Iteration  28: 3814089.501 ops/s
Iteration  29: 3687203.043 ops/s
Iteration  30: 3530232.051 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_fromSupplierTwice":
  3686423.764 ±(99.9%) 109392.104 ops/s [Average]
  (min, avg, max) = (2946580.500, 3686423.764, 3863916.191), stdev = 163732.964
  CI (99.9%): [3577031.660, 3795815.868] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
SingleFromSupplierTest._Benchmark.benchmark_fromSupplierTwice  thrpt   30  3686423.764 ± 109392.104  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_fromSupplierError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_fromSupplierError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 202398.683 ops/s
# Warmup Iteration   2: 570984.899 ops/s
# Warmup Iteration   3: 636142.652 ops/s
# Warmup Iteration   4: 628532.721 ops/s
# Warmup Iteration   5: 681446.518 ops/s
# Warmup Iteration   6: 649676.026 ops/s
# Warmup Iteration   7: 646691.024 ops/s
# Warmup Iteration   8: 648712.844 ops/s
# Warmup Iteration   9: 666437.462 ops/s
# Warmup Iteration  10: 664222.786 ops/s
# Warmup Iteration  11: 583368.146 ops/s
# Warmup Iteration  12: 640310.095 ops/s
# Warmup Iteration  13: 654373.161 ops/s
# Warmup Iteration  14: 645027.554 ops/s
# Warmup Iteration  15: 694141.861 ops/s
# Warmup Iteration  16: 668397.622 ops/s
# Warmup Iteration  17: 678313.470 ops/s
# Warmup Iteration  18: 702327.477 ops/s
# Warmup Iteration  19: 692912.070 ops/s
# Warmup Iteration  20: 695985.748 ops/s
# Warmup Iteration  21: 693061.014 ops/s
# Warmup Iteration  22: 687373.827 ops/s
# Warmup Iteration  23: 712804.471 ops/s
# Warmup Iteration  24: 702086.344 ops/s
# Warmup Iteration  25: 690352.701 ops/s
# Warmup Iteration  26: 661454.322 ops/s
# Warmup Iteration  27: 715992.220 ops/s
# Warmup Iteration  28: 663166.116 ops/s
# Warmup Iteration  29: 708253.367 ops/s
# Warmup Iteration  30: 669905.161 ops/s
Iteration   1: 694509.591 ops/s
Iteration   2: 682117.378 ops/s
Iteration   3: 684147.416 ops/s
Iteration   4: 715119.899 ops/s
Iteration   5: 677054.687 ops/s
Iteration   6: 700698.745 ops/s
Iteration   7: 681216.400 ops/s
Iteration   8: 687911.420 ops/s
Iteration   9: 715837.815 ops/s
Iteration  10: 681717.784 ops/s
Iteration  11: 703787.256 ops/s
Iteration  12: 716491.301 ops/s
Iteration  13: 699475.656 ops/s
Iteration  14: 705120.023 ops/s
Iteration  15: 692417.897 ops/s
Iteration  16: 680185.923 ops/s
Iteration  17: 689683.250 ops/s
Iteration  18: 695168.964 ops/s
Iteration  19: 689213.688 ops/s
Iteration  20: 694898.568 ops/s
Iteration  21: 687187.898 ops/s
Iteration  22: 713545.374 ops/s
Iteration  23: 678374.611 ops/s
Iteration  24: 712921.559 ops/s
Iteration  25: 667520.695 ops/s
Iteration  26: 715748.035 ops/s
Iteration  27: 680901.190 ops/s
Iteration  28: 675371.068 ops/s
Iteration  29: 687306.149 ops/s
Iteration  30: 685033.851 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_fromSupplierError":
  693022.803 ±(99.9%) 9331.396 ops/s [Average]
  (min, avg, max) = (667520.695, 693022.803, 716491.301), stdev = 13966.795
  CI (99.9%): [683691.407, 702354.199] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SingleFromSupplierTest._Benchmark.benchmark_fromSupplierError  thrpt   30  693022.803 ± 9331.396  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_wrap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_wrap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1043763.931 ops/s
# Warmup Iteration   2: 5723707.141 ops/s
# Warmup Iteration   3: 6076363.232 ops/s
# Warmup Iteration   4: 7164273.887 ops/s
# Warmup Iteration   5: 7259607.419 ops/s
# Warmup Iteration   6: 7100517.513 ops/s
# Warmup Iteration   7: 7136290.824 ops/s
# Warmup Iteration   8: 7320454.898 ops/s
# Warmup Iteration   9: 6839811.131 ops/s
# Warmup Iteration  10: 7269924.464 ops/s
# Warmup Iteration  11: 7187378.617 ops/s
# Warmup Iteration  12: 7379215.157 ops/s
# Warmup Iteration  13: 7046050.651 ops/s
# Warmup Iteration  14: 7431144.277 ops/s
# Warmup Iteration  15: 7033869.661 ops/s
# Warmup Iteration  16: 7099446.189 ops/s
# Warmup Iteration  17: 7243731.818 ops/s
# Warmup Iteration  18: 7024172.893 ops/s
# Warmup Iteration  19: 7251521.872 ops/s
# Warmup Iteration  20: 7100145.359 ops/s
# Warmup Iteration  21: 7150287.583 ops/s
# Warmup Iteration  22: 7345984.107 ops/s
# Warmup Iteration  23: 7115901.524 ops/s
# Warmup Iteration  24: 7222609.767 ops/s
# Warmup Iteration  25: 7103096.141 ops/s
# Warmup Iteration  26: 7051440.175 ops/s
# Warmup Iteration  27: 7169513.344 ops/s
# Warmup Iteration  28: 6940584.381 ops/s
# Warmup Iteration  29: 7266919.064 ops/s
# Warmup Iteration  30: 7067145.867 ops/s
Iteration   1: 7352204.343 ops/s
Iteration   2: 7152639.584 ops/s
Iteration   3: 7003625.504 ops/s
Iteration   4: 7392120.105 ops/s
Iteration   5: 6917807.850 ops/s
Iteration   6: 7539756.356 ops/s
Iteration   7: 6995049.659 ops/s
Iteration   8: 5475206.540 ops/s
Iteration   9: 7424839.426 ops/s
Iteration  10: 7023577.044 ops/s
Iteration  11: 7315401.547 ops/s
Iteration  12: 7317293.679 ops/s
Iteration  13: 7099354.521 ops/s
Iteration  14: 7277956.682 ops/s
Iteration  15: 7246655.893 ops/s
Iteration  16: 7109648.678 ops/s
Iteration  17: 6942516.873 ops/s
Iteration  18: 7363148.435 ops/s
Iteration  19: 6823217.035 ops/s
Iteration  20: 7256392.689 ops/s
Iteration  21: 6998224.087 ops/s
Iteration  22: 7227471.034 ops/s
Iteration  23: 6929568.590 ops/s
Iteration  24: 7087153.921 ops/s
Iteration  25: 7335349.776 ops/s
Iteration  26: 7115061.117 ops/s
Iteration  27: 7103615.337 ops/s
Iteration  28: 6981318.677 ops/s
Iteration  29: 7245501.216 ops/s
Iteration  30: 6908925.910 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_wrap":
  7098686.737 ±(99.9%) 237839.361 ops/s [Average]
  (min, avg, max) = (5475206.540, 7098686.737, 7539756.356), stdev = 355986.785
  CI (99.9%): [6860847.376, 7336526.098] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score        Error  Units
SingleMiscTest._Benchmark.benchmark_wrap  thrpt   30  7098686.737 ± 237839.361  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_dispose2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_dispose2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1051800.600 ops/s
# Warmup Iteration   2: 3622033.735 ops/s
# Warmup Iteration   3: 5079191.133 ops/s
# Warmup Iteration   4: 5181274.825 ops/s
# Warmup Iteration   5: 5064692.527 ops/s
# Warmup Iteration   6: 5472738.584 ops/s
# Warmup Iteration   7: 5041828.511 ops/s
# Warmup Iteration   8: 5284398.949 ops/s
# Warmup Iteration   9: 5394535.683 ops/s
# Warmup Iteration  10: 5315525.047 ops/s
# Warmup Iteration  11: 5154693.693 ops/s
# Warmup Iteration  12: 5311077.533 ops/s
# Warmup Iteration  13: 5310292.338 ops/s
# Warmup Iteration  14: 5196686.550 ops/s
# Warmup Iteration  15: 5434419.224 ops/s
# Warmup Iteration  16: 5413110.855 ops/s
# Warmup Iteration  17: 5117674.459 ops/s
# Warmup Iteration  18: 5325156.528 ops/s
# Warmup Iteration  19: 5279937.918 ops/s
# Warmup Iteration  20: 5426520.572 ops/s
# Warmup Iteration  21: 5234928.920 ops/s
# Warmup Iteration  22: 5318504.159 ops/s
# Warmup Iteration  23: 5431758.647 ops/s
# Warmup Iteration  24: 5185748.523 ops/s
# Warmup Iteration  25: 5122633.229 ops/s
# Warmup Iteration  26: 5484821.248 ops/s
# Warmup Iteration  27: 5473932.700 ops/s
# Warmup Iteration  28: 5257016.222 ops/s
# Warmup Iteration  29: 5463991.401 ops/s
# Warmup Iteration  30: 5227006.612 ops/s
Iteration   1: 5434990.449 ops/s
Iteration   2: 5184645.287 ops/s
Iteration   3: 5205458.818 ops/s
Iteration   4: 5342152.090 ops/s
Iteration   5: 5167340.460 ops/s
Iteration   6: 5481226.636 ops/s
Iteration   7: 5238027.696 ops/s
Iteration   8: 5278017.264 ops/s
Iteration   9: 5469176.523 ops/s
Iteration  10: 5125699.656 ops/s
Iteration  11: 5445687.783 ops/s
Iteration  12: 5316111.114 ops/s
Iteration  13: 5292824.311 ops/s
Iteration  14: 5442818.693 ops/s
Iteration  15: 5150596.521 ops/s
Iteration  16: 5198467.962 ops/s
Iteration  17: 5298149.094 ops/s
Iteration  18: 5306474.409 ops/s
Iteration  19: 5450943.882 ops/s
Iteration  20: 5191681.114 ops/s
Iteration  21: 5305064.444 ops/s
Iteration  22: 5348648.723 ops/s
Iteration  23: 5202323.842 ops/s
Iteration  24: 5471242.923 ops/s
Iteration  25: 5262122.856 ops/s
Iteration  26: 5204592.576 ops/s
Iteration  27: 5501843.353 ops/s
Iteration  28: 5145405.362 ops/s
Iteration  29: 5321483.893 ops/s
Iteration  30: 5444400.662 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_dispose2":
  5307587.280 ±(99.9%) 78579.293 ops/s [Average]
  (min, avg, max) = (5125699.656, 5307587.280, 5501843.353), stdev = 117613.796
  CI (99.9%): [5229007.986, 5386166.573] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SingleZipArrayTest._Benchmark.benchmark_dispose2  thrpt   30  5307587.280 ± 78579.293  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_fromSupplierNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_fromSupplierNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 201146.216 ops/s
# Warmup Iteration   2: 542561.349 ops/s
# Warmup Iteration   3: 605181.938 ops/s
# Warmup Iteration   4: 536960.478 ops/s
# Warmup Iteration   5: 619018.289 ops/s
# Warmup Iteration   6: 520350.420 ops/s
# Warmup Iteration   7: 632418.929 ops/s
# Warmup Iteration   8: 620710.088 ops/s
# Warmup Iteration   9: 628879.062 ops/s
# Warmup Iteration  10: 611156.320 ops/s
# Warmup Iteration  11: 602142.921 ops/s
# Warmup Iteration  12: 631128.002 ops/s
# Warmup Iteration  13: 610130.889 ops/s
# Warmup Iteration  14: 637550.605 ops/s
# Warmup Iteration  15: 623324.267 ops/s
# Warmup Iteration  16: 642781.524 ops/s
# Warmup Iteration  17: 671370.875 ops/s
# Warmup Iteration  18: 659612.327 ops/s
# Warmup Iteration  19: 637042.664 ops/s
# Warmup Iteration  20: 654628.094 ops/s
# Warmup Iteration  21: 638079.443 ops/s
# Warmup Iteration  22: 657913.822 ops/s
# Warmup Iteration  23: 657700.532 ops/s
# Warmup Iteration  24: 622687.645 ops/s
# Warmup Iteration  25: 649351.448 ops/s
# Warmup Iteration  26: 658908.076 ops/s
# Warmup Iteration  27: 664397.713 ops/s
# Warmup Iteration  28: 634957.440 ops/s
# Warmup Iteration  29: 654126.572 ops/s
# Warmup Iteration  30: 670750.230 ops/s
Iteration   1: 652827.289 ops/s
Iteration   2: 654473.701 ops/s
Iteration   3: 560501.621 ops/s
Iteration   4: 630439.410 ops/s
Iteration   5: 659584.180 ops/s
Iteration   6: 666969.653 ops/s
Iteration   7: 623737.604 ops/s
Iteration   8: 653185.658 ops/s
Iteration   9: 645491.861 ops/s
Iteration  10: 677330.664 ops/s
Iteration  11: 668441.759 ops/s
Iteration  12: 626966.097 ops/s
Iteration  13: 667474.748 ops/s
Iteration  14: 652981.780 ops/s
Iteration  15: 649194.421 ops/s
Iteration  16: 633710.418 ops/s
Iteration  17: 681270.056 ops/s
Iteration  18: 638020.822 ops/s
Iteration  19: 657228.892 ops/s
Iteration  20: 654907.605 ops/s
Iteration  21: 639910.439 ops/s
Iteration  22: 671540.927 ops/s
Iteration  23: 643340.683 ops/s
Iteration  24: 645031.101 ops/s
Iteration  25: 669545.432 ops/s
Iteration  26: 646073.286 ops/s
Iteration  27: 660001.119 ops/s
Iteration  28: 644912.539 ops/s
Iteration  29: 670116.856 ops/s
Iteration  30: 665557.655 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_fromSupplierNull":
  650358.942 ±(99.9%) 15050.930 ops/s [Average]
  (min, avg, max) = (560501.621, 650358.942, 681270.056), stdev = 22527.526
  CI (99.9%): [635308.012, 665409.873] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
SingleFromSupplierTest._Benchmark.benchmark_fromSupplierNull  thrpt   30  650358.942 ± 15050.930  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 326822.556 ops/s
# Warmup Iteration   2: 555586.889 ops/s
# Warmup Iteration   3: 711679.131 ops/s
# Warmup Iteration   4: 687923.792 ops/s
# Warmup Iteration   5: 690488.426 ops/s
# Warmup Iteration   6: 700327.257 ops/s
# Warmup Iteration   7: 683685.675 ops/s
# Warmup Iteration   8: 719525.426 ops/s
# Warmup Iteration   9: 698515.666 ops/s
# Warmup Iteration  10: 667935.982 ops/s
# Warmup Iteration  11: 663669.780 ops/s
# Warmup Iteration  12: 695337.582 ops/s
# Warmup Iteration  13: 660389.545 ops/s
# Warmup Iteration  14: 703242.733 ops/s
# Warmup Iteration  15: 715158.053 ops/s
# Warmup Iteration  16: 667554.645 ops/s
# Warmup Iteration  17: 726017.267 ops/s
# Warmup Iteration  18: 769880.470 ops/s
# Warmup Iteration  19: 769551.686 ops/s
# Warmup Iteration  20: 729536.599 ops/s
# Warmup Iteration  21: 758133.003 ops/s
# Warmup Iteration  22: 732242.172 ops/s
# Warmup Iteration  23: 741281.744 ops/s
# Warmup Iteration  24: 730875.458 ops/s
# Warmup Iteration  25: 760439.357 ops/s
# Warmup Iteration  26: 722534.728 ops/s
# Warmup Iteration  27: 772702.906 ops/s
# Warmup Iteration  28: 743810.402 ops/s
# Warmup Iteration  29: 727090.362 ops/s
# Warmup Iteration  30: 772668.279 ops/s
Iteration   1: 725000.954 ops/s
Iteration   2: 730081.173 ops/s
Iteration   3: 737365.085 ops/s
Iteration   4: 763645.196 ops/s
Iteration   5: 781156.298 ops/s
Iteration   6: 738162.368 ops/s
Iteration   7: 755688.329 ops/s
Iteration   8: 760076.860 ops/s
Iteration   9: 716155.529 ops/s
Iteration  10: 767256.715 ops/s
Iteration  11: 726605.903 ops/s
Iteration  12: 730168.658 ops/s
Iteration  13: 753321.160 ops/s
Iteration  14: 757490.900 ops/s
Iteration  15: 707092.200 ops/s
Iteration  16: 738975.310 ops/s
Iteration  17: 760970.866 ops/s
Iteration  18: 744715.353 ops/s
Iteration  19: 750982.908 ops/s
Iteration  20: 723030.641 ops/s
Iteration  21: 760829.949 ops/s
Iteration  22: 744010.516 ops/s
Iteration  23: 735312.657 ops/s
Iteration  24: 764887.101 ops/s
Iteration  25: 743248.626 ops/s
Iteration  26: 765538.884 ops/s
Iteration  27: 710621.294 ops/s
Iteration  28: 748364.540 ops/s
Iteration  29: 734547.065 ops/s
Iteration  30: 739555.803 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeError":
  743828.628 ±(99.9%) 12116.987 ops/s [Average]
  (min, avg, max) = (707092.200, 743828.628, 781156.298), stdev = 18136.137
  CI (99.9%): [731711.641, 755945.615] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
SingleFlatMapMaybeTest._Benchmark.benchmark_flatMapMaybeError  thrpt   30  743828.628 ± 12116.987  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 131476.396 ops/s
# Warmup Iteration   2: 593000.632 ops/s
# Warmup Iteration   3: 671436.427 ops/s
# Warmup Iteration   4: 707840.450 ops/s
# Warmup Iteration   5: 712180.726 ops/s
# Warmup Iteration   6: 685889.672 ops/s
# Warmup Iteration   7: 730472.718 ops/s
# Warmup Iteration   8: 679957.558 ops/s
# Warmup Iteration   9: 688200.863 ops/s
# Warmup Iteration  10: 727013.896 ops/s
# Warmup Iteration  11: 675345.950 ops/s
# Warmup Iteration  12: 726777.919 ops/s
# Warmup Iteration  13: 692137.238 ops/s
# Warmup Iteration  14: 704824.317 ops/s
# Warmup Iteration  15: 722514.013 ops/s
# Warmup Iteration  16: 674480.424 ops/s
# Warmup Iteration  17: 759493.920 ops/s
# Warmup Iteration  18: 738910.687 ops/s
# Warmup Iteration  19: 741729.107 ops/s
# Warmup Iteration  20: 769918.131 ops/s
# Warmup Iteration  21: 724841.506 ops/s
# Warmup Iteration  22: 762289.140 ops/s
# Warmup Iteration  23: 727425.176 ops/s
# Warmup Iteration  24: 735097.363 ops/s
# Warmup Iteration  25: 777915.071 ops/s
# Warmup Iteration  26: 712134.808 ops/s
# Warmup Iteration  27: 549383.101 ops/s
# Warmup Iteration  28: 738788.585 ops/s
# Warmup Iteration  29: 757389.314 ops/s
# Warmup Iteration  30: 730348.451 ops/s
Iteration   1: 762180.338 ops/s
Iteration   2: 735428.796 ops/s
Iteration   3: 757374.441 ops/s
Iteration   4: 749967.735 ops/s
Iteration   5: 737804.985 ops/s
Iteration   6: 766874.243 ops/s
Iteration   7: 745103.814 ops/s
Iteration   8: 742200.231 ops/s
Iteration   9: 748717.232 ops/s
Iteration  10: 726219.029 ops/s
Iteration  11: 762857.847 ops/s
Iteration  12: 743979.466 ops/s
Iteration  13: 717805.985 ops/s
Iteration  14: 718472.724 ops/s
Iteration  15: 775449.617 ops/s
Iteration  16: 780256.104 ops/s
Iteration  17: 750081.943 ops/s
Iteration  18: 761970.845 ops/s
Iteration  19: 746839.520 ops/s
Iteration  20: 750592.521 ops/s
Iteration  21: 779143.749 ops/s
Iteration  22: 719927.997 ops/s
Iteration  23: 759618.078 ops/s
Iteration  24: 725899.491 ops/s
Iteration  25: 755471.791 ops/s
Iteration  26: 754829.965 ops/s
Iteration  27: 743352.480 ops/s
Iteration  28: 769372.925 ops/s
Iteration  29: 697074.403 ops/s
Iteration  30: 773922.083 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeError":
  748626.346 ±(99.9%) 13400.125 ops/s [Average]
  (min, avg, max) = (697074.403, 748626.346, 780256.104), stdev = 20056.678
  CI (99.9%): [735226.220, 762026.471] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
SingleConcatMapMaybeTest._Benchmark.benchmark_concatMapMaybeError  thrpt   30  748626.346 ± 13400.125  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleBlockingSubscribeTest._Benchmark.benchmark_observerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleBlockingSubscribeTest._Benchmark.benchmark_observerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 239086.532 ops/s
# Warmup Iteration   2: 618839.505 ops/s
# Warmup Iteration   3: 745672.117 ops/s
# Warmup Iteration   4: 724192.118 ops/s
# Warmup Iteration   5: 756032.526 ops/s
# Warmup Iteration   6: 719744.879 ops/s
# Warmup Iteration   7: 750474.319 ops/s
# Warmup Iteration   8: 743294.807 ops/s
# Warmup Iteration   9: 740160.470 ops/s
# Warmup Iteration  10: 737404.704 ops/s
# Warmup Iteration  11: 711135.173 ops/s
# Warmup Iteration  12: 751993.744 ops/s
# Warmup Iteration  13: 728078.792 ops/s
# Warmup Iteration  14: 711132.725 ops/s
# Warmup Iteration  15: 737109.897 ops/s
# Warmup Iteration  16: 756708.543 ops/s
# Warmup Iteration  17: 786637.760 ops/s
# Warmup Iteration  18: 797075.014 ops/s
# Warmup Iteration  19: 775292.099 ops/s
# Warmup Iteration  20: 785081.675 ops/s
# Warmup Iteration  21: 805291.355 ops/s
# Warmup Iteration  22: 767108.597 ops/s
# Warmup Iteration  23: 803482.420 ops/s
# Warmup Iteration  24: 775332.890 ops/s
# Warmup Iteration  25: 770145.760 ops/s
# Warmup Iteration  26: 820222.875 ops/s
# Warmup Iteration  27: 769983.511 ops/s
# Warmup Iteration  28: 794587.271 ops/s
# Warmup Iteration  29: 805389.203 ops/s
# Warmup Iteration  30: 786800.517 ops/s
Iteration   1: 818218.857 ops/s
Iteration   2: 812876.731 ops/s
Iteration   3: 771850.667 ops/s
Iteration   4: 799193.723 ops/s
Iteration   5: 746379.726 ops/s
Iteration   6: 807160.538 ops/s
Iteration   7: 772882.728 ops/s
Iteration   8: 801156.412 ops/s
Iteration   9: 795244.698 ops/s
Iteration  10: 784745.486 ops/s
Iteration  11: 815378.164 ops/s
Iteration  12: 797998.754 ops/s
Iteration  13: 771507.207 ops/s
Iteration  14: 788003.418 ops/s
Iteration  15: 776504.381 ops/s
Iteration  16: 797972.475 ops/s
Iteration  17: 771766.801 ops/s
Iteration  18: 764460.268 ops/s
Iteration  19: 818374.937 ops/s
Iteration  20: 788010.724 ops/s
Iteration  21: 749240.233 ops/s
Iteration  22: 804364.960 ops/s
Iteration  23: 750348.991 ops/s
Iteration  24: 810919.635 ops/s
Iteration  25: 762976.628 ops/s
Iteration  26: 787477.941 ops/s
Iteration  27: 810327.022 ops/s
Iteration  28: 781863.410 ops/s
Iteration  29: 738433.867 ops/s
Iteration  30: 786035.346 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleBlockingSubscribeTest._Benchmark.benchmark_observerError":
  786055.824 ±(99.9%) 15092.464 ops/s [Average]
  (min, avg, max) = (738433.867, 786055.824, 818374.937), stdev = 22589.691
  CI (99.9%): [770963.360, 801148.288] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
SingleBlockingSubscribeTest._Benchmark.benchmark_observerError  thrpt   30  786055.824 ± 15092.464  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_resourceDisposedIfMapperCrashesNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_resourceDisposedIfMapperCrashesNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 246043.319 ops/s
# Warmup Iteration   2: 569584.374 ops/s
# Warmup Iteration   3: 604277.692 ops/s
# Warmup Iteration   4: 617365.879 ops/s
# Warmup Iteration   5: 587345.911 ops/s
# Warmup Iteration   6: 599611.644 ops/s
# Warmup Iteration   7: 668117.942 ops/s
# Warmup Iteration   8: 650714.899 ops/s
# Warmup Iteration   9: 641052.482 ops/s
# Warmup Iteration  10: 644159.812 ops/s
# Warmup Iteration  11: 648073.465 ops/s
# Warmup Iteration  12: 645642.691 ops/s
# Warmup Iteration  13: 642876.427 ops/s
# Warmup Iteration  14: 660109.155 ops/s
# Warmup Iteration  15: 634117.312 ops/s
# Warmup Iteration  16: 678136.447 ops/s
# Warmup Iteration  17: 679258.609 ops/s
# Warmup Iteration  18: 697272.216 ops/s
# Warmup Iteration  19: 676137.531 ops/s
# Warmup Iteration  20: 684384.510 ops/s
# Warmup Iteration  21: 546839.863 ops/s
# Warmup Iteration  22: 623718.691 ops/s
# Warmup Iteration  23: 693531.138 ops/s
# Warmup Iteration  24: 671119.436 ops/s
# Warmup Iteration  25: 688522.942 ops/s
# Warmup Iteration  26: 664155.891 ops/s
# Warmup Iteration  27: 673607.049 ops/s
# Warmup Iteration  28: 702554.196 ops/s
# Warmup Iteration  29: 664429.142 ops/s
# Warmup Iteration  30: 685080.022 ops/s
Iteration   1: 674437.290 ops/s
Iteration   2: 700021.583 ops/s
Iteration   3: 657274.356 ops/s
Iteration   4: 699739.304 ops/s
Iteration   5: 695559.157 ops/s
Iteration   6: 666639.448 ops/s
Iteration   7: 694397.571 ops/s
Iteration   8: 656348.408 ops/s
Iteration   9: 701457.179 ops/s
Iteration  10: 673000.555 ops/s
Iteration  11: 695582.751 ops/s
Iteration  12: 670677.720 ops/s
Iteration  13: 680895.612 ops/s
Iteration  14: 695110.376 ops/s
Iteration  15: 672620.854 ops/s
Iteration  16: 672200.158 ops/s
Iteration  17: 697022.949 ops/s
Iteration  18: 670179.616 ops/s
Iteration  19: 685052.315 ops/s
Iteration  20: 689210.229 ops/s
Iteration  21: 694465.646 ops/s
Iteration  22: 656530.694 ops/s
Iteration  23: 687622.725 ops/s
Iteration  24: 685369.219 ops/s
Iteration  25: 678283.473 ops/s
Iteration  26: 694225.426 ops/s
Iteration  27: 674413.466 ops/s
Iteration  28: 699349.833 ops/s
Iteration  29: 652971.324 ops/s
Iteration  30: 677031.401 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_resourceDisposedIfMapperCrashesNonEager":
  681589.688 ±(99.9%) 9868.299 ops/s [Average]
  (min, avg, max) = (652971.324, 681589.688, 701457.179), stdev = 14770.407
  CI (99.9%): [671721.389, 691457.987] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
SingleUsingTest._Benchmark.benchmark_resourceDisposedIfMapperCrashesNonEager  thrpt   30  681589.688 ± 9868.299  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_resourceDisposedIfMapperCrashes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_resourceDisposedIfMapperCrashes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 151687.055 ops/s
# Warmup Iteration   2: 464769.253 ops/s
# Warmup Iteration   3: 643647.136 ops/s
# Warmup Iteration   4: 595847.938 ops/s
# Warmup Iteration   5: 595710.326 ops/s
# Warmup Iteration   6: 642003.682 ops/s
# Warmup Iteration   7: 634404.930 ops/s
# Warmup Iteration   8: 650989.989 ops/s
# Warmup Iteration   9: 616742.038 ops/s
# Warmup Iteration  10: 607272.291 ops/s
# Warmup Iteration  11: 664551.726 ops/s
# Warmup Iteration  12: 632752.411 ops/s
# Warmup Iteration  13: 621253.520 ops/s
# Warmup Iteration  14: 655274.423 ops/s
# Warmup Iteration  15: 633742.274 ops/s
# Warmup Iteration  16: 653241.984 ops/s
# Warmup Iteration  17: 659916.403 ops/s
# Warmup Iteration  18: 667874.115 ops/s
# Warmup Iteration  19: 698630.424 ops/s
# Warmup Iteration  20: 664579.517 ops/s
# Warmup Iteration  21: 670763.880 ops/s
# Warmup Iteration  22: 638015.118 ops/s
# Warmup Iteration  23: 692611.710 ops/s
# Warmup Iteration  24: 673028.739 ops/s
# Warmup Iteration  25: 679825.399 ops/s
# Warmup Iteration  26: 663854.152 ops/s
# Warmup Iteration  27: 704625.612 ops/s
# Warmup Iteration  28: 653758.788 ops/s
# Warmup Iteration  29: 702763.037 ops/s
# Warmup Iteration  30: 653022.937 ops/s
Iteration   1: 701346.544 ops/s
Iteration   2: 663440.696 ops/s
Iteration   3: 666043.976 ops/s
Iteration   4: 701509.274 ops/s
Iteration   5: 643181.577 ops/s
Iteration   6: 692789.709 ops/s
Iteration   7: 657448.048 ops/s
Iteration   8: 708842.363 ops/s
Iteration   9: 672759.364 ops/s
Iteration  10: 674425.676 ops/s
Iteration  11: 674547.948 ops/s
Iteration  12: 659352.457 ops/s
Iteration  13: 682183.403 ops/s
Iteration  14: 683581.039 ops/s
Iteration  15: 673626.748 ops/s
Iteration  16: 654626.838 ops/s
Iteration  17: 689033.571 ops/s
Iteration  18: 695644.640 ops/s
Iteration  19: 679409.449 ops/s
Iteration  20: 691019.380 ops/s
Iteration  21: 683697.562 ops/s
Iteration  22: 682645.415 ops/s
Iteration  23: 682880.282 ops/s
Iteration  24: 660499.101 ops/s
Iteration  25: 693171.134 ops/s
Iteration  26: 694154.870 ops/s
Iteration  27: 658471.069 ops/s
Iteration  28: 682745.736 ops/s
Iteration  29: 692997.900 ops/s
Iteration  30: 664355.414 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_resourceDisposedIfMapperCrashes":
  678681.039 ±(99.9%) 10781.760 ops/s [Average]
  (min, avg, max) = (643181.577, 678681.039, 708842.363), stdev = 16137.632
  CI (99.9%): [667899.280, 689462.799] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
SingleUsingTest._Benchmark.benchmark_resourceDisposedIfMapperCrashes  thrpt   30  678681.039 ± 10781.760  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_errorWithJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_errorWithJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 164966.949 ops/s
# Warmup Iteration   2: 594983.826 ops/s
# Warmup Iteration   3: 660535.685 ops/s
# Warmup Iteration   4: 596525.437 ops/s
# Warmup Iteration   5: 671851.847 ops/s
# Warmup Iteration   6: 639722.628 ops/s
# Warmup Iteration   7: 698887.594 ops/s
# Warmup Iteration   8: 687075.872 ops/s
# Warmup Iteration   9: 732743.942 ops/s
# Warmup Iteration  10: 696360.687 ops/s
# Warmup Iteration  11: 683318.480 ops/s
# Warmup Iteration  12: 714715.958 ops/s
# Warmup Iteration  13: 689206.285 ops/s
# Warmup Iteration  14: 725871.866 ops/s
# Warmup Iteration  15: 704697.087 ops/s
# Warmup Iteration  16: 558760.517 ops/s
# Warmup Iteration  17: 752622.477 ops/s
# Warmup Iteration  18: 738407.510 ops/s
# Warmup Iteration  19: 768427.743 ops/s
# Warmup Iteration  20: 734580.209 ops/s
# Warmup Iteration  21: 766605.089 ops/s
# Warmup Iteration  22: 732045.297 ops/s
# Warmup Iteration  23: 746259.865 ops/s
# Warmup Iteration  24: 732490.464 ops/s
# Warmup Iteration  25: 752000.973 ops/s
# Warmup Iteration  26: 737373.429 ops/s
# Warmup Iteration  27: 738968.428 ops/s
# Warmup Iteration  28: 766417.258 ops/s
# Warmup Iteration  29: 733004.640 ops/s
# Warmup Iteration  30: 760286.915 ops/s
Iteration   1: 728606.626 ops/s
Iteration   2: 738713.477 ops/s
Iteration   3: 761442.954 ops/s
Iteration   4: 722144.268 ops/s
Iteration   5: 755809.588 ops/s
Iteration   6: 724979.470 ops/s
Iteration   7: 748742.777 ops/s
Iteration   8: 742043.376 ops/s
Iteration   9: 760821.967 ops/s
Iteration  10: 742910.532 ops/s
Iteration  11: 720510.611 ops/s
Iteration  12: 774343.063 ops/s
Iteration  13: 739422.312 ops/s
Iteration  14: 732281.544 ops/s
Iteration  15: 707810.673 ops/s
Iteration  16: 740136.026 ops/s
Iteration  17: 723767.361 ops/s
Iteration  18: 749874.279 ops/s
Iteration  19: 770870.774 ops/s
Iteration  20: 724463.724 ops/s
Iteration  21: 761615.640 ops/s
Iteration  22: 730727.394 ops/s
Iteration  23: 756947.725 ops/s
Iteration  24: 747582.850 ops/s
Iteration  25: 762575.328 ops/s
Iteration  26: 725380.835 ops/s
Iteration  27: 764950.285 ops/s
Iteration  28: 738684.617 ops/s
Iteration  29: 742454.507 ops/s
Iteration  30: 758086.246 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_errorWithJust":
  743290.028 ±(99.9%) 11352.493 ops/s [Average]
  (min, avg, max) = (707810.673, 743290.028, 774343.063), stdev = 16991.878
  CI (99.9%): [731937.535, 754642.520] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
SingleFlatMapBiSelectorTest._Benchmark.benchmark_errorWithJust  thrpt   30  743290.028 ± 11352.493  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambArrayEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambArrayEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 181547.019 ops/s
# Warmup Iteration   2: 557203.782 ops/s
# Warmup Iteration   3: 619976.269 ops/s
# Warmup Iteration   4: 650268.589 ops/s
# Warmup Iteration   5: 648350.779 ops/s
# Warmup Iteration   6: 563749.819 ops/s
# Warmup Iteration   7: 659541.808 ops/s
# Warmup Iteration   8: 623338.811 ops/s
# Warmup Iteration   9: 633183.792 ops/s
# Warmup Iteration  10: 652425.839 ops/s
# Warmup Iteration  11: 628463.035 ops/s
# Warmup Iteration  12: 604632.503 ops/s
# Warmup Iteration  13: 644638.293 ops/s
# Warmup Iteration  14: 630229.446 ops/s
# Warmup Iteration  15: 659670.283 ops/s
# Warmup Iteration  16: 630471.067 ops/s
# Warmup Iteration  17: 686668.347 ops/s
# Warmup Iteration  18: 669515.771 ops/s
# Warmup Iteration  19: 656490.194 ops/s
# Warmup Iteration  20: 698196.690 ops/s
# Warmup Iteration  21: 657070.955 ops/s
# Warmup Iteration  22: 698528.171 ops/s
# Warmup Iteration  23: 682268.391 ops/s
# Warmup Iteration  24: 653885.744 ops/s
# Warmup Iteration  25: 674734.294 ops/s
# Warmup Iteration  26: 646190.968 ops/s
# Warmup Iteration  27: 673425.402 ops/s
# Warmup Iteration  28: 685080.013 ops/s
# Warmup Iteration  29: 661290.883 ops/s
# Warmup Iteration  30: 647157.748 ops/s
Iteration   1: 691187.770 ops/s
Iteration   2: 660661.677 ops/s
Iteration   3: 687828.522 ops/s
Iteration   4: 664563.900 ops/s
Iteration   5: 686292.861 ops/s
Iteration   6: 663692.235 ops/s
Iteration   7: 691146.354 ops/s
Iteration   8: 647924.278 ops/s
Iteration   9: 658046.219 ops/s
Iteration  10: 687598.707 ops/s
Iteration  11: 667620.497 ops/s
Iteration  12: 663381.034 ops/s
Iteration  13: 653396.523 ops/s
Iteration  14: 645518.710 ops/s
Iteration  15: 670633.167 ops/s
Iteration  16: 641501.971 ops/s
Iteration  17: 683751.352 ops/s
Iteration  18: 659427.986 ops/s
Iteration  19: 650079.861 ops/s
Iteration  20: 699073.917 ops/s
Iteration  21: 653182.304 ops/s
Iteration  22: 674169.552 ops/s
Iteration  23: 645793.987 ops/s
Iteration  24: 668000.413 ops/s
Iteration  25: 665877.424 ops/s
Iteration  26: 673748.646 ops/s
Iteration  27: 673587.730 ops/s
Iteration  28: 672922.348 ops/s
Iteration  29: 677596.458 ops/s
Iteration  30: 667828.222 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambArrayEmpty":
  668201.154 ±(99.9%) 10203.462 ops/s [Average]
  (min, avg, max) = (641501.971, 668201.154, 699073.917), stdev = 15272.062
  CI (99.9%): [657997.693, 678404.616] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
SingleAmbTest._Benchmark.benchmark_ambArrayEmpty  thrpt   30  668201.154 ± 10203.462  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_onSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_onSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 194814.060 ops/s
# Warmup Iteration   2: 464437.046 ops/s
# Warmup Iteration   3: 511515.366 ops/s
# Warmup Iteration   4: 509887.320 ops/s
# Warmup Iteration   5: 527055.431 ops/s
# Warmup Iteration   6: 495675.032 ops/s
# Warmup Iteration   7: 499961.274 ops/s
# Warmup Iteration   8: 560330.502 ops/s
# Warmup Iteration   9: 516426.265 ops/s
# Warmup Iteration  10: 557363.324 ops/s
# Warmup Iteration  11: 454470.539 ops/s
# Warmup Iteration  12: 535907.575 ops/s
# Warmup Iteration  13: 559945.767 ops/s
# Warmup Iteration  14: 525839.327 ops/s
# Warmup Iteration  15: 535757.479 ops/s
# Warmup Iteration  16: 549351.036 ops/s
# Warmup Iteration  17: 551234.932 ops/s
# Warmup Iteration  18: 574134.688 ops/s
# Warmup Iteration  19: 540880.556 ops/s
# Warmup Iteration  20: 578376.782 ops/s
# Warmup Iteration  21: 556824.568 ops/s
# Warmup Iteration  22: 551079.522 ops/s
# Warmup Iteration  23: 564707.989 ops/s
# Warmup Iteration  24: 544582.394 ops/s
# Warmup Iteration  25: 566973.092 ops/s
# Warmup Iteration  26: 546076.409 ops/s
# Warmup Iteration  27: 582811.161 ops/s
# Warmup Iteration  28: 546574.981 ops/s
# Warmup Iteration  29: 551614.935 ops/s
# Warmup Iteration  30: 574061.348 ops/s
Iteration   1: 554633.660 ops/s
Iteration   2: 560945.868 ops/s
Iteration   3: 569177.979 ops/s
Iteration   4: 556987.714 ops/s
Iteration   5: 571856.078 ops/s
Iteration   6: 580493.404 ops/s
Iteration   7: 549390.835 ops/s
Iteration   8: 573185.429 ops/s
Iteration   9: 553893.923 ops/s
Iteration  10: 573804.176 ops/s
Iteration  11: 544375.199 ops/s
Iteration  12: 577098.761 ops/s
Iteration  13: 560329.973 ops/s
Iteration  14: 556272.705 ops/s
Iteration  15: 573816.245 ops/s
Iteration  16: 550108.260 ops/s
Iteration  17: 565069.589 ops/s
Iteration  18: 551675.370 ops/s
Iteration  19: 565131.935 ops/s
Iteration  20: 562688.998 ops/s
Iteration  21: 564723.614 ops/s
Iteration  22: 568316.038 ops/s
Iteration  23: 560317.179 ops/s
Iteration  24: 574855.741 ops/s
Iteration  25: 550167.710 ops/s
Iteration  26: 556242.876 ops/s
Iteration  27: 586078.213 ops/s
Iteration  28: 556740.858 ops/s
Iteration  29: 553937.045 ops/s
Iteration  30: 574666.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_onSubscribe":
  563232.734 ±(99.9%) 7037.589 ops/s [Average]
  (min, avg, max) = (544375.199, 563232.734, 586078.213), stdev = 10533.533
  CI (99.9%): [556195.145, 570270.323] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SingleOnErrorCompleteTest._Benchmark.benchmark_onSubscribe  thrpt   30  563232.734 ± 7037.589  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 98914.026 ops/s
# Warmup Iteration   2: 434956.404 ops/s
# Warmup Iteration   3: 474398.194 ops/s
# Warmup Iteration   4: 493093.360 ops/s
# Warmup Iteration   5: 514526.514 ops/s
# Warmup Iteration   6: 505029.557 ops/s
# Warmup Iteration   7: 503625.260 ops/s
# Warmup Iteration   8: 507475.320 ops/s
# Warmup Iteration   9: 525433.812 ops/s
# Warmup Iteration  10: 503097.968 ops/s
# Warmup Iteration  11: 502321.394 ops/s
# Warmup Iteration  12: 509075.015 ops/s
# Warmup Iteration  13: 491888.166 ops/s
# Warmup Iteration  14: 542682.847 ops/s
# Warmup Iteration  15: 498246.227 ops/s
# Warmup Iteration  16: 523836.149 ops/s
# Warmup Iteration  17: 520155.334 ops/s
# Warmup Iteration  18: 514078.222 ops/s
# Warmup Iteration  19: 545373.389 ops/s
# Warmup Iteration  20: 513743.719 ops/s
# Warmup Iteration  21: 528424.366 ops/s
# Warmup Iteration  22: 512972.090 ops/s
# Warmup Iteration  23: 519991.606 ops/s
# Warmup Iteration  24: 518947.604 ops/s
# Warmup Iteration  25: 534674.421 ops/s
# Warmup Iteration  26: 516975.918 ops/s
# Warmup Iteration  27: 517919.039 ops/s
# Warmup Iteration  28: 542501.740 ops/s
# Warmup Iteration  29: 523022.544 ops/s
# Warmup Iteration  30: 528856.234 ops/s
Iteration   1: 535359.051 ops/s
Iteration   2: 515153.059 ops/s
Iteration   3: 549861.111 ops/s
Iteration   4: 510407.809 ops/s
Iteration   5: 484117.904 ops/s
Iteration   6: 528654.227 ops/s
Iteration   7: 539211.582 ops/s
Iteration   8: 518883.408 ops/s
Iteration   9: 519842.475 ops/s
Iteration  10: 507867.413 ops/s
Iteration  11: 506929.448 ops/s
Iteration  12: 535059.129 ops/s
Iteration  13: 508755.579 ops/s
Iteration  14: 519742.627 ops/s
Iteration  15: 509893.424 ops/s
Iteration  16: 518123.133 ops/s
Iteration  17: 539154.115 ops/s
Iteration  18: 541406.197 ops/s
Iteration  19: 498072.609 ops/s
Iteration  20: 528055.466 ops/s
Iteration  21: 527646.852 ops/s
Iteration  22: 533444.183 ops/s
Iteration  23: 538120.269 ops/s
Iteration  24: 508432.962 ops/s
Iteration  25: 545936.909 ops/s
Iteration  26: 515670.951 ops/s
Iteration  27: 530162.039 ops/s
Iteration  28: 533503.517 ops/s
Iteration  29: 516352.004 ops/s
Iteration  30: 543091.587 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe":
  523563.701 ±(99.9%) 10356.028 ops/s [Average]
  (min, avg, max) = (484117.904, 523563.701, 549861.111), stdev = 15500.417
  CI (99.9%): [513207.673, 533919.730] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
SingleConcatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  523563.701 ± 10356.028  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81967.447 ops/s
# Warmup Iteration   2: 421241.050 ops/s
# Warmup Iteration   3: 463134.060 ops/s
# Warmup Iteration   4: 490283.756 ops/s
# Warmup Iteration   5: 388772.830 ops/s
# Warmup Iteration   6: 480780.177 ops/s
# Warmup Iteration   7: 506986.734 ops/s
# Warmup Iteration   8: 489366.962 ops/s
# Warmup Iteration   9: 515937.126 ops/s
# Warmup Iteration  10: 498927.714 ops/s
# Warmup Iteration  11: 493314.844 ops/s
# Warmup Iteration  12: 514139.807 ops/s
# Warmup Iteration  13: 487269.206 ops/s
# Warmup Iteration  14: 505929.821 ops/s
# Warmup Iteration  15: 493244.007 ops/s
# Warmup Iteration  16: 533273.776 ops/s
# Warmup Iteration  17: 503204.559 ops/s
# Warmup Iteration  18: 515131.970 ops/s
# Warmup Iteration  19: 530362.136 ops/s
# Warmup Iteration  20: 533254.706 ops/s
# Warmup Iteration  21: 509609.315 ops/s
# Warmup Iteration  22: 515562.211 ops/s
# Warmup Iteration  23: 535839.707 ops/s
# Warmup Iteration  24: 515253.097 ops/s
# Warmup Iteration  25: 519298.107 ops/s
# Warmup Iteration  26: 531390.063 ops/s
# Warmup Iteration  27: 525031.476 ops/s
# Warmup Iteration  28: 536359.519 ops/s
# Warmup Iteration  29: 509054.843 ops/s
# Warmup Iteration  30: 516865.358 ops/s
Iteration   1: 533114.691 ops/s
Iteration   2: 512312.926 ops/s
Iteration   3: 539598.525 ops/s
Iteration   4: 524583.947 ops/s
Iteration   5: 508891.973 ops/s
Iteration   6: 536641.109 ops/s
Iteration   7: 519849.482 ops/s
Iteration   8: 520391.314 ops/s
Iteration   9: 530655.425 ops/s
Iteration  10: 518985.298 ops/s
Iteration  11: 538290.187 ops/s
Iteration  12: 521661.883 ops/s
Iteration  13: 515878.680 ops/s
Iteration  14: 482494.878 ops/s
Iteration  15: 528475.408 ops/s
Iteration  16: 539105.331 ops/s
Iteration  17: 504344.775 ops/s
Iteration  18: 535185.547 ops/s
Iteration  19: 529517.809 ops/s
Iteration  20: 537906.886 ops/s
Iteration  21: 545377.104 ops/s
Iteration  22: 521875.206 ops/s
Iteration  23: 535710.758 ops/s
Iteration  24: 520895.465 ops/s
Iteration  25: 541162.965 ops/s
Iteration  26: 511451.319 ops/s
Iteration  27: 516952.158 ops/s
Iteration  28: 539614.497 ops/s
Iteration  29: 517976.699 ops/s
Iteration  30: 543738.488 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe":
  525754.691 ±(99.9%) 9300.919 ops/s [Average]
  (min, avg, max) = (482494.878, 525754.691, 545377.104), stdev = 13921.179
  CI (99.9%): [516453.772, 535055.610] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MaybeFlatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  525754.691 ± 9300.919  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 135616.050 ops/s
# Warmup Iteration   2: 420718.870 ops/s
# Warmup Iteration   3: 481754.234 ops/s
# Warmup Iteration   4: 502582.297 ops/s
# Warmup Iteration   5: 531585.843 ops/s
# Warmup Iteration   6: 511904.138 ops/s
# Warmup Iteration   7: 477145.402 ops/s
# Warmup Iteration   8: 518479.535 ops/s
# Warmup Iteration   9: 511629.877 ops/s
# Warmup Iteration  10: 533885.708 ops/s
# Warmup Iteration  11: 499180.848 ops/s
# Warmup Iteration  12: 521441.364 ops/s
# Warmup Iteration  13: 533047.847 ops/s
# Warmup Iteration  14: 516700.928 ops/s
# Warmup Iteration  15: 536150.240 ops/s
# Warmup Iteration  16: 502353.598 ops/s
# Warmup Iteration  17: 540792.587 ops/s
# Warmup Iteration  18: 546349.848 ops/s
# Warmup Iteration  19: 533199.109 ops/s
# Warmup Iteration  20: 552818.299 ops/s
# Warmup Iteration  21: 539552.403 ops/s
# Warmup Iteration  22: 548280.016 ops/s
# Warmup Iteration  23: 519338.415 ops/s
# Warmup Iteration  24: 549864.183 ops/s
# Warmup Iteration  25: 559549.943 ops/s
# Warmup Iteration  26: 537944.710 ops/s
# Warmup Iteration  27: 553530.021 ops/s
# Warmup Iteration  28: 545115.018 ops/s
# Warmup Iteration  29: 543452.347 ops/s
# Warmup Iteration  30: 559459.229 ops/s
Iteration   1: 559182.993 ops/s
Iteration   2: 524493.511 ops/s
Iteration   3: 529514.827 ops/s
Iteration   4: 573090.029 ops/s
Iteration   5: 515343.732 ops/s
Iteration   6: 542503.676 ops/s
Iteration   7: 548144.476 ops/s
Iteration   8: 529379.087 ops/s
Iteration   9: 552848.827 ops/s
Iteration  10: 557639.367 ops/s
Iteration  11: 542273.713 ops/s
Iteration  12: 542749.804 ops/s
Iteration  13: 553222.609 ops/s
Iteration  14: 531290.596 ops/s
Iteration  15: 539284.622 ops/s
Iteration  16: 548935.024 ops/s
Iteration  17: 519271.141 ops/s
Iteration  18: 557281.143 ops/s
Iteration  19: 544982.660 ops/s
Iteration  20: 559529.194 ops/s
Iteration  21: 532286.602 ops/s
Iteration  22: 545347.591 ops/s
Iteration  23: 551061.013 ops/s
Iteration  24: 555962.335 ops/s
Iteration  25: 554345.304 ops/s
Iteration  26: 531189.395 ops/s
Iteration  27: 550132.479 ops/s
Iteration  28: 538073.060 ops/s
Iteration  29: 543668.002 ops/s
Iteration  30: 554228.720 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_doubleOnSubscribe":
  544241.851 ±(99.9%) 8853.401 ops/s [Average]
  (min, avg, max) = (515343.732, 544241.851, 573090.029), stdev = 13251.355
  CI (99.9%): [535388.450, 553095.252] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
SingleFlatMapBiSelectorTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  544241.851 ± 8853.401  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDetachTest._Benchmark.benchmark_doubleSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDetachTest._Benchmark.benchmark_doubleSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 186842.358 ops/s
# Warmup Iteration   2: 458749.334 ops/s
# Warmup Iteration   3: 494105.322 ops/s
# Warmup Iteration   4: 501971.516 ops/s
# Warmup Iteration   5: 490493.826 ops/s
# Warmup Iteration   6: 518895.546 ops/s
# Warmup Iteration   7: 546007.051 ops/s
# Warmup Iteration   8: 527781.453 ops/s
# Warmup Iteration   9: 513853.553 ops/s
# Warmup Iteration  10: 525471.123 ops/s
# Warmup Iteration  11: 530361.386 ops/s
# Warmup Iteration  12: 520577.803 ops/s
# Warmup Iteration  13: 533381.641 ops/s
# Warmup Iteration  14: 548153.316 ops/s
# Warmup Iteration  15: 519182.492 ops/s
# Warmup Iteration  16: 528602.491 ops/s
# Warmup Iteration  17: 567122.834 ops/s
# Warmup Iteration  18: 535127.663 ops/s
# Warmup Iteration  19: 547863.708 ops/s
# Warmup Iteration  20: 563979.942 ops/s
# Warmup Iteration  21: 547142.906 ops/s
# Warmup Iteration  22: 550944.507 ops/s
# Warmup Iteration  23: 548922.396 ops/s
# Warmup Iteration  24: 544460.666 ops/s
# Warmup Iteration  25: 534620.928 ops/s
# Warmup Iteration  26: 559664.275 ops/s
# Warmup Iteration  27: 548447.505 ops/s
# Warmup Iteration  28: 533299.599 ops/s
# Warmup Iteration  29: 553217.207 ops/s
# Warmup Iteration  30: 544387.973 ops/s
Iteration   1: 564823.475 ops/s
Iteration   2: 568354.496 ops/s
Iteration   3: 536973.756 ops/s
Iteration   4: 544934.745 ops/s
Iteration   5: 558944.838 ops/s
Iteration   6: 530242.053 ops/s
Iteration   7: 549644.731 ops/s
Iteration   8: 548429.904 ops/s
Iteration   9: 549037.270 ops/s
Iteration  10: 554227.736 ops/s
Iteration  11: 529768.920 ops/s
Iteration  12: 568909.837 ops/s
Iteration  13: 545429.321 ops/s
Iteration  14: 543819.444 ops/s
Iteration  15: 555137.875 ops/s
Iteration  16: 537588.318 ops/s
Iteration  17: 542646.364 ops/s
Iteration  18: 562920.412 ops/s
Iteration  19: 525891.611 ops/s
Iteration  20: 569232.945 ops/s
Iteration  21: 557716.844 ops/s
Iteration  22: 555043.007 ops/s
Iteration  23: 562522.451 ops/s
Iteration  24: 552302.148 ops/s
Iteration  25: 561340.889 ops/s
Iteration  26: 556862.925 ops/s
Iteration  27: 557689.483 ops/s
Iteration  28: 568479.331 ops/s
Iteration  29: 546155.957 ops/s
Iteration  30: 564619.822 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDetachTest._Benchmark.benchmark_doubleSubscribe":
  552323.030 ±(99.9%) 8147.177 ops/s [Average]
  (min, avg, max) = (525891.611, 552323.030, 569232.945), stdev = 12194.312
  CI (99.9%): [544175.853, 560470.207] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
SingleDetachTest._Benchmark.benchmark_doubleSubscribe  thrpt   30  552323.030 ± 8147.177  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDisposeDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDisposeDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 163103.887 ops/s
# Warmup Iteration   2: 468352.602 ops/s
# Warmup Iteration   3: 513847.342 ops/s
# Warmup Iteration   4: 499001.380 ops/s
# Warmup Iteration   5: 521840.149 ops/s
# Warmup Iteration   6: 543251.050 ops/s
# Warmup Iteration   7: 512327.435 ops/s
# Warmup Iteration   8: 539314.988 ops/s
# Warmup Iteration   9: 511569.836 ops/s
# Warmup Iteration  10: 532423.932 ops/s
# Warmup Iteration  11: 536576.937 ops/s
# Warmup Iteration  12: 516294.615 ops/s
# Warmup Iteration  13: 548186.521 ops/s
# Warmup Iteration  14: 536755.470 ops/s
# Warmup Iteration  15: 517399.263 ops/s
# Warmup Iteration  16: 535405.132 ops/s
# Warmup Iteration  17: 538220.601 ops/s
# Warmup Iteration  18: 546111.422 ops/s
# Warmup Iteration  19: 570637.029 ops/s
# Warmup Iteration  20: 539300.180 ops/s
# Warmup Iteration  21: 539229.450 ops/s
# Warmup Iteration  22: 552709.720 ops/s
# Warmup Iteration  23: 546461.034 ops/s
# Warmup Iteration  24: 560664.418 ops/s
# Warmup Iteration  25: 553537.257 ops/s
# Warmup Iteration  26: 545065.013 ops/s
# Warmup Iteration  27: 563157.224 ops/s
# Warmup Iteration  28: 544266.839 ops/s
# Warmup Iteration  29: 578711.920 ops/s
# Warmup Iteration  30: 563428.137 ops/s
Iteration   1: 543250.945 ops/s
Iteration   2: 552001.382 ops/s
Iteration   3: 566776.369 ops/s
Iteration   4: 537315.158 ops/s
Iteration   5: 553424.151 ops/s
Iteration   6: 546746.686 ops/s
Iteration   7: 541407.339 ops/s
Iteration   8: 555888.674 ops/s
Iteration   9: 538276.864 ops/s
Iteration  10: 577498.405 ops/s
Iteration  11: 586432.393 ops/s
Iteration  12: 524248.485 ops/s
Iteration  13: 559206.822 ops/s
Iteration  14: 544479.114 ops/s
Iteration  15: 555005.687 ops/s
Iteration  16: 566070.190 ops/s
Iteration  17: 551424.479 ops/s
Iteration  18: 575013.672 ops/s
Iteration  19: 545156.695 ops/s
Iteration  20: 551959.781 ops/s
Iteration  21: 570710.323 ops/s
Iteration  22: 544958.008 ops/s
Iteration  23: 566048.559 ops/s
Iteration  24: 537725.521 ops/s
Iteration  25: 544147.109 ops/s
Iteration  26: 467821.792 ops/s
Iteration  27: 537055.814 ops/s
Iteration  28: 557420.325 ops/s
Iteration  29: 542711.870 ops/s
Iteration  30: 532522.234 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDisposeDoubleOnSubscribe":
  549090.162 ±(99.9%) 14018.180 ops/s [Average]
  (min, avg, max) = (467821.792, 549090.162, 586432.393), stdev = 20981.754
  CI (99.9%): [535071.981, 563108.342] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnDisposeDoubleOnSubscribe  thrpt   30  549090.162 ± 14018.180  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_errorAndDisposerThrowsEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_errorAndDisposerThrowsEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33850.125 ops/s
# Warmup Iteration   2: 143464.647 ops/s
# Warmup Iteration   3: 158824.698 ops/s
# Warmup Iteration   4: 167153.730 ops/s
# Warmup Iteration   5: 181139.711 ops/s
# Warmup Iteration   6: 167738.376 ops/s
# Warmup Iteration   7: 173899.117 ops/s
# Warmup Iteration   8: 183719.032 ops/s
# Warmup Iteration   9: 181039.749 ops/s
# Warmup Iteration  10: 180695.418 ops/s
# Warmup Iteration  11: 177848.082 ops/s
# Warmup Iteration  12: 192211.054 ops/s
# Warmup Iteration  13: 175809.882 ops/s
# Warmup Iteration  14: 185744.869 ops/s
# Warmup Iteration  15: 188403.517 ops/s
# Warmup Iteration  16: 184200.696 ops/s
# Warmup Iteration  17: 191690.578 ops/s
# Warmup Iteration  18: 188567.540 ops/s
# Warmup Iteration  19: 188994.083 ops/s
# Warmup Iteration  20: 192214.587 ops/s
# Warmup Iteration  21: 190990.233 ops/s
# Warmup Iteration  22: 194001.182 ops/s
# Warmup Iteration  23: 185191.965 ops/s
# Warmup Iteration  24: 191939.011 ops/s
# Warmup Iteration  25: 194523.406 ops/s
# Warmup Iteration  26: 186400.621 ops/s
# Warmup Iteration  27: 197081.602 ops/s
# Warmup Iteration  28: 185220.952 ops/s
# Warmup Iteration  29: 194428.133 ops/s
# Warmup Iteration  30: 187188.551 ops/s
Iteration   1: 187839.136 ops/s
Iteration   2: 193046.968 ops/s
Iteration   3: 187149.209 ops/s
Iteration   4: 193718.556 ops/s
Iteration   5: 187452.864 ops/s
Iteration   6: 191450.298 ops/s
Iteration   7: 194245.935 ops/s
Iteration   8: 190956.606 ops/s
Iteration   9: 198634.495 ops/s
Iteration  10: 182658.263 ops/s
Iteration  11: 199249.773 ops/s
Iteration  12: 191364.029 ops/s
Iteration  13: 192137.086 ops/s
Iteration  14: 194466.551 ops/s
Iteration  15: 188309.930 ops/s
Iteration  16: 189058.700 ops/s
Iteration  17: 195835.228 ops/s
Iteration  18: 188885.768 ops/s
Iteration  19: 190321.621 ops/s
Iteration  20: 195068.857 ops/s
Iteration  21: 187319.534 ops/s
Iteration  22: 195671.666 ops/s
Iteration  23: 188492.330 ops/s
Iteration  24: 195376.880 ops/s
Iteration  25: 189581.583 ops/s
Iteration  26: 193190.414 ops/s
Iteration  27: 194160.347 ops/s
Iteration  28: 187588.891 ops/s
Iteration  29: 192295.645 ops/s
Iteration  30: 189791.378 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_errorAndDisposerThrowsEager":
  191510.618 ±(99.9%) 2510.698 ops/s [Average]
  (min, avg, max) = (182658.263, 191510.618, 199249.773), stdev = 3757.895
  CI (99.9%): [188999.920, 194021.316] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
SingleUsingTest._Benchmark.benchmark_errorAndDisposerThrowsEager  thrpt   30  191510.618 ± 2510.698  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48918.311 ops/s
# Warmup Iteration   2: 140681.781 ops/s
# Warmup Iteration   3: 238869.943 ops/s
# Warmup Iteration   4: 234203.937 ops/s
# Warmup Iteration   5: 254916.113 ops/s
# Warmup Iteration   6: 228496.381 ops/s
# Warmup Iteration   7: 235089.196 ops/s
# Warmup Iteration   8: 247495.420 ops/s
# Warmup Iteration   9: 233130.781 ops/s
# Warmup Iteration  10: 261459.798 ops/s
# Warmup Iteration  11: 250297.984 ops/s
# Warmup Iteration  12: 252645.293 ops/s
# Warmup Iteration  13: 251905.489 ops/s
# Warmup Iteration  14: 248914.025 ops/s
# Warmup Iteration  15: 252134.764 ops/s
# Warmup Iteration  16: 258527.546 ops/s
# Warmup Iteration  17: 254802.093 ops/s
# Warmup Iteration  18: 260846.480 ops/s
# Warmup Iteration  19: 271609.795 ops/s
# Warmup Iteration  20: 254248.598 ops/s
# Warmup Iteration  21: 266676.974 ops/s
# Warmup Iteration  22: 254478.983 ops/s
# Warmup Iteration  23: 258372.777 ops/s
# Warmup Iteration  24: 260930.864 ops/s
# Warmup Iteration  25: 255347.966 ops/s
# Warmup Iteration  26: 258925.876 ops/s
# Warmup Iteration  27: 256196.790 ops/s
# Warmup Iteration  28: 260051.457 ops/s
# Warmup Iteration  29: 265122.935 ops/s
# Warmup Iteration  30: 252237.329 ops/s
Iteration   1: 257410.545 ops/s
Iteration   2: 255748.965 ops/s
Iteration   3: 266913.704 ops/s
Iteration   4: 257769.098 ops/s
Iteration   5: 256225.427 ops/s
Iteration   6: 265421.098 ops/s
Iteration   7: 259929.165 ops/s
Iteration   8: 263006.472 ops/s
Iteration   9: 252851.832 ops/s
Iteration  10: 266971.608 ops/s
Iteration  11: 252805.449 ops/s
Iteration  12: 258456.787 ops/s
Iteration  13: 267728.618 ops/s
Iteration  14: 256826.129 ops/s
Iteration  15: 251700.892 ops/s
Iteration  16: 266976.845 ops/s
Iteration  17: 256915.047 ops/s
Iteration  18: 267361.659 ops/s
Iteration  19: 254536.252 ops/s
Iteration  20: 242758.091 ops/s
Iteration  21: 241858.036 ops/s
Iteration  22: 246436.484 ops/s
Iteration  23: 271078.134 ops/s
Iteration  24: 255457.172 ops/s
Iteration  25: 266095.329 ops/s
Iteration  26: 254112.290 ops/s
Iteration  27: 256643.330 ops/s
Iteration  28: 259833.174 ops/s
Iteration  29: 258676.674 ops/s
Iteration  30: 270775.054 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_doubleOnSubscribe":
  258642.645 ±(99.9%) 5061.558 ops/s [Average]
  (min, avg, max) = (241858.036, 258642.645, 271078.134), stdev = 7575.902
  CI (99.9%): [253581.087, 263704.203] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ObservableAnyTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  258642.645 ± 5061.558  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23689.963 ops/s
# Warmup Iteration   2: 149634.526 ops/s
# Warmup Iteration   3: 231962.885 ops/s
# Warmup Iteration   4: 245037.129 ops/s
# Warmup Iteration   5: 259459.700 ops/s
# Warmup Iteration   6: 261328.100 ops/s
# Warmup Iteration   7: 241133.983 ops/s
# Warmup Iteration   8: 260723.683 ops/s
# Warmup Iteration   9: 245415.213 ops/s
# Warmup Iteration  10: 253200.936 ops/s
# Warmup Iteration  11: 243381.372 ops/s
# Warmup Iteration  12: 259710.907 ops/s
# Warmup Iteration  13: 251941.531 ops/s
# Warmup Iteration  14: 248567.045 ops/s
# Warmup Iteration  15: 246537.182 ops/s
# Warmup Iteration  16: 241991.117 ops/s
# Warmup Iteration  17: 251135.812 ops/s
# Warmup Iteration  18: 262765.457 ops/s
# Warmup Iteration  19: 261953.149 ops/s
# Warmup Iteration  20: 273645.659 ops/s
# Warmup Iteration  21: 262823.458 ops/s
# Warmup Iteration  22: 268329.330 ops/s
# Warmup Iteration  23: 272740.490 ops/s
# Warmup Iteration  24: 257218.594 ops/s
# Warmup Iteration  25: 277607.211 ops/s
# Warmup Iteration  26: 269135.896 ops/s
# Warmup Iteration  27: 275733.076 ops/s
# Warmup Iteration  28: 262871.289 ops/s
# Warmup Iteration  29: 264473.859 ops/s
# Warmup Iteration  30: 266735.255 ops/s
Iteration   1: 270235.441 ops/s
Iteration   2: 259726.317 ops/s
Iteration   3: 271144.311 ops/s
Iteration   4: 258026.967 ops/s
Iteration   5: 262964.834 ops/s
Iteration   6: 263261.944 ops/s
Iteration   7: 271508.179 ops/s
Iteration   8: 259267.250 ops/s
Iteration   9: 272152.074 ops/s
Iteration  10: 258190.511 ops/s
Iteration  11: 268213.443 ops/s
Iteration  12: 260802.736 ops/s
Iteration  13: 264531.831 ops/s
Iteration  14: 267144.978 ops/s
Iteration  15: 261372.270 ops/s
Iteration  16: 268123.246 ops/s
Iteration  17: 264919.568 ops/s
Iteration  18: 268929.402 ops/s
Iteration  19: 272265.286 ops/s
Iteration  20: 259973.190 ops/s
Iteration  21: 275203.143 ops/s
Iteration  22: 256495.250 ops/s
Iteration  23: 273503.314 ops/s
Iteration  24: 257081.559 ops/s
Iteration  25: 265831.916 ops/s
Iteration  26: 276498.439 ops/s
Iteration  27: 262712.364 ops/s
Iteration  28: 271518.838 ops/s
Iteration  29: 259819.956 ops/s
Iteration  30: 271299.882 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_doubleOnSubscribe":
  265757.281 ±(99.9%) 3946.910 ops/s [Average]
  (min, avg, max) = (256495.250, 265757.281, 276498.439), stdev = 5907.550
  CI (99.9%): [261810.371, 269704.192] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableSingleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  265757.281 ± 3946.910  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableCompletableObserver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableCompletableObserver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70886.545 ops/s
# Warmup Iteration   2: 223212.663 ops/s
# Warmup Iteration   3: 266932.503 ops/s
# Warmup Iteration   4: 329837.659 ops/s
# Warmup Iteration   5: 322626.543 ops/s
# Warmup Iteration   6: 331365.661 ops/s
# Warmup Iteration   7: 332153.797 ops/s
# Warmup Iteration   8: 311546.086 ops/s
# Warmup Iteration   9: 321532.575 ops/s
# Warmup Iteration  10: 331507.474 ops/s
# Warmup Iteration  11: 313341.525 ops/s
# Warmup Iteration  12: 330876.991 ops/s
# Warmup Iteration  13: 322187.493 ops/s
# Warmup Iteration  14: 329527.235 ops/s
# Warmup Iteration  15: 314434.560 ops/s
# Warmup Iteration  16: 329768.964 ops/s
# Warmup Iteration  17: 329422.485 ops/s
# Warmup Iteration  18: 323500.333 ops/s
# Warmup Iteration  19: 341818.985 ops/s
# Warmup Iteration  20: 327555.148 ops/s
# Warmup Iteration  21: 331949.271 ops/s
# Warmup Iteration  22: 340029.301 ops/s
# Warmup Iteration  23: 317831.361 ops/s
# Warmup Iteration  24: 327209.344 ops/s
# Warmup Iteration  25: 327238.843 ops/s
# Warmup Iteration  26: 326002.789 ops/s
# Warmup Iteration  27: 336406.070 ops/s
# Warmup Iteration  28: 334487.132 ops/s
# Warmup Iteration  29: 334696.356 ops/s
# Warmup Iteration  30: 333547.342 ops/s
Iteration   1: 349178.420 ops/s
Iteration   2: 323769.036 ops/s
Iteration   3: 343434.139 ops/s
Iteration   4: 342013.615 ops/s
Iteration   5: 338059.668 ops/s
Iteration   6: 326373.506 ops/s
Iteration   7: 328233.642 ops/s
Iteration   8: 339634.207 ops/s
Iteration   9: 330656.328 ops/s
Iteration  10: 332248.950 ops/s
Iteration  11: 335439.012 ops/s
Iteration  12: 333273.285 ops/s
Iteration  13: 330438.320 ops/s
Iteration  14: 345954.106 ops/s
Iteration  15: 262640.764 ops/s
Iteration  16: 334596.067 ops/s
Iteration  17: 323310.430 ops/s
Iteration  18: 339513.003 ops/s
Iteration  19: 325007.783 ops/s
Iteration  20: 325374.149 ops/s
Iteration  21: 332156.283 ops/s
Iteration  22: 334394.508 ops/s
Iteration  23: 331684.840 ops/s
Iteration  24: 337937.426 ops/s
Iteration  25: 337599.414 ops/s
Iteration  26: 325141.723 ops/s
Iteration  27: 339908.344 ops/s
Iteration  28: 330042.661 ops/s
Iteration  29: 332354.536 ops/s
Iteration  30: 332114.118 ops/s


Result "io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableCompletableObserver":
  331416.076 ±(99.9%) 9741.426 ops/s [Average]
  (min, avg, max) = (262640.764, 331416.076, 349178.420), stdev = 14580.510
  CI (99.9%): [321674.650, 341157.503] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableCompletableObserver  thrpt   30  331416.076 ± 9741.426  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceObserver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceObserver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58719.781 ops/s
# Warmup Iteration   2: 241695.112 ops/s
# Warmup Iteration   3: 314316.847 ops/s
# Warmup Iteration   4: 297020.360 ops/s
# Warmup Iteration   5: 304534.525 ops/s
# Warmup Iteration   6: 297442.710 ops/s
# Warmup Iteration   7: 292001.271 ops/s
# Warmup Iteration   8: 313529.463 ops/s
# Warmup Iteration   9: 282593.481 ops/s
# Warmup Iteration  10: 312793.872 ops/s
# Warmup Iteration  11: 307788.203 ops/s
# Warmup Iteration  12: 327249.589 ops/s
# Warmup Iteration  13: 299685.469 ops/s
# Warmup Iteration  14: 323669.016 ops/s
# Warmup Iteration  15: 313357.913 ops/s
# Warmup Iteration  16: 319364.728 ops/s
# Warmup Iteration  17: 326986.636 ops/s
# Warmup Iteration  18: 309630.792 ops/s
# Warmup Iteration  19: 322873.629 ops/s
# Warmup Iteration  20: 308759.214 ops/s
# Warmup Iteration  21: 313184.960 ops/s
# Warmup Iteration  22: 331744.633 ops/s
# Warmup Iteration  23: 313597.213 ops/s
# Warmup Iteration  24: 320408.262 ops/s
# Warmup Iteration  25: 326091.578 ops/s
# Warmup Iteration  26: 311439.052 ops/s
# Warmup Iteration  27: 322094.568 ops/s
# Warmup Iteration  28: 330946.919 ops/s
# Warmup Iteration  29: 313530.115 ops/s
# Warmup Iteration  30: 332134.327 ops/s
Iteration   1: 313903.495 ops/s
Iteration   2: 334133.647 ops/s
Iteration   3: 328764.865 ops/s
Iteration   4: 318497.085 ops/s
Iteration   5: 336754.373 ops/s
Iteration   6: 327722.644 ops/s
Iteration   7: 316138.446 ops/s
Iteration   8: 323400.192 ops/s
Iteration   9: 320147.027 ops/s
Iteration  10: 322204.734 ops/s
Iteration  11: 332794.335 ops/s
Iteration  12: 318162.653 ops/s
Iteration  13: 323526.587 ops/s
Iteration  14: 340673.318 ops/s
Iteration  15: 323108.265 ops/s
Iteration  16: 313979.513 ops/s
Iteration  17: 329673.197 ops/s
Iteration  18: 317851.281 ops/s
Iteration  19: 330999.897 ops/s
Iteration  20: 323244.618 ops/s
Iteration  21: 317619.564 ops/s
Iteration  22: 339315.336 ops/s
Iteration  23: 316831.883 ops/s
Iteration  24: 335348.397 ops/s
Iteration  25: 316056.203 ops/s
Iteration  26: 327736.557 ops/s
Iteration  27: 327617.444 ops/s
Iteration  28: 325439.722 ops/s
Iteration  29: 316630.177 ops/s
Iteration  30: 324463.930 ops/s


Result "io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceObserver":
  324757.980 ±(99.9%) 5129.984 ops/s [Average]
  (min, avg, max) = (313903.495, 324757.980, 340673.318), stdev = 7678.319
  CI (99.9%): [319627.995, 329887.964] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceObserver  thrpt   30  324757.980 ± 5129.984  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceCompletableObserver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceCompletableObserver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 63509.247 ops/s
# Warmup Iteration   2: 250906.296 ops/s
# Warmup Iteration   3: 320924.140 ops/s
# Warmup Iteration   4: 313394.062 ops/s
# Warmup Iteration   5: 327448.441 ops/s
# Warmup Iteration   6: 300754.194 ops/s
# Warmup Iteration   7: 299641.949 ops/s
# Warmup Iteration   8: 332373.901 ops/s
# Warmup Iteration   9: 318672.962 ops/s
# Warmup Iteration  10: 327262.435 ops/s
# Warmup Iteration  11: 319492.647 ops/s
# Warmup Iteration  12: 334227.491 ops/s
# Warmup Iteration  13: 316479.322 ops/s
# Warmup Iteration  14: 315394.319 ops/s
# Warmup Iteration  15: 330896.860 ops/s
# Warmup Iteration  16: 318294.159 ops/s
# Warmup Iteration  17: 342082.022 ops/s
# Warmup Iteration  18: 322262.102 ops/s
# Warmup Iteration  19: 330905.315 ops/s
# Warmup Iteration  20: 331824.164 ops/s
# Warmup Iteration  21: 326489.903 ops/s
# Warmup Iteration  22: 334024.430 ops/s
# Warmup Iteration  23: 321338.311 ops/s
# Warmup Iteration  24: 327521.157 ops/s
# Warmup Iteration  25: 350216.999 ops/s
# Warmup Iteration  26: 321712.241 ops/s
# Warmup Iteration  27: 345159.419 ops/s
# Warmup Iteration  28: 326291.607 ops/s
# Warmup Iteration  29: 332640.017 ops/s
# Warmup Iteration  30: 326022.589 ops/s
Iteration   1: 332870.808 ops/s
Iteration   2: 334815.388 ops/s
Iteration   3: 327187.355 ops/s
Iteration   4: 338801.377 ops/s
Iteration   5: 325046.650 ops/s
Iteration   6: 336671.040 ops/s
Iteration   7: 341775.705 ops/s
Iteration   8: 324426.792 ops/s
Iteration   9: 329018.372 ops/s
Iteration  10: 260329.427 ops/s
Iteration  11: 328140.419 ops/s
Iteration  12: 343940.130 ops/s
Iteration  13: 323637.070 ops/s
Iteration  14: 338689.995 ops/s
Iteration  15: 337931.016 ops/s
Iteration  16: 322592.694 ops/s
Iteration  17: 342463.623 ops/s
Iteration  18: 321385.081 ops/s
Iteration  19: 332106.530 ops/s
Iteration  20: 346864.578 ops/s
Iteration  21: 319586.738 ops/s
Iteration  22: 334897.466 ops/s
Iteration  23: 332871.969 ops/s
Iteration  24: 338002.584 ops/s
Iteration  25: 324290.426 ops/s
Iteration  26: 332253.992 ops/s
Iteration  27: 343251.690 ops/s
Iteration  28: 319844.367 ops/s
Iteration  29: 322143.045 ops/s
Iteration  30: 329682.533 ops/s


Result "io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceCompletableObserver":
  329517.295 ±(99.9%) 10182.794 ops/s [Average]
  (min, avg, max) = (260329.427, 329517.295, 346864.578), stdev = 15241.129
  CI (99.9%): [319334.501, 339700.090] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score       Error  Units
EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceCompletableObserver  thrpt   30  329517.295 ± 10182.794  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceMaybeObserver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceMaybeObserver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44745.878 ops/s
# Warmup Iteration   2: 239953.276 ops/s
# Warmup Iteration   3: 268607.430 ops/s
# Warmup Iteration   4: 303899.299 ops/s
# Warmup Iteration   5: 331405.522 ops/s
# Warmup Iteration   6: 315328.792 ops/s
# Warmup Iteration   7: 318702.686 ops/s
# Warmup Iteration   8: 325569.219 ops/s
# Warmup Iteration   9: 315957.158 ops/s
# Warmup Iteration  10: 329916.205 ops/s
# Warmup Iteration  11: 317457.711 ops/s
# Warmup Iteration  12: 320280.885 ops/s
# Warmup Iteration  13: 320668.958 ops/s
# Warmup Iteration  14: 327512.747 ops/s
# Warmup Iteration  15: 315606.224 ops/s
# Warmup Iteration  16: 320567.055 ops/s
# Warmup Iteration  17: 330148.643 ops/s
# Warmup Iteration  18: 337052.365 ops/s
# Warmup Iteration  19: 333824.171 ops/s
# Warmup Iteration  20: 329005.618 ops/s
# Warmup Iteration  21: 339598.881 ops/s
# Warmup Iteration  22: 320650.155 ops/s
# Warmup Iteration  23: 322043.548 ops/s
# Warmup Iteration  24: 329708.247 ops/s
# Warmup Iteration  25: 319503.042 ops/s
# Warmup Iteration  26: 330982.666 ops/s
# Warmup Iteration  27: 343709.752 ops/s
# Warmup Iteration  28: 342182.487 ops/s
# Warmup Iteration  29: 314118.487 ops/s
# Warmup Iteration  30: 339519.660 ops/s
Iteration   1: 325732.478 ops/s
Iteration   2: 332708.079 ops/s
Iteration   3: 330073.718 ops/s
Iteration   4: 343870.307 ops/s
Iteration   5: 320396.082 ops/s
Iteration   6: 345374.388 ops/s
Iteration   7: 338458.973 ops/s
Iteration   8: 320946.161 ops/s
Iteration   9: 338640.229 ops/s
Iteration  10: 331037.873 ops/s
Iteration  11: 324247.420 ops/s
Iteration  12: 338320.793 ops/s
Iteration  13: 321524.523 ops/s
Iteration  14: 325057.041 ops/s
Iteration  15: 343312.637 ops/s
Iteration  16: 335121.878 ops/s
Iteration  17: 329841.229 ops/s
Iteration  18: 334211.928 ops/s
Iteration  19: 347063.454 ops/s
Iteration  20: 338524.566 ops/s
Iteration  21: 331154.711 ops/s
Iteration  22: 331323.222 ops/s
Iteration  23: 333756.736 ops/s
Iteration  24: 326744.840 ops/s
Iteration  25: 335187.863 ops/s
Iteration  26: 324818.278 ops/s
Iteration  27: 335941.839 ops/s
Iteration  28: 329720.952 ops/s
Iteration  29: 328107.579 ops/s
Iteration  30: 331622.890 ops/s


Result "io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceMaybeObserver":
  332428.089 ±(99.9%) 4814.215 ops/s [Average]
  (min, avg, max) = (320396.082, 332428.089, 347063.454), stdev = 7205.690
  CI (99.9%): [327613.874, 337242.304] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
EndConsumerHelperTest._Benchmark.benchmark_checkDoubleResourceMaybeObserver  thrpt   30  332428.089 ± 4814.215  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_badSourceSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_badSourceSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18613.927 ops/s
# Warmup Iteration   2: 130455.101 ops/s
# Warmup Iteration   3: 160738.724 ops/s
# Warmup Iteration   4: 167543.881 ops/s
# Warmup Iteration   5: 175643.668 ops/s
# Warmup Iteration   6: 168647.093 ops/s
# Warmup Iteration   7: 164963.207 ops/s
# Warmup Iteration   8: 170306.274 ops/s
# Warmup Iteration   9: 180389.548 ops/s
# Warmup Iteration  10: 175444.060 ops/s
# Warmup Iteration  11: 166703.469 ops/s
# Warmup Iteration  12: 175906.885 ops/s
# Warmup Iteration  13: 165500.377 ops/s
# Warmup Iteration  14: 172853.189 ops/s
# Warmup Iteration  15: 167886.687 ops/s
# Warmup Iteration  16: 166991.303 ops/s
# Warmup Iteration  17: 185992.540 ops/s
# Warmup Iteration  18: 175140.380 ops/s
# Warmup Iteration  19: 182528.357 ops/s
# Warmup Iteration  20: 176923.161 ops/s
# Warmup Iteration  21: 181902.976 ops/s
# Warmup Iteration  22: 178006.208 ops/s
# Warmup Iteration  23: 178380.006 ops/s
# Warmup Iteration  24: 181776.054 ops/s
# Warmup Iteration  25: 175596.437 ops/s
# Warmup Iteration  26: 176099.241 ops/s
# Warmup Iteration  27: 179838.357 ops/s
# Warmup Iteration  28: 184251.522 ops/s
# Warmup Iteration  29: 178921.871 ops/s
# Warmup Iteration  30: 177557.983 ops/s
Iteration   1: 185711.597 ops/s
Iteration   2: 172559.439 ops/s
Iteration   3: 182504.231 ops/s
Iteration   4: 138480.659 ops/s
Iteration   5: 182275.577 ops/s
Iteration   6: 179553.657 ops/s
Iteration   7: 178018.062 ops/s
Iteration   8: 184674.942 ops/s
Iteration   9: 175161.555 ops/s
Iteration  10: 188095.612 ops/s
Iteration  11: 178040.124 ops/s
Iteration  12: 164296.149 ops/s
Iteration  13: 187576.528 ops/s
Iteration  14: 188014.697 ops/s
Iteration  15: 175807.097 ops/s
Iteration  16: 175376.278 ops/s
Iteration  17: 185593.408 ops/s
Iteration  18: 179521.935 ops/s
Iteration  19: 184724.053 ops/s
Iteration  20: 178841.250 ops/s
Iteration  21: 172324.727 ops/s
Iteration  22: 176360.761 ops/s
Iteration  23: 183127.928 ops/s
Iteration  24: 185043.707 ops/s
Iteration  25: 173863.324 ops/s
Iteration  26: 187889.265 ops/s
Iteration  27: 174808.403 ops/s
Iteration  28: 183122.974 ops/s
Iteration  29: 178126.968 ops/s
Iteration  30: 179033.779 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_badSourceSingle":
  178617.623 ±(99.9%) 6320.694 ops/s [Average]
  (min, avg, max) = (138480.659, 178617.623, 188095.612), stdev = 9460.517
  CI (99.9%): [172296.929, 184938.316] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableAnyTest._Benchmark.benchmark_badSourceSingle  thrpt   30  178617.623 ± 6320.694  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 74092.670 ops/s
# Warmup Iteration   2: 257289.005 ops/s
# Warmup Iteration   3: 437865.636 ops/s
# Warmup Iteration   4: 424222.757 ops/s
# Warmup Iteration   5: 459807.223 ops/s
# Warmup Iteration   6: 422205.050 ops/s
# Warmup Iteration   7: 457372.735 ops/s
# Warmup Iteration   8: 474671.184 ops/s
# Warmup Iteration   9: 473384.675 ops/s
# Warmup Iteration  10: 484502.366 ops/s
# Warmup Iteration  11: 466114.674 ops/s
# Warmup Iteration  12: 453817.134 ops/s
# Warmup Iteration  13: 481054.520 ops/s
# Warmup Iteration  14: 461454.017 ops/s
# Warmup Iteration  15: 475823.173 ops/s
# Warmup Iteration  16: 442499.727 ops/s
# Warmup Iteration  17: 474964.842 ops/s
# Warmup Iteration  18: 492462.603 ops/s
# Warmup Iteration  19: 490439.531 ops/s
# Warmup Iteration  20: 500934.945 ops/s
# Warmup Iteration  21: 466146.627 ops/s
# Warmup Iteration  22: 498208.057 ops/s
# Warmup Iteration  23: 492235.702 ops/s
# Warmup Iteration  24: 481090.469 ops/s
# Warmup Iteration  25: 497261.330 ops/s
# Warmup Iteration  26: 476401.872 ops/s
# Warmup Iteration  27: 507807.833 ops/s
# Warmup Iteration  28: 500736.230 ops/s
# Warmup Iteration  29: 490641.990 ops/s
# Warmup Iteration  30: 486627.807 ops/s
Iteration   1: 487488.260 ops/s
Iteration   2: 478626.101 ops/s
Iteration   3: 509619.539 ops/s
Iteration   4: 488320.756 ops/s
Iteration   5: 476222.798 ops/s
Iteration   6: 503723.667 ops/s
Iteration   7: 477845.311 ops/s
Iteration   8: 482047.511 ops/s
Iteration   9: 500133.841 ops/s
Iteration  10: 476603.943 ops/s
Iteration  11: 500384.314 ops/s
Iteration  12: 482288.621 ops/s
Iteration  13: 495808.791 ops/s
Iteration  14: 482086.607 ops/s
Iteration  15: 484143.643 ops/s
Iteration  16: 504408.235 ops/s
Iteration  17: 476269.517 ops/s
Iteration  18: 498504.451 ops/s
Iteration  19: 478919.343 ops/s
Iteration  20: 509122.203 ops/s
Iteration  21: 479887.836 ops/s
Iteration  22: 496494.935 ops/s
Iteration  23: 490490.438 ops/s
Iteration  24: 490935.501 ops/s
Iteration  25: 495157.367 ops/s
Iteration  26: 476828.031 ops/s
Iteration  27: 501167.832 ops/s
Iteration  28: 482485.658 ops/s
Iteration  29: 488697.836 ops/s
Iteration  30: 491331.032 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_doubleOnSubscribe":
  489534.797 ±(99.9%) 6988.931 ops/s [Average]
  (min, avg, max) = (476222.798, 489534.797, 509619.539), stdev = 10460.703
  CI (99.9%): [482545.867, 496523.728] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SingleUsingTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  489534.797 ± 6988.931  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2281923.305 ops/s
# Warmup Iteration   2: 6164433.090 ops/s
# Warmup Iteration   3: 8604698.103 ops/s
# Warmup Iteration   4: 8045014.505 ops/s
# Warmup Iteration   5: 8619164.053 ops/s
# Warmup Iteration   6: 8101012.168 ops/s
# Warmup Iteration   7: 8285267.091 ops/s
# Warmup Iteration   8: 8140830.003 ops/s
# Warmup Iteration   9: 8382308.204 ops/s
# Warmup Iteration  10: 8216421.315 ops/s
# Warmup Iteration  11: 8379269.287 ops/s
# Warmup Iteration  12: 8827147.424 ops/s
# Warmup Iteration  13: 8029354.971 ops/s
# Warmup Iteration  14: 8404553.326 ops/s
# Warmup Iteration  15: 7942308.028 ops/s
# Warmup Iteration  16: 8404275.878 ops/s
# Warmup Iteration  17: 8636412.890 ops/s
# Warmup Iteration  18: 8049743.044 ops/s
# Warmup Iteration  19: 8503017.458 ops/s
# Warmup Iteration  20: 8308227.250 ops/s
# Warmup Iteration  21: 8522463.646 ops/s
# Warmup Iteration  22: 8214104.910 ops/s
# Warmup Iteration  23: 8466643.550 ops/s
# Warmup Iteration  24: 8309876.940 ops/s
# Warmup Iteration  25: 8365392.785 ops/s
# Warmup Iteration  26: 8229447.825 ops/s
# Warmup Iteration  27: 8326880.507 ops/s
# Warmup Iteration  28: 8266630.624 ops/s
# Warmup Iteration  29: 6882117.467 ops/s
# Warmup Iteration  30: 8370063.610 ops/s
Iteration   1: 8284611.639 ops/s
Iteration   2: 8134966.582 ops/s
Iteration   3: 8733014.558 ops/s
Iteration   4: 8305716.422 ops/s
Iteration   5: 8021092.221 ops/s
Iteration   6: 8689355.949 ops/s
Iteration   7: 8191453.716 ops/s
Iteration   8: 8226198.254 ops/s
Iteration   9: 8421892.704 ops/s
Iteration  10: 8193947.005 ops/s
Iteration  11: 8465533.685 ops/s
Iteration  12: 8659101.508 ops/s
Iteration  13: 8436767.088 ops/s
Iteration  14: 8278944.366 ops/s
Iteration  15: 8421977.151 ops/s
Iteration  16: 8713010.961 ops/s
Iteration  17: 7964316.017 ops/s
Iteration  18: 8399206.484 ops/s
Iteration  19: 8093678.190 ops/s
Iteration  20: 8535618.518 ops/s
Iteration  21: 8326981.745 ops/s
Iteration  22: 8497255.279 ops/s
Iteration  23: 8546924.435 ops/s
Iteration  24: 8170681.850 ops/s
Iteration  25: 8487436.644 ops/s
Iteration  26: 8159315.107 ops/s
Iteration  27: 8175557.998 ops/s
Iteration  28: 8567558.851 ops/s
Iteration  29: 8223847.738 ops/s
Iteration  30: 8582176.107 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_empty":
  8363604.626 ±(99.9%) 141057.912 ops/s [Average]
  (min, avg, max) = (7964316.017, 8363604.626, 8733014.558), stdev = 211128.858
  CI (99.9%): [8222546.714, 8504662.538] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score        Error  Units
MaybeHideTest._Benchmark.benchmark_empty  thrpt   30  8363604.626 ± 141057.912  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFromOptionalTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFromOptionalTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3177149.766 ops/s
# Warmup Iteration   2: 7351437.208 ops/s
# Warmup Iteration   3: 10934684.108 ops/s
# Warmup Iteration   4: 10740946.636 ops/s
# Warmup Iteration   5: 10885828.126 ops/s
# Warmup Iteration   6: 10542238.813 ops/s
# Warmup Iteration   7: 11010300.755 ops/s
# Warmup Iteration   8: 11132624.475 ops/s
# Warmup Iteration   9: 10485021.954 ops/s
# Warmup Iteration  10: 11160736.365 ops/s
# Warmup Iteration  11: 10590317.571 ops/s
# Warmup Iteration  12: 10545781.239 ops/s
# Warmup Iteration  13: 11052948.810 ops/s
# Warmup Iteration  14: 10363016.272 ops/s
# Warmup Iteration  15: 11397493.994 ops/s
# Warmup Iteration  16: 10563965.345 ops/s
# Warmup Iteration  17: 10981912.752 ops/s
# Warmup Iteration  18: 10640352.381 ops/s
# Warmup Iteration  19: 10986454.851 ops/s
# Warmup Iteration  20: 10973053.792 ops/s
# Warmup Iteration  21: 10623461.813 ops/s
# Warmup Iteration  22: 10957361.459 ops/s
# Warmup Iteration  23: 10508792.370 ops/s
# Warmup Iteration  24: 10744829.245 ops/s
# Warmup Iteration  25: 10957397.148 ops/s
# Warmup Iteration  26: 10492107.411 ops/s
# Warmup Iteration  27: 10634336.334 ops/s
# Warmup Iteration  28: 10552330.544 ops/s
# Warmup Iteration  29: 10859128.111 ops/s
# Warmup Iteration  30: 10682007.139 ops/s
Iteration   1: 10721301.394 ops/s
Iteration   2: 10988796.347 ops/s
Iteration   3: 10621196.132 ops/s
Iteration   4: 10727003.975 ops/s
Iteration   5: 10648075.631 ops/s
Iteration   6: 10791903.557 ops/s
Iteration   7: 11128512.312 ops/s
Iteration   8: 10651736.827 ops/s
Iteration   9: 11152703.975 ops/s
Iteration  10: 10577249.388 ops/s
Iteration  11: 10896418.859 ops/s
Iteration  12: 11030787.682 ops/s
Iteration  13: 10228636.459 ops/s
Iteration  14: 11025839.142 ops/s
Iteration  15: 10764774.479 ops/s
Iteration  16: 10668142.398 ops/s
Iteration  17: 11100908.177 ops/s
Iteration  18: 10671931.324 ops/s
Iteration  19: 10579661.377 ops/s
Iteration  20: 11103132.372 ops/s
Iteration  21: 10273440.607 ops/s
Iteration  22: 10628873.980 ops/s
Iteration  23: 11245703.832 ops/s
Iteration  24: 10584975.522 ops/s
Iteration  25: 10952508.040 ops/s
Iteration  26: 10819712.853 ops/s
Iteration  27: 11002485.873 ops/s
Iteration  28: 10769591.913 ops/s
Iteration  29: 10436312.818 ops/s
Iteration  30: 10913273.338 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFromOptionalTest._Benchmark.benchmark_empty":
  10790186.353 ±(99.9%) 169722.917 ops/s [Average]
  (min, avg, max) = (10228636.459, 10790186.353, 11245703.832), stdev = 254033.291
  CI (99.9%): [10620463.436, 10959909.269] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
MaybeFromOptionalTest._Benchmark.benchmark_empty  thrpt   30  10790186.353 ± 169722.917  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 219063.116 ops/s
# Warmup Iteration   2: 1223742.899 ops/s
# Warmup Iteration   3: 2204698.654 ops/s
# Warmup Iteration   4: 2714373.252 ops/s
# Warmup Iteration   5: 2824457.175 ops/s
# Warmup Iteration   6: 2803640.805 ops/s
# Warmup Iteration   7: 2758207.113 ops/s
# Warmup Iteration   8: 2670050.614 ops/s
# Warmup Iteration   9: 2660520.545 ops/s
# Warmup Iteration  10: 2566461.716 ops/s
# Warmup Iteration  11: 2626210.478 ops/s
# Warmup Iteration  12: 2801373.335 ops/s
# Warmup Iteration  13: 2683594.776 ops/s
# Warmup Iteration  14: 2779440.307 ops/s
# Warmup Iteration  15: 2672729.441 ops/s
# Warmup Iteration  16: 2709556.435 ops/s
# Warmup Iteration  17: 2740066.582 ops/s
# Warmup Iteration  18: 2791447.083 ops/s
# Warmup Iteration  19: 2785392.320 ops/s
# Warmup Iteration  20: 2686589.038 ops/s
# Warmup Iteration  21: 2828324.741 ops/s
# Warmup Iteration  22: 3235920.281 ops/s
# Warmup Iteration  23: 2626745.303 ops/s
# Warmup Iteration  24: 1968572.502 ops/s
# Warmup Iteration  25: 2949031.689 ops/s
# Warmup Iteration  26: 2912825.820 ops/s
# Warmup Iteration  27: 2817516.973 ops/s
# Warmup Iteration  28: 2693359.764 ops/s
# Warmup Iteration  29: 2734119.973 ops/s
# Warmup Iteration  30: 2690107.980 ops/s
Iteration   1: 2735302.185 ops/s
Iteration   2: 2768091.743 ops/s
Iteration   3: 2721129.591 ops/s
Iteration   4: 2738583.798 ops/s
Iteration   5: 2827800.194 ops/s
Iteration   6: 2695148.430 ops/s
Iteration   7: 2712851.387 ops/s
Iteration   8: 2792777.401 ops/s
Iteration   9: 2724374.453 ops/s
Iteration  10: 2755273.778 ops/s
Iteration  11: 2746043.043 ops/s
Iteration  12: 2684370.834 ops/s
Iteration  13: 2867991.871 ops/s
Iteration  14: 2659600.480 ops/s
Iteration  15: 2700722.287 ops/s
Iteration  16: 2716556.610 ops/s
Iteration  17: 2771271.976 ops/s
Iteration  18: 2713174.009 ops/s
Iteration  19: 2751378.943 ops/s
Iteration  20: 2732497.261 ops/s
Iteration  21: 2875595.008 ops/s
Iteration  22: 2795964.744 ops/s
Iteration  23: 2720568.420 ops/s
Iteration  24: 2837733.056 ops/s
Iteration  25: 2653291.875 ops/s
Iteration  26: 2754541.797 ops/s
Iteration  27: 2690467.697 ops/s
Iteration  28: 2694044.391 ops/s
Iteration  29: 2760029.842 ops/s
Iteration  30: 2666428.644 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError":
  2742120.192 ±(99.9%) 38091.165 ops/s [Average]
  (min, avg, max) = (2653291.875, 2742120.192, 2875595.008), stdev = 57013.067
  CI (99.9%): [2704029.027, 2780211.356] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError  thrpt   30  2742120.192 ± 38091.165  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_mainEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_mainEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3416588.253 ops/s
# Warmup Iteration   2: 5909878.237 ops/s
# Warmup Iteration   3: 7916769.628 ops/s
# Warmup Iteration   4: 7783471.329 ops/s
# Warmup Iteration   5: 7940907.099 ops/s
# Warmup Iteration   6: 7887458.673 ops/s
# Warmup Iteration   7: 7838514.866 ops/s
# Warmup Iteration   8: 7980142.993 ops/s
# Warmup Iteration   9: 8080081.275 ops/s
# Warmup Iteration  10: 7912941.796 ops/s
# Warmup Iteration  11: 7947146.554 ops/s
# Warmup Iteration  12: 7907491.964 ops/s
# Warmup Iteration  13: 7849296.078 ops/s
# Warmup Iteration  14: 7886494.475 ops/s
# Warmup Iteration  15: 7707730.292 ops/s
# Warmup Iteration  16: 8301574.637 ops/s
# Warmup Iteration  17: 8035653.743 ops/s
# Warmup Iteration  18: 8152863.483 ops/s
# Warmup Iteration  19: 7915697.643 ops/s
# Warmup Iteration  20: 7830466.135 ops/s
# Warmup Iteration  21: 7967643.839 ops/s
# Warmup Iteration  22: 7816160.843 ops/s
# Warmup Iteration  23: 8058321.647 ops/s
# Warmup Iteration  24: 7781166.982 ops/s
# Warmup Iteration  25: 8066465.387 ops/s
# Warmup Iteration  26: 7741414.579 ops/s
# Warmup Iteration  27: 7985777.733 ops/s
# Warmup Iteration  28: 8171720.627 ops/s
# Warmup Iteration  29: 7729610.443 ops/s
# Warmup Iteration  30: 8237899.790 ops/s
Iteration   1: 7720537.622 ops/s
Iteration   2: 8073551.817 ops/s
Iteration   3: 7750443.531 ops/s
Iteration   4: 7847958.046 ops/s
Iteration   5: 7914760.442 ops/s
Iteration   6: 8180246.099 ops/s
Iteration   7: 7746749.279 ops/s
Iteration   8: 7946449.504 ops/s
Iteration   9: 7718847.142 ops/s
Iteration  10: 7782461.145 ops/s
Iteration  11: 8163714.193 ops/s
Iteration  12: 7604048.269 ops/s
Iteration  13: 8061401.945 ops/s
Iteration  14: 7823492.719 ops/s
Iteration  15: 8084629.602 ops/s
Iteration  16: 8144001.781 ops/s
Iteration  17: 7957366.158 ops/s
Iteration  18: 8022814.378 ops/s
Iteration  19: 7807117.953 ops/s
Iteration  20: 7896647.943 ops/s
Iteration  21: 8175463.240 ops/s
Iteration  22: 7754593.091 ops/s
Iteration  23: 8296431.082 ops/s
Iteration  24: 8135036.956 ops/s
Iteration  25: 7797629.489 ops/s
Iteration  26: 7976979.927 ops/s
Iteration  27: 8202274.666 ops/s
Iteration  28: 7832715.359 ops/s
Iteration  29: 8195774.915 ops/s
Iteration  30: 8078026.758 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_mainEmpty":
  7956405.502 ±(99.9%) 123665.454 ops/s [Average]
  (min, avg, max) = (7604048.269, 7956405.502, 8296431.082), stdev = 185096.643
  CI (99.9%): [7832740.048, 8080070.955] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
MaybeFlattenTest._Benchmark.benchmark_mainEmpty  thrpt   30  7956405.502 ± 123665.454  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_mainEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_mainEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2034639.674 ops/s
# Warmup Iteration   2: 6107828.542 ops/s
# Warmup Iteration   3: 7935233.493 ops/s
# Warmup Iteration   4: 7792762.656 ops/s
# Warmup Iteration   5: 8298335.425 ops/s
# Warmup Iteration   6: 7863991.743 ops/s
# Warmup Iteration   7: 8077842.188 ops/s
# Warmup Iteration   8: 8337120.329 ops/s
# Warmup Iteration   9: 8279298.286 ops/s
# Warmup Iteration  10: 8210434.616 ops/s
# Warmup Iteration  11: 8070307.350 ops/s
# Warmup Iteration  12: 8113735.956 ops/s
# Warmup Iteration  13: 7836197.666 ops/s
# Warmup Iteration  14: 7999566.989 ops/s
# Warmup Iteration  15: 8394261.285 ops/s
# Warmup Iteration  16: 7874396.175 ops/s
# Warmup Iteration  17: 8149919.028 ops/s
# Warmup Iteration  18: 6213357.416 ops/s
# Warmup Iteration  19: 7996840.220 ops/s
# Warmup Iteration  20: 8321616.400 ops/s
# Warmup Iteration  21: 7853761.257 ops/s
# Warmup Iteration  22: 8055562.344 ops/s
# Warmup Iteration  23: 8306145.729 ops/s
# Warmup Iteration  24: 7890263.354 ops/s
# Warmup Iteration  25: 8169918.498 ops/s
# Warmup Iteration  26: 7991256.932 ops/s
# Warmup Iteration  27: 7931845.152 ops/s
# Warmup Iteration  28: 8204510.376 ops/s
# Warmup Iteration  29: 7826970.875 ops/s
# Warmup Iteration  30: 8399320.027 ops/s
Iteration   1: 8056538.384 ops/s
Iteration   2: 8320395.140 ops/s
Iteration   3: 7843018.648 ops/s
Iteration   4: 7989352.113 ops/s
Iteration   5: 8317526.455 ops/s
Iteration   6: 8057180.779 ops/s
Iteration   7: 8065442.730 ops/s
Iteration   8: 8305865.708 ops/s
Iteration   9: 8229885.748 ops/s
Iteration  10: 8337130.009 ops/s
Iteration  11: 7861458.958 ops/s
Iteration  12: 8090368.357 ops/s
Iteration  13: 8182934.857 ops/s
Iteration  14: 8033795.548 ops/s
Iteration  15: 7924251.375 ops/s
Iteration  16: 8523092.040 ops/s
Iteration  17: 8416054.948 ops/s
Iteration  18: 7732574.081 ops/s
Iteration  19: 8238278.413 ops/s
Iteration  20: 8074508.550 ops/s
Iteration  21: 8266076.451 ops/s
Iteration  22: 8171760.157 ops/s
Iteration  23: 8152303.655 ops/s
Iteration  24: 8294324.609 ops/s
Iteration  25: 7869242.645 ops/s
Iteration  26: 8107706.186 ops/s
Iteration  27: 8301685.459 ops/s
Iteration  28: 7823711.035 ops/s
Iteration  29: 8220115.610 ops/s
Iteration  30: 8066667.961 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_mainEmpty":
  8129108.220 ±(99.9%) 127796.787 ops/s [Average]
  (min, avg, max) = (7732574.081, 8129108.220, 8523092.040), stdev = 191280.229
  CI (99.9%): [8001311.434, 8256905.007] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
MaybeConcatMapTest._Benchmark.benchmark_mainEmpty  thrpt   30  8129108.220 ± 127796.787  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDetachTest._Benchmark.benchmark_onComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDetachTest._Benchmark.benchmark_onComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3530023.194 ops/s
# Warmup Iteration   2: 6212320.891 ops/s
# Warmup Iteration   3: 8497928.163 ops/s
# Warmup Iteration   4: 7891507.588 ops/s
# Warmup Iteration   5: 8323830.804 ops/s
# Warmup Iteration   6: 8000009.695 ops/s
# Warmup Iteration   7: 8415943.601 ops/s
# Warmup Iteration   8: 8551124.342 ops/s
# Warmup Iteration   9: 8016915.518 ops/s
# Warmup Iteration  10: 8588054.981 ops/s
# Warmup Iteration  11: 8457015.643 ops/s
# Warmup Iteration  12: 8299380.285 ops/s
# Warmup Iteration  13: 8334523.730 ops/s
# Warmup Iteration  14: 8150849.415 ops/s
# Warmup Iteration  15: 8484856.933 ops/s
# Warmup Iteration  16: 8301465.555 ops/s
# Warmup Iteration  17: 8366781.070 ops/s
# Warmup Iteration  18: 8404886.104 ops/s
# Warmup Iteration  19: 8487288.288 ops/s
# Warmup Iteration  20: 8498079.178 ops/s
# Warmup Iteration  21: 8138285.375 ops/s
# Warmup Iteration  22: 8263604.552 ops/s
# Warmup Iteration  23: 8460204.426 ops/s
# Warmup Iteration  24: 8225725.502 ops/s
# Warmup Iteration  25: 8521400.026 ops/s
# Warmup Iteration  26: 8322065.477 ops/s
# Warmup Iteration  27: 8023448.338 ops/s
# Warmup Iteration  28: 8690111.346 ops/s
# Warmup Iteration  29: 8143391.953 ops/s
# Warmup Iteration  30: 8539257.716 ops/s
Iteration   1: 8141817.348 ops/s
Iteration   2: 8242485.524 ops/s
Iteration   3: 8514685.649 ops/s
Iteration   4: 8355474.560 ops/s
Iteration   5: 8576250.071 ops/s
Iteration   6: 8519345.994 ops/s
Iteration   7: 8231391.308 ops/s
Iteration   8: 8211097.907 ops/s
Iteration   9: 8786562.974 ops/s
Iteration  10: 8183911.089 ops/s
Iteration  11: 8448923.009 ops/s
Iteration  12: 8634759.472 ops/s
Iteration  13: 8014495.309 ops/s
Iteration  14: 8655164.889 ops/s
Iteration  15: 8158646.417 ops/s
Iteration  16: 8440434.374 ops/s
Iteration  17: 8328180.751 ops/s
Iteration  18: 8386793.813 ops/s
Iteration  19: 8413755.711 ops/s
Iteration  20: 8575695.099 ops/s
Iteration  21: 8558159.335 ops/s
Iteration  22: 8129506.379 ops/s
Iteration  23: 8502333.213 ops/s
Iteration  24: 8365914.600 ops/s
Iteration  25: 8644025.527 ops/s
Iteration  26: 8137635.735 ops/s
Iteration  27: 8428487.099 ops/s
Iteration  28: 8202925.792 ops/s
Iteration  29: 8088504.196 ops/s
Iteration  30: 8272213.444 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDetachTest._Benchmark.benchmark_onComplete":
  8371652.553 ±(99.9%) 132857.562 ops/s [Average]
  (min, avg, max) = (8014495.309, 8371652.553, 8786562.974), stdev = 198854.959
  CI (99.9%): [8238794.991, 8504510.115] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
MaybeDetachTest._Benchmark.benchmark_onComplete  thrpt   30  8371652.553 ± 132857.562  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 47922.823 ops/s
# Warmup Iteration   2: 369895.317 ops/s
# Warmup Iteration   3: 438986.013 ops/s
# Warmup Iteration   4: 453831.610 ops/s
# Warmup Iteration   5: 432099.966 ops/s
# Warmup Iteration   6: 440698.780 ops/s
# Warmup Iteration   7: 463703.401 ops/s
# Warmup Iteration   8: 424254.454 ops/s
# Warmup Iteration   9: 478786.930 ops/s
# Warmup Iteration  10: 457477.861 ops/s
# Warmup Iteration  11: 475922.610 ops/s
# Warmup Iteration  12: 454978.876 ops/s
# Warmup Iteration  13: 357845.053 ops/s
# Warmup Iteration  14: 452880.617 ops/s
# Warmup Iteration  15: 488701.164 ops/s
# Warmup Iteration  16: 476539.616 ops/s
# Warmup Iteration  17: 486104.167 ops/s
# Warmup Iteration  18: 487320.747 ops/s
# Warmup Iteration  19: 472497.304 ops/s
# Warmup Iteration  20: 510525.763 ops/s
# Warmup Iteration  21: 490486.194 ops/s
# Warmup Iteration  22: 469965.052 ops/s
# Warmup Iteration  23: 502600.066 ops/s
# Warmup Iteration  24: 484651.088 ops/s
# Warmup Iteration  25: 497525.301 ops/s
# Warmup Iteration  26: 486677.604 ops/s
# Warmup Iteration  27: 484398.483 ops/s
# Warmup Iteration  28: 494123.011 ops/s
# Warmup Iteration  29: 488271.433 ops/s
# Warmup Iteration  30: 478169.039 ops/s
Iteration   1: 499237.026 ops/s
Iteration   2: 473292.881 ops/s
Iteration   3: 504664.388 ops/s
Iteration   4: 477701.841 ops/s
Iteration   5: 494739.656 ops/s
Iteration   6: 484568.203 ops/s
Iteration   7: 485346.382 ops/s
Iteration   8: 490113.514 ops/s
Iteration   9: 466201.058 ops/s
Iteration  10: 501037.840 ops/s
Iteration  11: 472984.959 ops/s
Iteration  12: 486889.917 ops/s
Iteration  13: 487833.295 ops/s
Iteration  14: 482947.869 ops/s
Iteration  15: 461634.482 ops/s
Iteration  16: 493789.449 ops/s
Iteration  17: 481132.271 ops/s
Iteration  18: 462870.829 ops/s
Iteration  19: 505541.230 ops/s
Iteration  20: 479760.296 ops/s
Iteration  21: 491715.239 ops/s
Iteration  22: 485715.498 ops/s
Iteration  23: 499459.198 ops/s
Iteration  24: 495536.004 ops/s
Iteration  25: 474264.543 ops/s
Iteration  26: 501126.678 ops/s
Iteration  27: 464637.975 ops/s
Iteration  28: 492774.519 ops/s
Iteration  29: 502748.363 ops/s
Iteration  30: 473978.797 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_doubleOnSubscribe":
  485808.140 ±(99.9%) 8668.610 ops/s [Average]
  (min, avg, max) = (461634.482, 485808.140, 505541.230), stdev = 12974.769
  CI (99.9%): [477139.530, 494476.750] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  485808.140 ± 8668.610  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31298.901 ops/s
# Warmup Iteration   2: 150982.094 ops/s
# Warmup Iteration   3: 192254.685 ops/s
# Warmup Iteration   4: 200160.934 ops/s
# Warmup Iteration   5: 201494.583 ops/s
# Warmup Iteration   6: 201235.935 ops/s
# Warmup Iteration   7: 199289.386 ops/s
# Warmup Iteration   8: 200932.669 ops/s
# Warmup Iteration   9: 195743.476 ops/s
# Warmup Iteration  10: 191652.460 ops/s
# Warmup Iteration  11: 209581.445 ops/s
# Warmup Iteration  12: 206470.090 ops/s
# Warmup Iteration  13: 196061.840 ops/s
# Warmup Iteration  14: 200766.120 ops/s
# Warmup Iteration  15: 208297.654 ops/s
# Warmup Iteration  16: 202118.444 ops/s
# Warmup Iteration  17: 215521.599 ops/s
# Warmup Iteration  18: 205533.360 ops/s
# Warmup Iteration  19: 215522.682 ops/s
# Warmup Iteration  20: 219307.326 ops/s
# Warmup Iteration  21: 206205.055 ops/s
# Warmup Iteration  22: 215169.299 ops/s
# Warmup Iteration  23: 211563.324 ops/s
# Warmup Iteration  24: 208680.849 ops/s
# Warmup Iteration  25: 217305.224 ops/s
# Warmup Iteration  26: 204712.673 ops/s
# Warmup Iteration  27: 217334.788 ops/s
# Warmup Iteration  28: 223329.960 ops/s
# Warmup Iteration  29: 197761.721 ops/s
# Warmup Iteration  30: 221395.012 ops/s
Iteration   1: 209295.962 ops/s
Iteration   2: 210271.704 ops/s
Iteration   3: 219102.226 ops/s
Iteration   4: 218052.226 ops/s
Iteration   5: 201948.946 ops/s
Iteration   6: 215088.487 ops/s
Iteration   7: 217759.873 ops/s
Iteration   8: 205898.259 ops/s
Iteration   9: 222100.618 ops/s
Iteration  10: 203430.941 ops/s
Iteration  11: 220314.426 ops/s
Iteration  12: 205086.114 ops/s
Iteration  13: 210823.270 ops/s
Iteration  14: 215205.554 ops/s
Iteration  15: 212177.697 ops/s
Iteration  16: 211893.435 ops/s
Iteration  17: 217807.646 ops/s
Iteration  18: 207287.880 ops/s
Iteration  19: 213934.000 ops/s
Iteration  20: 207546.363 ops/s
Iteration  21: 219000.589 ops/s
Iteration  22: 208515.745 ops/s
Iteration  23: 210835.517 ops/s
Iteration  24: 218331.827 ops/s
Iteration  25: 213986.145 ops/s
Iteration  26: 207177.006 ops/s
Iteration  27: 210576.488 ops/s
Iteration  28: 212680.971 ops/s
Iteration  29: 213479.701 ops/s
Iteration  30: 212431.666 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_undeliverableUponCancel":
  212401.376 ±(99.9%) 3491.002 ops/s [Average]
  (min, avg, max) = (201948.946, 212401.376, 222100.618), stdev = 5225.168
  CI (99.9%): [208910.374, 215892.378] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  212401.376 ± 3491.002  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60692.153 ops/s
# Warmup Iteration   2: 1591554.139 ops/s
# Warmup Iteration   3: 2357566.479 ops/s
# Warmup Iteration   4: 2858421.519 ops/s
# Warmup Iteration   5: 2697079.264 ops/s
# Warmup Iteration   6: 2765668.979 ops/s
# Warmup Iteration   7: 2336107.579 ops/s
# Warmup Iteration   8: 2695982.544 ops/s
# Warmup Iteration   9: 2841108.065 ops/s
# Warmup Iteration  10: 2538111.112 ops/s
# Warmup Iteration  11: 2691281.580 ops/s
# Warmup Iteration  12: 2972185.591 ops/s
# Warmup Iteration  13: 2814216.877 ops/s
# Warmup Iteration  14: 2803374.290 ops/s
# Warmup Iteration  15: 2919502.418 ops/s
# Warmup Iteration  16: 2751942.332 ops/s
# Warmup Iteration  17: 2934052.347 ops/s
# Warmup Iteration  18: 2793747.055 ops/s
# Warmup Iteration  19: 2768022.780 ops/s
# Warmup Iteration  20: 2896871.334 ops/s
# Warmup Iteration  21: 2758239.177 ops/s
# Warmup Iteration  22: 2836481.620 ops/s
# Warmup Iteration  23: 2828005.375 ops/s
# Warmup Iteration  24: 2770531.499 ops/s
# Warmup Iteration  25: 2822863.578 ops/s
# Warmup Iteration  26: 2897949.074 ops/s
# Warmup Iteration  27: 2788321.751 ops/s
# Warmup Iteration  28: 2809714.309 ops/s
# Warmup Iteration  29: 2863926.397 ops/s
# Warmup Iteration  30: 2776828.420 ops/s
Iteration   1: 2876329.707 ops/s
Iteration   2: 2774039.368 ops/s
Iteration   3: 2830253.694 ops/s
Iteration   4: 2928112.310 ops/s
Iteration   5: 2740481.301 ops/s
Iteration   6: 2888873.537 ops/s
Iteration   7: 2734655.140 ops/s
Iteration   8: 2852426.287 ops/s
Iteration   9: 2873590.893 ops/s
Iteration  10: 2858095.773 ops/s
Iteration  11: 2771651.634 ops/s
Iteration  12: 2962636.379 ops/s
Iteration  13: 2756571.227 ops/s
Iteration  14: 2737379.639 ops/s
Iteration  15: 2853573.490 ops/s
Iteration  16: 2740025.555 ops/s
Iteration  17: 2991089.788 ops/s
Iteration  18: 2703765.982 ops/s
Iteration  19: 2838053.224 ops/s
Iteration  20: 2865647.788 ops/s
Iteration  21: 2816838.351 ops/s
Iteration  22: 2843397.586 ops/s
Iteration  23: 2787451.174 ops/s
Iteration  24: 2885161.308 ops/s
Iteration  25: 2783083.722 ops/s
Iteration  26: 2893046.721 ops/s
Iteration  27: 2745931.810 ops/s
Iteration  28: 2870840.580 ops/s
Iteration  29: 2822547.239 ops/s
Iteration  30: 2790969.421 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscription":
  2827217.354 ±(99.9%) 47562.532 ops/s [Average]
  (min, avg, max) = (2703765.982, 2827217.354, 2991089.788), stdev = 71189.364
  CI (99.9%): [2779654.823, 2874779.886] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscription  thrpt   30  2827217.354 ± 47562.532  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2350686.843 ops/s
# Warmup Iteration   2: 6306107.643 ops/s
# Warmup Iteration   3: 8584995.354 ops/s
# Warmup Iteration   4: 8212070.411 ops/s
# Warmup Iteration   5: 8687095.372 ops/s
# Warmup Iteration   6: 8255070.230 ops/s
# Warmup Iteration   7: 8434660.116 ops/s
# Warmup Iteration   8: 8730174.684 ops/s
# Warmup Iteration   9: 8252430.037 ops/s
# Warmup Iteration  10: 8621520.230 ops/s
# Warmup Iteration  11: 8051488.928 ops/s
# Warmup Iteration  12: 8564126.952 ops/s
# Warmup Iteration  13: 8616501.342 ops/s
# Warmup Iteration  14: 8464235.867 ops/s
# Warmup Iteration  15: 8640532.509 ops/s
# Warmup Iteration  16: 8386824.279 ops/s
# Warmup Iteration  17: 8572132.312 ops/s
# Warmup Iteration  18: 8473284.859 ops/s
# Warmup Iteration  19: 8527173.329 ops/s
# Warmup Iteration  20: 8471757.678 ops/s
# Warmup Iteration  21: 8374742.673 ops/s
# Warmup Iteration  22: 8520534.107 ops/s
# Warmup Iteration  23: 8460050.459 ops/s
# Warmup Iteration  24: 8370130.924 ops/s
# Warmup Iteration  25: 8562743.285 ops/s
# Warmup Iteration  26: 8271529.118 ops/s
# Warmup Iteration  27: 8470472.537 ops/s
# Warmup Iteration  28: 8177076.585 ops/s
# Warmup Iteration  29: 8436698.737 ops/s
# Warmup Iteration  30: 8715352.237 ops/s
Iteration   1: 8197250.560 ops/s
Iteration   2: 8544592.116 ops/s
Iteration   3: 8167123.828 ops/s
Iteration   4: 8230056.979 ops/s
Iteration   5: 8514965.317 ops/s
Iteration   6: 8512408.228 ops/s
Iteration   7: 8614441.637 ops/s
Iteration   8: 8219933.877 ops/s
Iteration   9: 8322389.013 ops/s
Iteration  10: 8563171.014 ops/s
Iteration  11: 8309598.749 ops/s
Iteration  12: 8752921.354 ops/s
Iteration  13: 8419405.952 ops/s
Iteration  14: 8157695.202 ops/s
Iteration  15: 8351637.282 ops/s
Iteration  16: 8669691.827 ops/s
Iteration  17: 8121079.954 ops/s
Iteration  18: 8531772.187 ops/s
Iteration  19: 8254424.487 ops/s
Iteration  20: 8289403.497 ops/s
Iteration  21: 8423955.528 ops/s
Iteration  22: 8425199.410 ops/s
Iteration  23: 8761910.946 ops/s
Iteration  24: 8303004.262 ops/s
Iteration  25: 8366850.695 ops/s
Iteration  26: 8247550.680 ops/s
Iteration  27: 8634816.892 ops/s
Iteration  28: 8585109.615 ops/s
Iteration  29: 8209640.072 ops/s
Iteration  30: 8439487.279 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_empty":
  8404716.281 ±(99.9%) 122188.819 ops/s [Average]
  (min, avg, max) = (8121079.954, 8404716.281, 8761910.946), stdev = 182886.486
  CI (99.9%): [8282527.463, 8526905.100] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score        Error  Units
MaybeDoAfterSuccessTest._Benchmark.benchmark_empty  thrpt   30  8404716.281 ± 122188.819  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatArrayDelayErrorWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatArrayDelayErrorWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35280.239 ops/s
# Warmup Iteration   2: 95825.664 ops/s
# Warmup Iteration   3: 97472.479 ops/s
# Warmup Iteration   4: 378070.633 ops/s
# Warmup Iteration   5: 388087.879 ops/s
# Warmup Iteration   6: 393362.097 ops/s
# Warmup Iteration   7: 378198.264 ops/s
# Warmup Iteration   8: 417017.726 ops/s
# Warmup Iteration   9: 425960.957 ops/s
# Warmup Iteration  10: 407007.587 ops/s
# Warmup Iteration  11: 406741.659 ops/s
# Warmup Iteration  12: 410214.638 ops/s
# Warmup Iteration  13: 417566.664 ops/s
# Warmup Iteration  14: 434110.080 ops/s
# Warmup Iteration  15: 408020.114 ops/s
# Warmup Iteration  16: 424955.273 ops/s
# Warmup Iteration  17: 424750.296 ops/s
# Warmup Iteration  18: 422608.563 ops/s
# Warmup Iteration  19: 442043.729 ops/s
# Warmup Iteration  20: 421983.784 ops/s
# Warmup Iteration  21: 437167.168 ops/s
# Warmup Iteration  22: 445037.561 ops/s
# Warmup Iteration  23: 421020.598 ops/s
# Warmup Iteration  24: 434944.590 ops/s
# Warmup Iteration  25: 424244.238 ops/s
# Warmup Iteration  26: 429484.409 ops/s
# Warmup Iteration  27: 432579.335 ops/s
# Warmup Iteration  28: 428158.326 ops/s
# Warmup Iteration  29: 421936.993 ops/s
# Warmup Iteration  30: 423346.464 ops/s
Iteration   1: 445037.477 ops/s
Iteration   2: 424131.911 ops/s
Iteration   3: 444987.850 ops/s
Iteration   4: 422061.116 ops/s
Iteration   5: 428822.945 ops/s
Iteration   6: 434364.292 ops/s
Iteration   7: 438361.713 ops/s
Iteration   8: 423631.250 ops/s
Iteration   9: 450753.516 ops/s
Iteration  10: 413422.820 ops/s
Iteration  11: 431367.455 ops/s
Iteration  12: 421424.673 ops/s
Iteration  13: 432584.996 ops/s
Iteration  14: 443918.041 ops/s
Iteration  15: 444049.450 ops/s
Iteration  16: 410309.078 ops/s
Iteration  17: 416975.930 ops/s
Iteration  18: 445598.508 ops/s
Iteration  19: 428877.237 ops/s
Iteration  20: 431759.024 ops/s
Iteration  21: 426848.612 ops/s
Iteration  22: 442833.537 ops/s
Iteration  23: 436197.681 ops/s
Iteration  24: 426053.183 ops/s
Iteration  25: 437619.581 ops/s
Iteration  26: 420261.700 ops/s
Iteration  27: 448741.432 ops/s
Iteration  28: 423926.356 ops/s
Iteration  29: 424357.545 ops/s
Iteration  30: 432095.002 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatArrayDelayErrorWithError":
  431712.464 ±(99.9%) 7213.691 ops/s [Average]
  (min, avg, max) = (410309.078, 431712.464, 450753.516), stdev = 10797.113
  CI (99.9%): [424498.773, 438926.154] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableConcatTest._Benchmark.benchmark_concatArrayDelayErrorWithError  thrpt   30  431712.464 ± 7213.691  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2469229.394 ops/s
# Warmup Iteration   2: 4415591.477 ops/s
# Warmup Iteration   3: 6528750.018 ops/s
# Warmup Iteration   4: 6258122.040 ops/s
# Warmup Iteration   5: 6537574.323 ops/s
# Warmup Iteration   6: 6365505.729 ops/s
# Warmup Iteration   7: 6257230.088 ops/s
# Warmup Iteration   8: 6639595.318 ops/s
# Warmup Iteration   9: 6204526.304 ops/s
# Warmup Iteration  10: 6494097.064 ops/s
# Warmup Iteration  11: 6146414.048 ops/s
# Warmup Iteration  12: 6481880.370 ops/s
# Warmup Iteration  13: 6523586.218 ops/s
# Warmup Iteration  14: 6115699.326 ops/s
# Warmup Iteration  15: 6603719.823 ops/s
# Warmup Iteration  16: 6329596.555 ops/s
# Warmup Iteration  17: 6419445.415 ops/s
# Warmup Iteration  18: 6533086.658 ops/s
# Warmup Iteration  19: 6398248.701 ops/s
# Warmup Iteration  20: 6454385.874 ops/s
# Warmup Iteration  21: 6262629.537 ops/s
# Warmup Iteration  22: 6487928.134 ops/s
# Warmup Iteration  23: 6602551.690 ops/s
# Warmup Iteration  24: 6190829.403 ops/s
# Warmup Iteration  25: 6589894.091 ops/s
# Warmup Iteration  26: 6550148.456 ops/s
# Warmup Iteration  27: 6210970.070 ops/s
# Warmup Iteration  28: 6535750.156 ops/s
# Warmup Iteration  29: 6199227.425 ops/s
# Warmup Iteration  30: 6491447.837 ops/s
Iteration   1: 6325287.422 ops/s
Iteration   2: 6340229.410 ops/s
Iteration   3: 6605595.914 ops/s
Iteration   4: 6350898.524 ops/s
Iteration   5: 6385050.577 ops/s
Iteration   6: 6614652.256 ops/s
Iteration   7: 6266067.360 ops/s
Iteration   8: 6507636.000 ops/s
Iteration   9: 6439263.668 ops/s
Iteration  10: 6514363.864 ops/s
Iteration  11: 6190046.020 ops/s
Iteration  12: 6707715.735 ops/s
Iteration  13: 6443215.700 ops/s
Iteration  14: 6452487.220 ops/s
Iteration  15: 6097816.017 ops/s
Iteration  16: 6586235.313 ops/s
Iteration  17: 6301320.248 ops/s
Iteration  18: 6271930.377 ops/s
Iteration  19: 6458260.897 ops/s
Iteration  20: 6451377.056 ops/s
Iteration  21: 6421190.814 ops/s
Iteration  22: 6591456.334 ops/s
Iteration  23: 6250163.550 ops/s
Iteration  24: 6532004.337 ops/s
Iteration  25: 6366176.124 ops/s
Iteration  26: 6554335.488 ops/s
Iteration  27: 6587043.656 ops/s
Iteration  28: 6251433.563 ops/s
Iteration  29: 5223088.536 ops/s
Iteration  30: 6551221.018 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_empty":
  6387918.767 ±(99.9%) 175825.472 ops/s [Average]
  (min, avg, max) = (5223088.536, 6387918.767, 6707715.735), stdev = 263167.310
  CI (99.9%): [6212093.294, 6563744.239] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score        Error  Units
MaybeCountTest._Benchmark.benchmark_empty  thrpt   30  6387918.767 ± 175825.472  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2068626.438 ops/s
# Warmup Iteration   2: 5935777.378 ops/s
# Warmup Iteration   3: 7851844.315 ops/s
# Warmup Iteration   4: 8077726.290 ops/s
# Warmup Iteration   5: 7901662.266 ops/s
# Warmup Iteration   6: 7746700.400 ops/s
# Warmup Iteration   7: 8141728.815 ops/s
# Warmup Iteration   8: 7794940.250 ops/s
# Warmup Iteration   9: 8153710.538 ops/s
# Warmup Iteration  10: 7874554.686 ops/s
# Warmup Iteration  11: 7736837.819 ops/s
# Warmup Iteration  12: 8249109.517 ops/s
# Warmup Iteration  13: 7856923.877 ops/s
# Warmup Iteration  14: 8016278.354 ops/s
# Warmup Iteration  15: 7886071.266 ops/s
# Warmup Iteration  16: 7988839.091 ops/s
# Warmup Iteration  17: 8173100.550 ops/s
# Warmup Iteration  18: 7998355.752 ops/s
# Warmup Iteration  19: 8164506.352 ops/s
# Warmup Iteration  20: 8011729.746 ops/s
# Warmup Iteration  21: 8152786.802 ops/s
# Warmup Iteration  22: 8051065.945 ops/s
# Warmup Iteration  23: 8071967.381 ops/s
# Warmup Iteration  24: 8193860.717 ops/s
# Warmup Iteration  25: 8058804.681 ops/s
# Warmup Iteration  26: 8005986.955 ops/s
# Warmup Iteration  27: 8134062.145 ops/s
# Warmup Iteration  28: 7822734.185 ops/s
# Warmup Iteration  29: 8268748.987 ops/s
# Warmup Iteration  30: 8205175.956 ops/s
Iteration   1: 8045503.486 ops/s
Iteration   2: 8155855.517 ops/s
Iteration   3: 7831082.527 ops/s
Iteration   4: 7901640.903 ops/s
Iteration   5: 8183334.476 ops/s
Iteration   6: 7872008.204 ops/s
Iteration   7: 7951516.923 ops/s
Iteration   8: 7876725.495 ops/s
Iteration   9: 8298780.389 ops/s
Iteration  10: 8088501.767 ops/s
Iteration  11: 7871375.020 ops/s
Iteration  12: 8173831.488 ops/s
Iteration  13: 7833204.081 ops/s
Iteration  14: 8279241.709 ops/s
Iteration  15: 8097477.992 ops/s
Iteration  16: 7731908.846 ops/s
Iteration  17: 8277109.892 ops/s
Iteration  18: 7827541.232 ops/s
Iteration  19: 8090579.163 ops/s
Iteration  20: 8037504.220 ops/s
Iteration  21: 8320028.800 ops/s
Iteration  22: 8378791.317 ops/s
Iteration  23: 7752205.790 ops/s
Iteration  24: 8181056.112 ops/s
Iteration  25: 8218671.962 ops/s
Iteration  26: 7752955.718 ops/s
Iteration  27: 8143465.148 ops/s
Iteration  28: 7930916.883 ops/s
Iteration  29: 7874874.370 ops/s
Iteration  30: 8429555.088 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateComplete":
  8046908.151 ±(99.9%) 135210.788 ops/s [Average]
  (min, avg, max) = (7731908.846, 8046908.151, 8429555.088), stdev = 202377.158
  CI (99.9%): [7911697.362, 8182118.939] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateComplete  thrpt   30  8046908.151 ± 135210.788  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 932717.854 ops/s
# Warmup Iteration   2: 4885031.577 ops/s
# Warmup Iteration   3: 5629983.212 ops/s
# Warmup Iteration   4: 6436497.870 ops/s
# Warmup Iteration   5: 6646741.618 ops/s
# Warmup Iteration   6: 6350103.747 ops/s
# Warmup Iteration   7: 6542189.068 ops/s
# Warmup Iteration   8: 6579788.050 ops/s
# Warmup Iteration   9: 6379652.820 ops/s
# Warmup Iteration  10: 6666388.642 ops/s
# Warmup Iteration  11: 6359371.428 ops/s
# Warmup Iteration  12: 6662447.361 ops/s
# Warmup Iteration  13: 6620931.756 ops/s
# Warmup Iteration  14: 6562499.060 ops/s
# Warmup Iteration  15: 6563618.950 ops/s
# Warmup Iteration  16: 6480946.858 ops/s
# Warmup Iteration  17: 6323137.498 ops/s
# Warmup Iteration  18: 6760627.245 ops/s
# Warmup Iteration  19: 6324711.786 ops/s
# Warmup Iteration  20: 6746854.273 ops/s
# Warmup Iteration  21: 6339358.486 ops/s
# Warmup Iteration  22: 6466307.974 ops/s
# Warmup Iteration  23: 6633893.067 ops/s
# Warmup Iteration  24: 6395477.212 ops/s
# Warmup Iteration  25: 6449905.560 ops/s
# Warmup Iteration  26: 6633738.390 ops/s
# Warmup Iteration  27: 6386698.056 ops/s
# Warmup Iteration  28: 6730850.367 ops/s
# Warmup Iteration  29: 6410876.745 ops/s
# Warmup Iteration  30: 6490432.354 ops/s
Iteration   1: 6515183.144 ops/s
Iteration   2: 6469770.596 ops/s
Iteration   3: 6733868.235 ops/s
Iteration   4: 6637658.629 ops/s
Iteration   5: 6394015.700 ops/s
Iteration   6: 6646711.202 ops/s
Iteration   7: 6529029.032 ops/s
Iteration   8: 6629298.961 ops/s
Iteration   9: 6365116.901 ops/s
Iteration  10: 6565240.375 ops/s
Iteration  11: 6515369.777 ops/s
Iteration  12: 6427837.299 ops/s
Iteration  13: 6840988.093 ops/s
Iteration  14: 6374059.435 ops/s
Iteration  15: 6340383.025 ops/s
Iteration  16: 6522141.658 ops/s
Iteration  17: 6732572.906 ops/s
Iteration  18: 6293131.952 ops/s
Iteration  19: 6509290.174 ops/s
Iteration  20: 6558271.843 ops/s
Iteration  21: 6687082.604 ops/s
Iteration  22: 6388409.197 ops/s
Iteration  23: 4919107.516 ops/s
Iteration  24: 6429352.050 ops/s
Iteration  25: 6253673.952 ops/s
Iteration  26: 6609103.310 ops/s
Iteration  27: 6241664.114 ops/s
Iteration  28: 6527320.509 ops/s
Iteration  29: 6576647.705 ops/s
Iteration  30: 6328372.262 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_empty":
  6452022.405 ±(99.9%) 217361.532 ops/s [Average]
  (min, avg, max) = (4919107.516, 6452022.405, 6840988.093), stdev = 325336.533
  CI (99.9%): [6234660.873, 6669383.937] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
MaybeMaterializeTest._Benchmark.benchmark_empty  thrpt   30  6452022.405 ± 217361.532  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2060585.347 ops/s
# Warmup Iteration   2: 4890034.497 ops/s
# Warmup Iteration   3: 7204994.155 ops/s
# Warmup Iteration   4: 7137965.119 ops/s
# Warmup Iteration   5: 7183008.671 ops/s
# Warmup Iteration   6: 7077513.267 ops/s
# Warmup Iteration   7: 6954925.157 ops/s
# Warmup Iteration   8: 7334086.399 ops/s
# Warmup Iteration   9: 7027641.202 ops/s
# Warmup Iteration  10: 6978457.487 ops/s
# Warmup Iteration  11: 7247361.374 ops/s
# Warmup Iteration  12: 6740652.115 ops/s
# Warmup Iteration  13: 6999208.726 ops/s
# Warmup Iteration  14: 7160829.353 ops/s
# Warmup Iteration  15: 6935239.941 ops/s
# Warmup Iteration  16: 7188607.358 ops/s
# Warmup Iteration  17: 7013299.149 ops/s
# Warmup Iteration  18: 7109507.176 ops/s
# Warmup Iteration  19: 7067625.941 ops/s
# Warmup Iteration  20: 7126947.788 ops/s
# Warmup Iteration  21: 7057661.781 ops/s
# Warmup Iteration  22: 7081702.598 ops/s
# Warmup Iteration  23: 7182853.602 ops/s
# Warmup Iteration  24: 6891374.015 ops/s
# Warmup Iteration  25: 7338343.463 ops/s
# Warmup Iteration  26: 7047962.873 ops/s
# Warmup Iteration  27: 6969353.648 ops/s
# Warmup Iteration  28: 7198956.850 ops/s
# Warmup Iteration  29: 7123064.445 ops/s
# Warmup Iteration  30: 6998758.990 ops/s
Iteration   1: 7423460.910 ops/s
Iteration   2: 6894132.526 ops/s
Iteration   3: 7201304.588 ops/s
Iteration   4: 6805669.202 ops/s
Iteration   5: 7125352.198 ops/s
Iteration   6: 7215637.367 ops/s
Iteration   7: 7183308.217 ops/s
Iteration   8: 6957867.465 ops/s
Iteration   9: 7059676.331 ops/s
Iteration  10: 7195967.866 ops/s
Iteration  11: 7199933.419 ops/s
Iteration  12: 6800822.096 ops/s
Iteration  13: 7262551.551 ops/s
Iteration  14: 7028940.010 ops/s
Iteration  15: 7149724.583 ops/s
Iteration  16: 7042099.137 ops/s
Iteration  17: 7031798.272 ops/s
Iteration  18: 7165481.800 ops/s
Iteration  19: 7060679.073 ops/s
Iteration  20: 7396807.369 ops/s
Iteration  21: 6954824.628 ops/s
Iteration  22: 7385473.639 ops/s
Iteration  23: 6943188.272 ops/s
Iteration  24: 7198355.507 ops/s
Iteration  25: 6811188.025 ops/s
Iteration  26: 7209139.739 ops/s
Iteration  27: 6862619.652 ops/s
Iteration  28: 7015256.936 ops/s
Iteration  29: 7304057.070 ops/s
Iteration  30: 7007281.783 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_empty":
  7096419.974 ±(99.9%) 116172.358 ops/s [Average]
  (min, avg, max) = (6800822.096, 7096419.974, 7423460.910), stdev = 173881.330
  CI (99.9%): [6980247.616, 7212592.333] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score        Error  Units
MaybeContainsTest._Benchmark.benchmark_empty  thrpt   30  7096419.974 ± 116172.358  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_emptyToMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_emptyToMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1640538.445 ops/s
# Warmup Iteration   2: 4779144.880 ops/s
# Warmup Iteration   3: 7062647.292 ops/s
# Warmup Iteration   4: 7105683.748 ops/s
# Warmup Iteration   5: 6690884.005 ops/s
# Warmup Iteration   6: 6777751.523 ops/s
# Warmup Iteration   7: 7019804.513 ops/s
# Warmup Iteration   8: 6978201.528 ops/s
# Warmup Iteration   9: 6661587.373 ops/s
# Warmup Iteration  10: 6819280.792 ops/s
# Warmup Iteration  11: 6897008.499 ops/s
# Warmup Iteration  12: 6758916.797 ops/s
# Warmup Iteration  13: 6716885.158 ops/s
# Warmup Iteration  14: 6983707.997 ops/s
# Warmup Iteration  15: 6693406.988 ops/s
# Warmup Iteration  16: 7017696.795 ops/s
# Warmup Iteration  17: 6739398.319 ops/s
# Warmup Iteration  18: 6834055.666 ops/s
# Warmup Iteration  19: 7153650.250 ops/s
# Warmup Iteration  20: 6740388.618 ops/s
# Warmup Iteration  21: 6973815.986 ops/s
# Warmup Iteration  22: 6661889.896 ops/s
# Warmup Iteration  23: 6819154.500 ops/s
# Warmup Iteration  24: 6905207.044 ops/s
# Warmup Iteration  25: 7112823.304 ops/s
# Warmup Iteration  26: 6834302.049 ops/s
# Warmup Iteration  27: 6666383.404 ops/s
# Warmup Iteration  28: 6874828.492 ops/s
# Warmup Iteration  29: 6563296.745 ops/s
# Warmup Iteration  30: 7009893.094 ops/s
Iteration   1: 7093806.919 ops/s
Iteration   2: 6572851.207 ops/s
Iteration   3: 7103934.294 ops/s
Iteration   4: 6779843.911 ops/s
Iteration   5: 6954769.120 ops/s
Iteration   6: 6990430.003 ops/s
Iteration   7: 6723040.349 ops/s
Iteration   8: 6854428.720 ops/s
Iteration   9: 6888109.400 ops/s
Iteration  10: 6775834.038 ops/s
Iteration  11: 6844674.158 ops/s
Iteration  12: 6693747.795 ops/s
Iteration  13: 7091153.529 ops/s
Iteration  14: 6936466.365 ops/s
Iteration  15: 6758602.110 ops/s
Iteration  16: 6797205.026 ops/s
Iteration  17: 6165273.253 ops/s
Iteration  18: 6127717.010 ops/s
Iteration  19: 6748970.682 ops/s
Iteration  20: 6859075.495 ops/s
Iteration  21: 7126441.747 ops/s
Iteration  22: 6756863.907 ops/s
Iteration  23: 7110006.741 ops/s
Iteration  24: 6575156.686 ops/s
Iteration  25: 6979663.589 ops/s
Iteration  26: 6874190.377 ops/s
Iteration  27: 6598592.665 ops/s
Iteration  28: 7143970.822 ops/s
Iteration  29: 6921695.918 ops/s
Iteration  30: 6787771.465 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_emptyToMaybe":
  6821142.910 ±(99.9%) 163690.440 ops/s [Average]
  (min, avg, max) = (6127717.010, 6821142.910, 7143970.822), stdev = 245004.164
  CI (99.9%): [6657452.470, 6984833.351] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score        Error  Units
MaybeIsEmptyTest._Benchmark.benchmark_emptyToMaybe  thrpt   30  6821142.910 ± 163690.440  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 907961.702 ops/s
# Warmup Iteration   2: 5140616.193 ops/s
# Warmup Iteration   3: 5541497.505 ops/s
# Warmup Iteration   4: 6405338.010 ops/s
# Warmup Iteration   5: 6690197.451 ops/s
# Warmup Iteration   6: 6555795.148 ops/s
# Warmup Iteration   7: 6243570.007 ops/s
# Warmup Iteration   8: 6583491.329 ops/s
# Warmup Iteration   9: 6363465.008 ops/s
# Warmup Iteration  10: 6516963.381 ops/s
# Warmup Iteration  11: 6678653.829 ops/s
# Warmup Iteration  12: 6667712.629 ops/s
# Warmup Iteration  13: 6381498.861 ops/s
# Warmup Iteration  14: 6426725.329 ops/s
# Warmup Iteration  15: 6533312.569 ops/s
# Warmup Iteration  16: 6365308.675 ops/s
# Warmup Iteration  17: 6483085.403 ops/s
# Warmup Iteration  18: 6717946.259 ops/s
# Warmup Iteration  19: 6492789.107 ops/s
# Warmup Iteration  20: 6694340.773 ops/s
# Warmup Iteration  21: 6713593.099 ops/s
# Warmup Iteration  22: 6251822.222 ops/s
# Warmup Iteration  23: 6750346.048 ops/s
# Warmup Iteration  24: 6515464.282 ops/s
# Warmup Iteration  25: 6466150.554 ops/s
# Warmup Iteration  26: 6604306.912 ops/s
# Warmup Iteration  27: 6657088.375 ops/s
# Warmup Iteration  28: 6338638.591 ops/s
# Warmup Iteration  29: 6647838.443 ops/s
# Warmup Iteration  30: 6605665.920 ops/s
Iteration   1: 6445488.213 ops/s
Iteration   2: 6715886.373 ops/s
Iteration   3: 6507974.979 ops/s
Iteration   4: 6535694.644 ops/s
Iteration   5: 6505092.721 ops/s
Iteration   6: 6531268.605 ops/s
Iteration   7: 6733146.339 ops/s
Iteration   8: 6358418.747 ops/s
Iteration   9: 6697683.318 ops/s
Iteration  10: 6553856.531 ops/s
Iteration  11: 6397087.818 ops/s
Iteration  12: 6743241.262 ops/s
Iteration  13: 6506102.754 ops/s
Iteration  14: 6486571.184 ops/s
Iteration  15: 6322993.346 ops/s
Iteration  16: 6670882.920 ops/s
Iteration  17: 6588718.207 ops/s
Iteration  18: 6425035.015 ops/s
Iteration  19: 6728319.825 ops/s
Iteration  20: 6378213.163 ops/s
Iteration  21: 6482329.645 ops/s
Iteration  22: 6644448.833 ops/s
Iteration  23: 6470645.434 ops/s
Iteration  24: 6661682.645 ops/s
Iteration  25: 6422532.913 ops/s
Iteration  26: 6757919.078 ops/s
Iteration  27: 6412631.896 ops/s
Iteration  28: 6414264.520 ops/s
Iteration  29: 6419684.162 ops/s
Iteration  30: 6659832.311 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_empty":
  6539254.913 ±(99.9%) 87790.459 ops/s [Average]
  (min, avg, max) = (6322993.346, 6539254.913, 6757919.078), stdev = 131400.636
  CI (99.9%): [6451464.455, 6627045.372] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
MaybeIsEmptyTest._Benchmark.benchmark_empty  thrpt   30  6539254.913 ± 87790.459  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_emptyWithJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_emptyWithJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1632335.649 ops/s
# Warmup Iteration   2: 4791350.812 ops/s
# Warmup Iteration   3: 7353314.632 ops/s
# Warmup Iteration   4: 7021703.126 ops/s
# Warmup Iteration   5: 7393208.937 ops/s
# Warmup Iteration   6: 7172225.051 ops/s
# Warmup Iteration   7: 7103804.820 ops/s
# Warmup Iteration   8: 7304336.886 ops/s
# Warmup Iteration   9: 7253783.509 ops/s
# Warmup Iteration  10: 6893795.606 ops/s
# Warmup Iteration  11: 7343034.255 ops/s
# Warmup Iteration  12: 7049538.662 ops/s
# Warmup Iteration  13: 7273631.840 ops/s
# Warmup Iteration  14: 7182483.510 ops/s
# Warmup Iteration  15: 7290344.298 ops/s
# Warmup Iteration  16: 7222487.188 ops/s
# Warmup Iteration  17: 7086816.496 ops/s
# Warmup Iteration  18: 7431939.202 ops/s
# Warmup Iteration  19: 7367365.595 ops/s
# Warmup Iteration  20: 7033945.962 ops/s
# Warmup Iteration  21: 7266836.224 ops/s
# Warmup Iteration  22: 7116310.377 ops/s
# Warmup Iteration  23: 6971916.860 ops/s
# Warmup Iteration  24: 7148777.065 ops/s
# Warmup Iteration  25: 7434755.440 ops/s
# Warmup Iteration  26: 7131715.307 ops/s
# Warmup Iteration  27: 7035135.185 ops/s
# Warmup Iteration  28: 7297373.504 ops/s
# Warmup Iteration  29: 6998275.762 ops/s
# Warmup Iteration  30: 7458774.482 ops/s
Iteration   1: 7078084.173 ops/s
Iteration   2: 7363197.744 ops/s
Iteration   3: 7051144.943 ops/s
Iteration   4: 7141324.979 ops/s
Iteration   5: 7188271.536 ops/s
Iteration   6: 7254613.210 ops/s
Iteration   7: 7168008.464 ops/s
Iteration   8: 7367096.702 ops/s
Iteration   9: 6947467.512 ops/s
Iteration  10: 7348821.825 ops/s
Iteration  11: 6992785.503 ops/s
Iteration  12: 5502015.173 ops/s
Iteration  13: 7365826.303 ops/s
Iteration  14: 7032349.876 ops/s
Iteration  15: 7175740.058 ops/s
Iteration  16: 7371114.430 ops/s
Iteration  17: 7094119.468 ops/s
Iteration  18: 7362656.648 ops/s
Iteration  19: 6906437.423 ops/s
Iteration  20: 7339151.468 ops/s
Iteration  21: 7350834.855 ops/s
Iteration  22: 7163101.976 ops/s
Iteration  23: 7289151.449 ops/s
Iteration  24: 7253210.119 ops/s
Iteration  25: 7356379.053 ops/s
Iteration  26: 6908847.608 ops/s
Iteration  27: 7223376.830 ops/s
Iteration  28: 7194936.167 ops/s
Iteration  29: 7216784.190 ops/s
Iteration  30: 7359995.756 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_emptyWithJust":
  7145561.515 ±(99.9%) 229488.187 ops/s [Average]
  (min, avg, max) = (5502015.173, 7145561.515, 7371114.430), stdev = 343487.141
  CI (99.9%): [6916073.328, 7375049.702] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
MaybeFlatMapBiSelectorTest._Benchmark.benchmark_emptyWithJust  thrpt   30  7145561.515 ± 229488.187  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_emptyOtherToo$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_emptyOtherToo

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2392265.571 ops/s
# Warmup Iteration   2: 4993402.156 ops/s
# Warmup Iteration   3: 6411506.482 ops/s
# Warmup Iteration   4: 6703521.357 ops/s
# Warmup Iteration   5: 7023414.436 ops/s
# Warmup Iteration   6: 6302505.300 ops/s
# Warmup Iteration   7: 6931003.821 ops/s
# Warmup Iteration   8: 6696498.370 ops/s
# Warmup Iteration   9: 6890846.377 ops/s
# Warmup Iteration  10: 6713830.704 ops/s
# Warmup Iteration  11: 6486957.893 ops/s
# Warmup Iteration  12: 6675244.562 ops/s
# Warmup Iteration  13: 6738130.034 ops/s
# Warmup Iteration  14: 6652086.746 ops/s
# Warmup Iteration  15: 6611210.015 ops/s
# Warmup Iteration  16: 6922453.355 ops/s
# Warmup Iteration  17: 6525503.985 ops/s
# Warmup Iteration  18: 6986671.334 ops/s
# Warmup Iteration  19: 6442349.191 ops/s
# Warmup Iteration  20: 6882026.801 ops/s
# Warmup Iteration  21: 6551536.709 ops/s
# Warmup Iteration  22: 6699686.772 ops/s
# Warmup Iteration  23: 6902830.503 ops/s
# Warmup Iteration  24: 6684628.958 ops/s
# Warmup Iteration  25: 6595502.805 ops/s
# Warmup Iteration  26: 6716461.683 ops/s
# Warmup Iteration  27: 6562819.632 ops/s
# Warmup Iteration  28: 6940440.123 ops/s
# Warmup Iteration  29: 6633637.864 ops/s
# Warmup Iteration  30: 6886888.829 ops/s
Iteration   1: 6844134.513 ops/s
Iteration   2: 6388337.098 ops/s
Iteration   3: 6915952.622 ops/s
Iteration   4: 6728815.936 ops/s
Iteration   5: 6492306.438 ops/s
Iteration   6: 6886008.333 ops/s
Iteration   7: 6625878.807 ops/s
Iteration   8: 6772883.251 ops/s
Iteration   9: 6615143.612 ops/s
Iteration  10: 6582002.636 ops/s
Iteration  11: 6767737.714 ops/s
Iteration  12: 6760674.740 ops/s
Iteration  13: 6889472.991 ops/s
Iteration  14: 6843775.539 ops/s
Iteration  15: 6831068.115 ops/s
Iteration  16: 6745984.860 ops/s
Iteration  17: 6729408.042 ops/s
Iteration  18: 6558856.370 ops/s
Iteration  19: 6811614.019 ops/s
Iteration  20: 6839420.520 ops/s
Iteration  21: 6615231.572 ops/s
Iteration  22: 6804329.643 ops/s
Iteration  23: 6613764.404 ops/s
Iteration  24: 6658944.165 ops/s
Iteration  25: 6655057.147 ops/s
Iteration  26: 6615917.081 ops/s
Iteration  27: 6875398.948 ops/s
Iteration  28: 6694710.564 ops/s
Iteration  29: 6939531.771 ops/s
Iteration  30: 6622075.835 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_emptyOtherToo":
  6724147.909 ±(99.9%) 89884.194 ops/s [Average]
  (min, avg, max) = (6388337.098, 6724147.909, 6939531.771), stdev = 134534.440
  CI (99.9%): [6634263.716, 6814032.103] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MaybeSwitchIfEmptyTest._Benchmark.benchmark_emptyOtherToo  thrpt   30  6724147.909 ± 89884.194  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_defaultIfEmptyEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_defaultIfEmptyEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1734599.830 ops/s
# Warmup Iteration   2: 5322676.006 ops/s
# Warmup Iteration   3: 6994913.859 ops/s
# Warmup Iteration   4: 7251068.577 ops/s
# Warmup Iteration   5: 7384709.157 ops/s
# Warmup Iteration   6: 7115147.111 ops/s
# Warmup Iteration   7: 7426714.454 ops/s
# Warmup Iteration   8: 7127347.096 ops/s
# Warmup Iteration   9: 7540649.278 ops/s
# Warmup Iteration  10: 7542926.742 ops/s
# Warmup Iteration  11: 7062865.934 ops/s
# Warmup Iteration  12: 7577985.171 ops/s
# Warmup Iteration  13: 7134864.374 ops/s
# Warmup Iteration  14: 7380593.669 ops/s
# Warmup Iteration  15: 7190894.856 ops/s
# Warmup Iteration  16: 7298141.469 ops/s
# Warmup Iteration  17: 7501730.098 ops/s
# Warmup Iteration  18: 7201101.102 ops/s
# Warmup Iteration  19: 7406909.204 ops/s
# Warmup Iteration  20: 7293370.445 ops/s
# Warmup Iteration  21: 7651197.033 ops/s
# Warmup Iteration  22: 7211059.161 ops/s
# Warmup Iteration  23: 7286690.400 ops/s
# Warmup Iteration  24: 7305399.357 ops/s
# Warmup Iteration  25: 7543600.664 ops/s
# Warmup Iteration  26: 7201906.935 ops/s
# Warmup Iteration  27: 7466203.514 ops/s
# Warmup Iteration  28: 7462898.187 ops/s
# Warmup Iteration  29: 7521882.178 ops/s
# Warmup Iteration  30: 7210518.386 ops/s
Iteration   1: 7458357.415 ops/s
Iteration   2: 7476815.999 ops/s
Iteration   3: 7246555.738 ops/s
Iteration   4: 7334575.662 ops/s
Iteration   5: 7669131.388 ops/s
Iteration   6: 6052078.440 ops/s
Iteration   7: 6580992.912 ops/s
Iteration   8: 7565073.504 ops/s
Iteration   9: 7252058.693 ops/s
Iteration  10: 7501220.530 ops/s
Iteration  11: 7174236.051 ops/s
Iteration  12: 7121226.307 ops/s
Iteration  13: 7249067.838 ops/s
Iteration  14: 7428816.005 ops/s
Iteration  15: 7271148.838 ops/s
Iteration  16: 7403520.781 ops/s
Iteration  17: 7577157.598 ops/s
Iteration  18: 7487769.177 ops/s
Iteration  19: 7192208.645 ops/s
Iteration  20: 7548841.679 ops/s
Iteration  21: 7238285.997 ops/s
Iteration  22: 7500298.541 ops/s
Iteration  23: 7337491.589 ops/s
Iteration  24: 7403632.433 ops/s
Iteration  25: 7306229.239 ops/s
Iteration  26: 7258126.258 ops/s
Iteration  27: 7504766.263 ops/s
Iteration  28: 7187159.937 ops/s
Iteration  29: 7383659.001 ops/s
Iteration  30: 7316705.298 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_defaultIfEmptyEmpty":
  7300906.925 ±(99.9%) 206407.441 ops/s [Average]
  (min, avg, max) = (6052078.440, 7300906.925, 7669131.388), stdev = 308940.965
  CI (99.9%): [7094499.484, 7507314.367] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
MaybeSwitchIfEmptyTest._Benchmark.benchmark_defaultIfEmptyEmpty  thrpt   30  7300906.925 ± 206407.441  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_emptyEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_emptyEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2305850.457 ops/s
# Warmup Iteration   2: 4777733.883 ops/s
# Warmup Iteration   3: 6687068.958 ops/s
# Warmup Iteration   4: 6569696.408 ops/s
# Warmup Iteration   5: 6841539.249 ops/s
# Warmup Iteration   6: 6545476.407 ops/s
# Warmup Iteration   7: 6672323.860 ops/s
# Warmup Iteration   8: 6729647.275 ops/s
# Warmup Iteration   9: 6646086.643 ops/s
# Warmup Iteration  10: 6620412.685 ops/s
# Warmup Iteration  11: 6679393.018 ops/s
# Warmup Iteration  12: 6620373.156 ops/s
# Warmup Iteration  13: 6463400.603 ops/s
# Warmup Iteration  14: 6709365.698 ops/s
# Warmup Iteration  15: 6607652.723 ops/s
# Warmup Iteration  16: 6836557.822 ops/s
# Warmup Iteration  17: 6613007.952 ops/s
# Warmup Iteration  18: 6809721.759 ops/s
# Warmup Iteration  19: 6533135.501 ops/s
# Warmup Iteration  20: 6667532.729 ops/s
# Warmup Iteration  21: 6829854.839 ops/s
# Warmup Iteration  22: 6625078.916 ops/s
# Warmup Iteration  23: 6847172.974 ops/s
# Warmup Iteration  24: 6880268.275 ops/s
# Warmup Iteration  25: 6580423.849 ops/s
# Warmup Iteration  26: 6773147.912 ops/s
# Warmup Iteration  27: 6616368.968 ops/s
# Warmup Iteration  28: 6669293.811 ops/s
# Warmup Iteration  29: 6842307.622 ops/s
# Warmup Iteration  30: 6595770.599 ops/s
Iteration   1: 6816801.244 ops/s
Iteration   2: 6574231.388 ops/s
Iteration   3: 6911624.353 ops/s
Iteration   4: 6483455.512 ops/s
Iteration   5: 6859767.930 ops/s
Iteration   6: 6640755.027 ops/s
Iteration   7: 6648603.956 ops/s
Iteration   8: 6782635.222 ops/s
Iteration   9: 6686560.108 ops/s
Iteration  10: 6904170.862 ops/s
Iteration  11: 6501281.798 ops/s
Iteration  12: 6570547.761 ops/s
Iteration  13: 6698885.719 ops/s
Iteration  14: 6960154.162 ops/s
Iteration  15: 6569314.354 ops/s
Iteration  16: 6571659.387 ops/s
Iteration  17: 7028328.650 ops/s
Iteration  18: 6774229.691 ops/s
Iteration  19: 6655426.189 ops/s
Iteration  20: 6791477.668 ops/s
Iteration  21: 6732266.155 ops/s
Iteration  22: 6925703.330 ops/s
Iteration  23: 6643315.906 ops/s
Iteration  24: 6827481.262 ops/s
Iteration  25: 6685687.762 ops/s
Iteration  26: 6775421.354 ops/s
Iteration  27: 6712855.226 ops/s
Iteration  28: 6490217.236 ops/s
Iteration  29: 6601008.093 ops/s
Iteration  30: 6819357.763 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_emptyEager":
  6721440.836 ±(99.9%) 97248.738 ops/s [Average]
  (min, avg, max) = (6483455.512, 6721440.836, 7028328.650), stdev = 145557.345
  CI (99.9%): [6624192.097, 6818689.574] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
MaybeUsingTest._Benchmark.benchmark_emptyEager  thrpt   30  6721440.836 ± 97248.738  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_emptyNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_emptyNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2623867.782 ops/s
# Warmup Iteration   2: 5289509.034 ops/s
# Warmup Iteration   3: 7686955.678 ops/s
# Warmup Iteration   4: 7095366.914 ops/s
# Warmup Iteration   5: 7587060.019 ops/s
# Warmup Iteration   6: 7330881.853 ops/s
# Warmup Iteration   7: 7589414.377 ops/s
# Warmup Iteration   8: 7382619.769 ops/s
# Warmup Iteration   9: 7219074.074 ops/s
# Warmup Iteration  10: 7487388.027 ops/s
# Warmup Iteration  11: 7359718.805 ops/s
# Warmup Iteration  12: 7574851.818 ops/s
# Warmup Iteration  13: 7573412.188 ops/s
# Warmup Iteration  14: 7332539.297 ops/s
# Warmup Iteration  15: 7747772.634 ops/s
# Warmup Iteration  16: 7382656.432 ops/s
# Warmup Iteration  17: 7479127.314 ops/s
# Warmup Iteration  18: 7611747.077 ops/s
# Warmup Iteration  19: 7457623.689 ops/s
# Warmup Iteration  20: 7534522.515 ops/s
# Warmup Iteration  21: 7414251.900 ops/s
# Warmup Iteration  22: 7612175.308 ops/s
# Warmup Iteration  23: 7435075.899 ops/s
# Warmup Iteration  24: 7317370.570 ops/s
# Warmup Iteration  25: 7629685.734 ops/s
# Warmup Iteration  26: 7120929.327 ops/s
# Warmup Iteration  27: 7765962.154 ops/s
# Warmup Iteration  28: 7594462.058 ops/s
# Warmup Iteration  29: 7446215.111 ops/s
# Warmup Iteration  30: 7591064.681 ops/s
Iteration   1: 5973728.777 ops/s
Iteration   2: 7463914.316 ops/s
Iteration   3: 7573351.366 ops/s
Iteration   4: 7275753.482 ops/s
Iteration   5: 7631979.512 ops/s
Iteration   6: 7393937.778 ops/s
Iteration   7: 7376286.749 ops/s
Iteration   8: 7404666.807 ops/s
Iteration   9: 7359708.928 ops/s
Iteration  10: 7527374.294 ops/s
Iteration  11: 7284650.198 ops/s
Iteration  12: 7557197.313 ops/s
Iteration  13: 7291915.557 ops/s
Iteration  14: 7224803.097 ops/s
Iteration  15: 7530666.008 ops/s
Iteration  16: 7404214.804 ops/s
Iteration  17: 7531414.809 ops/s
Iteration  18: 7317583.977 ops/s
Iteration  19: 7510620.202 ops/s
Iteration  20: 7318169.802 ops/s
Iteration  21: 7287847.542 ops/s
Iteration  22: 7931132.360 ops/s
Iteration  23: 7270732.921 ops/s
Iteration  24: 7286498.635 ops/s
Iteration  25: 7615697.578 ops/s
Iteration  26: 7353991.212 ops/s
Iteration  27: 7482740.205 ops/s
Iteration  28: 7624797.057 ops/s
Iteration  29: 7245064.263 ops/s
Iteration  30: 7700232.566 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_emptyNonEager":
  7391689.071 ±(99.9%) 209040.217 ops/s [Average]
  (min, avg, max) = (5973728.777, 7391689.071, 7931132.360), stdev = 312881.580
  CI (99.9%): [7182648.854, 7600729.288] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
MaybeUsingTest._Benchmark.benchmark_emptyNonEager  thrpt   30  7391689.071 ± 209040.217  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3407416.184 ops/s
# Warmup Iteration   2: 5906384.967 ops/s
# Warmup Iteration   3: 8114508.466 ops/s
# Warmup Iteration   4: 7960830.939 ops/s
# Warmup Iteration   5: 8182990.784 ops/s
# Warmup Iteration   6: 8162220.964 ops/s
# Warmup Iteration   7: 8144652.414 ops/s
# Warmup Iteration   8: 8204534.048 ops/s
# Warmup Iteration   9: 8426691.608 ops/s
# Warmup Iteration  10: 8056424.306 ops/s
# Warmup Iteration  11: 8117267.778 ops/s
# Warmup Iteration  12: 8442780.616 ops/s
# Warmup Iteration  13: 7965052.654 ops/s
# Warmup Iteration  14: 8105675.295 ops/s
# Warmup Iteration  15: 8470013.272 ops/s
# Warmup Iteration  16: 8129579.511 ops/s
# Warmup Iteration  17: 8186404.779 ops/s
# Warmup Iteration  18: 8346006.255 ops/s
# Warmup Iteration  19: 7968355.907 ops/s
# Warmup Iteration  20: 8514130.716 ops/s
# Warmup Iteration  21: 8034709.474 ops/s
# Warmup Iteration  22: 8137639.426 ops/s
# Warmup Iteration  23: 8528598.934 ops/s
# Warmup Iteration  24: 8145475.284 ops/s
# Warmup Iteration  25: 7815312.894 ops/s
# Warmup Iteration  26: 8229556.836 ops/s
# Warmup Iteration  27: 8184013.309 ops/s
# Warmup Iteration  28: 8198358.852 ops/s
# Warmup Iteration  29: 8444727.148 ops/s
# Warmup Iteration  30: 8015117.355 ops/s
Iteration   1: 8299954.850 ops/s
Iteration   2: 8311828.971 ops/s
Iteration   3: 8258954.811 ops/s
Iteration   4: 8372076.494 ops/s
Iteration   5: 7925578.662 ops/s
Iteration   6: 8410144.959 ops/s
Iteration   7: 8344554.120 ops/s
Iteration   8: 7860772.535 ops/s
Iteration   9: 8155923.147 ops/s
Iteration  10: 8362373.589 ops/s
Iteration  11: 8209921.410 ops/s
Iteration  12: 8311160.577 ops/s
Iteration  13: 8343965.101 ops/s
Iteration  14: 8030680.800 ops/s
Iteration  15: 8512177.217 ops/s
Iteration  16: 7894704.780 ops/s
Iteration  17: 8170884.689 ops/s
Iteration  18: 8106725.893 ops/s
Iteration  19: 8349402.345 ops/s
Iteration  20: 8073421.048 ops/s
Iteration  21: 8334742.862 ops/s
Iteration  22: 8116459.542 ops/s
Iteration  23: 8342808.706 ops/s
Iteration  24: 8326332.784 ops/s
Iteration  25: 8053131.799 ops/s
Iteration  26: 8488722.092 ops/s
Iteration  27: 7918491.676 ops/s
Iteration  28: 8040829.125 ops/s
Iteration  29: 8332610.213 ops/s
Iteration  30: 8420236.840 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteEmpty":
  8222652.388 ±(99.9%) 121649.222 ops/s [Average]
  (min, avg, max) = (7860772.535, 8222652.388, 8512177.217), stdev = 182078.842
  CI (99.9%): [8101003.166, 8344301.610] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteEmpty  thrpt   30  8222652.388 ± 121649.222  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3069930.111 ops/s
# Warmup Iteration   2: 5579395.891 ops/s
# Warmup Iteration   3: 7744094.552 ops/s
# Warmup Iteration   4: 7896972.288 ops/s
# Warmup Iteration   5: 7935153.622 ops/s
# Warmup Iteration   6: 7838827.266 ops/s
# Warmup Iteration   7: 7799435.360 ops/s
# Warmup Iteration   8: 8197997.065 ops/s
# Warmup Iteration   9: 7995657.692 ops/s
# Warmup Iteration  10: 7935756.072 ops/s
# Warmup Iteration  11: 7892480.682 ops/s
# Warmup Iteration  12: 8070565.066 ops/s
# Warmup Iteration  13: 7800002.409 ops/s
# Warmup Iteration  14: 8232559.633 ops/s
# Warmup Iteration  15: 7952231.509 ops/s
# Warmup Iteration  16: 7838289.191 ops/s
# Warmup Iteration  17: 8264210.386 ops/s
# Warmup Iteration  18: 7703547.133 ops/s
# Warmup Iteration  19: 8186829.515 ops/s
# Warmup Iteration  20: 7639423.587 ops/s
# Warmup Iteration  21: 8039620.484 ops/s
# Warmup Iteration  22: 8099032.499 ops/s
# Warmup Iteration  23: 7726612.204 ops/s
# Warmup Iteration  24: 7861802.758 ops/s
# Warmup Iteration  25: 6559371.020 ops/s
# Warmup Iteration  26: 7769408.962 ops/s
# Warmup Iteration  27: 8117538.641 ops/s
# Warmup Iteration  28: 7819437.084 ops/s
# Warmup Iteration  29: 8023558.407 ops/s
# Warmup Iteration  30: 7865584.904 ops/s
Iteration   1: 8021385.889 ops/s
Iteration   2: 7633016.070 ops/s
Iteration   3: 8134181.966 ops/s
Iteration   4: 7784584.781 ops/s
Iteration   5: 7816990.222 ops/s
Iteration   6: 8174661.512 ops/s
Iteration   7: 7770184.678 ops/s
Iteration   8: 8071757.593 ops/s
Iteration   9: 7970522.821 ops/s
Iteration  10: 7753308.932 ops/s
Iteration  11: 8016983.234 ops/s
Iteration  12: 7704905.647 ops/s
Iteration  13: 8140475.368 ops/s
Iteration  14: 7905898.892 ops/s
Iteration  15: 7710549.057 ops/s
Iteration  16: 8278646.780 ops/s
Iteration  17: 7722926.396 ops/s
Iteration  18: 7969706.455 ops/s
Iteration  19: 7916815.928 ops/s
Iteration  20: 7771168.765 ops/s
Iteration  21: 8101640.540 ops/s
Iteration  22: 7876051.204 ops/s
Iteration  23: 8081720.222 ops/s
Iteration  24: 8273982.568 ops/s
Iteration  25: 7874849.180 ops/s
Iteration  26: 8037304.017 ops/s
Iteration  27: 7891007.835 ops/s
Iteration  28: 7958173.547 ops/s
Iteration  29: 8048684.066 ops/s
Iteration  30: 7638362.697 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnEmpty":
  7935014.895 ±(99.9%) 120424.525 ops/s [Average]
  (min, avg, max) = (7633016.070, 7935014.895, 8278646.780), stdev = 180245.774
  CI (99.9%): [7814590.370, 8055439.420] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnEmpty  thrpt   30  7935014.895 ± 120424.525  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_emptyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_emptyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2978161.769 ops/s
# Warmup Iteration   2: 5686605.395 ops/s
# Warmup Iteration   3: 8148266.051 ops/s
# Warmup Iteration   4: 7957125.893 ops/s
# Warmup Iteration   5: 7680846.742 ops/s
# Warmup Iteration   6: 8053263.867 ops/s
# Warmup Iteration   7: 8121560.625 ops/s
# Warmup Iteration   8: 7922059.749 ops/s
# Warmup Iteration   9: 8044581.516 ops/s
# Warmup Iteration  10: 8245725.308 ops/s
# Warmup Iteration  11: 7840363.002 ops/s
# Warmup Iteration  12: 8146319.448 ops/s
# Warmup Iteration  13: 7857073.640 ops/s
# Warmup Iteration  14: 7952492.447 ops/s
# Warmup Iteration  15: 8153197.238 ops/s
# Warmup Iteration  16: 8007346.622 ops/s
# Warmup Iteration  17: 8218092.848 ops/s
# Warmup Iteration  18: 7874813.763 ops/s
# Warmup Iteration  19: 8314295.284 ops/s
# Warmup Iteration  20: 8127250.609 ops/s
# Warmup Iteration  21: 7807414.919 ops/s
# Warmup Iteration  22: 8108349.064 ops/s
# Warmup Iteration  23: 7870436.543 ops/s
# Warmup Iteration  24: 8011860.361 ops/s
# Warmup Iteration  25: 8105773.011 ops/s
# Warmup Iteration  26: 7618451.772 ops/s
# Warmup Iteration  27: 8040827.617 ops/s
# Warmup Iteration  28: 8027332.510 ops/s
# Warmup Iteration  29: 7839194.961 ops/s
# Warmup Iteration  30: 7760583.019 ops/s
Iteration   1: 8172675.237 ops/s
Iteration   2: 7974521.946 ops/s
Iteration   3: 7963332.498 ops/s
Iteration   4: 8173202.599 ops/s
Iteration   5: 7944720.067 ops/s
Iteration   6: 7771925.326 ops/s
Iteration   7: 8082043.281 ops/s
Iteration   8: 7620892.669 ops/s
Iteration   9: 8223264.994 ops/s
Iteration  10: 8018165.763 ops/s
Iteration  11: 7719540.848 ops/s
Iteration  12: 7768252.064 ops/s
Iteration  13: 8430314.806 ops/s
Iteration  14: 8099575.008 ops/s
Iteration  15: 7644702.387 ops/s
Iteration  16: 7981986.042 ops/s
Iteration  17: 8033906.783 ops/s
Iteration  18: 8016116.284 ops/s
Iteration  19: 7925116.124 ops/s
Iteration  20: 7973957.481 ops/s
Iteration  21: 8216778.996 ops/s
Iteration  22: 7980911.035 ops/s
Iteration  23: 8040432.836 ops/s
Iteration  24: 8405288.960 ops/s
Iteration  25: 7770685.654 ops/s
Iteration  26: 8050812.645 ops/s
Iteration  27: 8126663.380 ops/s
Iteration  28: 7739960.686 ops/s
Iteration  29: 7812502.013 ops/s
Iteration  30: 8209137.601 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_emptyConditional":
  7996379.534 ±(99.9%) 136460.944 ops/s [Average]
  (min, avg, max) = (7620892.669, 7996379.534, 8430314.806), stdev = 204248.332
  CI (99.9%): [7859918.590, 8132840.478] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
MaybeDoAfterSuccessTest._Benchmark.benchmark_emptyConditional  thrpt   30  7996379.534 ± 136460.944  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_emptyDefault$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_emptyDefault

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1679685.882 ops/s
# Warmup Iteration   2: 4776915.241 ops/s
# Warmup Iteration   3: 7090339.381 ops/s
# Warmup Iteration   4: 6539717.065 ops/s
# Warmup Iteration   5: 7034190.833 ops/s
# Warmup Iteration   6: 6970714.878 ops/s
# Warmup Iteration   7: 6594573.846 ops/s
# Warmup Iteration   8: 6781023.846 ops/s
# Warmup Iteration   9: 6589724.086 ops/s
# Warmup Iteration  10: 6679468.177 ops/s
# Warmup Iteration  11: 6731537.959 ops/s
# Warmup Iteration  12: 7003340.579 ops/s
# Warmup Iteration  13: 6713106.686 ops/s
# Warmup Iteration  14: 6926699.564 ops/s
# Warmup Iteration  15: 6499664.466 ops/s
# Warmup Iteration  16: 6922676.991 ops/s
# Warmup Iteration  17: 6675215.694 ops/s
# Warmup Iteration  18: 6756956.734 ops/s
# Warmup Iteration  19: 6664339.608 ops/s
# Warmup Iteration  20: 5707892.626 ops/s
# Warmup Iteration  21: 6559008.701 ops/s
# Warmup Iteration  22: 6764943.235 ops/s
# Warmup Iteration  23: 7012137.720 ops/s
# Warmup Iteration  24: 6673715.033 ops/s
# Warmup Iteration  25: 6611306.474 ops/s
# Warmup Iteration  26: 7115839.528 ops/s
# Warmup Iteration  27: 6849986.045 ops/s
# Warmup Iteration  28: 6765455.961 ops/s
# Warmup Iteration  29: 6884288.673 ops/s
# Warmup Iteration  30: 6594843.760 ops/s
Iteration   1: 7038413.056 ops/s
Iteration   2: 7028058.527 ops/s
Iteration   3: 6728099.575 ops/s
Iteration   4: 6719410.170 ops/s
Iteration   5: 6901313.612 ops/s
Iteration   6: 6790345.919 ops/s
Iteration   7: 6849329.694 ops/s
Iteration   8: 6588396.798 ops/s
Iteration   9: 6922020.122 ops/s
Iteration  10: 6718265.362 ops/s
Iteration  11: 6833388.159 ops/s
Iteration  12: 7019509.288 ops/s
Iteration  13: 6565803.531 ops/s
Iteration  14: 6941065.873 ops/s
Iteration  15: 6817724.066 ops/s
Iteration  16: 6591877.342 ops/s
Iteration  17: 6883157.196 ops/s
Iteration  18: 6657439.322 ops/s
Iteration  19: 6828943.117 ops/s
Iteration  20: 6903074.444 ops/s
Iteration  21: 6676812.692 ops/s
Iteration  22: 6846219.752 ops/s
Iteration  23: 6864777.155 ops/s
Iteration  24: 6980404.966 ops/s
Iteration  25: 6778920.257 ops/s
Iteration  26: 6673070.846 ops/s
Iteration  27: 6894718.598 ops/s
Iteration  28: 6627310.247 ops/s
Iteration  29: 6848196.999 ops/s
Iteration  30: 7123186.389 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_emptyDefault":
  6821308.436 ±(99.9%) 96785.517 ops/s [Average]
  (min, avg, max) = (6565803.531, 6821308.436, 7123186.389), stdev = 144864.017
  CI (99.9%): [6724522.918, 6918093.953] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SingleFromMaybeTest._Benchmark.benchmark_emptyDefault  thrpt   30  6821308.436 ± 96785.517  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalEmptyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalEmptyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1709684.932 ops/s
# Warmup Iteration   2: 4889826.215 ops/s
# Warmup Iteration   3: 7451518.003 ops/s
# Warmup Iteration   4: 7220330.201 ops/s
# Warmup Iteration   5: 7308455.384 ops/s
# Warmup Iteration   6: 7140997.068 ops/s
# Warmup Iteration   7: 7255188.516 ops/s
# Warmup Iteration   8: 7551819.609 ops/s
# Warmup Iteration   9: 7214344.074 ops/s
# Warmup Iteration  10: 7290131.683 ops/s
# Warmup Iteration  11: 7490113.776 ops/s
# Warmup Iteration  12: 7149875.320 ops/s
# Warmup Iteration  13: 7371123.284 ops/s
# Warmup Iteration  14: 7457220.198 ops/s
# Warmup Iteration  15: 7387206.300 ops/s
# Warmup Iteration  16: 7386345.155 ops/s
# Warmup Iteration  17: 7386930.214 ops/s
# Warmup Iteration  18: 7341533.693 ops/s
# Warmup Iteration  19: 7518133.294 ops/s
# Warmup Iteration  20: 7252588.077 ops/s
# Warmup Iteration  21: 7654720.259 ops/s
# Warmup Iteration  22: 7540307.646 ops/s
# Warmup Iteration  23: 7209005.229 ops/s
# Warmup Iteration  24: 7528654.807 ops/s
# Warmup Iteration  25: 7381284.053 ops/s
# Warmup Iteration  26: 7231250.908 ops/s
# Warmup Iteration  27: 7462725.507 ops/s
# Warmup Iteration  28: 7308236.157 ops/s
# Warmup Iteration  29: 7718825.648 ops/s
# Warmup Iteration  30: 7139215.049 ops/s
Iteration   1: 7505331.935 ops/s
Iteration   2: 7337449.605 ops/s
Iteration   3: 7361972.602 ops/s
Iteration   4: 7491679.956 ops/s
Iteration   5: 7678127.830 ops/s
Iteration   6: 7289933.225 ops/s
Iteration   7: 7450888.214 ops/s
Iteration   8: 7308471.910 ops/s
Iteration   9: 7520035.178 ops/s
Iteration  10: 7682129.735 ops/s
Iteration  11: 7220664.200 ops/s
Iteration  12: 7700052.354 ops/s
Iteration  13: 7636738.922 ops/s
Iteration  14: 7637990.615 ops/s
Iteration  15: 7297759.476 ops/s
Iteration  16: 7465743.195 ops/s
Iteration  17: 7645321.849 ops/s
Iteration  18: 7150554.206 ops/s
Iteration  19: 7424378.796 ops/s
Iteration  20: 7368306.232 ops/s
Iteration  21: 7493511.481 ops/s
Iteration  22: 7174492.434 ops/s
Iteration  23: 7254967.025 ops/s
Iteration  24: 7655370.447 ops/s
Iteration  25: 7433182.575 ops/s
Iteration  26: 7085719.915 ops/s
Iteration  27: 7548752.257 ops/s
Iteration  28: 7189643.066 ops/s
Iteration  29: 7256408.447 ops/s
Iteration  30: 7334858.215 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalEmptyConditional":
  7420014.530 ±(99.9%) 118863.530 ops/s [Average]
  (min, avg, max) = (7085719.915, 7420014.530, 7700052.354), stdev = 177909.350
  CI (99.9%): [7301151.000, 7538878.060] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
MaybeDoFinallyTest._Benchmark.benchmark_normalEmptyConditional  thrpt   30  7420014.530 ± 118863.530  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3378687.898 ops/s
# Warmup Iteration   2: 5750710.013 ops/s
# Warmup Iteration   3: 8307741.162 ops/s
# Warmup Iteration   4: 8538976.211 ops/s
# Warmup Iteration   5: 8460106.359 ops/s
# Warmup Iteration   6: 8154282.722 ops/s
# Warmup Iteration   7: 8326780.824 ops/s
# Warmup Iteration   8: 8156536.464 ops/s
# Warmup Iteration   9: 8047016.944 ops/s
# Warmup Iteration  10: 8673845.489 ops/s
# Warmup Iteration  11: 8483755.213 ops/s
# Warmup Iteration  12: 7925441.059 ops/s
# Warmup Iteration  13: 8621844.712 ops/s
# Warmup Iteration  14: 6397640.458 ops/s
# Warmup Iteration  15: 8612676.633 ops/s
# Warmup Iteration  16: 8356527.591 ops/s
# Warmup Iteration  17: 8049680.413 ops/s
# Warmup Iteration  18: 8530457.851 ops/s
# Warmup Iteration  19: 8164572.416 ops/s
# Warmup Iteration  20: 8578948.961 ops/s
# Warmup Iteration  21: 8065278.977 ops/s
# Warmup Iteration  22: 8538929.559 ops/s
# Warmup Iteration  23: 8193384.297 ops/s
# Warmup Iteration  24: 8042728.613 ops/s
# Warmup Iteration  25: 8233358.176 ops/s
# Warmup Iteration  26: 8325870.082 ops/s
# Warmup Iteration  27: 8008779.407 ops/s
# Warmup Iteration  28: 8511053.512 ops/s
# Warmup Iteration  29: 7992195.375 ops/s
# Warmup Iteration  30: 8468338.315 ops/s
Iteration   1: 8394550.874 ops/s
Iteration   2: 8113082.417 ops/s
Iteration   3: 8429786.313 ops/s
Iteration   4: 8051838.163 ops/s
Iteration   5: 8267457.696 ops/s
Iteration   6: 8545567.868 ops/s
Iteration   7: 8449628.112 ops/s
Iteration   8: 8107538.289 ops/s
Iteration   9: 8258768.279 ops/s
Iteration  10: 8708491.017 ops/s
Iteration  11: 8118863.530 ops/s
Iteration  12: 8348749.579 ops/s
Iteration  13: 8256651.399 ops/s
Iteration  14: 8098136.111 ops/s
Iteration  15: 8433439.209 ops/s
Iteration  16: 8206901.497 ops/s
Iteration  17: 8485842.817 ops/s
Iteration  18: 8142721.466 ops/s
Iteration  19: 8263365.521 ops/s
Iteration  20: 8586156.992 ops/s
Iteration  21: 8103128.870 ops/s
Iteration  22: 8333690.629 ops/s
Iteration  23: 8266271.875 ops/s
Iteration  24: 8352102.125 ops/s
Iteration  25: 8690772.714 ops/s
Iteration  26: 8049735.350 ops/s
Iteration  27: 8306282.300 ops/s
Iteration  28: 8056591.490 ops/s
Iteration  29: 8339350.264 ops/s
Iteration  30: 8435345.119 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_isDisposed":
  8306693.596 ±(99.9%) 123776.406 ops/s [Average]
  (min, avg, max) = (8049735.350, 8306693.596, 8708491.017), stdev = 185262.712
  CI (99.9%): [8182917.190, 8430470.003] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score        Error  Units
MaybeUsingTest._Benchmark.benchmark_isDisposed  thrpt   30  8306693.596 ± 123776.406  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onCompleteNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onCompleteNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 131418.006 ops/s
# Warmup Iteration   2: 500844.765 ops/s
# Warmup Iteration   3: 567281.598 ops/s
# Warmup Iteration   4: 574095.098 ops/s
# Warmup Iteration   5: 610390.631 ops/s
# Warmup Iteration   6: 578643.551 ops/s
# Warmup Iteration   7: 595478.842 ops/s
# Warmup Iteration   8: 609619.389 ops/s
# Warmup Iteration   9: 612828.024 ops/s
# Warmup Iteration  10: 579291.064 ops/s
# Warmup Iteration  11: 585956.340 ops/s
# Warmup Iteration  12: 605898.993 ops/s
# Warmup Iteration  13: 566452.336 ops/s
# Warmup Iteration  14: 598091.145 ops/s
# Warmup Iteration  15: 575258.002 ops/s
# Warmup Iteration  16: 599374.021 ops/s
# Warmup Iteration  17: 609835.339 ops/s
# Warmup Iteration  18: 639453.515 ops/s
# Warmup Iteration  19: 598480.102 ops/s
# Warmup Iteration  20: 606085.978 ops/s
# Warmup Iteration  21: 645384.038 ops/s
# Warmup Iteration  22: 608414.172 ops/s
# Warmup Iteration  23: 634568.309 ops/s
# Warmup Iteration  24: 619060.797 ops/s
# Warmup Iteration  25: 620922.105 ops/s
# Warmup Iteration  26: 607812.734 ops/s
# Warmup Iteration  27: 424337.601 ops/s
# Warmup Iteration  28: 606464.483 ops/s
# Warmup Iteration  29: 647641.930 ops/s
# Warmup Iteration  30: 654586.362 ops/s
Iteration   1: 585453.675 ops/s
Iteration   2: 626341.759 ops/s
Iteration   3: 612032.583 ops/s
Iteration   4: 631346.338 ops/s
Iteration   5: 645764.233 ops/s
Iteration   6: 604936.829 ops/s
Iteration   7: 630633.364 ops/s
Iteration   8: 604400.163 ops/s
Iteration   9: 625830.569 ops/s
Iteration  10: 619031.572 ops/s
Iteration  11: 602252.950 ops/s
Iteration  12: 609971.641 ops/s
Iteration  13: 610211.793 ops/s
Iteration  14: 611543.192 ops/s
Iteration  15: 609769.165 ops/s
Iteration  16: 654066.627 ops/s
Iteration  17: 607374.444 ops/s
Iteration  18: 635901.487 ops/s
Iteration  19: 650255.384 ops/s
Iteration  20: 606494.625 ops/s
Iteration  21: 649329.045 ops/s
Iteration  22: 611709.523 ops/s
Iteration  23: 623459.663 ops/s
Iteration  24: 655186.121 ops/s
Iteration  25: 608886.434 ops/s
Iteration  26: 625950.877 ops/s
Iteration  27: 628377.443 ops/s
Iteration  28: 650146.119 ops/s
Iteration  29: 606626.507 ops/s
Iteration  30: 641509.819 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onCompleteNull":
  622826.465 ±(99.9%) 12272.291 ops/s [Average]
  (min, avg, max) = (585453.675, 622826.465, 655186.121), stdev = 18368.589
  CI (99.9%): [610554.173, 635098.756] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
MaybeFlatMapNotificationTest._Benchmark.benchmark_onCompleteNull  thrpt   30  622826.465 ± 12272.291  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 265286.151 ops/s
# Warmup Iteration   2: 501581.294 ops/s
# Warmup Iteration   3: 552542.253 ops/s
# Warmup Iteration   4: 504798.486 ops/s
# Warmup Iteration   5: 597283.250 ops/s
# Warmup Iteration   6: 531386.463 ops/s
# Warmup Iteration   7: 557571.286 ops/s
# Warmup Iteration   8: 602067.058 ops/s
# Warmup Iteration   9: 569204.284 ops/s
# Warmup Iteration  10: 602508.525 ops/s
# Warmup Iteration  11: 594392.150 ops/s
# Warmup Iteration  12: 559098.346 ops/s
# Warmup Iteration  13: 591894.400 ops/s
# Warmup Iteration  14: 582113.762 ops/s
# Warmup Iteration  15: 590407.791 ops/s
# Warmup Iteration  16: 608508.783 ops/s
# Warmup Iteration  17: 589748.994 ops/s
# Warmup Iteration  18: 610001.212 ops/s
# Warmup Iteration  19: 614414.338 ops/s
# Warmup Iteration  20: 623965.100 ops/s
# Warmup Iteration  21: 593821.900 ops/s
# Warmup Iteration  22: 598240.818 ops/s
# Warmup Iteration  23: 608468.020 ops/s
# Warmup Iteration  24: 586970.425 ops/s
# Warmup Iteration  25: 601880.476 ops/s
# Warmup Iteration  26: 628843.396 ops/s
# Warmup Iteration  27: 587062.747 ops/s
# Warmup Iteration  28: 620028.307 ops/s
# Warmup Iteration  29: 600696.118 ops/s
# Warmup Iteration  30: 619937.419 ops/s
Iteration   1: 619341.180 ops/s
Iteration   2: 595351.651 ops/s
Iteration   3: 620051.975 ops/s
Iteration   4: 606621.405 ops/s
Iteration   5: 595907.439 ops/s
Iteration   6: 597788.804 ops/s
Iteration   7: 593993.380 ops/s
Iteration   8: 611239.359 ops/s
Iteration   9: 622199.205 ops/s
Iteration  10: 594477.784 ops/s
Iteration  11: 612648.417 ops/s
Iteration  12: 609388.463 ops/s
Iteration  13: 625115.693 ops/s
Iteration  14: 624639.797 ops/s
Iteration  15: 591234.772 ops/s
Iteration  16: 617090.531 ops/s
Iteration  17: 590364.640 ops/s
Iteration  18: 617018.043 ops/s
Iteration  19: 614853.700 ops/s
Iteration  20: 602550.525 ops/s
Iteration  21: 625060.659 ops/s
Iteration  22: 589599.871 ops/s
Iteration  23: 609597.142 ops/s
Iteration  24: 595119.328 ops/s
Iteration  25: 622309.823 ops/s
Iteration  26: 596960.169 ops/s
Iteration  27: 596737.146 ops/s
Iteration  28: 615602.042 ops/s
Iteration  29: 606493.055 ops/s
Iteration  30: 605582.622 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleEmpty":
  607497.954 ±(99.9%) 7859.734 ops/s [Average]
  (min, avg, max) = (589599.871, 607497.954, 625115.693), stdev = 11764.081
  CI (99.9%): [599638.220, 615357.688] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleEmpty  thrpt   30  607497.954 ± 7859.734  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100582.295 ops/s
# Warmup Iteration   2: 504911.892 ops/s
# Warmup Iteration   3: 575226.057 ops/s
# Warmup Iteration   4: 537575.348 ops/s
# Warmup Iteration   5: 472335.753 ops/s
# Warmup Iteration   6: 483641.376 ops/s
# Warmup Iteration   7: 584650.553 ops/s
# Warmup Iteration   8: 525692.913 ops/s
# Warmup Iteration   9: 582498.837 ops/s
# Warmup Iteration  10: 585210.124 ops/s
# Warmup Iteration  11: 588786.513 ops/s
# Warmup Iteration  12: 588008.535 ops/s
# Warmup Iteration  13: 602470.445 ops/s
# Warmup Iteration  14: 598463.823 ops/s
# Warmup Iteration  15: 588219.515 ops/s
# Warmup Iteration  16: 608395.008 ops/s
# Warmup Iteration  17: 583086.667 ops/s
# Warmup Iteration  18: 628846.252 ops/s
# Warmup Iteration  19: 616842.139 ops/s
# Warmup Iteration  20: 631077.046 ops/s
# Warmup Iteration  21: 602566.821 ops/s
# Warmup Iteration  22: 600696.596 ops/s
# Warmup Iteration  23: 647204.170 ops/s
# Warmup Iteration  24: 603832.560 ops/s
# Warmup Iteration  25: 604148.347 ops/s
# Warmup Iteration  26: 635930.520 ops/s
# Warmup Iteration  27: 594297.072 ops/s
# Warmup Iteration  28: 608403.263 ops/s
# Warmup Iteration  29: 644903.855 ops/s
# Warmup Iteration  30: 605542.109 ops/s
Iteration   1: 630461.437 ops/s
Iteration   2: 633807.942 ops/s
Iteration   3: 591750.420 ops/s
Iteration   4: 624391.013 ops/s
Iteration   5: 623335.724 ops/s
Iteration   6: 595020.818 ops/s
Iteration   7: 630005.790 ops/s
Iteration   8: 633145.425 ops/s
Iteration   9: 603789.808 ops/s
Iteration  10: 634992.803 ops/s
Iteration  11: 598292.201 ops/s
Iteration  12: 616786.921 ops/s
Iteration  13: 639070.552 ops/s
Iteration  14: 603020.147 ops/s
Iteration  15: 589761.670 ops/s
Iteration  16: 611447.836 ops/s
Iteration  17: 629843.377 ops/s
Iteration  18: 606902.874 ops/s
Iteration  19: 620347.248 ops/s
Iteration  20: 625874.599 ops/s
Iteration  21: 602436.681 ops/s
Iteration  22: 638897.287 ops/s
Iteration  23: 613672.318 ops/s
Iteration  24: 605344.528 ops/s
Iteration  25: 628787.153 ops/s
Iteration  26: 579901.115 ops/s
Iteration  27: 621997.547 ops/s
Iteration  28: 608764.684 ops/s
Iteration  29: 629616.677 ops/s
Iteration  30: 612595.669 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_empty":
  616135.409 ±(99.9%) 10652.374 ops/s [Average]
  (min, avg, max) = (579901.115, 616135.409, 639070.552), stdev = 15943.973
  CI (99.9%): [605483.035, 626787.783] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
SingleFromMaybeTest._Benchmark.benchmark_empty  thrpt   30  616135.409 ± 10652.374  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 424203.650 ops/s
# Warmup Iteration   2: 2716561.575 ops/s
# Warmup Iteration   3: 4502957.124 ops/s
# Warmup Iteration   4: 4831810.617 ops/s
# Warmup Iteration   5: 4532480.113 ops/s
# Warmup Iteration   6: 4015787.928 ops/s
# Warmup Iteration   7: 4409552.385 ops/s
# Warmup Iteration   8: 4704437.113 ops/s
# Warmup Iteration   9: 4610557.926 ops/s
# Warmup Iteration  10: 4739338.985 ops/s
# Warmup Iteration  11: 4488020.204 ops/s
# Warmup Iteration  12: 4536188.954 ops/s
# Warmup Iteration  13: 4813925.672 ops/s
# Warmup Iteration  14: 4570377.809 ops/s
# Warmup Iteration  15: 4762704.987 ops/s
# Warmup Iteration  16: 4472652.057 ops/s
# Warmup Iteration  17: 4690721.666 ops/s
# Warmup Iteration  18: 4639039.042 ops/s
# Warmup Iteration  19: 4485020.858 ops/s
# Warmup Iteration  20: 4794547.149 ops/s
# Warmup Iteration  21: 4699357.200 ops/s
# Warmup Iteration  22: 4657421.659 ops/s
# Warmup Iteration  23: 4720242.703 ops/s
# Warmup Iteration  24: 4503812.064 ops/s
# Warmup Iteration  25: 4690452.460 ops/s
# Warmup Iteration  26: 4543330.254 ops/s
# Warmup Iteration  27: 4657967.407 ops/s
# Warmup Iteration  28: 4768958.609 ops/s
# Warmup Iteration  29: 4838834.916 ops/s
# Warmup Iteration  30: 4622038.955 ops/s
Iteration   1: 4850604.999 ops/s
Iteration   2: 4569174.164 ops/s
Iteration   3: 4714201.201 ops/s
Iteration   4: 4604964.481 ops/s
Iteration   5: 4697228.565 ops/s
Iteration   6: 4828376.884 ops/s
Iteration   7: 4532588.443 ops/s
Iteration   8: 4816924.891 ops/s
Iteration   9: 4602341.890 ops/s
Iteration  10: 4689000.424 ops/s
Iteration  11: 4525869.850 ops/s
Iteration  12: 4655913.772 ops/s
Iteration  13: 4787420.290 ops/s
Iteration  14: 4623295.723 ops/s
Iteration  15: 4628442.215 ops/s
Iteration  16: 4795557.783 ops/s
Iteration  17: 4586073.878 ops/s
Iteration  18: 4769392.584 ops/s
Iteration  19: 4647044.914 ops/s
Iteration  20: 4748631.741 ops/s
Iteration  21: 4676380.534 ops/s
Iteration  22: 4760550.307 ops/s
Iteration  23: 4662290.463 ops/s
Iteration  24: 4662133.857 ops/s
Iteration  25: 4763648.721 ops/s
Iteration  26: 4577737.861 ops/s
Iteration  27: 4888302.379 ops/s
Iteration  28: 4532170.076 ops/s
Iteration  29: 4673277.004 ops/s
Iteration  30: 4697685.007 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fused":
  4685574.163 ±(99.9%) 66123.714 ops/s [Average]
  (min, avg, max) = (4525869.850, 4685574.163, 4888302.379), stdev = 98970.870
  CI (99.9%): [4619450.449, 4751697.878] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fused  thrpt   30  4685574.163 ± 66123.714  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateCompleteCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateCompleteCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 257427.677 ops/s
# Warmup Iteration   2: 529342.954 ops/s
# Warmup Iteration   3: 597280.044 ops/s
# Warmup Iteration   4: 647454.471 ops/s
# Warmup Iteration   5: 611717.793 ops/s
# Warmup Iteration   6: 620062.201 ops/s
# Warmup Iteration   7: 633142.442 ops/s
# Warmup Iteration   8: 610580.971 ops/s
# Warmup Iteration   9: 620767.479 ops/s
# Warmup Iteration  10: 649012.066 ops/s
# Warmup Iteration  11: 598241.801 ops/s
# Warmup Iteration  12: 622206.690 ops/s
# Warmup Iteration  13: 628283.438 ops/s
# Warmup Iteration  14: 638653.480 ops/s
# Warmup Iteration  15: 621093.475 ops/s
# Warmup Iteration  16: 635337.432 ops/s
# Warmup Iteration  17: 663096.131 ops/s
# Warmup Iteration  18: 668224.984 ops/s
# Warmup Iteration  19: 664759.386 ops/s
# Warmup Iteration  20: 670528.603 ops/s
# Warmup Iteration  21: 649293.592 ops/s
# Warmup Iteration  22: 665160.309 ops/s
# Warmup Iteration  23: 672852.462 ops/s
# Warmup Iteration  24: 660728.891 ops/s
# Warmup Iteration  25: 645505.593 ops/s
# Warmup Iteration  26: 684305.167 ops/s
# Warmup Iteration  27: 644759.432 ops/s
# Warmup Iteration  28: 658802.335 ops/s
# Warmup Iteration  29: 688868.790 ops/s
# Warmup Iteration  30: 654641.340 ops/s
Iteration   1: 688630.162 ops/s
Iteration   2: 650602.133 ops/s
Iteration   3: 672262.866 ops/s
Iteration   4: 661883.211 ops/s
Iteration   5: 655778.410 ops/s
Iteration   6: 676380.810 ops/s
Iteration   7: 651879.894 ops/s
Iteration   8: 674166.846 ops/s
Iteration   9: 673444.743 ops/s
Iteration  10: 654714.943 ops/s
Iteration  11: 681034.795 ops/s
Iteration  12: 649380.067 ops/s
Iteration  13: 684837.152 ops/s
Iteration  14: 643974.672 ops/s
Iteration  15: 640748.676 ops/s
Iteration  16: 644777.128 ops/s
Iteration  17: 672206.391 ops/s
Iteration  18: 641989.221 ops/s
Iteration  19: 684918.280 ops/s
Iteration  20: 684943.420 ops/s
Iteration  21: 639300.027 ops/s
Iteration  22: 676925.224 ops/s
Iteration  23: 663010.164 ops/s
Iteration  24: 670563.515 ops/s
Iteration  25: 658597.174 ops/s
Iteration  26: 665783.337 ops/s
Iteration  27: 671354.096 ops/s
Iteration  28: 650506.796 ops/s
Iteration  29: 660976.201 ops/s
Iteration  30: 646877.920 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateCompleteCrash":
  663081.609 ±(99.9%) 10040.480 ops/s [Average]
  (min, avg, max) = (639300.027, 663081.609, 688630.162), stdev = 15028.118
  CI (99.9%): [653041.129, 673122.089] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateCompleteCrash  thrpt   30  663081.609 ± 10040.480  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_emptyDisposerCrashes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_emptyDisposerCrashes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 252759.745 ops/s
# Warmup Iteration   2: 492491.333 ops/s
# Warmup Iteration   3: 572106.072 ops/s
# Warmup Iteration   4: 522352.635 ops/s
# Warmup Iteration   5: 561071.026 ops/s
# Warmup Iteration   6: 511419.803 ops/s
# Warmup Iteration   7: 591104.447 ops/s
# Warmup Iteration   8: 575288.767 ops/s
# Warmup Iteration   9: 582472.437 ops/s
# Warmup Iteration  10: 589183.235 ops/s
# Warmup Iteration  11: 567232.822 ops/s
# Warmup Iteration  12: 592432.107 ops/s
# Warmup Iteration  13: 561561.468 ops/s
# Warmup Iteration  14: 589026.427 ops/s
# Warmup Iteration  15: 600843.741 ops/s
# Warmup Iteration  16: 571501.507 ops/s
# Warmup Iteration  17: 632522.468 ops/s
# Warmup Iteration  18: 610309.237 ops/s
# Warmup Iteration  19: 592068.001 ops/s
# Warmup Iteration  20: 650630.332 ops/s
# Warmup Iteration  21: 570459.699 ops/s
# Warmup Iteration  22: 629668.704 ops/s
# Warmup Iteration  23: 611559.829 ops/s
# Warmup Iteration  24: 603552.246 ops/s
# Warmup Iteration  25: 588016.579 ops/s
# Warmup Iteration  26: 619967.625 ops/s
# Warmup Iteration  27: 586574.933 ops/s
# Warmup Iteration  28: 616691.436 ops/s
# Warmup Iteration  29: 588554.595 ops/s
# Warmup Iteration  30: 606586.292 ops/s
Iteration   1: 624155.731 ops/s
Iteration   2: 593452.441 ops/s
Iteration   3: 605234.815 ops/s
Iteration   4: 605390.789 ops/s
Iteration   5: 628634.166 ops/s
Iteration   6: 600338.259 ops/s
Iteration   7: 636264.236 ops/s
Iteration   8: 616144.662 ops/s
Iteration   9: 608908.350 ops/s
Iteration  10: 622161.807 ops/s
Iteration  11: 606829.152 ops/s
Iteration  12: 617619.737 ops/s
Iteration  13: 596316.428 ops/s
Iteration  14: 606215.106 ops/s
Iteration  15: 621508.935 ops/s
Iteration  16: 609102.182 ops/s
Iteration  17: 602750.808 ops/s
Iteration  18: 622639.496 ops/s
Iteration  19: 595260.369 ops/s
Iteration  20: 617456.706 ops/s
Iteration  21: 600603.496 ops/s
Iteration  22: 628522.997 ops/s
Iteration  23: 610011.083 ops/s
Iteration  24: 623901.064 ops/s
Iteration  25: 590103.811 ops/s
Iteration  26: 477576.488 ops/s
Iteration  27: 626163.597 ops/s
Iteration  28: 602046.542 ops/s
Iteration  29: 602295.901 ops/s
Iteration  30: 628972.012 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_emptyDisposerCrashes":
  607552.705 ±(99.9%) 18336.575 ops/s [Average]
  (min, avg, max) = (477576.488, 607552.705, 636264.236), stdev = 27445.324
  CI (99.9%): [589216.130, 625889.281] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
MaybeUsingTest._Benchmark.benchmark_emptyDisposerCrashes  thrpt   30  607552.705 ± 18336.575  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_collectionSupplierThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_collectionSupplierThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.730 ops/s
# Warmup Iteration   2: 20338.378 ops/s
# Warmup Iteration   3: 62158.450 ops/s
# Warmup Iteration   4: 109288.139 ops/s
# Warmup Iteration   5: 100985.483 ops/s
# Warmup Iteration   6: 113501.610 ops/s
# Warmup Iteration   7: 101946.152 ops/s
# Warmup Iteration   8: 247282.100 ops/s
# Warmup Iteration   9: 295311.471 ops/s
# Warmup Iteration  10: 367005.491 ops/s
# Warmup Iteration  11: 341058.029 ops/s
# Warmup Iteration  12: 363061.586 ops/s
# Warmup Iteration  13: 369997.871 ops/s
# Warmup Iteration  14: 343159.353 ops/s
# Warmup Iteration  15: 371470.146 ops/s
# Warmup Iteration  16: 348756.341 ops/s
# Warmup Iteration  17: 352472.129 ops/s
# Warmup Iteration  18: 361831.491 ops/s
# Warmup Iteration  19: 369310.900 ops/s
# Warmup Iteration  20: 353037.755 ops/s
# Warmup Iteration  21: 363148.695 ops/s
# Warmup Iteration  22: 358442.186 ops/s
# Warmup Iteration  23: 348729.234 ops/s
# Warmup Iteration  24: 368754.585 ops/s
# Warmup Iteration  25: 348061.301 ops/s
# Warmup Iteration  26: 374685.641 ops/s
# Warmup Iteration  27: 357238.678 ops/s
# Warmup Iteration  28: 345620.406 ops/s
# Warmup Iteration  29: 374012.790 ops/s
# Warmup Iteration  30: 357955.579 ops/s
Iteration   1: 349783.794 ops/s
Iteration   2: 368273.912 ops/s
Iteration   3: 350425.305 ops/s
Iteration   4: 358605.392 ops/s
Iteration   5: 372670.662 ops/s
Iteration   6: 353555.858 ops/s
Iteration   7: 372985.482 ops/s
Iteration   8: 370624.741 ops/s
Iteration   9: 358526.088 ops/s
Iteration  10: 360522.204 ops/s
Iteration  11: 349312.064 ops/s
Iteration  12: 362123.781 ops/s
Iteration  13: 367508.309 ops/s
Iteration  14: 355710.780 ops/s
Iteration  15: 364771.948 ops/s
Iteration  16: 351559.230 ops/s
Iteration  17: 376310.675 ops/s
Iteration  18: 370721.443 ops/s
Iteration  19: 348223.788 ops/s
Iteration  20: 371915.156 ops/s
Iteration  21: 350892.065 ops/s
Iteration  22: 362457.661 ops/s
Iteration  23: 365111.309 ops/s
Iteration  24: 367549.406 ops/s
Iteration  25: 355394.090 ops/s
Iteration  26: 371156.163 ops/s
Iteration  27: 355163.419 ops/s
Iteration  28: 364226.481 ops/s
Iteration  29: 342818.216 ops/s
Iteration  30: 360651.188 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_collectionSupplierThrows":
  360985.020 ±(99.9%) 5985.071 ops/s [Average]
  (min, avg, max) = (342818.216, 360985.020, 376310.675), stdev = 8958.174
  CI (99.9%): [354999.949, 366970.092] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableDistinctTest._Benchmark.benchmark_collectionSupplierThrows  thrpt   30  360985.020 ± 5985.071  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_seedFactory$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_seedFactory

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 206999.821 ops/s
# Warmup Iteration   2: 1207582.412 ops/s
# Warmup Iteration   3: 1458009.305 ops/s
# Warmup Iteration   4: 1944737.788 ops/s
# Warmup Iteration   5: 1793095.767 ops/s
# Warmup Iteration   6: 1514763.905 ops/s
# Warmup Iteration   7: 1722885.675 ops/s
# Warmup Iteration   8: 1796794.391 ops/s
# Warmup Iteration   9: 1858768.920 ops/s
# Warmup Iteration  10: 1871775.093 ops/s
# Warmup Iteration  11: 1799715.907 ops/s
# Warmup Iteration  12: 1848359.913 ops/s
# Warmup Iteration  13: 1905688.721 ops/s
# Warmup Iteration  14: 1814954.484 ops/s
# Warmup Iteration  15: 1860142.918 ops/s
# Warmup Iteration  16: 1801583.066 ops/s
# Warmup Iteration  17: 1833440.183 ops/s
# Warmup Iteration  18: 1819884.241 ops/s
# Warmup Iteration  19: 1807230.447 ops/s
# Warmup Iteration  20: 1817470.256 ops/s
# Warmup Iteration  21: 1839687.606 ops/s
# Warmup Iteration  22: 1882128.216 ops/s
# Warmup Iteration  23: 1788984.794 ops/s
# Warmup Iteration  24: 1844503.592 ops/s
# Warmup Iteration  25: 1869077.036 ops/s
# Warmup Iteration  26: 1802760.439 ops/s
# Warmup Iteration  27: 1806671.322 ops/s
# Warmup Iteration  28: 1890370.557 ops/s
# Warmup Iteration  29: 1799402.784 ops/s
# Warmup Iteration  30: 1895090.871 ops/s
Iteration   1: 1871220.136 ops/s
Iteration   2: 1828845.758 ops/s
Iteration   3: 1920664.782 ops/s
Iteration   4: 1781151.172 ops/s
Iteration   5: 1820104.454 ops/s
Iteration   6: 1858022.119 ops/s
Iteration   7: 1779198.239 ops/s
Iteration   8: 1849434.455 ops/s
Iteration   9: 1787028.326 ops/s
Iteration  10: 1784663.652 ops/s
Iteration  11: 1890801.773 ops/s
Iteration  12: 1766164.996 ops/s
Iteration  13: 1851754.586 ops/s
Iteration  14: 1840533.556 ops/s
Iteration  15: 1828583.676 ops/s
Iteration  16: 1879946.689 ops/s
Iteration  17: 1837071.224 ops/s
Iteration  18: 1801284.465 ops/s
Iteration  19: 1881042.145 ops/s
Iteration  20: 1772315.781 ops/s
Iteration  21: 1878603.527 ops/s
Iteration  22: 1775609.013 ops/s
Iteration  23: 1848918.734 ops/s
Iteration  24: 1908478.514 ops/s
Iteration  25: 1820016.947 ops/s
Iteration  26: 1866375.514 ops/s
Iteration  27: 1812481.552 ops/s
Iteration  28: 1869460.766 ops/s
Iteration  29: 1808614.234 ops/s
Iteration  30: 1827800.620 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_seedFactory":
  1834873.047 ±(99.9%) 28449.844 ops/s [Average]
  (min, avg, max) = (1766164.996, 1834873.047, 1920664.782), stdev = 42582.390
  CI (99.9%): [1806423.203, 1863322.890] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ObservableScanTest._Benchmark.benchmark_seedFactory  thrpt   30  1834873.047 ± 28449.844  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_capacityHint$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_capacityHint

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 198288.645 ops/s
# Warmup Iteration   2: 1517367.431 ops/s
# Warmup Iteration   3: 2526944.891 ops/s
# Warmup Iteration   4: 2407841.126 ops/s
# Warmup Iteration   5: 2504111.669 ops/s
# Warmup Iteration   6: 2499965.462 ops/s
# Warmup Iteration   7: 2261353.028 ops/s
# Warmup Iteration   8: 2362309.258 ops/s
# Warmup Iteration   9: 2415175.762 ops/s
# Warmup Iteration  10: 2436755.090 ops/s
# Warmup Iteration  11: 2464428.656 ops/s
# Warmup Iteration  12: 2601102.042 ops/s
# Warmup Iteration  13: 2477409.259 ops/s
# Warmup Iteration  14: 2521265.257 ops/s
# Warmup Iteration  15: 2500562.884 ops/s
# Warmup Iteration  16: 2489684.003 ops/s
# Warmup Iteration  17: 2519191.272 ops/s
# Warmup Iteration  18: 2497679.375 ops/s
# Warmup Iteration  19: 2503919.947 ops/s
# Warmup Iteration  20: 2407278.245 ops/s
# Warmup Iteration  21: 2615429.661 ops/s
# Warmup Iteration  22: 2444992.215 ops/s
# Warmup Iteration  23: 2375368.929 ops/s
# Warmup Iteration  24: 2513985.142 ops/s
# Warmup Iteration  25: 2623586.538 ops/s
# Warmup Iteration  26: 2399091.364 ops/s
# Warmup Iteration  27: 2530745.042 ops/s
# Warmup Iteration  28: 2474803.981 ops/s
# Warmup Iteration  29: 2591644.982 ops/s
# Warmup Iteration  30: 2495610.110 ops/s
Iteration   1: 2508488.255 ops/s
Iteration   2: 2603737.643 ops/s
Iteration   3: 2460426.198 ops/s
Iteration   4: 2421217.865 ops/s
Iteration   5: 2528149.766 ops/s
Iteration   6: 2441638.789 ops/s
Iteration   7: 2438145.906 ops/s
Iteration   8: 2604868.091 ops/s
Iteration   9: 2444865.077 ops/s
Iteration  10: 2506274.102 ops/s
Iteration  11: 2590914.423 ops/s
Iteration  12: 2465737.012 ops/s
Iteration  13: 2553469.273 ops/s
Iteration  14: 2570227.903 ops/s
Iteration  15: 2470003.016 ops/s
Iteration  16: 2575927.716 ops/s
Iteration  17: 2041695.155 ops/s
Iteration  18: 2469489.253 ops/s
Iteration  19: 2494390.738 ops/s
Iteration  20: 2576369.801 ops/s
Iteration  21: 2535841.999 ops/s
Iteration  22: 2422196.828 ops/s
Iteration  23: 2521983.805 ops/s
Iteration  24: 2536242.295 ops/s
Iteration  25: 2507277.655 ops/s
Iteration  26: 2552960.658 ops/s
Iteration  27: 2420863.595 ops/s
Iteration  28: 2512330.834 ops/s
Iteration  29: 2482082.319 ops/s
Iteration  30: 2464191.433 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_capacityHint":
  2490733.580 ±(99.9%) 67825.896 ops/s [Average]
  (min, avg, max) = (2041695.155, 2490733.580, 2604868.091), stdev = 101518.616
  CI (99.9%): [2422907.684, 2558559.476] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ObservableToListTest._Benchmark.benchmark_capacityHint  thrpt   30  2490733.580 ± 67825.896  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnored$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnored

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1388289.745 ops/s
# Warmup Iteration   2: 3546115.901 ops/s
# Warmup Iteration   3: 3931540.844 ops/s
# Warmup Iteration   4: 4477722.815 ops/s
# Warmup Iteration   5: 4673494.588 ops/s
# Warmup Iteration   6: 4484413.089 ops/s
# Warmup Iteration   7: 4585471.024 ops/s
# Warmup Iteration   8: 4648246.036 ops/s
# Warmup Iteration   9: 4563700.125 ops/s
# Warmup Iteration  10: 4461048.785 ops/s
# Warmup Iteration  11: 4592179.534 ops/s
# Warmup Iteration  12: 4556174.602 ops/s
# Warmup Iteration  13: 4561221.138 ops/s
# Warmup Iteration  14: 4703341.465 ops/s
# Warmup Iteration  15: 4453536.214 ops/s
# Warmup Iteration  16: 4547642.999 ops/s
# Warmup Iteration  17: 4753258.886 ops/s
# Warmup Iteration  18: 4471703.644 ops/s
# Warmup Iteration  19: 4515487.892 ops/s
# Warmup Iteration  20: 4712109.531 ops/s
# Warmup Iteration  21: 4405823.423 ops/s
# Warmup Iteration  22: 4673542.081 ops/s
# Warmup Iteration  23: 4605475.856 ops/s
# Warmup Iteration  24: 4316946.953 ops/s
# Warmup Iteration  25: 4696507.742 ops/s
# Warmup Iteration  26: 4730326.288 ops/s
# Warmup Iteration  27: 4457999.181 ops/s
# Warmup Iteration  28: 4653257.677 ops/s
# Warmup Iteration  29: 4490962.350 ops/s
# Warmup Iteration  30: 4654559.090 ops/s
Iteration   1: 4606049.289 ops/s
Iteration   2: 4449354.516 ops/s
Iteration   3: 4574828.791 ops/s
Iteration   4: 4717837.663 ops/s
Iteration   5: 4429138.564 ops/s
Iteration   6: 4691334.075 ops/s
Iteration   7: 4712048.294 ops/s
Iteration   8: 4512689.888 ops/s
Iteration   9: 4727179.339 ops/s
Iteration  10: 4779883.708 ops/s
Iteration  11: 4389558.562 ops/s
Iteration  12: 4744690.474 ops/s
Iteration  13: 4477854.079 ops/s
Iteration  14: 4601215.926 ops/s
Iteration  15: 4681968.123 ops/s
Iteration  16: 4602729.075 ops/s
Iteration  17: 4567747.678 ops/s
Iteration  18: 4643442.491 ops/s
Iteration  19: 4535440.727 ops/s
Iteration  20: 4615905.359 ops/s
Iteration  21: 4536152.268 ops/s
Iteration  22: 4687096.543 ops/s
Iteration  23: 4619560.534 ops/s
Iteration  24: 4501062.310 ops/s
Iteration  25: 4671992.039 ops/s
Iteration  26: 4471099.254 ops/s
Iteration  27: 4745811.328 ops/s
Iteration  28: 4623260.518 ops/s
Iteration  29: 4564375.410 ops/s
Iteration  30: 4650195.340 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnored":
  4604383.405 ±(99.9%) 68669.844 ops/s [Average]
  (min, avg, max) = (4389558.562, 4604383.405, 4779883.708), stdev = 102781.798
  CI (99.9%): [4535713.561, 4673053.250] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_upstreamIsProcessedButIgnored  thrpt   30  4604383.405 ± 68669.844  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 749515.752 ops/s
# Warmup Iteration   2: 4397996.046 ops/s
# Warmup Iteration   3: 4745347.588 ops/s
# Warmup Iteration   4: 5989297.149 ops/s
# Warmup Iteration   5: 6210755.771 ops/s
# Warmup Iteration   6: 5707557.954 ops/s
# Warmup Iteration   7: 6076955.672 ops/s
# Warmup Iteration   8: 5772463.196 ops/s
# Warmup Iteration   9: 6097703.263 ops/s
# Warmup Iteration  10: 6032018.564 ops/s
# Warmup Iteration  11: 5779568.176 ops/s
# Warmup Iteration  12: 5963336.600 ops/s
# Warmup Iteration  13: 6117920.419 ops/s
# Warmup Iteration  14: 5885127.186 ops/s
# Warmup Iteration  15: 6055878.570 ops/s
# Warmup Iteration  16: 6109881.010 ops/s
# Warmup Iteration  17: 5728861.212 ops/s
# Warmup Iteration  18: 6122186.801 ops/s
# Warmup Iteration  19: 5835276.726 ops/s
# Warmup Iteration  20: 6058131.418 ops/s
# Warmup Iteration  21: 5804396.520 ops/s
# Warmup Iteration  22: 5839583.482 ops/s
# Warmup Iteration  23: 6185861.791 ops/s
# Warmup Iteration  24: 5807090.575 ops/s
# Warmup Iteration  25: 5804196.257 ops/s
# Warmup Iteration  26: 6073084.144 ops/s
# Warmup Iteration  27: 5771564.033 ops/s
# Warmup Iteration  28: 6094879.225 ops/s
# Warmup Iteration  29: 6288134.076 ops/s
# Warmup Iteration  30: 5877990.491 ops/s
Iteration   1: 5933816.074 ops/s
Iteration   2: 6051312.715 ops/s
Iteration   3: 5800616.424 ops/s
Iteration   4: 5908891.979 ops/s
Iteration   5: 5798175.439 ops/s
Iteration   6: 5779212.093 ops/s
Iteration   7: 6032421.999 ops/s
Iteration   8: 5823115.757 ops/s
Iteration   9: 6120647.168 ops/s
Iteration  10: 5765393.914 ops/s
Iteration  11: 4964920.441 ops/s
Iteration  12: 5739207.068 ops/s
Iteration  13: 5842036.925 ops/s
Iteration  14: 5861369.627 ops/s
Iteration  15: 6007764.137 ops/s
Iteration  16: 5904808.399 ops/s
Iteration  17: 5868574.096 ops/s
Iteration  18: 6074521.735 ops/s
Iteration  19: 5883067.459 ops/s
Iteration  20: 5965618.599 ops/s
Iteration  21: 5844825.700 ops/s
Iteration  22: 6051517.773 ops/s
Iteration  23: 5888834.958 ops/s
Iteration  24: 5895963.962 ops/s
Iteration  25: 6065111.147 ops/s
Iteration  26: 5962331.482 ops/s
Iteration  27: 5784331.093 ops/s
Iteration  28: 6023320.889 ops/s
Iteration  29: 5832814.946 ops/s
Iteration  30: 5992412.533 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_disposed":
  5882231.884 ±(99.9%) 135420.040 ops/s [Average]
  (min, avg, max) = (4964920.441, 5882231.884, 6120647.168), stdev = 202690.356
  CI (99.9%): [5746811.845, 6017651.924] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_disposed  thrpt   30  5882231.884 ± 135420.040  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_basic$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_basic

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 418283.696 ops/s
# Warmup Iteration   2: 1840916.198 ops/s
# Warmup Iteration   3: 3906479.047 ops/s
# Warmup Iteration   4: 3841241.372 ops/s
# Warmup Iteration   5: 4023208.073 ops/s
# Warmup Iteration   6: 3704968.612 ops/s
# Warmup Iteration   7: 3325214.321 ops/s
# Warmup Iteration   8: 3913029.113 ops/s
# Warmup Iteration   9: 3953872.847 ops/s
# Warmup Iteration  10: 3799207.536 ops/s
# Warmup Iteration  11: 4021675.910 ops/s
# Warmup Iteration  12: 3807338.696 ops/s
# Warmup Iteration  13: 4075153.247 ops/s
# Warmup Iteration  14: 3852944.365 ops/s
# Warmup Iteration  15: 3819327.907 ops/s
# Warmup Iteration  16: 4081607.731 ops/s
# Warmup Iteration  17: 4086065.193 ops/s
# Warmup Iteration  18: 3797703.175 ops/s
# Warmup Iteration  19: 3958480.223 ops/s
# Warmup Iteration  20: 3804298.149 ops/s
# Warmup Iteration  21: 3969154.878 ops/s
# Warmup Iteration  22: 3817503.529 ops/s
# Warmup Iteration  23: 3888887.813 ops/s
# Warmup Iteration  24: 3905514.984 ops/s
# Warmup Iteration  25: 4016203.045 ops/s
# Warmup Iteration  26: 3819774.682 ops/s
# Warmup Iteration  27: 3865536.096 ops/s
# Warmup Iteration  28: 3986798.767 ops/s
# Warmup Iteration  29: 3803465.770 ops/s
# Warmup Iteration  30: 4020813.713 ops/s
Iteration   1: 3757377.865 ops/s
Iteration   2: 3900701.733 ops/s
Iteration   3: 4136889.196 ops/s
Iteration   4: 3783392.828 ops/s
Iteration   5: 4039360.638 ops/s
Iteration   6: 3720218.806 ops/s
Iteration   7: 3930443.945 ops/s
Iteration   8: 3804289.728 ops/s
Iteration   9: 3879038.077 ops/s
Iteration  10: 3996067.299 ops/s
Iteration  11: 3827479.018 ops/s
Iteration  12: 4015781.980 ops/s
Iteration  13: 3931899.317 ops/s
Iteration  14: 3896693.926 ops/s
Iteration  15: 3883528.562 ops/s
Iteration  16: 3890837.122 ops/s
Iteration  17: 4029169.714 ops/s
Iteration  18: 3874759.867 ops/s
Iteration  19: 3849730.628 ops/s
Iteration  20: 4160956.384 ops/s
Iteration  21: 3766634.721 ops/s
Iteration  22: 4021173.632 ops/s
Iteration  23: 3843119.923 ops/s
Iteration  24: 4009823.654 ops/s
Iteration  25: 3782033.352 ops/s
Iteration  26: 4028146.050 ops/s
Iteration  27: 3993342.851 ops/s
Iteration  28: 3783058.880 ops/s
Iteration  29: 4039988.696 ops/s
Iteration  30: 3860197.889 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_basic":
  3914537.876 ±(99.9%) 76968.724 ops/s [Average]
  (min, avg, max) = (3720218.806, 3914537.876, 4160956.384), stdev = 115203.171
  CI (99.9%): [3837569.152, 3991506.600] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_basic  thrpt   30  3914537.876 ± 76968.724  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 210546.885 ops/s
# Warmup Iteration   2: 1142601.383 ops/s
# Warmup Iteration   3: 2361060.224 ops/s
# Warmup Iteration   4: 2196038.598 ops/s
# Warmup Iteration   5: 2706903.084 ops/s
# Warmup Iteration   6: 2593563.558 ops/s
# Warmup Iteration   7: 2612810.411 ops/s
# Warmup Iteration   8: 2644378.001 ops/s
# Warmup Iteration   9: 2554671.451 ops/s
# Warmup Iteration  10: 2601844.825 ops/s
# Warmup Iteration  11: 2648820.801 ops/s
# Warmup Iteration  12: 2578050.499 ops/s
# Warmup Iteration  13: 2572158.646 ops/s
# Warmup Iteration  14: 2697861.736 ops/s
# Warmup Iteration  15: 2579466.268 ops/s
# Warmup Iteration  16: 2692109.215 ops/s
# Warmup Iteration  17: 2572166.450 ops/s
# Warmup Iteration  18: 2604062.180 ops/s
# Warmup Iteration  19: 2647678.249 ops/s
# Warmup Iteration  20: 2677841.429 ops/s
# Warmup Iteration  21: 2709152.521 ops/s
# Warmup Iteration  22: 2562842.729 ops/s
# Warmup Iteration  23: 2719440.810 ops/s
# Warmup Iteration  24: 2700406.703 ops/s
# Warmup Iteration  25: 2521168.274 ops/s
# Warmup Iteration  26: 2667405.544 ops/s
# Warmup Iteration  27: 2604030.338 ops/s
# Warmup Iteration  28: 2670583.199 ops/s
# Warmup Iteration  29: 2742954.346 ops/s
# Warmup Iteration  30: 2578737.243 ops/s
Iteration   1: 2657913.151 ops/s
Iteration   2: 2618253.217 ops/s
Iteration   3: 2609844.420 ops/s
Iteration   4: 2658648.381 ops/s
Iteration   5: 2531786.708 ops/s
Iteration   6: 2142826.072 ops/s
Iteration   7: 2584435.038 ops/s
Iteration   8: 2609571.833 ops/s
Iteration   9: 2658987.503 ops/s
Iteration  10: 2613967.867 ops/s
Iteration  11: 2678643.341 ops/s
Iteration  12: 2559929.336 ops/s
Iteration  13: 2691253.997 ops/s
Iteration  14: 2627178.427 ops/s
Iteration  15: 2629942.003 ops/s
Iteration  16: 2704791.910 ops/s
Iteration  17: 2537284.691 ops/s
Iteration  18: 2731086.300 ops/s
Iteration  19: 2547971.086 ops/s
Iteration  20: 2679299.655 ops/s
Iteration  21: 2729389.528 ops/s
Iteration  22: 2587401.234 ops/s
Iteration  23: 2660378.415 ops/s
Iteration  24: 2646198.505 ops/s
Iteration  25: 2734496.673 ops/s
Iteration  26: 2530968.854 ops/s
Iteration  27: 2730453.713 ops/s
Iteration  28: 2635432.607 ops/s
Iteration  29: 2574857.515 ops/s
Iteration  30: 2637916.457 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableLatest":
  2618036.948 ±(99.9%) 72326.874 ops/s [Average]
  (min, avg, max) = (2142826.072, 2618036.948, 2734496.673), stdev = 108255.468
  CI (99.9%): [2545710.074, 2690363.822] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableToXTest._Benchmark.benchmark_toFlowableLatest  thrpt   30  2618036.948 ± 72326.874  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.780 ops/s
# Warmup Iteration   2: 27413.896 ops/s
# Warmup Iteration   3: 96989.983 ops/s
# Warmup Iteration   4: 144885.975 ops/s
# Warmup Iteration   5: 329537.765 ops/s
# Warmup Iteration   6: 487602.857 ops/s
# Warmup Iteration   7: 528149.606 ops/s
# Warmup Iteration   8: 563582.312 ops/s
# Warmup Iteration   9: 552908.047 ops/s
# Warmup Iteration  10: 564492.968 ops/s
# Warmup Iteration  11: 545818.789 ops/s
# Warmup Iteration  12: 564333.407 ops/s
# Warmup Iteration  13: 581411.236 ops/s
# Warmup Iteration  14: 552714.908 ops/s
# Warmup Iteration  15: 583807.887 ops/s
# Warmup Iteration  16: 580073.641 ops/s
# Warmup Iteration  17: 561897.433 ops/s
# Warmup Iteration  18: 575700.011 ops/s
# Warmup Iteration  19: 560165.941 ops/s
# Warmup Iteration  20: 583679.396 ops/s
# Warmup Iteration  21: 570253.117 ops/s
# Warmup Iteration  22: 574371.118 ops/s
# Warmup Iteration  23: 556937.698 ops/s
# Warmup Iteration  24: 571009.913 ops/s
# Warmup Iteration  25: 586357.153 ops/s
# Warmup Iteration  26: 545526.035 ops/s
# Warmup Iteration  27: 561418.427 ops/s
# Warmup Iteration  28: 571712.345 ops/s
# Warmup Iteration  29: 561852.589 ops/s
# Warmup Iteration  30: 579354.494 ops/s
Iteration   1: 582951.292 ops/s
Iteration   2: 569402.319 ops/s
Iteration   3: 568072.334 ops/s
Iteration   4: 582653.877 ops/s
Iteration   5: 556564.155 ops/s
Iteration   6: 545676.052 ops/s
Iteration   7: 565525.960 ops/s
Iteration   8: 586600.613 ops/s
Iteration   9: 558847.635 ops/s
Iteration  10: 570380.833 ops/s
Iteration  11: 566910.783 ops/s
Iteration  12: 569984.910 ops/s
Iteration  13: 578462.936 ops/s
Iteration  14: 556833.794 ops/s
Iteration  15: 562004.321 ops/s
Iteration  16: 590318.987 ops/s
Iteration  17: 563230.342 ops/s
Iteration  18: 572128.892 ops/s
Iteration  19: 584455.082 ops/s
Iteration  20: 554459.317 ops/s
Iteration  21: 578683.431 ops/s
Iteration  22: 559114.814 ops/s
Iteration  23: 577654.467 ops/s
Iteration  24: 545171.305 ops/s
Iteration  25: 581918.805 ops/s
Iteration  26: 587529.124 ops/s
Iteration  27: 562907.502 ops/s
Iteration  28: 585466.246 ops/s
Iteration  29: 549594.200 ops/s
Iteration  30: 574512.042 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_dispose":
  569600.546 ±(99.9%) 8592.015 ops/s [Average]
  (min, avg, max) = (545171.305, 569600.546, 590318.987), stdev = 12860.124
  CI (99.9%): [561008.531, 578192.560] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
ObservableMapTest._Benchmark.benchmark_dispose  thrpt   30  569600.546 ± 8592.015  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_capacityHintObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_capacityHintObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 226843.214 ops/s
# Warmup Iteration   2: 1408028.106 ops/s
# Warmup Iteration   3: 1903322.896 ops/s
# Warmup Iteration   4: 2451067.145 ops/s
# Warmup Iteration   5: 2393075.777 ops/s
# Warmup Iteration   6: 2552773.811 ops/s
# Warmup Iteration   7: 2446619.099 ops/s
# Warmup Iteration   8: 2434232.937 ops/s
# Warmup Iteration   9: 2410022.431 ops/s
# Warmup Iteration  10: 2446794.560 ops/s
# Warmup Iteration  11: 2437577.203 ops/s
# Warmup Iteration  12: 2407519.390 ops/s
# Warmup Iteration  13: 2431199.141 ops/s
# Warmup Iteration  14: 2538615.502 ops/s
# Warmup Iteration  15: 2360216.289 ops/s
# Warmup Iteration  16: 2515652.560 ops/s
# Warmup Iteration  17: 2416806.588 ops/s
# Warmup Iteration  18: 2435543.379 ops/s
# Warmup Iteration  19: 2421414.090 ops/s
# Warmup Iteration  20: 2447646.947 ops/s
# Warmup Iteration  21: 2497095.189 ops/s
# Warmup Iteration  22: 2360775.148 ops/s
# Warmup Iteration  23: 2479568.141 ops/s
# Warmup Iteration  24: 2393931.565 ops/s
# Warmup Iteration  25: 2387283.430 ops/s
# Warmup Iteration  26: 2402027.259 ops/s
# Warmup Iteration  27: 2446500.778 ops/s
# Warmup Iteration  28: 2401036.127 ops/s
# Warmup Iteration  29: 2229220.030 ops/s
# Warmup Iteration  30: 2151351.662 ops/s
Iteration   1: 2404607.333 ops/s
Iteration   2: 2478082.279 ops/s
Iteration   3: 2395841.941 ops/s
Iteration   4: 2492236.868 ops/s
Iteration   5: 2348485.874 ops/s
Iteration   6: 2369444.853 ops/s
Iteration   7: 2489891.904 ops/s
Iteration   8: 2443562.419 ops/s
Iteration   9: 2495290.130 ops/s
Iteration  10: 2365268.184 ops/s
Iteration  11: 2459187.520 ops/s
Iteration  12: 2423453.284 ops/s
Iteration  13: 2463753.749 ops/s
Iteration  14: 2418213.980 ops/s
Iteration  15: 2397778.211 ops/s
Iteration  16: 2496014.171 ops/s
Iteration  17: 2385430.493 ops/s
Iteration  18: 2436063.383 ops/s
Iteration  19: 2426288.721 ops/s
Iteration  20: 2424315.880 ops/s
Iteration  21: 2488914.254 ops/s
Iteration  22: 2337234.634 ops/s
Iteration  23: 2552434.823 ops/s
Iteration  24: 2375700.932 ops/s
Iteration  25: 2513723.406 ops/s
Iteration  26: 2391993.068 ops/s
Iteration  27: 2454188.463 ops/s
Iteration  28: 2427354.781 ops/s
Iteration  29: 2437240.259 ops/s
Iteration  30: 2444365.215 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_capacityHintObservable":
  2434545.367 ±(99.9%) 34842.500 ops/s [Average]
  (min, avg, max) = (2337234.634, 2434545.367, 2552434.823), stdev = 52150.618
  CI (99.9%): [2399702.867, 2469387.867] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableToListTest._Benchmark.benchmark_capacityHintObservable  thrpt   30  2434545.367 ± 34842.500  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 243296.028 ops/s
# Warmup Iteration   2: 2347229.624 ops/s
# Warmup Iteration   3: 2783490.991 ops/s
# Warmup Iteration   4: 3493729.382 ops/s
# Warmup Iteration   5: 3371247.351 ops/s
# Warmup Iteration   6: 3394684.460 ops/s
# Warmup Iteration   7: 3482321.292 ops/s
# Warmup Iteration   8: 3435694.117 ops/s
# Warmup Iteration   9: 3285690.552 ops/s
# Warmup Iteration  10: 3475272.316 ops/s
# Warmup Iteration  11: 3445425.238 ops/s
# Warmup Iteration  12: 3354793.629 ops/s
# Warmup Iteration  13: 3504994.624 ops/s
# Warmup Iteration  14: 3349900.488 ops/s
# Warmup Iteration  15: 3383968.446 ops/s
# Warmup Iteration  16: 3498202.135 ops/s
# Warmup Iteration  17: 3330799.835 ops/s
# Warmup Iteration  18: 3538006.080 ops/s
# Warmup Iteration  19: 3502338.633 ops/s
# Warmup Iteration  20: 3419854.373 ops/s
# Warmup Iteration  21: 3520202.209 ops/s
# Warmup Iteration  22: 3344426.440 ops/s
# Warmup Iteration  23: 3510603.351 ops/s
# Warmup Iteration  24: 3388756.860 ops/s
# Warmup Iteration  25: 3331185.413 ops/s
# Warmup Iteration  26: 3413031.205 ops/s
# Warmup Iteration  27: 3532636.808 ops/s
# Warmup Iteration  28: 3275580.374 ops/s
# Warmup Iteration  29: 3597685.186 ops/s
# Warmup Iteration  30: 3285762.600 ops/s
Iteration   1: 3551857.431 ops/s
Iteration   2: 3546662.237 ops/s
Iteration   3: 3411846.714 ops/s
Iteration   4: 3388866.046 ops/s
Iteration   5: 3501303.262 ops/s
Iteration   6: 3385114.349 ops/s
Iteration   7: 3553723.718 ops/s
Iteration   8: 3335468.340 ops/s
Iteration   9: 3410470.410 ops/s
Iteration  10: 3487572.315 ops/s
Iteration  11: 3381829.663 ops/s
Iteration  12: 3481016.772 ops/s
Iteration  13: 3424360.015 ops/s
Iteration  14: 3381700.418 ops/s
Iteration  15: 3486789.560 ops/s
Iteration  16: 3364296.878 ops/s
Iteration  17: 3425684.074 ops/s
Iteration  18: 3566212.172 ops/s
Iteration  19: 3302657.774 ops/s
Iteration  20: 3454194.074 ops/s
Iteration  21: 2681512.487 ops/s
Iteration  22: 3415090.972 ops/s
Iteration  23: 3443984.255 ops/s
Iteration  24: 3439728.375 ops/s
Iteration  25: 3494190.939 ops/s
Iteration  26: 3284053.498 ops/s
Iteration  27: 3414397.611 ops/s
Iteration  28: 3409432.573 ops/s
Iteration  29: 3384475.387 ops/s
Iteration  30: 3528860.658 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_normal":
  3411245.099 ±(99.9%) 104085.652 ops/s [Average]
  (min, avg, max) = (2681512.487, 3411245.099, 3566212.172), stdev = 155790.516
  CI (99.9%): [3307159.447, 3515330.752] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
FlowableConcatWithCompletableTest._Benchmark.benchmark_normal  thrpt   30  3411245.099 ± 104085.652  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_reduceWithSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_reduceWithSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.699 ops/s
# Warmup Iteration   2: 30319.524 ops/s
# Warmup Iteration   3: 89659.144 ops/s
# Warmup Iteration   4: 123072.736 ops/s
# Warmup Iteration   5: 173822.121 ops/s
# Warmup Iteration   6: 418471.292 ops/s
# Warmup Iteration   7: 407492.845 ops/s
# Warmup Iteration   8: 443568.928 ops/s
# Warmup Iteration   9: 494683.456 ops/s
# Warmup Iteration  10: 474685.864 ops/s
# Warmup Iteration  11: 485695.963 ops/s
# Warmup Iteration  12: 478952.368 ops/s
# Warmup Iteration  13: 487543.380 ops/s
# Warmup Iteration  14: 491917.138 ops/s
# Warmup Iteration  15: 476045.862 ops/s
# Warmup Iteration  16: 495870.683 ops/s
# Warmup Iteration  17: 467436.722 ops/s
# Warmup Iteration  18: 479670.376 ops/s
# Warmup Iteration  19: 488250.207 ops/s
# Warmup Iteration  20: 481813.502 ops/s
# Warmup Iteration  21: 480703.499 ops/s
# Warmup Iteration  22: 472796.480 ops/s
# Warmup Iteration  23: 498523.853 ops/s
# Warmup Iteration  24: 491939.823 ops/s
# Warmup Iteration  25: 476214.942 ops/s
# Warmup Iteration  26: 488556.922 ops/s
# Warmup Iteration  27: 479642.254 ops/s
# Warmup Iteration  28: 481757.472 ops/s
# Warmup Iteration  29: 495594.884 ops/s
# Warmup Iteration  30: 488552.015 ops/s
Iteration   1: 494021.402 ops/s
Iteration   2: 486505.986 ops/s
Iteration   3: 470575.420 ops/s
Iteration   4: 480591.148 ops/s
Iteration   5: 489505.972 ops/s
Iteration   6: 468992.833 ops/s
Iteration   7: 492211.741 ops/s
Iteration   8: 489867.286 ops/s
Iteration   9: 488050.516 ops/s
Iteration  10: 482455.063 ops/s
Iteration  11: 468516.595 ops/s
Iteration  12: 505908.563 ops/s
Iteration  13: 479661.545 ops/s
Iteration  14: 459784.149 ops/s
Iteration  15: 474739.605 ops/s
Iteration  16: 494191.326 ops/s
Iteration  17: 475546.878 ops/s
Iteration  18: 500007.862 ops/s
Iteration  19: 498894.164 ops/s
Iteration  20: 476106.410 ops/s
Iteration  21: 487814.019 ops/s
Iteration  22: 468384.590 ops/s
Iteration  23: 502997.901 ops/s
Iteration  24: 489010.963 ops/s
Iteration  25: 467143.065 ops/s
Iteration  26: 495582.327 ops/s
Iteration  27: 462924.590 ops/s
Iteration  28: 493191.472 ops/s
Iteration  29: 494835.141 ops/s
Iteration  30: 482443.621 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_reduceWithSingle":
  484015.405 ±(99.9%) 8333.973 ops/s [Average]
  (min, avg, max) = (459784.149, 484015.405, 505908.563), stdev = 12473.899
  CI (99.9%): [475681.432, 492349.378] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ObservableReduceTest._Benchmark.benchmark_reduceWithSingle  thrpt   30  484015.405 ± 8333.973  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipTest._Benchmark.benchmark_requestOverflowDoesNotOccur$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipTest._Benchmark.benchmark_requestOverflowDoesNotOccur

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1043034.547 ops/s
# Warmup Iteration   2: 2994352.674 ops/s
# Warmup Iteration   3: 3634491.934 ops/s
# Warmup Iteration   4: 4256936.630 ops/s
# Warmup Iteration   5: 4285292.443 ops/s
# Warmup Iteration   6: 4082678.340 ops/s
# Warmup Iteration   7: 4241335.799 ops/s
# Warmup Iteration   8: 4214425.473 ops/s
# Warmup Iteration   9: 4128446.548 ops/s
# Warmup Iteration  10: 4437661.898 ops/s
# Warmup Iteration  11: 4127731.061 ops/s
# Warmup Iteration  12: 4313369.717 ops/s
# Warmup Iteration  13: 4111072.370 ops/s
# Warmup Iteration  14: 4333093.115 ops/s
# Warmup Iteration  15: 4142578.872 ops/s
# Warmup Iteration  16: 4251578.567 ops/s
# Warmup Iteration  17: 4117239.317 ops/s
# Warmup Iteration  18: 4121870.877 ops/s
# Warmup Iteration  19: 4321559.634 ops/s
# Warmup Iteration  20: 3767805.619 ops/s
# Warmup Iteration  21: 3894614.199 ops/s
# Warmup Iteration  22: 4391844.577 ops/s
# Warmup Iteration  23: 4326615.929 ops/s
# Warmup Iteration  24: 4185192.570 ops/s
# Warmup Iteration  25: 4274857.451 ops/s
# Warmup Iteration  26: 4189826.859 ops/s
# Warmup Iteration  27: 4154109.382 ops/s
# Warmup Iteration  28: 4243147.109 ops/s
# Warmup Iteration  29: 4423675.183 ops/s
# Warmup Iteration  30: 4270077.250 ops/s
Iteration   1: 4179617.340 ops/s
Iteration   2: 4339902.583 ops/s
Iteration   3: 4131688.839 ops/s
Iteration   4: 4336321.061 ops/s
Iteration   5: 4227598.057 ops/s
Iteration   6: 4193534.791 ops/s
Iteration   7: 4170555.308 ops/s
Iteration   8: 4427035.929 ops/s
Iteration   9: 4130535.476 ops/s
Iteration  10: 4158914.465 ops/s
Iteration  11: 4210609.220 ops/s
Iteration  12: 4129040.289 ops/s
Iteration  13: 4228562.449 ops/s
Iteration  14: 4258895.570 ops/s
Iteration  15: 4229824.833 ops/s
Iteration  16: 4155820.215 ops/s
Iteration  17: 4314849.946 ops/s
Iteration  18: 4151411.898 ops/s
Iteration  19: 4267754.553 ops/s
Iteration  20: 4139392.884 ops/s
Iteration  21: 4212715.806 ops/s
Iteration  22: 4408038.454 ops/s
Iteration  23: 4129069.885 ops/s
Iteration  24: 4308447.974 ops/s
Iteration  25: 4103299.309 ops/s
Iteration  26: 4373867.676 ops/s
Iteration  27: 4330582.077 ops/s
Iteration  28: 4159247.315 ops/s
Iteration  29: 4332905.757 ops/s
Iteration  30: 4266320.393 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipTest._Benchmark.benchmark_requestOverflowDoesNotOccur":
  4233545.345 ±(99.9%) 61520.311 ops/s [Average]
  (min, avg, max) = (4103299.309, 4233545.345, 4427035.929), stdev = 92080.713
  CI (99.9%): [4172025.034, 4295065.656] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableSkipTest._Benchmark.benchmark_requestOverflowDoesNotOccur  thrpt   30  4233545.345 ± 61520.311  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_forEachWile$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_forEachWile

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 940332.152 ops/s
# Warmup Iteration   2: 3789991.354 ops/s
# Warmup Iteration   3: 5268445.826 ops/s
# Warmup Iteration   4: 6072777.429 ops/s
# Warmup Iteration   5: 5916828.477 ops/s
# Warmup Iteration   6: 5950906.614 ops/s
# Warmup Iteration   7: 5877402.813 ops/s
# Warmup Iteration   8: 6032172.301 ops/s
# Warmup Iteration   9: 5953330.891 ops/s
# Warmup Iteration  10: 5846574.243 ops/s
# Warmup Iteration  11: 5955350.924 ops/s
# Warmup Iteration  12: 5965948.007 ops/s
# Warmup Iteration  13: 5858679.262 ops/s
# Warmup Iteration  14: 6067789.168 ops/s
# Warmup Iteration  15: 5862675.546 ops/s
# Warmup Iteration  16: 6088304.082 ops/s
# Warmup Iteration  17: 5855068.075 ops/s
# Warmup Iteration  18: 5973290.817 ops/s
# Warmup Iteration  19: 5837331.487 ops/s
# Warmup Iteration  20: 5880658.652 ops/s
# Warmup Iteration  21: 6047348.291 ops/s
# Warmup Iteration  22: 5885967.673 ops/s
# Warmup Iteration  23: 6016221.831 ops/s
# Warmup Iteration  24: 5871006.762 ops/s
# Warmup Iteration  25: 5711056.446 ops/s
# Warmup Iteration  26: 6244477.033 ops/s
# Warmup Iteration  27: 6181143.860 ops/s
# Warmup Iteration  28: 5777680.756 ops/s
# Warmup Iteration  29: 5957808.121 ops/s
# Warmup Iteration  30: 5784882.130 ops/s
Iteration   1: 6135663.586 ops/s
Iteration   2: 5954184.396 ops/s
Iteration   3: 6126754.824 ops/s
Iteration   4: 5733872.744 ops/s
Iteration   5: 6101856.420 ops/s
Iteration   6: 5988718.046 ops/s
Iteration   7: 5930054.174 ops/s
Iteration   8: 6001788.313 ops/s
Iteration   9: 5930281.972 ops/s
Iteration  10: 5959023.794 ops/s
Iteration  11: 5712135.547 ops/s
Iteration  12: 5988763.436 ops/s
Iteration  13: 5957810.613 ops/s
Iteration  14: 5741527.665 ops/s
Iteration  15: 5886615.559 ops/s
Iteration  16: 5968575.007 ops/s
Iteration  17: 5915619.997 ops/s
Iteration  18: 6201458.944 ops/s
Iteration  19: 5755376.471 ops/s
Iteration  20: 5779391.448 ops/s
Iteration  21: 6009226.413 ops/s
Iteration  22: 5865491.194 ops/s
Iteration  23: 5997405.686 ops/s
Iteration  24: 5905273.694 ops/s
Iteration  25: 5879853.175 ops/s
Iteration  26: 6142534.081 ops/s
Iteration  27: 5586999.283 ops/s
Iteration  28: 6042518.635 ops/s
Iteration  29: 5745696.941 ops/s
Iteration  30: 6158743.785 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_forEachWile":
  5936773.861 ±(99.9%) 100423.997 ops/s [Average]
  (min, avg, max) = (5586999.283, 5936773.861, 6201458.944), stdev = 150309.922
  CI (99.9%): [5836349.864, 6037197.858] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
ObservableForEachTest._Benchmark.benchmark_forEachWile  thrpt   30  5936773.861 ± 100423.997  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105812.161 ops/s
# Warmup Iteration   2: 440417.159 ops/s
# Warmup Iteration   3: 633404.985 ops/s
# Warmup Iteration   4: 578168.809 ops/s
# Warmup Iteration   5: 581503.274 ops/s
# Warmup Iteration   6: 577173.117 ops/s
# Warmup Iteration   7: 601894.452 ops/s
# Warmup Iteration   8: 621498.240 ops/s
# Warmup Iteration   9: 621640.032 ops/s
# Warmup Iteration  10: 604359.090 ops/s
# Warmup Iteration  11: 613865.721 ops/s
# Warmup Iteration  12: 620077.083 ops/s
# Warmup Iteration  13: 610303.307 ops/s
# Warmup Iteration  14: 557019.631 ops/s
# Warmup Iteration  15: 550653.937 ops/s
# Warmup Iteration  16: 599005.230 ops/s
# Warmup Iteration  17: 669793.998 ops/s
# Warmup Iteration  18: 662523.812 ops/s
# Warmup Iteration  19: 629845.092 ops/s
# Warmup Iteration  20: 678591.958 ops/s
# Warmup Iteration  21: 640601.908 ops/s
# Warmup Iteration  22: 644232.378 ops/s
# Warmup Iteration  23: 632355.956 ops/s
# Warmup Iteration  24: 616131.724 ops/s
# Warmup Iteration  25: 662650.346 ops/s
# Warmup Iteration  26: 650518.084 ops/s
# Warmup Iteration  27: 659004.645 ops/s
# Warmup Iteration  28: 639538.570 ops/s
# Warmup Iteration  29: 644912.255 ops/s
# Warmup Iteration  30: 636019.447 ops/s
Iteration   1: 646876.153 ops/s
Iteration   2: 658253.073 ops/s
Iteration   3: 636737.658 ops/s
Iteration   4: 671395.158 ops/s
Iteration   5: 656982.961 ops/s
Iteration   6: 640878.243 ops/s
Iteration   7: 671564.344 ops/s
Iteration   8: 662365.547 ops/s
Iteration   9: 631246.236 ops/s
Iteration  10: 684353.269 ops/s
Iteration  11: 624068.187 ops/s
Iteration  12: 637697.609 ops/s
Iteration  13: 655611.388 ops/s
Iteration  14: 633062.398 ops/s
Iteration  15: 629387.523 ops/s
Iteration  16: 643773.372 ops/s
Iteration  17: 645005.514 ops/s
Iteration  18: 662364.097 ops/s
Iteration  19: 644428.070 ops/s
Iteration  20: 645147.725 ops/s
Iteration  21: 639965.906 ops/s
Iteration  22: 652570.682 ops/s
Iteration  23: 654483.441 ops/s
Iteration  24: 647506.525 ops/s
Iteration  25: 661391.663 ops/s
Iteration  26: 636218.574 ops/s
Iteration  27: 661874.426 ops/s
Iteration  28: 639851.956 ops/s
Iteration  29: 652289.863 ops/s
Iteration  30: 678111.851 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_otherError":
  650182.114 ±(99.9%) 9865.589 ops/s [Average]
  (min, avg, max) = (624068.187, 650182.114, 684353.269), stdev = 14766.350
  CI (99.9%): [640316.525, 660047.703] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableConcatWithSingleTest._Benchmark.benchmark_otherError  thrpt   30  650182.114 ± 9865.589  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedMixedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedMixedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 479466.863 ops/s
# Warmup Iteration   2: 2252993.938 ops/s
# Warmup Iteration   3: 3622262.815 ops/s
# Warmup Iteration   4: 3761088.800 ops/s
# Warmup Iteration   5: 3641597.564 ops/s
# Warmup Iteration   6: 3722149.693 ops/s
# Warmup Iteration   7: 3739336.139 ops/s
# Warmup Iteration   8: 3668573.420 ops/s
# Warmup Iteration   9: 3204841.173 ops/s
# Warmup Iteration  10: 3706168.854 ops/s
# Warmup Iteration  11: 3590326.048 ops/s
# Warmup Iteration  12: 3826913.881 ops/s
# Warmup Iteration  13: 3744327.511 ops/s
# Warmup Iteration  14: 3791717.066 ops/s
# Warmup Iteration  15: 3750495.515 ops/s
# Warmup Iteration  16: 3912460.317 ops/s
# Warmup Iteration  17: 3685327.236 ops/s
# Warmup Iteration  18: 3674402.456 ops/s
# Warmup Iteration  19: 3831989.819 ops/s
# Warmup Iteration  20: 3852913.118 ops/s
# Warmup Iteration  21: 3687221.714 ops/s
# Warmup Iteration  22: 3864243.758 ops/s
# Warmup Iteration  23: 3638422.709 ops/s
# Warmup Iteration  24: 3671818.928 ops/s
# Warmup Iteration  25: 3857004.524 ops/s
# Warmup Iteration  26: 3758693.834 ops/s
# Warmup Iteration  27: 3755087.777 ops/s
# Warmup Iteration  28: 3842654.627 ops/s
# Warmup Iteration  29: 3714934.768 ops/s
# Warmup Iteration  30: 3753236.053 ops/s
Iteration   1: 3804140.989 ops/s
Iteration   2: 3745228.920 ops/s
Iteration   3: 3701288.750 ops/s
Iteration   4: 3704880.035 ops/s
Iteration   5: 3678366.546 ops/s
Iteration   6: 3637963.322 ops/s
Iteration   7: 3827733.500 ops/s
Iteration   8: 3726458.937 ops/s
Iteration   9: 3808100.567 ops/s
Iteration  10: 3842610.554 ops/s
Iteration  11: 3626962.865 ops/s
Iteration  12: 3730638.100 ops/s
Iteration  13: 3751270.333 ops/s
Iteration  14: 3795905.338 ops/s
Iteration  15: 3804170.921 ops/s
Iteration  16: 3670783.026 ops/s
Iteration  17: 3866046.532 ops/s
Iteration  18: 3678464.999 ops/s
Iteration  19: 3636663.847 ops/s
Iteration  20: 3907383.343 ops/s
Iteration  21: 3599963.440 ops/s
Iteration  22: 3939371.332 ops/s
Iteration  23: 3648682.459 ops/s
Iteration  24: 3854551.220 ops/s
Iteration  25: 3790620.740 ops/s
Iteration  26: 3853136.296 ops/s
Iteration  27: 3644966.274 ops/s
Iteration  28: 3807643.689 ops/s
Iteration  29: 3872370.980 ops/s
Iteration  30: 3644680.044 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_syncFusedMixedConditional":
  3753368.263 ±(99.9%) 63086.145 ops/s [Average]
  (min, avg, max) = (3599963.440, 3753368.263, 3939371.332), stdev = 94424.379
  CI (99.9%): [3690282.118, 3816454.408] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_syncFusedMixedConditional  thrpt   30  3753368.263 ± 63086.145  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 50028.080 ops/s
# Warmup Iteration   2: 306848.058 ops/s
# Warmup Iteration   3: 353894.267 ops/s
# Warmup Iteration   4: 309965.631 ops/s
# Warmup Iteration   5: 391346.834 ops/s
# Warmup Iteration   6: 380613.068 ops/s
# Warmup Iteration   7: 387527.050 ops/s
# Warmup Iteration   8: 394851.919 ops/s
# Warmup Iteration   9: 287296.336 ops/s
# Warmup Iteration  10: 398006.927 ops/s
# Warmup Iteration  11: 369086.231 ops/s
# Warmup Iteration  12: 385492.165 ops/s
# Warmup Iteration  13: 379725.060 ops/s
# Warmup Iteration  14: 383434.349 ops/s
# Warmup Iteration  15: 403914.951 ops/s
# Warmup Iteration  16: 364574.870 ops/s
# Warmup Iteration  17: 396779.744 ops/s
# Warmup Iteration  18: 378766.913 ops/s
# Warmup Iteration  19: 393344.919 ops/s
# Warmup Iteration  20: 376444.371 ops/s
# Warmup Iteration  21: 387688.580 ops/s
# Warmup Iteration  22: 392095.118 ops/s
# Warmup Iteration  23: 376352.131 ops/s
# Warmup Iteration  24: 375709.273 ops/s
# Warmup Iteration  25: 401813.909 ops/s
# Warmup Iteration  26: 383456.656 ops/s
# Warmup Iteration  27: 375852.359 ops/s
# Warmup Iteration  28: 388673.856 ops/s
# Warmup Iteration  29: 382515.973 ops/s
# Warmup Iteration  30: 382662.197 ops/s
Iteration   1: 391315.656 ops/s
Iteration   2: 400147.989 ops/s
Iteration   3: 380619.394 ops/s
Iteration   4: 387603.821 ops/s
Iteration   5: 390512.099 ops/s
Iteration   6: 370507.032 ops/s
Iteration   7: 391292.818 ops/s
Iteration   8: 380618.068 ops/s
Iteration   9: 381547.122 ops/s
Iteration  10: 389784.858 ops/s
Iteration  11: 367885.160 ops/s
Iteration  12: 387150.672 ops/s
Iteration  13: 370659.030 ops/s
Iteration  14: 388432.776 ops/s
Iteration  15: 380870.638 ops/s
Iteration  16: 389948.951 ops/s
Iteration  17: 378436.095 ops/s
Iteration  18: 394171.457 ops/s
Iteration  19: 384117.451 ops/s
Iteration  20: 384843.395 ops/s
Iteration  21: 404036.531 ops/s
Iteration  22: 379574.218 ops/s
Iteration  23: 380442.083 ops/s
Iteration  24: 400437.075 ops/s
Iteration  25: 374834.358 ops/s
Iteration  26: 402293.309 ops/s
Iteration  27: 390572.199 ops/s
Iteration  28: 365616.818 ops/s
Iteration  29: 402232.902 ops/s
Iteration  30: 371973.288 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStream":
  385415.909 ±(99.9%) 7056.964 ops/s [Average]
  (min, avg, max) = (365616.818, 385415.909, 404036.531), stdev = 10562.532
  CI (99.9%): [378358.945, 392472.873] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStream  thrpt   30  385415.909 ± 7056.964  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.738 ops/s
# Warmup Iteration   2: 31004.782 ops/s
# Warmup Iteration   3: 99186.980 ops/s
# Warmup Iteration   4: 139536.211 ops/s
# Warmup Iteration   5: 158443.848 ops/s
# Warmup Iteration   6: 154070.866 ops/s
# Warmup Iteration   7: 175843.736 ops/s
# Warmup Iteration   8: 464114.889 ops/s
# Warmup Iteration   9: 509921.932 ops/s
# Warmup Iteration  10: 488764.886 ops/s
# Warmup Iteration  11: 483257.555 ops/s
# Warmup Iteration  12: 489860.434 ops/s
# Warmup Iteration  13: 506187.809 ops/s
# Warmup Iteration  14: 511545.622 ops/s
# Warmup Iteration  15: 487314.756 ops/s
# Warmup Iteration  16: 493751.247 ops/s
# Warmup Iteration  17: 499605.859 ops/s
# Warmup Iteration  18: 492511.477 ops/s
# Warmup Iteration  19: 497383.618 ops/s
# Warmup Iteration  20: 488747.413 ops/s
# Warmup Iteration  21: 504271.082 ops/s
# Warmup Iteration  22: 497648.363 ops/s
# Warmup Iteration  23: 483610.396 ops/s
# Warmup Iteration  24: 491229.059 ops/s
# Warmup Iteration  25: 500142.353 ops/s
# Warmup Iteration  26: 488559.546 ops/s
# Warmup Iteration  27: 489873.809 ops/s
# Warmup Iteration  28: 493029.856 ops/s
# Warmup Iteration  29: 496009.302 ops/s
# Warmup Iteration  30: 484905.920 ops/s
Iteration   1: 501066.348 ops/s
Iteration   2: 502173.505 ops/s
Iteration   3: 486545.177 ops/s
Iteration   4: 505861.952 ops/s
Iteration   5: 480991.210 ops/s
Iteration   6: 504537.948 ops/s
Iteration   7: 498608.405 ops/s
Iteration   8: 498452.272 ops/s
Iteration   9: 514434.004 ops/s
Iteration  10: 483491.225 ops/s
Iteration  11: 488292.151 ops/s
Iteration  12: 511668.789 ops/s
Iteration  13: 483119.389 ops/s
Iteration  14: 491576.014 ops/s
Iteration  15: 497278.146 ops/s
Iteration  16: 486427.219 ops/s
Iteration  17: 504621.263 ops/s
Iteration  18: 491832.986 ops/s
Iteration  19: 498031.857 ops/s
Iteration  20: 489801.521 ops/s
Iteration  21: 494979.231 ops/s
Iteration  22: 504866.279 ops/s
Iteration  23: 491098.062 ops/s
Iteration  24: 495567.448 ops/s
Iteration  25: 490371.017 ops/s
Iteration  26: 511232.680 ops/s
Iteration  27: 482126.752 ops/s
Iteration  28: 475463.957 ops/s
Iteration  29: 499004.774 ops/s
Iteration  30: 484521.639 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSkipOverlap":
  494934.774 ±(99.9%) 6639.683 ops/s [Average]
  (min, avg, max) = (475463.957, 494934.774, 514434.004), stdev = 9937.966
  CI (99.9%): [488295.091, 501574.457] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferSkipOverlap  thrpt   30  494934.774 ± 6639.683  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_syncFusedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_syncFusedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 216283.545 ops/s
# Warmup Iteration   2: 804677.737 ops/s
# Warmup Iteration   3: 1903531.772 ops/s
# Warmup Iteration   4: 2619014.700 ops/s
# Warmup Iteration   5: 2704800.592 ops/s
# Warmup Iteration   6: 2630248.481 ops/s
# Warmup Iteration   7: 2583287.994 ops/s
# Warmup Iteration   8: 2669415.799 ops/s
# Warmup Iteration   9: 2594725.526 ops/s
# Warmup Iteration  10: 2621509.276 ops/s
# Warmup Iteration  11: 2624182.281 ops/s
# Warmup Iteration  12: 2709670.888 ops/s
# Warmup Iteration  13: 2623412.520 ops/s
# Warmup Iteration  14: 2750787.895 ops/s
# Warmup Iteration  15: 2644435.553 ops/s
# Warmup Iteration  16: 2700635.700 ops/s
# Warmup Iteration  17: 2590846.034 ops/s
# Warmup Iteration  18: 2661122.052 ops/s
# Warmup Iteration  19: 2701633.518 ops/s
# Warmup Iteration  20: 2627641.867 ops/s
# Warmup Iteration  21: 2742870.462 ops/s
# Warmup Iteration  22: 2589299.029 ops/s
# Warmup Iteration  23: 2742779.041 ops/s
# Warmup Iteration  24: 2547301.749 ops/s
# Warmup Iteration  25: 2584335.962 ops/s
# Warmup Iteration  26: 2764928.720 ops/s
# Warmup Iteration  27: 2645411.718 ops/s
# Warmup Iteration  28: 2663421.391 ops/s
# Warmup Iteration  29: 2707643.462 ops/s
# Warmup Iteration  30: 2591003.344 ops/s
Iteration   1: 2635730.051 ops/s
Iteration   2: 2555896.947 ops/s
Iteration   3: 2632765.414 ops/s
Iteration   4: 2688065.394 ops/s
Iteration   5: 2558852.809 ops/s
Iteration   6: 2776429.647 ops/s
Iteration   7: 2724398.213 ops/s
Iteration   8: 2614061.779 ops/s
Iteration   9: 2704178.105 ops/s
Iteration  10: 2600196.309 ops/s
Iteration  11: 2621645.292 ops/s
Iteration  12: 2672628.855 ops/s
Iteration  13: 2692447.416 ops/s
Iteration  14: 2649734.637 ops/s
Iteration  15: 2610742.036 ops/s
Iteration  16: 2651364.752 ops/s
Iteration  17: 2699667.877 ops/s
Iteration  18: 2699846.692 ops/s
Iteration  19: 2631146.864 ops/s
Iteration  20: 2709140.850 ops/s
Iteration  21: 2599695.480 ops/s
Iteration  22: 2669429.770 ops/s
Iteration  23: 2650017.988 ops/s
Iteration  24: 2596125.548 ops/s
Iteration  25: 2751329.250 ops/s
Iteration  26: 2575289.592 ops/s
Iteration  27: 2716613.902 ops/s
Iteration  28: 2574799.802 ops/s
Iteration  29: 2677610.384 ops/s
Iteration  30: 2699894.304 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_syncFusedConditional":
  2654658.199 ±(99.9%) 38271.389 ops/s [Average]
  (min, avg, max) = (2555896.947, 2654658.199, 2776429.647), stdev = 57282.817
  CI (99.9%): [2616386.810, 2692929.587] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_syncFusedConditional  thrpt   30  2654658.199 ± 38271.389  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_delayErrorInnerActive$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_delayErrorInnerActive

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76846.105 ops/s
# Warmup Iteration   2: 427001.742 ops/s
# Warmup Iteration   3: 747634.347 ops/s
# Warmup Iteration   4: 755144.157 ops/s
# Warmup Iteration   5: 842889.106 ops/s
# Warmup Iteration   6: 870582.876 ops/s
# Warmup Iteration   7: 895412.847 ops/s
# Warmup Iteration   8: 844384.065 ops/s
# Warmup Iteration   9: 886458.298 ops/s
# Warmup Iteration  10: 875518.614 ops/s
# Warmup Iteration  11: 831380.368 ops/s
# Warmup Iteration  12: 865920.578 ops/s
# Warmup Iteration  13: 856323.285 ops/s
# Warmup Iteration  14: 837597.459 ops/s
# Warmup Iteration  15: 869809.382 ops/s
# Warmup Iteration  16: 863111.294 ops/s
# Warmup Iteration  17: 858982.213 ops/s
# Warmup Iteration  18: 858626.758 ops/s
# Warmup Iteration  19: 908856.465 ops/s
# Warmup Iteration  20: 868478.697 ops/s
# Warmup Iteration  21: 865313.700 ops/s
# Warmup Iteration  22: 876040.481 ops/s
# Warmup Iteration  23: 847203.794 ops/s
# Warmup Iteration  24: 893209.159 ops/s
# Warmup Iteration  25: 861495.627 ops/s
# Warmup Iteration  26: 852731.996 ops/s
# Warmup Iteration  27: 911874.724 ops/s
# Warmup Iteration  28: 858613.250 ops/s
# Warmup Iteration  29: 848715.673 ops/s
# Warmup Iteration  30: 887009.327 ops/s
Iteration   1: 865903.871 ops/s
Iteration   2: 901700.139 ops/s
Iteration   3: 881346.203 ops/s
Iteration   4: 840474.896 ops/s
Iteration   5: 880805.405 ops/s
Iteration   6: 861756.762 ops/s
Iteration   7: 909513.444 ops/s
Iteration   8: 860933.103 ops/s
Iteration   9: 859686.375 ops/s
Iteration  10: 877514.680 ops/s
Iteration  11: 852967.397 ops/s
Iteration  12: 856416.103 ops/s
Iteration  13: 885538.256 ops/s
Iteration  14: 845550.392 ops/s
Iteration  15: 837168.816 ops/s
Iteration  16: 861179.242 ops/s
Iteration  17: 850316.462 ops/s
Iteration  18: 882465.136 ops/s
Iteration  19: 867609.965 ops/s
Iteration  20: 869598.381 ops/s
Iteration  21: 896867.180 ops/s
Iteration  22: 861220.970 ops/s
Iteration  23: 869104.951 ops/s
Iteration  24: 879671.296 ops/s
Iteration  25: 881937.743 ops/s
Iteration  26: 850403.600 ops/s
Iteration  27: 845524.092 ops/s
Iteration  28: 895406.484 ops/s
Iteration  29: 658633.177 ops/s
Iteration  30: 853215.766 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_delayErrorInnerActive":
  861347.676 ±(99.9%) 28401.927 ops/s [Average]
  (min, avg, max) = (658633.177, 861347.676, 909513.444), stdev = 42510.671
  CI (99.9%): [832945.749, 889749.604] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_delayErrorInnerActive  thrpt   30  861347.676 ± 28401.927  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 318980.023 ops/s
# Warmup Iteration   2: 1583175.176 ops/s
# Warmup Iteration   3: 1714640.640 ops/s
# Warmup Iteration   4: 2226532.117 ops/s
# Warmup Iteration   5: 2252197.786 ops/s
# Warmup Iteration   6: 2239885.469 ops/s
# Warmup Iteration   7: 2241619.374 ops/s
# Warmup Iteration   8: 2204937.024 ops/s
# Warmup Iteration   9: 2227952.097 ops/s
# Warmup Iteration  10: 2274260.109 ops/s
# Warmup Iteration  11: 2233669.910 ops/s
# Warmup Iteration  12: 2137549.243 ops/s
# Warmup Iteration  13: 2363434.308 ops/s
# Warmup Iteration  14: 2169304.622 ops/s
# Warmup Iteration  15: 2217003.750 ops/s
# Warmup Iteration  16: 2283956.079 ops/s
# Warmup Iteration  17: 2267276.026 ops/s
# Warmup Iteration  18: 2128099.285 ops/s
# Warmup Iteration  19: 2269568.651 ops/s
# Warmup Iteration  20: 2196952.118 ops/s
# Warmup Iteration  21: 2246455.851 ops/s
# Warmup Iteration  22: 2170965.481 ops/s
# Warmup Iteration  23: 2228030.025 ops/s
# Warmup Iteration  24: 2148838.546 ops/s
# Warmup Iteration  25: 2314229.060 ops/s
# Warmup Iteration  26: 2239391.476 ops/s
# Warmup Iteration  27: 2098312.591 ops/s
# Warmup Iteration  28: 2274880.927 ops/s
# Warmup Iteration  29: 2240671.694 ops/s
# Warmup Iteration  30: 2302980.287 ops/s
Iteration   1: 2181452.209 ops/s
Iteration   2: 2235332.137 ops/s
Iteration   3: 2309435.131 ops/s
Iteration   4: 2161460.399 ops/s
Iteration   5: 2291669.830 ops/s
Iteration   6: 2284691.106 ops/s
Iteration   7: 2168266.199 ops/s
Iteration   8: 2282705.862 ops/s
Iteration   9: 2192428.680 ops/s
Iteration  10: 2289401.277 ops/s
Iteration  11: 2197478.183 ops/s
Iteration  12: 2239346.654 ops/s
Iteration  13: 2319365.627 ops/s
Iteration  14: 2199884.820 ops/s
Iteration  15: 2212645.194 ops/s
Iteration  16: 2244716.197 ops/s
Iteration  17: 2273981.702 ops/s
Iteration  18: 2147585.066 ops/s
Iteration  19: 2227671.383 ops/s
Iteration  20: 2312274.613 ops/s
Iteration  21: 2109628.711 ops/s
Iteration  22: 2204596.341 ops/s
Iteration  23: 2246017.390 ops/s
Iteration  24: 2329300.048 ops/s
Iteration  25: 2203571.777 ops/s
Iteration  26: 2340314.580 ops/s
Iteration  27: 2168548.695 ops/s
Iteration  28: 2277445.535 ops/s
Iteration  29: 2239386.684 ops/s
Iteration  30: 2199829.617 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_cancel":
  2236347.722 ±(99.9%) 39566.898 ops/s [Average]
  (min, avg, max) = (2109628.711, 2236347.722, 2340314.580), stdev = 59221.874
  CI (99.9%): [2196780.824, 2275914.619] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_cancel  thrpt   30  2236347.722 ± 39566.898  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_handlerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_handlerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 68783.588 ops/s
# Warmup Iteration   2: 280908.058 ops/s
# Warmup Iteration   3: 446393.014 ops/s
# Warmup Iteration   4: 468911.470 ops/s
# Warmup Iteration   5: 477782.353 ops/s
# Warmup Iteration   6: 446170.476 ops/s
# Warmup Iteration   7: 458232.877 ops/s
# Warmup Iteration   8: 443622.658 ops/s
# Warmup Iteration   9: 417548.403 ops/s
# Warmup Iteration  10: 403435.812 ops/s
# Warmup Iteration  11: 440067.481 ops/s
# Warmup Iteration  12: 462361.726 ops/s
# Warmup Iteration  13: 476366.715 ops/s
# Warmup Iteration  14: 458806.527 ops/s
# Warmup Iteration  15: 478950.358 ops/s
# Warmup Iteration  16: 480159.840 ops/s
# Warmup Iteration  17: 467436.289 ops/s
# Warmup Iteration  18: 479700.840 ops/s
# Warmup Iteration  19: 504246.328 ops/s
# Warmup Iteration  20: 465445.400 ops/s
# Warmup Iteration  21: 506420.596 ops/s
# Warmup Iteration  22: 468102.533 ops/s
# Warmup Iteration  23: 500887.804 ops/s
# Warmup Iteration  24: 453216.008 ops/s
# Warmup Iteration  25: 480650.179 ops/s
# Warmup Iteration  26: 495847.316 ops/s
# Warmup Iteration  27: 469023.654 ops/s
# Warmup Iteration  28: 488904.961 ops/s
# Warmup Iteration  29: 501217.708 ops/s
# Warmup Iteration  30: 478604.717 ops/s
Iteration   1: 497710.496 ops/s
Iteration   2: 486716.234 ops/s
Iteration   3: 501757.022 ops/s
Iteration   4: 475509.190 ops/s
Iteration   5: 477218.519 ops/s
Iteration   6: 502103.515 ops/s
Iteration   7: 472424.075 ops/s
Iteration   8: 476759.725 ops/s
Iteration   9: 480436.490 ops/s
Iteration  10: 490713.587 ops/s
Iteration  11: 493370.702 ops/s
Iteration  12: 487563.148 ops/s
Iteration  13: 483225.161 ops/s
Iteration  14: 484462.793 ops/s
Iteration  15: 493125.154 ops/s
Iteration  16: 475800.877 ops/s
Iteration  17: 488427.386 ops/s
Iteration  18: 491885.647 ops/s
Iteration  19: 472038.630 ops/s
Iteration  20: 491465.442 ops/s
Iteration  21: 492141.871 ops/s
Iteration  22: 473503.597 ops/s
Iteration  23: 481236.848 ops/s
Iteration  24: 478117.648 ops/s
Iteration  25: 481640.456 ops/s
Iteration  26: 478602.714 ops/s
Iteration  27: 488850.926 ops/s
Iteration  28: 473925.150 ops/s
Iteration  29: 483320.782 ops/s
Iteration  30: 494083.170 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_handlerError":
  484937.899 ±(99.9%) 5802.318 ops/s [Average]
  (min, avg, max) = (472038.630, 484937.899, 502103.515), stdev = 8684.637
  CI (99.9%): [479135.581, 490740.216] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableRepeatTest._Benchmark.benchmark_handlerError  thrpt   30  484937.899 ± 5802.318  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_prefetch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_prefetch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71305.219 ops/s
# Warmup Iteration   2: 378078.196 ops/s
# Warmup Iteration   3: 431060.351 ops/s
# Warmup Iteration   4: 459901.341 ops/s
# Warmup Iteration   5: 484992.900 ops/s
# Warmup Iteration   6: 404605.531 ops/s
# Warmup Iteration   7: 512227.156 ops/s
# Warmup Iteration   8: 476242.018 ops/s
# Warmup Iteration   9: 513877.391 ops/s
# Warmup Iteration  10: 489909.075 ops/s
# Warmup Iteration  11: 476659.553 ops/s
# Warmup Iteration  12: 504636.951 ops/s
# Warmup Iteration  13: 489166.564 ops/s
# Warmup Iteration  14: 475625.328 ops/s
# Warmup Iteration  15: 508015.557 ops/s
# Warmup Iteration  16: 487306.329 ops/s
# Warmup Iteration  17: 495334.661 ops/s
# Warmup Iteration  18: 482750.165 ops/s
# Warmup Iteration  19: 496205.741 ops/s
# Warmup Iteration  20: 482537.802 ops/s
# Warmup Iteration  21: 490979.317 ops/s
# Warmup Iteration  22: 492206.079 ops/s
# Warmup Iteration  23: 485416.948 ops/s
# Warmup Iteration  24: 498933.879 ops/s
# Warmup Iteration  25: 500535.143 ops/s
# Warmup Iteration  26: 469110.399 ops/s
# Warmup Iteration  27: 503831.270 ops/s
# Warmup Iteration  28: 485262.963 ops/s
# Warmup Iteration  29: 487952.554 ops/s
# Warmup Iteration  30: 508474.920 ops/s
Iteration   1: 473503.012 ops/s
Iteration   2: 507200.081 ops/s
Iteration   3: 475518.244 ops/s
Iteration   4: 487857.191 ops/s
Iteration   5: 488057.145 ops/s
Iteration   6: 483659.832 ops/s
Iteration   7: 503317.730 ops/s
Iteration   8: 479263.856 ops/s
Iteration   9: 491132.681 ops/s
Iteration  10: 479404.150 ops/s
Iteration  11: 498654.803 ops/s
Iteration  12: 502364.197 ops/s
Iteration  13: 473586.573 ops/s
Iteration  14: 491567.718 ops/s
Iteration  15: 490000.669 ops/s
Iteration  16: 472003.347 ops/s
Iteration  17: 493200.392 ops/s
Iteration  18: 487795.980 ops/s
Iteration  19: 502979.655 ops/s
Iteration  20: 430079.008 ops/s
Iteration  21: 426376.299 ops/s
Iteration  22: 506033.844 ops/s
Iteration  23: 483406.219 ops/s
Iteration  24: 504028.980 ops/s
Iteration  25: 470094.387 ops/s
Iteration  26: 508119.492 ops/s
Iteration  27: 472934.737 ops/s
Iteration  28: 478767.529 ops/s
Iteration  29: 489742.993 ops/s
Iteration  30: 491913.432 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_prefetch":
  484752.139 ±(99.9%) 12830.366 ops/s [Average]
  (min, avg, max) = (426376.299, 484752.139, 508119.492), stdev = 19203.889
  CI (99.9%): [471921.774, 497582.505] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
ObservableSequenceEqualTest._Benchmark.benchmark_prefetch  thrpt   30  484752.139 ± 12830.366  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 422315.730 ops/s
# Warmup Iteration   2: 2528825.537 ops/s
# Warmup Iteration   3: 4593578.322 ops/s
# Warmup Iteration   4: 4349121.412 ops/s
# Warmup Iteration   5: 4574803.812 ops/s
# Warmup Iteration   6: 4190442.549 ops/s
# Warmup Iteration   7: 4147470.266 ops/s
# Warmup Iteration   8: 4224143.607 ops/s
# Warmup Iteration   9: 4296610.072 ops/s
# Warmup Iteration  10: 4437858.622 ops/s
# Warmup Iteration  11: 4365812.678 ops/s
# Warmup Iteration  12: 4663598.810 ops/s
# Warmup Iteration  13: 4459527.989 ops/s
# Warmup Iteration  14: 4496650.936 ops/s
# Warmup Iteration  15: 4625602.107 ops/s
# Warmup Iteration  16: 4405495.779 ops/s
# Warmup Iteration  17: 4560803.209 ops/s
# Warmup Iteration  18: 4427074.292 ops/s
# Warmup Iteration  19: 4542663.081 ops/s
# Warmup Iteration  20: 4365097.750 ops/s
# Warmup Iteration  21: 4537627.008 ops/s
# Warmup Iteration  22: 4473328.806 ops/s
# Warmup Iteration  23: 4352815.289 ops/s
# Warmup Iteration  24: 4684066.723 ops/s
# Warmup Iteration  25: 4407914.342 ops/s
# Warmup Iteration  26: 4506725.106 ops/s
# Warmup Iteration  27: 4552507.514 ops/s
# Warmup Iteration  28: 4407219.232 ops/s
# Warmup Iteration  29: 4655826.294 ops/s
# Warmup Iteration  30: 4386368.384 ops/s
Iteration   1: 4519629.464 ops/s
Iteration   2: 4502278.551 ops/s
Iteration   3: 4512575.971 ops/s
Iteration   4: 4635198.536 ops/s
Iteration   5: 4478849.705 ops/s
Iteration   6: 4377827.070 ops/s
Iteration   7: 4637110.558 ops/s
Iteration   8: 4406453.474 ops/s
Iteration   9: 4567031.265 ops/s
Iteration  10: 4433266.594 ops/s
Iteration  11: 4748770.379 ops/s
Iteration  12: 4599311.900 ops/s
Iteration  13: 4366394.753 ops/s
Iteration  14: 4653932.958 ops/s
Iteration  15: 4541577.371 ops/s
Iteration  16: 4495392.145 ops/s
Iteration  17: 4490458.760 ops/s
Iteration  18: 4420521.329 ops/s
Iteration  19: 4436198.653 ops/s
Iteration  20: 4528919.378 ops/s
Iteration  21: 4405259.090 ops/s
Iteration  22: 4579196.665 ops/s
Iteration  23: 4416878.867 ops/s
Iteration  24: 4512228.849 ops/s
Iteration  25: 4675019.035 ops/s
Iteration  26: 4436594.413 ops/s
Iteration  27: 4533311.214 ops/s
Iteration  28: 4446257.413 ops/s
Iteration  29: 4521384.505 ops/s
Iteration  30: 4661159.253 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fused":
  4517966.271 ±(99.9%) 65032.090 ops/s [Average]
  (min, avg, max) = (4366394.753, 4517966.271, 4748770.379), stdev = 97336.978
  CI (99.9%): [4452934.181, 4582998.360] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fused  thrpt   30  4517966.271 ± 65032.090  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedStreamAvailableLater$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedStreamAvailableLater

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 293124.428 ops/s
# Warmup Iteration   2: 1288743.839 ops/s
# Warmup Iteration   3: 1949481.314 ops/s
# Warmup Iteration   4: 2439872.976 ops/s
# Warmup Iteration   5: 2668432.431 ops/s
# Warmup Iteration   6: 2579918.609 ops/s
# Warmup Iteration   7: 2489862.535 ops/s
# Warmup Iteration   8: 2573732.520 ops/s
# Warmup Iteration   9: 2448979.800 ops/s
# Warmup Iteration  10: 2571253.933 ops/s
# Warmup Iteration  11: 2580243.870 ops/s
# Warmup Iteration  12: 2481169.781 ops/s
# Warmup Iteration  13: 2616436.414 ops/s
# Warmup Iteration  14: 2517873.201 ops/s
# Warmup Iteration  15: 2574872.547 ops/s
# Warmup Iteration  16: 2531894.014 ops/s
# Warmup Iteration  17: 2527704.753 ops/s
# Warmup Iteration  18: 2677264.601 ops/s
# Warmup Iteration  19: 2530373.770 ops/s
# Warmup Iteration  20: 2587279.382 ops/s
# Warmup Iteration  21: 2489874.392 ops/s
# Warmup Iteration  22: 2477203.363 ops/s
# Warmup Iteration  23: 2613055.436 ops/s
# Warmup Iteration  24: 2437258.426 ops/s
# Warmup Iteration  25: 2572607.205 ops/s
# Warmup Iteration  26: 2533445.432 ops/s
# Warmup Iteration  27: 2663576.196 ops/s
# Warmup Iteration  28: 2469629.027 ops/s
# Warmup Iteration  29: 2542513.833 ops/s
# Warmup Iteration  30: 2600737.524 ops/s
Iteration   1: 2561721.688 ops/s
Iteration   2: 2579016.519 ops/s
Iteration   3: 2495423.203 ops/s
Iteration   4: 2526161.914 ops/s
Iteration   5: 2586951.816 ops/s
Iteration   6: 2468329.064 ops/s
Iteration   7: 2553640.235 ops/s
Iteration   8: 2478048.606 ops/s
Iteration   9: 2489661.042 ops/s
Iteration  10: 2608564.576 ops/s
Iteration  11: 2548216.277 ops/s
Iteration  12: 2623261.681 ops/s
Iteration  13: 2485121.694 ops/s
Iteration  14: 2633223.710 ops/s
Iteration  15: 1962303.238 ops/s
Iteration  16: 2446746.173 ops/s
Iteration  17: 2579038.652 ops/s
Iteration  18: 2508492.599 ops/s
Iteration  19: 2549138.611 ops/s
Iteration  20: 2648599.350 ops/s
Iteration  21: 2434148.931 ops/s
Iteration  22: 2529930.762 ops/s
Iteration  23: 2557146.574 ops/s
Iteration  24: 2590185.743 ops/s
Iteration  25: 2529459.369 ops/s
Iteration  26: 2540788.359 ops/s
Iteration  27: 2592066.627 ops/s
Iteration  28: 2538721.058 ops/s
Iteration  29: 2639057.159 ops/s
Iteration  30: 2536943.538 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedStreamAvailableLater":
  2527336.959 ±(99.9%) 80427.821 ops/s [Average]
  (min, avg, max) = (1962303.238, 2527336.959, 2648599.350), stdev = 120380.585
  CI (99.9%): [2446909.138, 2607764.779] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_fusedStreamAvailableLater  thrpt   30  2527336.959 ± 80427.821  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerErrorFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerErrorFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21923.412 ops/s
# Warmup Iteration   2: 254588.715 ops/s
# Warmup Iteration   3: 341912.873 ops/s
# Warmup Iteration   4: 417835.876 ops/s
# Warmup Iteration   5: 423981.321 ops/s
# Warmup Iteration   6: 407828.308 ops/s
# Warmup Iteration   7: 424572.400 ops/s
# Warmup Iteration   8: 390811.207 ops/s
# Warmup Iteration   9: 370468.705 ops/s
# Warmup Iteration  10: 429975.857 ops/s
# Warmup Iteration  11: 415867.856 ops/s
# Warmup Iteration  12: 414960.319 ops/s
# Warmup Iteration  13: 423229.913 ops/s
# Warmup Iteration  14: 406794.728 ops/s
# Warmup Iteration  15: 427817.567 ops/s
# Warmup Iteration  16: 414268.165 ops/s
# Warmup Iteration  17: 421885.783 ops/s
# Warmup Iteration  18: 431897.803 ops/s
# Warmup Iteration  19: 430991.955 ops/s
# Warmup Iteration  20: 430013.973 ops/s
# Warmup Iteration  21: 418776.186 ops/s
# Warmup Iteration  22: 428849.057 ops/s
# Warmup Iteration  23: 436698.239 ops/s
# Warmup Iteration  24: 416557.801 ops/s
# Warmup Iteration  25: 409294.378 ops/s
# Warmup Iteration  26: 430361.844 ops/s
# Warmup Iteration  27: 420229.225 ops/s
# Warmup Iteration  28: 430369.817 ops/s
# Warmup Iteration  29: 438360.311 ops/s
# Warmup Iteration  30: 417739.328 ops/s
Iteration   1: 443316.890 ops/s
Iteration   2: 416488.765 ops/s
Iteration   3: 426935.008 ops/s
Iteration   4: 436157.987 ops/s
Iteration   5: 420662.719 ops/s
Iteration   6: 433970.282 ops/s
Iteration   7: 425643.200 ops/s
Iteration   8: 423159.253 ops/s
Iteration   9: 415404.366 ops/s
Iteration  10: 432299.624 ops/s
Iteration  11: 432769.698 ops/s
Iteration  12: 426399.379 ops/s
Iteration  13: 433727.137 ops/s
Iteration  14: 416530.224 ops/s
Iteration  15: 438515.487 ops/s
Iteration  16: 440541.336 ops/s
Iteration  17: 417039.606 ops/s
Iteration  18: 437846.585 ops/s
Iteration  19: 421328.741 ops/s
Iteration  20: 425383.001 ops/s
Iteration  21: 436249.629 ops/s
Iteration  22: 404520.540 ops/s
Iteration  23: 417715.161 ops/s
Iteration  24: 431924.903 ops/s
Iteration  25: 406241.549 ops/s
Iteration  26: 436028.943 ops/s
Iteration  27: 404746.619 ops/s
Iteration  28: 414079.634 ops/s
Iteration  29: 438089.807 ops/s
Iteration  30: 409323.414 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_innerErrorFused":
  425434.650 ±(99.9%) 7569.495 ops/s [Average]
  (min, avg, max) = (404520.540, 425434.650, 443316.890), stdev = 11329.665
  CI (99.9%): [417865.154, 433004.145] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_innerErrorFused  thrpt   30  425434.650 ± 7569.495  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromPublisherDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromPublisherDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 57008.883 ops/s
# Warmup Iteration   2: 347672.628 ops/s
# Warmup Iteration   3: 486980.787 ops/s
# Warmup Iteration   4: 503491.804 ops/s
# Warmup Iteration   5: 541462.880 ops/s
# Warmup Iteration   6: 517470.151 ops/s
# Warmup Iteration   7: 524757.739 ops/s
# Warmup Iteration   8: 532070.962 ops/s
# Warmup Iteration   9: 505112.413 ops/s
# Warmup Iteration  10: 543740.970 ops/s
# Warmup Iteration  11: 516220.123 ops/s
# Warmup Iteration  12: 510940.425 ops/s
# Warmup Iteration  13: 547996.298 ops/s
# Warmup Iteration  14: 510039.191 ops/s
# Warmup Iteration  15: 555107.371 ops/s
# Warmup Iteration  16: 532123.279 ops/s
# Warmup Iteration  17: 551576.788 ops/s
# Warmup Iteration  18: 560673.710 ops/s
# Warmup Iteration  19: 544631.107 ops/s
# Warmup Iteration  20: 566916.532 ops/s
# Warmup Iteration  21: 555717.035 ops/s
# Warmup Iteration  22: 549766.041 ops/s
# Warmup Iteration  23: 573328.650 ops/s
# Warmup Iteration  24: 529496.281 ops/s
# Warmup Iteration  25: 546085.809 ops/s
# Warmup Iteration  26: 581655.151 ops/s
# Warmup Iteration  27: 549238.328 ops/s
# Warmup Iteration  28: 532581.707 ops/s
# Warmup Iteration  29: 578993.596 ops/s
# Warmup Iteration  30: 542965.179 ops/s
Iteration   1: 554394.419 ops/s
Iteration   2: 547708.155 ops/s
Iteration   3: 582652.038 ops/s
Iteration   4: 566555.020 ops/s
Iteration   5: 568116.037 ops/s
Iteration   6: 549899.434 ops/s
Iteration   7: 561363.196 ops/s
Iteration   8: 553604.908 ops/s
Iteration   9: 470884.510 ops/s
Iteration  10: 515686.425 ops/s
Iteration  11: 555292.166 ops/s
Iteration  12: 546511.784 ops/s
Iteration  13: 578122.550 ops/s
Iteration  14: 531619.031 ops/s
Iteration  15: 557413.741 ops/s
Iteration  16: 570156.360 ops/s
Iteration  17: 556494.337 ops/s
Iteration  18: 543036.767 ops/s
Iteration  19: 567938.371 ops/s
Iteration  20: 545536.571 ops/s
Iteration  21: 557641.561 ops/s
Iteration  22: 574767.363 ops/s
Iteration  23: 538572.064 ops/s
Iteration  24: 574815.757 ops/s
Iteration  25: 542778.353 ops/s
Iteration  26: 550370.432 ops/s
Iteration  27: 581185.387 ops/s
Iteration  28: 552058.570 ops/s
Iteration  29: 534387.787 ops/s
Iteration  30: 565719.549 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromTest._Benchmark.benchmark_fromPublisherDoubleOnSubscribe":
  553176.088 ±(99.9%) 14663.793 ops/s [Average]
  (min, avg, max) = (470884.510, 553176.088, 582652.038), stdev = 21948.077
  CI (99.9%): [538512.295, 567839.881] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableFromTest._Benchmark.benchmark_fromPublisherDoubleOnSubscribe  thrpt   30  553176.088 ± 14663.793  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_unsafeChildThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_unsafeChildThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19702.676 ops/s
# Warmup Iteration   2: 74724.409 ops/s
# Warmup Iteration   3: 142657.559 ops/s
# Warmup Iteration   4: 147325.315 ops/s
# Warmup Iteration   5: 158561.542 ops/s
# Warmup Iteration   6: 145895.541 ops/s
# Warmup Iteration   7: 157163.351 ops/s
# Warmup Iteration   8: 161676.255 ops/s
# Warmup Iteration   9: 166653.178 ops/s
# Warmup Iteration  10: 154257.146 ops/s
# Warmup Iteration  11: 161211.285 ops/s
# Warmup Iteration  12: 161961.703 ops/s
# Warmup Iteration  13: 159074.498 ops/s
# Warmup Iteration  14: 166657.024 ops/s
# Warmup Iteration  15: 160748.825 ops/s
# Warmup Iteration  16: 158727.573 ops/s
# Warmup Iteration  17: 163167.447 ops/s
# Warmup Iteration  18: 161804.204 ops/s
# Warmup Iteration  19: 160823.200 ops/s
# Warmup Iteration  20: 170274.487 ops/s
# Warmup Iteration  21: 156686.194 ops/s
# Warmup Iteration  22: 169710.337 ops/s
# Warmup Iteration  23: 167908.190 ops/s
# Warmup Iteration  24: 154623.313 ops/s
# Warmup Iteration  25: 164384.002 ops/s
# Warmup Iteration  26: 156446.827 ops/s
# Warmup Iteration  27: 157910.608 ops/s
# Warmup Iteration  28: 162412.695 ops/s
# Warmup Iteration  29: 155191.041 ops/s
# Warmup Iteration  30: 161962.602 ops/s
Iteration   1: 162276.807 ops/s
Iteration   2: 156897.786 ops/s
Iteration   3: 164250.908 ops/s
Iteration   4: 155562.893 ops/s
Iteration   5: 158783.930 ops/s
Iteration   6: 163844.999 ops/s
Iteration   7: 161732.216 ops/s
Iteration   8: 162118.812 ops/s
Iteration   9: 168133.885 ops/s
Iteration  10: 159049.513 ops/s
Iteration  11: 161451.977 ops/s
Iteration  12: 160852.549 ops/s
Iteration  13: 161468.543 ops/s
Iteration  14: 164604.875 ops/s
Iteration  15: 160869.208 ops/s
Iteration  16: 155739.190 ops/s
Iteration  17: 168415.801 ops/s
Iteration  18: 158412.647 ops/s
Iteration  19: 164075.925 ops/s
Iteration  20: 167684.950 ops/s
Iteration  21: 159620.023 ops/s
Iteration  22: 165875.734 ops/s
Iteration  23: 158706.185 ops/s
Iteration  24: 167268.870 ops/s
Iteration  25: 166843.721 ops/s
Iteration  26: 157108.415 ops/s
Iteration  27: 164237.847 ops/s
Iteration  28: 163969.636 ops/s
Iteration  29: 164597.445 ops/s
Iteration  30: 168198.667 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_unsafeChildThrows":
  162421.799 ±(99.9%) 2566.690 ops/s [Average]
  (min, avg, max) = (155562.893, 162421.799, 168415.801), stdev = 3841.700
  CI (99.9%): [159855.109, 164988.488] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_unsafeChildThrows  thrpt   30  162421.799 ± 2566.690  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 52720.166 ops/s
# Warmup Iteration   2: 441640.934 ops/s
# Warmup Iteration   3: 488937.523 ops/s
# Warmup Iteration   4: 471926.270 ops/s
# Warmup Iteration   5: 493733.816 ops/s
# Warmup Iteration   6: 507529.891 ops/s
# Warmup Iteration   7: 522187.901 ops/s
# Warmup Iteration   8: 520312.119 ops/s
# Warmup Iteration   9: 531398.282 ops/s
# Warmup Iteration  10: 554267.721 ops/s
# Warmup Iteration  11: 502564.387 ops/s
# Warmup Iteration  12: 539262.357 ops/s
# Warmup Iteration  13: 547420.234 ops/s
# Warmup Iteration  14: 524782.054 ops/s
# Warmup Iteration  15: 533305.995 ops/s
# Warmup Iteration  16: 541547.138 ops/s
# Warmup Iteration  17: 552470.932 ops/s
# Warmup Iteration  18: 564122.937 ops/s
# Warmup Iteration  19: 556758.810 ops/s
# Warmup Iteration  20: 560278.882 ops/s
# Warmup Iteration  21: 574190.294 ops/s
# Warmup Iteration  22: 536127.942 ops/s
# Warmup Iteration  23: 578623.728 ops/s
# Warmup Iteration  24: 549717.317 ops/s
# Warmup Iteration  25: 543515.896 ops/s
# Warmup Iteration  26: 571507.979 ops/s
# Warmup Iteration  27: 541832.661 ops/s
# Warmup Iteration  28: 565134.046 ops/s
# Warmup Iteration  29: 550787.539 ops/s
# Warmup Iteration  30: 568684.886 ops/s
Iteration   1: 556621.952 ops/s
Iteration   2: 551663.347 ops/s
Iteration   3: 532261.988 ops/s
Iteration   4: 468309.855 ops/s
Iteration   5: 567288.693 ops/s
Iteration   6: 550584.749 ops/s
Iteration   7: 565927.962 ops/s
Iteration   8: 569431.695 ops/s
Iteration   9: 540275.925 ops/s
Iteration  10: 571280.929 ops/s
Iteration  11: 569020.343 ops/s
Iteration  12: 570471.071 ops/s
Iteration  13: 559560.597 ops/s
Iteration  14: 565991.035 ops/s
Iteration  15: 548663.746 ops/s
Iteration  16: 560816.917 ops/s
Iteration  17: 558372.504 ops/s
Iteration  18: 579313.712 ops/s
Iteration  19: 532473.112 ops/s
Iteration  20: 551814.918 ops/s
Iteration  21: 567682.714 ops/s
Iteration  22: 555467.594 ops/s
Iteration  23: 560829.198 ops/s
Iteration  24: 551268.212 ops/s
Iteration  25: 559807.612 ops/s
Iteration  26: 576514.196 ops/s
Iteration  27: 537339.263 ops/s
Iteration  28: 557067.274 ops/s
Iteration  29: 561213.866 ops/s
Iteration  30: 540236.190 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrash":
  554585.706 ±(99.9%) 13624.756 ops/s [Average]
  (min, avg, max) = (468309.855, 554585.706, 579313.712), stdev = 20392.894
  CI (99.9%): [540960.950, 568210.461] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score       Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorCrash  thrpt   30  554585.706 ± 13624.756  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_syncDelaySubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_syncDelaySubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1502.726 ops/s
# Warmup Iteration   2: 10883.851 ops/s
# Warmup Iteration   3: 19133.438 ops/s
# Warmup Iteration   4: 41548.020 ops/s
# Warmup Iteration   5: 56109.291 ops/s
# Warmup Iteration   6: 111425.360 ops/s
# Warmup Iteration   7: 106729.906 ops/s
# Warmup Iteration   8: 109515.196 ops/s
# Warmup Iteration   9: 110484.611 ops/s
# Warmup Iteration  10: 111379.643 ops/s
# Warmup Iteration  11: 105532.565 ops/s
# Warmup Iteration  12: 105666.336 ops/s
# Warmup Iteration  13: 120017.255 ops/s
# Warmup Iteration  14: 111054.424 ops/s
# Warmup Iteration  15: 109810.320 ops/s
# Warmup Iteration  16: 118199.412 ops/s
# Warmup Iteration  17: 113700.658 ops/s
# Warmup Iteration  18: 114868.166 ops/s
# Warmup Iteration  19: 110494.640 ops/s
# Warmup Iteration  20: 109486.864 ops/s
# Warmup Iteration  21: 115657.088 ops/s
# Warmup Iteration  22: 112689.200 ops/s
# Warmup Iteration  23: 113804.061 ops/s
# Warmup Iteration  24: 113925.463 ops/s
# Warmup Iteration  25: 110068.904 ops/s
# Warmup Iteration  26: 117534.476 ops/s
# Warmup Iteration  27: 111640.235 ops/s
# Warmup Iteration  28: 113632.118 ops/s
# Warmup Iteration  29: 115125.300 ops/s
# Warmup Iteration  30: 115848.762 ops/s
Iteration   1: 113037.806 ops/s
Iteration   2: 113346.403 ops/s
Iteration   3: 116442.491 ops/s
Iteration   4: 110636.910 ops/s
Iteration   5: 115484.880 ops/s
Iteration   6: 112150.657 ops/s
Iteration   7: 112983.140 ops/s
Iteration   8: 119134.000 ops/s
Iteration   9: 112258.312 ops/s
Iteration  10: 114462.120 ops/s
Iteration  11: 113421.398 ops/s
Iteration  12: 116105.388 ops/s
Iteration  13: 114264.695 ops/s
Iteration  14: 109484.006 ops/s
Iteration  15: 116992.005 ops/s
Iteration  16: 112817.755 ops/s
Iteration  17: 111947.788 ops/s
Iteration  18: 118654.552 ops/s
Iteration  19: 112363.809 ops/s
Iteration  20: 114628.187 ops/s
Iteration  21: 110756.756 ops/s
Iteration  22: 115376.182 ops/s
Iteration  23: 112468.981 ops/s
Iteration  24: 109996.328 ops/s
Iteration  25: 118248.247 ops/s
Iteration  26: 110856.568 ops/s
Iteration  27: 115291.864 ops/s
Iteration  28: 115156.335 ops/s
Iteration  29: 114737.038 ops/s
Iteration  30: 116609.864 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_syncDelaySubscription":
  114003.816 ±(99.9%) 1703.350 ops/s [Average]
  (min, avg, max) = (109484.006, 114003.816, 119134.000), stdev = 2549.494
  CI (99.9%): [112300.466, 115707.165] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
SchedulerWhenTest._Benchmark.benchmark_syncDelaySubscription  thrpt   30  114003.816 ± 1703.350  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncRange$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncRange

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 534278.084 ops/s
# Warmup Iteration   2: 2349334.351 ops/s
# Warmup Iteration   3: 3088184.451 ops/s
# Warmup Iteration   4: 3418491.831 ops/s
# Warmup Iteration   5: 3507039.663 ops/s
# Warmup Iteration   6: 3412068.328 ops/s
# Warmup Iteration   7: 3481507.718 ops/s
# Warmup Iteration   8: 3543102.716 ops/s
# Warmup Iteration   9: 3430007.316 ops/s
# Warmup Iteration  10: 3532263.675 ops/s
# Warmup Iteration  11: 3467150.793 ops/s
# Warmup Iteration  12: 3442607.049 ops/s
# Warmup Iteration  13: 3462726.100 ops/s
# Warmup Iteration  14: 3629086.930 ops/s
# Warmup Iteration  15: 3402478.631 ops/s
# Warmup Iteration  16: 3574154.864 ops/s
# Warmup Iteration  17: 3473729.144 ops/s
# Warmup Iteration  18: 3323428.756 ops/s
# Warmup Iteration  19: 3561171.054 ops/s
# Warmup Iteration  20: 3360172.948 ops/s
# Warmup Iteration  21: 3506350.619 ops/s
# Warmup Iteration  22: 3366844.021 ops/s
# Warmup Iteration  23: 3517614.082 ops/s
# Warmup Iteration  24: 3606693.404 ops/s
# Warmup Iteration  25: 3337826.982 ops/s
# Warmup Iteration  26: 3551639.370 ops/s
# Warmup Iteration  27: 3382854.793 ops/s
# Warmup Iteration  28: 2802945.648 ops/s
# Warmup Iteration  29: 3509177.304 ops/s
# Warmup Iteration  30: 3321636.705 ops/s
Iteration   1: 3488859.657 ops/s
Iteration   2: 3419740.804 ops/s
Iteration   3: 3441243.563 ops/s
Iteration   4: 3501885.141 ops/s
Iteration   5: 3509847.251 ops/s
Iteration   6: 3458913.517 ops/s
Iteration   7: 3422295.755 ops/s
Iteration   8: 3477567.896 ops/s
Iteration   9: 3351657.824 ops/s
Iteration  10: 3420388.562 ops/s
Iteration  11: 3567149.460 ops/s
Iteration  12: 3463046.492 ops/s
Iteration  13: 3444801.217 ops/s
Iteration  14: 3405574.285 ops/s
Iteration  15: 3367279.779 ops/s
Iteration  16: 3540989.768 ops/s
Iteration  17: 3272899.203 ops/s
Iteration  18: 3506203.609 ops/s
Iteration  19: 3366031.732 ops/s
Iteration  20: 3368236.134 ops/s
Iteration  21: 3453974.400 ops/s
Iteration  22: 3448735.808 ops/s
Iteration  23: 3500192.085 ops/s
Iteration  24: 3422333.483 ops/s
Iteration  25: 3499064.024 ops/s
Iteration  26: 3439751.010 ops/s
Iteration  27: 3539545.875 ops/s
Iteration  28: 3515618.737 ops/s
Iteration  29: 3414248.247 ops/s
Iteration  30: 3453264.304 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncRange":
  3449377.987 ±(99.9%) 42910.008 ops/s [Average]
  (min, avg, max) = (3272899.203, 3449377.987, 3567149.460), stdev = 64225.684
  CI (99.9%): [3406467.980, 3492287.995] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableFuseableTest._Benchmark.benchmark_syncRange  thrpt   30  3449377.987 ± 42910.008  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_restartTimer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_restartTimer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3089.519 ops/s
# Warmup Iteration   2: 11758.045 ops/s
# Warmup Iteration   3: 19029.620 ops/s
# Warmup Iteration   4: 25874.582 ops/s
# Warmup Iteration   5: 34526.359 ops/s
# Warmup Iteration   6: 46293.027 ops/s
# Warmup Iteration   7: 45350.214 ops/s
# Warmup Iteration   8: 44401.152 ops/s
# Warmup Iteration   9: 44771.058 ops/s
# Warmup Iteration  10: 44074.256 ops/s
# Warmup Iteration  11: 44778.747 ops/s
# Warmup Iteration  12: 42771.502 ops/s
# Warmup Iteration  13: 45652.358 ops/s
# Warmup Iteration  14: 46947.778 ops/s
# Warmup Iteration  15: 48174.677 ops/s
# Warmup Iteration  16: 45940.708 ops/s
# Warmup Iteration  17: 43757.942 ops/s
# Warmup Iteration  18: 48537.658 ops/s
# Warmup Iteration  19: 44907.240 ops/s
# Warmup Iteration  20: 42561.529 ops/s
# Warmup Iteration  21: 46593.295 ops/s
# Warmup Iteration  22: 45323.718 ops/s
# Warmup Iteration  23: 47450.861 ops/s
# Warmup Iteration  24: 45396.411 ops/s
# Warmup Iteration  25: 45176.706 ops/s
# Warmup Iteration  26: 44243.190 ops/s
# Warmup Iteration  27: 44977.160 ops/s
# Warmup Iteration  28: 48198.600 ops/s
# Warmup Iteration  29: 45414.384 ops/s
# Warmup Iteration  30: 46719.577 ops/s
Iteration   1: 48450.578 ops/s
Iteration   2: 46921.138 ops/s
Iteration   3: 46925.828 ops/s
Iteration   4: 47563.767 ops/s
Iteration   5: 41998.923 ops/s
Iteration   6: 43758.226 ops/s
Iteration   7: 45741.341 ops/s
Iteration   8: 48114.315 ops/s
Iteration   9: 46596.767 ops/s
Iteration  10: 44744.203 ops/s
Iteration  11: 47482.729 ops/s
Iteration  12: 43952.164 ops/s
Iteration  13: 47640.624 ops/s
Iteration  14: 45157.183 ops/s
Iteration  15: 46738.717 ops/s
Iteration  16: 47526.545 ops/s
Iteration  17: 43247.800 ops/s
Iteration  18: 47916.011 ops/s
Iteration  19: 44527.968 ops/s
Iteration  20: 46925.485 ops/s
Iteration  21: 47499.475 ops/s
Iteration  22: 42535.361 ops/s
Iteration  23: 47665.873 ops/s
Iteration  24: 49430.990 ops/s
Iteration  25: 46351.602 ops/s
Iteration  26: 44795.091 ops/s
Iteration  27: 46134.022 ops/s
Iteration  28: 45234.843 ops/s
Iteration  29: 45744.968 ops/s
Iteration  30: 43578.598 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_restartTimer":
  46030.038 ±(99.9%) 1249.796 ops/s [Average]
  (min, avg, max) = (41998.923, 46030.038, 49430.990), stdev = 1870.637
  CI (99.9%): [44780.241, 47279.834] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt      Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_restartTimer  thrpt   30  46030.038 ± 1249.796  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16981.679 ops/s
# Warmup Iteration   2: 62772.921 ops/s
# Warmup Iteration   3: 95106.563 ops/s
# Warmup Iteration   4: 197653.234 ops/s
# Warmup Iteration   5: 199209.460 ops/s
# Warmup Iteration   6: 495942.246 ops/s
# Warmup Iteration   7: 533824.611 ops/s
# Warmup Iteration   8: 574490.848 ops/s
# Warmup Iteration   9: 544409.084 ops/s
# Warmup Iteration  10: 541343.744 ops/s
# Warmup Iteration  11: 542361.889 ops/s
# Warmup Iteration  12: 567228.938 ops/s
# Warmup Iteration  13: 552752.319 ops/s
# Warmup Iteration  14: 561794.035 ops/s
# Warmup Iteration  15: 555785.629 ops/s
# Warmup Iteration  16: 558420.248 ops/s
# Warmup Iteration  17: 580823.230 ops/s
# Warmup Iteration  18: 537014.366 ops/s
# Warmup Iteration  19: 580505.277 ops/s
# Warmup Iteration  20: 559558.834 ops/s
# Warmup Iteration  21: 474420.198 ops/s
# Warmup Iteration  22: 504348.301 ops/s
# Warmup Iteration  23: 538027.618 ops/s
# Warmup Iteration  24: 590802.567 ops/s
# Warmup Iteration  25: 570853.593 ops/s
# Warmup Iteration  26: 556915.772 ops/s
# Warmup Iteration  27: 587126.353 ops/s
# Warmup Iteration  28: 552294.058 ops/s
# Warmup Iteration  29: 592654.682 ops/s
# Warmup Iteration  30: 551416.052 ops/s
Iteration   1: 567638.097 ops/s
Iteration   2: 588891.625 ops/s
Iteration   3: 565092.924 ops/s
Iteration   4: 560956.037 ops/s
Iteration   5: 581651.357 ops/s
Iteration   6: 552653.899 ops/s
Iteration   7: 589492.335 ops/s
Iteration   8: 567382.984 ops/s
Iteration   9: 574240.017 ops/s
Iteration  10: 557218.590 ops/s
Iteration  11: 553059.150 ops/s
Iteration  12: 603136.072 ops/s
Iteration  13: 549764.782 ops/s
Iteration  14: 563776.930 ops/s
Iteration  15: 584253.010 ops/s
Iteration  16: 554368.585 ops/s
Iteration  17: 573487.204 ops/s
Iteration  18: 554798.453 ops/s
Iteration  19: 580751.246 ops/s
Iteration  20: 570754.549 ops/s
Iteration  21: 559800.821 ops/s
Iteration  22: 583262.479 ops/s
Iteration  23: 543267.685 ops/s
Iteration  24: 583938.721 ops/s
Iteration  25: 554034.035 ops/s
Iteration  26: 573029.752 ops/s
Iteration  27: 565676.254 ops/s
Iteration  28: 569602.512 ops/s
Iteration  29: 564204.537 ops/s
Iteration  30: 574287.156 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream":
  568815.727 ±(99.9%) 9279.949 ops/s [Average]
  (min, avg, max) = (543267.685, 568815.727, 603136.072), stdev = 13889.792
  CI (99.9%): [559535.777, 578095.676] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score      Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream  thrpt   30  568815.727 ± 9279.949  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_prefetch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_prefetch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 221410.075 ops/s
# Warmup Iteration   2: 1455607.216 ops/s
# Warmup Iteration   3: 1804878.181 ops/s
# Warmup Iteration   4: 2089589.953 ops/s
# Warmup Iteration   5: 1755200.229 ops/s
# Warmup Iteration   6: 2012905.298 ops/s
# Warmup Iteration   7: 2162892.623 ops/s
# Warmup Iteration   8: 2090974.060 ops/s
# Warmup Iteration   9: 2032507.414 ops/s
# Warmup Iteration  10: 2156562.297 ops/s
# Warmup Iteration  11: 2023912.698 ops/s
# Warmup Iteration  12: 2019714.667 ops/s
# Warmup Iteration  13: 2146553.888 ops/s
# Warmup Iteration  14: 2026939.197 ops/s
# Warmup Iteration  15: 2127786.955 ops/s
# Warmup Iteration  16: 2016804.753 ops/s
# Warmup Iteration  17: 2029783.355 ops/s
# Warmup Iteration  18: 2094653.501 ops/s
# Warmup Iteration  19: 2022739.225 ops/s
# Warmup Iteration  20: 2079144.343 ops/s
# Warmup Iteration  21: 2116608.327 ops/s
# Warmup Iteration  22: 1965567.519 ops/s
# Warmup Iteration  23: 2090679.065 ops/s
# Warmup Iteration  24: 2042933.957 ops/s
# Warmup Iteration  25: 2025528.743 ops/s
# Warmup Iteration  26: 2116215.073 ops/s
# Warmup Iteration  27: 2133506.581 ops/s
# Warmup Iteration  28: 2031651.703 ops/s
# Warmup Iteration  29: 2061191.520 ops/s
# Warmup Iteration  30: 2012498.800 ops/s
Iteration   1: 2088795.129 ops/s
Iteration   2: 2047759.211 ops/s
Iteration   3: 2098975.295 ops/s
Iteration   4: 2052139.259 ops/s
Iteration   5: 2050702.688 ops/s
Iteration   6: 2139043.264 ops/s
Iteration   7: 2004219.797 ops/s
Iteration   8: 2122895.561 ops/s
Iteration   9: 2091447.183 ops/s
Iteration  10: 2085752.866 ops/s
Iteration  11: 2047747.521 ops/s
Iteration  12: 2102713.416 ops/s
Iteration  13: 2056980.891 ops/s
Iteration  14: 2033480.851 ops/s
Iteration  15: 2126163.850 ops/s
Iteration  16: 2055029.804 ops/s
Iteration  17: 2078345.444 ops/s
Iteration  18: 2063938.271 ops/s
Iteration  19: 2046604.671 ops/s
Iteration  20: 2150568.106 ops/s
Iteration  21: 2008612.997 ops/s
Iteration  22: 2148103.397 ops/s
Iteration  23: 2011105.132 ops/s
Iteration  24: 2090534.091 ops/s
Iteration  25: 2054729.804 ops/s
Iteration  26: 2042504.654 ops/s
Iteration  27: 2098658.603 ops/s
Iteration  28: 2006548.588 ops/s
Iteration  29: 2012617.449 ops/s
Iteration  30: 2084771.275 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_prefetch":
  2070049.636 ±(99.9%) 28203.293 ops/s [Average]
  (min, avg, max) = (2004219.797, 2070049.636, 2150568.106), stdev = 42213.365
  CI (99.9%): [2041846.342, 2098252.929] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_prefetch  thrpt   30  2070049.636 ± 28203.293  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10084.017 ops/s
# Warmup Iteration   2: 58378.421 ops/s
# Warmup Iteration   3: 112579.112 ops/s
# Warmup Iteration   4: 128475.432 ops/s
# Warmup Iteration   5: 126756.491 ops/s
# Warmup Iteration   6: 126072.350 ops/s
# Warmup Iteration   7: 127730.428 ops/s
# Warmup Iteration   8: 121159.622 ops/s
# Warmup Iteration   9: 125646.140 ops/s
# Warmup Iteration  10: 125533.104 ops/s
# Warmup Iteration  11: 127030.387 ops/s
# Warmup Iteration  12: 129716.163 ops/s
# Warmup Iteration  13: 126203.767 ops/s
# Warmup Iteration  14: 131059.126 ops/s
# Warmup Iteration  15: 125673.477 ops/s
# Warmup Iteration  16: 112679.246 ops/s
# Warmup Iteration  17: 128829.629 ops/s
# Warmup Iteration  18: 134552.853 ops/s
# Warmup Iteration  19: 130210.153 ops/s
# Warmup Iteration  20: 130895.742 ops/s
# Warmup Iteration  21: 132834.063 ops/s
# Warmup Iteration  22: 128938.994 ops/s
# Warmup Iteration  23: 137911.718 ops/s
# Warmup Iteration  24: 131262.461 ops/s
# Warmup Iteration  25: 129515.117 ops/s
# Warmup Iteration  26: 136110.445 ops/s
# Warmup Iteration  27: 126683.051 ops/s
# Warmup Iteration  28: 130138.495 ops/s
# Warmup Iteration  29: 132968.602 ops/s
# Warmup Iteration  30: 128369.186 ops/s
Iteration   1: 132701.939 ops/s
Iteration   2: 128923.048 ops/s
Iteration   3: 136520.541 ops/s
Iteration   4: 131482.788 ops/s
Iteration   5: 130706.573 ops/s
Iteration   6: 135002.995 ops/s
Iteration   7: 124903.883 ops/s
Iteration   8: 134782.538 ops/s
Iteration   9: 130954.004 ops/s
Iteration  10: 129570.083 ops/s
Iteration  11: 135231.712 ops/s
Iteration  12: 128400.554 ops/s
Iteration  13: 134164.068 ops/s
Iteration  14: 135464.089 ops/s
Iteration  15: 133536.094 ops/s
Iteration  16: 125302.285 ops/s
Iteration  17: 135133.732 ops/s
Iteration  18: 129340.873 ops/s
Iteration  19: 135951.287 ops/s
Iteration  20: 133815.114 ops/s
Iteration  21: 134937.883 ops/s
Iteration  22: 132682.665 ops/s
Iteration  23: 129902.169 ops/s
Iteration  24: 130502.133 ops/s
Iteration  25: 131461.342 ops/s
Iteration  26: 135061.752 ops/s
Iteration  27: 128363.803 ops/s
Iteration  28: 132837.763 ops/s
Iteration  29: 133762.276 ops/s
Iteration  30: 131151.545 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerErrors":
  132085.051 ±(99.9%) 2047.979 ops/s [Average]
  (min, avg, max) = (124903.883, 132085.051, 136520.541), stdev = 3065.318
  CI (99.9%): [130037.072, 134133.030] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerErrors  thrpt   30  132085.051 ± 2047.979  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNextTest._Benchmark.benchmark_synchronousNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNextTest._Benchmark.benchmark_synchronousNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85384.232 ops/s
# Warmup Iteration   2: 238911.624 ops/s
# Warmup Iteration   3: 426951.280 ops/s
# Warmup Iteration   4: 802354.509 ops/s
# Warmup Iteration   5: 999531.342 ops/s
# Warmup Iteration   6: 957388.243 ops/s
# Warmup Iteration   7: 988298.244 ops/s
# Warmup Iteration   8: 970896.806 ops/s
# Warmup Iteration   9: 964985.089 ops/s
# Warmup Iteration  10: 985313.834 ops/s
# Warmup Iteration  11: 951402.260 ops/s
# Warmup Iteration  12: 969027.608 ops/s
# Warmup Iteration  13: 1015506.249 ops/s
# Warmup Iteration  14: 952910.042 ops/s
# Warmup Iteration  15: 1025415.732 ops/s
# Warmup Iteration  16: 997342.046 ops/s
# Warmup Iteration  17: 961189.238 ops/s
# Warmup Iteration  18: 987776.680 ops/s
# Warmup Iteration  19: 1001246.591 ops/s
# Warmup Iteration  20: 959774.794 ops/s
# Warmup Iteration  21: 996247.511 ops/s
# Warmup Iteration  22: 967822.427 ops/s
# Warmup Iteration  23: 946545.730 ops/s
# Warmup Iteration  24: 1011009.422 ops/s
# Warmup Iteration  25: 951951.533 ops/s
# Warmup Iteration  26: 1022795.588 ops/s
# Warmup Iteration  27: 988545.319 ops/s
# Warmup Iteration  28: 967436.299 ops/s
# Warmup Iteration  29: 1021431.222 ops/s
# Warmup Iteration  30: 992101.209 ops/s
Iteration   1: 941829.326 ops/s
Iteration   2: 951414.092 ops/s
Iteration   3: 1039660.112 ops/s
Iteration   4: 946969.214 ops/s
Iteration   5: 983051.781 ops/s
Iteration   6: 1017386.759 ops/s
Iteration   7: 973411.189 ops/s
Iteration   8: 976709.551 ops/s
Iteration   9: 983682.262 ops/s
Iteration  10: 1020878.432 ops/s
Iteration  11: 1001414.928 ops/s
Iteration  12: 1000593.588 ops/s
Iteration  13: 932188.962 ops/s
Iteration  14: 1027831.147 ops/s
Iteration  15: 984312.506 ops/s
Iteration  16: 972236.184 ops/s
Iteration  17: 956957.262 ops/s
Iteration  18: 1014528.180 ops/s
Iteration  19: 927704.336 ops/s
Iteration  20: 1014591.555 ops/s
Iteration  21: 1034337.110 ops/s
Iteration  22: 952408.011 ops/s
Iteration  23: 1045057.824 ops/s
Iteration  24: 1025134.609 ops/s
Iteration  25: 1001768.424 ops/s
Iteration  26: 1017593.480 ops/s
Iteration  27: 973286.935 ops/s
Iteration  28: 991276.846 ops/s
Iteration  29: 953383.673 ops/s
Iteration  30: 993938.992 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNextTest._Benchmark.benchmark_synchronousNext":
  988517.909 ±(99.9%) 22203.641 ops/s [Average]
  (min, avg, max) = (927704.336, 988517.909, 1045057.824), stdev = 33233.367
  CI (99.9%): [966314.268, 1010721.550] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
BlockingFlowableNextTest._Benchmark.benchmark_synchronousNext  thrpt   30  988517.909 ± 22203.641  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_backpressureOuterInexact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_backpressureOuterInexact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10860.229 ops/s
# Warmup Iteration   2: 25204.942 ops/s
# Warmup Iteration   3: 55602.750 ops/s
# Warmup Iteration   4: 125679.833 ops/s
# Warmup Iteration   5: 209928.484 ops/s
# Warmup Iteration   6: 239893.799 ops/s
# Warmup Iteration   7: 207641.136 ops/s
# Warmup Iteration   8: 206753.934 ops/s
# Warmup Iteration   9: 218835.720 ops/s
# Warmup Iteration  10: 153482.372 ops/s
# Warmup Iteration  11: 203939.122 ops/s
# Warmup Iteration  12: 217481.138 ops/s
# Warmup Iteration  13: 214074.130 ops/s
# Warmup Iteration  14: 213115.295 ops/s
# Warmup Iteration  15: 206568.498 ops/s
# Warmup Iteration  16: 214340.039 ops/s
# Warmup Iteration  17: 195171.545 ops/s
# Warmup Iteration  18: 217680.892 ops/s
# Warmup Iteration  19: 208246.847 ops/s
# Warmup Iteration  20: 219316.007 ops/s
# Warmup Iteration  21: 210833.306 ops/s
# Warmup Iteration  22: 220009.506 ops/s
# Warmup Iteration  23: 212645.792 ops/s
# Warmup Iteration  24: 211519.940 ops/s
# Warmup Iteration  25: 213542.346 ops/s
# Warmup Iteration  26: 210803.048 ops/s
# Warmup Iteration  27: 215601.656 ops/s
# Warmup Iteration  28: 212633.554 ops/s
# Warmup Iteration  29: 219167.219 ops/s
# Warmup Iteration  30: 214458.603 ops/s
Iteration   1: 214480.358 ops/s
Iteration   2: 214281.677 ops/s
Iteration   3: 213062.773 ops/s
Iteration   4: 218842.656 ops/s
Iteration   5: 211264.594 ops/s
Iteration   6: 214973.118 ops/s
Iteration   7: 222883.690 ops/s
Iteration   8: 206676.429 ops/s
Iteration   9: 218018.334 ops/s
Iteration  10: 213665.383 ops/s
Iteration  11: 217020.416 ops/s
Iteration  12: 215400.829 ops/s
Iteration  13: 210484.480 ops/s
Iteration  14: 215462.665 ops/s
Iteration  15: 219539.299 ops/s
Iteration  16: 209769.826 ops/s
Iteration  17: 214109.546 ops/s
Iteration  18: 213979.444 ops/s
Iteration  19: 210031.858 ops/s
Iteration  20: 219999.982 ops/s
Iteration  21: 210869.071 ops/s
Iteration  22: 207368.761 ops/s
Iteration  23: 216189.263 ops/s
Iteration  24: 205071.102 ops/s
Iteration  25: 214467.645 ops/s
Iteration  26: 216633.267 ops/s
Iteration  27: 207683.880 ops/s
Iteration  28: 215800.668 ops/s
Iteration  29: 218815.349 ops/s
Iteration  30: 217402.443 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_backpressureOuterInexact":
  214141.627 ±(99.9%) 2857.678 ops/s [Average]
  (min, avg, max) = (205071.102, 214141.627, 222883.690), stdev = 4277.238
  CI (99.9%): [211283.949, 216999.304] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_backpressureOuterInexact  thrpt   30  214141.627 ± 2857.678  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_syncFusedNoRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_syncFusedNoRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 193032.655 ops/s
# Warmup Iteration   2: 552801.392 ops/s
# Warmup Iteration   3: 1374964.548 ops/s
# Warmup Iteration   4: 1640624.466 ops/s
# Warmup Iteration   5: 1494956.195 ops/s
# Warmup Iteration   6: 1464880.101 ops/s
# Warmup Iteration   7: 1462728.117 ops/s
# Warmup Iteration   8: 1613180.564 ops/s
# Warmup Iteration   9: 1642990.098 ops/s
# Warmup Iteration  10: 1627014.279 ops/s
# Warmup Iteration  11: 1632414.107 ops/s
# Warmup Iteration  12: 1605362.911 ops/s
# Warmup Iteration  13: 1650415.805 ops/s
# Warmup Iteration  14: 1647073.103 ops/s
# Warmup Iteration  15: 1603585.469 ops/s
# Warmup Iteration  16: 1635139.305 ops/s
# Warmup Iteration  17: 1626269.149 ops/s
# Warmup Iteration  18: 1650691.447 ops/s
# Warmup Iteration  19: 1654929.903 ops/s
# Warmup Iteration  20: 1643705.540 ops/s
# Warmup Iteration  21: 1684851.266 ops/s
# Warmup Iteration  22: 1587077.349 ops/s
# Warmup Iteration  23: 1618241.502 ops/s
# Warmup Iteration  24: 1621210.657 ops/s
# Warmup Iteration  25: 1661782.203 ops/s
# Warmup Iteration  26: 1649816.817 ops/s
# Warmup Iteration  27: 1550439.359 ops/s
# Warmup Iteration  28: 1627956.800 ops/s
# Warmup Iteration  29: 1629602.157 ops/s
# Warmup Iteration  30: 1592461.370 ops/s
Iteration   1: 1624294.045 ops/s
Iteration   2: 1657258.844 ops/s
Iteration   3: 1558985.685 ops/s
Iteration   4: 1692464.691 ops/s
Iteration   5: 1613949.991 ops/s
Iteration   6: 1591536.859 ops/s
Iteration   7: 1627087.997 ops/s
Iteration   8: 1680805.630 ops/s
Iteration   9: 1577013.558 ops/s
Iteration  10: 1671581.523 ops/s
Iteration  11: 1617607.505 ops/s
Iteration  12: 1648318.386 ops/s
Iteration  13: 1678080.688 ops/s
Iteration  14: 1587355.121 ops/s
Iteration  15: 1621752.317 ops/s
Iteration  16: 1619055.691 ops/s
Iteration  17: 1678032.280 ops/s
Iteration  18: 1609356.680 ops/s
Iteration  19: 1638003.609 ops/s
Iteration  20: 1646854.297 ops/s
Iteration  21: 1616328.463 ops/s
Iteration  22: 1646085.819 ops/s
Iteration  23: 1642957.938 ops/s
Iteration  24: 1661796.265 ops/s
Iteration  25: 1598505.100 ops/s
Iteration  26: 1705171.105 ops/s
Iteration  27: 1594163.019 ops/s
Iteration  28: 1628830.766 ops/s
Iteration  29: 1684415.848 ops/s
Iteration  30: 1605068.064 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_syncFusedNoRequest":
  1634090.593 ±(99.9%) 24534.227 ops/s [Average]
  (min, avg, max) = (1558985.685, 1634090.593, 1705171.105), stdev = 36721.679
  CI (99.9%): [1609556.366, 1658624.820] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_syncFusedNoRequest  thrpt   30  1634090.593 ± 24534.227  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_subscriberSwap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_subscriberSwap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 186313.851 ops/s
# Warmup Iteration   2: 726429.394 ops/s
# Warmup Iteration   3: 1089666.165 ops/s
# Warmup Iteration   4: 1024747.730 ops/s
# Warmup Iteration   5: 1041307.741 ops/s
# Warmup Iteration   6: 1277300.150 ops/s
# Warmup Iteration   7: 1278946.960 ops/s
# Warmup Iteration   8: 1285648.678 ops/s
# Warmup Iteration   9: 1261169.438 ops/s
# Warmup Iteration  10: 1258622.786 ops/s
# Warmup Iteration  11: 1320235.352 ops/s
# Warmup Iteration  12: 1311235.650 ops/s
# Warmup Iteration  13: 1272683.848 ops/s
# Warmup Iteration  14: 1285697.355 ops/s
# Warmup Iteration  15: 1269932.388 ops/s
# Warmup Iteration  16: 1266657.956 ops/s
# Warmup Iteration  17: 1265464.252 ops/s
# Warmup Iteration  18: 1287353.463 ops/s
# Warmup Iteration  19: 1266975.675 ops/s
# Warmup Iteration  20: 1299648.826 ops/s
# Warmup Iteration  21: 1249240.053 ops/s
# Warmup Iteration  22: 1338606.632 ops/s
# Warmup Iteration  23: 1317946.592 ops/s
# Warmup Iteration  24: 1247392.360 ops/s
# Warmup Iteration  25: 1251597.236 ops/s
# Warmup Iteration  26: 1281427.416 ops/s
# Warmup Iteration  27: 1261292.731 ops/s
# Warmup Iteration  28: 1299177.187 ops/s
# Warmup Iteration  29: 1262161.477 ops/s
# Warmup Iteration  30: 1299225.926 ops/s
Iteration   1: 1248095.341 ops/s
Iteration   2: 1255267.481 ops/s
Iteration   3: 1346470.188 ops/s
Iteration   4: 1237498.346 ops/s
Iteration   5: 1299986.125 ops/s
Iteration   6: 1264886.621 ops/s
Iteration   7: 1305283.122 ops/s
Iteration   8: 1296873.799 ops/s
Iteration   9: 1237290.175 ops/s
Iteration  10: 1341209.498 ops/s
Iteration  11: 1280586.404 ops/s
Iteration  12: 1232405.499 ops/s
Iteration  13: 1320838.306 ops/s
Iteration  14: 1283232.715 ops/s
Iteration  15: 1265284.797 ops/s
Iteration  16: 1296133.520 ops/s
Iteration  17: 1273002.573 ops/s
Iteration  18: 1229802.047 ops/s
Iteration  19: 1286303.104 ops/s
Iteration  20: 1265823.087 ops/s
Iteration  21: 1277760.185 ops/s
Iteration  22: 1317096.278 ops/s
Iteration  23: 1260876.036 ops/s
Iteration  24: 1297956.679 ops/s
Iteration  25: 1240483.236 ops/s
Iteration  26: 1280985.650 ops/s
Iteration  27: 1287170.241 ops/s
Iteration  28: 1251005.152 ops/s
Iteration  29: 1308723.981 ops/s
Iteration  30: 1225284.328 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_subscriberSwap":
  1277120.484 ±(99.9%) 21596.326 ops/s [Average]
  (min, avg, max) = (1225284.328, 1277120.484, 1346470.188), stdev = 32324.366
  CI (99.9%): [1255524.158, 1298716.809] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_subscriberSwap  thrpt   30  1277120.484 ± 21596.326  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_subscriberLiveSwap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_subscriberLiveSwap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 120019.136 ops/s
# Warmup Iteration   2: 613637.957 ops/s
# Warmup Iteration   3: 1124971.020 ops/s
# Warmup Iteration   4: 1084600.343 ops/s
# Warmup Iteration   5: 1247746.881 ops/s
# Warmup Iteration   6: 1234828.737 ops/s
# Warmup Iteration   7: 1275996.159 ops/s
# Warmup Iteration   8: 1316318.048 ops/s
# Warmup Iteration   9: 1318042.685 ops/s
# Warmup Iteration  10: 1254159.133 ops/s
# Warmup Iteration  11: 1281803.551 ops/s
# Warmup Iteration  12: 1225994.253 ops/s
# Warmup Iteration  13: 1293546.642 ops/s
# Warmup Iteration  14: 1229329.050 ops/s
# Warmup Iteration  15: 1262282.060 ops/s
# Warmup Iteration  16: 1295717.460 ops/s
# Warmup Iteration  17: 1295001.987 ops/s
# Warmup Iteration  18: 1232675.298 ops/s
# Warmup Iteration  19: 1276660.811 ops/s
# Warmup Iteration  20: 1257810.186 ops/s
# Warmup Iteration  21: 1268182.231 ops/s
# Warmup Iteration  22: 1293162.308 ops/s
# Warmup Iteration  23: 1273320.194 ops/s
# Warmup Iteration  24: 1261342.239 ops/s
# Warmup Iteration  25: 1239639.327 ops/s
# Warmup Iteration  26: 1280007.049 ops/s
# Warmup Iteration  27: 1310869.908 ops/s
# Warmup Iteration  28: 1262336.274 ops/s
# Warmup Iteration  29: 1276742.381 ops/s
# Warmup Iteration  30: 1249103.834 ops/s
Iteration   1: 1253089.293 ops/s
Iteration   2: 1291437.342 ops/s
Iteration   3: 1231816.910 ops/s
Iteration   4: 1319502.412 ops/s
Iteration   5: 1262497.379 ops/s
Iteration   6: 1295007.574 ops/s
Iteration   7: 1268978.892 ops/s
Iteration   8: 1273764.023 ops/s
Iteration   9: 1316642.807 ops/s
Iteration  10: 1232367.156 ops/s
Iteration  11: 1295066.443 ops/s
Iteration  12: 1286575.559 ops/s
Iteration  13: 1262141.305 ops/s
Iteration  14: 1319893.016 ops/s
Iteration  15: 1301756.652 ops/s
Iteration  16: 1284253.639 ops/s
Iteration  17: 1325944.358 ops/s
Iteration  18: 1290246.645 ops/s
Iteration  19: 1256924.281 ops/s
Iteration  20: 1324369.227 ops/s
Iteration  21: 1237370.428 ops/s
Iteration  22: 1322260.292 ops/s
Iteration  23: 1286967.547 ops/s
Iteration  24: 1282874.027 ops/s
Iteration  25: 1253743.252 ops/s
Iteration  26: 1277832.237 ops/s
Iteration  27: 1303059.968 ops/s
Iteration  28: 1242239.108 ops/s
Iteration  29: 1300928.648 ops/s
Iteration  30: 1234323.911 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_subscriberLiveSwap":
  1281129.144 ±(99.9%) 19705.508 ops/s [Average]
  (min, avg, max) = (1231816.910, 1281129.144, 1325944.358), stdev = 29494.279
  CI (99.9%): [1261423.636, 1300834.653] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_subscriberLiveSwap  thrpt   30  1281129.144 ± 19705.508  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_bothError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_bothError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18132.848 ops/s
# Warmup Iteration   2: 41558.283 ops/s
# Warmup Iteration   3: 126693.587 ops/s
# Warmup Iteration   4: 144621.082 ops/s
# Warmup Iteration   5: 147632.107 ops/s
# Warmup Iteration   6: 151064.693 ops/s
# Warmup Iteration   7: 148440.936 ops/s
# Warmup Iteration   8: 150842.133 ops/s
# Warmup Iteration   9: 160144.804 ops/s
# Warmup Iteration  10: 145987.393 ops/s
# Warmup Iteration  11: 152973.834 ops/s
# Warmup Iteration  12: 154058.490 ops/s
# Warmup Iteration  13: 148554.634 ops/s
# Warmup Iteration  14: 158248.727 ops/s
# Warmup Iteration  15: 154225.754 ops/s
# Warmup Iteration  16: 148367.113 ops/s
# Warmup Iteration  17: 169689.674 ops/s
# Warmup Iteration  18: 164078.086 ops/s
# Warmup Iteration  19: 170748.380 ops/s
# Warmup Iteration  20: 176119.595 ops/s
# Warmup Iteration  21: 160542.400 ops/s
# Warmup Iteration  22: 172999.787 ops/s
# Warmup Iteration  23: 165613.702 ops/s
# Warmup Iteration  24: 165002.649 ops/s
# Warmup Iteration  25: 170545.641 ops/s
# Warmup Iteration  26: 161196.217 ops/s
# Warmup Iteration  27: 172010.270 ops/s
# Warmup Iteration  28: 168550.994 ops/s
# Warmup Iteration  29: 161713.222 ops/s
# Warmup Iteration  30: 171649.821 ops/s
Iteration   1: 165516.246 ops/s
Iteration   2: 174456.947 ops/s
Iteration   3: 161069.257 ops/s
Iteration   4: 166823.701 ops/s
Iteration   5: 162094.999 ops/s
Iteration   6: 156728.913 ops/s
Iteration   7: 168316.529 ops/s
Iteration   8: 175538.173 ops/s
Iteration   9: 167840.246 ops/s
Iteration  10: 176405.243 ops/s
Iteration  11: 165987.208 ops/s
Iteration  12: 174295.403 ops/s
Iteration  13: 167294.072 ops/s
Iteration  14: 171552.815 ops/s
Iteration  15: 168003.375 ops/s
Iteration  16: 166524.421 ops/s
Iteration  17: 171584.947 ops/s
Iteration  18: 165951.709 ops/s
Iteration  19: 171855.836 ops/s
Iteration  20: 166223.110 ops/s
Iteration  21: 166013.754 ops/s
Iteration  22: 172701.586 ops/s
Iteration  23: 166389.449 ops/s
Iteration  24: 169119.255 ops/s
Iteration  25: 170343.555 ops/s
Iteration  26: 168167.480 ops/s
Iteration  27: 171314.448 ops/s
Iteration  28: 168173.836 ops/s
Iteration  29: 169630.561 ops/s
Iteration  30: 171118.141 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_bothError":
  168567.841 ±(99.9%) 2856.145 ops/s [Average]
  (min, avg, max) = (156728.913, 168567.841, 176405.243), stdev = 4274.944
  CI (99.9%): [165711.696, 171423.985] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_bothError  thrpt   30  168567.841 ± 2856.145  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_disconnectBeforeConnect$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_disconnectBeforeConnect

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38335.200 ops/s
# Warmup Iteration   2: 143563.247 ops/s
# Warmup Iteration   3: 187369.009 ops/s
# Warmup Iteration   4: 561920.351 ops/s
# Warmup Iteration   5: 656612.247 ops/s
# Warmup Iteration   6: 683512.256 ops/s
# Warmup Iteration   7: 674569.405 ops/s
# Warmup Iteration   8: 669556.103 ops/s
# Warmup Iteration   9: 695999.744 ops/s
# Warmup Iteration  10: 650137.236 ops/s
# Warmup Iteration  11: 631125.746 ops/s
# Warmup Iteration  12: 645577.626 ops/s
# Warmup Iteration  13: 651439.054 ops/s
# Warmup Iteration  14: 698817.454 ops/s
# Warmup Iteration  15: 673168.647 ops/s
# Warmup Iteration  16: 683196.393 ops/s
# Warmup Iteration  17: 705707.879 ops/s
# Warmup Iteration  18: 687381.877 ops/s
# Warmup Iteration  19: 635747.171 ops/s
# Warmup Iteration  20: 695841.097 ops/s
# Warmup Iteration  21: 673556.330 ops/s
# Warmup Iteration  22: 684581.514 ops/s
# Warmup Iteration  23: 714738.979 ops/s
# Warmup Iteration  24: 669188.839 ops/s
# Warmup Iteration  25: 663910.307 ops/s
# Warmup Iteration  26: 699365.673 ops/s
# Warmup Iteration  27: 713310.306 ops/s
# Warmup Iteration  28: 649377.592 ops/s
# Warmup Iteration  29: 700620.120 ops/s
# Warmup Iteration  30: 675274.363 ops/s
Iteration   1: 685322.513 ops/s
Iteration   2: 690409.636 ops/s
Iteration   3: 682002.011 ops/s
Iteration   4: 673656.473 ops/s
Iteration   5: 700435.702 ops/s
Iteration   6: 653892.770 ops/s
Iteration   7: 702975.214 ops/s
Iteration   8: 667556.969 ops/s
Iteration   9: 703114.004 ops/s
Iteration  10: 702613.248 ops/s
Iteration  11: 710651.039 ops/s
Iteration  12: 682952.597 ops/s
Iteration  13: 701268.863 ops/s
Iteration  14: 702500.511 ops/s
Iteration  15: 664662.431 ops/s
Iteration  16: 714410.573 ops/s
Iteration  17: 666132.996 ops/s
Iteration  18: 716655.169 ops/s
Iteration  19: 697017.069 ops/s
Iteration  20: 668141.669 ops/s
Iteration  21: 715444.417 ops/s
Iteration  22: 666642.242 ops/s
Iteration  23: 700658.519 ops/s
Iteration  24: 656709.939 ops/s
Iteration  25: 555097.060 ops/s
Iteration  26: 705848.403 ops/s
Iteration  27: 676028.400 ops/s
Iteration  28: 702673.838 ops/s
Iteration  29: 655875.044 ops/s
Iteration  30: 691211.137 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_disconnectBeforeConnect":
  683752.015 ±(99.9%) 20681.673 ops/s [Average]
  (min, avg, max) = (555097.060, 683752.015, 716655.169), stdev = 30955.356
  CI (99.9%): [663070.343, 704433.688] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableRefCountTest._Benchmark.benchmark_disconnectBeforeConnect  thrpt   30  683752.015 ± 20681.673  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.PeriodicDirectTaskTest._Benchmark.benchmark_runnableThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.PeriodicDirectTaskTest._Benchmark.benchmark_runnableThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93225.372 ops/s
# Warmup Iteration   2: 218864.448 ops/s
# Warmup Iteration   3: 247608.355 ops/s
# Warmup Iteration   4: 228233.395 ops/s
# Warmup Iteration   5: 277303.561 ops/s
# Warmup Iteration   6: 262892.998 ops/s
# Warmup Iteration   7: 270907.685 ops/s
# Warmup Iteration   8: 265532.225 ops/s
# Warmup Iteration   9: 270050.480 ops/s
# Warmup Iteration  10: 274823.080 ops/s
# Warmup Iteration  11: 256122.002 ops/s
# Warmup Iteration  12: 273597.761 ops/s
# Warmup Iteration  13: 270656.043 ops/s
# Warmup Iteration  14: 273966.864 ops/s
# Warmup Iteration  15: 271707.136 ops/s
# Warmup Iteration  16: 267245.011 ops/s
# Warmup Iteration  17: 283502.066 ops/s
# Warmup Iteration  18: 276493.351 ops/s
# Warmup Iteration  19: 286670.124 ops/s
# Warmup Iteration  20: 276134.018 ops/s
# Warmup Iteration  21: 278999.243 ops/s
# Warmup Iteration  22: 285616.397 ops/s
# Warmup Iteration  23: 273944.779 ops/s
# Warmup Iteration  24: 274758.404 ops/s
# Warmup Iteration  25: 292375.402 ops/s
# Warmup Iteration  26: 280160.371 ops/s
# Warmup Iteration  27: 278492.986 ops/s
# Warmup Iteration  28: 274814.170 ops/s
# Warmup Iteration  29: 279093.539 ops/s
# Warmup Iteration  30: 287205.317 ops/s
Iteration   1: 278498.364 ops/s
Iteration   2: 277649.544 ops/s
Iteration   3: 284691.926 ops/s
Iteration   4: 270936.665 ops/s
Iteration   5: 273951.385 ops/s
Iteration   6: 289538.780 ops/s
Iteration   7: 268242.509 ops/s
Iteration   8: 286278.118 ops/s
Iteration   9: 271468.188 ops/s
Iteration  10: 284686.349 ops/s
Iteration  11: 275784.415 ops/s
Iteration  12: 278317.426 ops/s
Iteration  13: 288176.212 ops/s
Iteration  14: 267777.884 ops/s
Iteration  15: 271206.865 ops/s
Iteration  16: 280661.279 ops/s
Iteration  17: 267203.410 ops/s
Iteration  18: 286358.831 ops/s
Iteration  19: 279520.177 ops/s
Iteration  20: 281324.781 ops/s
Iteration  21: 279805.504 ops/s
Iteration  22: 278792.262 ops/s
Iteration  23: 287516.610 ops/s
Iteration  24: 274212.866 ops/s
Iteration  25: 283711.725 ops/s
Iteration  26: 280604.679 ops/s
Iteration  27: 276909.338 ops/s
Iteration  28: 293140.568 ops/s
Iteration  29: 272613.450 ops/s
Iteration  30: 278642.822 ops/s


Result "io.reactivex.rxjava3.core.PeriodicDirectTaskTest._Benchmark.benchmark_runnableThrows":
  278940.764 ±(99.9%) 4547.097 ops/s [Average]
  (min, avg, max) = (267203.410, 278940.764, 293140.568), stdev = 6805.881
  CI (99.9%): [274393.667, 283487.861] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
PeriodicDirectTaskTest._Benchmark.benchmark_runnableThrows  thrpt   30  278940.764 ± 4547.097  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableThrottleWithTimeoutTests._Benchmark.benchmark_throttleFirstDefaultScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableThrottleWithTimeoutTests._Benchmark.benchmark_throttleFirstDefaultScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21481.678 ops/s
# Warmup Iteration   2: 37415.730 ops/s
# Warmup Iteration   3: 34746.644 ops/s
# Warmup Iteration   4: 101130.422 ops/s
# Warmup Iteration   5: 120368.243 ops/s
# Warmup Iteration   6: 123713.022 ops/s
# Warmup Iteration   7: 129055.034 ops/s
# Warmup Iteration   8: 136043.186 ops/s
# Warmup Iteration   9: 106732.463 ops/s
# Warmup Iteration  10: 108622.120 ops/s
# Warmup Iteration  11: 101905.510 ops/s
# Warmup Iteration  12: 137353.548 ops/s
# Warmup Iteration  13: 121853.354 ops/s
# Warmup Iteration  14: 128076.147 ops/s
# Warmup Iteration  15: 121839.514 ops/s
# Warmup Iteration  16: 110349.282 ops/s
# Warmup Iteration  17: 123424.691 ops/s
# Warmup Iteration  18: 123580.980 ops/s
# Warmup Iteration  19: 116285.399 ops/s
# Warmup Iteration  20: 104090.308 ops/s
# Warmup Iteration  21: 115385.325 ops/s
# Warmup Iteration  22: 136502.066 ops/s
# Warmup Iteration  23: 130137.675 ops/s
# Warmup Iteration  24: 124737.582 ops/s
# Warmup Iteration  25: 138480.432 ops/s
# Warmup Iteration  26: 131609.459 ops/s
# Warmup Iteration  27: 145977.770 ops/s
# Warmup Iteration  28: 119697.098 ops/s
# Warmup Iteration  29: 132413.747 ops/s
# Warmup Iteration  30: 112732.123 ops/s
Iteration   1: 120488.819 ops/s
Iteration   2: 125725.316 ops/s
Iteration   3: 124707.953 ops/s
Iteration   4: 125605.022 ops/s
Iteration   5: 108767.701 ops/s
Iteration   6: 122164.810 ops/s
Iteration   7: 111652.400 ops/s
Iteration   8: 141845.351 ops/s
Iteration   9: 120338.186 ops/s
Iteration  10: 129006.614 ops/s
Iteration  11: 139546.835 ops/s
Iteration  12: 135401.709 ops/s
Iteration  13: 132368.411 ops/s
Iteration  14: 118010.120 ops/s
Iteration  15: 126480.636 ops/s
Iteration  16: 127308.815 ops/s
Iteration  17: 118845.684 ops/s
Iteration  18: 118605.434 ops/s
Iteration  19: 131752.549 ops/s
Iteration  20: 114593.361 ops/s
Iteration  21: 124210.234 ops/s
Iteration  22: 119669.897 ops/s
Iteration  23: 114465.660 ops/s
Iteration  24: 126511.511 ops/s
Iteration  25: 131297.200 ops/s
Iteration  26: 107659.982 ops/s
Iteration  27: 125631.292 ops/s
Iteration  28: 121227.149 ops/s
Iteration  29: 105427.371 ops/s
Iteration  30: 103949.269 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableThrottleWithTimeoutTests._Benchmark.benchmark_throttleFirstDefaultScheduler":
  122442.176 ±(99.9%) 6305.293 ops/s [Average]
  (min, avg, max) = (103949.269, 122442.176, 141845.351), stdev = 9437.467
  CI (99.9%): [116136.883, 128747.469] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
FlowableThrottleWithTimeoutTests._Benchmark.benchmark_throttleFirstDefaultScheduler  thrpt   30  122442.176 ± 6305.293  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedFallbackTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedFallbackTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9160.405 ops/s
# Warmup Iteration   2: 43641.392 ops/s
# Warmup Iteration   3: 34181.873 ops/s
# Warmup Iteration   4: 54615.011 ops/s
# Warmup Iteration   5: 59976.645 ops/s
# Warmup Iteration   6: 59502.788 ops/s
# Warmup Iteration   7: 121665.366 ops/s
# Warmup Iteration   8: 124901.261 ops/s
# Warmup Iteration   9: 97452.810 ops/s
# Warmup Iteration  10: 129422.139 ops/s
# Warmup Iteration  11: 127385.195 ops/s
# Warmup Iteration  12: 117632.359 ops/s
# Warmup Iteration  13: 110201.849 ops/s
# Warmup Iteration  14: 126664.534 ops/s
# Warmup Iteration  15: 129193.961 ops/s
# Warmup Iteration  16: 110364.025 ops/s
# Warmup Iteration  17: 102143.056 ops/s
# Warmup Iteration  18: 133573.403 ops/s
# Warmup Iteration  19: 115788.793 ops/s
# Warmup Iteration  20: 125802.192 ops/s
# Warmup Iteration  21: 126804.632 ops/s
# Warmup Iteration  22: 130759.651 ops/s
# Warmup Iteration  23: 106787.068 ops/s
# Warmup Iteration  24: 116179.510 ops/s
# Warmup Iteration  25: 101775.011 ops/s
# Warmup Iteration  26: 115047.171 ops/s
# Warmup Iteration  27: 121183.181 ops/s
# Warmup Iteration  28: 112597.881 ops/s
# Warmup Iteration  29: 109377.096 ops/s
# Warmup Iteration  30: 125305.308 ops/s
Iteration   1: 112342.508 ops/s
Iteration   2: 130220.226 ops/s
Iteration   3: 109982.274 ops/s
Iteration   4: 109288.749 ops/s
Iteration   5: 120450.211 ops/s
Iteration   6: 120570.402 ops/s
Iteration   7: 111609.738 ops/s
Iteration   8: 109247.401 ops/s
Iteration   9: 120381.328 ops/s
Iteration  10: 116777.022 ops/s
Iteration  11: 107534.684 ops/s
Iteration  12: 125750.376 ops/s
Iteration  13: 116905.728 ops/s
Iteration  14: 100036.032 ops/s
Iteration  15: 111633.828 ops/s
Iteration  16: 102778.339 ops/s
Iteration  17: 106106.471 ops/s
Iteration  18: 126596.169 ops/s
Iteration  19: 128625.143 ops/s
Iteration  20: 110798.033 ops/s
Iteration  21: 117473.002 ops/s
Iteration  22: 124129.988 ops/s
Iteration  23: 129240.570 ops/s
Iteration  24: 110803.876 ops/s
Iteration  25: 114517.201 ops/s
Iteration  26: 112029.844 ops/s
Iteration  27: 130476.632 ops/s
Iteration  28: 120394.805 ops/s
Iteration  29: 121288.154 ops/s
Iteration  30: 136086.420 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedFallbackTake":
  117135.838 ±(99.9%) 6008.219 ops/s [Average]
  (min, avg, max) = (100036.032, 117135.838, 136086.420), stdev = 8992.820
  CI (99.9%): [111127.619, 123144.058] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableTimeoutTests._Benchmark.benchmark_timedFallbackTake  thrpt   30  117135.838 ± 6008.219  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatWhenTrampolineScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatWhenTrampolineScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22830.780 ops/s
# Warmup Iteration   2: 98079.836 ops/s
# Warmup Iteration   3: 159118.956 ops/s
# Warmup Iteration   4: 347605.789 ops/s
# Warmup Iteration   5: 328285.981 ops/s
# Warmup Iteration   6: 333340.827 ops/s
# Warmup Iteration   7: 347281.115 ops/s
# Warmup Iteration   8: 344512.826 ops/s
# Warmup Iteration   9: 362554.926 ops/s
# Warmup Iteration  10: 362119.171 ops/s
# Warmup Iteration  11: 346716.507 ops/s
# Warmup Iteration  12: 343244.638 ops/s
# Warmup Iteration  13: 367601.222 ops/s
# Warmup Iteration  14: 342949.035 ops/s
# Warmup Iteration  15: 363815.473 ops/s
# Warmup Iteration  16: 339537.745 ops/s
# Warmup Iteration  17: 346149.032 ops/s
# Warmup Iteration  18: 355583.674 ops/s
# Warmup Iteration  19: 338048.007 ops/s
# Warmup Iteration  20: 360331.294 ops/s
# Warmup Iteration  21: 347696.707 ops/s
# Warmup Iteration  22: 356590.337 ops/s
# Warmup Iteration  23: 352005.879 ops/s
# Warmup Iteration  24: 338596.648 ops/s
# Warmup Iteration  25: 360296.162 ops/s
# Warmup Iteration  26: 348339.052 ops/s
# Warmup Iteration  27: 339963.741 ops/s
# Warmup Iteration  28: 348898.248 ops/s
# Warmup Iteration  29: 352643.164 ops/s
# Warmup Iteration  30: 362432.216 ops/s
Iteration   1: 346290.069 ops/s
Iteration   2: 362037.167 ops/s
Iteration   3: 345437.993 ops/s
Iteration   4: 346797.947 ops/s
Iteration   5: 355987.159 ops/s
Iteration   6: 351025.239 ops/s
Iteration   7: 345128.868 ops/s
Iteration   8: 351348.205 ops/s
Iteration   9: 357670.401 ops/s
Iteration  10: 305073.589 ops/s
Iteration  11: 332008.460 ops/s
Iteration  12: 347670.816 ops/s
Iteration  13: 346482.384 ops/s
Iteration  14: 356356.962 ops/s
Iteration  15: 351943.806 ops/s
Iteration  16: 346507.980 ops/s
Iteration  17: 342280.493 ops/s
Iteration  18: 356217.503 ops/s
Iteration  19: 358653.607 ops/s
Iteration  20: 348662.199 ops/s
Iteration  21: 351218.043 ops/s
Iteration  22: 339868.626 ops/s
Iteration  23: 356906.918 ops/s
Iteration  24: 350906.529 ops/s
Iteration  25: 354944.493 ops/s
Iteration  26: 371303.675 ops/s
Iteration  27: 339256.524 ops/s
Iteration  28: 362974.083 ops/s
Iteration  29: 362034.081 ops/s
Iteration  30: 346111.337 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatWhenTrampolineScheduler":
  349636.838 ±(99.9%) 7819.929 ops/s [Average]
  (min, avg, max) = (305073.589, 349636.838, 371303.675), stdev = 11704.503
  CI (99.9%): [341816.909, 357456.768] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableRepeatTest._Benchmark.benchmark_repeatWhenTrampolineScheduler  thrpt   30  349636.838 ± 7819.929  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_bufferOpenCloseCloseReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_bufferOpenCloseCloseReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40698.562 ops/s
# Warmup Iteration   2: 86143.566 ops/s
# Warmup Iteration   3: 306395.993 ops/s
# Warmup Iteration   4: 317793.232 ops/s
# Warmup Iteration   5: 356714.727 ops/s
# Warmup Iteration   6: 340776.359 ops/s
# Warmup Iteration   7: 362942.047 ops/s
# Warmup Iteration   8: 349673.204 ops/s
# Warmup Iteration   9: 351587.611 ops/s
# Warmup Iteration  10: 358812.398 ops/s
# Warmup Iteration  11: 334564.959 ops/s
# Warmup Iteration  12: 318392.112 ops/s
# Warmup Iteration  13: 360495.067 ops/s
# Warmup Iteration  14: 346522.426 ops/s
# Warmup Iteration  15: 357363.252 ops/s
# Warmup Iteration  16: 343172.817 ops/s
# Warmup Iteration  17: 379955.661 ops/s
# Warmup Iteration  18: 349883.225 ops/s
# Warmup Iteration  19: 370360.993 ops/s
# Warmup Iteration  20: 362916.103 ops/s
# Warmup Iteration  21: 363365.124 ops/s
# Warmup Iteration  22: 369795.028 ops/s
# Warmup Iteration  23: 352406.907 ops/s
# Warmup Iteration  24: 368261.733 ops/s
# Warmup Iteration  25: 349882.367 ops/s
# Warmup Iteration  26: 365694.507 ops/s
# Warmup Iteration  27: 355129.407 ops/s
# Warmup Iteration  28: 363272.292 ops/s
# Warmup Iteration  29: 365060.565 ops/s
# Warmup Iteration  30: 365597.752 ops/s
Iteration   1: 373123.442 ops/s
Iteration   2: 372232.947 ops/s
Iteration   3: 354835.862 ops/s
Iteration   4: 360479.494 ops/s
Iteration   5: 365007.881 ops/s
Iteration   6: 360509.479 ops/s
Iteration   7: 375076.249 ops/s
Iteration   8: 348288.354 ops/s
Iteration   9: 387221.835 ops/s
Iteration  10: 342949.655 ops/s
Iteration  11: 367156.559 ops/s
Iteration  12: 381181.594 ops/s
Iteration  13: 357846.103 ops/s
Iteration  14: 364592.365 ops/s
Iteration  15: 360267.406 ops/s
Iteration  16: 350953.606 ops/s
Iteration  17: 375941.966 ops/s
Iteration  18: 368065.524 ops/s
Iteration  19: 373798.799 ops/s
Iteration  20: 357421.485 ops/s
Iteration  21: 373571.283 ops/s
Iteration  22: 369426.716 ops/s
Iteration  23: 369717.704 ops/s
Iteration  24: 363832.851 ops/s
Iteration  25: 368502.527 ops/s
Iteration  26: 357274.403 ops/s
Iteration  27: 365193.951 ops/s
Iteration  28: 373120.382 ops/s
Iteration  29: 375444.815 ops/s
Iteration  30: 362489.583 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_bufferOpenCloseCloseReturnsNull":
  365850.827 ±(99.9%) 6533.031 ops/s [Average]
  (min, avg, max) = (342949.655, 365850.827, 387221.835), stdev = 9778.335
  CI (99.9%): [359317.796, 372383.859] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_bufferOpenCloseCloseReturnsNull  thrpt   30  365850.827 ± 6533.031  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_arrayUndeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_arrayUndeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16420.516 ops/s
# Warmup Iteration   2: 82869.169 ops/s
# Warmup Iteration   3: 157623.908 ops/s
# Warmup Iteration   4: 166277.514 ops/s
# Warmup Iteration   5: 174290.349 ops/s
# Warmup Iteration   6: 169875.754 ops/s
# Warmup Iteration   7: 166994.514 ops/s
# Warmup Iteration   8: 168805.966 ops/s
# Warmup Iteration   9: 168174.519 ops/s
# Warmup Iteration  10: 178631.248 ops/s
# Warmup Iteration  11: 169041.829 ops/s
# Warmup Iteration  12: 172966.094 ops/s
# Warmup Iteration  13: 167426.932 ops/s
# Warmup Iteration  14: 168561.970 ops/s
# Warmup Iteration  15: 174324.783 ops/s
# Warmup Iteration  16: 174398.127 ops/s
# Warmup Iteration  17: 181457.531 ops/s
# Warmup Iteration  18: 175905.967 ops/s
# Warmup Iteration  19: 183086.771 ops/s
# Warmup Iteration  20: 174656.818 ops/s
# Warmup Iteration  21: 176485.852 ops/s
# Warmup Iteration  22: 180749.782 ops/s
# Warmup Iteration  23: 173992.642 ops/s
# Warmup Iteration  24: 178799.437 ops/s
# Warmup Iteration  25: 178787.004 ops/s
# Warmup Iteration  26: 171725.240 ops/s
# Warmup Iteration  27: 179743.876 ops/s
# Warmup Iteration  28: 168607.575 ops/s
# Warmup Iteration  29: 187302.007 ops/s
# Warmup Iteration  30: 181251.294 ops/s
Iteration   1: 175762.534 ops/s
Iteration   2: 181119.908 ops/s
Iteration   3: 180081.278 ops/s
Iteration   4: 175879.166 ops/s
Iteration   5: 140584.589 ops/s
Iteration   6: 175148.714 ops/s
Iteration   7: 181798.991 ops/s
Iteration   8: 177816.769 ops/s
Iteration   9: 174676.301 ops/s
Iteration  10: 180573.548 ops/s
Iteration  11: 173548.420 ops/s
Iteration  12: 176023.065 ops/s
Iteration  13: 176862.140 ops/s
Iteration  14: 176845.209 ops/s
Iteration  15: 183749.273 ops/s
Iteration  16: 176795.839 ops/s
Iteration  17: 183736.742 ops/s
Iteration  18: 173960.224 ops/s
Iteration  19: 177566.704 ops/s
Iteration  20: 181052.808 ops/s
Iteration  21: 178327.059 ops/s
Iteration  22: 174970.996 ops/s
Iteration  23: 181199.491 ops/s
Iteration  24: 176835.403 ops/s
Iteration  25: 186533.839 ops/s
Iteration  26: 181012.001 ops/s
Iteration  27: 177207.150 ops/s
Iteration  28: 181756.920 ops/s
Iteration  29: 174735.208 ops/s
Iteration  30: 178454.346 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_arrayUndeliverableUponCancel":
  177153.821 ±(99.9%) 5100.651 ops/s [Average]
  (min, avg, max) = (140584.589, 177153.821, 186533.839), stdev = 7634.415
  CI (99.9%): [172053.170, 182254.472] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
CompletableMergeTest._Benchmark.benchmark_arrayUndeliverableUponCancel  thrpt   30  177153.821 ± 5100.651  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_unsubscribeAll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_unsubscribeAll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 45115.928 ops/s
# Warmup Iteration   2: 201350.072 ops/s
# Warmup Iteration   3: 363935.940 ops/s
# Warmup Iteration   4: 752882.687 ops/s
# Warmup Iteration   5: 894585.783 ops/s
# Warmup Iteration   6: 854479.886 ops/s
# Warmup Iteration   7: 849847.907 ops/s
# Warmup Iteration   8: 867490.834 ops/s
# Warmup Iteration   9: 829384.594 ops/s
# Warmup Iteration  10: 877412.314 ops/s
# Warmup Iteration  11: 875417.056 ops/s
# Warmup Iteration  12: 851144.490 ops/s
# Warmup Iteration  13: 882482.956 ops/s
# Warmup Iteration  14: 842178.827 ops/s
# Warmup Iteration  15: 889672.194 ops/s
# Warmup Iteration  16: 841901.545 ops/s
# Warmup Iteration  17: 832928.800 ops/s
# Warmup Iteration  18: 892003.148 ops/s
# Warmup Iteration  19: 870008.717 ops/s
# Warmup Iteration  20: 875945.490 ops/s
# Warmup Iteration  21: 869480.472 ops/s
# Warmup Iteration  22: 860049.507 ops/s
# Warmup Iteration  23: 893042.432 ops/s
# Warmup Iteration  24: 858706.342 ops/s
# Warmup Iteration  25: 859216.275 ops/s
# Warmup Iteration  26: 872457.147 ops/s
# Warmup Iteration  27: 838969.624 ops/s
# Warmup Iteration  28: 876162.866 ops/s
# Warmup Iteration  29: 848662.184 ops/s
# Warmup Iteration  30: 887499.734 ops/s
Iteration   1: 908204.573 ops/s
Iteration   2: 856544.109 ops/s
Iteration   3: 876202.620 ops/s
Iteration   4: 846586.876 ops/s
Iteration   5: 877674.946 ops/s
Iteration   6: 871090.173 ops/s
Iteration   7: 897671.402 ops/s
Iteration   8: 849379.859 ops/s
Iteration   9: 860775.074 ops/s
Iteration  10: 890889.139 ops/s
Iteration  11: 859347.306 ops/s
Iteration  12: 877012.662 ops/s
Iteration  13: 873227.244 ops/s
Iteration  14: 839836.882 ops/s
Iteration  15: 875446.846 ops/s
Iteration  16: 830194.172 ops/s
Iteration  17: 879867.593 ops/s
Iteration  18: 868437.310 ops/s
Iteration  19: 864619.787 ops/s
Iteration  20: 897527.510 ops/s
Iteration  21: 832791.718 ops/s
Iteration  22: 884067.804 ops/s
Iteration  23: 874983.664 ops/s
Iteration  24: 850996.155 ops/s
Iteration  25: 889597.209 ops/s
Iteration  26: 831376.715 ops/s
Iteration  27: 873807.441 ops/s
Iteration  28: 843647.655 ops/s
Iteration  29: 839689.324 ops/s
Iteration  30: 889186.204 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_unsubscribeAll":
  867022.666 ±(99.9%) 14230.977 ops/s [Average]
  (min, avg, max) = (830194.172, 867022.666, 908204.573), stdev = 21300.258
  CI (99.9%): [852791.689, 881253.643] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_unsubscribeAll  thrpt   30  867022.666 ± 14230.977  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowOpenIgnoresDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowOpenIgnoresDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36330.574 ops/s
# Warmup Iteration   2: 232654.108 ops/s
# Warmup Iteration   3: 752661.672 ops/s
# Warmup Iteration   4: 879147.672 ops/s
# Warmup Iteration   5: 861258.184 ops/s
# Warmup Iteration   6: 774500.821 ops/s
# Warmup Iteration   7: 885820.800 ops/s
# Warmup Iteration   8: 913573.506 ops/s
# Warmup Iteration   9: 876697.370 ops/s
# Warmup Iteration  10: 900862.709 ops/s
# Warmup Iteration  11: 876417.908 ops/s
# Warmup Iteration  12: 873995.462 ops/s
# Warmup Iteration  13: 887284.548 ops/s
# Warmup Iteration  14: 886729.472 ops/s
# Warmup Iteration  15: 911890.544 ops/s
# Warmup Iteration  16: 861537.966 ops/s
# Warmup Iteration  17: 907216.364 ops/s
# Warmup Iteration  18: 911460.729 ops/s
# Warmup Iteration  19: 877156.399 ops/s
# Warmup Iteration  20: 901798.257 ops/s
# Warmup Iteration  21: 844521.447 ops/s
# Warmup Iteration  22: 898608.630 ops/s
# Warmup Iteration  23: 887497.008 ops/s
# Warmup Iteration  24: 857818.802 ops/s
# Warmup Iteration  25: 898994.358 ops/s
# Warmup Iteration  26: 883795.834 ops/s
# Warmup Iteration  27: 905872.016 ops/s
# Warmup Iteration  28: 867367.269 ops/s
# Warmup Iteration  29: 801504.665 ops/s
# Warmup Iteration  30: 759494.844 ops/s
Iteration   1: 843126.984 ops/s
Iteration   2: 903249.826 ops/s
Iteration   3: 853863.780 ops/s
Iteration   4: 928379.926 ops/s
Iteration   5: 878223.833 ops/s
Iteration   6: 916037.799 ops/s
Iteration   7: 880850.197 ops/s
Iteration   8: 881793.726 ops/s
Iteration   9: 925262.662 ops/s
Iteration  10: 879116.262 ops/s
Iteration  11: 919344.531 ops/s
Iteration  12: 936683.521 ops/s
Iteration  13: 858070.816 ops/s
Iteration  14: 925792.209 ops/s
Iteration  15: 887901.493 ops/s
Iteration  16: 892556.448 ops/s
Iteration  17: 889163.516 ops/s
Iteration  18: 934032.015 ops/s
Iteration  19: 889312.701 ops/s
Iteration  20: 919732.365 ops/s
Iteration  21: 872560.204 ops/s
Iteration  22: 883845.351 ops/s
Iteration  23: 865632.012 ops/s
Iteration  24: 884306.904 ops/s
Iteration  25: 923100.552 ops/s
Iteration  26: 880417.703 ops/s
Iteration  27: 865007.790 ops/s
Iteration  28: 940442.254 ops/s
Iteration  29: 851147.793 ops/s
Iteration  30: 928446.936 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowOpenIgnoresDispose":
  894580.070 ±(99.9%) 18954.073 ops/s [Average]
  (min, avg, max) = (843126.984, 894580.070, 940442.254), stdev = 28369.566
  CI (99.9%): [875625.997, 913534.143] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score       Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowOpenIgnoresDispose  thrpt   30  894580.070 ± 18954.073  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_closingIndicatorFunctionCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_closingIndicatorFunctionCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41300.550 ops/s
# Warmup Iteration   2: 130791.898 ops/s
# Warmup Iteration   3: 409906.531 ops/s
# Warmup Iteration   4: 420432.643 ops/s
# Warmup Iteration   5: 413881.167 ops/s
# Warmup Iteration   6: 465045.676 ops/s
# Warmup Iteration   7: 456937.515 ops/s
# Warmup Iteration   8: 487098.942 ops/s
# Warmup Iteration   9: 458880.178 ops/s
# Warmup Iteration  10: 474749.023 ops/s
# Warmup Iteration  11: 473974.573 ops/s
# Warmup Iteration  12: 471669.637 ops/s
# Warmup Iteration  13: 475811.386 ops/s
# Warmup Iteration  14: 470478.996 ops/s
# Warmup Iteration  15: 471751.714 ops/s
# Warmup Iteration  16: 466730.700 ops/s
# Warmup Iteration  17: 486696.975 ops/s
# Warmup Iteration  18: 497116.023 ops/s
# Warmup Iteration  19: 488027.456 ops/s
# Warmup Iteration  20: 490387.333 ops/s
# Warmup Iteration  21: 485604.395 ops/s
# Warmup Iteration  22: 485579.929 ops/s
# Warmup Iteration  23: 504783.096 ops/s
# Warmup Iteration  24: 475775.676 ops/s
# Warmup Iteration  25: 493561.591 ops/s
# Warmup Iteration  26: 487985.019 ops/s
# Warmup Iteration  27: 492016.375 ops/s
# Warmup Iteration  28: 510150.550 ops/s
# Warmup Iteration  29: 500148.136 ops/s
# Warmup Iteration  30: 479112.003 ops/s
Iteration   1: 501860.818 ops/s
Iteration   2: 485543.612 ops/s
Iteration   3: 474924.426 ops/s
Iteration   4: 502848.378 ops/s
Iteration   5: 479316.312 ops/s
Iteration   6: 506846.978 ops/s
Iteration   7: 503480.804 ops/s
Iteration   8: 511717.736 ops/s
Iteration   9: 475079.220 ops/s
Iteration  10: 499501.402 ops/s
Iteration  11: 485912.886 ops/s
Iteration  12: 498007.638 ops/s
Iteration  13: 502681.926 ops/s
Iteration  14: 480420.130 ops/s
Iteration  15: 505754.414 ops/s
Iteration  16: 509298.958 ops/s
Iteration  17: 478202.631 ops/s
Iteration  18: 511597.573 ops/s
Iteration  19: 483757.827 ops/s
Iteration  20: 490505.333 ops/s
Iteration  21: 476376.502 ops/s
Iteration  22: 499904.960 ops/s
Iteration  23: 475560.860 ops/s
Iteration  24: 502897.016 ops/s
Iteration  25: 497505.213 ops/s
Iteration  26: 467638.443 ops/s
Iteration  27: 491317.398 ops/s
Iteration  28: 480090.680 ops/s
Iteration  29: 488197.125 ops/s
Iteration  30: 471277.598 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_closingIndicatorFunctionCrash":
  491267.493 ±(99.9%) 8891.693 ops/s [Average]
  (min, avg, max) = (467638.443, 491267.493, 511717.736), stdev = 13308.668
  CI (99.9%): [482375.801, 500159.186] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_closingIndicatorFunctionCrash  thrpt   30  491267.493 ± 8891.693  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainWindowMissingBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainWindowMissingBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 59938.705 ops/s
# Warmup Iteration   2: 160192.150 ops/s
# Warmup Iteration   3: 350532.378 ops/s
# Warmup Iteration   4: 404524.060 ops/s
# Warmup Iteration   5: 397620.626 ops/s
# Warmup Iteration   6: 447310.700 ops/s
# Warmup Iteration   7: 415511.487 ops/s
# Warmup Iteration   8: 438151.457 ops/s
# Warmup Iteration   9: 430818.662 ops/s
# Warmup Iteration  10: 438242.831 ops/s
# Warmup Iteration  11: 425416.005 ops/s
# Warmup Iteration  12: 437320.835 ops/s
# Warmup Iteration  13: 445951.123 ops/s
# Warmup Iteration  14: 416815.869 ops/s
# Warmup Iteration  15: 439695.034 ops/s
# Warmup Iteration  16: 444647.088 ops/s
# Warmup Iteration  17: 447779.780 ops/s
# Warmup Iteration  18: 428020.811 ops/s
# Warmup Iteration  19: 476461.511 ops/s
# Warmup Iteration  20: 442974.752 ops/s
# Warmup Iteration  21: 461933.516 ops/s
# Warmup Iteration  22: 443198.760 ops/s
# Warmup Iteration  23: 473944.482 ops/s
# Warmup Iteration  24: 380350.239 ops/s
# Warmup Iteration  25: 408277.272 ops/s
# Warmup Iteration  26: 445296.290 ops/s
# Warmup Iteration  27: 443680.289 ops/s
# Warmup Iteration  28: 454286.633 ops/s
# Warmup Iteration  29: 439891.722 ops/s
# Warmup Iteration  30: 445802.387 ops/s
Iteration   1: 469144.481 ops/s
Iteration   2: 434814.870 ops/s
Iteration   3: 457954.984 ops/s
Iteration   4: 468583.341 ops/s
Iteration   5: 441320.425 ops/s
Iteration   6: 460738.195 ops/s
Iteration   7: 450216.977 ops/s
Iteration   8: 451807.591 ops/s
Iteration   9: 466619.234 ops/s
Iteration  10: 447314.312 ops/s
Iteration  11: 454220.991 ops/s
Iteration  12: 440903.367 ops/s
Iteration  13: 462787.302 ops/s
Iteration  14: 450679.489 ops/s
Iteration  15: 444689.203 ops/s
Iteration  16: 446245.290 ops/s
Iteration  17: 462083.542 ops/s
Iteration  18: 430582.169 ops/s
Iteration  19: 439112.389 ops/s
Iteration  20: 475844.517 ops/s
Iteration  21: 438738.994 ops/s
Iteration  22: 465331.663 ops/s
Iteration  23: 449684.240 ops/s
Iteration  24: 467394.356 ops/s
Iteration  25: 467572.364 ops/s
Iteration  26: 445006.497 ops/s
Iteration  27: 462234.943 ops/s
Iteration  28: 450618.931 ops/s
Iteration  29: 453178.451 ops/s
Iteration  30: 446723.622 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainWindowMissingBackpressure":
  453404.891 ±(99.9%) 7768.570 ops/s [Average]
  (min, avg, max) = (430582.169, 453404.891, 475844.517), stdev = 11627.631
  CI (99.9%): [445636.321, 461173.461] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainWindowMissingBackpressure  thrpt   30  453404.891 ± 7768.570  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_timeAndSizeNoTerminalTruncationOnTimechange$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_timeAndSizeNoTerminalTruncationOnTimechange

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 164579.738 ops/s
# Warmup Iteration   2: 974992.747 ops/s
# Warmup Iteration   3: 1128524.890 ops/s
# Warmup Iteration   4: 1551212.398 ops/s
# Warmup Iteration   5: 1834312.578 ops/s
# Warmup Iteration   6: 1770493.637 ops/s
# Warmup Iteration   7: 1721329.716 ops/s
# Warmup Iteration   8: 1847854.237 ops/s
# Warmup Iteration   9: 1727769.534 ops/s
# Warmup Iteration  10: 1773228.252 ops/s
# Warmup Iteration  11: 1842914.547 ops/s
# Warmup Iteration  12: 1703727.277 ops/s
# Warmup Iteration  13: 1814580.198 ops/s
# Warmup Iteration  14: 1812675.005 ops/s
# Warmup Iteration  15: 1728629.977 ops/s
# Warmup Iteration  16: 1817740.192 ops/s
# Warmup Iteration  17: 1727496.132 ops/s
# Warmup Iteration  18: 1854128.516 ops/s
# Warmup Iteration  19: 1699453.001 ops/s
# Warmup Iteration  20: 1833206.459 ops/s
# Warmup Iteration  21: 1802818.011 ops/s
# Warmup Iteration  22: 1792928.431 ops/s
# Warmup Iteration  23: 1795005.881 ops/s
# Warmup Iteration  24: 1745765.582 ops/s
# Warmup Iteration  25: 1772557.477 ops/s
# Warmup Iteration  26: 1839314.082 ops/s
# Warmup Iteration  27: 1684716.186 ops/s
# Warmup Iteration  28: 1779738.246 ops/s
# Warmup Iteration  29: 1761220.264 ops/s
# Warmup Iteration  30: 1781572.027 ops/s
Iteration   1: 1725823.555 ops/s
Iteration   2: 1793760.322 ops/s
Iteration   3: 1761124.105 ops/s
Iteration   4: 1731692.784 ops/s
Iteration   5: 1803345.427 ops/s
Iteration   6: 1747836.381 ops/s
Iteration   7: 1846885.146 ops/s
Iteration   8: 1793603.751 ops/s
Iteration   9: 1747308.117 ops/s
Iteration  10: 1788422.223 ops/s
Iteration  11: 1713861.018 ops/s
Iteration  12: 1811197.381 ops/s
Iteration  13: 1741099.274 ops/s
Iteration  14: 1759572.393 ops/s
Iteration  15: 1837047.144 ops/s
Iteration  16: 1739422.418 ops/s
Iteration  17: 1748738.587 ops/s
Iteration  18: 1793672.716 ops/s
Iteration  19: 1785029.700 ops/s
Iteration  20: 1793680.530 ops/s
Iteration  21: 1724667.265 ops/s
Iteration  22: 1818627.385 ops/s
Iteration  23: 1747516.579 ops/s
Iteration  24: 1814092.885 ops/s
Iteration  25: 1757487.903 ops/s
Iteration  26: 1735719.598 ops/s
Iteration  27: 1773867.264 ops/s
Iteration  28: 1764119.724 ops/s
Iteration  29: 1740483.404 ops/s
Iteration  30: 1748729.048 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_timeAndSizeNoTerminalTruncationOnTimechange":
  1769614.468 ±(99.9%) 23402.135 ops/s [Average]
  (min, avg, max) = (1713861.018, 1769614.468, 1846885.146), stdev = 35027.217
  CI (99.9%): [1746212.332, 1793016.603] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt        Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_timeAndSizeNoTerminalTruncationOnTimechange  thrpt   30  1769614.468 ± 23402.135  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 522926.471 ops/s
# Warmup Iteration   2: 1415391.908 ops/s
# Warmup Iteration   3: 1521898.839 ops/s
# Warmup Iteration   4: 1554160.388 ops/s
# Warmup Iteration   5: 1762067.933 ops/s
# Warmup Iteration   6: 1813586.162 ops/s
# Warmup Iteration   7: 1691054.895 ops/s
# Warmup Iteration   8: 1786240.524 ops/s
# Warmup Iteration   9: 1709250.612 ops/s
# Warmup Iteration  10: 1687441.062 ops/s
# Warmup Iteration  11: 1767545.391 ops/s
# Warmup Iteration  12: 1711684.213 ops/s
# Warmup Iteration  13: 1801577.082 ops/s
# Warmup Iteration  14: 1675012.515 ops/s
# Warmup Iteration  15: 1763352.500 ops/s
# Warmup Iteration  16: 1793853.509 ops/s
# Warmup Iteration  17: 1669344.612 ops/s
# Warmup Iteration  18: 1705472.667 ops/s
# Warmup Iteration  19: 1423265.195 ops/s
# Warmup Iteration  20: 1703846.543 ops/s
# Warmup Iteration  21: 1793226.018 ops/s
# Warmup Iteration  22: 1704885.511 ops/s
# Warmup Iteration  23: 1699682.870 ops/s
# Warmup Iteration  24: 1781491.239 ops/s
# Warmup Iteration  25: 1710579.951 ops/s
# Warmup Iteration  26: 1720274.164 ops/s
# Warmup Iteration  27: 1733987.279 ops/s
# Warmup Iteration  28: 1727731.603 ops/s
# Warmup Iteration  29: 1745663.795 ops/s
# Warmup Iteration  30: 1755847.650 ops/s
Iteration   1: 1726485.329 ops/s
Iteration   2: 1762407.173 ops/s
Iteration   3: 1723631.438 ops/s
Iteration   4: 1715744.693 ops/s
Iteration   5: 1791308.238 ops/s
Iteration   6: 1684312.417 ops/s
Iteration   7: 1791357.421 ops/s
Iteration   8: 1720187.748 ops/s
Iteration   9: 1769531.328 ops/s
Iteration  10: 1685812.949 ops/s
Iteration  11: 1698212.332 ops/s
Iteration  12: 1749928.223 ops/s
Iteration  13: 1711262.161 ops/s
Iteration  14: 1715455.294 ops/s
Iteration  15: 1737943.216 ops/s
Iteration  16: 1683115.877 ops/s
Iteration  17: 1772252.428 ops/s
Iteration  18: 1734319.879 ops/s
Iteration  19: 1750012.464 ops/s
Iteration  20: 1758470.306 ops/s
Iteration  21: 1715280.368 ops/s
Iteration  22: 1725778.890 ops/s
Iteration  23: 1754297.728 ops/s
Iteration  24: 1782345.945 ops/s
Iteration  25: 1709018.483 ops/s
Iteration  26: 1780488.966 ops/s
Iteration  27: 1714034.983 ops/s
Iteration  28: 1740615.184 ops/s
Iteration  29: 1772835.757 ops/s
Iteration  30: 1744901.200 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_normal":
  1737378.281 ±(99.9%) 21171.525 ops/s [Average]
  (min, avg, max) = (1683115.877, 1737378.281, 1791357.421), stdev = 31688.544
  CI (99.9%): [1716206.756, 1758549.805] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_normal  thrpt   30  1737378.281 ± 21171.525  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mapperCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mapperCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 624966.353 ops/s
# Warmup Iteration   2: 3167084.626 ops/s
# Warmup Iteration   3: 4510480.753 ops/s
# Warmup Iteration   4: 4989512.668 ops/s
# Warmup Iteration   5: 5188258.041 ops/s
# Warmup Iteration   6: 5046706.906 ops/s
# Warmup Iteration   7: 5140836.108 ops/s
# Warmup Iteration   8: 5162511.517 ops/s
# Warmup Iteration   9: 4973442.923 ops/s
# Warmup Iteration  10: 5292654.393 ops/s
# Warmup Iteration  11: 5156620.720 ops/s
# Warmup Iteration  12: 5025375.148 ops/s
# Warmup Iteration  13: 5353600.477 ops/s
# Warmup Iteration  14: 4969516.946 ops/s
# Warmup Iteration  15: 5339463.550 ops/s
# Warmup Iteration  16: 5259795.360 ops/s
# Warmup Iteration  17: 5018173.010 ops/s
# Warmup Iteration  18: 5242326.550 ops/s
# Warmup Iteration  19: 5088696.042 ops/s
# Warmup Iteration  20: 5150755.850 ops/s
# Warmup Iteration  21: 5262746.851 ops/s
# Warmup Iteration  22: 4997823.683 ops/s
# Warmup Iteration  23: 5269381.182 ops/s
# Warmup Iteration  24: 5190565.102 ops/s
# Warmup Iteration  25: 4888349.360 ops/s
# Warmup Iteration  26: 5311338.111 ops/s
# Warmup Iteration  27: 5027754.177 ops/s
# Warmup Iteration  28: 5214890.941 ops/s
# Warmup Iteration  29: 5189355.092 ops/s
# Warmup Iteration  30: 5057118.501 ops/s
Iteration   1: 5264740.759 ops/s
Iteration   2: 4974642.401 ops/s
Iteration   3: 5277701.709 ops/s
Iteration   4: 5016016.103 ops/s
Iteration   5: 5010973.510 ops/s
Iteration   6: 5168066.601 ops/s
Iteration   7: 5164958.196 ops/s
Iteration   8: 5225894.850 ops/s
Iteration   9: 5017602.986 ops/s
Iteration  10: 5322426.674 ops/s
Iteration  11: 5054656.797 ops/s
Iteration  12: 4945521.952 ops/s
Iteration  13: 5106921.779 ops/s
Iteration  14: 4952153.929 ops/s
Iteration  15: 5166506.638 ops/s
Iteration  16: 5104622.327 ops/s
Iteration  17: 4956994.429 ops/s
Iteration  18: 5326013.693 ops/s
Iteration  19: 5042706.852 ops/s
Iteration  20: 5274361.960 ops/s
Iteration  21: 5107934.664 ops/s
Iteration  22: 5095590.548 ops/s
Iteration  23: 5148768.476 ops/s
Iteration  24: 4967712.807 ops/s
Iteration  25: 5165776.416 ops/s
Iteration  26: 5042602.533 ops/s
Iteration  27: 5329112.635 ops/s
Iteration  28: 5264522.615 ops/s
Iteration  29: 4944572.265 ops/s
Iteration  30: 5122295.541 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mapperCancels":
  5118745.755 ±(99.9%) 83144.074 ops/s [Average]
  (min, avg, max) = (4944572.265, 5118745.755, 5329112.635), stdev = 124446.146
  CI (99.9%): [5035601.681, 5201889.829] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_mapperCancels  thrpt   30  5118745.755 ± 83144.074  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_checkDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_checkDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 683893.543 ops/s
# Warmup Iteration   2: 2598040.778 ops/s
# Warmup Iteration   3: 3170371.946 ops/s
# Warmup Iteration   4: 4044023.115 ops/s
# Warmup Iteration   5: 3905139.026 ops/s
# Warmup Iteration   6: 3955890.578 ops/s
# Warmup Iteration   7: 4046057.883 ops/s
# Warmup Iteration   8: 3917640.751 ops/s
# Warmup Iteration   9: 3920593.549 ops/s
# Warmup Iteration  10: 4183835.154 ops/s
# Warmup Iteration  11: 3766864.367 ops/s
# Warmup Iteration  12: 4061115.837 ops/s
# Warmup Iteration  13: 3192356.935 ops/s
# Warmup Iteration  14: 3974719.259 ops/s
# Warmup Iteration  15: 4137282.884 ops/s
# Warmup Iteration  16: 3859335.136 ops/s
# Warmup Iteration  17: 4135873.217 ops/s
# Warmup Iteration  18: 3995497.970 ops/s
# Warmup Iteration  19: 3973191.193 ops/s
# Warmup Iteration  20: 4042830.245 ops/s
# Warmup Iteration  21: 3933600.293 ops/s
# Warmup Iteration  22: 3943411.614 ops/s
# Warmup Iteration  23: 4152526.752 ops/s
# Warmup Iteration  24: 3933264.879 ops/s
# Warmup Iteration  25: 3905632.285 ops/s
# Warmup Iteration  26: 4063794.003 ops/s
# Warmup Iteration  27: 3924822.007 ops/s
# Warmup Iteration  28: 3950189.340 ops/s
# Warmup Iteration  29: 4063819.084 ops/s
# Warmup Iteration  30: 3805595.572 ops/s
Iteration   1: 4228444.944 ops/s
Iteration   2: 4054885.490 ops/s
Iteration   3: 3881710.162 ops/s
Iteration   4: 3961850.993 ops/s
Iteration   5: 4019139.538 ops/s
Iteration   6: 4036161.640 ops/s
Iteration   7: 3931856.131 ops/s
Iteration   8: 3997868.560 ops/s
Iteration   9: 3935567.647 ops/s
Iteration  10: 4063824.002 ops/s
Iteration  11: 4157285.892 ops/s
Iteration  12: 3847075.684 ops/s
Iteration  13: 4053117.704 ops/s
Iteration  14: 3999864.644 ops/s
Iteration  15: 3873547.954 ops/s
Iteration  16: 3960898.613 ops/s
Iteration  17: 4088211.894 ops/s
Iteration  18: 3910440.906 ops/s
Iteration  19: 3932936.777 ops/s
Iteration  20: 4114669.687 ops/s
Iteration  21: 3881014.156 ops/s
Iteration  22: 4072640.856 ops/s
Iteration  23: 3865344.352 ops/s
Iteration  24: 3962127.315 ops/s
Iteration  25: 3855384.208 ops/s
Iteration  26: 3965540.686 ops/s
Iteration  27: 3956769.883 ops/s
Iteration  28: 3869220.297 ops/s
Iteration  29: 4096354.717 ops/s
Iteration  30: 3884377.040 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_checkDisposed":
  3981937.746 ±(99.9%) 65654.918 ops/s [Average]
  (min, avg, max) = (3847075.684, 3981937.746, 4228444.944), stdev = 98269.198
  CI (99.9%): [3916282.828, 4047592.664] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_checkDisposed  thrpt   30  3981937.746 ± 65654.918  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_switchOver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_switchOver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 330418.606 ops/s
# Warmup Iteration   2: 1279756.066 ops/s
# Warmup Iteration   3: 1741592.542 ops/s
# Warmup Iteration   4: 1852674.020 ops/s
# Warmup Iteration   5: 1922487.871 ops/s
# Warmup Iteration   6: 1660643.978 ops/s
# Warmup Iteration   7: 1802862.080 ops/s
# Warmup Iteration   8: 1919082.414 ops/s
# Warmup Iteration   9: 1846823.240 ops/s
# Warmup Iteration  10: 1961007.225 ops/s
# Warmup Iteration  11: 1850594.024 ops/s
# Warmup Iteration  12: 1923587.112 ops/s
# Warmup Iteration  13: 1911722.052 ops/s
# Warmup Iteration  14: 1870237.899 ops/s
# Warmup Iteration  15: 1914865.205 ops/s
# Warmup Iteration  16: 1900910.983 ops/s
# Warmup Iteration  17: 1923227.570 ops/s
# Warmup Iteration  18: 1979024.308 ops/s
# Warmup Iteration  19: 1842194.195 ops/s
# Warmup Iteration  20: 1923644.065 ops/s
# Warmup Iteration  21: 1878127.494 ops/s
# Warmup Iteration  22: 1879412.508 ops/s
# Warmup Iteration  23: 1934156.061 ops/s
# Warmup Iteration  24: 1845052.579 ops/s
# Warmup Iteration  25: 1953653.313 ops/s
# Warmup Iteration  26: 1869798.053 ops/s
# Warmup Iteration  27: 1878750.007 ops/s
# Warmup Iteration  28: 1935314.252 ops/s
# Warmup Iteration  29: 1866148.220 ops/s
# Warmup Iteration  30: 1917195.560 ops/s
Iteration   1: 1884193.981 ops/s
Iteration   2: 1918657.296 ops/s
Iteration   3: 1846138.043 ops/s
Iteration   4: 1916307.486 ops/s
Iteration   5: 1825753.335 ops/s
Iteration   6: 1826456.571 ops/s
Iteration   7: 1930518.011 ops/s
Iteration   8: 1882157.180 ops/s
Iteration   9: 1930614.997 ops/s
Iteration  10: 1865149.622 ops/s
Iteration  11: 1967924.185 ops/s
Iteration  12: 1866238.919 ops/s
Iteration  13: 1952380.687 ops/s
Iteration  14: 1818414.451 ops/s
Iteration  15: 1846802.585 ops/s
Iteration  16: 1914508.606 ops/s
Iteration  17: 1841556.272 ops/s
Iteration  18: 1918214.661 ops/s
Iteration  19: 1859446.990 ops/s
Iteration  20: 1917379.057 ops/s
Iteration  21: 1948189.717 ops/s
Iteration  22: 1857505.628 ops/s
Iteration  23: 1953026.174 ops/s
Iteration  24: 1869549.472 ops/s
Iteration  25: 1870622.931 ops/s
Iteration  26: 1901957.825 ops/s
Iteration  27: 1894390.957 ops/s
Iteration  28: 1925567.674 ops/s
Iteration  29: 1902519.722 ops/s
Iteration  30: 1913030.154 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_switchOver":
  1892172.440 ±(99.9%) 27667.625 ops/s [Average]
  (min, avg, max) = (1818414.451, 1892172.440, 1967924.185), stdev = 41411.601
  CI (99.9%): [1864504.815, 1919840.064] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_switchOver  thrpt   30  1892172.440 ± 27667.625  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 138232.376 ops/s
# Warmup Iteration   2: 514021.494 ops/s
# Warmup Iteration   3: 633219.938 ops/s
# Warmup Iteration   4: 599702.555 ops/s
# Warmup Iteration   5: 664714.797 ops/s
# Warmup Iteration   6: 631203.276 ops/s
# Warmup Iteration   7: 674396.104 ops/s
# Warmup Iteration   8: 498591.979 ops/s
# Warmup Iteration   9: 692959.988 ops/s
# Warmup Iteration  10: 686145.718 ops/s
# Warmup Iteration  11: 657130.080 ops/s
# Warmup Iteration  12: 688993.037 ops/s
# Warmup Iteration  13: 674897.508 ops/s
# Warmup Iteration  14: 659918.600 ops/s
# Warmup Iteration  15: 680613.921 ops/s
# Warmup Iteration  16: 674375.129 ops/s
# Warmup Iteration  17: 698698.553 ops/s
# Warmup Iteration  18: 719304.418 ops/s
# Warmup Iteration  19: 710127.780 ops/s
# Warmup Iteration  20: 717234.534 ops/s
# Warmup Iteration  21: 698347.195 ops/s
# Warmup Iteration  22: 703016.817 ops/s
# Warmup Iteration  23: 687254.652 ops/s
# Warmup Iteration  24: 699882.068 ops/s
# Warmup Iteration  25: 715079.052 ops/s
# Warmup Iteration  26: 699960.128 ops/s
# Warmup Iteration  27: 714733.789 ops/s
# Warmup Iteration  28: 676741.608 ops/s
# Warmup Iteration  29: 704113.364 ops/s
# Warmup Iteration  30: 699626.092 ops/s
Iteration   1: 699981.795 ops/s
Iteration   2: 719435.412 ops/s
Iteration   3: 729913.528 ops/s
Iteration   4: 699378.487 ops/s
Iteration   5: 706567.522 ops/s
Iteration   6: 700907.373 ops/s
Iteration   7: 695525.362 ops/s
Iteration   8: 721707.692 ops/s
Iteration   9: 695878.425 ops/s
Iteration  10: 703874.066 ops/s
Iteration  11: 690746.584 ops/s
Iteration  12: 721608.934 ops/s
Iteration  13: 699460.881 ops/s
Iteration  14: 695468.896 ops/s
Iteration  15: 687787.013 ops/s
Iteration  16: 720986.535 ops/s
Iteration  17: 715269.841 ops/s
Iteration  18: 689382.884 ops/s
Iteration  19: 714354.586 ops/s
Iteration  20: 701901.943 ops/s
Iteration  21: 729454.449 ops/s
Iteration  22: 687798.896 ops/s
Iteration  23: 728290.497 ops/s
Iteration  24: 692089.775 ops/s
Iteration  25: 696567.342 ops/s
Iteration  26: 712075.012 ops/s
Iteration  27: 725414.775 ops/s
Iteration  28: 730509.740 ops/s
Iteration  29: 705991.863 ops/s
Iteration  30: 687325.328 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mainError":
  706855.181 ±(99.9%) 9577.283 ops/s [Average]
  (min, avg, max) = (687325.328, 706855.181, 730509.740), stdev = 14334.827
  CI (99.9%): [697277.899, 716432.464] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_mainError  thrpt   30  706855.181 ± 9577.283  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 704358.717 ops/s
# Warmup Iteration   2: 1990119.971 ops/s
# Warmup Iteration   3: 2261182.248 ops/s
# Warmup Iteration   4: 2575990.267 ops/s
# Warmup Iteration   5: 2698290.463 ops/s
# Warmup Iteration   6: 2591629.163 ops/s
# Warmup Iteration   7: 2607368.758 ops/s
# Warmup Iteration   8: 2571013.447 ops/s
# Warmup Iteration   9: 2617757.659 ops/s
# Warmup Iteration  10: 2564268.751 ops/s
# Warmup Iteration  11: 2526747.079 ops/s
# Warmup Iteration  12: 2685142.760 ops/s
# Warmup Iteration  13: 2506278.510 ops/s
# Warmup Iteration  14: 2718718.436 ops/s
# Warmup Iteration  15: 2538472.339 ops/s
# Warmup Iteration  16: 2722554.323 ops/s
# Warmup Iteration  17: 2609305.799 ops/s
# Warmup Iteration  18: 2712545.092 ops/s
# Warmup Iteration  19: 2551808.321 ops/s
# Warmup Iteration  20: 2761814.356 ops/s
# Warmup Iteration  21: 2434569.381 ops/s
# Warmup Iteration  22: 2626786.309 ops/s
# Warmup Iteration  23: 2701460.037 ops/s
# Warmup Iteration  24: 2606990.923 ops/s
# Warmup Iteration  25: 2541244.530 ops/s
# Warmup Iteration  26: 2700995.689 ops/s
# Warmup Iteration  27: 2591567.616 ops/s
# Warmup Iteration  28: 2604118.918 ops/s
# Warmup Iteration  29: 2628804.794 ops/s
# Warmup Iteration  30: 2538075.383 ops/s
Iteration   1: 2766214.166 ops/s
Iteration   2: 2572678.642 ops/s
Iteration   3: 2621450.704 ops/s
Iteration   4: 2625488.101 ops/s
Iteration   5: 2588085.239 ops/s
Iteration   6: 2603786.289 ops/s
Iteration   7: 2663477.251 ops/s
Iteration   8: 2547978.048 ops/s
Iteration   9: 2583974.140 ops/s
Iteration  10: 2680848.890 ops/s
Iteration  11: 2616965.203 ops/s
Iteration  12: 2591667.868 ops/s
Iteration  13: 2599405.078 ops/s
Iteration  14: 2685523.835 ops/s
Iteration  15: 2587913.814 ops/s
Iteration  16: 2672557.162 ops/s
Iteration  17: 2713536.497 ops/s
Iteration  18: 2586766.591 ops/s
Iteration  19: 2692253.434 ops/s
Iteration  20: 2703174.154 ops/s
Iteration  21: 2540015.346 ops/s
Iteration  22: 2720941.360 ops/s
Iteration  23: 2610993.357 ops/s
Iteration  24: 2660783.157 ops/s
Iteration  25: 2639305.307 ops/s
Iteration  26: 2625780.349 ops/s
Iteration  27: 2663830.124 ops/s
Iteration  28: 2545772.865 ops/s
Iteration  29: 2587438.588 ops/s
Iteration  30: 2548858.761 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_dispose":
  2628248.811 ±(99.9%) 38951.547 ops/s [Average]
  (min, avg, max) = (2540015.346, 2628248.811, 2766214.166), stdev = 58300.846
  CI (99.9%): [2589297.264, 2667200.358] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_dispose  thrpt   30  2628248.811 ± 38951.547  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85410.409 ops/s
# Warmup Iteration   2: 289330.130 ops/s
# Warmup Iteration   3: 446531.579 ops/s
# Warmup Iteration   4: 525675.302 ops/s
# Warmup Iteration   5: 550085.324 ops/s
# Warmup Iteration   6: 570620.424 ops/s
# Warmup Iteration   7: 578552.376 ops/s
# Warmup Iteration   8: 561582.851 ops/s
# Warmup Iteration   9: 589356.281 ops/s
# Warmup Iteration  10: 585600.146 ops/s
# Warmup Iteration  11: 547914.399 ops/s
# Warmup Iteration  12: 582178.880 ops/s
# Warmup Iteration  13: 572938.200 ops/s
# Warmup Iteration  14: 560723.747 ops/s
# Warmup Iteration  15: 598432.448 ops/s
# Warmup Iteration  16: 551054.024 ops/s
# Warmup Iteration  17: 578637.786 ops/s
# Warmup Iteration  18: 599052.788 ops/s
# Warmup Iteration  19: 583039.500 ops/s
# Warmup Iteration  20: 591062.568 ops/s
# Warmup Iteration  21: 553953.350 ops/s
# Warmup Iteration  22: 592023.728 ops/s
# Warmup Iteration  23: 623240.674 ops/s
# Warmup Iteration  24: 588292.286 ops/s
# Warmup Iteration  25: 588103.409 ops/s
# Warmup Iteration  26: 611609.665 ops/s
# Warmup Iteration  27: 593012.946 ops/s
# Warmup Iteration  28: 586902.039 ops/s
# Warmup Iteration  29: 614159.161 ops/s
# Warmup Iteration  30: 589665.413 ops/s
Iteration   1: 601949.467 ops/s
Iteration   2: 587517.215 ops/s
Iteration   3: 609563.652 ops/s
Iteration   4: 600875.325 ops/s
Iteration   5: 586041.275 ops/s
Iteration   6: 615609.209 ops/s
Iteration   7: 613125.708 ops/s
Iteration   8: 589079.739 ops/s
Iteration   9: 614339.842 ops/s
Iteration  10: 615662.186 ops/s
Iteration  11: 581275.226 ops/s
Iteration  12: 598769.320 ops/s
Iteration  13: 574457.375 ops/s
Iteration  14: 586058.023 ops/s
Iteration  15: 596300.648 ops/s
Iteration  16: 594164.017 ops/s
Iteration  17: 598670.040 ops/s
Iteration  18: 611625.036 ops/s
Iteration  19: 574099.252 ops/s
Iteration  20: 624247.120 ops/s
Iteration  21: 602885.701 ops/s
Iteration  22: 581226.153 ops/s
Iteration  23: 610818.848 ops/s
Iteration  24: 586111.004 ops/s
Iteration  25: 612477.741 ops/s
Iteration  26: 587516.846 ops/s
Iteration  27: 609524.406 ops/s
Iteration  28: 590342.196 ops/s
Iteration  29: 586427.430 ops/s
Iteration  30: 619245.546 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mapperCrash":
  598666.852 ±(99.9%) 9401.764 ops/s [Average]
  (min, avg, max) = (574099.252, 598666.852, 624247.120), stdev = 14072.118
  CI (99.9%): [589265.088, 608068.615] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_mapperCrash  thrpt   30  598666.852 ± 9401.764  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mainErrorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mainErrorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60284.211 ops/s
# Warmup Iteration   2: 470621.076 ops/s
# Warmup Iteration   3: 539774.780 ops/s
# Warmup Iteration   4: 509436.164 ops/s
# Warmup Iteration   5: 520922.887 ops/s
# Warmup Iteration   6: 577674.846 ops/s
# Warmup Iteration   7: 570860.713 ops/s
# Warmup Iteration   8: 586438.967 ops/s
# Warmup Iteration   9: 563876.449 ops/s
# Warmup Iteration  10: 577404.466 ops/s
# Warmup Iteration  11: 570170.009 ops/s
# Warmup Iteration  12: 576984.694 ops/s
# Warmup Iteration  13: 584814.591 ops/s
# Warmup Iteration  14: 569280.330 ops/s
# Warmup Iteration  15: 561694.261 ops/s
# Warmup Iteration  16: 570314.419 ops/s
# Warmup Iteration  17: 602056.782 ops/s
# Warmup Iteration  18: 618146.527 ops/s
# Warmup Iteration  19: 598589.450 ops/s
# Warmup Iteration  20: 612854.759 ops/s
# Warmup Iteration  21: 594796.478 ops/s
# Warmup Iteration  22: 624527.448 ops/s
# Warmup Iteration  23: 615717.437 ops/s
# Warmup Iteration  24: 587722.033 ops/s
# Warmup Iteration  25: 606521.687 ops/s
# Warmup Iteration  26: 634360.983 ops/s
# Warmup Iteration  27: 592647.347 ops/s
# Warmup Iteration  28: 604749.378 ops/s
# Warmup Iteration  29: 604229.694 ops/s
# Warmup Iteration  30: 615849.227 ops/s
Iteration   1: 602958.733 ops/s
Iteration   2: 612518.896 ops/s
Iteration   3: 595311.815 ops/s
Iteration   4: 598384.311 ops/s
Iteration   5: 610639.554 ops/s
Iteration   6: 599515.284 ops/s
Iteration   7: 624926.031 ops/s
Iteration   8: 601705.286 ops/s
Iteration   9: 625097.160 ops/s
Iteration  10: 582147.659 ops/s
Iteration  11: 613694.326 ops/s
Iteration  12: 624263.727 ops/s
Iteration  13: 593723.568 ops/s
Iteration  14: 596805.916 ops/s
Iteration  15: 607571.186 ops/s
Iteration  16: 608560.830 ops/s
Iteration  17: 600076.902 ops/s
Iteration  18: 614342.641 ops/s
Iteration  19: 599032.586 ops/s
Iteration  20: 611118.286 ops/s
Iteration  21: 602323.970 ops/s
Iteration  22: 615230.295 ops/s
Iteration  23: 586182.929 ops/s
Iteration  24: 600215.736 ops/s
Iteration  25: 622116.108 ops/s
Iteration  26: 598844.999 ops/s
Iteration  27: 618523.308 ops/s
Iteration  28: 602419.414 ops/s
Iteration  29: 482032.504 ops/s
Iteration  30: 604707.418 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mainErrorDelayed":
  601833.046 ±(99.9%) 16768.794 ops/s [Average]
  (min, avg, max) = (482032.504, 601833.046, 625097.160), stdev = 25098.743
  CI (99.9%): [585064.252, 618601.840] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_mainErrorDelayed  thrpt   30  601833.046 ± 16768.794  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81335.662 ops/s
# Warmup Iteration   2: 293318.244 ops/s
# Warmup Iteration   3: 536132.629 ops/s
# Warmup Iteration   4: 531497.720 ops/s
# Warmup Iteration   5: 558552.947 ops/s
# Warmup Iteration   6: 541377.659 ops/s
# Warmup Iteration   7: 578227.430 ops/s
# Warmup Iteration   8: 611920.094 ops/s
# Warmup Iteration   9: 573820.244 ops/s
# Warmup Iteration  10: 602307.970 ops/s
# Warmup Iteration  11: 578897.713 ops/s
# Warmup Iteration  12: 608146.904 ops/s
# Warmup Iteration  13: 580477.536 ops/s
# Warmup Iteration  14: 604023.369 ops/s
# Warmup Iteration  15: 583216.700 ops/s
# Warmup Iteration  16: 581907.857 ops/s
# Warmup Iteration  17: 640361.957 ops/s
# Warmup Iteration  18: 618028.445 ops/s
# Warmup Iteration  19: 642619.157 ops/s
# Warmup Iteration  20: 599676.735 ops/s
# Warmup Iteration  21: 646654.123 ops/s
# Warmup Iteration  22: 616022.917 ops/s
# Warmup Iteration  23: 619902.710 ops/s
# Warmup Iteration  24: 640578.327 ops/s
# Warmup Iteration  25: 602521.476 ops/s
# Warmup Iteration  26: 634077.693 ops/s
# Warmup Iteration  27: 595322.672 ops/s
# Warmup Iteration  28: 620599.832 ops/s
# Warmup Iteration  29: 631953.942 ops/s
# Warmup Iteration  30: 606211.511 ops/s
Iteration   1: 630010.227 ops/s
Iteration   2: 599034.748 ops/s
Iteration   3: 629039.143 ops/s
Iteration   4: 619478.485 ops/s
Iteration   5: 615210.432 ops/s
Iteration   6: 624927.655 ops/s
Iteration   7: 582769.607 ops/s
Iteration   8: 609140.814 ops/s
Iteration   9: 632971.882 ops/s
Iteration  10: 606193.430 ops/s
Iteration  11: 630407.297 ops/s
Iteration  12: 627787.847 ops/s
Iteration  13: 604205.013 ops/s
Iteration  14: 606218.631 ops/s
Iteration  15: 604698.288 ops/s
Iteration  16: 623308.332 ops/s
Iteration  17: 599275.954 ops/s
Iteration  18: 647438.731 ops/s
Iteration  19: 619762.090 ops/s
Iteration  20: 611712.025 ops/s
Iteration  21: 640287.504 ops/s
Iteration  22: 597996.494 ops/s
Iteration  23: 635824.543 ops/s
Iteration  24: 601739.388 ops/s
Iteration  25: 637797.092 ops/s
Iteration  26: 610298.638 ops/s
Iteration  27: 633173.122 ops/s
Iteration  28: 607825.641 ops/s
Iteration  29: 625876.478 ops/s
Iteration  30: 616062.327 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorDelayed":
  617682.395 ±(99.9%) 10183.603 ops/s [Average]
  (min, avg, max) = (582769.607, 617682.395, 647438.731), stdev = 15242.339
  CI (99.9%): [607498.792, 627865.998] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorDelayed  thrpt   30  617682.395 ± 10183.603  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mainCompletesinnerErrorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mainCompletesinnerErrorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81107.636 ops/s
# Warmup Iteration   2: 333126.177 ops/s
# Warmup Iteration   3: 550313.121 ops/s
# Warmup Iteration   4: 554857.371 ops/s
# Warmup Iteration   5: 511295.774 ops/s
# Warmup Iteration   6: 600626.575 ops/s
# Warmup Iteration   7: 598717.233 ops/s
# Warmup Iteration   8: 589813.566 ops/s
# Warmup Iteration   9: 606814.624 ops/s
# Warmup Iteration  10: 583947.815 ops/s
# Warmup Iteration  11: 591048.765 ops/s
# Warmup Iteration  12: 587014.984 ops/s
# Warmup Iteration  13: 597979.818 ops/s
# Warmup Iteration  14: 578808.003 ops/s
# Warmup Iteration  15: 595387.967 ops/s
# Warmup Iteration  16: 593958.118 ops/s
# Warmup Iteration  17: 630659.624 ops/s
# Warmup Iteration  18: 623869.535 ops/s
# Warmup Iteration  19: 602208.724 ops/s
# Warmup Iteration  20: 658052.272 ops/s
# Warmup Iteration  21: 601570.712 ops/s
# Warmup Iteration  22: 643311.233 ops/s
# Warmup Iteration  23: 601931.912 ops/s
# Warmup Iteration  24: 616461.833 ops/s
# Warmup Iteration  25: 644266.773 ops/s
# Warmup Iteration  26: 616800.942 ops/s
# Warmup Iteration  27: 614014.432 ops/s
# Warmup Iteration  28: 618046.818 ops/s
# Warmup Iteration  29: 610616.933 ops/s
# Warmup Iteration  30: 626996.214 ops/s
Iteration   1: 638537.941 ops/s
Iteration   2: 604648.817 ops/s
Iteration   3: 625533.764 ops/s
Iteration   4: 615220.445 ops/s
Iteration   5: 638249.150 ops/s
Iteration   6: 624551.322 ops/s
Iteration   7: 615311.757 ops/s
Iteration   8: 634285.601 ops/s
Iteration   9: 608172.517 ops/s
Iteration  10: 641464.255 ops/s
Iteration  11: 613611.468 ops/s
Iteration  12: 613940.860 ops/s
Iteration  13: 633263.081 ops/s
Iteration  14: 610025.473 ops/s
Iteration  15: 616803.674 ops/s
Iteration  16: 613174.359 ops/s
Iteration  17: 605978.241 ops/s
Iteration  18: 648772.058 ops/s
Iteration  19: 614720.961 ops/s
Iteration  20: 646608.748 ops/s
Iteration  21: 607103.312 ops/s
Iteration  22: 635758.539 ops/s
Iteration  23: 600898.910 ops/s
Iteration  24: 521458.759 ops/s
Iteration  25: 634158.966 ops/s
Iteration  26: 604732.345 ops/s
Iteration  27: 642959.669 ops/s
Iteration  28: 612164.900 ops/s
Iteration  29: 614208.072 ops/s
Iteration  30: 628066.190 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_mainCompletesinnerErrorDelayed":
  618812.805 ±(99.9%) 15471.703 ops/s [Average]
  (min, avg, max) = (521458.759, 618812.805, 648772.058), stdev = 23157.318
  CI (99.9%): [603341.103, 634284.508] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score       Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_mainCompletesinnerErrorDelayed  thrpt   30  618812.805 ± 15471.703  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69803.686 ops/s
# Warmup Iteration   2: 301259.695 ops/s
# Warmup Iteration   3: 581594.087 ops/s
# Warmup Iteration   4: 573766.535 ops/s
# Warmup Iteration   5: 591601.563 ops/s
# Warmup Iteration   6: 570942.921 ops/s
# Warmup Iteration   7: 580495.378 ops/s
# Warmup Iteration   8: 555947.125 ops/s
# Warmup Iteration   9: 556388.161 ops/s
# Warmup Iteration  10: 601022.244 ops/s
# Warmup Iteration  11: 551445.284 ops/s
# Warmup Iteration  12: 589040.598 ops/s
# Warmup Iteration  13: 608175.630 ops/s
# Warmup Iteration  14: 585275.695 ops/s
# Warmup Iteration  15: 598406.734 ops/s
# Warmup Iteration  16: 602229.603 ops/s
# Warmup Iteration  17: 600369.357 ops/s
# Warmup Iteration  18: 635792.488 ops/s
# Warmup Iteration  19: 627720.850 ops/s
# Warmup Iteration  20: 598096.362 ops/s
# Warmup Iteration  21: 630131.657 ops/s
# Warmup Iteration  22: 604932.208 ops/s
# Warmup Iteration  23: 618198.388 ops/s
# Warmup Iteration  24: 591679.219 ops/s
# Warmup Iteration  25: 619897.221 ops/s
# Warmup Iteration  26: 614079.712 ops/s
# Warmup Iteration  27: 651836.522 ops/s
# Warmup Iteration  28: 615812.867 ops/s
# Warmup Iteration  29: 618741.317 ops/s
# Warmup Iteration  30: 628188.375 ops/s
Iteration   1: 613176.521 ops/s
Iteration   2: 629571.478 ops/s
Iteration   3: 609807.349 ops/s
Iteration   4: 617104.435 ops/s
Iteration   5: 633900.502 ops/s
Iteration   6: 606650.107 ops/s
Iteration   7: 609047.154 ops/s
Iteration   8: 637923.717 ops/s
Iteration   9: 600748.602 ops/s
Iteration  10: 610260.131 ops/s
Iteration  11: 611681.983 ops/s
Iteration  12: 582770.718 ops/s
Iteration  13: 642440.097 ops/s
Iteration  14: 610563.322 ops/s
Iteration  15: 622396.356 ops/s
Iteration  16: 599915.730 ops/s
Iteration  17: 638943.075 ops/s
Iteration  18: 608348.963 ops/s
Iteration  19: 622363.831 ops/s
Iteration  20: 644046.875 ops/s
Iteration  21: 620018.980 ops/s
Iteration  22: 615278.545 ops/s
Iteration  23: 626465.788 ops/s
Iteration  24: 604524.730 ops/s
Iteration  25: 613211.913 ops/s
Iteration  26: 616274.130 ops/s
Iteration  27: 619088.504 ops/s
Iteration  28: 614898.886 ops/s
Iteration  29: 607823.548 ops/s
Iteration  30: 629181.750 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_innerError":
  617280.924 ±(99.9%) 9171.723 ops/s [Average]
  (min, avg, max) = (582770.718, 617280.924, 644046.875), stdev = 13727.805
  CI (99.9%): [608109.201, 626452.647] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_innerError  thrpt   30  617280.924 ± 9171.723  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_scalarEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_scalarEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1953485.114 ops/s
# Warmup Iteration   2: 5804749.521 ops/s
# Warmup Iteration   3: 8730278.525 ops/s
# Warmup Iteration   4: 9023696.334 ops/s
# Warmup Iteration   5: 9068241.502 ops/s
# Warmup Iteration   6: 9028167.780 ops/s
# Warmup Iteration   7: 8944858.813 ops/s
# Warmup Iteration   8: 9468463.077 ops/s
# Warmup Iteration   9: 8608633.229 ops/s
# Warmup Iteration  10: 8703295.270 ops/s
# Warmup Iteration  11: 9196950.939 ops/s
# Warmup Iteration  12: 8698922.427 ops/s
# Warmup Iteration  13: 9388565.785 ops/s
# Warmup Iteration  14: 8984721.355 ops/s
# Warmup Iteration  15: 8901373.372 ops/s
# Warmup Iteration  16: 9353034.813 ops/s
# Warmup Iteration  17: 8969298.222 ops/s
# Warmup Iteration  18: 9242044.381 ops/s
# Warmup Iteration  19: 9340359.319 ops/s
# Warmup Iteration  20: 8893140.772 ops/s
# Warmup Iteration  21: 9357190.381 ops/s
# Warmup Iteration  22: 8918682.773 ops/s
# Warmup Iteration  23: 9024377.110 ops/s
# Warmup Iteration  24: 9028714.176 ops/s
# Warmup Iteration  25: 9244780.293 ops/s
# Warmup Iteration  26: 8959101.436 ops/s
# Warmup Iteration  27: 9213087.928 ops/s
# Warmup Iteration  28: 9063768.028 ops/s
# Warmup Iteration  29: 9288878.085 ops/s
# Warmup Iteration  30: 9012439.170 ops/s
Iteration   1: 9129410.648 ops/s
Iteration   2: 9144975.781 ops/s
Iteration   3: 9013290.926 ops/s
Iteration   4: 9060379.054 ops/s
Iteration   5: 9343857.640 ops/s
Iteration   6: 8896954.433 ops/s
Iteration   7: 9346868.747 ops/s
Iteration   8: 9363842.230 ops/s
Iteration   9: 8975033.374 ops/s
Iteration  10: 9151723.374 ops/s
Iteration  11: 9077539.260 ops/s
Iteration  12: 9028630.885 ops/s
Iteration  13: 9013342.185 ops/s
Iteration  14: 8868989.392 ops/s
Iteration  15: 9007287.585 ops/s
Iteration  16: 9139162.376 ops/s
Iteration  17: 9011594.116 ops/s
Iteration  18: 7515756.457 ops/s
Iteration  19: 8865698.982 ops/s
Iteration  20: 9103055.081 ops/s
Iteration  21: 8918552.494 ops/s
Iteration  22: 9002258.155 ops/s
Iteration  23: 9245418.302 ops/s
Iteration  24: 9145742.910 ops/s
Iteration  25: 9213460.573 ops/s
Iteration  26: 8911320.465 ops/s
Iteration  27: 9119575.875 ops/s
Iteration  28: 9091219.397 ops/s
Iteration  29: 9143491.969 ops/s
Iteration  30: 9230053.649 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_scalarEmptySource":
  9035949.544 ±(99.9%) 212041.324 ops/s [Average]
  (min, avg, max) = (7515756.457, 9035949.544, 9363842.230), stdev = 317373.495
  CI (99.9%): [8823908.220, 9247990.867] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_scalarEmptySource  thrpt   30  9035949.544 ± 212041.324  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorThenMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorThenMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15545.899 ops/s
# Warmup Iteration   2: 109096.151 ops/s
# Warmup Iteration   3: 153521.736 ops/s
# Warmup Iteration   4: 164240.543 ops/s
# Warmup Iteration   5: 162884.218 ops/s
# Warmup Iteration   6: 175674.035 ops/s
# Warmup Iteration   7: 181871.742 ops/s
# Warmup Iteration   8: 168849.685 ops/s
# Warmup Iteration   9: 178095.345 ops/s
# Warmup Iteration  10: 171173.376 ops/s
# Warmup Iteration  11: 175275.596 ops/s
# Warmup Iteration  12: 175508.194 ops/s
# Warmup Iteration  13: 173637.626 ops/s
# Warmup Iteration  14: 176517.594 ops/s
# Warmup Iteration  15: 168872.407 ops/s
# Warmup Iteration  16: 172035.319 ops/s
# Warmup Iteration  17: 182545.661 ops/s
# Warmup Iteration  18: 176939.260 ops/s
# Warmup Iteration  19: 188963.506 ops/s
# Warmup Iteration  20: 185375.889 ops/s
# Warmup Iteration  21: 178040.582 ops/s
# Warmup Iteration  22: 179133.855 ops/s
# Warmup Iteration  23: 185887.450 ops/s
# Warmup Iteration  24: 178922.121 ops/s
# Warmup Iteration  25: 183042.916 ops/s
# Warmup Iteration  26: 180527.853 ops/s
# Warmup Iteration  27: 183271.034 ops/s
# Warmup Iteration  28: 190891.778 ops/s
# Warmup Iteration  29: 178486.689 ops/s
# Warmup Iteration  30: 181596.078 ops/s
Iteration   1: 179484.683 ops/s
Iteration   2: 186266.175 ops/s
Iteration   3: 184496.299 ops/s
Iteration   4: 181130.473 ops/s
Iteration   5: 183939.338 ops/s
Iteration   6: 181067.879 ops/s
Iteration   7: 186153.429 ops/s
Iteration   8: 179220.273 ops/s
Iteration   9: 187124.797 ops/s
Iteration  10: 182883.512 ops/s
Iteration  11: 179350.771 ops/s
Iteration  12: 186083.189 ops/s
Iteration  13: 184671.640 ops/s
Iteration  14: 186635.892 ops/s
Iteration  15: 172256.473 ops/s
Iteration  16: 179054.984 ops/s
Iteration  17: 186126.587 ops/s
Iteration  18: 179352.926 ops/s
Iteration  19: 182993.290 ops/s
Iteration  20: 185459.036 ops/s
Iteration  21: 183835.306 ops/s
Iteration  22: 185837.953 ops/s
Iteration  23: 176828.703 ops/s
Iteration  24: 183480.486 ops/s
Iteration  25: 186720.826 ops/s
Iteration  26: 178168.019 ops/s
Iteration  27: 191092.926 ops/s
Iteration  28: 188016.556 ops/s
Iteration  29: 179957.029 ops/s
Iteration  30: 180655.609 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorThenMainError":
  182944.835 ±(99.9%) 2670.048 ops/s [Average]
  (min, avg, max) = (172256.473, 182944.835, 191092.926), stdev = 3996.403
  CI (99.9%): [180274.787, 185614.884] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_innerErrorThenMainError  thrpt   30  182944.835 ± 2670.048  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_scalarSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_scalarSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 986326.907 ops/s
# Warmup Iteration   2: 3935710.174 ops/s
# Warmup Iteration   3: 4300613.323 ops/s
# Warmup Iteration   4: 4870957.223 ops/s
# Warmup Iteration   5: 5134433.370 ops/s
# Warmup Iteration   6: 4763913.793 ops/s
# Warmup Iteration   7: 4901315.808 ops/s
# Warmup Iteration   8: 5092214.421 ops/s
# Warmup Iteration   9: 4805675.740 ops/s
# Warmup Iteration  10: 5076682.069 ops/s
# Warmup Iteration  11: 4970346.800 ops/s
# Warmup Iteration  12: 4798843.596 ops/s
# Warmup Iteration  13: 5140737.609 ops/s
# Warmup Iteration  14: 4937224.263 ops/s
# Warmup Iteration  15: 5017814.212 ops/s
# Warmup Iteration  16: 4853565.566 ops/s
# Warmup Iteration  17: 5134302.051 ops/s
# Warmup Iteration  18: 5075282.409 ops/s
# Warmup Iteration  19: 4779809.365 ops/s
# Warmup Iteration  20: 5107260.496 ops/s
# Warmup Iteration  21: 4926066.657 ops/s
# Warmup Iteration  22: 4945783.163 ops/s
# Warmup Iteration  23: 4915934.085 ops/s
# Warmup Iteration  24: 4874699.089 ops/s
# Warmup Iteration  25: 5153656.476 ops/s
# Warmup Iteration  26: 4971302.947 ops/s
# Warmup Iteration  27: 5054690.499 ops/s
# Warmup Iteration  28: 5050837.991 ops/s
# Warmup Iteration  29: 4991786.511 ops/s
# Warmup Iteration  30: 5039913.931 ops/s
Iteration   1: 4964006.063 ops/s
Iteration   2: 5042814.025 ops/s
Iteration   3: 4846866.442 ops/s
Iteration   4: 5037910.302 ops/s
Iteration   5: 4787912.228 ops/s
Iteration   6: 5017828.872 ops/s
Iteration   7: 4951127.406 ops/s
Iteration   8: 5052503.153 ops/s
Iteration   9: 5029044.003 ops/s
Iteration  10: 4911709.386 ops/s
Iteration  11: 5172382.490 ops/s
Iteration  12: 4435107.312 ops/s
Iteration  13: 4571239.464 ops/s
Iteration  14: 5136613.932 ops/s
Iteration  15: 5053632.276 ops/s
Iteration  16: 4860687.204 ops/s
Iteration  17: 5107426.767 ops/s
Iteration  18: 4879064.876 ops/s
Iteration  19: 4914290.458 ops/s
Iteration  20: 5235053.756 ops/s
Iteration  21: 4849097.266 ops/s
Iteration  22: 5196076.931 ops/s
Iteration  23: 4877081.966 ops/s
Iteration  24: 5149525.220 ops/s
Iteration  25: 4918890.907 ops/s
Iteration  26: 5068394.960 ops/s
Iteration  27: 4993020.389 ops/s
Iteration  28: 4867308.157 ops/s
Iteration  29: 5208992.733 ops/s
Iteration  30: 4794785.641 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_scalarSource":
  4964346.486 ±(99.9%) 119304.030 ops/s [Average]
  (min, avg, max) = (4435107.312, 4964346.486, 5235053.756), stdev = 178568.670
  CI (99.9%): [4845042.456, 5083650.517] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_scalarSource  thrpt   30  4964346.486 ± 119304.030  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27306.286 ops/s
# Warmup Iteration   2: 164049.051 ops/s
# Warmup Iteration   3: 187420.626 ops/s
# Warmup Iteration   4: 217147.161 ops/s
# Warmup Iteration   5: 218015.361 ops/s
# Warmup Iteration   6: 205476.729 ops/s
# Warmup Iteration   7: 212454.784 ops/s
# Warmup Iteration   8: 210851.379 ops/s
# Warmup Iteration   9: 209053.964 ops/s
# Warmup Iteration  10: 205893.026 ops/s
# Warmup Iteration  11: 201922.790 ops/s
# Warmup Iteration  12: 208267.152 ops/s
# Warmup Iteration  13: 222708.679 ops/s
# Warmup Iteration  14: 209832.755 ops/s
# Warmup Iteration  15: 225268.117 ops/s
# Warmup Iteration  16: 208057.853 ops/s
# Warmup Iteration  17: 222981.840 ops/s
# Warmup Iteration  18: 218606.364 ops/s
# Warmup Iteration  19: 228049.080 ops/s
# Warmup Iteration  20: 224947.912 ops/s
# Warmup Iteration  21: 215536.624 ops/s
# Warmup Iteration  22: 227256.255 ops/s
# Warmup Iteration  23: 219168.866 ops/s
# Warmup Iteration  24: 215972.647 ops/s
# Warmup Iteration  25: 221870.165 ops/s
# Warmup Iteration  26: 217718.428 ops/s
# Warmup Iteration  27: 222362.480 ops/s
# Warmup Iteration  28: 219508.800 ops/s
# Warmup Iteration  29: 226705.910 ops/s
# Warmup Iteration  30: 212108.819 ops/s
Iteration   1: 210775.657 ops/s
Iteration   2: 231165.583 ops/s
Iteration   3: 222593.961 ops/s
Iteration   4: 212661.975 ops/s
Iteration   5: 224609.883 ops/s
Iteration   6: 219336.946 ops/s
Iteration   7: 218123.084 ops/s
Iteration   8: 224984.631 ops/s
Iteration   9: 219734.040 ops/s
Iteration  10: 229001.378 ops/s
Iteration  11: 222879.000 ops/s
Iteration  12: 218128.340 ops/s
Iteration  13: 227116.432 ops/s
Iteration  14: 214489.843 ops/s
Iteration  15: 222344.621 ops/s
Iteration  16: 225686.075 ops/s
Iteration  17: 216761.921 ops/s
Iteration  18: 227890.034 ops/s
Iteration  19: 230774.070 ops/s
Iteration  20: 216450.677 ops/s
Iteration  21: 223875.128 ops/s
Iteration  22: 212734.819 ops/s
Iteration  23: 222443.887 ops/s
Iteration  24: 217241.503 ops/s
Iteration  25: 218963.815 ops/s
Iteration  26: 219022.349 ops/s
Iteration  27: 221411.953 ops/s
Iteration  28: 221524.729 ops/s
Iteration  29: 226594.789 ops/s
Iteration  30: 224545.799 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel":
  221462.231 ±(99.9%) 3555.450 ops/s [Average]
  (min, avg, max) = (210775.657, 221462.231, 231165.583), stdev = 5321.630
  CI (99.9%): [217906.781, 225017.681] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  221462.231 ± 3555.450  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_checkBadSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_checkBadSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75268.735 ops/s
# Warmup Iteration   2: 411473.812 ops/s
# Warmup Iteration   3: 487486.541 ops/s
# Warmup Iteration   4: 497363.074 ops/s
# Warmup Iteration   5: 525384.375 ops/s
# Warmup Iteration   6: 494628.189 ops/s
# Warmup Iteration   7: 486594.976 ops/s
# Warmup Iteration   8: 511572.802 ops/s
# Warmup Iteration   9: 486388.827 ops/s
# Warmup Iteration  10: 511667.987 ops/s
# Warmup Iteration  11: 505064.094 ops/s
# Warmup Iteration  12: 495478.509 ops/s
# Warmup Iteration  13: 513084.198 ops/s
# Warmup Iteration  14: 488441.566 ops/s
# Warmup Iteration  15: 526353.193 ops/s
# Warmup Iteration  16: 504084.945 ops/s
# Warmup Iteration  17: 535091.582 ops/s
# Warmup Iteration  18: 508831.191 ops/s
# Warmup Iteration  19: 527050.120 ops/s
# Warmup Iteration  20: 558909.904 ops/s
# Warmup Iteration  21: 511759.291 ops/s
# Warmup Iteration  22: 545006.135 ops/s
# Warmup Iteration  23: 555697.032 ops/s
# Warmup Iteration  24: 506644.094 ops/s
# Warmup Iteration  25: 533942.601 ops/s
# Warmup Iteration  26: 535366.412 ops/s
# Warmup Iteration  27: 516189.332 ops/s
# Warmup Iteration  28: 534649.782 ops/s
# Warmup Iteration  29: 521292.294 ops/s
# Warmup Iteration  30: 553330.571 ops/s
Iteration   1: 526893.930 ops/s
Iteration   2: 518169.787 ops/s
Iteration   3: 545383.647 ops/s
Iteration   4: 531334.403 ops/s
Iteration   5: 517029.589 ops/s
Iteration   6: 523576.183 ops/s
Iteration   7: 365593.861 ops/s
Iteration   8: 517551.866 ops/s
Iteration   9: 538710.965 ops/s
Iteration  10: 545846.901 ops/s
Iteration  11: 529612.527 ops/s
Iteration  12: 525751.398 ops/s
Iteration  13: 509358.379 ops/s
Iteration  14: 509284.454 ops/s
Iteration  15: 544017.461 ops/s
Iteration  16: 511429.075 ops/s
Iteration  17: 534588.061 ops/s
Iteration  18: 537261.979 ops/s
Iteration  19: 504620.094 ops/s
Iteration  20: 546566.555 ops/s
Iteration  21: 513860.904 ops/s
Iteration  22: 548160.830 ops/s
Iteration  23: 504088.226 ops/s
Iteration  24: 542091.523 ops/s
Iteration  25: 533211.575 ops/s
Iteration  26: 539605.699 ops/s
Iteration  27: 518079.007 ops/s
Iteration  28: 532411.630 ops/s
Iteration  29: 550266.784 ops/s
Iteration  30: 505745.136 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_checkBadSource":
  522336.748 ±(99.9%) 21988.560 ops/s [Average]
  (min, avg, max) = (365593.861, 522336.748, 550266.784), stdev = 32911.444
  CI (99.9%): [500348.188, 544325.308] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_checkBadSource  thrpt   30  522336.748 ± 21988.560  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayError3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayError3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58553.795 ops/s
# Warmup Iteration   2: 380910.293 ops/s
# Warmup Iteration   3: 398856.624 ops/s
# Warmup Iteration   4: 429592.254 ops/s
# Warmup Iteration   5: 417278.642 ops/s
# Warmup Iteration   6: 471624.915 ops/s
# Warmup Iteration   7: 437094.898 ops/s
# Warmup Iteration   8: 457143.093 ops/s
# Warmup Iteration   9: 475583.785 ops/s
# Warmup Iteration  10: 476537.768 ops/s
# Warmup Iteration  11: 447781.514 ops/s
# Warmup Iteration  12: 490105.635 ops/s
# Warmup Iteration  13: 451284.657 ops/s
# Warmup Iteration  14: 463629.121 ops/s
# Warmup Iteration  15: 485283.017 ops/s
# Warmup Iteration  16: 462779.601 ops/s
# Warmup Iteration  17: 489774.355 ops/s
# Warmup Iteration  18: 483114.643 ops/s
# Warmup Iteration  19: 479114.003 ops/s
# Warmup Iteration  20: 503258.354 ops/s
# Warmup Iteration  21: 489552.126 ops/s
# Warmup Iteration  22: 486461.385 ops/s
# Warmup Iteration  23: 487307.050 ops/s
# Warmup Iteration  24: 472059.037 ops/s
# Warmup Iteration  25: 473612.279 ops/s
# Warmup Iteration  26: 499717.806 ops/s
# Warmup Iteration  27: 468026.919 ops/s
# Warmup Iteration  28: 481594.424 ops/s
# Warmup Iteration  29: 499455.557 ops/s
# Warmup Iteration  30: 472687.451 ops/s
Iteration   1: 504045.754 ops/s
Iteration   2: 490850.078 ops/s
Iteration   3: 485261.078 ops/s
Iteration   4: 505166.242 ops/s
Iteration   5: 494465.823 ops/s
Iteration   6: 476536.137 ops/s
Iteration   7: 496113.695 ops/s
Iteration   8: 476146.667 ops/s
Iteration   9: 489264.647 ops/s
Iteration  10: 475293.882 ops/s
Iteration  11: 486803.527 ops/s
Iteration  12: 485750.611 ops/s
Iteration  13: 491703.234 ops/s
Iteration  14: 485834.542 ops/s
Iteration  15: 476351.243 ops/s
Iteration  16: 484400.767 ops/s
Iteration  17: 510395.150 ops/s
Iteration  18: 468425.918 ops/s
Iteration  19: 470694.398 ops/s
Iteration  20: 507192.863 ops/s
Iteration  21: 474382.001 ops/s
Iteration  22: 497209.369 ops/s
Iteration  23: 475000.134 ops/s
Iteration  24: 487461.872 ops/s
Iteration  25: 472618.198 ops/s
Iteration  26: 484745.192 ops/s
Iteration  27: 486772.630 ops/s
Iteration  28: 477923.862 ops/s
Iteration  29: 488301.024 ops/s
Iteration  30: 489515.893 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayError3":
  486487.548 ±(99.9%) 7402.452 ops/s [Average]
  (min, avg, max) = (468425.918, 486487.548, 510395.150), stdev = 11079.643
  CI (99.9%): [479085.096, 493890.000] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
SingleMergeTest._Benchmark.benchmark_mergeDelayError3  thrpt   30  486487.548 ± 7402.452  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayError4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayError4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41896.014 ops/s
# Warmup Iteration   2: 330075.145 ops/s
# Warmup Iteration   3: 402525.167 ops/s
# Warmup Iteration   4: 386067.471 ops/s
# Warmup Iteration   5: 405655.891 ops/s
# Warmup Iteration   6: 411192.824 ops/s
# Warmup Iteration   7: 445941.682 ops/s
# Warmup Iteration   8: 443188.737 ops/s
# Warmup Iteration   9: 452451.651 ops/s
# Warmup Iteration  10: 425891.105 ops/s
# Warmup Iteration  11: 443919.831 ops/s
# Warmup Iteration  12: 451586.785 ops/s
# Warmup Iteration  13: 444149.186 ops/s
# Warmup Iteration  14: 451930.095 ops/s
# Warmup Iteration  15: 449586.282 ops/s
# Warmup Iteration  16: 429065.043 ops/s
# Warmup Iteration  17: 466835.524 ops/s
# Warmup Iteration  18: 480406.193 ops/s
# Warmup Iteration  19: 446772.178 ops/s
# Warmup Iteration  20: 457542.953 ops/s
# Warmup Iteration  21: 463226.208 ops/s
# Warmup Iteration  22: 477179.419 ops/s
# Warmup Iteration  23: 457458.102 ops/s
# Warmup Iteration  24: 453445.832 ops/s
# Warmup Iteration  25: 469957.474 ops/s
# Warmup Iteration  26: 453120.045 ops/s
# Warmup Iteration  27: 448237.231 ops/s
# Warmup Iteration  28: 476923.388 ops/s
# Warmup Iteration  29: 453138.626 ops/s
# Warmup Iteration  30: 462758.994 ops/s
Iteration   1: 351038.425 ops/s
Iteration   2: 471397.021 ops/s
Iteration   3: 456158.113 ops/s
Iteration   4: 473091.096 ops/s
Iteration   5: 465690.032 ops/s
Iteration   6: 453899.185 ops/s
Iteration   7: 466059.970 ops/s
Iteration   8: 452650.633 ops/s
Iteration   9: 487448.084 ops/s
Iteration  10: 450719.085 ops/s
Iteration  11: 460456.102 ops/s
Iteration  12: 478307.281 ops/s
Iteration  13: 458978.880 ops/s
Iteration  14: 470218.096 ops/s
Iteration  15: 464089.862 ops/s
Iteration  16: 448828.782 ops/s
Iteration  17: 463640.463 ops/s
Iteration  18: 465410.790 ops/s
Iteration  19: 475618.854 ops/s
Iteration  20: 469172.979 ops/s
Iteration  21: 443951.107 ops/s
Iteration  22: 485428.698 ops/s
Iteration  23: 447803.323 ops/s
Iteration  24: 464353.097 ops/s
Iteration  25: 448783.709 ops/s
Iteration  26: 459029.852 ops/s
Iteration  27: 467965.452 ops/s
Iteration  28: 444057.038 ops/s
Iteration  29: 485045.841 ops/s
Iteration  30: 457826.450 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayError4":
  459570.610 ±(99.9%) 15831.955 ops/s [Average]
  (min, avg, max) = (351038.425, 459570.610, 487448.084), stdev = 23696.526
  CI (99.9%): [443738.655, 475402.564] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
SingleMergeTest._Benchmark.benchmark_mergeDelayError4  thrpt   30  459570.610 ± 15831.955  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayErrorPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayErrorPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38128.699 ops/s
# Warmup Iteration   2: 335903.801 ops/s
# Warmup Iteration   3: 433283.519 ops/s
# Warmup Iteration   4: 471622.517 ops/s
# Warmup Iteration   5: 472223.845 ops/s
# Warmup Iteration   6: 463398.238 ops/s
# Warmup Iteration   7: 477474.708 ops/s
# Warmup Iteration   8: 463459.276 ops/s
# Warmup Iteration   9: 463838.791 ops/s
# Warmup Iteration  10: 470437.094 ops/s
# Warmup Iteration  11: 452413.385 ops/s
# Warmup Iteration  12: 479899.451 ops/s
# Warmup Iteration  13: 482130.111 ops/s
# Warmup Iteration  14: 475294.874 ops/s
# Warmup Iteration  15: 492046.493 ops/s
# Warmup Iteration  16: 465121.339 ops/s
# Warmup Iteration  17: 504468.521 ops/s
# Warmup Iteration  18: 494818.585 ops/s
# Warmup Iteration  19: 494014.380 ops/s
# Warmup Iteration  20: 503941.267 ops/s
# Warmup Iteration  21: 496290.262 ops/s
# Warmup Iteration  22: 494759.899 ops/s
# Warmup Iteration  23: 496921.312 ops/s
# Warmup Iteration  24: 496728.371 ops/s
# Warmup Iteration  25: 487742.753 ops/s
# Warmup Iteration  26: 504074.712 ops/s
# Warmup Iteration  27: 481743.160 ops/s
# Warmup Iteration  28: 511123.507 ops/s
# Warmup Iteration  29: 489595.475 ops/s
# Warmup Iteration  30: 494702.553 ops/s
Iteration   1: 507731.232 ops/s
Iteration   2: 463264.680 ops/s
Iteration   3: 501270.426 ops/s
Iteration   4: 482340.005 ops/s
Iteration   5: 480914.523 ops/s
Iteration   6: 509212.158 ops/s
Iteration   7: 476244.371 ops/s
Iteration   8: 523520.857 ops/s
Iteration   9: 476933.893 ops/s
Iteration  10: 499903.645 ops/s
Iteration  11: 503254.175 ops/s
Iteration  12: 473641.688 ops/s
Iteration  13: 490444.083 ops/s
Iteration  14: 468948.176 ops/s
Iteration  15: 464538.962 ops/s
Iteration  16: 524293.197 ops/s
Iteration  17: 480601.910 ops/s
Iteration  18: 483508.349 ops/s
Iteration  19: 501783.811 ops/s
Iteration  20: 500169.513 ops/s
Iteration  21: 521733.309 ops/s
Iteration  22: 493826.363 ops/s
Iteration  23: 503778.555 ops/s
Iteration  24: 482278.437 ops/s
Iteration  25: 509257.181 ops/s
Iteration  26: 497131.346 ops/s
Iteration  27: 510142.211 ops/s
Iteration  28: 523369.249 ops/s
Iteration  29: 502396.816 ops/s
Iteration  30: 516062.601 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayErrorPublisher":
  495749.857 ±(99.9%) 12018.997 ops/s [Average]
  (min, avg, max) = (463264.680, 495749.857, 524293.197), stdev = 17989.470
  CI (99.9%): [483730.860, 507768.854] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
SingleMergeTest._Benchmark.benchmark_mergeDelayErrorPublisher  thrpt   30  495749.857 ± 12018.997  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_successShortcut$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_successShortcut

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 129293.668 ops/s
# Warmup Iteration   2: 588959.908 ops/s
# Warmup Iteration   3: 1716170.425 ops/s
# Warmup Iteration   4: 1876761.712 ops/s
# Warmup Iteration   5: 1991504.720 ops/s
# Warmup Iteration   6: 1862607.009 ops/s
# Warmup Iteration   7: 1915599.978 ops/s
# Warmup Iteration   8: 1821727.793 ops/s
# Warmup Iteration   9: 1800039.666 ops/s
# Warmup Iteration  10: 1978528.555 ops/s
# Warmup Iteration  11: 1920880.066 ops/s
# Warmup Iteration  12: 1984931.963 ops/s
# Warmup Iteration  13: 1938128.782 ops/s
# Warmup Iteration  14: 1901421.104 ops/s
# Warmup Iteration  15: 2010416.639 ops/s
# Warmup Iteration  16: 1984134.393 ops/s
# Warmup Iteration  17: 1925716.138 ops/s
# Warmup Iteration  18: 2028594.958 ops/s
# Warmup Iteration  19: 1899740.573 ops/s
# Warmup Iteration  20: 1953933.660 ops/s
# Warmup Iteration  21: 1991067.936 ops/s
# Warmup Iteration  22: 1896938.817 ops/s
# Warmup Iteration  23: 2006337.942 ops/s
# Warmup Iteration  24: 1907846.690 ops/s
# Warmup Iteration  25: 1944921.910 ops/s
# Warmup Iteration  26: 1521919.235 ops/s
# Warmup Iteration  27: 1977316.305 ops/s
# Warmup Iteration  28: 1959768.585 ops/s
# Warmup Iteration  29: 1954249.201 ops/s
# Warmup Iteration  30: 1962231.918 ops/s
Iteration   1: 1951593.752 ops/s
Iteration   2: 1981370.615 ops/s
Iteration   3: 1935006.602 ops/s
Iteration   4: 1966076.756 ops/s
Iteration   5: 1901433.500 ops/s
Iteration   6: 1962810.325 ops/s
Iteration   7: 1973342.410 ops/s
Iteration   8: 1943835.386 ops/s
Iteration   9: 2008894.084 ops/s
Iteration  10: 1914890.637 ops/s
Iteration  11: 2001266.537 ops/s
Iteration  12: 1912824.217 ops/s
Iteration  13: 2005806.601 ops/s
Iteration  14: 1941722.304 ops/s
Iteration  15: 1866946.325 ops/s
Iteration  16: 1945337.629 ops/s
Iteration  17: 1962190.067 ops/s
Iteration  18: 1894114.467 ops/s
Iteration  19: 2028410.854 ops/s
Iteration  20: 1892413.415 ops/s
Iteration  21: 2032841.860 ops/s
Iteration  22: 1960558.643 ops/s
Iteration  23: 1897281.398 ops/s
Iteration  24: 1993609.450 ops/s
Iteration  25: 1970124.721 ops/s
Iteration  26: 1920960.275 ops/s
Iteration  27: 1986583.959 ops/s
Iteration  28: 1952715.928 ops/s
Iteration  29: 1942139.210 ops/s
Iteration  30: 1959912.914 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_successShortcut":
  1953567.161 ±(99.9%) 27784.450 ops/s [Average]
  (min, avg, max) = (1866946.325, 1953567.161, 2032841.860), stdev = 41586.460
  CI (99.9%): [1925782.711, 1981351.612] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_successShortcut  thrpt   30  1953567.161 ± 27784.450  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12612.511 ops/s
# Warmup Iteration   2: 144640.229 ops/s
# Warmup Iteration   3: 235971.064 ops/s
# Warmup Iteration   4: 267121.412 ops/s
# Warmup Iteration   5: 254183.092 ops/s
# Warmup Iteration   6: 265393.961 ops/s
# Warmup Iteration   7: 245192.964 ops/s
# Warmup Iteration   8: 277097.565 ops/s
# Warmup Iteration   9: 283996.847 ops/s
# Warmup Iteration  10: 273772.751 ops/s
# Warmup Iteration  11: 279939.649 ops/s
# Warmup Iteration  12: 273576.144 ops/s
# Warmup Iteration  13: 280952.932 ops/s
# Warmup Iteration  14: 275358.496 ops/s
# Warmup Iteration  15: 274345.349 ops/s
# Warmup Iteration  16: 283736.902 ops/s
# Warmup Iteration  17: 292287.051 ops/s
# Warmup Iteration  18: 294760.984 ops/s
# Warmup Iteration  19: 277014.130 ops/s
# Warmup Iteration  20: 294701.466 ops/s
# Warmup Iteration  21: 293512.579 ops/s
# Warmup Iteration  22: 275519.709 ops/s
# Warmup Iteration  23: 288840.217 ops/s
# Warmup Iteration  24: 294588.155 ops/s
# Warmup Iteration  25: 285369.783 ops/s
# Warmup Iteration  26: 289844.497 ops/s
# Warmup Iteration  27: 293176.824 ops/s
# Warmup Iteration  28: 283173.583 ops/s
# Warmup Iteration  29: 295287.142 ops/s
# Warmup Iteration  30: 287517.564 ops/s
Iteration   1: 293119.989 ops/s
Iteration   2: 284830.028 ops/s
Iteration   3: 284377.714 ops/s
Iteration   4: 297813.428 ops/s
Iteration   5: 281162.815 ops/s
Iteration   6: 295486.184 ops/s
Iteration   7: 300203.856 ops/s
Iteration   8: 276493.849 ops/s
Iteration   9: 293686.298 ops/s
Iteration  10: 279169.995 ops/s
Iteration  11: 280470.617 ops/s
Iteration  12: 289929.055 ops/s
Iteration  13: 269263.568 ops/s
Iteration  14: 292258.540 ops/s
Iteration  15: 290304.573 ops/s
Iteration  16: 278750.466 ops/s
Iteration  17: 290081.425 ops/s
Iteration  18: 286194.860 ops/s
Iteration  19: 288297.981 ops/s
Iteration  20: 295415.891 ops/s
Iteration  21: 276311.738 ops/s
Iteration  22: 295011.932 ops/s
Iteration  23: 284299.361 ops/s
Iteration  24: 295425.068 ops/s
Iteration  25: 295295.247 ops/s
Iteration  26: 284662.679 ops/s
Iteration  27: 290234.453 ops/s
Iteration  28: 283882.016 ops/s
Iteration  29: 277693.655 ops/s
Iteration  30: 301009.951 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeErrors":
  287704.574 ±(99.9%) 5317.514 ops/s [Average]
  (min, avg, max) = (269263.568, 287704.574, 301009.951), stdev = 7959.005
  CI (99.9%): [282387.060, 293022.088] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
SingleMergeTest._Benchmark.benchmark_mergeErrors  thrpt   30  287704.574 ± 5317.514  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlappingWindows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlappingWindows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5450.148 ops/s
# Warmup Iteration   2: 55759.630 ops/s
# Warmup Iteration   3: 92151.051 ops/s
# Warmup Iteration   4: 184946.882 ops/s
# Warmup Iteration   5: 215424.520 ops/s
# Warmup Iteration   6: 205723.238 ops/s
# Warmup Iteration   7: 219367.205 ops/s
# Warmup Iteration   8: 210616.514 ops/s
# Warmup Iteration   9: 204576.101 ops/s
# Warmup Iteration  10: 219299.244 ops/s
# Warmup Iteration  11: 214510.718 ops/s
# Warmup Iteration  12: 196741.612 ops/s
# Warmup Iteration  13: 224630.258 ops/s
# Warmup Iteration  14: 205902.864 ops/s
# Warmup Iteration  15: 216557.665 ops/s
# Warmup Iteration  16: 207866.202 ops/s
# Warmup Iteration  17: 210277.963 ops/s
# Warmup Iteration  18: 210043.098 ops/s
# Warmup Iteration  19: 210621.382 ops/s
# Warmup Iteration  20: 206321.419 ops/s
# Warmup Iteration  21: 183000.849 ops/s
# Warmup Iteration  22: 210919.096 ops/s
# Warmup Iteration  23: 213675.727 ops/s
# Warmup Iteration  24: 209739.073 ops/s
# Warmup Iteration  25: 211424.346 ops/s
# Warmup Iteration  26: 220503.460 ops/s
# Warmup Iteration  27: 217052.551 ops/s
# Warmup Iteration  28: 211346.140 ops/s
# Warmup Iteration  29: 221485.726 ops/s
# Warmup Iteration  30: 207569.726 ops/s
Iteration   1: 213523.711 ops/s
Iteration   2: 218889.382 ops/s
Iteration   3: 208817.007 ops/s
Iteration   4: 219180.726 ops/s
Iteration   5: 205565.093 ops/s
Iteration   6: 214274.369 ops/s
Iteration   7: 214716.055 ops/s
Iteration   8: 210662.162 ops/s
Iteration   9: 215529.183 ops/s
Iteration  10: 211107.845 ops/s
Iteration  11: 216400.627 ops/s
Iteration  12: 207196.339 ops/s
Iteration  13: 208978.783 ops/s
Iteration  14: 218095.465 ops/s
Iteration  15: 201624.024 ops/s
Iteration  16: 214247.732 ops/s
Iteration  17: 211155.599 ops/s
Iteration  18: 213508.543 ops/s
Iteration  19: 214722.774 ops/s
Iteration  20: 219138.003 ops/s
Iteration  21: 219746.627 ops/s
Iteration  22: 205109.680 ops/s
Iteration  23: 224300.091 ops/s
Iteration  24: 206094.505 ops/s
Iteration  25: 218206.863 ops/s
Iteration  26: 208033.241 ops/s
Iteration  27: 217312.410 ops/s
Iteration  28: 214420.020 ops/s
Iteration  29: 205975.804 ops/s
Iteration  30: 215647.365 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlappingWindows":
  213072.668 ±(99.9%) 3596.477 ops/s [Average]
  (min, avg, max) = (201624.024, 213072.668, 224300.091), stdev = 5383.038
  CI (99.9%): [209476.190, 216669.145] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_overlappingWindows  thrpt   30  213072.668 ± 3596.477  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18634.039 ops/s
# Warmup Iteration   2: 127446.059 ops/s
# Warmup Iteration   3: 148625.575 ops/s
# Warmup Iteration   4: 150740.570 ops/s
# Warmup Iteration   5: 164293.293 ops/s
# Warmup Iteration   6: 166385.805 ops/s
# Warmup Iteration   7: 159618.845 ops/s
# Warmup Iteration   8: 160654.165 ops/s
# Warmup Iteration   9: 162970.864 ops/s
# Warmup Iteration  10: 145204.978 ops/s
# Warmup Iteration  11: 169108.882 ops/s
# Warmup Iteration  12: 160107.889 ops/s
# Warmup Iteration  13: 166098.285 ops/s
# Warmup Iteration  14: 159388.116 ops/s
# Warmup Iteration  15: 166260.906 ops/s
# Warmup Iteration  16: 168856.224 ops/s
# Warmup Iteration  17: 163919.577 ops/s
# Warmup Iteration  18: 170000.587 ops/s
# Warmup Iteration  19: 167167.423 ops/s
# Warmup Iteration  20: 173929.121 ops/s
# Warmup Iteration  21: 166561.035 ops/s
# Warmup Iteration  22: 171986.033 ops/s
# Warmup Iteration  23: 166897.450 ops/s
# Warmup Iteration  24: 168634.591 ops/s
# Warmup Iteration  25: 173397.318 ops/s
# Warmup Iteration  26: 165463.665 ops/s
# Warmup Iteration  27: 169678.205 ops/s
# Warmup Iteration  28: 169166.720 ops/s
# Warmup Iteration  29: 168073.905 ops/s
# Warmup Iteration  30: 166888.473 ops/s
Iteration   1: 167542.572 ops/s
Iteration   2: 175671.360 ops/s
Iteration   3: 166917.352 ops/s
Iteration   4: 162095.710 ops/s
Iteration   5: 175196.145 ops/s
Iteration   6: 163999.912 ops/s
Iteration   7: 173744.581 ops/s
Iteration   8: 164232.524 ops/s
Iteration   9: 170857.413 ops/s
Iteration  10: 168369.045 ops/s
Iteration  11: 172364.271 ops/s
Iteration  12: 169873.129 ops/s
Iteration  13: 164996.281 ops/s
Iteration  14: 173091.515 ops/s
Iteration  15: 172232.375 ops/s
Iteration  16: 172848.217 ops/s
Iteration  17: 165087.745 ops/s
Iteration  18: 173928.272 ops/s
Iteration  19: 165766.819 ops/s
Iteration  20: 167002.897 ops/s
Iteration  21: 166286.092 ops/s
Iteration  22: 165396.520 ops/s
Iteration  23: 170355.288 ops/s
Iteration  24: 157754.894 ops/s
Iteration  25: 172940.163 ops/s
Iteration  26: 168095.799 ops/s
Iteration  27: 165904.978 ops/s
Iteration  28: 172450.708 ops/s
Iteration  29: 165383.179 ops/s
Iteration  30: 172499.268 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_badSource":
  168762.834 ±(99.9%) 2897.319 ops/s [Average]
  (min, avg, max) = (157754.894, 168762.834, 175671.360), stdev = 4336.571
  CI (99.9%): [165865.515, 171660.153] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_badSource  thrpt   30  168762.834 ± 2897.319  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_flowableBasedOpenerAndCloser$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_flowableBasedOpenerAndCloser

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10848.156 ops/s
# Warmup Iteration   2: 42301.270 ops/s
# Warmup Iteration   3: 128274.072 ops/s
# Warmup Iteration   4: 238422.174 ops/s
# Warmup Iteration   5: 257065.421 ops/s
# Warmup Iteration   6: 228071.743 ops/s
# Warmup Iteration   7: 241072.270 ops/s
# Warmup Iteration   8: 238718.730 ops/s
# Warmup Iteration   9: 255184.502 ops/s
# Warmup Iteration  10: 253370.392 ops/s
# Warmup Iteration  11: 252936.863 ops/s
# Warmup Iteration  12: 249008.947 ops/s
# Warmup Iteration  13: 263876.991 ops/s
# Warmup Iteration  14: 251239.823 ops/s
# Warmup Iteration  15: 206866.545 ops/s
# Warmup Iteration  16: 243663.546 ops/s
# Warmup Iteration  17: 251506.550 ops/s
# Warmup Iteration  18: 255766.803 ops/s
# Warmup Iteration  19: 253847.329 ops/s
# Warmup Iteration  20: 250309.442 ops/s
# Warmup Iteration  21: 250856.514 ops/s
# Warmup Iteration  22: 253525.002 ops/s
# Warmup Iteration  23: 255020.340 ops/s
# Warmup Iteration  24: 260643.605 ops/s
# Warmup Iteration  25: 246482.118 ops/s
# Warmup Iteration  26: 257176.797 ops/s
# Warmup Iteration  27: 254175.527 ops/s
# Warmup Iteration  28: 259104.680 ops/s
# Warmup Iteration  29: 248692.103 ops/s
# Warmup Iteration  30: 254954.864 ops/s
Iteration   1: 261140.508 ops/s
Iteration   2: 255310.616 ops/s
Iteration   3: 261666.511 ops/s
Iteration   4: 252482.507 ops/s
Iteration   5: 248143.813 ops/s
Iteration   6: 266401.431 ops/s
Iteration   7: 247650.869 ops/s
Iteration   8: 260967.263 ops/s
Iteration   9: 254612.632 ops/s
Iteration  10: 259404.651 ops/s
Iteration  11: 246245.038 ops/s
Iteration  12: 260215.806 ops/s
Iteration  13: 253644.944 ops/s
Iteration  14: 255126.020 ops/s
Iteration  15: 252080.784 ops/s
Iteration  16: 261166.718 ops/s
Iteration  17: 247702.549 ops/s
Iteration  18: 261471.258 ops/s
Iteration  19: 254165.002 ops/s
Iteration  20: 260506.005 ops/s
Iteration  21: 250458.179 ops/s
Iteration  22: 255173.353 ops/s
Iteration  23: 258704.826 ops/s
Iteration  24: 257879.022 ops/s
Iteration  25: 255214.078 ops/s
Iteration  26: 262957.377 ops/s
Iteration  27: 251123.036 ops/s
Iteration  28: 257946.401 ops/s
Iteration  29: 262564.303 ops/s
Iteration  30: 251223.752 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_flowableBasedOpenerAndCloser":
  256111.642 ±(99.9%) 3546.857 ops/s [Average]
  (min, avg, max) = (246245.038, 256111.642, 266401.431), stdev = 5308.769
  CI (99.9%): [252564.785, 259658.499] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score      Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_flowableBasedOpenerAndCloser  thrpt   30  256111.642 ± 3546.857  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onNextSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onNextSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 119053.939 ops/s
# Warmup Iteration   2: 496735.565 ops/s
# Warmup Iteration   3: 1122036.103 ops/s
# Warmup Iteration   4: 1334500.493 ops/s
# Warmup Iteration   5: 1383887.065 ops/s
# Warmup Iteration   6: 1436390.961 ops/s
# Warmup Iteration   7: 1364757.385 ops/s
# Warmup Iteration   8: 1387609.680 ops/s
# Warmup Iteration   9: 1344883.765 ops/s
# Warmup Iteration  10: 1412740.855 ops/s
# Warmup Iteration  11: 1414639.027 ops/s
# Warmup Iteration  12: 1366181.396 ops/s
# Warmup Iteration  13: 1442301.626 ops/s
# Warmup Iteration  14: 1398807.333 ops/s
# Warmup Iteration  15: 1389609.997 ops/s
# Warmup Iteration  16: 1420852.340 ops/s
# Warmup Iteration  17: 1382037.908 ops/s
# Warmup Iteration  18: 1417982.735 ops/s
# Warmup Iteration  19: 1367860.213 ops/s
# Warmup Iteration  20: 1449390.460 ops/s
# Warmup Iteration  21: 1378202.731 ops/s
# Warmup Iteration  22: 1387058.679 ops/s
# Warmup Iteration  23: 1378149.975 ops/s
# Warmup Iteration  24: 1359062.599 ops/s
# Warmup Iteration  25: 1347815.509 ops/s
# Warmup Iteration  26: 1414955.120 ops/s
# Warmup Iteration  27: 1397887.930 ops/s
# Warmup Iteration  28: 1432205.249 ops/s
# Warmup Iteration  29: 1379714.212 ops/s
# Warmup Iteration  30: 1465236.093 ops/s
Iteration   1: 1362367.965 ops/s
Iteration   2: 1450333.664 ops/s
Iteration   3: 1447852.699 ops/s
Iteration   4: 1413113.324 ops/s
Iteration   5: 1437883.438 ops/s
Iteration   6: 1376794.884 ops/s
Iteration   7: 1396804.299 ops/s
Iteration   8: 1377496.172 ops/s
Iteration   9: 1455702.202 ops/s
Iteration  10: 1383374.494 ops/s
Iteration  11: 1396126.475 ops/s
Iteration  12: 1444090.840 ops/s
Iteration  13: 1319664.560 ops/s
Iteration  14: 1399038.174 ops/s
Iteration  15: 1361587.946 ops/s
Iteration  16: 1434213.284 ops/s
Iteration  17: 1416965.103 ops/s
Iteration  18: 1418915.501 ops/s
Iteration  19: 1444371.936 ops/s
Iteration  20: 1335321.610 ops/s
Iteration  21: 1448130.092 ops/s
Iteration  22: 1402034.807 ops/s
Iteration  23: 1423920.692 ops/s
Iteration  24: 1418633.334 ops/s
Iteration  25: 1385843.340 ops/s
Iteration  26: 1418807.105 ops/s
Iteration  27: 1354151.728 ops/s
Iteration  28: 1419697.117 ops/s
Iteration  29: 1410692.821 ops/s
Iteration  30: 1371396.347 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onNextSlowPath":
  1404177.532 ±(99.9%) 23810.089 ops/s [Average]
  (min, avg, max) = (1319664.560, 1404177.532, 1455702.202), stdev = 35637.823
  CI (99.9%): [1380367.443, 1427987.621] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_onNextSlowPath  thrpt   30  1404177.532 ± 23810.089  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancel2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancel2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9161.587 ops/s
# Warmup Iteration   2: 91868.171 ops/s
# Warmup Iteration   3: 135695.568 ops/s
# Warmup Iteration   4: 162239.888 ops/s
# Warmup Iteration   5: 151527.491 ops/s
# Warmup Iteration   6: 168281.087 ops/s
# Warmup Iteration   7: 170040.817 ops/s
# Warmup Iteration   8: 178329.753 ops/s
# Warmup Iteration   9: 151294.289 ops/s
# Warmup Iteration  10: 148811.458 ops/s
# Warmup Iteration  11: 168664.550 ops/s
# Warmup Iteration  12: 169050.806 ops/s
# Warmup Iteration  13: 170295.361 ops/s
# Warmup Iteration  14: 169079.004 ops/s
# Warmup Iteration  15: 172669.512 ops/s
# Warmup Iteration  16: 172441.954 ops/s
# Warmup Iteration  17: 176000.239 ops/s
# Warmup Iteration  18: 169607.431 ops/s
# Warmup Iteration  19: 177006.266 ops/s
# Warmup Iteration  20: 176445.173 ops/s
# Warmup Iteration  21: 172902.238 ops/s
# Warmup Iteration  22: 179740.418 ops/s
# Warmup Iteration  23: 173341.464 ops/s
# Warmup Iteration  24: 170328.894 ops/s
# Warmup Iteration  25: 178957.331 ops/s
# Warmup Iteration  26: 172951.539 ops/s
# Warmup Iteration  27: 181157.011 ops/s
# Warmup Iteration  28: 177364.696 ops/s
# Warmup Iteration  29: 174071.762 ops/s
# Warmup Iteration  30: 178214.826 ops/s
Iteration   1: 172139.469 ops/s
Iteration   2: 174191.118 ops/s
Iteration   3: 176529.381 ops/s
Iteration   4: 172160.646 ops/s
Iteration   5: 170315.906 ops/s
Iteration   6: 174595.516 ops/s
Iteration   7: 174505.643 ops/s
Iteration   8: 174912.788 ops/s
Iteration   9: 176441.513 ops/s
Iteration  10: 178908.202 ops/s
Iteration  11: 176966.392 ops/s
Iteration  12: 175324.970 ops/s
Iteration  13: 179258.002 ops/s
Iteration  14: 169616.998 ops/s
Iteration  15: 176552.667 ops/s
Iteration  16: 179428.772 ops/s
Iteration  17: 175637.652 ops/s
Iteration  18: 179472.773 ops/s
Iteration  19: 170153.984 ops/s
Iteration  20: 185004.149 ops/s
Iteration  21: 168310.314 ops/s
Iteration  22: 178260.588 ops/s
Iteration  23: 181972.103 ops/s
Iteration  24: 170654.722 ops/s
Iteration  25: 180039.970 ops/s
Iteration  26: 172648.163 ops/s
Iteration  27: 180128.685 ops/s
Iteration  28: 171150.289 ops/s
Iteration  29: 176161.166 ops/s
Iteration  30: 175551.103 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancel2":
  175566.455 ±(99.9%) 2669.532 ops/s [Average]
  (min, avg, max) = (168310.314, 175566.455, 185004.149), stdev = 3995.630
  CI (99.9%): [172896.923, 178235.987] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_undeliverableUponCancel2  thrpt   30  175566.455 ± 2669.532  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22287.233 ops/s
# Warmup Iteration   2: 147619.979 ops/s
# Warmup Iteration   3: 196955.397 ops/s
# Warmup Iteration   4: 202641.307 ops/s
# Warmup Iteration   5: 206053.023 ops/s
# Warmup Iteration   6: 229665.239 ops/s
# Warmup Iteration   7: 230810.999 ops/s
# Warmup Iteration   8: 224602.869 ops/s
# Warmup Iteration   9: 218090.116 ops/s
# Warmup Iteration  10: 231861.825 ops/s
# Warmup Iteration  11: 232776.915 ops/s
# Warmup Iteration  12: 229656.254 ops/s
# Warmup Iteration  13: 230422.212 ops/s
# Warmup Iteration  14: 229754.307 ops/s
# Warmup Iteration  15: 229403.712 ops/s
# Warmup Iteration  16: 231905.106 ops/s
# Warmup Iteration  17: 237262.643 ops/s
# Warmup Iteration  18: 243509.928 ops/s
# Warmup Iteration  19: 235031.726 ops/s
# Warmup Iteration  20: 239351.583 ops/s
# Warmup Iteration  21: 232307.370 ops/s
# Warmup Iteration  22: 235338.152 ops/s
# Warmup Iteration  23: 242551.079 ops/s
# Warmup Iteration  24: 238499.453 ops/s
# Warmup Iteration  25: 237843.288 ops/s
# Warmup Iteration  26: 242699.607 ops/s
# Warmup Iteration  27: 236145.930 ops/s
# Warmup Iteration  28: 233493.757 ops/s
# Warmup Iteration  29: 247644.931 ops/s
# Warmup Iteration  30: 231936.524 ops/s
Iteration   1: 240106.631 ops/s
Iteration   2: 239940.960 ops/s
Iteration   3: 241292.450 ops/s
Iteration   4: 242695.961 ops/s
Iteration   5: 230979.106 ops/s
Iteration   6: 239362.377 ops/s
Iteration   7: 237171.382 ops/s
Iteration   8: 246652.202 ops/s
Iteration   9: 248239.860 ops/s
Iteration  10: 232323.392 ops/s
Iteration  11: 243889.158 ops/s
Iteration  12: 233983.029 ops/s
Iteration  13: 243942.779 ops/s
Iteration  14: 231563.157 ops/s
Iteration  15: 233348.252 ops/s
Iteration  16: 236655.094 ops/s
Iteration  17: 236694.091 ops/s
Iteration  18: 247220.636 ops/s
Iteration  19: 229599.874 ops/s
Iteration  20: 249529.651 ops/s
Iteration  21: 231665.104 ops/s
Iteration  22: 246920.629 ops/s
Iteration  23: 235200.065 ops/s
Iteration  24: 234279.983 ops/s
Iteration  25: 237999.100 ops/s
Iteration  26: 241902.685 ops/s
Iteration  27: 247569.913 ops/s
Iteration  28: 226744.996 ops/s
Iteration  29: 236777.701 ops/s
Iteration  30: 243790.974 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_badSource":
  238934.706 ±(99.9%) 4170.156 ops/s [Average]
  (min, avg, max) = (226744.996, 238934.706, 249529.651), stdev = 6241.693
  CI (99.9%): [234764.551, 243104.862] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableOnBackpressureDropTest._Benchmark.benchmark_badSource  thrpt   30  238934.706 ± 4170.156  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26828.991 ops/s
# Warmup Iteration   2: 145452.110 ops/s
# Warmup Iteration   3: 206568.046 ops/s
# Warmup Iteration   4: 195500.320 ops/s
# Warmup Iteration   5: 209230.538 ops/s
# Warmup Iteration   6: 229512.034 ops/s
# Warmup Iteration   7: 214181.203 ops/s
# Warmup Iteration   8: 220915.355 ops/s
# Warmup Iteration   9: 232117.555 ops/s
# Warmup Iteration  10: 222386.410 ops/s
# Warmup Iteration  11: 229202.847 ops/s
# Warmup Iteration  12: 230617.009 ops/s
# Warmup Iteration  13: 232444.838 ops/s
# Warmup Iteration  14: 221353.748 ops/s
# Warmup Iteration  15: 222997.663 ops/s
# Warmup Iteration  16: 219275.300 ops/s
# Warmup Iteration  17: 238017.447 ops/s
# Warmup Iteration  18: 246482.139 ops/s
# Warmup Iteration  19: 245811.711 ops/s
# Warmup Iteration  20: 229142.610 ops/s
# Warmup Iteration  21: 245579.949 ops/s
# Warmup Iteration  22: 238045.251 ops/s
# Warmup Iteration  23: 236617.661 ops/s
# Warmup Iteration  24: 242169.757 ops/s
# Warmup Iteration  25: 230719.542 ops/s
# Warmup Iteration  26: 242759.755 ops/s
# Warmup Iteration  27: 235335.297 ops/s
# Warmup Iteration  28: 230570.497 ops/s
# Warmup Iteration  29: 246496.771 ops/s
# Warmup Iteration  30: 227695.020 ops/s
Iteration   1: 248391.695 ops/s
Iteration   2: 238439.965 ops/s
Iteration   3: 235721.693 ops/s
Iteration   4: 246704.439 ops/s
Iteration   5: 231369.751 ops/s
Iteration   6: 248052.533 ops/s
Iteration   7: 232953.396 ops/s
Iteration   8: 229955.559 ops/s
Iteration   9: 239640.154 ops/s
Iteration  10: 240407.223 ops/s
Iteration  11: 236571.695 ops/s
Iteration  12: 243158.841 ops/s
Iteration  13: 232772.273 ops/s
Iteration  14: 237730.442 ops/s
Iteration  15: 238911.636 ops/s
Iteration  16: 244693.167 ops/s
Iteration  17: 228009.034 ops/s
Iteration  18: 248388.433 ops/s
Iteration  19: 230393.559 ops/s
Iteration  20: 247754.641 ops/s
Iteration  21: 233824.139 ops/s
Iteration  22: 236835.463 ops/s
Iteration  23: 252385.108 ops/s
Iteration  24: 234020.033 ops/s
Iteration  25: 238690.549 ops/s
Iteration  26: 240208.082 ops/s
Iteration  27: 240107.267 ops/s
Iteration  28: 239560.411 ops/s
Iteration  29: 225826.727 ops/s
Iteration  30: 247084.603 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_badSource":
  238952.084 ±(99.9%) 4562.795 ops/s [Average]
  (min, avg, max) = (225826.727, 238952.084, 252385.108), stdev = 6829.378
  CI (99.9%): [234389.289, 243514.879] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableOnBackpressureErrorTest._Benchmark.benchmark_badSource  thrpt   30  238952.084 ± 4562.795  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 114444.191 ops/s
# Warmup Iteration   2: 740106.403 ops/s
# Warmup Iteration   3: 886996.244 ops/s
# Warmup Iteration   4: 968497.310 ops/s
# Warmup Iteration   5: 906551.351 ops/s
# Warmup Iteration   6: 1012039.904 ops/s
# Warmup Iteration   7: 994101.798 ops/s
# Warmup Iteration   8: 1014699.523 ops/s
# Warmup Iteration   9: 1021988.896 ops/s
# Warmup Iteration  10: 972855.989 ops/s
# Warmup Iteration  11: 1021259.054 ops/s
# Warmup Iteration  12: 1012559.531 ops/s
# Warmup Iteration  13: 998657.738 ops/s
# Warmup Iteration  14: 993702.988 ops/s
# Warmup Iteration  15: 988491.988 ops/s
# Warmup Iteration  16: 1061307.107 ops/s
# Warmup Iteration  17: 978656.157 ops/s
# Warmup Iteration  18: 1004326.991 ops/s
# Warmup Iteration  19: 1062511.285 ops/s
# Warmup Iteration  20: 970328.697 ops/s
# Warmup Iteration  21: 1010079.195 ops/s
# Warmup Iteration  22: 1012042.273 ops/s
# Warmup Iteration  23: 964467.811 ops/s
# Warmup Iteration  24: 982904.529 ops/s
# Warmup Iteration  25: 1014393.422 ops/s
# Warmup Iteration  26: 993856.151 ops/s
# Warmup Iteration  27: 1042639.203 ops/s
# Warmup Iteration  28: 1004310.677 ops/s
# Warmup Iteration  29: 1043902.841 ops/s
# Warmup Iteration  30: 981858.172 ops/s
Iteration   1: 1026598.531 ops/s
Iteration   2: 1010854.682 ops/s
Iteration   3: 990361.870 ops/s
Iteration   4: 1021362.913 ops/s
Iteration   5: 997060.030 ops/s
Iteration   6: 1037351.106 ops/s
Iteration   7: 1029857.192 ops/s
Iteration   8: 961453.294 ops/s
Iteration   9: 1075057.656 ops/s
Iteration  10: 967036.513 ops/s
Iteration  11: 1028666.909 ops/s
Iteration  12: 1046070.673 ops/s
Iteration  13: 996517.437 ops/s
Iteration  14: 967632.984 ops/s
Iteration  15: 1001265.581 ops/s
Iteration  16: 1015994.731 ops/s
Iteration  17: 1030997.145 ops/s
Iteration  18: 980921.829 ops/s
Iteration  19: 989694.771 ops/s
Iteration  20: 1072777.255 ops/s
Iteration  21: 973806.097 ops/s
Iteration  22: 1024237.464 ops/s
Iteration  23: 1002528.266 ops/s
Iteration  24: 1013684.689 ops/s
Iteration  25: 1023816.334 ops/s
Iteration  26: 982297.593 ops/s
Iteration  27: 1003925.926 ops/s
Iteration  28: 994568.099 ops/s
Iteration  29: 993452.799 ops/s
Iteration  30: 998840.268 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixedConditional":
  1008623.021 ±(99.9%) 18844.533 ops/s [Average]
  (min, avg, max) = (961453.294, 1008623.021, 1075057.656), stdev = 28205.613
  CI (99.9%): [989778.488, 1027467.555] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixedConditional  thrpt   30  1008623.021 ± 18844.533  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_reduceSeedFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_reduceSeedFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 178304.585 ops/s
# Warmup Iteration   2: 545858.434 ops/s
# Warmup Iteration   3: 603437.731 ops/s
# Warmup Iteration   4: 543121.507 ops/s
# Warmup Iteration   5: 601370.468 ops/s
# Warmup Iteration   6: 554280.534 ops/s
# Warmup Iteration   7: 609728.440 ops/s
# Warmup Iteration   8: 620479.811 ops/s
# Warmup Iteration   9: 590296.832 ops/s
# Warmup Iteration  10: 637084.837 ops/s
# Warmup Iteration  11: 600632.419 ops/s
# Warmup Iteration  12: 603359.144 ops/s
# Warmup Iteration  13: 613148.556 ops/s
# Warmup Iteration  14: 617074.956 ops/s
# Warmup Iteration  15: 596972.240 ops/s
# Warmup Iteration  16: 608089.500 ops/s
# Warmup Iteration  17: 639010.750 ops/s
# Warmup Iteration  18: 664760.242 ops/s
# Warmup Iteration  19: 627369.215 ops/s
# Warmup Iteration  20: 640838.604 ops/s
# Warmup Iteration  21: 635347.607 ops/s
# Warmup Iteration  22: 635393.269 ops/s
# Warmup Iteration  23: 653709.991 ops/s
# Warmup Iteration  24: 628122.596 ops/s
# Warmup Iteration  25: 615709.080 ops/s
# Warmup Iteration  26: 662922.383 ops/s
# Warmup Iteration  27: 663338.009 ops/s
# Warmup Iteration  28: 625283.798 ops/s
# Warmup Iteration  29: 658521.218 ops/s
# Warmup Iteration  30: 612693.259 ops/s
Iteration   1: 635889.089 ops/s
Iteration   2: 600302.046 ops/s
Iteration   3: 659659.293 ops/s
Iteration   4: 599528.928 ops/s
Iteration   5: 638445.358 ops/s
Iteration   6: 652576.101 ops/s
Iteration   7: 641533.809 ops/s
Iteration   8: 644239.307 ops/s
Iteration   9: 635060.769 ops/s
Iteration  10: 637095.415 ops/s
Iteration  11: 652878.718 ops/s
Iteration  12: 620248.979 ops/s
Iteration  13: 670630.580 ops/s
Iteration  14: 634932.835 ops/s
Iteration  15: 621853.293 ops/s
Iteration  16: 641216.248 ops/s
Iteration  17: 628049.240 ops/s
Iteration  18: 651619.180 ops/s
Iteration  19: 621296.960 ops/s
Iteration  20: 634167.957 ops/s
Iteration  21: 677679.772 ops/s
Iteration  22: 653593.172 ops/s
Iteration  23: 631051.041 ops/s
Iteration  24: 655949.371 ops/s
Iteration  25: 612588.081 ops/s
Iteration  26: 673732.788 ops/s
Iteration  27: 656548.623 ops/s
Iteration  28: 620806.573 ops/s
Iteration  29: 665746.628 ops/s
Iteration  30: 633836.048 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_reduceSeedFunctionReturnsNull":
  640091.873 ±(99.9%) 13312.892 ops/s [Average]
  (min, avg, max) = (599528.928, 640091.873, 677679.772), stdev = 19926.111
  CI (99.9%): [626778.982, 653404.765] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_reduceSeedFunctionReturnsNull  thrpt   30  640091.873 ± 13312.892  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastViaObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastViaObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12275992.925 ops/s
# Warmup Iteration   2: 26323854.662 ops/s
# Warmup Iteration   3: 34961877.302 ops/s
# Warmup Iteration   4: 36748534.809 ops/s
# Warmup Iteration   5: 34117618.532 ops/s
# Warmup Iteration   6: 35614358.882 ops/s
# Warmup Iteration   7: 36436121.825 ops/s
# Warmup Iteration   8: 34942008.721 ops/s
# Warmup Iteration   9: 35510900.217 ops/s
# Warmup Iteration  10: 35808879.459 ops/s
# Warmup Iteration  11: 35654483.519 ops/s
# Warmup Iteration  12: 36034757.351 ops/s
# Warmup Iteration  13: 35964626.702 ops/s
# Warmup Iteration  14: 36247560.155 ops/s
# Warmup Iteration  15: 35011559.097 ops/s
# Warmup Iteration  16: 36239629.796 ops/s
# Warmup Iteration  17: 35535969.747 ops/s
# Warmup Iteration  18: 35151006.120 ops/s
# Warmup Iteration  19: 37679157.758 ops/s
# Warmup Iteration  20: 34278105.167 ops/s
# Warmup Iteration  21: 37451127.851 ops/s
# Warmup Iteration  22: 36390322.609 ops/s
# Warmup Iteration  23: 34422828.785 ops/s
# Warmup Iteration  24: 35979791.471 ops/s
# Warmup Iteration  25: 35301525.078 ops/s
# Warmup Iteration  26: 36532744.675 ops/s
# Warmup Iteration  27: 34856651.665 ops/s
# Warmup Iteration  28: 35001565.699 ops/s
# Warmup Iteration  29: 35569429.031 ops/s
# Warmup Iteration  30: 34658139.679 ops/s
Iteration   1: 36666997.444 ops/s
Iteration   2: 34524810.817 ops/s
Iteration   3: 35556563.245 ops/s
Iteration   4: 35477671.180 ops/s
Iteration   5: 35689436.990 ops/s
Iteration   6: 35043719.836 ops/s
Iteration   7: 34737845.830 ops/s
Iteration   8: 36664177.202 ops/s
Iteration   9: 34373928.207 ops/s
Iteration  10: 36633806.978 ops/s
Iteration  11: 34979245.426 ops/s
Iteration  12: 36320600.195 ops/s
Iteration  13: 36418790.042 ops/s
Iteration  14: 34138572.425 ops/s
Iteration  15: 34703536.225 ops/s
Iteration  16: 35776908.575 ops/s
Iteration  17: 35497239.963 ops/s
Iteration  18: 35393385.598 ops/s
Iteration  19: 35396163.055 ops/s
Iteration  20: 35594952.088 ops/s
Iteration  21: 35852608.387 ops/s
Iteration  22: 36173278.712 ops/s
Iteration  23: 36362405.764 ops/s
Iteration  24: 35685103.720 ops/s
Iteration  25: 31817253.187 ops/s
Iteration  26: 33273568.411 ops/s
Iteration  27: 34822568.617 ops/s
Iteration  28: 37006290.757 ops/s
Iteration  29: 35537589.450 ops/s
Iteration  30: 35457671.303 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastViaObservable":
  35385889.654 ±(99.9%) 719691.814 ops/s [Average]
  (min, avg, max) = (31817253.187, 35385889.654, 37006290.757), stdev = 1077200.909
  CI (99.9%): [34666197.840, 36105581.469] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ObservableLastTest._Benchmark.benchmark_lastViaObservable  thrpt   30  35385889.654 ± 719691.814  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex1OnEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex1OnEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2569814.783 ops/s
# Warmup Iteration   2: 5713567.455 ops/s
# Warmup Iteration   3: 8060260.697 ops/s
# Warmup Iteration   4: 7796107.475 ops/s
# Warmup Iteration   5: 8260776.982 ops/s
# Warmup Iteration   6: 7980761.218 ops/s
# Warmup Iteration   7: 7846811.415 ops/s
# Warmup Iteration   8: 8121264.659 ops/s
# Warmup Iteration   9: 7804758.306 ops/s
# Warmup Iteration  10: 7960232.591 ops/s
# Warmup Iteration  11: 8115198.155 ops/s
# Warmup Iteration  12: 8345165.204 ops/s
# Warmup Iteration  13: 7702076.197 ops/s
# Warmup Iteration  14: 8346237.259 ops/s
# Warmup Iteration  15: 7773043.854 ops/s
# Warmup Iteration  16: 8051580.279 ops/s
# Warmup Iteration  17: 8052127.669 ops/s
# Warmup Iteration  18: 8376499.761 ops/s
# Warmup Iteration  19: 7818419.481 ops/s
# Warmup Iteration  20: 7903269.979 ops/s
# Warmup Iteration  21: 7804491.026 ops/s
# Warmup Iteration  22: 8233239.873 ops/s
# Warmup Iteration  23: 7935059.258 ops/s
# Warmup Iteration  24: 7961261.342 ops/s
# Warmup Iteration  25: 7881614.950 ops/s
# Warmup Iteration  26: 7770264.935 ops/s
# Warmup Iteration  27: 8090836.224 ops/s
# Warmup Iteration  28: 8240091.283 ops/s
# Warmup Iteration  29: 7631603.206 ops/s
# Warmup Iteration  30: 8304018.085 ops/s
Iteration   1: 7708128.598 ops/s
Iteration   2: 7971270.822 ops/s
Iteration   3: 7870865.563 ops/s
Iteration   4: 7807706.181 ops/s
Iteration   5: 8320767.315 ops/s
Iteration   6: 7663487.840 ops/s
Iteration   7: 8258706.082 ops/s
Iteration   8: 7978204.834 ops/s
Iteration   9: 8204324.896 ops/s
Iteration  10: 8052703.979 ops/s
Iteration  11: 7931786.536 ops/s
Iteration  12: 8286573.048 ops/s
Iteration  13: 7890534.420 ops/s
Iteration  14: 8029848.340 ops/s
Iteration  15: 7822715.613 ops/s
Iteration  16: 8020470.020 ops/s
Iteration  17: 8035622.745 ops/s
Iteration  18: 8016435.337 ops/s
Iteration  19: 8224396.235 ops/s
Iteration  20: 7811649.156 ops/s
Iteration  21: 8225922.171 ops/s
Iteration  22: 7734683.508 ops/s
Iteration  23: 8044673.574 ops/s
Iteration  24: 7890417.782 ops/s
Iteration  25: 8073478.594 ops/s
Iteration  26: 7925910.615 ops/s
Iteration  27: 7808875.798 ops/s
Iteration  28: 8090499.532 ops/s
Iteration  29: 7960507.381 ops/s
Iteration  30: 7999993.156 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex1OnEmptySource":
  7988705.322 ±(99.9%) 116077.457 ops/s [Average]
  (min, avg, max) = (7663487.840, 7988705.322, 8320767.315), stdev = 173739.287
  CI (99.9%): [7872627.865, 8104782.780] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtIndex1OnEmptySource  thrpt   30  7988705.322 ± 116077.457  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex0OnEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex0OnEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2144955.757 ops/s
# Warmup Iteration   2: 5750635.278 ops/s
# Warmup Iteration   3: 8066788.329 ops/s
# Warmup Iteration   4: 7743604.603 ops/s
# Warmup Iteration   5: 7988758.472 ops/s
# Warmup Iteration   6: 8080126.556 ops/s
# Warmup Iteration   7: 7707038.830 ops/s
# Warmup Iteration   8: 7921212.191 ops/s
# Warmup Iteration   9: 8143758.933 ops/s
# Warmup Iteration  10: 7757569.461 ops/s
# Warmup Iteration  11: 7711119.521 ops/s
# Warmup Iteration  12: 8197204.116 ops/s
# Warmup Iteration  13: 7714418.967 ops/s
# Warmup Iteration  14: 8312074.252 ops/s
# Warmup Iteration  15: 7764456.929 ops/s
# Warmup Iteration  16: 8135149.928 ops/s
# Warmup Iteration  17: 7812573.936 ops/s
# Warmup Iteration  18: 8130694.881 ops/s
# Warmup Iteration  19: 7943351.343 ops/s
# Warmup Iteration  20: 7960827.103 ops/s
# Warmup Iteration  21: 8170475.507 ops/s
# Warmup Iteration  22: 7859535.791 ops/s
# Warmup Iteration  23: 8078074.071 ops/s
# Warmup Iteration  24: 7702110.471 ops/s
# Warmup Iteration  25: 7988481.068 ops/s
# Warmup Iteration  26: 7859823.342 ops/s
# Warmup Iteration  27: 7715932.571 ops/s
# Warmup Iteration  28: 8230762.532 ops/s
# Warmup Iteration  29: 8263996.961 ops/s
# Warmup Iteration  30: 7870500.177 ops/s
Iteration   1: 8110888.780 ops/s
Iteration   2: 8196244.255 ops/s
Iteration   3: 7870620.036 ops/s
Iteration   4: 7910869.963 ops/s
Iteration   5: 8081318.563 ops/s
Iteration   6: 7817752.719 ops/s
Iteration   7: 8211965.400 ops/s
Iteration   8: 7796972.292 ops/s
Iteration   9: 7894930.155 ops/s
Iteration  10: 8090486.768 ops/s
Iteration  11: 7809219.549 ops/s
Iteration  12: 8077364.479 ops/s
Iteration  13: 7987913.787 ops/s
Iteration  14: 7988885.158 ops/s
Iteration  15: 8021996.109 ops/s
Iteration  16: 7868032.717 ops/s
Iteration  17: 7817920.071 ops/s
Iteration  18: 8073498.756 ops/s
Iteration  19: 7876519.856 ops/s
Iteration  20: 6424164.538 ops/s
Iteration  21: 8224277.562 ops/s
Iteration  22: 7828302.251 ops/s
Iteration  23: 7936961.725 ops/s
Iteration  24: 8343276.763 ops/s
Iteration  25: 7755211.579 ops/s
Iteration  26: 7742533.057 ops/s
Iteration  27: 8075048.462 ops/s
Iteration  28: 7771778.278 ops/s
Iteration  29: 8068426.955 ops/s
Iteration  30: 8344541.157 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex0OnEmptySource":
  7933930.725 ±(99.9%) 221805.439 ops/s [Average]
  (min, avg, max) = (6424164.538, 7933930.725, 8344541.157), stdev = 331987.964
  CI (99.9%): [7712125.286, 8155736.163] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtIndex0OnEmptySource  thrpt   30  7933930.725 ± 221805.439  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEventTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEventTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 821740.103 ops/s
# Warmup Iteration   2: 3943622.212 ops/s
# Warmup Iteration   3: 4764714.004 ops/s
# Warmup Iteration   4: 5987693.858 ops/s
# Warmup Iteration   5: 5740401.506 ops/s
# Warmup Iteration   6: 5902713.670 ops/s
# Warmup Iteration   7: 6121803.345 ops/s
# Warmup Iteration   8: 6051996.890 ops/s
# Warmup Iteration   9: 5555462.927 ops/s
# Warmup Iteration  10: 5888579.025 ops/s
# Warmup Iteration  11: 5846007.552 ops/s
# Warmup Iteration  12: 6091047.522 ops/s
# Warmup Iteration  13: 5641540.752 ops/s
# Warmup Iteration  14: 6101469.051 ops/s
# Warmup Iteration  15: 5699459.633 ops/s
# Warmup Iteration  16: 5946374.317 ops/s
# Warmup Iteration  17: 5952417.570 ops/s
# Warmup Iteration  18: 5869315.602 ops/s
# Warmup Iteration  19: 5937432.712 ops/s
# Warmup Iteration  20: 6221028.494 ops/s
# Warmup Iteration  21: 5714597.289 ops/s
# Warmup Iteration  22: 6097136.055 ops/s
# Warmup Iteration  23: 6163984.652 ops/s
# Warmup Iteration  24: 6006511.264 ops/s
# Warmup Iteration  25: 6159110.906 ops/s
# Warmup Iteration  26: 5914986.627 ops/s
# Warmup Iteration  27: 5956250.175 ops/s
# Warmup Iteration  28: 5857967.442 ops/s
# Warmup Iteration  29: 6028959.859 ops/s
# Warmup Iteration  30: 5850846.995 ops/s
Iteration   1: 5931505.673 ops/s
Iteration   2: 5809760.405 ops/s
Iteration   3: 6066929.860 ops/s
Iteration   4: 6142139.280 ops/s
Iteration   5: 6104892.171 ops/s
Iteration   6: 5735850.750 ops/s
Iteration   7: 6217575.194 ops/s
Iteration   8: 5940385.988 ops/s
Iteration   9: 5729891.588 ops/s
Iteration  10: 6047766.466 ops/s
Iteration  11: 5849837.942 ops/s
Iteration  12: 6106127.886 ops/s
Iteration  13: 5806846.614 ops/s
Iteration  14: 5942066.814 ops/s
Iteration  15: 6029075.013 ops/s
Iteration  16: 5846293.488 ops/s
Iteration  17: 5925161.127 ops/s
Iteration  18: 5843137.736 ops/s
Iteration  19: 5881746.214 ops/s
Iteration  20: 6057417.949 ops/s
Iteration  21: 5886696.006 ops/s
Iteration  22: 5946837.589 ops/s
Iteration  23: 6030536.093 ops/s
Iteration  24: 5927832.547 ops/s
Iteration  25: 5969852.928 ops/s
Iteration  26: 5932069.404 ops/s
Iteration  27: 5907995.393 ops/s
Iteration  28: 6144543.593 ops/s
Iteration  29: 5855586.882 ops/s
Iteration  30: 5984100.116 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEventTest._Benchmark.benchmark_dispose":
  5953348.624 ±(99.9%) 81488.791 ops/s [Average]
  (min, avg, max) = (5729891.588, 5953348.624, 6217575.194), stdev = 121968.596
  CI (99.9%): [5871859.832, 6034837.415] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
MaybeDoOnEventTest._Benchmark.benchmark_dispose  thrpt   30  5953348.624 ± 81488.791  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3528230.553 ops/s
# Warmup Iteration   2: 9129650.963 ops/s
# Warmup Iteration   3: 12767272.743 ops/s
# Warmup Iteration   4: 13111478.740 ops/s
# Warmup Iteration   5: 13748676.562 ops/s
# Warmup Iteration   6: 13013288.654 ops/s
# Warmup Iteration   7: 12922893.323 ops/s
# Warmup Iteration   8: 13150854.321 ops/s
# Warmup Iteration   9: 13792358.711 ops/s
# Warmup Iteration  10: 12914675.549 ops/s
# Warmup Iteration  11: 13339295.184 ops/s
# Warmup Iteration  12: 13184619.988 ops/s
# Warmup Iteration  13: 13457436.599 ops/s
# Warmup Iteration  14: 12842641.272 ops/s
# Warmup Iteration  15: 12966201.292 ops/s
# Warmup Iteration  16: 13183146.729 ops/s
# Warmup Iteration  17: 13125362.194 ops/s
# Warmup Iteration  18: 13074387.119 ops/s
# Warmup Iteration  19: 12929230.330 ops/s
# Warmup Iteration  20: 13246316.306 ops/s
# Warmup Iteration  21: 12888238.701 ops/s
# Warmup Iteration  22: 13544144.483 ops/s
# Warmup Iteration  23: 13295133.470 ops/s
# Warmup Iteration  24: 12827589.303 ops/s
# Warmup Iteration  25: 13268566.247 ops/s
# Warmup Iteration  26: 13237337.501 ops/s
# Warmup Iteration  27: 13378029.686 ops/s
# Warmup Iteration  28: 13176318.990 ops/s
# Warmup Iteration  29: 13193587.353 ops/s
# Warmup Iteration  30: 13478407.445 ops/s
Iteration   1: 12972339.139 ops/s
Iteration   2: 13559581.154 ops/s
Iteration   3: 13304474.041 ops/s
Iteration   4: 13490103.901 ops/s
Iteration   5: 13572040.290 ops/s
Iteration   6: 12999444.376 ops/s
Iteration   7: 13189627.049 ops/s
Iteration   8: 13750624.377 ops/s
Iteration   9: 12904018.847 ops/s
Iteration  10: 13488743.111 ops/s
Iteration  11: 12882426.228 ops/s
Iteration  12: 13278906.569 ops/s
Iteration  13: 13382338.040 ops/s
Iteration  14: 11914997.352 ops/s
Iteration  15: 11962801.416 ops/s
Iteration  16: 12856315.749 ops/s
Iteration  17: 13697491.974 ops/s
Iteration  18: 13285760.372 ops/s
Iteration  19: 13063026.933 ops/s
Iteration  20: 13604739.396 ops/s
Iteration  21: 13118259.448 ops/s
Iteration  22: 13641091.711 ops/s
Iteration  23: 13079104.264 ops/s
Iteration  24: 13489634.611 ops/s
Iteration  25: 12959998.662 ops/s
Iteration  26: 13411169.731 ops/s
Iteration  27: 13026999.104 ops/s
Iteration  28: 13147812.603 ops/s
Iteration  29: 13188787.041 ops/s
Iteration  30: 12817256.450 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_dispose":
  13167997.131 ±(99.9%) 287161.658 ops/s [Average]
  (min, avg, max) = (11914997.352, 13167997.131, 13750624.377), stdev = 429810.084
  CI (99.9%): [12880835.473, 13455158.789] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
MaybeMapOptionalTest._Benchmark.benchmark_dispose  thrpt   30  13167997.131 ± 287161.658  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onCompleteThrows2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onCompleteThrows2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 447973.037 ops/s
# Warmup Iteration   2: 629105.378 ops/s
# Warmup Iteration   3: 716657.037 ops/s
# Warmup Iteration   4: 631192.824 ops/s
# Warmup Iteration   5: 748286.422 ops/s
# Warmup Iteration   6: 635717.494 ops/s
# Warmup Iteration   7: 703242.318 ops/s
# Warmup Iteration   8: 734702.669 ops/s
# Warmup Iteration   9: 704436.604 ops/s
# Warmup Iteration  10: 736390.920 ops/s
# Warmup Iteration  11: 716715.922 ops/s
# Warmup Iteration  12: 725855.163 ops/s
# Warmup Iteration  13: 744459.422 ops/s
# Warmup Iteration  14: 702904.458 ops/s
# Warmup Iteration  15: 768858.745 ops/s
# Warmup Iteration  16: 760136.988 ops/s
# Warmup Iteration  17: 775669.722 ops/s
# Warmup Iteration  18: 747116.597 ops/s
# Warmup Iteration  19: 796759.775 ops/s
# Warmup Iteration  20: 755297.503 ops/s
# Warmup Iteration  21: 777329.344 ops/s
# Warmup Iteration  22: 747590.030 ops/s
# Warmup Iteration  23: 786881.657 ops/s
# Warmup Iteration  24: 737036.919 ops/s
# Warmup Iteration  25: 769747.121 ops/s
# Warmup Iteration  26: 765340.294 ops/s
# Warmup Iteration  27: 761146.728 ops/s
# Warmup Iteration  28: 785891.176 ops/s
# Warmup Iteration  29: 756471.306 ops/s
# Warmup Iteration  30: 784023.493 ops/s
Iteration   1: 774022.170 ops/s
Iteration   2: 753052.995 ops/s
Iteration   3: 796703.190 ops/s
Iteration   4: 756484.757 ops/s
Iteration   5: 765303.811 ops/s
Iteration   6: 770335.548 ops/s
Iteration   7: 781932.288 ops/s
Iteration   8: 754746.902 ops/s
Iteration   9: 763115.562 ops/s
Iteration  10: 795145.951 ops/s
Iteration  11: 739521.741 ops/s
Iteration  12: 785979.233 ops/s
Iteration  13: 752652.553 ops/s
Iteration  14: 759560.953 ops/s
Iteration  15: 772787.351 ops/s
Iteration  16: 768689.201 ops/s
Iteration  17: 765641.356 ops/s
Iteration  18: 764025.107 ops/s
Iteration  19: 768149.461 ops/s
Iteration  20: 771463.174 ops/s
Iteration  21: 792427.013 ops/s
Iteration  22: 752773.632 ops/s
Iteration  23: 789779.435 ops/s
Iteration  24: 756825.226 ops/s
Iteration  25: 764516.673 ops/s
Iteration  26: 802673.066 ops/s
Iteration  27: 748326.966 ops/s
Iteration  28: 785745.509 ops/s
Iteration  29: 773733.803 ops/s
Iteration  30: 743395.422 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onCompleteThrows2":
  768983.668 ±(99.9%) 10964.501 ops/s [Average]
  (min, avg, max) = (739521.741, 768983.668, 802673.066), stdev = 16411.151
  CI (99.9%): [758019.167, 779948.170] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
MaybeCreateTest._Benchmark.benchmark_onCompleteThrows2  thrpt   30  768983.668 ± 10964.501  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onSuccessThrows2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onSuccessThrows2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 470898.971 ops/s
# Warmup Iteration   2: 613919.862 ops/s
# Warmup Iteration   3: 719656.245 ops/s
# Warmup Iteration   4: 700334.509 ops/s
# Warmup Iteration   5: 723768.468 ops/s
# Warmup Iteration   6: 720747.053 ops/s
# Warmup Iteration   7: 717695.387 ops/s
# Warmup Iteration   8: 726825.925 ops/s
# Warmup Iteration   9: 719774.297 ops/s
# Warmup Iteration  10: 724272.634 ops/s
# Warmup Iteration  11: 703033.733 ops/s
# Warmup Iteration  12: 707088.171 ops/s
# Warmup Iteration  13: 748407.513 ops/s
# Warmup Iteration  14: 685753.497 ops/s
# Warmup Iteration  15: 749405.394 ops/s
# Warmup Iteration  16: 755796.038 ops/s
# Warmup Iteration  17: 745133.782 ops/s
# Warmup Iteration  18: 757255.948 ops/s
# Warmup Iteration  19: 811044.124 ops/s
# Warmup Iteration  20: 757533.157 ops/s
# Warmup Iteration  21: 780332.773 ops/s
# Warmup Iteration  22: 746662.094 ops/s
# Warmup Iteration  23: 782101.018 ops/s
# Warmup Iteration  24: 744784.898 ops/s
# Warmup Iteration  25: 729556.064 ops/s
# Warmup Iteration  26: 778649.774 ops/s
# Warmup Iteration  27: 742558.743 ops/s
# Warmup Iteration  28: 749244.370 ops/s
# Warmup Iteration  29: 780526.150 ops/s
# Warmup Iteration  30: 723124.815 ops/s
Iteration   1: 801670.242 ops/s
Iteration   2: 736630.211 ops/s
Iteration   3: 801844.882 ops/s
Iteration   4: 758542.122 ops/s
Iteration   5: 763234.050 ops/s
Iteration   6: 787530.088 ops/s
Iteration   7: 755053.376 ops/s
Iteration   8: 787535.961 ops/s
Iteration   9: 662923.722 ops/s
Iteration  10: 727486.210 ops/s
Iteration  11: 734145.012 ops/s
Iteration  12: 773382.861 ops/s
Iteration  13: 781151.194 ops/s
Iteration  14: 747527.495 ops/s
Iteration  15: 743376.807 ops/s
Iteration  16: 797797.714 ops/s
Iteration  17: 754652.621 ops/s
Iteration  18: 763822.754 ops/s
Iteration  19: 794025.727 ops/s
Iteration  20: 752209.544 ops/s
Iteration  21: 797826.373 ops/s
Iteration  22: 749120.402 ops/s
Iteration  23: 798457.963 ops/s
Iteration  24: 746036.649 ops/s
Iteration  25: 778134.837 ops/s
Iteration  26: 778061.145 ops/s
Iteration  27: 763566.453 ops/s
Iteration  28: 772375.521 ops/s
Iteration  29: 756275.785 ops/s
Iteration  30: 794347.649 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onSuccessThrows2":
  765291.512 ±(99.9%) 19570.365 ops/s [Average]
  (min, avg, max) = (662923.722, 765291.512, 801844.882), stdev = 29292.003
  CI (99.9%): [745721.147, 784861.877] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
MaybeCreateTest._Benchmark.benchmark_onSuccessThrows2  thrpt   30  765291.512 ± 19570.365  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onErrorThrows2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onErrorThrows2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 200285.814 ops/s
# Warmup Iteration   2: 324783.119 ops/s
# Warmup Iteration   3: 334683.011 ops/s
# Warmup Iteration   4: 332442.870 ops/s
# Warmup Iteration   5: 357906.459 ops/s
# Warmup Iteration   6: 366096.015 ops/s
# Warmup Iteration   7: 304566.765 ops/s
# Warmup Iteration   8: 361295.897 ops/s
# Warmup Iteration   9: 372704.194 ops/s
# Warmup Iteration  10: 371270.051 ops/s
# Warmup Iteration  11: 364825.940 ops/s
# Warmup Iteration  12: 380918.784 ops/s
# Warmup Iteration  13: 344894.386 ops/s
# Warmup Iteration  14: 381021.751 ops/s
# Warmup Iteration  15: 355298.143 ops/s
# Warmup Iteration  16: 368306.762 ops/s
# Warmup Iteration  17: 379937.909 ops/s
# Warmup Iteration  18: 381471.455 ops/s
# Warmup Iteration  19: 397962.699 ops/s
# Warmup Iteration  20: 373049.319 ops/s
# Warmup Iteration  21: 397364.436 ops/s
# Warmup Iteration  22: 394029.168 ops/s
# Warmup Iteration  23: 377818.667 ops/s
# Warmup Iteration  24: 381438.007 ops/s
# Warmup Iteration  25: 402092.541 ops/s
# Warmup Iteration  26: 396549.445 ops/s
# Warmup Iteration  27: 393334.145 ops/s
# Warmup Iteration  28: 371473.837 ops/s
# Warmup Iteration  29: 400499.242 ops/s
# Warmup Iteration  30: 376822.082 ops/s
Iteration   1: 389757.088 ops/s
Iteration   2: 374934.244 ops/s
Iteration   3: 381839.500 ops/s
Iteration   4: 393662.261 ops/s
Iteration   5: 383888.719 ops/s
Iteration   6: 381875.145 ops/s
Iteration   7: 391739.508 ops/s
Iteration   8: 367973.939 ops/s
Iteration   9: 395306.552 ops/s
Iteration  10: 392502.545 ops/s
Iteration  11: 374655.449 ops/s
Iteration  12: 394837.552 ops/s
Iteration  13: 369776.845 ops/s
Iteration  14: 367060.281 ops/s
Iteration  15: 368779.579 ops/s
Iteration  16: 382980.966 ops/s
Iteration  17: 363304.253 ops/s
Iteration  18: 388769.439 ops/s
Iteration  19: 377108.267 ops/s
Iteration  20: 393034.728 ops/s
Iteration  21: 386784.145 ops/s
Iteration  22: 380419.298 ops/s
Iteration  23: 387818.275 ops/s
Iteration  24: 372787.693 ops/s
Iteration  25: 388126.679 ops/s
Iteration  26: 379489.722 ops/s
Iteration  27: 385180.836 ops/s
Iteration  28: 378268.734 ops/s
Iteration  29: 391255.550 ops/s
Iteration  30: 381581.463 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onErrorThrows2":
  382183.309 ±(99.9%) 6120.369 ops/s [Average]
  (min, avg, max) = (363304.253, 382183.309, 395306.552), stdev = 9160.681
  CI (99.9%): [376062.939, 388303.678] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MaybeCreateTest._Benchmark.benchmark_onErrorThrows2  thrpt   30  382183.309 ± 6120.369  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_reduceMaybeDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_reduceMaybeDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.684 ops/s
# Warmup Iteration   2: 14652.108 ops/s
# Warmup Iteration   3: 63956.958 ops/s
# Warmup Iteration   4: 103540.177 ops/s
# Warmup Iteration   5: 215329.701 ops/s
# Warmup Iteration   6: 205426.110 ops/s
# Warmup Iteration   7: 219322.556 ops/s
# Warmup Iteration   8: 234902.001 ops/s
# Warmup Iteration   9: 244947.880 ops/s
# Warmup Iteration  10: 235607.264 ops/s
# Warmup Iteration  11: 233842.954 ops/s
# Warmup Iteration  12: 244943.786 ops/s
# Warmup Iteration  13: 234736.695 ops/s
# Warmup Iteration  14: 242801.048 ops/s
# Warmup Iteration  15: 230955.202 ops/s
# Warmup Iteration  16: 237782.497 ops/s
# Warmup Iteration  17: 246336.231 ops/s
# Warmup Iteration  18: 233792.301 ops/s
# Warmup Iteration  19: 245001.779 ops/s
# Warmup Iteration  20: 232503.278 ops/s
# Warmup Iteration  21: 243148.388 ops/s
# Warmup Iteration  22: 236599.496 ops/s
# Warmup Iteration  23: 236718.254 ops/s
# Warmup Iteration  24: 238192.381 ops/s
# Warmup Iteration  25: 239173.536 ops/s
# Warmup Iteration  26: 238095.614 ops/s
# Warmup Iteration  27: 238112.373 ops/s
# Warmup Iteration  28: 243448.868 ops/s
# Warmup Iteration  29: 243532.957 ops/s
# Warmup Iteration  30: 234324.231 ops/s
Iteration   1: 248910.877 ops/s
Iteration   2: 248197.817 ops/s
Iteration   3: 217585.586 ops/s
Iteration   4: 213344.107 ops/s
Iteration   5: 242537.077 ops/s
Iteration   6: 234533.677 ops/s
Iteration   7: 248638.370 ops/s
Iteration   8: 245402.890 ops/s
Iteration   9: 230191.089 ops/s
Iteration  10: 253160.568 ops/s
Iteration  11: 248669.056 ops/s
Iteration  12: 233765.626 ops/s
Iteration  13: 246098.774 ops/s
Iteration  14: 250175.929 ops/s
Iteration  15: 226934.057 ops/s
Iteration  16: 244861.378 ops/s
Iteration  17: 235624.128 ops/s
Iteration  18: 237579.481 ops/s
Iteration  19: 244993.421 ops/s
Iteration  20: 237513.445 ops/s
Iteration  21: 245212.497 ops/s
Iteration  22: 245591.137 ops/s
Iteration  23: 227961.366 ops/s
Iteration  24: 247389.197 ops/s
Iteration  25: 238633.136 ops/s
Iteration  26: 244353.347 ops/s
Iteration  27: 238885.707 ops/s
Iteration  28: 237045.364 ops/s
Iteration  29: 240072.585 ops/s
Iteration  30: 236894.439 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_reduceMaybeDoubleOnSubscribe":
  239691.871 ±(99.9%) 6289.383 ops/s [Average]
  (min, avg, max) = (213344.107, 239691.871, 253160.568), stdev = 9413.654
  CI (99.9%): [233402.488, 245981.254] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableReduceTest._Benchmark.benchmark_reduceMaybeDoubleOnSubscribe  thrpt   30  239691.871 ± 6289.383  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_sortedList$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_sortedList

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3993449.873 ops/s
# Warmup Iteration   2: 8206749.531 ops/s
# Warmup Iteration   3: 10629405.983 ops/s
# Warmup Iteration   4: 10077164.066 ops/s
# Warmup Iteration   5: 10308476.076 ops/s
# Warmup Iteration   6: 10403314.083 ops/s
# Warmup Iteration   7: 10585677.026 ops/s
# Warmup Iteration   8: 10154585.077 ops/s
# Warmup Iteration   9: 10373557.515 ops/s
# Warmup Iteration  10: 10092913.457 ops/s
# Warmup Iteration  11: 10313554.501 ops/s
# Warmup Iteration  12: 10777481.554 ops/s
# Warmup Iteration  13: 10152381.033 ops/s
# Warmup Iteration  14: 10572973.957 ops/s
# Warmup Iteration  15: 10237229.169 ops/s
# Warmup Iteration  16: 10520269.162 ops/s
# Warmup Iteration  17: 10185519.703 ops/s
# Warmup Iteration  18: 10243046.253 ops/s
# Warmup Iteration  19: 10504877.884 ops/s
# Warmup Iteration  20: 10440885.317 ops/s
# Warmup Iteration  21: 10568856.395 ops/s
# Warmup Iteration  22: 10434576.719 ops/s
# Warmup Iteration  23: 10464789.276 ops/s
# Warmup Iteration  24: 10066963.382 ops/s
# Warmup Iteration  25: 10257107.996 ops/s
# Warmup Iteration  26: 10850825.790 ops/s
# Warmup Iteration  27: 10077182.967 ops/s
# Warmup Iteration  28: 10143644.896 ops/s
# Warmup Iteration  29: 10721341.259 ops/s
# Warmup Iteration  30: 10097552.410 ops/s
Iteration   1: 10589791.993 ops/s
Iteration   2: 10237723.340 ops/s
Iteration   3: 10235263.887 ops/s
Iteration   4: 10590737.207 ops/s
Iteration   5: 10333178.633 ops/s
Iteration   6: 10724755.156 ops/s
Iteration   7: 9984946.053 ops/s
Iteration   8: 10764182.735 ops/s
Iteration   9: 10469302.684 ops/s
Iteration  10: 10656471.795 ops/s
Iteration  11: 10000103.221 ops/s
Iteration  12: 10448649.892 ops/s
Iteration  13: 10524853.987 ops/s
Iteration  14: 10178686.341 ops/s
Iteration  15: 10738042.151 ops/s
Iteration  16: 9878914.721 ops/s
Iteration  17: 10477941.754 ops/s
Iteration  18: 10124953.823 ops/s
Iteration  19: 10690244.970 ops/s
Iteration  20: 10060900.690 ops/s
Iteration  21: 10678704.277 ops/s
Iteration  22: 10214486.355 ops/s
Iteration  23: 10560219.943 ops/s
Iteration  24: 10552595.366 ops/s
Iteration  25: 10004320.534 ops/s
Iteration  26: 10470945.788 ops/s
Iteration  27: 10268959.716 ops/s
Iteration  28: 10346395.890 ops/s
Iteration  29: 10742912.200 ops/s
Iteration  30: 10435969.492 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_sortedList":
  10399505.153 ±(99.9%) 173977.517 ops/s [Average]
  (min, avg, max) = (9878914.721, 10399505.153, 10764182.735), stdev = 260401.377
  CI (99.9%): [10225527.636, 10573482.670] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
FlowableCovarianceTest._Benchmark.benchmark_sortedList  thrpt   30  10399505.153 ± 173977.517  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2203205.321 ops/s
# Warmup Iteration   2: 5029326.547 ops/s
# Warmup Iteration   3: 5324293.731 ops/s
# Warmup Iteration   4: 6111120.000 ops/s
# Warmup Iteration   5: 6490954.410 ops/s
# Warmup Iteration   6: 6264810.028 ops/s
# Warmup Iteration   7: 6402280.994 ops/s
# Warmup Iteration   8: 6027812.344 ops/s
# Warmup Iteration   9: 6244414.107 ops/s
# Warmup Iteration  10: 6327948.777 ops/s
# Warmup Iteration  11: 6089603.192 ops/s
# Warmup Iteration  12: 6407849.130 ops/s
# Warmup Iteration  13: 6321532.335 ops/s
# Warmup Iteration  14: 6190180.137 ops/s
# Warmup Iteration  15: 6568217.821 ops/s
# Warmup Iteration  16: 6390849.102 ops/s
# Warmup Iteration  17: 6295828.056 ops/s
# Warmup Iteration  18: 6081808.608 ops/s
# Warmup Iteration  19: 6639816.570 ops/s
# Warmup Iteration  20: 6008484.039 ops/s
# Warmup Iteration  21: 6398389.091 ops/s
# Warmup Iteration  22: 6396558.747 ops/s
# Warmup Iteration  23: 5985516.166 ops/s
# Warmup Iteration  24: 6289134.173 ops/s
# Warmup Iteration  25: 6243469.116 ops/s
# Warmup Iteration  26: 6132148.760 ops/s
# Warmup Iteration  27: 4592431.844 ops/s
# Warmup Iteration  28: 6171044.842 ops/s
# Warmup Iteration  29: 6567294.669 ops/s
# Warmup Iteration  30: 6017209.765 ops/s
Iteration   1: 6361516.876 ops/s
Iteration   2: 6398671.163 ops/s
Iteration   3: 6238513.511 ops/s
Iteration   4: 6477229.969 ops/s
Iteration   5: 6039861.792 ops/s
Iteration   6: 6546401.953 ops/s
Iteration   7: 6487449.434 ops/s
Iteration   8: 6174125.251 ops/s
Iteration   9: 6447645.153 ops/s
Iteration  10: 6378195.825 ops/s
Iteration  11: 6462455.387 ops/s
Iteration  12: 6355953.730 ops/s
Iteration  13: 6226068.467 ops/s
Iteration  14: 6370314.170 ops/s
Iteration  15: 6301506.667 ops/s
Iteration  16: 6434952.383 ops/s
Iteration  17: 6277943.298 ops/s
Iteration  18: 6196395.032 ops/s
Iteration  19: 6572753.356 ops/s
Iteration  20: 6232017.435 ops/s
Iteration  21: 6543841.154 ops/s
Iteration  22: 6163956.967 ops/s
Iteration  23: 6374709.315 ops/s
Iteration  24: 6479707.289 ops/s
Iteration  25: 6096370.043 ops/s
Iteration  26: 6217081.658 ops/s
Iteration  27: 6318374.928 ops/s
Iteration  28: 6362202.810 ops/s
Iteration  29: 6268731.118 ops/s
Iteration  30: 6513393.499 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_isDisposed":
  6343944.655 ±(99.9%) 92953.628 ops/s [Average]
  (min, avg, max) = (6039861.792, 6343944.655, 6572753.356), stdev = 139128.625
  CI (99.9%): [6250991.027, 6436898.282] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SingleOnErrorCompleteTest._Benchmark.benchmark_isDisposed  thrpt   30  6343944.655 ± 92953.628  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1337857.037 ops/s
# Warmup Iteration   2: 4300923.579 ops/s
# Warmup Iteration   3: 5119132.199 ops/s
# Warmup Iteration   4: 5667188.750 ops/s
# Warmup Iteration   5: 5942797.807 ops/s
# Warmup Iteration   6: 5897371.548 ops/s
# Warmup Iteration   7: 5876710.977 ops/s
# Warmup Iteration   8: 6065177.625 ops/s
# Warmup Iteration   9: 5816621.181 ops/s
# Warmup Iteration  10: 5768657.836 ops/s
# Warmup Iteration  11: 5816836.622 ops/s
# Warmup Iteration  12: 5875016.687 ops/s
# Warmup Iteration  13: 6024950.212 ops/s
# Warmup Iteration  14: 5890017.084 ops/s
# Warmup Iteration  15: 5770675.898 ops/s
# Warmup Iteration  16: 5981778.339 ops/s
# Warmup Iteration  17: 5756138.979 ops/s
# Warmup Iteration  18: 6115731.980 ops/s
# Warmup Iteration  19: 5804893.963 ops/s
# Warmup Iteration  20: 5888282.176 ops/s
# Warmup Iteration  21: 5783469.302 ops/s
# Warmup Iteration  22: 5813464.780 ops/s
# Warmup Iteration  23: 5922470.303 ops/s
# Warmup Iteration  24: 5715370.485 ops/s
# Warmup Iteration  25: 5932847.193 ops/s
# Warmup Iteration  26: 5634043.643 ops/s
# Warmup Iteration  27: 5951379.874 ops/s
# Warmup Iteration  28: 6091020.327 ops/s
# Warmup Iteration  29: 5839107.918 ops/s
# Warmup Iteration  30: 6101157.485 ops/s
Iteration   1: 5742626.338 ops/s
Iteration   2: 5985769.812 ops/s
Iteration   3: 5695757.482 ops/s
Iteration   4: 5835417.129 ops/s
Iteration   5: 5867664.171 ops/s
Iteration   6: 5879760.486 ops/s
Iteration   7: 6061991.237 ops/s
Iteration   8: 5707049.180 ops/s
Iteration   9: 6135802.272 ops/s
Iteration  10: 5935089.949 ops/s
Iteration  11: 5803004.661 ops/s
Iteration  12: 5911903.600 ops/s
Iteration  13: 5786243.690 ops/s
Iteration  14: 5785253.712 ops/s
Iteration  15: 5934815.502 ops/s
Iteration  16: 6057889.036 ops/s
Iteration  17: 5791326.285 ops/s
Iteration  18: 5888571.677 ops/s
Iteration  19: 6139118.984 ops/s
Iteration  20: 5734624.497 ops/s
Iteration  21: 6024830.783 ops/s
Iteration  22: 5782574.703 ops/s
Iteration  23: 5730598.921 ops/s
Iteration  24: 5947936.816 ops/s
Iteration  25: 5856557.314 ops/s
Iteration  26: 5931115.869 ops/s
Iteration  27: 5891675.497 ops/s
Iteration  28: 5864957.040 ops/s
Iteration  29: 6103309.086 ops/s
Iteration  30: 5759004.826 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_dispose":
  5885741.352 ±(99.9%) 85746.077 ops/s [Average]
  (min, avg, max) = (5695757.482, 5885741.352, 6139118.984), stdev = 128340.701
  CI (99.9%): [5799995.275, 5971487.429] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MaybeMaterializeTest._Benchmark.benchmark_dispose  thrpt   30  5885741.352 ± 85746.077  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 77301.309 ops/s
# Warmup Iteration   2: 489543.743 ops/s
# Warmup Iteration   3: 1359922.970 ops/s
# Warmup Iteration   4: 1588477.721 ops/s
# Warmup Iteration   5: 1622282.692 ops/s
# Warmup Iteration   6: 1627311.785 ops/s
# Warmup Iteration   7: 1565289.396 ops/s
# Warmup Iteration   8: 1508837.099 ops/s
# Warmup Iteration   9: 1604074.259 ops/s
# Warmup Iteration  10: 1664338.795 ops/s
# Warmup Iteration  11: 1629384.330 ops/s
# Warmup Iteration  12: 1580654.814 ops/s
# Warmup Iteration  13: 1725951.836 ops/s
# Warmup Iteration  14: 1641389.740 ops/s
# Warmup Iteration  15: 1617354.016 ops/s
# Warmup Iteration  16: 1656940.004 ops/s
# Warmup Iteration  17: 1622613.094 ops/s
# Warmup Iteration  18: 1627429.712 ops/s
# Warmup Iteration  19: 1629373.772 ops/s
# Warmup Iteration  20: 1644880.511 ops/s
# Warmup Iteration  21: 1622157.422 ops/s
# Warmup Iteration  22: 1605582.596 ops/s
# Warmup Iteration  23: 1302967.372 ops/s
# Warmup Iteration  24: 1594046.955 ops/s
# Warmup Iteration  25: 1634762.994 ops/s
# Warmup Iteration  26: 1655249.284 ops/s
# Warmup Iteration  27: 1644238.031 ops/s
# Warmup Iteration  28: 1690798.828 ops/s
# Warmup Iteration  29: 1626409.749 ops/s
# Warmup Iteration  30: 1666277.901 ops/s
Iteration   1: 1655995.366 ops/s
Iteration   2: 1633417.526 ops/s
Iteration   3: 1690941.497 ops/s
Iteration   4: 1687009.414 ops/s
Iteration   5: 1604446.869 ops/s
Iteration   6: 1696787.480 ops/s
Iteration   7: 1640721.134 ops/s
Iteration   8: 1619012.987 ops/s
Iteration   9: 1697521.690 ops/s
Iteration  10: 1627346.495 ops/s
Iteration  11: 1725628.706 ops/s
Iteration  12: 1695543.803 ops/s
Iteration  13: 1643778.567 ops/s
Iteration  14: 1642974.864 ops/s
Iteration  15: 1669051.822 ops/s
Iteration  16: 1596480.988 ops/s
Iteration  17: 1716573.996 ops/s
Iteration  18: 1586404.778 ops/s
Iteration  19: 1729408.991 ops/s
Iteration  20: 1619481.205 ops/s
Iteration  21: 1678121.334 ops/s
Iteration  22: 1708357.108 ops/s
Iteration  23: 1598788.104 ops/s
Iteration  24: 1687886.513 ops/s
Iteration  25: 1590675.426 ops/s
Iteration  26: 1688017.027 ops/s
Iteration  27: 1586233.806 ops/s
Iteration  28: 1664365.255 ops/s
Iteration  29: 1619698.274 ops/s
Iteration  30: 1598850.204 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_dispose":
  1653317.374 ±(99.9%) 30124.562 ops/s [Average]
  (min, avg, max) = (1586233.806, 1653317.374, 1729408.991), stdev = 45089.030
  CI (99.9%): [1623192.812, 1683441.936] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableElementAtTest._Benchmark.benchmark_dispose  thrpt   30  1653317.374 ± 30124.562  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_manySources$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_manySources

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 113667.905 ops/s
# Warmup Iteration   2: 408620.111 ops/s
# Warmup Iteration   3: 569739.120 ops/s
# Warmup Iteration   4: 554336.184 ops/s
# Warmup Iteration   5: 569335.422 ops/s
# Warmup Iteration   6: 553297.070 ops/s
# Warmup Iteration   7: 523375.153 ops/s
# Warmup Iteration   8: 534500.681 ops/s
# Warmup Iteration   9: 515861.366 ops/s
# Warmup Iteration  10: 588449.713 ops/s
# Warmup Iteration  11: 569628.691 ops/s
# Warmup Iteration  12: 557924.776 ops/s
# Warmup Iteration  13: 588185.910 ops/s
# Warmup Iteration  14: 554053.912 ops/s
# Warmup Iteration  15: 559865.116 ops/s
# Warmup Iteration  16: 575657.296 ops/s
# Warmup Iteration  17: 546353.900 ops/s
# Warmup Iteration  18: 562702.176 ops/s
# Warmup Iteration  19: 557110.879 ops/s
# Warmup Iteration  20: 557048.025 ops/s
# Warmup Iteration  21: 558632.271 ops/s
# Warmup Iteration  22: 546659.033 ops/s
# Warmup Iteration  23: 577237.675 ops/s
# Warmup Iteration  24: 549187.011 ops/s
# Warmup Iteration  25: 543868.933 ops/s
# Warmup Iteration  26: 556947.477 ops/s
# Warmup Iteration  27: 565858.047 ops/s
# Warmup Iteration  28: 561946.070 ops/s
# Warmup Iteration  29: 552704.650 ops/s
# Warmup Iteration  30: 570626.717 ops/s
Iteration   1: 545266.214 ops/s
Iteration   2: 571471.612 ops/s
Iteration   3: 556638.285 ops/s
Iteration   4: 572320.140 ops/s
Iteration   5: 562942.462 ops/s
Iteration   6: 545469.202 ops/s
Iteration   7: 572284.044 ops/s
Iteration   8: 545608.182 ops/s
Iteration   9: 543858.352 ops/s
Iteration  10: 565653.406 ops/s
Iteration  11: 558592.910 ops/s
Iteration  12: 577267.769 ops/s
Iteration  13: 557448.460 ops/s
Iteration  14: 550222.045 ops/s
Iteration  15: 564629.907 ops/s
Iteration  16: 549128.067 ops/s
Iteration  17: 566407.923 ops/s
Iteration  18: 565076.535 ops/s
Iteration  19: 548827.065 ops/s
Iteration  20: 569000.926 ops/s
Iteration  21: 556325.350 ops/s
Iteration  22: 577323.282 ops/s
Iteration  23: 543928.697 ops/s
Iteration  24: 549593.534 ops/s
Iteration  25: 576045.720 ops/s
Iteration  26: 552713.952 ops/s
Iteration  27: 576096.824 ops/s
Iteration  28: 572893.564 ops/s
Iteration  29: 549105.278 ops/s
Iteration  30: 569494.455 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_manySources":
  560387.805 ±(99.9%) 7665.109 ops/s [Average]
  (min, avg, max) = (543858.352, 560387.805, 577323.282), stdev = 11472.775
  CI (99.9%): [552722.697, 568052.914] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ObservableAmbTest._Benchmark.benchmark_manySources  thrpt   30  560387.805 ± 7665.109  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fused2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fused2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 263120.778 ops/s
# Warmup Iteration   2: 978219.894 ops/s
# Warmup Iteration   3: 3463295.983 ops/s
# Warmup Iteration   4: 3663763.511 ops/s
# Warmup Iteration   5: 4151945.356 ops/s
# Warmup Iteration   6: 4378043.577 ops/s
# Warmup Iteration   7: 4246279.247 ops/s
# Warmup Iteration   8: 4386100.516 ops/s
# Warmup Iteration   9: 4452048.164 ops/s
# Warmup Iteration  10: 4270607.878 ops/s
# Warmup Iteration  11: 4326437.526 ops/s
# Warmup Iteration  12: 4175107.020 ops/s
# Warmup Iteration  13: 4449142.022 ops/s
# Warmup Iteration  14: 4347666.586 ops/s
# Warmup Iteration  15: 4377900.760 ops/s
# Warmup Iteration  16: 4460673.593 ops/s
# Warmup Iteration  17: 3455836.728 ops/s
# Warmup Iteration  18: 4449574.997 ops/s
# Warmup Iteration  19: 4210365.783 ops/s
# Warmup Iteration  20: 4484572.270 ops/s
# Warmup Iteration  21: 4233829.025 ops/s
# Warmup Iteration  22: 4257107.853 ops/s
# Warmup Iteration  23: 4524563.452 ops/s
# Warmup Iteration  24: 4142734.589 ops/s
# Warmup Iteration  25: 4375457.912 ops/s
# Warmup Iteration  26: 4446758.815 ops/s
# Warmup Iteration  27: 4242402.932 ops/s
# Warmup Iteration  28: 4371136.407 ops/s
# Warmup Iteration  29: 4348875.277 ops/s
# Warmup Iteration  30: 4327567.389 ops/s
Iteration   1: 4363701.628 ops/s
Iteration   2: 4321578.960 ops/s
Iteration   3: 4490131.041 ops/s
Iteration   4: 4174545.301 ops/s
Iteration   5: 4375974.227 ops/s
Iteration   6: 4452394.767 ops/s
Iteration   7: 4196372.303 ops/s
Iteration   8: 4377596.837 ops/s
Iteration   9: 4242681.526 ops/s
Iteration  10: 4320525.457 ops/s
Iteration  11: 4408199.817 ops/s
Iteration  12: 4269250.573 ops/s
Iteration  13: 4408660.958 ops/s
Iteration  14: 4417832.140 ops/s
Iteration  15: 4364491.695 ops/s
Iteration  16: 4366281.079 ops/s
Iteration  17: 4269380.603 ops/s
Iteration  18: 4421347.437 ops/s
Iteration  19: 4298351.605 ops/s
Iteration  20: 4402623.352 ops/s
Iteration  21: 4190286.584 ops/s
Iteration  22: 4451544.431 ops/s
Iteration  23: 4265161.329 ops/s
Iteration  24: 4376168.812 ops/s
Iteration  25: 4369024.085 ops/s
Iteration  26: 4309333.260 ops/s
Iteration  27: 4527498.525 ops/s
Iteration  28: 4269525.529 ops/s
Iteration  29: 4311146.994 ops/s
Iteration  30: 4504794.401 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fused2":
  4350546.842 ±(99.9%) 61276.058 ops/s [Average]
  (min, avg, max) = (4174545.301, 4350546.842, 4527498.525), stdev = 91715.126
  CI (99.9%): [4289270.784, 4411822.900] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_fused2  thrpt   30  4350546.842 ± 61276.058  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_hasSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_hasSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23417251.704 ops/s
# Warmup Iteration   2: 41742702.068 ops/s
# Warmup Iteration   3: 57576196.677 ops/s
# Warmup Iteration   4: 57286283.301 ops/s
# Warmup Iteration   5: 55922456.347 ops/s
# Warmup Iteration   6: 56256531.527 ops/s
# Warmup Iteration   7: 58563582.513 ops/s
# Warmup Iteration   8: 57786345.086 ops/s
# Warmup Iteration   9: 55778052.315 ops/s
# Warmup Iteration  10: 56761420.125 ops/s
# Warmup Iteration  11: 57088120.834 ops/s
# Warmup Iteration  12: 55032600.600 ops/s
# Warmup Iteration  13: 58215849.150 ops/s
# Warmup Iteration  14: 55571518.781 ops/s
# Warmup Iteration  15: 57152814.946 ops/s
# Warmup Iteration  16: 57194068.381 ops/s
# Warmup Iteration  17: 55817227.394 ops/s
# Warmup Iteration  18: 57426835.730 ops/s
# Warmup Iteration  19: 56589664.887 ops/s
# Warmup Iteration  20: 57210789.557 ops/s
# Warmup Iteration  21: 58188333.247 ops/s
# Warmup Iteration  22: 58608324.906 ops/s
# Warmup Iteration  23: 55345896.744 ops/s
# Warmup Iteration  24: 57433949.258 ops/s
# Warmup Iteration  25: 56819726.614 ops/s
# Warmup Iteration  26: 56666807.241 ops/s
# Warmup Iteration  27: 58277842.691 ops/s
# Warmup Iteration  28: 55020989.364 ops/s
# Warmup Iteration  29: 58959011.870 ops/s
# Warmup Iteration  30: 58410257.109 ops/s
Iteration   1: 55089475.756 ops/s
Iteration   2: 56443116.645 ops/s
Iteration   3: 58537950.870 ops/s
Iteration   4: 54628598.340 ops/s
Iteration   5: 56640111.102 ops/s
Iteration   6: 55918770.142 ops/s
Iteration   7: 57996392.908 ops/s
Iteration   8: 58964559.176 ops/s
Iteration   9: 56133541.458 ops/s
Iteration  10: 57873592.329 ops/s
Iteration  11: 55524181.057 ops/s
Iteration  12: 59204471.121 ops/s
Iteration  13: 56306095.554 ops/s
Iteration  14: 56605747.672 ops/s
Iteration  15: 58854773.260 ops/s
Iteration  16: 55570046.571 ops/s
Iteration  17: 56943620.381 ops/s
Iteration  18: 57232815.122 ops/s
Iteration  19: 55379257.562 ops/s
Iteration  20: 57711398.845 ops/s
Iteration  21: 55698351.635 ops/s
Iteration  22: 59084212.086 ops/s
Iteration  23: 55392712.794 ops/s
Iteration  24: 57729689.112 ops/s
Iteration  25: 55943927.136 ops/s
Iteration  26: 56495410.238 ops/s
Iteration  27: 59075499.775 ops/s
Iteration  28: 56035662.620 ops/s
Iteration  29: 57483356.098 ops/s
Iteration  30: 55000413.161 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_hasSource":
  56849925.018 ±(99.9%) 922446.788 ops/s [Average]
  (min, avg, max) = (54628598.340, 56849925.018, 59204471.121), stdev = 1380675.031
  CI (99.9%): [55927478.230, 57772371.805] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score        Error  Units
MaybeCountTest._Benchmark.benchmark_hasSource  thrpt   30  56849925.018 ± 922446.788  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162389.397 ops/s
# Warmup Iteration   2: 581171.275 ops/s
# Warmup Iteration   3: 659838.309 ops/s
# Warmup Iteration   4: 655204.238 ops/s
# Warmup Iteration   5: 609955.000 ops/s
# Warmup Iteration   6: 719550.616 ops/s
# Warmup Iteration   7: 711610.875 ops/s
# Warmup Iteration   8: 690827.249 ops/s
# Warmup Iteration   9: 719728.497 ops/s
# Warmup Iteration  10: 746901.087 ops/s
# Warmup Iteration  11: 569427.327 ops/s
# Warmup Iteration  12: 626948.529 ops/s
# Warmup Iteration  13: 730590.736 ops/s
# Warmup Iteration  14: 702663.494 ops/s
# Warmup Iteration  15: 721300.416 ops/s
# Warmup Iteration  16: 696333.468 ops/s
# Warmup Iteration  17: 751088.930 ops/s
# Warmup Iteration  18: 776788.985 ops/s
# Warmup Iteration  19: 762485.694 ops/s
# Warmup Iteration  20: 743360.824 ops/s
# Warmup Iteration  21: 765030.140 ops/s
# Warmup Iteration  22: 732360.224 ops/s
# Warmup Iteration  23: 798823.732 ops/s
# Warmup Iteration  24: 749942.847 ops/s
# Warmup Iteration  25: 734998.041 ops/s
# Warmup Iteration  26: 778183.850 ops/s
# Warmup Iteration  27: 747833.997 ops/s
# Warmup Iteration  28: 729082.731 ops/s
# Warmup Iteration  29: 754538.530 ops/s
# Warmup Iteration  30: 758276.084 ops/s
Iteration   1: 768522.816 ops/s
Iteration   2: 768309.668 ops/s
Iteration   3: 778346.062 ops/s
Iteration   4: 740421.527 ops/s
Iteration   5: 755632.584 ops/s
Iteration   6: 795085.901 ops/s
Iteration   7: 739263.706 ops/s
Iteration   8: 781857.753 ops/s
Iteration   9: 737322.963 ops/s
Iteration  10: 771511.720 ops/s
Iteration  11: 744710.353 ops/s
Iteration  12: 748472.439 ops/s
Iteration  13: 779345.490 ops/s
Iteration  14: 749666.981 ops/s
Iteration  15: 742038.175 ops/s
Iteration  16: 779602.736 ops/s
Iteration  17: 745187.702 ops/s
Iteration  18: 759049.338 ops/s
Iteration  19: 747913.958 ops/s
Iteration  20: 776452.708 ops/s
Iteration  21: 788186.630 ops/s
Iteration  22: 748009.339 ops/s
Iteration  23: 735616.894 ops/s
Iteration  24: 768838.956 ops/s
Iteration  25: 749420.583 ops/s
Iteration  26: 758913.334 ops/s
Iteration  27: 750768.805 ops/s
Iteration  28: 773179.474 ops/s
Iteration  29: 744244.294 ops/s
Iteration  30: 762046.330 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_error":
  759597.974 ±(99.9%) 11157.871 ops/s [Average]
  (min, avg, max) = (735616.894, 759597.974, 795085.901), stdev = 16700.577
  CI (99.9%): [748440.103, 770755.845] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score       Error  Units
MaybeIsEmptyTest._Benchmark.benchmark_error  thrpt   30  759597.974 ± 11157.871  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 341699.365 ops/s
# Warmup Iteration   2: 573598.979 ops/s
# Warmup Iteration   3: 735932.061 ops/s
# Warmup Iteration   4: 705621.902 ops/s
# Warmup Iteration   5: 746854.785 ops/s
# Warmup Iteration   6: 742027.929 ops/s
# Warmup Iteration   7: 694303.789 ops/s
# Warmup Iteration   8: 709803.616 ops/s
# Warmup Iteration   9: 703332.703 ops/s
# Warmup Iteration  10: 718884.272 ops/s
# Warmup Iteration  11: 703886.627 ops/s
# Warmup Iteration  12: 703669.507 ops/s
# Warmup Iteration  13: 724835.099 ops/s
# Warmup Iteration  14: 705497.175 ops/s
# Warmup Iteration  15: 711887.799 ops/s
# Warmup Iteration  16: 747695.729 ops/s
# Warmup Iteration  17: 773545.880 ops/s
# Warmup Iteration  18: 754500.595 ops/s
# Warmup Iteration  19: 778503.686 ops/s
# Warmup Iteration  20: 764118.905 ops/s
# Warmup Iteration  21: 797468.968 ops/s
# Warmup Iteration  22: 709248.668 ops/s
# Warmup Iteration  23: 750706.111 ops/s
# Warmup Iteration  24: 764391.013 ops/s
# Warmup Iteration  25: 737676.649 ops/s
# Warmup Iteration  26: 785025.857 ops/s
# Warmup Iteration  27: 769929.040 ops/s
# Warmup Iteration  28: 759258.176 ops/s
# Warmup Iteration  29: 786119.207 ops/s
# Warmup Iteration  30: 760913.499 ops/s
Iteration   1: 789226.727 ops/s
Iteration   2: 754540.272 ops/s
Iteration   3: 800763.040 ops/s
Iteration   4: 737581.482 ops/s
Iteration   5: 773771.502 ops/s
Iteration   6: 776285.538 ops/s
Iteration   7: 757456.293 ops/s
Iteration   8: 804123.073 ops/s
Iteration   9: 755566.655 ops/s
Iteration  10: 742270.746 ops/s
Iteration  11: 786710.948 ops/s
Iteration  12: 763825.143 ops/s
Iteration  13: 801879.184 ops/s
Iteration  14: 759669.336 ops/s
Iteration  15: 770287.586 ops/s
Iteration  16: 755646.382 ops/s
Iteration  17: 769172.202 ops/s
Iteration  18: 792803.471 ops/s
Iteration  19: 752713.314 ops/s
Iteration  20: 792345.452 ops/s
Iteration  21: 752144.713 ops/s
Iteration  22: 786970.175 ops/s
Iteration  23: 766823.726 ops/s
Iteration  24: 763761.295 ops/s
Iteration  25: 781018.016 ops/s
Iteration  26: 758272.886 ops/s
Iteration  27: 795228.454 ops/s
Iteration  28: 777229.917 ops/s
Iteration  29: 736471.060 ops/s
Iteration  30: 751839.995 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleError":
  770213.286 ±(99.9%) 13000.323 ops/s [Average]
  (min, avg, max) = (736471.060, 770213.286, 804123.073), stdev = 19458.273
  CI (99.9%): [757212.963, 783213.609] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleError  thrpt   30  770213.286 ± 13000.323  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_emitterHasToString$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_emitterHasToString

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 52581.780 ops/s
# Warmup Iteration   2: 178471.941 ops/s
# Warmup Iteration   3: 417997.415 ops/s
# Warmup Iteration   4: 850709.086 ops/s
# Warmup Iteration   5: 806855.274 ops/s
# Warmup Iteration   6: 530365.494 ops/s
# Warmup Iteration   7: 800312.424 ops/s
# Warmup Iteration   8: 908378.904 ops/s
# Warmup Iteration   9: 860543.445 ops/s
# Warmup Iteration  10: 879715.512 ops/s
# Warmup Iteration  11: 845774.954 ops/s
# Warmup Iteration  12: 891947.137 ops/s
# Warmup Iteration  13: 861039.405 ops/s
# Warmup Iteration  14: 864789.750 ops/s
# Warmup Iteration  15: 864145.035 ops/s
# Warmup Iteration  16: 883872.963 ops/s
# Warmup Iteration  17: 870212.160 ops/s
# Warmup Iteration  18: 883354.433 ops/s
# Warmup Iteration  19: 867047.591 ops/s
# Warmup Iteration  20: 873867.926 ops/s
# Warmup Iteration  21: 898311.031 ops/s
# Warmup Iteration  22: 854686.779 ops/s
# Warmup Iteration  23: 898459.389 ops/s
# Warmup Iteration  24: 839687.954 ops/s
# Warmup Iteration  25: 844740.425 ops/s
# Warmup Iteration  26: 911129.862 ops/s
# Warmup Iteration  27: 833471.696 ops/s
# Warmup Iteration  28: 890019.553 ops/s
# Warmup Iteration  29: 900451.705 ops/s
# Warmup Iteration  30: 875532.136 ops/s
Iteration   1: 894864.074 ops/s
Iteration   2: 844613.502 ops/s
Iteration   3: 899724.280 ops/s
Iteration   4: 830952.757 ops/s
Iteration   5: 870411.005 ops/s
Iteration   6: 872273.461 ops/s
Iteration   7: 858010.021 ops/s
Iteration   8: 869670.518 ops/s
Iteration   9: 852802.522 ops/s
Iteration  10: 871304.868 ops/s
Iteration  11: 854135.601 ops/s
Iteration  12: 846887.031 ops/s
Iteration  13: 872044.575 ops/s
Iteration  14: 872307.540 ops/s
Iteration  15: 877527.417 ops/s
Iteration  16: 859534.275 ops/s
Iteration  17: 870984.305 ops/s
Iteration  18: 892521.765 ops/s
Iteration  19: 865877.397 ops/s
Iteration  20: 897125.209 ops/s
Iteration  21: 861215.846 ops/s
Iteration  22: 863108.955 ops/s
Iteration  23: 906618.993 ops/s
Iteration  24: 865023.166 ops/s
Iteration  25: 845444.553 ops/s
Iteration  26: 899725.063 ops/s
Iteration  27: 848783.862 ops/s
Iteration  28: 910441.638 ops/s
Iteration  29: 835437.826 ops/s
Iteration  30: 905869.987 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_emitterHasToString":
  870508.067 ±(99.9%) 14614.552 ops/s [Average]
  (min, avg, max) = (830952.757, 870508.067, 910441.638), stdev = 21874.375
  CI (99.9%): [855893.515, 885122.619] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
MaybeCreateTest._Benchmark.benchmark_emitterHasToString  thrpt   30  870508.067 ± 14614.552  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12345.305 ops/s
# Warmup Iteration   2: 114809.320 ops/s
# Warmup Iteration   3: 180505.708 ops/s
# Warmup Iteration   4: 198383.167 ops/s
# Warmup Iteration   5: 213957.727 ops/s
# Warmup Iteration   6: 196836.448 ops/s
# Warmup Iteration   7: 211056.503 ops/s
# Warmup Iteration   8: 199670.962 ops/s
# Warmup Iteration   9: 202321.624 ops/s
# Warmup Iteration  10: 194135.777 ops/s
# Warmup Iteration  11: 207052.278 ops/s
# Warmup Iteration  12: 200179.152 ops/s
# Warmup Iteration  13: 210703.241 ops/s
# Warmup Iteration  14: 202819.893 ops/s
# Warmup Iteration  15: 208787.506 ops/s
# Warmup Iteration  16: 208836.264 ops/s
# Warmup Iteration  17: 203998.439 ops/s
# Warmup Iteration  18: 213904.038 ops/s
# Warmup Iteration  19: 209851.555 ops/s
# Warmup Iteration  20: 218837.409 ops/s
# Warmup Iteration  21: 209018.699 ops/s
# Warmup Iteration  22: 216286.635 ops/s
# Warmup Iteration  23: 213064.658 ops/s
# Warmup Iteration  24: 210865.791 ops/s
# Warmup Iteration  25: 210042.735 ops/s
# Warmup Iteration  26: 206158.648 ops/s
# Warmup Iteration  27: 195554.266 ops/s
# Warmup Iteration  28: 214714.453 ops/s
# Warmup Iteration  29: 222784.275 ops/s
# Warmup Iteration  30: 210747.110 ops/s
Iteration   1: 222151.150 ops/s
Iteration   2: 219478.519 ops/s
Iteration   3: 211473.955 ops/s
Iteration   4: 222312.544 ops/s
Iteration   5: 207131.376 ops/s
Iteration   6: 213823.533 ops/s
Iteration   7: 236798.758 ops/s
Iteration   8: 224320.877 ops/s
Iteration   9: 205030.929 ops/s
Iteration  10: 218724.588 ops/s
Iteration  11: 218828.983 ops/s
Iteration  12: 215967.034 ops/s
Iteration  13: 220220.810 ops/s
Iteration  14: 223772.747 ops/s
Iteration  15: 237822.708 ops/s
Iteration  16: 226493.622 ops/s
Iteration  17: 225492.024 ops/s
Iteration  18: 236719.271 ops/s
Iteration  19: 221905.199 ops/s
Iteration  20: 209224.299 ops/s
Iteration  21: 219853.168 ops/s
Iteration  22: 206012.620 ops/s
Iteration  23: 211180.056 ops/s
Iteration  24: 220876.808 ops/s
Iteration  25: 210300.952 ops/s
Iteration  26: 220756.492 ops/s
Iteration  27: 204023.195 ops/s
Iteration  28: 217846.522 ops/s
Iteration  29: 213971.200 ops/s
Iteration  30: 215390.385 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_undeliverableUponCancel":
  218596.811 ±(99.9%) 5900.261 ops/s [Average]
  (min, avg, max) = (204023.195, 218596.811, 237822.708), stdev = 8831.234
  CI (99.9%): [212696.549, 224497.072] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  218596.811 ± 5900.261  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10541.408 ops/s
# Warmup Iteration   2: 88482.143 ops/s
# Warmup Iteration   3: 151332.613 ops/s
# Warmup Iteration   4: 169783.363 ops/s
# Warmup Iteration   5: 172812.222 ops/s
# Warmup Iteration   6: 170720.962 ops/s
# Warmup Iteration   7: 173656.398 ops/s
# Warmup Iteration   8: 163486.021 ops/s
# Warmup Iteration   9: 168509.118 ops/s
# Warmup Iteration  10: 178846.622 ops/s
# Warmup Iteration  11: 175084.518 ops/s
# Warmup Iteration  12: 160487.634 ops/s
# Warmup Iteration  13: 175769.588 ops/s
# Warmup Iteration  14: 174577.256 ops/s
# Warmup Iteration  15: 172682.031 ops/s
# Warmup Iteration  16: 171669.817 ops/s
# Warmup Iteration  17: 181479.482 ops/s
# Warmup Iteration  18: 181123.907 ops/s
# Warmup Iteration  19: 190414.701 ops/s
# Warmup Iteration  20: 187432.338 ops/s
# Warmup Iteration  21: 181959.713 ops/s
# Warmup Iteration  22: 184895.731 ops/s
# Warmup Iteration  23: 185594.951 ops/s
# Warmup Iteration  24: 188429.923 ops/s
# Warmup Iteration  25: 188897.273 ops/s
# Warmup Iteration  26: 181491.423 ops/s
# Warmup Iteration  27: 190989.305 ops/s
# Warmup Iteration  28: 185757.255 ops/s
# Warmup Iteration  29: 179875.085 ops/s
# Warmup Iteration  30: 178647.892 ops/s
Iteration   1: 181386.906 ops/s
Iteration   2: 189414.651 ops/s
Iteration   3: 173171.499 ops/s
Iteration   4: 186147.919 ops/s
Iteration   5: 185657.145 ops/s
Iteration   6: 184004.746 ops/s
Iteration   7: 196517.526 ops/s
Iteration   8: 188475.145 ops/s
Iteration   9: 184100.276 ops/s
Iteration  10: 191034.157 ops/s
Iteration  11: 180102.490 ops/s
Iteration  12: 191732.388 ops/s
Iteration  13: 187207.531 ops/s
Iteration  14: 181337.497 ops/s
Iteration  15: 184850.724 ops/s
Iteration  16: 188644.547 ops/s
Iteration  17: 188206.341 ops/s
Iteration  18: 188018.714 ops/s
Iteration  19: 184342.055 ops/s
Iteration  20: 187908.528 ops/s
Iteration  21: 186575.140 ops/s
Iteration  22: 187567.610 ops/s
Iteration  23: 187442.552 ops/s
Iteration  24: 191197.421 ops/s
Iteration  25: 193026.841 ops/s
Iteration  26: 181026.589 ops/s
Iteration  27: 187074.249 ops/s
Iteration  28: 184948.768 ops/s
Iteration  29: 184777.744 ops/s
Iteration  30: 193123.192 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  186634.030 ±(99.9%) 3064.797 ops/s [Average]
  (min, avg, max) = (173171.499, 186634.030, 196517.526), stdev = 4587.244
  CI (99.9%): [183569.233, 189698.826] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  186634.030 ± 3064.797  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mergeScalar$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mergeScalar

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1446050.230 ops/s
# Warmup Iteration   2: 3938912.064 ops/s
# Warmup Iteration   3: 5444225.172 ops/s
# Warmup Iteration   4: 5525844.923 ops/s
# Warmup Iteration   5: 5835843.959 ops/s
# Warmup Iteration   6: 5385292.078 ops/s
# Warmup Iteration   7: 5619371.912 ops/s
# Warmup Iteration   8: 5734951.635 ops/s
# Warmup Iteration   9: 5638670.253 ops/s
# Warmup Iteration  10: 5741001.409 ops/s
# Warmup Iteration  11: 5395674.583 ops/s
# Warmup Iteration  12: 5469411.455 ops/s
# Warmup Iteration  13: 5882204.778 ops/s
# Warmup Iteration  14: 5554723.165 ops/s
# Warmup Iteration  15: 5798779.983 ops/s
# Warmup Iteration  16: 5432267.080 ops/s
# Warmup Iteration  17: 5712153.479 ops/s
# Warmup Iteration  18: 5835463.114 ops/s
# Warmup Iteration  19: 5508875.031 ops/s
# Warmup Iteration  20: 5811084.844 ops/s
# Warmup Iteration  21: 5717169.770 ops/s
# Warmup Iteration  22: 5673089.240 ops/s
# Warmup Iteration  23: 5692118.238 ops/s
# Warmup Iteration  24: 5441350.056 ops/s
# Warmup Iteration  25: 5848940.200 ops/s
# Warmup Iteration  26: 5513983.570 ops/s
# Warmup Iteration  27: 5643376.180 ops/s
# Warmup Iteration  28: 5700982.904 ops/s
# Warmup Iteration  29: 5739896.316 ops/s
# Warmup Iteration  30: 5674425.148 ops/s
Iteration   1: 5504115.706 ops/s
Iteration   2: 5799227.271 ops/s
Iteration   3: 5772932.286 ops/s
Iteration   4: 5626465.716 ops/s
Iteration   5: 5774966.163 ops/s
Iteration   6: 5542341.718 ops/s
Iteration   7: 5825456.442 ops/s
Iteration   8: 5649073.757 ops/s
Iteration   9: 5705376.526 ops/s
Iteration  10: 5671887.409 ops/s
Iteration  11: 5525111.327 ops/s
Iteration  12: 5686106.387 ops/s
Iteration  13: 5718917.914 ops/s
Iteration  14: 5662155.430 ops/s
Iteration  15: 5678140.564 ops/s
Iteration  16: 5872309.169 ops/s
Iteration  17: 5420018.242 ops/s
Iteration  18: 5864516.446 ops/s
Iteration  19: 5513122.924 ops/s
Iteration  20: 5929632.106 ops/s
Iteration  21: 5835511.055 ops/s
Iteration  22: 5480824.679 ops/s
Iteration  23: 5738654.464 ops/s
Iteration  24: 5714274.096 ops/s
Iteration  25: 5877299.521 ops/s
Iteration  26: 5763417.639 ops/s
Iteration  27: 4161813.900 ops/s
Iteration  28: 5538048.241 ops/s
Iteration  29: 5794839.223 ops/s
Iteration  30: 5426214.421 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mergeScalar":
  5635759.025 ±(99.9%) 208354.791 ops/s [Average]
  (min, avg, max) = (4161813.900, 5635759.025, 5929632.106), stdev = 311855.666
  CI (99.9%): [5427404.233, 5844113.816] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
FlowableFlatMapTest._Benchmark.benchmark_mergeScalar  thrpt   30  5635759.025 ± 208354.791  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 73853.406 ops/s
# Warmup Iteration   2: 365645.653 ops/s
# Warmup Iteration   3: 414705.262 ops/s
# Warmup Iteration   4: 387000.618 ops/s
# Warmup Iteration   5: 452403.224 ops/s
# Warmup Iteration   6: 368276.371 ops/s
# Warmup Iteration   7: 444595.949 ops/s
# Warmup Iteration   8: 464335.672 ops/s
# Warmup Iteration   9: 426668.221 ops/s
# Warmup Iteration  10: 448996.918 ops/s
# Warmup Iteration  11: 441726.276 ops/s
# Warmup Iteration  12: 442027.617 ops/s
# Warmup Iteration  13: 459325.503 ops/s
# Warmup Iteration  14: 437892.329 ops/s
# Warmup Iteration  15: 460148.751 ops/s
# Warmup Iteration  16: 439567.968 ops/s
# Warmup Iteration  17: 467170.095 ops/s
# Warmup Iteration  18: 451205.781 ops/s
# Warmup Iteration  19: 470325.409 ops/s
# Warmup Iteration  20: 465048.716 ops/s
# Warmup Iteration  21: 460161.039 ops/s
# Warmup Iteration  22: 458349.792 ops/s
# Warmup Iteration  23: 474748.669 ops/s
# Warmup Iteration  24: 464138.178 ops/s
# Warmup Iteration  25: 451721.481 ops/s
# Warmup Iteration  26: 462820.186 ops/s
# Warmup Iteration  27: 472066.964 ops/s
# Warmup Iteration  28: 462189.007 ops/s
# Warmup Iteration  29: 449467.512 ops/s
# Warmup Iteration  30: 478770.770 ops/s
Iteration   1: 457818.004 ops/s
Iteration   2: 455274.759 ops/s
Iteration   3: 476467.686 ops/s
Iteration   4: 451859.321 ops/s
Iteration   5: 476454.509 ops/s
Iteration   6: 449474.378 ops/s
Iteration   7: 468272.829 ops/s
Iteration   8: 459451.387 ops/s
Iteration   9: 457931.509 ops/s
Iteration  10: 471532.096 ops/s
Iteration  11: 457435.171 ops/s
Iteration  12: 467658.386 ops/s
Iteration  13: 444734.374 ops/s
Iteration  14: 458300.467 ops/s
Iteration  15: 467301.640 ops/s
Iteration  16: 454488.749 ops/s
Iteration  17: 467886.263 ops/s
Iteration  18: 467424.637 ops/s
Iteration  19: 464970.433 ops/s
Iteration  20: 476554.815 ops/s
Iteration  21: 439419.781 ops/s
Iteration  22: 477634.756 ops/s
Iteration  23: 460989.367 ops/s
Iteration  24: 476538.027 ops/s
Iteration  25: 476876.438 ops/s
Iteration  26: 449820.371 ops/s
Iteration  27: 475654.432 ops/s
Iteration  28: 464056.153 ops/s
Iteration  29: 467071.892 ops/s
Iteration  30: 456733.955 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_doubleOnSubscribe":
  463202.886 ±(99.9%) 6979.622 ops/s [Average]
  (min, avg, max) = (439419.781, 463202.886, 477634.756), stdev = 10446.770
  CI (99.9%): [456223.265, 470182.508] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableMapNotificationTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  463202.886 ± 6979.622  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1828755.195 ops/s
# Warmup Iteration   2: 4784827.820 ops/s
# Warmup Iteration   3: 7033406.569 ops/s
# Warmup Iteration   4: 7124903.295 ops/s
# Warmup Iteration   5: 7336451.225 ops/s
# Warmup Iteration   6: 7184431.599 ops/s
# Warmup Iteration   7: 6996554.676 ops/s
# Warmup Iteration   8: 7480146.943 ops/s
# Warmup Iteration   9: 7020595.877 ops/s
# Warmup Iteration  10: 7364403.875 ops/s
# Warmup Iteration  11: 6935613.711 ops/s
# Warmup Iteration  12: 7273232.237 ops/s
# Warmup Iteration  13: 7258778.433 ops/s
# Warmup Iteration  14: 7052600.243 ops/s
# Warmup Iteration  15: 7236321.328 ops/s
# Warmup Iteration  16: 7404307.378 ops/s
# Warmup Iteration  17: 7081527.884 ops/s
# Warmup Iteration  18: 7478229.670 ops/s
# Warmup Iteration  19: 7088762.093 ops/s
# Warmup Iteration  20: 7345852.472 ops/s
# Warmup Iteration  21: 7138608.140 ops/s
# Warmup Iteration  22: 6997841.663 ops/s
# Warmup Iteration  23: 7397209.468 ops/s
# Warmup Iteration  24: 6830008.183 ops/s
# Warmup Iteration  25: 7198674.744 ops/s
# Warmup Iteration  26: 7520154.875 ops/s
# Warmup Iteration  27: 7175862.973 ops/s
# Warmup Iteration  28: 7023376.906 ops/s
# Warmup Iteration  29: 7458270.774 ops/s
# Warmup Iteration  30: 6969977.136 ops/s
Iteration   1: 7447060.345 ops/s
Iteration   2: 6956264.590 ops/s
Iteration   3: 7333895.966 ops/s
Iteration   4: 7114077.146 ops/s
Iteration   5: 7204979.086 ops/s
Iteration   6: 7031057.774 ops/s
Iteration   7: 7348582.998 ops/s
Iteration   8: 7111086.662 ops/s
Iteration   9: 7208454.376 ops/s
Iteration  10: 6960270.236 ops/s
Iteration  11: 7372701.305 ops/s
Iteration  12: 7240717.843 ops/s
Iteration  13: 7138706.248 ops/s
Iteration  14: 7536886.639 ops/s
Iteration  15: 7073130.162 ops/s
Iteration  16: 7094493.961 ops/s
Iteration  17: 7598705.185 ops/s
Iteration  18: 7074660.106 ops/s
Iteration  19: 7183365.948 ops/s
Iteration  20: 7428500.879 ops/s
Iteration  21: 7110636.459 ops/s
Iteration  22: 5837842.956 ops/s
Iteration  23: 7059833.572 ops/s
Iteration  24: 7417501.431 ops/s
Iteration  25: 7149025.742 ops/s
Iteration  26: 7279263.611 ops/s
Iteration  27: 7428440.885 ops/s
Iteration  28: 7162169.576 ops/s
Iteration  29: 7164193.825 ops/s
Iteration  30: 7158513.962 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustJust":
  7174167.316 ±(99.9%) 201615.523 ops/s [Average]
  (min, avg, max) = (5837842.956, 7174167.316, 7598705.185), stdev = 301768.646
  CI (99.9%): [6972551.793, 7375782.838] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorJustJust  thrpt   30  7174167.316 ± 201615.523  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapJustJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapJustJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 983706.277 ops/s
# Warmup Iteration   2: 5388197.640 ops/s
# Warmup Iteration   3: 6495411.278 ops/s
# Warmup Iteration   4: 7168144.651 ops/s
# Warmup Iteration   5: 7559921.351 ops/s
# Warmup Iteration   6: 7231828.629 ops/s
# Warmup Iteration   7: 7079286.522 ops/s
# Warmup Iteration   8: 7479140.895 ops/s
# Warmup Iteration   9: 7293606.797 ops/s
# Warmup Iteration  10: 7356975.044 ops/s
# Warmup Iteration  11: 7277630.688 ops/s
# Warmup Iteration  12: 7347524.300 ops/s
# Warmup Iteration  13: 7358113.577 ops/s
# Warmup Iteration  14: 7266884.062 ops/s
# Warmup Iteration  15: 7086910.889 ops/s
# Warmup Iteration  16: 7580217.997 ops/s
# Warmup Iteration  17: 7231895.160 ops/s
# Warmup Iteration  18: 7327964.584 ops/s
# Warmup Iteration  19: 7465262.654 ops/s
# Warmup Iteration  20: 7102008.742 ops/s
# Warmup Iteration  21: 7654725.508 ops/s
# Warmup Iteration  22: 7399227.936 ops/s
# Warmup Iteration  23: 7108815.861 ops/s
# Warmup Iteration  24: 7220411.536 ops/s
# Warmup Iteration  25: 7672178.464 ops/s
# Warmup Iteration  26: 7185626.478 ops/s
# Warmup Iteration  27: 7227602.289 ops/s
# Warmup Iteration  28: 7536191.480 ops/s
# Warmup Iteration  29: 7038343.907 ops/s
# Warmup Iteration  30: 7480445.332 ops/s
Iteration   1: 7292607.463 ops/s
Iteration   2: 7236505.431 ops/s
Iteration   3: 7555990.021 ops/s
Iteration   4: 7166148.627 ops/s
Iteration   5: 7401223.700 ops/s
Iteration   6: 7562510.528 ops/s
Iteration   7: 7177145.644 ops/s
Iteration   8: 7606678.991 ops/s
Iteration   9: 7216826.443 ops/s
Iteration  10: 7184978.656 ops/s
Iteration  11: 7377249.913 ops/s
Iteration  12: 7360484.983 ops/s
Iteration  13: 7315810.381 ops/s
Iteration  14: 7405595.080 ops/s
Iteration  15: 7268734.329 ops/s
Iteration  16: 7257369.139 ops/s
Iteration  17: 7566521.477 ops/s
Iteration  18: 7151106.555 ops/s
Iteration  19: 7418508.120 ops/s
Iteration  20: 7154780.677 ops/s
Iteration  21: 7432523.966 ops/s
Iteration  22: 7473943.700 ops/s
Iteration  23: 7172648.486 ops/s
Iteration  24: 7392191.806 ops/s
Iteration  25: 7312794.227 ops/s
Iteration  26: 7119997.205 ops/s
Iteration  27: 7345264.530 ops/s
Iteration  28: 7003288.958 ops/s
Iteration  29: 7594012.922 ops/s
Iteration  30: 7117102.250 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapJustJust":
  7321351.474 ±(99.9%) 107411.423 ops/s [Average]
  (min, avg, max) = (7003288.958, 7321351.474, 7606678.991), stdev = 160768.374
  CI (99.9%): [7213940.051, 7428762.897] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapJustJust  thrpt   30  7321351.474 ± 107411.423  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 176281.281 ops/s
# Warmup Iteration   2: 958386.564 ops/s
# Warmup Iteration   3: 2064817.730 ops/s
# Warmup Iteration   4: 2265109.921 ops/s
# Warmup Iteration   5: 2387339.308 ops/s
# Warmup Iteration   6: 2292134.545 ops/s
# Warmup Iteration   7: 2383709.815 ops/s
# Warmup Iteration   8: 2341823.918 ops/s
# Warmup Iteration   9: 2063657.094 ops/s
# Warmup Iteration  10: 2343016.250 ops/s
# Warmup Iteration  11: 2348457.026 ops/s
# Warmup Iteration  12: 2369839.523 ops/s
# Warmup Iteration  13: 2295622.859 ops/s
# Warmup Iteration  14: 2345873.970 ops/s
# Warmup Iteration  15: 2236567.689 ops/s
# Warmup Iteration  16: 2298919.604 ops/s
# Warmup Iteration  17: 2360920.130 ops/s
# Warmup Iteration  18: 2401615.074 ops/s
# Warmup Iteration  19: 2284959.342 ops/s
# Warmup Iteration  20: 2340882.885 ops/s
# Warmup Iteration  21: 2310599.541 ops/s
# Warmup Iteration  22: 2369292.342 ops/s
# Warmup Iteration  23: 2350541.986 ops/s
# Warmup Iteration  24: 2421142.289 ops/s
# Warmup Iteration  25: 2274386.090 ops/s
# Warmup Iteration  26: 2391993.069 ops/s
# Warmup Iteration  27: 2295898.005 ops/s
# Warmup Iteration  28: 2375952.782 ops/s
# Warmup Iteration  29: 2336854.795 ops/s
# Warmup Iteration  30: 2309656.865 ops/s
Iteration   1: 2411689.033 ops/s
Iteration   2: 2256792.813 ops/s
Iteration   3: 2424651.363 ops/s
Iteration   4: 2313431.990 ops/s
Iteration   5: 2357724.233 ops/s
Iteration   6: 2395639.645 ops/s
Iteration   7: 2292795.767 ops/s
Iteration   8: 2393281.186 ops/s
Iteration   9: 2280765.807 ops/s
Iteration  10: 2364723.022 ops/s
Iteration  11: 2358664.152 ops/s
Iteration  12: 2316240.299 ops/s
Iteration  13: 2392193.377 ops/s
Iteration  14: 2301564.658 ops/s
Iteration  15: 2311779.348 ops/s
Iteration  16: 1738178.009 ops/s
Iteration  17: 2305649.397 ops/s
Iteration  18: 2408165.037 ops/s
Iteration  19: 2365003.256 ops/s
Iteration  20: 2406131.745 ops/s
Iteration  21: 2243662.026 ops/s
Iteration  22: 2402669.496 ops/s
Iteration  23: 2384599.815 ops/s
Iteration  24: 2279079.035 ops/s
Iteration  25: 2418601.008 ops/s
Iteration  26: 2293123.977 ops/s
Iteration  27: 2352348.859 ops/s
Iteration  28: 2375756.743 ops/s
Iteration  29: 2297909.580 ops/s
Iteration  30: 2420481.299 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_dispose":
  2328776.532 ±(99.9%) 82728.698 ops/s [Average]
  (min, avg, max) = (1738178.009, 2328776.532, 2424651.363), stdev = 123824.431
  CI (99.9%): [2246047.834, 2411505.231] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_dispose  thrpt   30  2328776.532 ± 82728.698  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_disposedFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_disposedFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 598815.631 ops/s
# Warmup Iteration   2: 2866588.253 ops/s
# Warmup Iteration   3: 3299128.988 ops/s
# Warmup Iteration   4: 3993082.585 ops/s
# Warmup Iteration   5: 3768300.060 ops/s
# Warmup Iteration   6: 3802857.510 ops/s
# Warmup Iteration   7: 3879051.631 ops/s
# Warmup Iteration   8: 3858708.756 ops/s
# Warmup Iteration   9: 3975139.484 ops/s
# Warmup Iteration  10: 3802771.781 ops/s
# Warmup Iteration  11: 3886248.251 ops/s
# Warmup Iteration  12: 3913510.647 ops/s
# Warmup Iteration  13: 3739277.877 ops/s
# Warmup Iteration  14: 3915130.183 ops/s
# Warmup Iteration  15: 3837090.033 ops/s
# Warmup Iteration  16: 3822840.865 ops/s
# Warmup Iteration  17: 3795197.071 ops/s
# Warmup Iteration  18: 3861605.650 ops/s
# Warmup Iteration  19: 3884593.983 ops/s
# Warmup Iteration  20: 4193409.117 ops/s
# Warmup Iteration  21: 3951460.635 ops/s
# Warmup Iteration  22: 3861082.567 ops/s
# Warmup Iteration  23: 3950511.653 ops/s
# Warmup Iteration  24: 3825280.910 ops/s
# Warmup Iteration  25: 3824452.199 ops/s
# Warmup Iteration  26: 3965868.709 ops/s
# Warmup Iteration  27: 3759382.397 ops/s
# Warmup Iteration  28: 3914793.033 ops/s
# Warmup Iteration  29: 3816571.871 ops/s
# Warmup Iteration  30: 3968216.843 ops/s
Iteration   1: 3889766.867 ops/s
Iteration   2: 3846376.084 ops/s
Iteration   3: 3911626.021 ops/s
Iteration   4: 3839516.934 ops/s
Iteration   5: 3795283.650 ops/s
Iteration   6: 3868938.756 ops/s
Iteration   7: 3896615.927 ops/s
Iteration   8: 3861563.067 ops/s
Iteration   9: 3883420.677 ops/s
Iteration  10: 3883448.988 ops/s
Iteration  11: 3654069.248 ops/s
Iteration  12: 3936471.368 ops/s
Iteration  13: 3892811.458 ops/s
Iteration  14: 3888119.934 ops/s
Iteration  15: 3922092.083 ops/s
Iteration  16: 3847476.445 ops/s
Iteration  17: 3919788.904 ops/s
Iteration  18: 3975452.758 ops/s
Iteration  19: 3778190.566 ops/s
Iteration  20: 3994056.546 ops/s
Iteration  21: 3833073.333 ops/s
Iteration  22: 3927409.118 ops/s
Iteration  23: 3733570.339 ops/s
Iteration  24: 3831651.687 ops/s
Iteration  25: 3922323.145 ops/s
Iteration  26: 3796406.906 ops/s
Iteration  27: 3930248.161 ops/s
Iteration  28: 3880304.977 ops/s
Iteration  29: 3883106.883 ops/s
Iteration  30: 3928763.162 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_disposedFlowable":
  3871731.466 ±(99.9%) 46921.517 ops/s [Average]
  (min, avg, max) = (3654069.248, 3871731.466, 3994056.546), stdev = 70229.923
  CI (99.9%): [3824809.950, 3918652.983] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_disposedFlowable  thrpt   30  3871731.466 ± 46921.517  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_fusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_fusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1547116.194 ops/s
# Warmup Iteration   2: 3958400.871 ops/s
# Warmup Iteration   3: 4969462.986 ops/s
# Warmup Iteration   4: 5197936.306 ops/s
# Warmup Iteration   5: 5340320.581 ops/s
# Warmup Iteration   6: 5293345.915 ops/s
# Warmup Iteration   7: 5400123.007 ops/s
# Warmup Iteration   8: 5151474.924 ops/s
# Warmup Iteration   9: 5210129.161 ops/s
# Warmup Iteration  10: 5478974.243 ops/s
# Warmup Iteration  11: 5525349.349 ops/s
# Warmup Iteration  12: 5194826.607 ops/s
# Warmup Iteration  13: 5347190.181 ops/s
# Warmup Iteration  14: 5533746.364 ops/s
# Warmup Iteration  15: 5184698.858 ops/s
# Warmup Iteration  16: 5471798.527 ops/s
# Warmup Iteration  17: 5187662.244 ops/s
# Warmup Iteration  18: 5410410.781 ops/s
# Warmup Iteration  19: 5576881.775 ops/s
# Warmup Iteration  20: 5208494.359 ops/s
# Warmup Iteration  21: 5459496.717 ops/s
# Warmup Iteration  22: 5324311.449 ops/s
# Warmup Iteration  23: 5418768.323 ops/s
# Warmup Iteration  24: 5383826.021 ops/s
# Warmup Iteration  25: 5274158.660 ops/s
# Warmup Iteration  26: 5385502.096 ops/s
# Warmup Iteration  27: 5358705.943 ops/s
# Warmup Iteration  28: 5425819.889 ops/s
# Warmup Iteration  29: 5497775.744 ops/s
# Warmup Iteration  30: 5175118.224 ops/s
Iteration   1: 5499665.592 ops/s
Iteration   2: 5474720.897 ops/s
Iteration   3: 5276907.847 ops/s
Iteration   4: 5454679.259 ops/s
Iteration   5: 5094371.586 ops/s
Iteration   6: 5553943.760 ops/s
Iteration   7: 5222871.185 ops/s
Iteration   8: 5286525.296 ops/s
Iteration   9: 5222289.621 ops/s
Iteration  10: 5246482.869 ops/s
Iteration  11: 4522559.509 ops/s
Iteration  12: 5319105.640 ops/s
Iteration  13: 5486582.931 ops/s
Iteration  14: 5182056.897 ops/s
Iteration  15: 5282061.034 ops/s
Iteration  16: 5316266.640 ops/s
Iteration  17: 5244772.354 ops/s
Iteration  18: 5446372.738 ops/s
Iteration  19: 5286068.587 ops/s
Iteration  20: 5327984.297 ops/s
Iteration  21: 5380349.889 ops/s
Iteration  22: 5336597.261 ops/s
Iteration  23: 5461826.692 ops/s
Iteration  24: 5069293.299 ops/s
Iteration  25: 5479165.510 ops/s
Iteration  26: 5179698.433 ops/s
Iteration  27: 5371223.992 ops/s
Iteration  28: 5477699.489 ops/s
Iteration  29: 5294857.454 ops/s
Iteration  30: 5499586.179 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_fusionRejected":
  5309886.224 ±(99.9%) 130331.233 ops/s [Average]
  (min, avg, max) = (4522559.509, 5309886.224, 5553943.760), stdev = 195073.668
  CI (99.9%): [5179554.992, 5440217.457] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_fusionRejected  thrpt   30  5309886.224 ± 130331.233  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableZipTests._Benchmark.benchmark_covarianceOfZip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableZipTests._Benchmark.benchmark_covarianceOfZip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 47603.527 ops/s
# Warmup Iteration   2: 247839.215 ops/s
# Warmup Iteration   3: 351134.606 ops/s
# Warmup Iteration   4: 384166.009 ops/s
# Warmup Iteration   5: 379876.387 ops/s
# Warmup Iteration   6: 373314.797 ops/s
# Warmup Iteration   7: 388821.288 ops/s
# Warmup Iteration   8: 377350.100 ops/s
# Warmup Iteration   9: 366355.479 ops/s
# Warmup Iteration  10: 383112.772 ops/s
# Warmup Iteration  11: 387045.910 ops/s
# Warmup Iteration  12: 370670.158 ops/s
# Warmup Iteration  13: 395408.914 ops/s
# Warmup Iteration  14: 372149.844 ops/s
# Warmup Iteration  15: 390382.990 ops/s
# Warmup Iteration  16: 384617.296 ops/s
# Warmup Iteration  17: 368696.169 ops/s
# Warmup Iteration  18: 382787.678 ops/s
# Warmup Iteration  19: 384999.171 ops/s
# Warmup Iteration  20: 378018.582 ops/s
# Warmup Iteration  21: 390631.089 ops/s
# Warmup Iteration  22: 378271.017 ops/s
# Warmup Iteration  23: 399292.487 ops/s
# Warmup Iteration  24: 367214.989 ops/s
# Warmup Iteration  25: 376820.444 ops/s
# Warmup Iteration  26: 390064.918 ops/s
# Warmup Iteration  27: 375819.682 ops/s
# Warmup Iteration  28: 384951.779 ops/s
# Warmup Iteration  29: 389698.377 ops/s
# Warmup Iteration  30: 384239.357 ops/s
Iteration   1: 397685.976 ops/s
Iteration   2: 389225.495 ops/s
Iteration   3: 372042.260 ops/s
Iteration   4: 381329.054 ops/s
Iteration   5: 387141.023 ops/s
Iteration   6: 362949.004 ops/s
Iteration   7: 391864.317 ops/s
Iteration   8: 374432.269 ops/s
Iteration   9: 371106.113 ops/s
Iteration  10: 392970.063 ops/s
Iteration  11: 373165.160 ops/s
Iteration  12: 386207.112 ops/s
Iteration  13: 388148.723 ops/s
Iteration  14: 375104.213 ops/s
Iteration  15: 393523.472 ops/s
Iteration  16: 387563.601 ops/s
Iteration  17: 371339.091 ops/s
Iteration  18: 394223.936 ops/s
Iteration  19: 377283.786 ops/s
Iteration  20: 393577.449 ops/s
Iteration  21: 372132.326 ops/s
Iteration  22: 395004.453 ops/s
Iteration  23: 373752.634 ops/s
Iteration  24: 393450.669 ops/s
Iteration  25: 384625.580 ops/s
Iteration  26: 384270.332 ops/s
Iteration  27: 398236.063 ops/s
Iteration  28: 368360.275 ops/s
Iteration  29: 392317.931 ops/s
Iteration  30: 371838.293 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableZipTests._Benchmark.benchmark_covarianceOfZip":
  383162.356 ±(99.9%) 6842.249 ops/s [Average]
  (min, avg, max) = (362949.004, 383162.356, 398236.063), stdev = 10241.157
  CI (99.9%): [376320.107, 390004.605] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
FlowableZipTests._Benchmark.benchmark_covarianceOfZip  thrpt   30  383162.356 ± 6842.249  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_flatMapBiMapperWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_flatMapBiMapperWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48804.932 ops/s
# Warmup Iteration   2: 340067.662 ops/s
# Warmup Iteration   3: 451234.660 ops/s
# Warmup Iteration   4: 431554.420 ops/s
# Warmup Iteration   5: 465340.007 ops/s
# Warmup Iteration   6: 476212.181 ops/s
# Warmup Iteration   7: 473689.882 ops/s
# Warmup Iteration   8: 498088.259 ops/s
# Warmup Iteration   9: 490313.105 ops/s
# Warmup Iteration  10: 505476.455 ops/s
# Warmup Iteration  11: 487371.973 ops/s
# Warmup Iteration  12: 499185.341 ops/s
# Warmup Iteration  13: 492287.639 ops/s
# Warmup Iteration  14: 500636.326 ops/s
# Warmup Iteration  15: 511230.880 ops/s
# Warmup Iteration  16: 489556.539 ops/s
# Warmup Iteration  17: 513765.380 ops/s
# Warmup Iteration  18: 517153.428 ops/s
# Warmup Iteration  19: 507107.714 ops/s
# Warmup Iteration  20: 527236.128 ops/s
# Warmup Iteration  21: 510456.567 ops/s
# Warmup Iteration  22: 515862.388 ops/s
# Warmup Iteration  23: 528819.901 ops/s
# Warmup Iteration  24: 493444.589 ops/s
# Warmup Iteration  25: 518676.984 ops/s
# Warmup Iteration  26: 523142.796 ops/s
# Warmup Iteration  27: 505823.288 ops/s
# Warmup Iteration  28: 518746.405 ops/s
# Warmup Iteration  29: 513343.897 ops/s
# Warmup Iteration  30: 527953.928 ops/s
Iteration   1: 523682.926 ops/s
Iteration   2: 504000.358 ops/s
Iteration   3: 538193.949 ops/s
Iteration   4: 506358.244 ops/s
Iteration   5: 459630.832 ops/s
Iteration   6: 499068.101 ops/s
Iteration   7: 506103.770 ops/s
Iteration   8: 530238.985 ops/s
Iteration   9: 511046.617 ops/s
Iteration  10: 531000.997 ops/s
Iteration  11: 508707.693 ops/s
Iteration  12: 513907.993 ops/s
Iteration  13: 538128.772 ops/s
Iteration  14: 529572.562 ops/s
Iteration  15: 510217.895 ops/s
Iteration  16: 511193.940 ops/s
Iteration  17: 526609.449 ops/s
Iteration  18: 498502.875 ops/s
Iteration  19: 523088.688 ops/s
Iteration  20: 525892.281 ops/s
Iteration  21: 496358.205 ops/s
Iteration  22: 522718.201 ops/s
Iteration  23: 503123.418 ops/s
Iteration  24: 532932.920 ops/s
Iteration  25: 504227.041 ops/s
Iteration  26: 528476.961 ops/s
Iteration  27: 505496.206 ops/s
Iteration  28: 512096.753 ops/s
Iteration  29: 506994.102 ops/s
Iteration  30: 493986.058 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_flatMapBiMapperWithError":
  513385.226 ±(99.9%) 10972.388 ops/s [Average]
  (min, avg, max) = (459630.832, 513385.226, 538193.949), stdev = 16422.955
  CI (99.9%): [502412.839, 524357.614] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_flatMapBiMapperWithError  thrpt   30  513385.226 ± 10972.388  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_disposePropagates$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_disposePropagates

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 346515.146 ops/s
# Warmup Iteration   2: 1615910.577 ops/s
# Warmup Iteration   3: 2538335.746 ops/s
# Warmup Iteration   4: 2334280.264 ops/s
# Warmup Iteration   5: 2476141.506 ops/s
# Warmup Iteration   6: 2349709.766 ops/s
# Warmup Iteration   7: 2482279.555 ops/s
# Warmup Iteration   8: 2206581.228 ops/s
# Warmup Iteration   9: 2432583.324 ops/s
# Warmup Iteration  10: 2359395.115 ops/s
# Warmup Iteration  11: 2494634.012 ops/s
# Warmup Iteration  12: 2446558.500 ops/s
# Warmup Iteration  13: 2245838.746 ops/s
# Warmup Iteration  14: 2484813.854 ops/s
# Warmup Iteration  15: 2244082.587 ops/s
# Warmup Iteration  16: 2525503.811 ops/s
# Warmup Iteration  17: 2395430.284 ops/s
# Warmup Iteration  18: 2402854.840 ops/s
# Warmup Iteration  19: 2437133.051 ops/s
# Warmup Iteration  20: 2426235.518 ops/s
# Warmup Iteration  21: 2517735.542 ops/s
# Warmup Iteration  22: 2367447.130 ops/s
# Warmup Iteration  23: 2510531.403 ops/s
# Warmup Iteration  24: 2406600.185 ops/s
# Warmup Iteration  25: 2430601.381 ops/s
# Warmup Iteration  26: 2476348.986 ops/s
# Warmup Iteration  27: 2409516.163 ops/s
# Warmup Iteration  28: 2539076.461 ops/s
# Warmup Iteration  29: 2378020.700 ops/s
# Warmup Iteration  30: 2446220.988 ops/s
Iteration   1: 2495690.680 ops/s
Iteration   2: 2409603.549 ops/s
Iteration   3: 2483740.522 ops/s
Iteration   4: 2424747.341 ops/s
Iteration   5: 2374012.012 ops/s
Iteration   6: 2508199.383 ops/s
Iteration   7: 2432328.847 ops/s
Iteration   8: 2355722.572 ops/s
Iteration   9: 2526916.902 ops/s
Iteration  10: 2371571.164 ops/s
Iteration  11: 2535427.351 ops/s
Iteration  12: 2415005.165 ops/s
Iteration  13: 2456710.325 ops/s
Iteration  14: 2392222.299 ops/s
Iteration  15: 2360715.001 ops/s
Iteration  16: 2498517.023 ops/s
Iteration  17: 2433106.865 ops/s
Iteration  18: 2435639.616 ops/s
Iteration  19: 2466790.420 ops/s
Iteration  20: 2442147.708 ops/s
Iteration  21: 2448229.777 ops/s
Iteration  22: 2425671.363 ops/s
Iteration  23: 2510440.104 ops/s
Iteration  24: 2409251.636 ops/s
Iteration  25: 2419438.962 ops/s
Iteration  26: 2553251.582 ops/s
Iteration  27: 2364896.445 ops/s
Iteration  28: 2440231.806 ops/s
Iteration  29: 2484185.426 ops/s
Iteration  30: 2430262.389 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_disposePropagates":
  2443489.141 ±(99.9%) 35983.097 ops/s [Average]
  (min, avg, max) = (2355722.572, 2443489.141, 2553251.582), stdev = 53857.810
  CI (99.9%): [2407506.044, 2479472.238] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_disposePropagates  thrpt   30  2443489.141 ± 35983.097  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_withMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_withMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 77675.486 ops/s
# Warmup Iteration   2: 155253.324 ops/s
# Warmup Iteration   3: 514393.859 ops/s
# Warmup Iteration   4: 534129.430 ops/s
# Warmup Iteration   5: 574802.682 ops/s
# Warmup Iteration   6: 543724.223 ops/s
# Warmup Iteration   7: 577656.562 ops/s
# Warmup Iteration   8: 584629.307 ops/s
# Warmup Iteration   9: 557778.803 ops/s
# Warmup Iteration  10: 593264.399 ops/s
# Warmup Iteration  11: 570250.004 ops/s
# Warmup Iteration  12: 589520.878 ops/s
# Warmup Iteration  13: 577191.017 ops/s
# Warmup Iteration  14: 593170.783 ops/s
# Warmup Iteration  15: 584294.736 ops/s
# Warmup Iteration  16: 580764.782 ops/s
# Warmup Iteration  17: 608008.119 ops/s
# Warmup Iteration  18: 603695.574 ops/s
# Warmup Iteration  19: 623128.338 ops/s
# Warmup Iteration  20: 586392.850 ops/s
# Warmup Iteration  21: 604687.669 ops/s
# Warmup Iteration  22: 600748.703 ops/s
# Warmup Iteration  23: 602401.892 ops/s
# Warmup Iteration  24: 608482.965 ops/s
# Warmup Iteration  25: 594547.294 ops/s
# Warmup Iteration  26: 614033.556 ops/s
# Warmup Iteration  27: 597402.560 ops/s
# Warmup Iteration  28: 611386.647 ops/s
# Warmup Iteration  29: 614613.018 ops/s
# Warmup Iteration  30: 418345.743 ops/s
Iteration   1: 611296.529 ops/s
Iteration   2: 613099.623 ops/s
Iteration   3: 627076.896 ops/s
Iteration   4: 607016.229 ops/s
Iteration   5: 600504.505 ops/s
Iteration   6: 610642.723 ops/s
Iteration   7: 622985.278 ops/s
Iteration   8: 630771.228 ops/s
Iteration   9: 604533.969 ops/s
Iteration  10: 620762.650 ops/s
Iteration  11: 612690.653 ops/s
Iteration  12: 606673.505 ops/s
Iteration  13: 637317.630 ops/s
Iteration  14: 599667.747 ops/s
Iteration  15: 596611.394 ops/s
Iteration  16: 639038.010 ops/s
Iteration  17: 612044.738 ops/s
Iteration  18: 622638.607 ops/s
Iteration  19: 589829.058 ops/s
Iteration  20: 640490.577 ops/s
Iteration  21: 593136.312 ops/s
Iteration  22: 608437.482 ops/s
Iteration  23: 617646.185 ops/s
Iteration  24: 600836.041 ops/s
Iteration  25: 630863.633 ops/s
Iteration  26: 601785.119 ops/s
Iteration  27: 627372.558 ops/s
Iteration  28: 602623.621 ops/s
Iteration  29: 610485.975 ops/s
Iteration  30: 615665.105 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_withMainError":
  613818.119 ±(99.9%) 9138.533 ops/s [Average]
  (min, avg, max) = (589829.058, 613818.119, 640490.577), stdev = 13678.126
  CI (99.9%): [604679.587, 622956.652] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_withMainError  thrpt   30  613818.119 ± 9138.533  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_bufferSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_bufferSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 198621.004 ops/s
# Warmup Iteration   2: 397532.688 ops/s
# Warmup Iteration   3: 444354.937 ops/s
# Warmup Iteration   4: 446278.982 ops/s
# Warmup Iteration   5: 409698.212 ops/s
# Warmup Iteration   6: 472570.402 ops/s
# Warmup Iteration   7: 483243.485 ops/s
# Warmup Iteration   8: 475785.343 ops/s
# Warmup Iteration   9: 473744.110 ops/s
# Warmup Iteration  10: 479398.123 ops/s
# Warmup Iteration  11: 467862.630 ops/s
# Warmup Iteration  12: 482253.324 ops/s
# Warmup Iteration  13: 465355.821 ops/s
# Warmup Iteration  14: 497880.167 ops/s
# Warmup Iteration  15: 471260.909 ops/s
# Warmup Iteration  16: 475506.870 ops/s
# Warmup Iteration  17: 496802.227 ops/s
# Warmup Iteration  18: 500533.885 ops/s
# Warmup Iteration  19: 489651.208 ops/s
# Warmup Iteration  20: 502724.641 ops/s
# Warmup Iteration  21: 499339.780 ops/s
# Warmup Iteration  22: 476204.639 ops/s
# Warmup Iteration  23: 518768.928 ops/s
# Warmup Iteration  24: 483789.069 ops/s
# Warmup Iteration  25: 478361.591 ops/s
# Warmup Iteration  26: 512268.043 ops/s
# Warmup Iteration  27: 499173.777 ops/s
# Warmup Iteration  28: 490673.162 ops/s
# Warmup Iteration  29: 504435.127 ops/s
# Warmup Iteration  30: 506877.320 ops/s
Iteration   1: 483913.899 ops/s
Iteration   2: 510858.983 ops/s
Iteration   3: 477157.538 ops/s
Iteration   4: 489824.282 ops/s
Iteration   5: 510569.361 ops/s
Iteration   6: 494689.079 ops/s
Iteration   7: 478012.728 ops/s
Iteration   8: 518913.100 ops/s
Iteration   9: 481493.429 ops/s
Iteration  10: 495514.874 ops/s
Iteration  11: 510451.456 ops/s
Iteration  12: 490482.955 ops/s
Iteration  13: 479652.858 ops/s
Iteration  14: 494437.674 ops/s
Iteration  15: 486177.089 ops/s
Iteration  16: 485567.409 ops/s
Iteration  17: 509635.249 ops/s
Iteration  18: 493845.073 ops/s
Iteration  19: 510543.949 ops/s
Iteration  20: 485999.221 ops/s
Iteration  21: 517032.440 ops/s
Iteration  22: 484814.796 ops/s
Iteration  23: 491676.110 ops/s
Iteration  24: 503451.880 ops/s
Iteration  25: 492311.138 ops/s
Iteration  26: 517854.584 ops/s
Iteration  27: 472597.013 ops/s
Iteration  28: 491489.587 ops/s
Iteration  29: 498538.457 ops/s
Iteration  30: 495467.523 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_bufferSupplierReturnsNull":
  495099.125 ±(99.9%) 8713.771 ops/s [Average]
  (min, avg, max) = (472597.013, 495099.125, 518913.100), stdev = 13042.363
  CI (99.9%): [486385.354, 503812.895] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_bufferSupplierReturnsNull  thrpt   30  495099.125 ± 8713.771  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18591.956 ops/s
# Warmup Iteration   2: 109361.677 ops/s
# Warmup Iteration   3: 162244.511 ops/s
# Warmup Iteration   4: 173126.358 ops/s
# Warmup Iteration   5: 179210.845 ops/s
# Warmup Iteration   6: 176108.291 ops/s
# Warmup Iteration   7: 167021.512 ops/s
# Warmup Iteration   8: 171518.916 ops/s
# Warmup Iteration   9: 176834.469 ops/s
# Warmup Iteration  10: 179576.917 ops/s
# Warmup Iteration  11: 173521.707 ops/s
# Warmup Iteration  12: 178152.941 ops/s
# Warmup Iteration  13: 181900.400 ops/s
# Warmup Iteration  14: 173486.993 ops/s
# Warmup Iteration  15: 182852.105 ops/s
# Warmup Iteration  16: 175202.249 ops/s
# Warmup Iteration  17: 190960.881 ops/s
# Warmup Iteration  18: 192577.212 ops/s
# Warmup Iteration  19: 189795.783 ops/s
# Warmup Iteration  20: 197021.883 ops/s
# Warmup Iteration  21: 186339.194 ops/s
# Warmup Iteration  22: 190288.752 ops/s
# Warmup Iteration  23: 188194.361 ops/s
# Warmup Iteration  24: 153808.692 ops/s
# Warmup Iteration  25: 184670.480 ops/s
# Warmup Iteration  26: 191725.642 ops/s
# Warmup Iteration  27: 192727.501 ops/s
# Warmup Iteration  28: 191478.240 ops/s
# Warmup Iteration  29: 190562.200 ops/s
# Warmup Iteration  30: 194359.525 ops/s
Iteration   1: 187983.845 ops/s
Iteration   2: 197123.139 ops/s
Iteration   3: 186378.556 ops/s
Iteration   4: 187846.623 ops/s
Iteration   5: 189584.626 ops/s
Iteration   6: 189172.121 ops/s
Iteration   7: 191627.398 ops/s
Iteration   8: 191200.884 ops/s
Iteration   9: 192132.209 ops/s
Iteration  10: 186674.116 ops/s
Iteration  11: 193895.274 ops/s
Iteration  12: 197388.432 ops/s
Iteration  13: 187290.514 ops/s
Iteration  14: 190023.995 ops/s
Iteration  15: 194639.051 ops/s
Iteration  16: 188521.463 ops/s
Iteration  17: 196820.776 ops/s
Iteration  18: 190141.952 ops/s
Iteration  19: 196246.264 ops/s
Iteration  20: 191530.933 ops/s
Iteration  21: 194998.577 ops/s
Iteration  22: 192888.859 ops/s
Iteration  23: 190438.871 ops/s
Iteration  24: 195249.433 ops/s
Iteration  25: 187267.743 ops/s
Iteration  26: 189194.440 ops/s
Iteration  27: 199275.482 ops/s
Iteration  28: 196792.164 ops/s
Iteration  29: 189184.307 ops/s
Iteration  30: 199333.441 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel":
  192028.183 ±(99.9%) 2624.684 ops/s [Average]
  (min, avg, max) = (186378.556, 192028.183, 199333.441), stdev = 3928.504
  CI (99.9%): [189403.499, 194652.867] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  192028.183 ± 2624.684  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_groupByValueReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_groupByValueReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60348.570 ops/s
# Warmup Iteration   2: 340233.250 ops/s
# Warmup Iteration   3: 394011.807 ops/s
# Warmup Iteration   4: 361513.598 ops/s
# Warmup Iteration   5: 434076.669 ops/s
# Warmup Iteration   6: 419069.801 ops/s
# Warmup Iteration   7: 420786.716 ops/s
# Warmup Iteration   8: 436215.044 ops/s
# Warmup Iteration   9: 432460.446 ops/s
# Warmup Iteration  10: 409779.486 ops/s
# Warmup Iteration  11: 437396.350 ops/s
# Warmup Iteration  12: 431675.875 ops/s
# Warmup Iteration  13: 422123.463 ops/s
# Warmup Iteration  14: 440210.348 ops/s
# Warmup Iteration  15: 417793.265 ops/s
# Warmup Iteration  16: 421927.839 ops/s
# Warmup Iteration  17: 451649.158 ops/s
# Warmup Iteration  18: 438499.704 ops/s
# Warmup Iteration  19: 451601.727 ops/s
# Warmup Iteration  20: 463886.915 ops/s
# Warmup Iteration  21: 434242.734 ops/s
# Warmup Iteration  22: 450712.972 ops/s
# Warmup Iteration  23: 432310.981 ops/s
# Warmup Iteration  24: 441556.767 ops/s
# Warmup Iteration  25: 455539.664 ops/s
# Warmup Iteration  26: 435511.512 ops/s
# Warmup Iteration  27: 437417.787 ops/s
# Warmup Iteration  28: 464278.577 ops/s
# Warmup Iteration  29: 437918.082 ops/s
# Warmup Iteration  30: 446417.587 ops/s
Iteration   1: 442938.745 ops/s
Iteration   2: 453754.031 ops/s
Iteration   3: 446126.588 ops/s
Iteration   4: 443263.116 ops/s
Iteration   5: 446241.871 ops/s
Iteration   6: 437193.255 ops/s
Iteration   7: 449871.198 ops/s
Iteration   8: 454131.495 ops/s
Iteration   9: 434074.181 ops/s
Iteration  10: 458948.209 ops/s
Iteration  11: 454257.018 ops/s
Iteration  12: 436508.975 ops/s
Iteration  13: 448653.018 ops/s
Iteration  14: 435299.506 ops/s
Iteration  15: 446303.330 ops/s
Iteration  16: 437329.232 ops/s
Iteration  17: 438297.143 ops/s
Iteration  18: 444704.261 ops/s
Iteration  19: 434561.622 ops/s
Iteration  20: 455055.111 ops/s
Iteration  21: 439623.499 ops/s
Iteration  22: 448759.585 ops/s
Iteration  23: 435907.525 ops/s
Iteration  24: 441101.396 ops/s
Iteration  25: 459942.092 ops/s
Iteration  26: 432652.422 ops/s
Iteration  27: 451230.572 ops/s
Iteration  28: 442135.094 ops/s
Iteration  29: 455214.186 ops/s
Iteration  30: 437455.600 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_groupByValueReturnsNull":
  444717.796 ±(99.9%) 5368.002 ops/s [Average]
  (min, avg, max) = (432652.422, 444717.796, 459942.092), stdev = 8034.573
  CI (99.9%): [439349.794, 450085.798] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_groupByValueReturnsNull  thrpt   30  444717.796 ± 5368.002  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSourceDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSourceDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 250725.224 ops/s
# Warmup Iteration   2: 1903695.040 ops/s
# Warmup Iteration   3: 2245012.305 ops/s
# Warmup Iteration   4: 2648006.705 ops/s
# Warmup Iteration   5: 2681884.474 ops/s
# Warmup Iteration   6: 2578548.707 ops/s
# Warmup Iteration   7: 2730849.053 ops/s
# Warmup Iteration   8: 2665821.920 ops/s
# Warmup Iteration   9: 2590814.665 ops/s
# Warmup Iteration  10: 2717113.090 ops/s
# Warmup Iteration  11: 2653929.266 ops/s
# Warmup Iteration  12: 2674597.584 ops/s
# Warmup Iteration  13: 2713552.264 ops/s
# Warmup Iteration  14: 2623186.073 ops/s
# Warmup Iteration  15: 2790627.850 ops/s
# Warmup Iteration  16: 2676949.026 ops/s
# Warmup Iteration  17: 2609463.447 ops/s
# Warmup Iteration  18: 2786403.946 ops/s
# Warmup Iteration  19: 2212007.949 ops/s
# Warmup Iteration  20: 2627416.364 ops/s
# Warmup Iteration  21: 2650056.484 ops/s
# Warmup Iteration  22: 2601070.875 ops/s
# Warmup Iteration  23: 2625733.945 ops/s
# Warmup Iteration  24: 2703602.808 ops/s
# Warmup Iteration  25: 2583785.852 ops/s
# Warmup Iteration  26: 2669197.421 ops/s
# Warmup Iteration  27: 2743307.207 ops/s
# Warmup Iteration  28: 2551140.900 ops/s
# Warmup Iteration  29: 2768459.978 ops/s
# Warmup Iteration  30: 2705903.476 ops/s
Iteration   1: 2593492.710 ops/s
Iteration   2: 2715737.114 ops/s
Iteration   3: 2596390.097 ops/s
Iteration   4: 2673433.549 ops/s
Iteration   5: 2750019.681 ops/s
Iteration   6: 2610384.946 ops/s
Iteration   7: 2696556.468 ops/s
Iteration   8: 2652808.226 ops/s
Iteration   9: 2661977.809 ops/s
Iteration  10: 2636332.081 ops/s
Iteration  11: 2622709.667 ops/s
Iteration  12: 2790435.838 ops/s
Iteration  13: 2550945.764 ops/s
Iteration  14: 2690416.039 ops/s
Iteration  15: 2711844.315 ops/s
Iteration  16: 2610470.364 ops/s
Iteration  17: 2708358.281 ops/s
Iteration  18: 2663277.595 ops/s
Iteration  19: 2604925.860 ops/s
Iteration  20: 2741123.494 ops/s
Iteration  21: 2641722.374 ops/s
Iteration  22: 2690599.670 ops/s
Iteration  23: 2715541.698 ops/s
Iteration  24: 2606876.633 ops/s
Iteration  25: 2822973.436 ops/s
Iteration  26: 2643192.983 ops/s
Iteration  27: 2700174.726 ops/s
Iteration  28: 2653598.361 ops/s
Iteration  29: 2635921.350 ops/s
Iteration  30: 2595732.602 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSourceDelayError":
  2666265.791 ±(99.9%) 41484.613 ops/s [Average]
  (min, avg, max) = (2550945.764, 2666265.791, 2822973.436), stdev = 62092.220
  CI (99.9%): [2624781.178, 2707750.404] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSourceDelayError  thrpt   30  2666265.791 ± 41484.613  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22359.734 ops/s
# Warmup Iteration   2: 120384.448 ops/s
# Warmup Iteration   3: 147907.079 ops/s
# Warmup Iteration   4: 165385.819 ops/s
# Warmup Iteration   5: 164888.734 ops/s
# Warmup Iteration   6: 173061.077 ops/s
# Warmup Iteration   7: 180371.358 ops/s
# Warmup Iteration   8: 181988.079 ops/s
# Warmup Iteration   9: 175741.674 ops/s
# Warmup Iteration  10: 176050.710 ops/s
# Warmup Iteration  11: 178443.516 ops/s
# Warmup Iteration  12: 184792.507 ops/s
# Warmup Iteration  13: 182119.587 ops/s
# Warmup Iteration  14: 169956.035 ops/s
# Warmup Iteration  15: 183157.954 ops/s
# Warmup Iteration  16: 172530.461 ops/s
# Warmup Iteration  17: 193762.277 ops/s
# Warmup Iteration  18: 188629.781 ops/s
# Warmup Iteration  19: 185899.859 ops/s
# Warmup Iteration  20: 192052.315 ops/s
# Warmup Iteration  21: 182412.189 ops/s
# Warmup Iteration  22: 198110.579 ops/s
# Warmup Iteration  23: 182426.105 ops/s
# Warmup Iteration  24: 192220.812 ops/s
# Warmup Iteration  25: 191805.500 ops/s
# Warmup Iteration  26: 189852.323 ops/s
# Warmup Iteration  27: 198178.721 ops/s
# Warmup Iteration  28: 188253.865 ops/s
# Warmup Iteration  29: 190959.654 ops/s
# Warmup Iteration  30: 191724.149 ops/s
Iteration   1: 188076.301 ops/s
Iteration   2: 198309.399 ops/s
Iteration   3: 191387.728 ops/s
Iteration   4: 189382.667 ops/s
Iteration   5: 195421.175 ops/s
Iteration   6: 190527.819 ops/s
Iteration   7: 194260.764 ops/s
Iteration   8: 189173.352 ops/s
Iteration   9: 191867.856 ops/s
Iteration  10: 188478.986 ops/s
Iteration  11: 189421.479 ops/s
Iteration  12: 197738.624 ops/s
Iteration  13: 182834.264 ops/s
Iteration  14: 193391.965 ops/s
Iteration  15: 194786.605 ops/s
Iteration  16: 185043.674 ops/s
Iteration  17: 188100.521 ops/s
Iteration  18: 194284.959 ops/s
Iteration  19: 190233.650 ops/s
Iteration  20: 195968.722 ops/s
Iteration  21: 189440.602 ops/s
Iteration  22: 190057.596 ops/s
Iteration  23: 201570.886 ops/s
Iteration  24: 185795.075 ops/s
Iteration  25: 192606.795 ops/s
Iteration  26: 191378.505 ops/s
Iteration  27: 200232.706 ops/s
Iteration  28: 192170.452 ops/s
Iteration  29: 185800.496 ops/s
Iteration  30: 193091.183 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd":
  191694.494 ±(99.9%) 2958.411 ops/s [Average]
  (min, avg, max) = (182834.264, 191694.494, 201570.886), stdev = 4428.011
  CI (99.9%): [188736.083, 194652.905] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd  thrpt   30  191694.494 ± 2958.411  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_nonFusedMoreWorkBeforeTermination$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_nonFusedMoreWorkBeforeTermination

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 67402.504 ops/s
# Warmup Iteration   2: 272942.341 ops/s
# Warmup Iteration   3: 679997.948 ops/s
# Warmup Iteration   4: 927049.950 ops/s
# Warmup Iteration   5: 1230997.402 ops/s
# Warmup Iteration   6: 1147254.351 ops/s
# Warmup Iteration   7: 1184438.402 ops/s
# Warmup Iteration   8: 1197179.113 ops/s
# Warmup Iteration   9: 1160739.603 ops/s
# Warmup Iteration  10: 1165042.508 ops/s
# Warmup Iteration  11: 1194179.755 ops/s
# Warmup Iteration  12: 1144294.413 ops/s
# Warmup Iteration  13: 951444.010 ops/s
# Warmup Iteration  14: 1185648.858 ops/s
# Warmup Iteration  15: 1156381.287 ops/s
# Warmup Iteration  16: 1200479.801 ops/s
# Warmup Iteration  17: 1216570.196 ops/s
# Warmup Iteration  18: 1141370.353 ops/s
# Warmup Iteration  19: 1176614.865 ops/s
# Warmup Iteration  20: 1180936.281 ops/s
# Warmup Iteration  21: 1157057.776 ops/s
# Warmup Iteration  22: 1168628.369 ops/s
# Warmup Iteration  23: 1175886.086 ops/s
# Warmup Iteration  24: 1206356.114 ops/s
# Warmup Iteration  25: 1202024.548 ops/s
# Warmup Iteration  26: 1169017.877 ops/s
# Warmup Iteration  27: 1158148.577 ops/s
# Warmup Iteration  28: 1228197.227 ops/s
# Warmup Iteration  29: 1148344.244 ops/s
# Warmup Iteration  30: 1210862.690 ops/s
Iteration   1: 1206660.108 ops/s
Iteration   2: 1165116.838 ops/s
Iteration   3: 1235717.586 ops/s
Iteration   4: 1180934.142 ops/s
Iteration   5: 1138714.239 ops/s
Iteration   6: 1210137.012 ops/s
Iteration   7: 1155791.955 ops/s
Iteration   8: 1205032.912 ops/s
Iteration   9: 1130133.922 ops/s
Iteration  10: 1184040.550 ops/s
Iteration  11: 1169733.403 ops/s
Iteration  12: 1197762.111 ops/s
Iteration  13: 1190576.990 ops/s
Iteration  14: 1159802.519 ops/s
Iteration  15: 1169947.272 ops/s
Iteration  16: 1211133.678 ops/s
Iteration  17: 1142038.425 ops/s
Iteration  18: 1204611.366 ops/s
Iteration  19: 1153101.331 ops/s
Iteration  20: 1200994.970 ops/s
Iteration  21: 1205903.494 ops/s
Iteration  22: 1138803.451 ops/s
Iteration  23: 1175367.382 ops/s
Iteration  24: 1181128.848 ops/s
Iteration  25: 1190442.354 ops/s
Iteration  26: 1217664.468 ops/s
Iteration  27: 1162770.425 ops/s
Iteration  28: 1199433.955 ops/s
Iteration  29: 1170093.638 ops/s
Iteration  30: 1175605.532 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_nonFusedMoreWorkBeforeTermination":
  1180973.163 ±(99.9%) 17663.662 ops/s [Average]
  (min, avg, max) = (1130133.922, 1180973.163, 1235717.586), stdev = 26438.139
  CI (99.9%): [1163309.501, 1198636.824] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_nonFusedMoreWorkBeforeTermination  thrpt   30  1180973.163 ± 17663.662  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 125610.432 ops/s
# Warmup Iteration   2: 460607.777 ops/s
# Warmup Iteration   3: 480956.502 ops/s
# Warmup Iteration   4: 466166.027 ops/s
# Warmup Iteration   5: 494230.018 ops/s
# Warmup Iteration   6: 520353.281 ops/s
# Warmup Iteration   7: 479389.471 ops/s
# Warmup Iteration   8: 523634.871 ops/s
# Warmup Iteration   9: 542676.742 ops/s
# Warmup Iteration  10: 549628.057 ops/s
# Warmup Iteration  11: 510189.560 ops/s
# Warmup Iteration  12: 541860.341 ops/s
# Warmup Iteration  13: 526399.206 ops/s
# Warmup Iteration  14: 520658.650 ops/s
# Warmup Iteration  15: 550652.567 ops/s
# Warmup Iteration  16: 511093.847 ops/s
# Warmup Iteration  17: 561823.354 ops/s
# Warmup Iteration  18: 541506.816 ops/s
# Warmup Iteration  19: 563708.635 ops/s
# Warmup Iteration  20: 550332.704 ops/s
# Warmup Iteration  21: 544150.104 ops/s
# Warmup Iteration  22: 567515.420 ops/s
# Warmup Iteration  23: 538920.079 ops/s
# Warmup Iteration  24: 552450.094 ops/s
# Warmup Iteration  25: 559120.775 ops/s
# Warmup Iteration  26: 544153.893 ops/s
# Warmup Iteration  27: 547551.882 ops/s
# Warmup Iteration  28: 571770.727 ops/s
# Warmup Iteration  29: 532315.196 ops/s
# Warmup Iteration  30: 560563.942 ops/s
Iteration   1: 531798.047 ops/s
Iteration   2: 572563.749 ops/s
Iteration   3: 549019.964 ops/s
Iteration   4: 545561.708 ops/s
Iteration   5: 560069.620 ops/s
Iteration   6: 549870.585 ops/s
Iteration   7: 564703.784 ops/s
Iteration   8: 543705.564 ops/s
Iteration   9: 559954.860 ops/s
Iteration  10: 548576.478 ops/s
Iteration  11: 559952.814 ops/s
Iteration  12: 550558.399 ops/s
Iteration  13: 551006.093 ops/s
Iteration  14: 555667.488 ops/s
Iteration  15: 532774.813 ops/s
Iteration  16: 554446.770 ops/s
Iteration  17: 566963.228 ops/s
Iteration  18: 527144.298 ops/s
Iteration  19: 573947.516 ops/s
Iteration  20: 552527.129 ops/s
Iteration  21: 570533.964 ops/s
Iteration  22: 550686.181 ops/s
Iteration  23: 549197.283 ops/s
Iteration  24: 565529.088 ops/s
Iteration  25: 539874.425 ops/s
Iteration  26: 567736.623 ops/s
Iteration  27: 547508.353 ops/s
Iteration  28: 528845.610 ops/s
Iteration  29: 555442.787 ops/s
Iteration  30: 550549.224 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDropTest._Benchmark.benchmark_doubleOnSubscribe":
  552557.215 ±(99.9%) 8347.429 ops/s [Average]
  (min, avg, max) = (527144.298, 552557.215, 573947.516), stdev = 12494.040
  CI (99.9%): [544209.786, 560904.644] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableOnBackpressureDropTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  552557.215 ± 8347.429  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastTimedEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastTimedEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.655 ops/s
# Warmup Iteration   2: 5987.557 ops/s
# Warmup Iteration   3: 25073.787 ops/s
# Warmup Iteration   4: 42729.823 ops/s
# Warmup Iteration   5: 40868.698 ops/s
# Warmup Iteration   6: 48938.602 ops/s
# Warmup Iteration   7: 85186.813 ops/s
# Warmup Iteration   8: 98418.001 ops/s
# Warmup Iteration   9: 132481.285 ops/s
# Warmup Iteration  10: 102315.715 ops/s
# Warmup Iteration  11: 109775.948 ops/s
# Warmup Iteration  12: 124607.568 ops/s
# Warmup Iteration  13: 100680.634 ops/s
# Warmup Iteration  14: 121716.345 ops/s
# Warmup Iteration  15: 109578.328 ops/s
# Warmup Iteration  16: 110963.328 ops/s
# Warmup Iteration  17: 114339.714 ops/s
# Warmup Iteration  18: 122182.252 ops/s
# Warmup Iteration  19: 114908.718 ops/s
# Warmup Iteration  20: 109035.880 ops/s
# Warmup Iteration  21: 103128.250 ops/s
# Warmup Iteration  22: 115646.566 ops/s
# Warmup Iteration  23: 112885.645 ops/s
# Warmup Iteration  24: 127800.251 ops/s
# Warmup Iteration  25: 115824.992 ops/s
# Warmup Iteration  26: 122082.416 ops/s
# Warmup Iteration  27: 122685.706 ops/s
# Warmup Iteration  28: 108840.012 ops/s
# Warmup Iteration  29: 105970.842 ops/s
# Warmup Iteration  30: 116200.133 ops/s
Iteration   1: 122680.943 ops/s
Iteration   2: 102290.350 ops/s
Iteration   3: 126487.739 ops/s
Iteration   4: 110931.793 ops/s
Iteration   5: 121443.760 ops/s
Iteration   6: 121069.999 ops/s
Iteration   7: 107597.518 ops/s
Iteration   8: 107582.411 ops/s
Iteration   9: 92414.981 ops/s
Iteration  10: 114954.112 ops/s
Iteration  11: 121762.436 ops/s
Iteration  12: 121036.864 ops/s
Iteration  13: 114159.456 ops/s
Iteration  14: 118443.414 ops/s
Iteration  15: 103296.233 ops/s
Iteration  16: 122125.030 ops/s
Iteration  17: 112953.467 ops/s
Iteration  18: 113607.584 ops/s
Iteration  19: 117069.916 ops/s
Iteration  20: 110605.895 ops/s
Iteration  21: 111550.168 ops/s
Iteration  22: 117539.582 ops/s
Iteration  23: 117189.199 ops/s
Iteration  24: 119185.759 ops/s
Iteration  25: 107559.829 ops/s
Iteration  26: 128759.760 ops/s
Iteration  27: 123789.737 ops/s
Iteration  28: 117719.699 ops/s
Iteration  29: 113320.412 ops/s
Iteration  30: 126129.140 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastTimedEmpty":
  115508.573 ±(99.9%) 5362.798 ops/s [Average]
  (min, avg, max) = (92414.981, 115508.573, 128759.760), stdev = 8026.784
  CI (99.9%): [110145.775, 120871.371] (assumes normal distribution)


# Run complete. Total time: 00:01:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableSampleTest._Benchmark.benchmark_emitLastTimedEmpty  thrpt   30  115508.573 ± 5362.798  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_replayTimeBoundedSelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_replayTimeBoundedSelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 208072.603 ops/s
# Warmup Iteration   2: 579763.054 ops/s
# Warmup Iteration   3: 626556.711 ops/s
# Warmup Iteration   4: 627238.790 ops/s
# Warmup Iteration   5: 661906.811 ops/s
# Warmup Iteration   6: 628988.062 ops/s
# Warmup Iteration   7: 639101.346 ops/s
# Warmup Iteration   8: 659230.701 ops/s
# Warmup Iteration   9: 632554.654 ops/s
# Warmup Iteration  10: 664218.521 ops/s
# Warmup Iteration  11: 637621.996 ops/s
# Warmup Iteration  12: 600458.419 ops/s
# Warmup Iteration  13: 657428.487 ops/s
# Warmup Iteration  14: 653245.266 ops/s
# Warmup Iteration  15: 648194.058 ops/s
# Warmup Iteration  16: 649800.868 ops/s
# Warmup Iteration  17: 705806.359 ops/s
# Warmup Iteration  18: 663945.994 ops/s
# Warmup Iteration  19: 693463.133 ops/s
# Warmup Iteration  20: 670672.080 ops/s
# Warmup Iteration  21: 691681.625 ops/s
# Warmup Iteration  22: 678758.719 ops/s
# Warmup Iteration  23: 688606.107 ops/s
# Warmup Iteration  24: 658299.222 ops/s
# Warmup Iteration  25: 721303.486 ops/s
# Warmup Iteration  26: 634873.180 ops/s
# Warmup Iteration  27: 691192.021 ops/s
# Warmup Iteration  28: 649773.052 ops/s
# Warmup Iteration  29: 677372.122 ops/s
# Warmup Iteration  30: 687034.943 ops/s
Iteration   1: 694787.110 ops/s
Iteration   2: 684102.861 ops/s
Iteration   3: 690104.273 ops/s
Iteration   4: 686327.226 ops/s
Iteration   5: 697342.206 ops/s
Iteration   6: 676193.438 ops/s
Iteration   7: 710404.692 ops/s
Iteration   8: 673517.180 ops/s
Iteration   9: 681584.200 ops/s
Iteration  10: 702852.717 ops/s
Iteration  11: 676822.946 ops/s
Iteration  12: 699337.020 ops/s
Iteration  13: 669479.957 ops/s
Iteration  14: 683404.167 ops/s
Iteration  15: 680663.420 ops/s
Iteration  16: 707382.294 ops/s
Iteration  17: 670980.835 ops/s
Iteration  18: 692037.462 ops/s
Iteration  19: 678857.713 ops/s
Iteration  20: 695580.934 ops/s
Iteration  21: 674184.062 ops/s
Iteration  22: 687999.047 ops/s
Iteration  23: 676384.137 ops/s
Iteration  24: 693827.536 ops/s
Iteration  25: 693580.384 ops/s
Iteration  26: 669877.380 ops/s
Iteration  27: 707871.670 ops/s
Iteration  28: 713367.112 ops/s
Iteration  29: 672324.660 ops/s
Iteration  30: 702315.281 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_replayTimeBoundedSelectorReturnsNull":
  688116.464 ±(99.9%) 8746.974 ops/s [Average]
  (min, avg, max) = (669479.957, 688116.464, 713367.112), stdev = 13092.060
  CI (99.9%): [679369.490, 696863.438] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_replayTimeBoundedSelectorReturnsNull  thrpt   30  688116.464 ± 8746.974  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_doubleOnXCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_doubleOnXCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18511.259 ops/s
# Warmup Iteration   2: 112898.315 ops/s
# Warmup Iteration   3: 157210.747 ops/s
# Warmup Iteration   4: 155397.806 ops/s
# Warmup Iteration   5: 181322.517 ops/s
# Warmup Iteration   6: 168927.605 ops/s
# Warmup Iteration   7: 173085.341 ops/s
# Warmup Iteration   8: 179843.618 ops/s
# Warmup Iteration   9: 170046.393 ops/s
# Warmup Iteration  10: 174731.441 ops/s
# Warmup Iteration  11: 173127.679 ops/s
# Warmup Iteration  12: 167751.449 ops/s
# Warmup Iteration  13: 175946.044 ops/s
# Warmup Iteration  14: 176213.973 ops/s
# Warmup Iteration  15: 164990.606 ops/s
# Warmup Iteration  16: 172615.397 ops/s
# Warmup Iteration  17: 181613.286 ops/s
# Warmup Iteration  18: 179605.479 ops/s
# Warmup Iteration  19: 182196.366 ops/s
# Warmup Iteration  20: 182735.261 ops/s
# Warmup Iteration  21: 178487.445 ops/s
# Warmup Iteration  22: 184211.306 ops/s
# Warmup Iteration  23: 172174.130 ops/s
# Warmup Iteration  24: 177893.492 ops/s
# Warmup Iteration  25: 187324.295 ops/s
# Warmup Iteration  26: 176805.274 ops/s
# Warmup Iteration  27: 176441.490 ops/s
# Warmup Iteration  28: 179804.248 ops/s
# Warmup Iteration  29: 180056.246 ops/s
# Warmup Iteration  30: 175068.925 ops/s
Iteration   1: 178126.729 ops/s
Iteration   2: 183821.368 ops/s
Iteration   3: 182321.900 ops/s
Iteration   4: 179008.508 ops/s
Iteration   5: 178677.288 ops/s
Iteration   6: 178548.488 ops/s
Iteration   7: 184473.104 ops/s
Iteration   8: 176140.212 ops/s
Iteration   9: 179510.146 ops/s
Iteration  10: 182106.703 ops/s
Iteration  11: 180939.549 ops/s
Iteration  12: 183806.461 ops/s
Iteration  13: 177785.231 ops/s
Iteration  14: 175170.374 ops/s
Iteration  15: 187015.664 ops/s
Iteration  16: 181374.762 ops/s
Iteration  17: 173939.646 ops/s
Iteration  18: 186220.111 ops/s
Iteration  19: 186576.428 ops/s
Iteration  20: 175828.656 ops/s
Iteration  21: 185153.103 ops/s
Iteration  22: 177873.560 ops/s
Iteration  23: 181470.374 ops/s
Iteration  24: 180119.255 ops/s
Iteration  25: 180242.502 ops/s
Iteration  26: 177250.275 ops/s
Iteration  27: 174001.992 ops/s
Iteration  28: 185154.462 ops/s
Iteration  29: 179025.701 ops/s
Iteration  30: 180093.539 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_doubleOnXCount":
  180392.536 ±(99.9%) 2476.524 ops/s [Average]
  (min, avg, max) = (173939.646, 180392.536, 187015.664), stdev = 3706.745
  CI (99.9%): [177916.012, 182869.061] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ObservableRefCountTest._Benchmark.benchmark_doubleOnXCount  thrpt   30  180392.536 ± 2476.524  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18454.157 ops/s
# Warmup Iteration   2: 22883.400 ops/s
# Warmup Iteration   3: 7681.974 ops/s
# Warmup Iteration   4: 12023.572 ops/s
# Warmup Iteration   5: 19715.581 ops/s
# Warmup Iteration   6: 52349.888 ops/s
# Warmup Iteration   7: 18688.182 ops/s
# Warmup Iteration   8: 8902.494 ops/s
# Warmup Iteration   9: 11086.275 ops/s
# Warmup Iteration  10: 10529.989 ops/s
# Warmup Iteration  11: 8228.803 ops/s
# Warmup Iteration  12: 4133.891 ops/s
# Warmup Iteration  13: 4538.732 ops/s
# Warmup Iteration  14: 4922.682 ops/s
# Warmup Iteration  15: 5877.027 ops/s
# Warmup Iteration  16: 4661.829 ops/s
# Warmup Iteration  17: 5049.054 ops/s
# Warmup Iteration  18: 4230.390 ops/s
# Warmup Iteration  19: 4456.969 ops/s
# Warmup Iteration  20: 3058.052 ops/s
# Warmup Iteration  21: 4639.136 ops/s
# Warmup Iteration  22: 5025.164 ops/s
# Warmup Iteration  23: 6217.730 ops/s
# Warmup Iteration  24: 10365.879 ops/s
# Warmup Iteration  25: 1772.149 ops/s
# Warmup Iteration  26: 6503.288 ops/s
# Warmup Iteration  27: 4017.208 ops/s
# Warmup Iteration  28: 7139.367 ops/s
# Warmup Iteration  29: 5822.459 ops/s
# Warmup Iteration  30: 1207.927 ops/s
Iteration   1: 9697.492 ops/s
Iteration   2: 5043.544 ops/s
Iteration   3: 6465.997 ops/s
Iteration   4: 1431.141 ops/s
Iteration   5: 4217.360 ops/s
Iteration   6: 3899.207 ops/s
Iteration   7: 4705.761 ops/s
Iteration   8: 2571.221 ops/s
Iteration   9: 5322.095 ops/s
Iteration  10: 4148.419 ops/s
Iteration  11: 4944.553 ops/s
Iteration  12: 1413.162 ops/s
Iteration  13: 7448.243 ops/s
Iteration  14: 7368.392 ops/s
Iteration  15: 6669.437 ops/s
Iteration  16: 1427.934 ops/s
Iteration  17: 8875.472 ops/s
Iteration  18: 4072.766 ops/s
Iteration  19: 4488.714 ops/s
Iteration  20: 1969.222 ops/s
Iteration  21: 7036.386 ops/s
Iteration  22: 5553.685 ops/s
Iteration  23: 3140.383 ops/s
Iteration  24: 1609.477 ops/s
Iteration  25: 5170.939 ops/s
Iteration  26: 4876.665 ops/s
Iteration  27: 3767.103 ops/s
Iteration  28: 1535.853 ops/s
Iteration  29: 3696.184 ops/s
Iteration  30: 4771.591 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_doubleOnSubscribe":
  4577.947 ±(99.9%) 1469.627 ops/s [Average]
  (min, avg, max) = (1413.162, 4577.947, 9697.492), stdev = 2199.668
  CI (99.9%): [3108.320, 6047.573] (assumes normal distribution)


# Run complete. Total time: 00:01:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt     Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  4577.947 ± 1469.627  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnEventThrowsSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnEventThrowsSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 256542.621 ops/s
# Warmup Iteration   2: 513375.726 ops/s
# Warmup Iteration   3: 619214.464 ops/s
# Warmup Iteration   4: 526220.637 ops/s
# Warmup Iteration   5: 652562.427 ops/s
# Warmup Iteration   6: 561083.353 ops/s
# Warmup Iteration   7: 640733.005 ops/s
# Warmup Iteration   8: 639184.060 ops/s
# Warmup Iteration   9: 637502.528 ops/s
# Warmup Iteration  10: 653390.053 ops/s
# Warmup Iteration  11: 603911.786 ops/s
# Warmup Iteration  12: 674617.359 ops/s
# Warmup Iteration  13: 652369.701 ops/s
# Warmup Iteration  14: 602812.378 ops/s
# Warmup Iteration  15: 638797.584 ops/s
# Warmup Iteration  16: 638296.835 ops/s
# Warmup Iteration  17: 654855.398 ops/s
# Warmup Iteration  18: 664001.767 ops/s
# Warmup Iteration  19: 698300.364 ops/s
# Warmup Iteration  20: 651803.323 ops/s
# Warmup Iteration  21: 679876.362 ops/s
# Warmup Iteration  22: 671432.439 ops/s
# Warmup Iteration  23: 679518.819 ops/s
# Warmup Iteration  24: 631174.569 ops/s
# Warmup Iteration  25: 680084.006 ops/s
# Warmup Iteration  26: 681517.266 ops/s
# Warmup Iteration  27: 646686.342 ops/s
# Warmup Iteration  28: 672556.690 ops/s
# Warmup Iteration  29: 661939.546 ops/s
# Warmup Iteration  30: 674037.601 ops/s
Iteration   1: 663538.561 ops/s
Iteration   2: 646121.325 ops/s
Iteration   3: 688700.450 ops/s
Iteration   4: 635751.203 ops/s
Iteration   5: 686816.660 ops/s
Iteration   6: 674561.742 ops/s
Iteration   7: 646108.575 ops/s
Iteration   8: 670637.394 ops/s
Iteration   9: 660186.219 ops/s
Iteration  10: 660904.836 ops/s
Iteration  11: 679675.034 ops/s
Iteration  12: 649110.857 ops/s
Iteration  13: 676354.010 ops/s
Iteration  14: 655125.162 ops/s
Iteration  15: 654452.039 ops/s
Iteration  16: 671818.517 ops/s
Iteration  17: 652072.503 ops/s
Iteration  18: 667875.494 ops/s
Iteration  19: 690008.970 ops/s
Iteration  20: 651968.784 ops/s
Iteration  21: 679714.187 ops/s
Iteration  22: 656911.143 ops/s
Iteration  23: 664911.876 ops/s
Iteration  24: 669542.348 ops/s
Iteration  25: 654484.757 ops/s
Iteration  26: 685666.937 ops/s
Iteration  27: 646137.063 ops/s
Iteration  28: 651659.481 ops/s
Iteration  29: 519550.125 ops/s
Iteration  30: 651631.041 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnEventThrowsSuccess":
  658733.243 ±(99.9%) 20052.858 ops/s [Average]
  (min, avg, max) = (519550.125, 658733.243, 690008.970), stdev = 30014.177
  CI (99.9%): [638680.385, 678786.101] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnEventThrowsSuccess  thrpt   30  658733.243 ± 20052.858  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSuccessCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSuccessCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 296417.834 ops/s
# Warmup Iteration   2: 503957.156 ops/s
# Warmup Iteration   3: 611754.142 ops/s
# Warmup Iteration   4: 618538.932 ops/s
# Warmup Iteration   5: 626198.744 ops/s
# Warmup Iteration   6: 594786.317 ops/s
# Warmup Iteration   7: 611270.985 ops/s
# Warmup Iteration   8: 624830.422 ops/s
# Warmup Iteration   9: 609828.086 ops/s
# Warmup Iteration  10: 616687.788 ops/s
# Warmup Iteration  11: 590578.749 ops/s
# Warmup Iteration  12: 607509.476 ops/s
# Warmup Iteration  13: 613379.834 ops/s
# Warmup Iteration  14: 589343.876 ops/s
# Warmup Iteration  15: 596571.497 ops/s
# Warmup Iteration  16: 634541.462 ops/s
# Warmup Iteration  17: 635198.354 ops/s
# Warmup Iteration  18: 621100.397 ops/s
# Warmup Iteration  19: 671708.803 ops/s
# Warmup Iteration  20: 660885.520 ops/s
# Warmup Iteration  21: 620147.466 ops/s
# Warmup Iteration  22: 632849.669 ops/s
# Warmup Iteration  23: 635617.782 ops/s
# Warmup Iteration  24: 632291.600 ops/s
# Warmup Iteration  25: 665116.709 ops/s
# Warmup Iteration  26: 611307.562 ops/s
# Warmup Iteration  27: 627385.677 ops/s
# Warmup Iteration  28: 680090.696 ops/s
# Warmup Iteration  29: 638181.443 ops/s
# Warmup Iteration  30: 645425.034 ops/s
Iteration   1: 662163.174 ops/s
Iteration   2: 630192.811 ops/s
Iteration   3: 651956.483 ops/s
Iteration   4: 645896.294 ops/s
Iteration   5: 666702.256 ops/s
Iteration   6: 671828.197 ops/s
Iteration   7: 614167.506 ops/s
Iteration   8: 659091.815 ops/s
Iteration   9: 635860.219 ops/s
Iteration  10: 655244.333 ops/s
Iteration  11: 638210.270 ops/s
Iteration  12: 665281.577 ops/s
Iteration  13: 651133.662 ops/s
Iteration  14: 657443.025 ops/s
Iteration  15: 659239.715 ops/s
Iteration  16: 646270.393 ops/s
Iteration  17: 626570.225 ops/s
Iteration  18: 667941.513 ops/s
Iteration  19: 642958.778 ops/s
Iteration  20: 662663.241 ops/s
Iteration  21: 629506.062 ops/s
Iteration  22: 663081.745 ops/s
Iteration  23: 642197.617 ops/s
Iteration  24: 651077.417 ops/s
Iteration  25: 633294.651 ops/s
Iteration  26: 668089.041 ops/s
Iteration  27: 655566.247 ops/s
Iteration  28: 661860.303 ops/s
Iteration  29: 619571.041 ops/s
Iteration  30: 682701.110 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSuccessCrash":
  650592.024 ±(99.9%) 11051.988 ops/s [Average]
  (min, avg, max) = (614167.506, 650592.024, 682701.110), stdev = 16542.097
  CI (99.9%): [639540.036, 661644.012] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnSuccessCrash  thrpt   30  650592.024 ± 11051.988  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_cast$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_cast

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1555132.199 ops/s
# Warmup Iteration   2: 4713012.707 ops/s
# Warmup Iteration   3: 6603024.864 ops/s
# Warmup Iteration   4: 7005597.813 ops/s
# Warmup Iteration   5: 6960107.205 ops/s
# Warmup Iteration   6: 6613371.601 ops/s
# Warmup Iteration   7: 6677392.287 ops/s
# Warmup Iteration   8: 7094358.940 ops/s
# Warmup Iteration   9: 6595975.401 ops/s
# Warmup Iteration  10: 6685089.457 ops/s
# Warmup Iteration  11: 6493031.368 ops/s
# Warmup Iteration  12: 7059630.345 ops/s
# Warmup Iteration  13: 6520697.674 ops/s
# Warmup Iteration  14: 6832054.310 ops/s
# Warmup Iteration  15: 6838528.662 ops/s
# Warmup Iteration  16: 6776385.094 ops/s
# Warmup Iteration  17: 7045080.320 ops/s
# Warmup Iteration  18: 6955825.092 ops/s
# Warmup Iteration  19: 6603423.394 ops/s
# Warmup Iteration  20: 7103387.701 ops/s
# Warmup Iteration  21: 6871111.262 ops/s
# Warmup Iteration  22: 6669164.989 ops/s
# Warmup Iteration  23: 6879130.368 ops/s
# Warmup Iteration  24: 6797557.620 ops/s
# Warmup Iteration  25: 6978872.676 ops/s
# Warmup Iteration  26: 6655855.125 ops/s
# Warmup Iteration  27: 6827315.910 ops/s
# Warmup Iteration  28: 6990949.220 ops/s
# Warmup Iteration  29: 6598746.101 ops/s
# Warmup Iteration  30: 6941118.253 ops/s
Iteration   1: 6728008.673 ops/s
Iteration   2: 6940894.597 ops/s
Iteration   3: 6627157.114 ops/s
Iteration   4: 6931553.233 ops/s
Iteration   5: 6983999.464 ops/s
Iteration   6: 6849719.172 ops/s
Iteration   7: 6678419.975 ops/s
Iteration   8: 6958622.855 ops/s
Iteration   9: 6651245.292 ops/s
Iteration  10: 6760369.857 ops/s
Iteration  11: 6838795.051 ops/s
Iteration  12: 6852314.409 ops/s
Iteration  13: 6650177.818 ops/s
Iteration  14: 6861411.530 ops/s
Iteration  15: 6749362.298 ops/s
Iteration  16: 6683780.618 ops/s
Iteration  17: 7132538.407 ops/s
Iteration  18: 6698740.757 ops/s
Iteration  19: 6786799.735 ops/s
Iteration  20: 7088139.670 ops/s
Iteration  21: 6576935.652 ops/s
Iteration  22: 6632633.841 ops/s
Iteration  23: 5115698.053 ops/s
Iteration  24: 6755736.597 ops/s
Iteration  25: 7043158.201 ops/s
Iteration  26: 6777684.499 ops/s
Iteration  27: 6966784.440 ops/s
Iteration  28: 6877694.082 ops/s
Iteration  29: 6542774.269 ops/s
Iteration  30: 6871761.021 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_cast":
  6753763.706 ±(99.9%) 230107.423 ops/s [Average]
  (min, avg, max) = (5115698.053, 6753763.706, 7132538.407), stdev = 344413.984
  CI (99.9%): [6523656.283, 6983871.129] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score        Error  Units
SingleMiscTest._Benchmark.benchmark_cast  thrpt   30  6753763.706 ± 230107.423  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 336593.216 ops/s
# Warmup Iteration   2: 1476288.580 ops/s
# Warmup Iteration   3: 2215462.932 ops/s
# Warmup Iteration   4: 2796454.447 ops/s
# Warmup Iteration   5: 2676727.645 ops/s
# Warmup Iteration   6: 2781403.058 ops/s
# Warmup Iteration   7: 2698344.459 ops/s
# Warmup Iteration   8: 2746882.620 ops/s
# Warmup Iteration   9: 2802506.136 ops/s
# Warmup Iteration  10: 2674075.209 ops/s
# Warmup Iteration  11: 2779863.088 ops/s
# Warmup Iteration  12: 2688563.566 ops/s
# Warmup Iteration  13: 2807441.590 ops/s
# Warmup Iteration  14: 2621416.973 ops/s
# Warmup Iteration  15: 2738140.496 ops/s
# Warmup Iteration  16: 2764726.228 ops/s
# Warmup Iteration  17: 2679731.624 ops/s
# Warmup Iteration  18: 2746461.757 ops/s
# Warmup Iteration  19: 2802445.071 ops/s
# Warmup Iteration  20: 2675645.314 ops/s
# Warmup Iteration  21: 2785181.891 ops/s
# Warmup Iteration  22: 2704318.746 ops/s
# Warmup Iteration  23: 2628382.886 ops/s
# Warmup Iteration  24: 2778483.812 ops/s
# Warmup Iteration  25: 2721741.626 ops/s
# Warmup Iteration  26: 2775762.424 ops/s
# Warmup Iteration  27: 2763856.458 ops/s
# Warmup Iteration  28: 2720584.344 ops/s
# Warmup Iteration  29: 2802677.594 ops/s
# Warmup Iteration  30: 2810466.229 ops/s
Iteration   1: 2658830.663 ops/s
Iteration   2: 2787096.492 ops/s
Iteration   3: 2749689.034 ops/s
Iteration   4: 2789094.912 ops/s
Iteration   5: 2808023.809 ops/s
Iteration   6: 2687396.479 ops/s
Iteration   7: 2813779.862 ops/s
Iteration   8: 2713397.310 ops/s
Iteration   9: 2718895.075 ops/s
Iteration  10: 2776896.347 ops/s
Iteration  11: 2656236.607 ops/s
Iteration  12: 2809842.035 ops/s
Iteration  13: 2645580.775 ops/s
Iteration  14: 2792910.427 ops/s
Iteration  15: 2697697.850 ops/s
Iteration  16: 2667613.709 ops/s
Iteration  17: 2791313.433 ops/s
Iteration  18: 2762761.160 ops/s
Iteration  19: 2685188.173 ops/s
Iteration  20: 2748245.851 ops/s
Iteration  21: 2704195.482 ops/s
Iteration  22: 2763838.142 ops/s
Iteration  23: 2762830.683 ops/s
Iteration  24: 2773467.261 ops/s
Iteration  25: 2845648.979 ops/s
Iteration  26: 2803166.610 ops/s
Iteration  27: 2748309.337 ops/s
Iteration  28: 2825725.955 ops/s
Iteration  29: 2664242.296 ops/s
Iteration  30: 2737917.282 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip2":
  2746327.734 ±(99.9%) 38063.646 ops/s [Average]
  (min, avg, max) = (2645580.775, 2746327.734, 2845648.979), stdev = 56971.878
  CI (99.9%): [2708264.088, 2784391.381] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score       Error  Units
SingleZipTest._Benchmark.benchmark_zip2  thrpt   30  2746327.734 ± 38063.646  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 370690.589 ops/s
# Warmup Iteration   2: 1901897.361 ops/s
# Warmup Iteration   3: 2370754.735 ops/s
# Warmup Iteration   4: 2751188.988 ops/s
# Warmup Iteration   5: 2927838.988 ops/s
# Warmup Iteration   6: 2809924.150 ops/s
# Warmup Iteration   7: 2922025.703 ops/s
# Warmup Iteration   8: 2730448.158 ops/s
# Warmup Iteration   9: 2833031.393 ops/s
# Warmup Iteration  10: 2767126.898 ops/s
# Warmup Iteration  11: 2823773.295 ops/s
# Warmup Iteration  12: 2839359.814 ops/s
# Warmup Iteration  13: 2737629.135 ops/s
# Warmup Iteration  14: 2785814.370 ops/s
# Warmup Iteration  15: 2840335.928 ops/s
# Warmup Iteration  16: 2798533.811 ops/s
# Warmup Iteration  17: 2805495.228 ops/s
# Warmup Iteration  18: 2768932.828 ops/s
# Warmup Iteration  19: 2829552.785 ops/s
# Warmup Iteration  20: 2795571.205 ops/s
# Warmup Iteration  21: 2906805.894 ops/s
# Warmup Iteration  22: 2731366.565 ops/s
# Warmup Iteration  23: 2798500.718 ops/s
# Warmup Iteration  24: 2797700.713 ops/s
# Warmup Iteration  25: 2784031.713 ops/s
# Warmup Iteration  26: 2855528.578 ops/s
# Warmup Iteration  27: 2810417.042 ops/s
# Warmup Iteration  28: 2767686.359 ops/s
# Warmup Iteration  29: 2840374.301 ops/s
# Warmup Iteration  30: 2753301.491 ops/s
Iteration   1: 2810341.662 ops/s
Iteration   2: 2736475.378 ops/s
Iteration   3: 2918028.604 ops/s
Iteration   4: 2768202.790 ops/s
Iteration   5: 2712213.495 ops/s
Iteration   6: 2883489.123 ops/s
Iteration   7: 2696709.219 ops/s
Iteration   8: 2816920.199 ops/s
Iteration   9: 2695953.099 ops/s
Iteration  10: 2904849.038 ops/s
Iteration  11: 2762447.949 ops/s
Iteration  12: 2779977.779 ops/s
Iteration  13: 2861603.193 ops/s
Iteration  14: 2662781.349 ops/s
Iteration  15: 2821755.714 ops/s
Iteration  16: 2922693.565 ops/s
Iteration  17: 2169171.347 ops/s
Iteration  18: 2667247.059 ops/s
Iteration  19: 2792493.883 ops/s
Iteration  20: 2890614.957 ops/s
Iteration  21: 2732117.935 ops/s
Iteration  22: 2788219.885 ops/s
Iteration  23: 2886996.191 ops/s
Iteration  24: 2777663.504 ops/s
Iteration  25: 2821709.568 ops/s
Iteration  26: 2742581.907 ops/s
Iteration  27: 2820717.267 ops/s
Iteration  28: 2795698.010 ops/s
Iteration  29: 2712495.959 ops/s
Iteration  30: 2761923.733 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip3":
  2770469.779 ±(99.9%) 90347.296 ops/s [Average]
  (min, avg, max) = (2169171.347, 2770469.779, 2922693.565), stdev = 135227.589
  CI (99.9%): [2680122.483, 2860817.074] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score       Error  Units
SingleZipTest._Benchmark.benchmark_zip3  thrpt   30  2770469.779 ± 90347.296  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 307033.756 ops/s
# Warmup Iteration   2: 944075.772 ops/s
# Warmup Iteration   3: 1557310.795 ops/s
# Warmup Iteration   4: 2092597.757 ops/s
# Warmup Iteration   5: 1957717.957 ops/s
# Warmup Iteration   6: 2041020.171 ops/s
# Warmup Iteration   7: 2011909.786 ops/s
# Warmup Iteration   8: 1955072.542 ops/s
# Warmup Iteration   9: 2023019.513 ops/s
# Warmup Iteration  10: 1928740.996 ops/s
# Warmup Iteration  11: 1921949.673 ops/s
# Warmup Iteration  12: 2032781.524 ops/s
# Warmup Iteration  13: 1959636.920 ops/s
# Warmup Iteration  14: 1993539.498 ops/s
# Warmup Iteration  15: 2014700.574 ops/s
# Warmup Iteration  16: 1924706.411 ops/s
# Warmup Iteration  17: 2035875.506 ops/s
# Warmup Iteration  18: 1964242.356 ops/s
# Warmup Iteration  19: 1998238.940 ops/s
# Warmup Iteration  20: 1958255.971 ops/s
# Warmup Iteration  21: 2042896.380 ops/s
# Warmup Iteration  22: 2044019.366 ops/s
# Warmup Iteration  23: 1977927.842 ops/s
# Warmup Iteration  24: 1934997.072 ops/s
# Warmup Iteration  25: 2045333.060 ops/s
# Warmup Iteration  26: 1979619.831 ops/s
# Warmup Iteration  27: 2015888.475 ops/s
# Warmup Iteration  28: 1949528.427 ops/s
# Warmup Iteration  29: 1992352.053 ops/s
# Warmup Iteration  30: 2068178.796 ops/s
Iteration   1: 1955888.090 ops/s
Iteration   2: 2060744.112 ops/s
Iteration   3: 2026910.432 ops/s
Iteration   4: 1969774.492 ops/s
Iteration   5: 2043858.848 ops/s
Iteration   6: 1955604.957 ops/s
Iteration   7: 1990871.342 ops/s
Iteration   8: 2083803.269 ops/s
Iteration   9: 2017044.992 ops/s
Iteration  10: 2046653.837 ops/s
Iteration  11: 2064943.368 ops/s
Iteration  12: 1968334.578 ops/s
Iteration  13: 2076245.790 ops/s
Iteration  14: 2011995.542 ops/s
Iteration  15: 1975667.362 ops/s
Iteration  16: 2028915.971 ops/s
Iteration  17: 2069269.210 ops/s
Iteration  18: 2001224.927 ops/s
Iteration  19: 1958913.673 ops/s
Iteration  20: 2097115.458 ops/s
Iteration  21: 1969958.161 ops/s
Iteration  22: 1965209.975 ops/s
Iteration  23: 2007994.502 ops/s
Iteration  24: 1983375.704 ops/s
Iteration  25: 2091879.529 ops/s
Iteration  26: 1986361.346 ops/s
Iteration  27: 2079044.262 ops/s
Iteration  28: 2018593.236 ops/s
Iteration  29: 1935000.268 ops/s
Iteration  30: 1996986.473 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip4":
  2014606.124 ±(99.9%) 31575.834 ops/s [Average]
  (min, avg, max) = (1935000.268, 2014606.124, 2097115.458), stdev = 47261.226
  CI (99.9%): [1983030.289, 2046181.958] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score       Error  Units
SingleZipTest._Benchmark.benchmark_zip4  thrpt   30  2014606.124 ± 31575.834  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribeJustCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribeJustCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 261423.135 ops/s
# Warmup Iteration   2: 497752.427 ops/s
# Warmup Iteration   3: 605641.100 ops/s
# Warmup Iteration   4: 511826.851 ops/s
# Warmup Iteration   5: 587627.486 ops/s
# Warmup Iteration   6: 546680.792 ops/s
# Warmup Iteration   7: 618702.541 ops/s
# Warmup Iteration   8: 595147.479 ops/s
# Warmup Iteration   9: 615702.729 ops/s
# Warmup Iteration  10: 597513.774 ops/s
# Warmup Iteration  11: 602585.588 ops/s
# Warmup Iteration  12: 596345.971 ops/s
# Warmup Iteration  13: 624802.734 ops/s
# Warmup Iteration  14: 595491.029 ops/s
# Warmup Iteration  15: 610747.429 ops/s
# Warmup Iteration  16: 619899.449 ops/s
# Warmup Iteration  17: 630661.452 ops/s
# Warmup Iteration  18: 656977.952 ops/s
# Warmup Iteration  19: 629027.508 ops/s
# Warmup Iteration  20: 639262.299 ops/s
# Warmup Iteration  21: 660027.495 ops/s
# Warmup Iteration  22: 626025.676 ops/s
# Warmup Iteration  23: 631613.039 ops/s
# Warmup Iteration  24: 637549.594 ops/s
# Warmup Iteration  25: 649714.469 ops/s
# Warmup Iteration  26: 625925.688 ops/s
# Warmup Iteration  27: 639890.425 ops/s
# Warmup Iteration  28: 657472.425 ops/s
# Warmup Iteration  29: 629885.154 ops/s
# Warmup Iteration  30: 648325.858 ops/s
Iteration   1: 625513.702 ops/s
Iteration   2: 645778.215 ops/s
Iteration   3: 639505.093 ops/s
Iteration   4: 642054.559 ops/s
Iteration   5: 625026.737 ops/s
Iteration   6: 651414.277 ops/s
Iteration   7: 620021.304 ops/s
Iteration   8: 635668.259 ops/s
Iteration   9: 635531.991 ops/s
Iteration  10: 631557.142 ops/s
Iteration  11: 661567.848 ops/s
Iteration  12: 409560.445 ops/s
Iteration  13: 646547.059 ops/s
Iteration  14: 648139.269 ops/s
Iteration  15: 617112.988 ops/s
Iteration  16: 635404.018 ops/s
Iteration  17: 638351.933 ops/s
Iteration  18: 636141.716 ops/s
Iteration  19: 661761.283 ops/s
Iteration  20: 624900.140 ops/s
Iteration  21: 640522.063 ops/s
Iteration  22: 633134.421 ops/s
Iteration  23: 639756.854 ops/s
Iteration  24: 629063.690 ops/s
Iteration  25: 624185.213 ops/s
Iteration  26: 647326.064 ops/s
Iteration  27: 630695.473 ops/s
Iteration  28: 638743.291 ops/s
Iteration  29: 651857.423 ops/s
Iteration  30: 625251.698 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribeJustCrash":
  629736.472 ±(99.9%) 28779.183 ops/s [Average]
  (min, avg, max) = (409560.445, 629736.472, 661761.283), stdev = 43075.329
  CI (99.9%): [600957.290, 658515.655] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnSubscribeJustCrash  thrpt   30  629736.472 ± 28779.183  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip5$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip5

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 292074.133 ops/s
# Warmup Iteration   2: 644172.238 ops/s
# Warmup Iteration   3: 1435525.228 ops/s
# Warmup Iteration   4: 1678264.869 ops/s
# Warmup Iteration   5: 1795416.179 ops/s
# Warmup Iteration   6: 1815622.376 ops/s
# Warmup Iteration   7: 1855463.566 ops/s
# Warmup Iteration   8: 1751624.471 ops/s
# Warmup Iteration   9: 1837653.976 ops/s
# Warmup Iteration  10: 1753649.409 ops/s
# Warmup Iteration  11: 1815997.488 ops/s
# Warmup Iteration  12: 1900239.653 ops/s
# Warmup Iteration  13: 1742899.203 ops/s
# Warmup Iteration  14: 1890089.296 ops/s
# Warmup Iteration  15: 1727570.174 ops/s
# Warmup Iteration  16: 1855585.985 ops/s
# Warmup Iteration  17: 1825812.476 ops/s
# Warmup Iteration  18: 1736628.028 ops/s
# Warmup Iteration  19: 1852016.288 ops/s
# Warmup Iteration  20: 1780598.615 ops/s
# Warmup Iteration  21: 1840056.171 ops/s
# Warmup Iteration  22: 1728536.582 ops/s
# Warmup Iteration  23: 1851607.417 ops/s
# Warmup Iteration  24: 1817919.876 ops/s
# Warmup Iteration  25: 1738316.353 ops/s
# Warmup Iteration  26: 1790336.084 ops/s
# Warmup Iteration  27: 1835373.702 ops/s
# Warmup Iteration  28: 1778127.567 ops/s
# Warmup Iteration  29: 1825362.210 ops/s
# Warmup Iteration  30: 1714261.983 ops/s
Iteration   1: 1871956.082 ops/s
Iteration   2: 1834536.202 ops/s
Iteration   3: 1731580.586 ops/s
Iteration   4: 1769017.891 ops/s
Iteration   5: 1802424.851 ops/s
Iteration   6: 1711848.783 ops/s
Iteration   7: 1750481.704 ops/s
Iteration   8: 1832359.197 ops/s
Iteration   9: 1806720.076 ops/s
Iteration  10: 1875381.783 ops/s
Iteration  11: 1786279.406 ops/s
Iteration  12: 1784132.921 ops/s
Iteration  13: 1786787.637 ops/s
Iteration  14: 1769212.350 ops/s
Iteration  15: 1741082.494 ops/s
Iteration  16: 1754095.506 ops/s
Iteration  17: 1826890.508 ops/s
Iteration  18: 1730872.192 ops/s
Iteration  19: 1843210.284 ops/s
Iteration  20: 1715769.816 ops/s
Iteration  21: 1821751.436 ops/s
Iteration  22: 1811725.695 ops/s
Iteration  23: 1811986.334 ops/s
Iteration  24: 1744149.029 ops/s
Iteration  25: 1824049.889 ops/s
Iteration  26: 1817496.645 ops/s
Iteration  27: 1783965.025 ops/s
Iteration  28: 1840592.323 ops/s
Iteration  29: 1751957.916 ops/s
Iteration  30: 1862879.955 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip5":
  1793173.151 ±(99.9%) 30928.432 ops/s [Average]
  (min, avg, max) = (1711848.783, 1793173.151, 1875381.783), stdev = 46292.224
  CI (99.9%): [1762244.719, 1824101.582] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score       Error  Units
SingleZipTest._Benchmark.benchmark_zip5  thrpt   30  1793173.151 ± 30928.432  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip6$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip6

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 134585.907 ops/s
# Warmup Iteration   2: 236182.957 ops/s
# Warmup Iteration   3: 360837.166 ops/s
# Warmup Iteration   4: 1255037.764 ops/s
# Warmup Iteration   5: 1451223.484 ops/s
# Warmup Iteration   6: 1428145.683 ops/s
# Warmup Iteration   7: 1518722.741 ops/s
# Warmup Iteration   8: 1612762.798 ops/s
# Warmup Iteration   9: 1659599.012 ops/s
# Warmup Iteration  10: 1543800.715 ops/s
# Warmup Iteration  11: 1615974.029 ops/s
# Warmup Iteration  12: 1639039.608 ops/s
# Warmup Iteration  13: 1581324.503 ops/s
# Warmup Iteration  14: 1697611.029 ops/s
# Warmup Iteration  15: 1594399.101 ops/s
# Warmup Iteration  16: 1606592.377 ops/s
# Warmup Iteration  17: 1655426.231 ops/s
# Warmup Iteration  18: 1603151.872 ops/s
# Warmup Iteration  19: 1632820.738 ops/s
# Warmup Iteration  20: 1625931.297 ops/s
# Warmup Iteration  21: 1622810.740 ops/s
# Warmup Iteration  22: 1675457.216 ops/s
# Warmup Iteration  23: 1600304.571 ops/s
# Warmup Iteration  24: 1638293.749 ops/s
# Warmup Iteration  25: 1656700.583 ops/s
# Warmup Iteration  26: 1596374.434 ops/s
# Warmup Iteration  27: 1609736.508 ops/s
# Warmup Iteration  28: 1680221.369 ops/s
# Warmup Iteration  29: 1593500.158 ops/s
# Warmup Iteration  30: 1679130.734 ops/s
Iteration   1: 1573997.556 ops/s
Iteration   2: 1670452.685 ops/s
Iteration   3: 1621062.683 ops/s
Iteration   4: 1616308.396 ops/s
Iteration   5: 1657869.563 ops/s
Iteration   6: 1431584.735 ops/s
Iteration   7: 1448774.842 ops/s
Iteration   8: 1619854.861 ops/s
Iteration   9: 1657197.569 ops/s
Iteration  10: 1617020.183 ops/s
Iteration  11: 1604416.560 ops/s
Iteration  12: 1634208.971 ops/s
Iteration  13: 1635686.134 ops/s
Iteration  14: 1617132.674 ops/s
Iteration  15: 1651718.360 ops/s
Iteration  16: 1618461.768 ops/s
Iteration  17: 1640819.715 ops/s
Iteration  18: 1666163.938 ops/s
Iteration  19: 1571403.260 ops/s
Iteration  20: 1649837.045 ops/s
Iteration  21: 1625055.411 ops/s
Iteration  22: 1631760.064 ops/s
Iteration  23: 1611245.189 ops/s
Iteration  24: 1661448.358 ops/s
Iteration  25: 1639401.335 ops/s
Iteration  26: 1614257.561 ops/s
Iteration  27: 1649211.214 ops/s
Iteration  28: 1594483.896 ops/s
Iteration  29: 1609608.684 ops/s
Iteration  30: 1705534.508 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip6":
  1618199.257 ±(99.9%) 37434.980 ops/s [Average]
  (min, avg, max) = (1431584.735, 1618199.257, 1705534.508), stdev = 56030.921
  CI (99.9%): [1580764.277, 1655634.238] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score       Error  Units
SingleZipTest._Benchmark.benchmark_zip6  thrpt   30  1618199.257 ± 37434.980  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip7$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip7

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 159481.165 ops/s
# Warmup Iteration   2: 310564.588 ops/s
# Warmup Iteration   3: 533154.890 ops/s
# Warmup Iteration   4: 570859.666 ops/s
# Warmup Iteration   5: 603901.861 ops/s
# Warmup Iteration   6: 594958.500 ops/s
# Warmup Iteration   7: 621847.945 ops/s
# Warmup Iteration   8: 1286589.174 ops/s
# Warmup Iteration   9: 1355891.723 ops/s
# Warmup Iteration  10: 1394376.971 ops/s
# Warmup Iteration  11: 1333138.946 ops/s
# Warmup Iteration  12: 1417439.170 ops/s
# Warmup Iteration  13: 1438726.142 ops/s
# Warmup Iteration  14: 1472359.982 ops/s
# Warmup Iteration  15: 1463129.468 ops/s
# Warmup Iteration  16: 1475631.101 ops/s
# Warmup Iteration  17: 1483051.624 ops/s
# Warmup Iteration  18: 1311785.226 ops/s
# Warmup Iteration  19: 1519437.480 ops/s
# Warmup Iteration  20: 1441980.637 ops/s
# Warmup Iteration  21: 1502394.997 ops/s
# Warmup Iteration  22: 1491655.358 ops/s
# Warmup Iteration  23: 1444708.355 ops/s
# Warmup Iteration  24: 1474394.853 ops/s
# Warmup Iteration  25: 1496920.794 ops/s
# Warmup Iteration  26: 1453904.966 ops/s
# Warmup Iteration  27: 1453941.307 ops/s
# Warmup Iteration  28: 1469000.673 ops/s
# Warmup Iteration  29: 1479713.210 ops/s
# Warmup Iteration  30: 1439636.865 ops/s
Iteration   1: 1443143.981 ops/s
Iteration   2: 1465055.766 ops/s
Iteration   3: 1464608.170 ops/s
Iteration   4: 1430431.941 ops/s
Iteration   5: 1487117.923 ops/s
Iteration   6: 1458401.876 ops/s
Iteration   7: 1520750.807 ops/s
Iteration   8: 1504900.374 ops/s
Iteration   9: 1497923.943 ops/s
Iteration  10: 1429073.546 ops/s
Iteration  11: 1499720.910 ops/s
Iteration  12: 1451561.298 ops/s
Iteration  13: 1491811.636 ops/s
Iteration  14: 1475249.520 ops/s
Iteration  15: 1430346.843 ops/s
Iteration  16: 1478889.020 ops/s
Iteration  17: 1416173.311 ops/s
Iteration  18: 1491775.062 ops/s
Iteration  19: 1504587.267 ops/s
Iteration  20: 1470181.414 ops/s
Iteration  21: 1469259.717 ops/s
Iteration  22: 1439955.718 ops/s
Iteration  23: 1512892.831 ops/s
Iteration  24: 1459032.965 ops/s
Iteration  25: 1501930.266 ops/s
Iteration  26: 1433016.205 ops/s
Iteration  27: 1440317.751 ops/s
Iteration  28: 1500698.521 ops/s
Iteration  29: 1447858.953 ops/s
Iteration  30: 1484024.800 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip7":
  1470023.078 ±(99.9%) 19507.526 ops/s [Average]
  (min, avg, max) = (1416173.311, 1470023.078, 1520750.807), stdev = 29197.948
  CI (99.9%): [1450515.552, 1489530.603] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score       Error  Units
SingleZipTest._Benchmark.benchmark_zip7  thrpt   30  1470023.078 ± 19507.526  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip8$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip8

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 168062.860 ops/s
# Warmup Iteration   2: 376706.727 ops/s
# Warmup Iteration   3: 407820.150 ops/s
# Warmup Iteration   4: 549545.160 ops/s
# Warmup Iteration   5: 553003.144 ops/s
# Warmup Iteration   6: 551715.153 ops/s
# Warmup Iteration   7: 425994.951 ops/s
# Warmup Iteration   8: 499817.201 ops/s
# Warmup Iteration   9: 800270.991 ops/s
# Warmup Iteration  10: 1233044.707 ops/s
# Warmup Iteration  11: 1185917.281 ops/s
# Warmup Iteration  12: 1101054.193 ops/s
# Warmup Iteration  13: 1170414.854 ops/s
# Warmup Iteration  14: 1267099.790 ops/s
# Warmup Iteration  15: 1229923.115 ops/s
# Warmup Iteration  16: 1264768.924 ops/s
# Warmup Iteration  17: 1219454.430 ops/s
# Warmup Iteration  18: 1226136.251 ops/s
# Warmup Iteration  19: 1294488.000 ops/s
# Warmup Iteration  20: 1254069.072 ops/s
# Warmup Iteration  21: 1207957.170 ops/s
# Warmup Iteration  22: 1223192.635 ops/s
# Warmup Iteration  23: 1269983.817 ops/s
# Warmup Iteration  24: 1218815.306 ops/s
# Warmup Iteration  25: 1246226.360 ops/s
# Warmup Iteration  26: 1191045.127 ops/s
# Warmup Iteration  27: 1242697.500 ops/s
# Warmup Iteration  28: 1294386.282 ops/s
# Warmup Iteration  29: 1209094.395 ops/s
# Warmup Iteration  30: 1192415.591 ops/s
Iteration   1: 1066399.154 ops/s
Iteration   2: 1230495.698 ops/s
Iteration   3: 1268777.188 ops/s
Iteration   4: 1278215.730 ops/s
Iteration   5: 1186741.838 ops/s
Iteration   6: 1250933.961 ops/s
Iteration   7: 1249540.347 ops/s
Iteration   8: 1250867.689 ops/s
Iteration   9: 1215490.180 ops/s
Iteration  10: 1236061.889 ops/s
Iteration  11: 1288855.500 ops/s
Iteration  12: 1192611.423 ops/s
Iteration  13: 1247788.544 ops/s
Iteration  14: 1214311.552 ops/s
Iteration  15: 1254834.264 ops/s
Iteration  16: 1265214.933 ops/s
Iteration  17: 1254207.037 ops/s
Iteration  18: 1219795.609 ops/s
Iteration  19: 1286969.144 ops/s
Iteration  20: 1250401.256 ops/s
Iteration  21: 1216223.522 ops/s
Iteration  22: 1259103.398 ops/s
Iteration  23: 1231013.535 ops/s
Iteration  24: 1299055.710 ops/s
Iteration  25: 1216169.730 ops/s
Iteration  26: 1185397.085 ops/s
Iteration  27: 1259893.109 ops/s
Iteration  28: 1229905.635 ops/s
Iteration  29: 1225557.997 ops/s
Iteration  30: 1257942.424 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip8":
  1236292.503 ±(99.9%) 28855.424 ops/s [Average]
  (min, avg, max) = (1066399.154, 1236292.503, 1299055.710), stdev = 43189.443
  CI (99.9%): [1207437.079, 1265147.926] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score       Error  Units
SingleZipTest._Benchmark.benchmark_zip8  thrpt   30  1236292.503 ± 28855.424  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip9$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip9

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 184949.175 ops/s
# Warmup Iteration   2: 456570.990 ops/s
# Warmup Iteration   3: 710631.157 ops/s
# Warmup Iteration   4: 687120.997 ops/s
# Warmup Iteration   5: 1359381.321 ops/s
# Warmup Iteration   6: 1416417.902 ops/s
# Warmup Iteration   7: 1457739.615 ops/s
# Warmup Iteration   8: 1469342.753 ops/s
# Warmup Iteration   9: 1485483.003 ops/s
# Warmup Iteration  10: 1433233.643 ops/s
# Warmup Iteration  11: 1501283.390 ops/s
# Warmup Iteration  12: 1419730.546 ops/s
# Warmup Iteration  13: 1422701.021 ops/s
# Warmup Iteration  14: 1333271.228 ops/s
# Warmup Iteration  15: 1386990.544 ops/s
# Warmup Iteration  16: 1452425.432 ops/s
# Warmup Iteration  17: 1439152.036 ops/s
# Warmup Iteration  18: 1502424.776 ops/s
# Warmup Iteration  19: 1309721.519 ops/s
# Warmup Iteration  20: 1550252.285 ops/s
# Warmup Iteration  21: 1438004.916 ops/s
# Warmup Iteration  22: 1448968.832 ops/s
# Warmup Iteration  23: 1440243.817 ops/s
# Warmup Iteration  24: 1457716.488 ops/s
# Warmup Iteration  25: 1504676.972 ops/s
# Warmup Iteration  26: 1460620.430 ops/s
# Warmup Iteration  27: 1478477.574 ops/s
# Warmup Iteration  28: 1464664.283 ops/s
# Warmup Iteration  29: 1494449.678 ops/s
# Warmup Iteration  30: 1434570.715 ops/s
Iteration   1: 1505049.533 ops/s
Iteration   2: 1470707.051 ops/s
Iteration   3: 1473981.329 ops/s
Iteration   4: 1418155.111 ops/s
Iteration   5: 1472601.246 ops/s
Iteration   6: 1412210.988 ops/s
Iteration   7: 1480431.907 ops/s
Iteration   8: 1444715.486 ops/s
Iteration   9: 1449515.751 ops/s
Iteration  10: 1462999.733 ops/s
Iteration  11: 1394339.065 ops/s
Iteration  12: 1469801.883 ops/s
Iteration  13: 1444385.242 ops/s
Iteration  14: 1469880.936 ops/s
Iteration  15: 1490595.375 ops/s
Iteration  16: 1489223.905 ops/s
Iteration  17: 1452469.603 ops/s
Iteration  18: 1470000.829 ops/s
Iteration  19: 1494770.779 ops/s
Iteration  20: 1441598.546 ops/s
Iteration  21: 1487745.424 ops/s
Iteration  22: 1485180.333 ops/s
Iteration  23: 1442469.496 ops/s
Iteration  24: 1514882.527 ops/s
Iteration  25: 1523977.001 ops/s
Iteration  26: 1454566.275 ops/s
Iteration  27: 1509107.301 ops/s
Iteration  28: 1424835.727 ops/s
Iteration  29: 1444255.112 ops/s
Iteration  30: 1509174.998 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_zip9":
  1466787.616 ±(99.9%) 21245.400 ops/s [Average]
  (min, avg, max) = (1394339.065, 1466787.616, 1523977.001), stdev = 31799.117
  CI (99.9%): [1445542.216, 1488033.016] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score       Error  Units
SingleZipTest._Benchmark.benchmark_zip9  thrpt   30  1466787.616 ± 21245.400  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_emptyArray$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_emptyArray

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 285617.080 ops/s
# Warmup Iteration   2: 568784.286 ops/s
# Warmup Iteration   3: 691247.131 ops/s
# Warmup Iteration   4: 669296.773 ops/s
# Warmup Iteration   5: 626758.464 ops/s
# Warmup Iteration   6: 716335.119 ops/s
# Warmup Iteration   7: 723554.348 ops/s
# Warmup Iteration   8: 723458.099 ops/s
# Warmup Iteration   9: 709959.902 ops/s
# Warmup Iteration  10: 711535.782 ops/s
# Warmup Iteration  11: 714663.016 ops/s
# Warmup Iteration  12: 696528.066 ops/s
# Warmup Iteration  13: 718769.601 ops/s
# Warmup Iteration  14: 742151.974 ops/s
# Warmup Iteration  15: 717466.475 ops/s
# Warmup Iteration  16: 729674.307 ops/s
# Warmup Iteration  17: 740157.595 ops/s
# Warmup Iteration  18: 773429.868 ops/s
# Warmup Iteration  19: 756203.444 ops/s
# Warmup Iteration  20: 761972.073 ops/s
# Warmup Iteration  21: 783129.633 ops/s
# Warmup Iteration  22: 730734.066 ops/s
# Warmup Iteration  23: 770501.795 ops/s
# Warmup Iteration  24: 783439.269 ops/s
# Warmup Iteration  25: 600581.874 ops/s
# Warmup Iteration  26: 798159.781 ops/s
# Warmup Iteration  27: 772784.592 ops/s
# Warmup Iteration  28: 736211.856 ops/s
# Warmup Iteration  29: 785989.027 ops/s
# Warmup Iteration  30: 728143.177 ops/s
Iteration   1: 765709.216 ops/s
Iteration   2: 786652.460 ops/s
Iteration   3: 724949.406 ops/s
Iteration   4: 769198.851 ops/s
Iteration   5: 745471.382 ops/s
Iteration   6: 761636.536 ops/s
Iteration   7: 755372.687 ops/s
Iteration   8: 753479.082 ops/s
Iteration   9: 763252.201 ops/s
Iteration  10: 749822.571 ops/s
Iteration  11: 764916.604 ops/s
Iteration  12: 752167.277 ops/s
Iteration  13: 771369.913 ops/s
Iteration  14: 747330.380 ops/s
Iteration  15: 767317.616 ops/s
Iteration  16: 787550.347 ops/s
Iteration  17: 754160.472 ops/s
Iteration  18: 743536.252 ops/s
Iteration  19: 774051.293 ops/s
Iteration  20: 752142.474 ops/s
Iteration  21: 787260.324 ops/s
Iteration  22: 765562.944 ops/s
Iteration  23: 747982.197 ops/s
Iteration  24: 762092.638 ops/s
Iteration  25: 732715.823 ops/s
Iteration  26: 780224.371 ops/s
Iteration  27: 742950.818 ops/s
Iteration  28: 758757.705 ops/s
Iteration  29: 743198.048 ops/s
Iteration  30: 770178.552 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_emptyArray":
  759367.015 ±(99.9%) 10337.430 ops/s [Average]
  (min, avg, max) = (724949.406, 759367.015, 787550.347), stdev = 15472.579
  CI (99.9%): [749029.585, 769704.444] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
SingleZipArrayTest._Benchmark.benchmark_emptyArray  thrpt   30  759367.015 ± 10337.430  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 125776.372 ops/s
# Warmup Iteration   2: 566990.876 ops/s
# Warmup Iteration   3: 690003.605 ops/s
# Warmup Iteration   4: 657949.072 ops/s
# Warmup Iteration   5: 680401.963 ops/s
# Warmup Iteration   6: 629141.932 ops/s
# Warmup Iteration   7: 657038.441 ops/s
# Warmup Iteration   8: 688204.224 ops/s
# Warmup Iteration   9: 666674.599 ops/s
# Warmup Iteration  10: 692151.563 ops/s
# Warmup Iteration  11: 661024.722 ops/s
# Warmup Iteration  12: 689791.045 ops/s
# Warmup Iteration  13: 674986.847 ops/s
# Warmup Iteration  14: 698193.293 ops/s
# Warmup Iteration  15: 646556.362 ops/s
# Warmup Iteration  16: 705490.027 ops/s
# Warmup Iteration  17: 731856.067 ops/s
# Warmup Iteration  18: 698476.045 ops/s
# Warmup Iteration  19: 758405.204 ops/s
# Warmup Iteration  20: 707439.849 ops/s
# Warmup Iteration  21: 757206.336 ops/s
# Warmup Iteration  22: 739519.061 ops/s
# Warmup Iteration  23: 723219.666 ops/s
# Warmup Iteration  24: 727680.165 ops/s
# Warmup Iteration  25: 766728.990 ops/s
# Warmup Iteration  26: 727766.024 ops/s
# Warmup Iteration  27: 714198.024 ops/s
# Warmup Iteration  28: 757412.201 ops/s
# Warmup Iteration  29: 714678.140 ops/s
# Warmup Iteration  30: 734729.354 ops/s
Iteration   1: 703934.992 ops/s
Iteration   2: 751738.127 ops/s
Iteration   3: 726402.529 ops/s
Iteration   4: 731060.252 ops/s
Iteration   5: 768967.729 ops/s
Iteration   6: 713637.291 ops/s
Iteration   7: 723688.700 ops/s
Iteration   8: 751542.847 ops/s
Iteration   9: 735335.290 ops/s
Iteration  10: 724251.440 ops/s
Iteration  11: 742971.881 ops/s
Iteration  12: 718745.487 ops/s
Iteration  13: 778594.720 ops/s
Iteration  14: 703866.223 ops/s
Iteration  15: 738648.481 ops/s
Iteration  16: 746705.441 ops/s
Iteration  17: 748690.922 ops/s
Iteration  18: 725748.264 ops/s
Iteration  19: 746241.252 ops/s
Iteration  20: 757186.917 ops/s
Iteration  21: 719880.834 ops/s
Iteration  22: 758697.383 ops/s
Iteration  23: 729881.866 ops/s
Iteration  24: 740049.502 ops/s
Iteration  25: 740229.152 ops/s
Iteration  26: 737779.799 ops/s
Iteration  27: 739661.073 ops/s
Iteration  28: 738219.572 ops/s
Iteration  29: 729415.103 ops/s
Iteration  30: 741607.237 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_error":
  737112.677 ±(99.9%) 11472.923 ops/s [Average]
  (min, avg, max) = (703866.223, 737112.677, 778594.720), stdev = 17172.132
  CI (99.9%): [725639.754, 748585.600] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score       Error  Units
SingleOfTypeTest._Benchmark.benchmark_error  thrpt   30  737112.677 ± 11472.923  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_errorNotInstance$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_errorNotInstance

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157341.440 ops/s
# Warmup Iteration   2: 572244.334 ops/s
# Warmup Iteration   3: 666214.230 ops/s
# Warmup Iteration   4: 698075.458 ops/s
# Warmup Iteration   5: 675217.168 ops/s
# Warmup Iteration   6: 670612.267 ops/s
# Warmup Iteration   7: 688907.723 ops/s
# Warmup Iteration   8: 676824.226 ops/s
# Warmup Iteration   9: 626253.541 ops/s
# Warmup Iteration  10: 680835.992 ops/s
# Warmup Iteration  11: 651920.153 ops/s
# Warmup Iteration  12: 697213.735 ops/s
# Warmup Iteration  13: 643713.855 ops/s
# Warmup Iteration  14: 679852.708 ops/s
# Warmup Iteration  15: 711909.127 ops/s
# Warmup Iteration  16: 668066.218 ops/s
# Warmup Iteration  17: 735692.707 ops/s
# Warmup Iteration  18: 757726.164 ops/s
# Warmup Iteration  19: 467252.668 ops/s
# Warmup Iteration  20: 740258.042 ops/s
# Warmup Iteration  21: 757607.474 ops/s
# Warmup Iteration  22: 701468.175 ops/s
# Warmup Iteration  23: 745678.698 ops/s
# Warmup Iteration  24: 721140.873 ops/s
# Warmup Iteration  25: 719161.337 ops/s
# Warmup Iteration  26: 751084.500 ops/s
# Warmup Iteration  27: 720310.454 ops/s
# Warmup Iteration  28: 697636.377 ops/s
# Warmup Iteration  29: 734522.614 ops/s
# Warmup Iteration  30: 731245.603 ops/s
Iteration   1: 725442.240 ops/s
Iteration   2: 736059.159 ops/s
Iteration   3: 713162.115 ops/s
Iteration   4: 732329.866 ops/s
Iteration   5: 748850.123 ops/s
Iteration   6: 709731.984 ops/s
Iteration   7: 742973.983 ops/s
Iteration   8: 719573.051 ops/s
Iteration   9: 731422.297 ops/s
Iteration  10: 687460.219 ops/s
Iteration  11: 733249.600 ops/s
Iteration  12: 722017.135 ops/s
Iteration  13: 716321.126 ops/s
Iteration  14: 739081.882 ops/s
Iteration  15: 720912.251 ops/s
Iteration  16: 686256.494 ops/s
Iteration  17: 726544.146 ops/s
Iteration  18: 711253.125 ops/s
Iteration  19: 736646.352 ops/s
Iteration  20: 684432.893 ops/s
Iteration  21: 709979.467 ops/s
Iteration  22: 727200.576 ops/s
Iteration  23: 727427.068 ops/s
Iteration  24: 733258.059 ops/s
Iteration  25: 741482.186 ops/s
Iteration  26: 711168.760 ops/s
Iteration  27: 753607.624 ops/s
Iteration  28: 721937.493 ops/s
Iteration  29: 736110.179 ops/s
Iteration  30: 718224.782 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_errorNotInstance":
  723470.541 ±(99.9%) 11409.154 ops/s [Average]
  (min, avg, max) = (684432.893, 723470.541, 753607.624), stdev = 17076.685
  CI (99.9%): [712061.388, 734879.695] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
SingleOfTypeTest._Benchmark.benchmark_errorNotInstance  thrpt   30  723470.541 ± 11409.154  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 311030.298 ops/s
# Warmup Iteration   2: 565976.972 ops/s
# Warmup Iteration   3: 751336.326 ops/s
# Warmup Iteration   4: 677262.712 ops/s
# Warmup Iteration   5: 689623.901 ops/s
# Warmup Iteration   6: 680500.741 ops/s
# Warmup Iteration   7: 688794.139 ops/s
# Warmup Iteration   8: 703790.746 ops/s
# Warmup Iteration   9: 762086.343 ops/s
# Warmup Iteration  10: 707606.104 ops/s
# Warmup Iteration  11: 721507.076 ops/s
# Warmup Iteration  12: 748529.034 ops/s
# Warmup Iteration  13: 703366.537 ops/s
# Warmup Iteration  14: 746179.776 ops/s
# Warmup Iteration  15: 704722.220 ops/s
# Warmup Iteration  16: 723740.223 ops/s
# Warmup Iteration  17: 788637.119 ops/s
# Warmup Iteration  18: 767232.782 ops/s
# Warmup Iteration  19: 741697.409 ops/s
# Warmup Iteration  20: 776203.131 ops/s
# Warmup Iteration  21: 749297.959 ops/s
# Warmup Iteration  22: 758500.078 ops/s
# Warmup Iteration  23: 804227.966 ops/s
# Warmup Iteration  24: 735993.454 ops/s
# Warmup Iteration  25: 739805.165 ops/s
# Warmup Iteration  26: 804499.108 ops/s
# Warmup Iteration  27: 745894.092 ops/s
# Warmup Iteration  28: 776690.554 ops/s
# Warmup Iteration  29: 750088.850 ops/s
# Warmup Iteration  30: 754631.332 ops/s
Iteration   1: 774084.646 ops/s
Iteration   2: 729313.230 ops/s
Iteration   3: 783950.150 ops/s
Iteration   4: 727918.967 ops/s
Iteration   5: 750258.518 ops/s
Iteration   6: 780959.952 ops/s
Iteration   7: 749207.790 ops/s
Iteration   8: 778860.928 ops/s
Iteration   9: 741432.067 ops/s
Iteration  10: 782404.796 ops/s
Iteration  11: 754810.369 ops/s
Iteration  12: 786094.324 ops/s
Iteration  13: 750668.372 ops/s
Iteration  14: 750017.608 ops/s
Iteration  15: 770054.604 ops/s
Iteration  16: 775879.641 ops/s
Iteration  17: 741807.129 ops/s
Iteration  18: 791136.654 ops/s
Iteration  19: 764427.180 ops/s
Iteration  20: 734853.197 ops/s
Iteration  21: 741539.211 ops/s
Iteration  22: 779982.684 ops/s
Iteration  23: 771368.504 ops/s
Iteration  24: 756271.690 ops/s
Iteration  25: 764957.120 ops/s
Iteration  26: 757968.494 ops/s
Iteration  27: 788244.813 ops/s
Iteration  28: 756875.140 ops/s
Iteration  29: 747687.288 ops/s
Iteration  30: 785912.355 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateError":
  762298.247 ±(99.9%) 12517.932 ops/s [Average]
  (min, avg, max) = (727918.967, 762298.247, 791136.654), stdev = 18736.253
  CI (99.9%): [749780.315, 774816.180] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateError  thrpt   30  762298.247 ± 12517.932  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_nextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_nextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 134823.572 ops/s
# Warmup Iteration   2: 511907.197 ops/s
# Warmup Iteration   3: 559233.561 ops/s
# Warmup Iteration   4: 588379.854 ops/s
# Warmup Iteration   5: 582202.332 ops/s
# Warmup Iteration   6: 584601.538 ops/s
# Warmup Iteration   7: 601017.175 ops/s
# Warmup Iteration   8: 572402.917 ops/s
# Warmup Iteration   9: 575348.163 ops/s
# Warmup Iteration  10: 603136.192 ops/s
# Warmup Iteration  11: 587086.034 ops/s
# Warmup Iteration  12: 578257.870 ops/s
# Warmup Iteration  13: 586454.197 ops/s
# Warmup Iteration  14: 470311.624 ops/s
# Warmup Iteration  15: 602427.402 ops/s
# Warmup Iteration  16: 551908.642 ops/s
# Warmup Iteration  17: 627719.314 ops/s
# Warmup Iteration  18: 622941.112 ops/s
# Warmup Iteration  19: 639919.178 ops/s
# Warmup Iteration  20: 636509.526 ops/s
# Warmup Iteration  21: 632982.661 ops/s
# Warmup Iteration  22: 605804.266 ops/s
# Warmup Iteration  23: 625311.360 ops/s
# Warmup Iteration  24: 613886.976 ops/s
# Warmup Iteration  25: 619927.082 ops/s
# Warmup Iteration  26: 594862.040 ops/s
# Warmup Iteration  27: 630031.425 ops/s
# Warmup Iteration  28: 594422.663 ops/s
# Warmup Iteration  29: 632655.082 ops/s
# Warmup Iteration  30: 605273.645 ops/s
Iteration   1: 640868.490 ops/s
Iteration   2: 607134.170 ops/s
Iteration   3: 631470.889 ops/s
Iteration   4: 624134.101 ops/s
Iteration   5: 603969.904 ops/s
Iteration   6: 644602.050 ops/s
Iteration   7: 596991.143 ops/s
Iteration   8: 625628.722 ops/s
Iteration   9: 636861.129 ops/s
Iteration  10: 582295.163 ops/s
Iteration  11: 592471.651 ops/s
Iteration  12: 610703.747 ops/s
Iteration  13: 636767.316 ops/s
Iteration  14: 602740.204 ops/s
Iteration  15: 624476.605 ops/s
Iteration  16: 616483.719 ops/s
Iteration  17: 631952.555 ops/s
Iteration  18: 608005.385 ops/s
Iteration  19: 617952.141 ops/s
Iteration  20: 639316.873 ops/s
Iteration  21: 603913.749 ops/s
Iteration  22: 640191.388 ops/s
Iteration  23: 603664.405 ops/s
Iteration  24: 612710.145 ops/s
Iteration  25: 639726.662 ops/s
Iteration  26: 598065.688 ops/s
Iteration  27: 638719.253 ops/s
Iteration  28: 614522.706 ops/s
Iteration  29: 624450.817 ops/s
Iteration  30: 647645.254 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_nextThrows":
  619947.868 ±(99.9%) 11782.834 ops/s [Average]
  (min, avg, max) = (582295.163, 619947.868, 647645.254), stdev = 17635.992
  CI (99.9%): [608165.034, 631730.701] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
SingleZipIterableTest._Benchmark.benchmark_nextThrows  thrpt   30  619947.868 ± 11782.834  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_iterableNullPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_iterableNullPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 102389.306 ops/s
# Warmup Iteration   2: 560236.223 ops/s
# Warmup Iteration   3: 653766.593 ops/s
# Warmup Iteration   4: 564907.810 ops/s
# Warmup Iteration   5: 712897.169 ops/s
# Warmup Iteration   6: 666064.922 ops/s
# Warmup Iteration   7: 688576.623 ops/s
# Warmup Iteration   8: 603582.783 ops/s
# Warmup Iteration   9: 669812.018 ops/s
# Warmup Iteration  10: 699083.405 ops/s
# Warmup Iteration  11: 649225.429 ops/s
# Warmup Iteration  12: 714184.961 ops/s
# Warmup Iteration  13: 698719.297 ops/s
# Warmup Iteration  14: 679303.265 ops/s
# Warmup Iteration  15: 697781.841 ops/s
# Warmup Iteration  16: 681832.261 ops/s
# Warmup Iteration  17: 734774.808 ops/s
# Warmup Iteration  18: 726267.366 ops/s
# Warmup Iteration  19: 714319.490 ops/s
# Warmup Iteration  20: 760465.674 ops/s
# Warmup Iteration  21: 713505.547 ops/s
# Warmup Iteration  22: 725068.221 ops/s
# Warmup Iteration  23: 722803.188 ops/s
# Warmup Iteration  24: 705828.664 ops/s
# Warmup Iteration  25: 741070.614 ops/s
# Warmup Iteration  26: 707566.035 ops/s
# Warmup Iteration  27: 734246.415 ops/s
# Warmup Iteration  28: 720205.633 ops/s
# Warmup Iteration  29: 730164.781 ops/s
# Warmup Iteration  30: 735663.413 ops/s
Iteration   1: 716512.552 ops/s
Iteration   2: 742983.297 ops/s
Iteration   3: 699811.799 ops/s
Iteration   4: 754640.049 ops/s
Iteration   5: 705984.399 ops/s
Iteration   6: 726801.042 ops/s
Iteration   7: 761033.811 ops/s
Iteration   8: 699390.058 ops/s
Iteration   9: 730049.931 ops/s
Iteration  10: 716250.403 ops/s
Iteration  11: 748408.273 ops/s
Iteration  12: 721378.959 ops/s
Iteration  13: 729689.524 ops/s
Iteration  14: 742773.158 ops/s
Iteration  15: 751673.518 ops/s
Iteration  16: 721530.738 ops/s
Iteration  17: 724298.864 ops/s
Iteration  18: 725183.072 ops/s
Iteration  19: 751167.325 ops/s
Iteration  20: 685632.292 ops/s
Iteration  21: 731253.881 ops/s
Iteration  22: 739537.384 ops/s
Iteration  23: 721417.617 ops/s
Iteration  24: 759039.800 ops/s
Iteration  25: 701854.105 ops/s
Iteration  26: 742566.780 ops/s
Iteration  27: 705616.033 ops/s
Iteration  28: 752034.713 ops/s
Iteration  29: 700426.268 ops/s
Iteration  30: 716016.694 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_iterableNullPublisher":
  727498.544 ±(99.9%) 13623.123 ops/s [Average]
  (min, avg, max) = (685632.292, 727498.544, 761033.811), stdev = 20390.451
  CI (99.9%): [713875.422, 741121.667] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_iterableNullPublisher  thrpt   30  727498.544 ± 13623.123  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_singleSubscribe0$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_singleSubscribe0

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39533.910 ops/s
# Warmup Iteration   2: 127895.385 ops/s
# Warmup Iteration   3: 164283.134 ops/s
# Warmup Iteration   4: 202156.457 ops/s
# Warmup Iteration   5: 208032.422 ops/s
# Warmup Iteration   6: 206500.872 ops/s
# Warmup Iteration   7: 211871.545 ops/s
# Warmup Iteration   8: 160907.525 ops/s
# Warmup Iteration   9: 185632.871 ops/s
# Warmup Iteration  10: 215729.507 ops/s
# Warmup Iteration  11: 208144.013 ops/s
# Warmup Iteration  12: 204518.592 ops/s
# Warmup Iteration  13: 215532.208 ops/s
# Warmup Iteration  14: 208239.099 ops/s
# Warmup Iteration  15: 217289.268 ops/s
# Warmup Iteration  16: 212140.846 ops/s
# Warmup Iteration  17: 217509.789 ops/s
# Warmup Iteration  18: 215401.165 ops/s
# Warmup Iteration  19: 211221.566 ops/s
# Warmup Iteration  20: 218794.411 ops/s
# Warmup Iteration  21: 211471.549 ops/s
# Warmup Iteration  22: 218503.573 ops/s
# Warmup Iteration  23: 211508.716 ops/s
# Warmup Iteration  24: 215076.576 ops/s
# Warmup Iteration  25: 222800.731 ops/s
# Warmup Iteration  26: 216109.270 ops/s
# Warmup Iteration  27: 222310.172 ops/s
# Warmup Iteration  28: 214719.620 ops/s
# Warmup Iteration  29: 217226.204 ops/s
# Warmup Iteration  30: 225278.447 ops/s
Iteration   1: 213955.462 ops/s
Iteration   2: 214838.588 ops/s
Iteration   3: 209048.027 ops/s
Iteration   4: 228234.578 ops/s
Iteration   5: 214557.915 ops/s
Iteration   6: 211967.653 ops/s
Iteration   7: 220642.279 ops/s
Iteration   8: 220205.978 ops/s
Iteration   9: 222138.769 ops/s
Iteration  10: 210249.409 ops/s
Iteration  11: 220039.745 ops/s
Iteration  12: 215342.196 ops/s
Iteration  13: 220588.344 ops/s
Iteration  14: 216763.464 ops/s
Iteration  15: 211230.322 ops/s
Iteration  16: 219061.642 ops/s
Iteration  17: 223127.880 ops/s
Iteration  18: 210539.539 ops/s
Iteration  19: 207964.209 ops/s
Iteration  20: 222619.257 ops/s
Iteration  21: 207168.292 ops/s
Iteration  22: 218330.402 ops/s
Iteration  23: 216279.529 ops/s
Iteration  24: 216326.096 ops/s
Iteration  25: 226710.205 ops/s
Iteration  26: 212192.695 ops/s
Iteration  27: 215047.151 ops/s
Iteration  28: 222342.469 ops/s
Iteration  29: 217660.256 ops/s
Iteration  30: 224026.362 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_singleSubscribe0":
  216973.290 ±(99.9%) 3688.970 ops/s [Average]
  (min, avg, max) = (207168.292, 216973.290, 228234.578), stdev = 5521.477
  CI (99.9%): [213284.320, 220662.261] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_singleSubscribe0  thrpt   30  216973.290 ± 3688.970  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_singleSubscribe1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_singleSubscribe1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 37803.543 ops/s
# Warmup Iteration   2: 160393.529 ops/s
# Warmup Iteration   3: 197788.348 ops/s
# Warmup Iteration   4: 190302.640 ops/s
# Warmup Iteration   5: 200846.884 ops/s
# Warmup Iteration   6: 191392.636 ops/s
# Warmup Iteration   7: 222574.366 ops/s
# Warmup Iteration   8: 218580.466 ops/s
# Warmup Iteration   9: 208725.273 ops/s
# Warmup Iteration  10: 215360.048 ops/s
# Warmup Iteration  11: 212889.449 ops/s
# Warmup Iteration  12: 211329.793 ops/s
# Warmup Iteration  13: 217096.628 ops/s
# Warmup Iteration  14: 210258.459 ops/s
# Warmup Iteration  15: 212855.288 ops/s
# Warmup Iteration  16: 213149.205 ops/s
# Warmup Iteration  17: 220648.364 ops/s
# Warmup Iteration  18: 222023.266 ops/s
# Warmup Iteration  19: 216237.867 ops/s
# Warmup Iteration  20: 223350.423 ops/s
# Warmup Iteration  21: 227853.176 ops/s
# Warmup Iteration  22: 217456.118 ops/s
# Warmup Iteration  23: 218648.622 ops/s
# Warmup Iteration  24: 223823.652 ops/s
# Warmup Iteration  25: 216483.955 ops/s
# Warmup Iteration  26: 218227.935 ops/s
# Warmup Iteration  27: 227462.028 ops/s
# Warmup Iteration  28: 219330.423 ops/s
# Warmup Iteration  29: 218754.536 ops/s
# Warmup Iteration  30: 227425.832 ops/s
Iteration   1: 213225.400 ops/s
Iteration   2: 225458.370 ops/s
Iteration   3: 214711.100 ops/s
Iteration   4: 221239.340 ops/s
Iteration   5: 217799.789 ops/s
Iteration   6: 214117.814 ops/s
Iteration   7: 220297.235 ops/s
Iteration   8: 217133.354 ops/s
Iteration   9: 223534.945 ops/s
Iteration  10: 231074.691 ops/s
Iteration  11: 214701.972 ops/s
Iteration  12: 227178.388 ops/s
Iteration  13: 216108.208 ops/s
Iteration  14: 220436.330 ops/s
Iteration  15: 220195.820 ops/s
Iteration  16: 212432.613 ops/s
Iteration  17: 221869.609 ops/s
Iteration  18: 214065.855 ops/s
Iteration  19: 218910.798 ops/s
Iteration  20: 222055.057 ops/s
Iteration  21: 218423.244 ops/s
Iteration  22: 224994.855 ops/s
Iteration  23: 218822.990 ops/s
Iteration  24: 220515.491 ops/s
Iteration  25: 221997.991 ops/s
Iteration  26: 218030.121 ops/s
Iteration  27: 226168.567 ops/s
Iteration  28: 216525.441 ops/s
Iteration  29: 225664.239 ops/s
Iteration  30: 213292.968 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_singleSubscribe1":
  219699.420 ±(99.9%) 3153.035 ops/s [Average]
  (min, avg, max) = (212432.613, 219699.420, 231074.691), stdev = 4719.315
  CI (99.9%): [216546.385, 222852.455] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_singleSubscribe1  thrpt   30  219699.420 ± 3153.035  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_errorNotMatches$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_errorNotMatches

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 92492.056 ops/s
# Warmup Iteration   2: 412959.693 ops/s
# Warmup Iteration   3: 496698.174 ops/s
# Warmup Iteration   4: 471428.352 ops/s
# Warmup Iteration   5: 542396.713 ops/s
# Warmup Iteration   6: 539437.546 ops/s
# Warmup Iteration   7: 528554.868 ops/s
# Warmup Iteration   8: 570540.145 ops/s
# Warmup Iteration   9: 597693.083 ops/s
# Warmup Iteration  10: 564493.641 ops/s
# Warmup Iteration  11: 573847.134 ops/s
# Warmup Iteration  12: 586752.101 ops/s
# Warmup Iteration  13: 564410.662 ops/s
# Warmup Iteration  14: 595074.004 ops/s
# Warmup Iteration  15: 561188.137 ops/s
# Warmup Iteration  16: 594607.824 ops/s
# Warmup Iteration  17: 585086.767 ops/s
# Warmup Iteration  18: 610921.309 ops/s
# Warmup Iteration  19: 622010.798 ops/s
# Warmup Iteration  20: 589364.077 ops/s
# Warmup Iteration  21: 616369.799 ops/s
# Warmup Iteration  22: 629683.463 ops/s
# Warmup Iteration  23: 608015.549 ops/s
# Warmup Iteration  24: 561370.654 ops/s
# Warmup Iteration  25: 615964.190 ops/s
# Warmup Iteration  26: 588483.827 ops/s
# Warmup Iteration  27: 613655.607 ops/s
# Warmup Iteration  28: 606019.511 ops/s
# Warmup Iteration  29: 580419.943 ops/s
# Warmup Iteration  30: 615842.563 ops/s
Iteration   1: 586562.227 ops/s
Iteration   2: 596043.044 ops/s
Iteration   3: 583566.889 ops/s
Iteration   4: 599395.657 ops/s
Iteration   5: 618781.023 ops/s
Iteration   6: 587124.542 ops/s
Iteration   7: 625154.348 ops/s
Iteration   8: 615593.867 ops/s
Iteration   9: 589793.580 ops/s
Iteration  10: 624778.000 ops/s
Iteration  11: 569629.423 ops/s
Iteration  12: 593374.261 ops/s
Iteration  13: 606955.773 ops/s
Iteration  14: 593408.907 ops/s
Iteration  15: 601172.518 ops/s
Iteration  16: 592315.765 ops/s
Iteration  17: 596471.566 ops/s
Iteration  18: 615440.259 ops/s
Iteration  19: 605158.609 ops/s
Iteration  20: 619656.047 ops/s
Iteration  21: 602871.372 ops/s
Iteration  22: 624870.692 ops/s
Iteration  23: 617805.288 ops/s
Iteration  24: 609443.130 ops/s
Iteration  25: 619884.620 ops/s
Iteration  26: 622701.789 ops/s
Iteration  27: 593730.966 ops/s
Iteration  28: 617761.114 ops/s
Iteration  29: 611382.102 ops/s
Iteration  30: 604353.807 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOnErrorCompleteTest._Benchmark.benchmark_errorNotMatches":
  604839.373 ±(99.9%) 9694.560 ops/s [Average]
  (min, avg, max) = (569629.423, 604839.373, 625154.348), stdev = 14510.362
  CI (99.9%): [595144.813, 614533.933] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SingleOnErrorCompleteTest._Benchmark.benchmark_errorNotMatches  thrpt   30  604839.373 ± 9694.560  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_bipredicateThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_bipredicateThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25120.068 ops/s
# Warmup Iteration   2: 155266.572 ops/s
# Warmup Iteration   3: 190806.472 ops/s
# Warmup Iteration   4: 177081.265 ops/s
# Warmup Iteration   5: 179693.222 ops/s
# Warmup Iteration   6: 188653.777 ops/s
# Warmup Iteration   7: 181833.696 ops/s
# Warmup Iteration   8: 200350.876 ops/s
# Warmup Iteration   9: 191553.349 ops/s
# Warmup Iteration  10: 190816.526 ops/s
# Warmup Iteration  11: 191030.714 ops/s
# Warmup Iteration  12: 193852.698 ops/s
# Warmup Iteration  13: 195429.498 ops/s
# Warmup Iteration  14: 189128.863 ops/s
# Warmup Iteration  15: 191375.417 ops/s
# Warmup Iteration  16: 198890.315 ops/s
# Warmup Iteration  17: 196772.388 ops/s
# Warmup Iteration  18: 194051.319 ops/s
# Warmup Iteration  19: 204247.010 ops/s
# Warmup Iteration  20: 198854.428 ops/s
# Warmup Iteration  21: 206520.050 ops/s
# Warmup Iteration  22: 193517.156 ops/s
# Warmup Iteration  23: 202030.449 ops/s
# Warmup Iteration  24: 202186.145 ops/s
# Warmup Iteration  25: 204333.285 ops/s
# Warmup Iteration  26: 197650.368 ops/s
# Warmup Iteration  27: 200931.904 ops/s
# Warmup Iteration  28: 201333.612 ops/s
# Warmup Iteration  29: 200445.698 ops/s
# Warmup Iteration  30: 196022.474 ops/s
Iteration   1: 194192.574 ops/s
Iteration   2: 203817.774 ops/s
Iteration   3: 196690.937 ops/s
Iteration   4: 204233.638 ops/s
Iteration   5: 208940.451 ops/s
Iteration   6: 195424.367 ops/s
Iteration   7: 201899.969 ops/s
Iteration   8: 209135.596 ops/s
Iteration   9: 197164.066 ops/s
Iteration  10: 199847.788 ops/s
Iteration  11: 202201.465 ops/s
Iteration  12: 198716.234 ops/s
Iteration  13: 200853.396 ops/s
Iteration  14: 203571.910 ops/s
Iteration  15: 203272.483 ops/s
Iteration  16: 200592.826 ops/s
Iteration  17: 199927.030 ops/s
Iteration  18: 207693.568 ops/s
Iteration  19: 199604.092 ops/s
Iteration  20: 198141.518 ops/s
Iteration  21: 201015.267 ops/s
Iteration  22: 201786.320 ops/s
Iteration  23: 201955.270 ops/s
Iteration  24: 190073.811 ops/s
Iteration  25: 206748.139 ops/s
Iteration  26: 199784.591 ops/s
Iteration  27: 199111.334 ops/s
Iteration  28: 203864.347 ops/s
Iteration  29: 200671.441 ops/s
Iteration  30: 169296.746 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_bipredicateThrows":
  200007.632 ±(99.9%) 4769.742 ops/s [Average]
  (min, avg, max) = (169296.746, 200007.632, 209135.596), stdev = 7139.126
  CI (99.9%): [195237.889, 204777.374] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableRetryWithPredicateTest._Benchmark.benchmark_bipredicateThrows  thrpt   30  200007.632 ± 4769.742  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedInternalState$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedInternalState

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.734 ops/s
# Warmup Iteration   2: 16739.194 ops/s
# Warmup Iteration   3: 69956.354 ops/s
# Warmup Iteration   4: 66326.093 ops/s
# Warmup Iteration   5: 86513.251 ops/s
# Warmup Iteration   6: 90147.760 ops/s
# Warmup Iteration   7: 289239.664 ops/s
# Warmup Iteration   8: 298936.718 ops/s
# Warmup Iteration   9: 342321.836 ops/s
# Warmup Iteration  10: 331594.758 ops/s
# Warmup Iteration  11: 324905.257 ops/s
# Warmup Iteration  12: 350387.232 ops/s
# Warmup Iteration  13: 335075.004 ops/s
# Warmup Iteration  14: 331145.757 ops/s
# Warmup Iteration  15: 328756.060 ops/s
# Warmup Iteration  16: 324493.786 ops/s
# Warmup Iteration  17: 342422.841 ops/s
# Warmup Iteration  18: 345102.501 ops/s
# Warmup Iteration  19: 332779.329 ops/s
# Warmup Iteration  20: 330582.608 ops/s
# Warmup Iteration  21: 343353.882 ops/s
# Warmup Iteration  22: 337168.798 ops/s
# Warmup Iteration  23: 320495.417 ops/s
# Warmup Iteration  24: 333259.752 ops/s
# Warmup Iteration  25: 326709.051 ops/s
# Warmup Iteration  26: 344034.218 ops/s
# Warmup Iteration  27: 329150.962 ops/s
# Warmup Iteration  28: 337745.949 ops/s
# Warmup Iteration  29: 344201.602 ops/s
# Warmup Iteration  30: 325445.064 ops/s
Iteration   1: 344488.394 ops/s
Iteration   2: 332277.308 ops/s
Iteration   3: 319456.688 ops/s
Iteration   4: 339394.887 ops/s
Iteration   5: 324477.993 ops/s
Iteration   6: 332364.114 ops/s
Iteration   7: 338533.280 ops/s
Iteration   8: 327297.942 ops/s
Iteration   9: 341245.320 ops/s
Iteration  10: 332104.111 ops/s
Iteration  11: 347384.360 ops/s
Iteration  12: 328324.533 ops/s
Iteration  13: 333105.482 ops/s
Iteration  14: 344648.074 ops/s
Iteration  15: 343174.294 ops/s
Iteration  16: 326036.096 ops/s
Iteration  17: 344153.079 ops/s
Iteration  18: 329792.678 ops/s
Iteration  19: 334895.086 ops/s
Iteration  20: 333468.733 ops/s
Iteration  21: 335209.283 ops/s
Iteration  22: 329334.647 ops/s
Iteration  23: 325701.833 ops/s
Iteration  24: 339012.960 ops/s
Iteration  25: 324216.133 ops/s
Iteration  26: 336986.905 ops/s
Iteration  27: 327743.414 ops/s
Iteration  28: 332545.873 ops/s
Iteration  29: 335293.359 ops/s
Iteration  30: 325066.088 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedInternalState":
  333591.098 ±(99.9%) 4809.961 ops/s [Average]
  (min, avg, max) = (319456.688, 333591.098, 347384.360), stdev = 7199.324
  CI (99.9%): [328781.137, 338401.060] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_timedInternalState  thrpt   30  333591.098 ± 4809.961  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_errorNotMatches$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_errorNotMatches

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93055.019 ops/s
# Warmup Iteration   2: 421401.115 ops/s
# Warmup Iteration   3: 528965.610 ops/s
# Warmup Iteration   4: 509284.730 ops/s
# Warmup Iteration   5: 577906.496 ops/s
# Warmup Iteration   6: 576983.906 ops/s
# Warmup Iteration   7: 559868.887 ops/s
# Warmup Iteration   8: 589404.580 ops/s
# Warmup Iteration   9: 565356.801 ops/s
# Warmup Iteration  10: 590620.640 ops/s
# Warmup Iteration  11: 575765.477 ops/s
# Warmup Iteration  12: 553992.956 ops/s
# Warmup Iteration  13: 591482.521 ops/s
# Warmup Iteration  14: 562529.051 ops/s
# Warmup Iteration  15: 570484.465 ops/s
# Warmup Iteration  16: 556596.383 ops/s
# Warmup Iteration  17: 592761.154 ops/s
# Warmup Iteration  18: 626578.508 ops/s
# Warmup Iteration  19: 591240.026 ops/s
# Warmup Iteration  20: 610196.648 ops/s
# Warmup Iteration  21: 592980.716 ops/s
# Warmup Iteration  22: 603499.541 ops/s
# Warmup Iteration  23: 590337.787 ops/s
# Warmup Iteration  24: 587605.253 ops/s
# Warmup Iteration  25: 625206.064 ops/s
# Warmup Iteration  26: 624551.256 ops/s
# Warmup Iteration  27: 594750.787 ops/s
# Warmup Iteration  28: 616220.511 ops/s
# Warmup Iteration  29: 590002.933 ops/s
# Warmup Iteration  30: 592095.870 ops/s
Iteration   1: 632511.509 ops/s
Iteration   2: 581082.017 ops/s
Iteration   3: 593134.358 ops/s
Iteration   4: 611198.617 ops/s
Iteration   5: 585617.655 ops/s
Iteration   6: 609151.813 ops/s
Iteration   7: 584303.086 ops/s
Iteration   8: 612099.102 ops/s
Iteration   9: 578285.111 ops/s
Iteration  10: 602101.054 ops/s
Iteration  11: 624760.845 ops/s
Iteration  12: 590229.251 ops/s
Iteration  13: 614168.867 ops/s
Iteration  14: 626011.885 ops/s
Iteration  15: 599111.964 ops/s
Iteration  16: 588107.422 ops/s
Iteration  17: 604545.434 ops/s
Iteration  18: 619472.829 ops/s
Iteration  19: 576887.647 ops/s
Iteration  20: 613495.886 ops/s
Iteration  21: 607446.310 ops/s
Iteration  22: 588655.308 ops/s
Iteration  23: 591422.919 ops/s
Iteration  24: 447076.692 ops/s
Iteration  25: 624010.791 ops/s
Iteration  26: 590431.735 ops/s
Iteration  27: 598357.555 ops/s
Iteration  28: 583749.910 ops/s
Iteration  29: 580605.696 ops/s
Iteration  30: 622777.891 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_errorNotMatches":
  596027.039 ±(99.9%) 21699.269 ops/s [Average]
  (min, avg, max) = (447076.692, 596027.039, 632511.509), stdev = 32478.447
  CI (99.9%): [574327.770, 617726.308] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableOnErrorCompleteTest._Benchmark.benchmark_errorNotMatches  thrpt   30  596027.039 ± 21699.269  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_hasNextCrashConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_hasNextCrashConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 168557.589 ops/s
# Warmup Iteration   2: 466562.502 ops/s
# Warmup Iteration   3: 546111.102 ops/s
# Warmup Iteration   4: 493121.800 ops/s
# Warmup Iteration   5: 550258.260 ops/s
# Warmup Iteration   6: 540262.592 ops/s
# Warmup Iteration   7: 543497.394 ops/s
# Warmup Iteration   8: 493904.625 ops/s
# Warmup Iteration   9: 553545.074 ops/s
# Warmup Iteration  10: 510112.316 ops/s
# Warmup Iteration  11: 521430.923 ops/s
# Warmup Iteration  12: 561075.441 ops/s
# Warmup Iteration  13: 536173.872 ops/s
# Warmup Iteration  14: 550948.772 ops/s
# Warmup Iteration  15: 551905.598 ops/s
# Warmup Iteration  16: 550441.217 ops/s
# Warmup Iteration  17: 576663.117 ops/s
# Warmup Iteration  18: 571732.586 ops/s
# Warmup Iteration  19: 588229.329 ops/s
# Warmup Iteration  20: 556858.866 ops/s
# Warmup Iteration  21: 588253.742 ops/s
# Warmup Iteration  22: 579337.043 ops/s
# Warmup Iteration  23: 565207.804 ops/s
# Warmup Iteration  24: 582006.735 ops/s
# Warmup Iteration  25: 600905.084 ops/s
# Warmup Iteration  26: 551467.228 ops/s
# Warmup Iteration  27: 569527.715 ops/s
# Warmup Iteration  28: 576097.653 ops/s
# Warmup Iteration  29: 560938.124 ops/s
# Warmup Iteration  30: 580325.427 ops/s
Iteration   1: 548333.139 ops/s
Iteration   2: 571385.541 ops/s
Iteration   3: 568189.711 ops/s
Iteration   4: 554350.375 ops/s
Iteration   5: 588356.677 ops/s
Iteration   6: 556121.754 ops/s
Iteration   7: 575655.038 ops/s
Iteration   8: 555455.826 ops/s
Iteration   9: 558025.472 ops/s
Iteration  10: 599070.384 ops/s
Iteration  11: 569458.391 ops/s
Iteration  12: 578495.125 ops/s
Iteration  13: 564687.694 ops/s
Iteration  14: 573011.458 ops/s
Iteration  15: 572943.889 ops/s
Iteration  16: 588450.955 ops/s
Iteration  17: 549871.354 ops/s
Iteration  18: 588440.494 ops/s
Iteration  19: 573501.268 ops/s
Iteration  20: 583654.517 ops/s
Iteration  21: 594730.905 ops/s
Iteration  22: 565667.557 ops/s
Iteration  23: 582259.327 ops/s
Iteration  24: 559962.262 ops/s
Iteration  25: 587549.876 ops/s
Iteration  26: 561895.795 ops/s
Iteration  27: 566407.700 ops/s
Iteration  28: 602051.392 ops/s
Iteration  29: 569548.112 ops/s
Iteration  30: 584514.497 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_hasNextCrashConditional":
  573068.216 ±(99.9%) 9695.903 ops/s [Average]
  (min, avg, max) = (548333.139, 573068.216, 602051.392), stdev = 14512.373
  CI (99.9%): [563372.313, 582764.119] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableFromStreamTest._Benchmark.benchmark_hasNextCrashConditional  thrpt   30  573068.216 ± 9695.903  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_noneagerMapperThrowsDisposerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_noneagerMapperThrowsDisposerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26064.580 ops/s
# Warmup Iteration   2: 82191.372 ops/s
# Warmup Iteration   3: 160989.964 ops/s
# Warmup Iteration   4: 170036.154 ops/s
# Warmup Iteration   5: 177698.963 ops/s
# Warmup Iteration   6: 169530.470 ops/s
# Warmup Iteration   7: 174869.163 ops/s
# Warmup Iteration   8: 168679.783 ops/s
# Warmup Iteration   9: 167821.542 ops/s
# Warmup Iteration  10: 173570.773 ops/s
# Warmup Iteration  11: 169366.516 ops/s
# Warmup Iteration  12: 169595.148 ops/s
# Warmup Iteration  13: 171818.247 ops/s
# Warmup Iteration  14: 176169.053 ops/s
# Warmup Iteration  15: 170627.112 ops/s
# Warmup Iteration  16: 175675.287 ops/s
# Warmup Iteration  17: 183589.081 ops/s
# Warmup Iteration  18: 170833.309 ops/s
# Warmup Iteration  19: 182056.244 ops/s
# Warmup Iteration  20: 174586.578 ops/s
# Warmup Iteration  21: 182202.827 ops/s
# Warmup Iteration  22: 177845.707 ops/s
# Warmup Iteration  23: 173583.499 ops/s
# Warmup Iteration  24: 171267.269 ops/s
# Warmup Iteration  25: 179529.966 ops/s
# Warmup Iteration  26: 185161.286 ops/s
# Warmup Iteration  27: 176318.597 ops/s
# Warmup Iteration  28: 179101.044 ops/s
# Warmup Iteration  29: 179149.156 ops/s
# Warmup Iteration  30: 173038.891 ops/s
Iteration   1: 180805.990 ops/s
Iteration   2: 188546.159 ops/s
Iteration   3: 178062.556 ops/s
Iteration   4: 180856.269 ops/s
Iteration   5: 179697.140 ops/s
Iteration   6: 174704.664 ops/s
Iteration   7: 187475.650 ops/s
Iteration   8: 172429.557 ops/s
Iteration   9: 184953.238 ops/s
Iteration  10: 176769.914 ops/s
Iteration  11: 180333.460 ops/s
Iteration  12: 182604.238 ops/s
Iteration  13: 180439.353 ops/s
Iteration  14: 183432.668 ops/s
Iteration  15: 186543.167 ops/s
Iteration  16: 176672.178 ops/s
Iteration  17: 189200.963 ops/s
Iteration  18: 158982.550 ops/s
Iteration  19: 166907.572 ops/s
Iteration  20: 177177.166 ops/s
Iteration  21: 187229.432 ops/s
Iteration  22: 175922.352 ops/s
Iteration  23: 187380.578 ops/s
Iteration  24: 176073.062 ops/s
Iteration  25: 184226.444 ops/s
Iteration  26: 181566.168 ops/s
Iteration  27: 178406.992 ops/s
Iteration  28: 180657.314 ops/s
Iteration  29: 175457.905 ops/s
Iteration  30: 181024.205 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_noneagerMapperThrowsDisposerThrows":
  179817.963 ±(99.9%) 4325.875 ops/s [Average]
  (min, avg, max) = (158982.550, 179817.963, 189200.963), stdev = 6474.766
  CI (99.9%): [175492.089, 184143.838] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
SingleUsingTest._Benchmark.benchmark_noneagerMapperThrowsDisposerThrows  thrpt   30  179817.963 ± 4325.875  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_onSubscribeCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_onSubscribeCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20529.409 ops/s
# Warmup Iteration   2: 113795.333 ops/s
# Warmup Iteration   3: 154942.795 ops/s
# Warmup Iteration   4: 147485.485 ops/s
# Warmup Iteration   5: 157258.721 ops/s
# Warmup Iteration   6: 171969.080 ops/s
# Warmup Iteration   7: 165925.286 ops/s
# Warmup Iteration   8: 172599.701 ops/s
# Warmup Iteration   9: 168702.725 ops/s
# Warmup Iteration  10: 167974.663 ops/s
# Warmup Iteration  11: 167593.518 ops/s
# Warmup Iteration  12: 173409.562 ops/s
# Warmup Iteration  13: 166796.615 ops/s
# Warmup Iteration  14: 164032.405 ops/s
# Warmup Iteration  15: 171999.563 ops/s
# Warmup Iteration  16: 162314.330 ops/s
# Warmup Iteration  17: 182824.142 ops/s
# Warmup Iteration  18: 170913.457 ops/s
# Warmup Iteration  19: 180005.437 ops/s
# Warmup Iteration  20: 171730.322 ops/s
# Warmup Iteration  21: 181355.792 ops/s
# Warmup Iteration  22: 178361.078 ops/s
# Warmup Iteration  23: 172188.888 ops/s
# Warmup Iteration  24: 171653.296 ops/s
# Warmup Iteration  25: 182698.467 ops/s
# Warmup Iteration  26: 178261.892 ops/s
# Warmup Iteration  27: 171310.650 ops/s
# Warmup Iteration  28: 180004.601 ops/s
# Warmup Iteration  29: 172496.505 ops/s
# Warmup Iteration  30: 183997.698 ops/s
Iteration   1: 171312.341 ops/s
Iteration   2: 179712.504 ops/s
Iteration   3: 171646.791 ops/s
Iteration   4: 175692.120 ops/s
Iteration   5: 179422.007 ops/s
Iteration   6: 171886.080 ops/s
Iteration   7: 181027.652 ops/s
Iteration   8: 173068.562 ops/s
Iteration   9: 179949.123 ops/s
Iteration  10: 173656.100 ops/s
Iteration  11: 175592.501 ops/s
Iteration  12: 177781.510 ops/s
Iteration  13: 170522.034 ops/s
Iteration  14: 180088.721 ops/s
Iteration  15: 175555.528 ops/s
Iteration  16: 174418.231 ops/s
Iteration  17: 182823.525 ops/s
Iteration  18: 178188.530 ops/s
Iteration  19: 170772.222 ops/s
Iteration  20: 182515.820 ops/s
Iteration  21: 170910.476 ops/s
Iteration  22: 180276.594 ops/s
Iteration  23: 173174.704 ops/s
Iteration  24: 178724.699 ops/s
Iteration  25: 174908.286 ops/s
Iteration  26: 175221.520 ops/s
Iteration  27: 177381.446 ops/s
Iteration  28: 176153.566 ops/s
Iteration  29: 173336.239 ops/s
Iteration  30: 176888.596 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_onSubscribeCrash":
  176086.934 ±(99.9%) 2428.911 ops/s [Average]
  (min, avg, max) = (170522.034, 176086.934, 182823.525), stdev = 3635.479
  CI (99.9%): [173658.024, 178515.845] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
SingleDoOnTest._Benchmark.benchmark_onSubscribeCrash  thrpt   30  176086.934 ± 2428.911  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactBackpressure2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactBackpressure2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36134.366 ops/s
# Warmup Iteration   2: 86600.605 ops/s
# Warmup Iteration   3: 242551.757 ops/s
# Warmup Iteration   4: 347147.964 ops/s
# Warmup Iteration   5: 341480.907 ops/s
# Warmup Iteration   6: 330792.572 ops/s
# Warmup Iteration   7: 309081.278 ops/s
# Warmup Iteration   8: 329586.994 ops/s
# Warmup Iteration   9: 309840.824 ops/s
# Warmup Iteration  10: 328016.850 ops/s
# Warmup Iteration  11: 343306.310 ops/s
# Warmup Iteration  12: 332154.700 ops/s
# Warmup Iteration  13: 354847.483 ops/s
# Warmup Iteration  14: 340575.788 ops/s
# Warmup Iteration  15: 332552.117 ops/s
# Warmup Iteration  16: 340634.460 ops/s
# Warmup Iteration  17: 373099.699 ops/s
# Warmup Iteration  18: 341707.680 ops/s
# Warmup Iteration  19: 365446.156 ops/s
# Warmup Iteration  20: 364299.740 ops/s
# Warmup Iteration  21: 337963.834 ops/s
# Warmup Iteration  22: 359279.106 ops/s
# Warmup Iteration  23: 339193.381 ops/s
# Warmup Iteration  24: 345965.586 ops/s
# Warmup Iteration  25: 360476.016 ops/s
# Warmup Iteration  26: 341496.896 ops/s
# Warmup Iteration  27: 355452.813 ops/s
# Warmup Iteration  28: 358928.148 ops/s
# Warmup Iteration  29: 369225.507 ops/s
# Warmup Iteration  30: 354155.220 ops/s
Iteration   1: 351256.354 ops/s
Iteration   2: 354433.123 ops/s
Iteration   3: 365202.244 ops/s
Iteration   4: 349092.714 ops/s
Iteration   5: 362186.070 ops/s
Iteration   6: 348291.424 ops/s
Iteration   7: 354223.832 ops/s
Iteration   8: 360565.894 ops/s
Iteration   9: 341709.993 ops/s
Iteration  10: 357890.439 ops/s
Iteration  11: 348871.778 ops/s
Iteration  12: 359902.694 ops/s
Iteration  13: 292245.972 ops/s
Iteration  14: 363587.427 ops/s
Iteration  15: 356932.677 ops/s
Iteration  16: 355029.304 ops/s
Iteration  17: 355409.282 ops/s
Iteration  18: 367433.515 ops/s
Iteration  19: 346730.819 ops/s
Iteration  20: 361827.865 ops/s
Iteration  21: 342532.120 ops/s
Iteration  22: 357791.501 ops/s
Iteration  23: 366244.616 ops/s
Iteration  24: 349893.607 ops/s
Iteration  25: 361635.244 ops/s
Iteration  26: 359232.321 ops/s
Iteration  27: 360836.214 ops/s
Iteration  28: 354587.113 ops/s
Iteration  29: 347461.679 ops/s
Iteration  30: 372914.157 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactBackpressure2":
  354198.400 ±(99.9%) 9270.783 ops/s [Average]
  (min, avg, max) = (292245.972, 354198.400, 372914.157), stdev = 13876.072
  CI (99.9%): [344927.617, 363469.183] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_exactBackpressure2  thrpt   30  354198.400 ± 9270.783  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 158376.096 ops/s
# Warmup Iteration   2: 541735.024 ops/s
# Warmup Iteration   3: 611692.288 ops/s
# Warmup Iteration   4: 564280.024 ops/s
# Warmup Iteration   5: 598180.122 ops/s
# Warmup Iteration   6: 549884.814 ops/s
# Warmup Iteration   7: 644921.345 ops/s
# Warmup Iteration   8: 599658.805 ops/s
# Warmup Iteration   9: 632475.013 ops/s
# Warmup Iteration  10: 651741.970 ops/s
# Warmup Iteration  11: 612606.517 ops/s
# Warmup Iteration  12: 648692.828 ops/s
# Warmup Iteration  13: 654687.348 ops/s
# Warmup Iteration  14: 613374.500 ops/s
# Warmup Iteration  15: 639853.382 ops/s
# Warmup Iteration  16: 624882.116 ops/s
# Warmup Iteration  17: 673717.013 ops/s
# Warmup Iteration  18: 654954.856 ops/s
# Warmup Iteration  19: 680410.288 ops/s
# Warmup Iteration  20: 661126.882 ops/s
# Warmup Iteration  21: 654627.206 ops/s
# Warmup Iteration  22: 687028.622 ops/s
# Warmup Iteration  23: 652405.630 ops/s
# Warmup Iteration  24: 680701.984 ops/s
# Warmup Iteration  25: 656708.428 ops/s
# Warmup Iteration  26: 663972.071 ops/s
# Warmup Iteration  27: 677989.282 ops/s
# Warmup Iteration  28: 646395.308 ops/s
# Warmup Iteration  29: 685537.805 ops/s
# Warmup Iteration  30: 650756.663 ops/s
Iteration   1: 689173.714 ops/s
Iteration   2: 698739.772 ops/s
Iteration   3: 637531.880 ops/s
Iteration   4: 691266.855 ops/s
Iteration   5: 640053.553 ops/s
Iteration   6: 686875.012 ops/s
Iteration   7: 678698.396 ops/s
Iteration   8: 648830.929 ops/s
Iteration   9: 681961.540 ops/s
Iteration  10: 646011.388 ops/s
Iteration  11: 677624.680 ops/s
Iteration  12: 649644.927 ops/s
Iteration  13: 673315.936 ops/s
Iteration  14: 652632.693 ops/s
Iteration  15: 659144.407 ops/s
Iteration  16: 672699.761 ops/s
Iteration  17: 647318.671 ops/s
Iteration  18: 690624.462 ops/s
Iteration  19: 642517.910 ops/s
Iteration  20: 676328.862 ops/s
Iteration  21: 673562.625 ops/s
Iteration  22: 661547.526 ops/s
Iteration  23: 654319.909 ops/s
Iteration  24: 668518.668 ops/s
Iteration  25: 651971.252 ops/s
Iteration  26: 680327.955 ops/s
Iteration  27: 664868.198 ops/s
Iteration  28: 656507.447 ops/s
Iteration  29: 682476.588 ops/s
Iteration  30: 662750.501 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNull":
  666594.867 ±(99.9%) 11506.658 ops/s [Average]
  (min, avg, max) = (637531.880, 666594.867, 698739.772), stdev = 17222.625
  CI (99.9%): [655088.209, 678101.525] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNull  thrpt   30  666594.867 ± 11506.658  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedCompletesNormally$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedCompletesNormally

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 247816.886 ops/s
# Warmup Iteration   2: 843548.770 ops/s
# Warmup Iteration   3: 1538094.047 ops/s
# Warmup Iteration   4: 1713539.495 ops/s
# Warmup Iteration   5: 1800083.173 ops/s
# Warmup Iteration   6: 1736289.293 ops/s
# Warmup Iteration   7: 1776386.873 ops/s
# Warmup Iteration   8: 1738864.594 ops/s
# Warmup Iteration   9: 1750348.293 ops/s
# Warmup Iteration  10: 1814363.097 ops/s
# Warmup Iteration  11: 1727690.564 ops/s
# Warmup Iteration  12: 1794124.841 ops/s
# Warmup Iteration  13: 1760707.796 ops/s
# Warmup Iteration  14: 1748628.125 ops/s
# Warmup Iteration  15: 1811330.012 ops/s
# Warmup Iteration  16: 1830268.217 ops/s
# Warmup Iteration  17: 1745574.153 ops/s
# Warmup Iteration  18: 1835187.908 ops/s
# Warmup Iteration  19: 1814230.367 ops/s
# Warmup Iteration  20: 1766093.155 ops/s
# Warmup Iteration  21: 1848941.383 ops/s
# Warmup Iteration  22: 1779249.682 ops/s
# Warmup Iteration  23: 1806226.304 ops/s
# Warmup Iteration  24: 1745642.040 ops/s
# Warmup Iteration  25: 1854052.462 ops/s
# Warmup Iteration  26: 1754520.468 ops/s
# Warmup Iteration  27: 1852503.657 ops/s
# Warmup Iteration  28: 1757972.337 ops/s
# Warmup Iteration  29: 1848276.912 ops/s
# Warmup Iteration  30: 1836871.791 ops/s
Iteration   1: 1737696.475 ops/s
Iteration   2: 1808701.266 ops/s
Iteration   3: 1735661.685 ops/s
Iteration   4: 1778495.910 ops/s
Iteration   5: 1724350.532 ops/s
Iteration   6: 1754132.617 ops/s
Iteration   7: 1841171.612 ops/s
Iteration   8: 1337761.024 ops/s
Iteration   9: 1822683.750 ops/s
Iteration  10: 1769552.528 ops/s
Iteration  11: 1822259.844 ops/s
Iteration  12: 1816222.223 ops/s
Iteration  13: 1751125.733 ops/s
Iteration  14: 1840274.976 ops/s
Iteration  15: 1796591.172 ops/s
Iteration  16: 1791438.806 ops/s
Iteration  17: 1831628.414 ops/s
Iteration  18: 1778441.368 ops/s
Iteration  19: 1779196.479 ops/s
Iteration  20: 1802218.582 ops/s
Iteration  21: 1730241.777 ops/s
Iteration  22: 1788882.208 ops/s
Iteration  23: 1756591.040 ops/s
Iteration  24: 1857989.696 ops/s
Iteration  25: 1700128.812 ops/s
Iteration  26: 1823402.521 ops/s
Iteration  27: 1775843.861 ops/s
Iteration  28: 1784083.642 ops/s
Iteration  29: 1877758.599 ops/s
Iteration  30: 1756512.736 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedCompletesNormally":
  1772367.996 ±(99.9%) 61605.979 ops/s [Average]
  (min, avg, max) = (1337761.024, 1772367.996, 1877758.599), stdev = 92208.937
  CI (99.9%): [1710762.017, 1833973.976] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableScanTest._Benchmark.benchmark_scanWithSeedCompletesNormally  thrpt   30  1772367.996 ± 61605.979  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 82026.744 ops/s
# Warmup Iteration   2: 322067.027 ops/s
# Warmup Iteration   3: 466032.526 ops/s
# Warmup Iteration   4: 473114.444 ops/s
# Warmup Iteration   5: 493802.638 ops/s
# Warmup Iteration   6: 461586.139 ops/s
# Warmup Iteration   7: 493154.080 ops/s
# Warmup Iteration   8: 466693.294 ops/s
# Warmup Iteration   9: 461987.151 ops/s
# Warmup Iteration  10: 469913.406 ops/s
# Warmup Iteration  11: 476282.482 ops/s
# Warmup Iteration  12: 486261.814 ops/s
# Warmup Iteration  13: 480503.751 ops/s
# Warmup Iteration  14: 483474.651 ops/s
# Warmup Iteration  15: 500971.651 ops/s
# Warmup Iteration  16: 464681.113 ops/s
# Warmup Iteration  17: 508214.665 ops/s
# Warmup Iteration  18: 518817.743 ops/s
# Warmup Iteration  19: 504596.162 ops/s
# Warmup Iteration  20: 489104.659 ops/s
# Warmup Iteration  21: 515084.920 ops/s
# Warmup Iteration  22: 502626.190 ops/s
# Warmup Iteration  23: 494604.339 ops/s
# Warmup Iteration  24: 497398.940 ops/s
# Warmup Iteration  25: 492487.953 ops/s
# Warmup Iteration  26: 521680.978 ops/s
# Warmup Iteration  27: 489635.959 ops/s
# Warmup Iteration  28: 525376.816 ops/s
# Warmup Iteration  29: 509516.863 ops/s
# Warmup Iteration  30: 498674.835 ops/s
Iteration   1: 513177.769 ops/s
Iteration   2: 482232.868 ops/s
Iteration   3: 510146.642 ops/s
Iteration   4: 510860.474 ops/s
Iteration   5: 518189.719 ops/s
Iteration   6: 491938.536 ops/s
Iteration   7: 500108.130 ops/s
Iteration   8: 498690.988 ops/s
Iteration   9: 500257.814 ops/s
Iteration  10: 534255.738 ops/s
Iteration  11: 491567.872 ops/s
Iteration  12: 508792.442 ops/s
Iteration  13: 496824.750 ops/s
Iteration  14: 508154.283 ops/s
Iteration  15: 489828.644 ops/s
Iteration  16: 513726.139 ops/s
Iteration  17: 515344.464 ops/s
Iteration  18: 480894.086 ops/s
Iteration  19: 520068.240 ops/s
Iteration  20: 487397.013 ops/s
Iteration  21: 503230.682 ops/s
Iteration  22: 485652.142 ops/s
Iteration  23: 513114.198 ops/s
Iteration  24: 489240.099 ops/s
Iteration  25: 511496.444 ops/s
Iteration  26: 506710.076 ops/s
Iteration  27: 486529.523 ops/s
Iteration  28: 531219.844 ops/s
Iteration  29: 493212.337 ops/s
Iteration  30: 505588.405 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_doubleOnSubscribe":
  503281.679 ±(99.9%) 9244.196 ops/s [Average]
  (min, avg, max) = (480894.086, 503281.679, 534255.738), stdev = 13836.278
  CI (99.9%): [494037.483, 512525.874] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  503281.679 ± 9244.196  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_flatMapBiMapper$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_flatMapBiMapper

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 319953.896 ops/s
# Warmup Iteration   2: 2741419.736 ops/s
# Warmup Iteration   3: 3477205.534 ops/s
# Warmup Iteration   4: 4271606.187 ops/s
# Warmup Iteration   5: 4156734.493 ops/s
# Warmup Iteration   6: 4133366.169 ops/s
# Warmup Iteration   7: 4244663.876 ops/s
# Warmup Iteration   8: 4305064.483 ops/s
# Warmup Iteration   9: 4215406.104 ops/s
# Warmup Iteration  10: 4080830.631 ops/s
# Warmup Iteration  11: 4264737.108 ops/s
# Warmup Iteration  12: 4202847.451 ops/s
# Warmup Iteration  13: 4107809.257 ops/s
# Warmup Iteration  14: 4410434.333 ops/s
# Warmup Iteration  15: 4140405.254 ops/s
# Warmup Iteration  16: 4213586.366 ops/s
# Warmup Iteration  17: 4323987.966 ops/s
# Warmup Iteration  18: 4232689.830 ops/s
# Warmup Iteration  19: 4140337.633 ops/s
# Warmup Iteration  20: 4186032.760 ops/s
# Warmup Iteration  21: 4109183.736 ops/s
# Warmup Iteration  22: 4204985.441 ops/s
# Warmup Iteration  23: 4303134.468 ops/s
# Warmup Iteration  24: 4101595.961 ops/s
# Warmup Iteration  25: 4287776.156 ops/s
# Warmup Iteration  26: 4124925.419 ops/s
# Warmup Iteration  27: 4150758.696 ops/s
# Warmup Iteration  28: 4264328.812 ops/s
# Warmup Iteration  29: 4046087.114 ops/s
# Warmup Iteration  30: 4238011.308 ops/s
Iteration   1: 4051649.685 ops/s
Iteration   2: 3549057.317 ops/s
Iteration   3: 4045925.932 ops/s
Iteration   4: 4256677.014 ops/s
Iteration   5: 4081208.456 ops/s
Iteration   6: 4249552.478 ops/s
Iteration   7: 4172430.224 ops/s
Iteration   8: 4107507.212 ops/s
Iteration   9: 4310853.230 ops/s
Iteration  10: 4206106.327 ops/s
Iteration  11: 4089913.230 ops/s
Iteration  12: 4342294.724 ops/s
Iteration  13: 4052797.694 ops/s
Iteration  14: 4381857.094 ops/s
Iteration  15: 4269565.453 ops/s
Iteration  16: 4140046.770 ops/s
Iteration  17: 4108977.180 ops/s
Iteration  18: 4339325.463 ops/s
Iteration  19: 4145296.592 ops/s
Iteration  20: 4255195.618 ops/s
Iteration  21: 4183075.490 ops/s
Iteration  22: 4283188.514 ops/s
Iteration  23: 4108270.244 ops/s
Iteration  24: 4355240.975 ops/s
Iteration  25: 4339527.424 ops/s
Iteration  26: 4032700.961 ops/s
Iteration  27: 4322573.468 ops/s
Iteration  28: 4102092.784 ops/s
Iteration  29: 4229139.381 ops/s
Iteration  30: 4161058.897 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_flatMapBiMapper":
  4175770.194 ±(99.9%) 106487.671 ops/s [Average]
  (min, avg, max) = (3549057.317, 4175770.194, 4381857.094), stdev = 159385.744
  CI (99.9%): [4069282.524, 4282257.865] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
FlowableFlatMapTest._Benchmark.benchmark_flatMapBiMapper  thrpt   30  4175770.194 ± 106487.671  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_mapFactoryEvictionQueueClearedOnErrorCoverageOnly$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_mapFactoryEvictionQueueClearedOnErrorCoverageOnly

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15640.179 ops/s
# Warmup Iteration   2: 119518.011 ops/s
# Warmup Iteration   3: 388311.866 ops/s
# Warmup Iteration   4: 441368.093 ops/s
# Warmup Iteration   5: 440071.098 ops/s
# Warmup Iteration   6: 419600.231 ops/s
# Warmup Iteration   7: 431148.249 ops/s
# Warmup Iteration   8: 473621.938 ops/s
# Warmup Iteration   9: 466182.026 ops/s
# Warmup Iteration  10: 445217.051 ops/s
# Warmup Iteration  11: 474210.937 ops/s
# Warmup Iteration  12: 455117.163 ops/s
# Warmup Iteration  13: 476500.045 ops/s
# Warmup Iteration  14: 460925.626 ops/s
# Warmup Iteration  15: 454417.808 ops/s
# Warmup Iteration  16: 465232.351 ops/s
# Warmup Iteration  17: 470367.457 ops/s
# Warmup Iteration  18: 490934.949 ops/s
# Warmup Iteration  19: 478067.185 ops/s
# Warmup Iteration  20: 491808.764 ops/s
# Warmup Iteration  21: 474115.375 ops/s
# Warmup Iteration  22: 468787.362 ops/s
# Warmup Iteration  23: 457049.084 ops/s
# Warmup Iteration  24: 470161.858 ops/s
# Warmup Iteration  25: 485494.348 ops/s
# Warmup Iteration  26: 471288.889 ops/s
# Warmup Iteration  27: 502348.808 ops/s
# Warmup Iteration  28: 473106.980 ops/s
# Warmup Iteration  29: 491622.030 ops/s
# Warmup Iteration  30: 470040.714 ops/s
Iteration   1: 492718.899 ops/s
Iteration   2: 500201.229 ops/s
Iteration   3: 468220.299 ops/s
Iteration   4: 495171.498 ops/s
Iteration   5: 470178.991 ops/s
Iteration   6: 497176.859 ops/s
Iteration   7: 465639.982 ops/s
Iteration   8: 485122.149 ops/s
Iteration   9: 488254.166 ops/s
Iteration  10: 461727.896 ops/s
Iteration  11: 491188.115 ops/s
Iteration  12: 473109.554 ops/s
Iteration  13: 488676.729 ops/s
Iteration  14: 490115.251 ops/s
Iteration  15: 478026.567 ops/s
Iteration  16: 471798.711 ops/s
Iteration  17: 498354.246 ops/s
Iteration  18: 474427.927 ops/s
Iteration  19: 475674.526 ops/s
Iteration  20: 495801.415 ops/s
Iteration  21: 475608.130 ops/s
Iteration  22: 500143.415 ops/s
Iteration  23: 473304.043 ops/s
Iteration  24: 481771.961 ops/s
Iteration  25: 487916.489 ops/s
Iteration  26: 479138.079 ops/s
Iteration  27: 480636.063 ops/s
Iteration  28: 473758.976 ops/s
Iteration  29: 476232.421 ops/s
Iteration  30: 490916.845 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_mapFactoryEvictionQueueClearedOnErrorCoverageOnly":
  482700.381 ±(99.9%) 7353.296 ops/s [Average]
  (min, avg, max) = (461727.896, 482700.381, 500201.229), stdev = 11006.069
  CI (99.9%): [475347.085, 490053.678] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_mapFactoryEvictionQueueClearedOnErrorCoverageOnly  thrpt   30  482700.381 ± 7353.296  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_mapperReturnsNullFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_mapperReturnsNullFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69007.124 ops/s
# Warmup Iteration   2: 353373.911 ops/s
# Warmup Iteration   3: 527476.113 ops/s
# Warmup Iteration   4: 507161.443 ops/s
# Warmup Iteration   5: 503028.610 ops/s
# Warmup Iteration   6: 535148.119 ops/s
# Warmup Iteration   7: 518282.466 ops/s
# Warmup Iteration   8: 569359.153 ops/s
# Warmup Iteration   9: 574922.789 ops/s
# Warmup Iteration  10: 579254.918 ops/s
# Warmup Iteration  11: 548850.126 ops/s
# Warmup Iteration  12: 580207.224 ops/s
# Warmup Iteration  13: 556401.063 ops/s
# Warmup Iteration  14: 574080.414 ops/s
# Warmup Iteration  15: 575256.480 ops/s
# Warmup Iteration  16: 553998.194 ops/s
# Warmup Iteration  17: 596577.941 ops/s
# Warmup Iteration  18: 587324.802 ops/s
# Warmup Iteration  19: 592527.058 ops/s
# Warmup Iteration  20: 590668.079 ops/s
# Warmup Iteration  21: 577604.696 ops/s
# Warmup Iteration  22: 593066.576 ops/s
# Warmup Iteration  23: 591470.561 ops/s
# Warmup Iteration  24: 596499.683 ops/s
# Warmup Iteration  25: 579732.866 ops/s
# Warmup Iteration  26: 609639.980 ops/s
# Warmup Iteration  27: 393321.990 ops/s
# Warmup Iteration  28: 589977.179 ops/s
# Warmup Iteration  29: 613281.421 ops/s
# Warmup Iteration  30: 582959.363 ops/s
Iteration   1: 606216.931 ops/s
Iteration   2: 580454.526 ops/s
Iteration   3: 569778.535 ops/s
Iteration   4: 614106.126 ops/s
Iteration   5: 603599.857 ops/s
Iteration   6: 573161.878 ops/s
Iteration   7: 576098.243 ops/s
Iteration   8: 616019.510 ops/s
Iteration   9: 565866.218 ops/s
Iteration  10: 579122.611 ops/s
Iteration  11: 599702.512 ops/s
Iteration  12: 566767.077 ops/s
Iteration  13: 601261.546 ops/s
Iteration  14: 579877.249 ops/s
Iteration  15: 558856.245 ops/s
Iteration  16: 583824.390 ops/s
Iteration  17: 616191.873 ops/s
Iteration  18: 578815.138 ops/s
Iteration  19: 609828.968 ops/s
Iteration  20: 577665.411 ops/s
Iteration  21: 613039.011 ops/s
Iteration  22: 580987.487 ops/s
Iteration  23: 586665.661 ops/s
Iteration  24: 605561.745 ops/s
Iteration  25: 572787.024 ops/s
Iteration  26: 617348.117 ops/s
Iteration  27: 584578.396 ops/s
Iteration  28: 599158.902 ops/s
Iteration  29: 601957.543 ops/s
Iteration  30: 593814.867 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_mapperReturnsNullFlowable":
  590437.120 ±(99.9%) 11629.070 ops/s [Average]
  (min, avg, max) = (558856.245, 590437.120, 617348.117), stdev = 17405.846
  CI (99.9%): [578808.050, 602066.190] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_mapperReturnsNullFlowable  thrpt   30  590437.120 ± 11629.070  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_mapperThrowsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_mapperThrowsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 84960.897 ops/s
# Warmup Iteration   2: 367778.736 ops/s
# Warmup Iteration   3: 540301.477 ops/s
# Warmup Iteration   4: 488690.157 ops/s
# Warmup Iteration   5: 560699.057 ops/s
# Warmup Iteration   6: 544995.531 ops/s
# Warmup Iteration   7: 560390.445 ops/s
# Warmup Iteration   8: 570388.959 ops/s
# Warmup Iteration   9: 529911.357 ops/s
# Warmup Iteration  10: 566351.300 ops/s
# Warmup Iteration  11: 543840.361 ops/s
# Warmup Iteration  12: 547159.939 ops/s
# Warmup Iteration  13: 553659.817 ops/s
# Warmup Iteration  14: 547148.167 ops/s
# Warmup Iteration  15: 530021.535 ops/s
# Warmup Iteration  16: 556818.272 ops/s
# Warmup Iteration  17: 568458.747 ops/s
# Warmup Iteration  18: 574510.722 ops/s
# Warmup Iteration  19: 570717.731 ops/s
# Warmup Iteration  20: 588411.982 ops/s
# Warmup Iteration  21: 546440.508 ops/s
# Warmup Iteration  22: 554830.421 ops/s
# Warmup Iteration  23: 594467.569 ops/s
# Warmup Iteration  24: 574149.592 ops/s
# Warmup Iteration  25: 578156.816 ops/s
# Warmup Iteration  26: 579223.028 ops/s
# Warmup Iteration  27: 589839.222 ops/s
# Warmup Iteration  28: 573723.955 ops/s
# Warmup Iteration  29: 572537.806 ops/s
# Warmup Iteration  30: 600333.786 ops/s
Iteration   1: 572641.201 ops/s
Iteration   2: 588150.024 ops/s
Iteration   3: 568023.335 ops/s
Iteration   4: 583512.008 ops/s
Iteration   5: 595588.299 ops/s
Iteration   6: 574912.343 ops/s
Iteration   7: 581034.478 ops/s
Iteration   8: 585451.090 ops/s
Iteration   9: 564081.174 ops/s
Iteration  10: 588007.828 ops/s
Iteration  11: 587834.228 ops/s
Iteration  12: 579611.061 ops/s
Iteration  13: 580620.427 ops/s
Iteration  14: 601409.937 ops/s
Iteration  15: 558615.628 ops/s
Iteration  16: 577450.537 ops/s
Iteration  17: 586536.822 ops/s
Iteration  18: 573047.416 ops/s
Iteration  19: 595186.387 ops/s
Iteration  20: 571757.484 ops/s
Iteration  21: 573838.805 ops/s
Iteration  22: 575144.918 ops/s
Iteration  23: 580158.757 ops/s
Iteration  24: 583975.284 ops/s
Iteration  25: 569746.847 ops/s
Iteration  26: 591285.660 ops/s
Iteration  27: 578333.123 ops/s
Iteration  28: 583700.587 ops/s
Iteration  29: 574332.344 ops/s
Iteration  30: 587681.213 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_mapperThrowsFlowable":
  580388.975 ±(99.9%) 6422.925 ops/s [Average]
  (min, avg, max) = (558615.628, 580388.975, 601409.937), stdev = 9613.532
  CI (99.9%): [573966.050, 586811.900] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_mapperThrowsFlowable  thrpt   30  580388.975 ± 6422.925  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20990.254 ops/s
# Warmup Iteration   2: 118719.468 ops/s
# Warmup Iteration   3: 158018.640 ops/s
# Warmup Iteration   4: 178045.522 ops/s
# Warmup Iteration   5: 177621.869 ops/s
# Warmup Iteration   6: 195849.313 ops/s
# Warmup Iteration   7: 192055.639 ops/s
# Warmup Iteration   8: 186185.975 ops/s
# Warmup Iteration   9: 191528.349 ops/s
# Warmup Iteration  10: 194698.588 ops/s
# Warmup Iteration  11: 199435.357 ops/s
# Warmup Iteration  12: 187144.660 ops/s
# Warmup Iteration  13: 194187.118 ops/s
# Warmup Iteration  14: 196186.916 ops/s
# Warmup Iteration  15: 188426.596 ops/s
# Warmup Iteration  16: 201475.890 ops/s
# Warmup Iteration  17: 194655.392 ops/s
# Warmup Iteration  18: 197284.948 ops/s
# Warmup Iteration  19: 204546.465 ops/s
# Warmup Iteration  20: 197989.238 ops/s
# Warmup Iteration  21: 202389.306 ops/s
# Warmup Iteration  22: 154835.660 ops/s
# Warmup Iteration  23: 200432.611 ops/s
# Warmup Iteration  24: 202294.532 ops/s
# Warmup Iteration  25: 194662.020 ops/s
# Warmup Iteration  26: 196683.691 ops/s
# Warmup Iteration  27: 198188.871 ops/s
# Warmup Iteration  28: 193690.851 ops/s
# Warmup Iteration  29: 197011.941 ops/s
# Warmup Iteration  30: 198641.634 ops/s
Iteration   1: 196443.744 ops/s
Iteration   2: 199625.470 ops/s
Iteration   3: 195933.786 ops/s
Iteration   4: 201351.184 ops/s
Iteration   5: 197296.534 ops/s
Iteration   6: 201124.605 ops/s
Iteration   7: 196203.479 ops/s
Iteration   8: 201284.780 ops/s
Iteration   9: 197127.642 ops/s
Iteration  10: 198148.428 ops/s
Iteration  11: 200029.576 ops/s
Iteration  12: 193756.207 ops/s
Iteration  13: 201037.167 ops/s
Iteration  14: 198537.674 ops/s
Iteration  15: 194358.694 ops/s
Iteration  16: 207763.654 ops/s
Iteration  17: 192687.795 ops/s
Iteration  18: 205046.912 ops/s
Iteration  19: 194532.768 ops/s
Iteration  20: 200681.078 ops/s
Iteration  21: 200285.123 ops/s
Iteration  22: 199535.969 ops/s
Iteration  23: 202659.065 ops/s
Iteration  24: 192061.216 ops/s
Iteration  25: 204771.544 ops/s
Iteration  26: 200366.990 ops/s
Iteration  27: 203791.283 ops/s
Iteration  28: 202068.578 ops/s
Iteration  29: 196869.998 ops/s
Iteration  30: 205671.646 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel":
  199368.420 ±(99.9%) 2640.586 ops/s [Average]
  (min, avg, max) = (192061.216, 199368.420, 207763.654), stdev = 3952.304
  CI (99.9%): [196727.834, 202009.005] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  199368.420 ± 2640.586  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16379.017 ops/s
# Warmup Iteration   2: 126980.107 ops/s
# Warmup Iteration   3: 168900.618 ops/s
# Warmup Iteration   4: 189141.172 ops/s
# Warmup Iteration   5: 189221.456 ops/s
# Warmup Iteration   6: 184890.455 ops/s
# Warmup Iteration   7: 191067.687 ops/s
# Warmup Iteration   8: 182007.152 ops/s
# Warmup Iteration   9: 189263.436 ops/s
# Warmup Iteration  10: 176171.995 ops/s
# Warmup Iteration  11: 184873.006 ops/s
# Warmup Iteration  12: 198118.032 ops/s
# Warmup Iteration  13: 186487.233 ops/s
# Warmup Iteration  14: 195644.137 ops/s
# Warmup Iteration  15: 187247.967 ops/s
# Warmup Iteration  16: 188703.999 ops/s
# Warmup Iteration  17: 199272.139 ops/s
# Warmup Iteration  18: 191902.224 ops/s
# Warmup Iteration  19: 202291.858 ops/s
# Warmup Iteration  20: 184535.772 ops/s
# Warmup Iteration  21: 196301.394 ops/s
# Warmup Iteration  22: 202022.035 ops/s
# Warmup Iteration  23: 188219.122 ops/s
# Warmup Iteration  24: 200126.222 ops/s
# Warmup Iteration  25: 198978.121 ops/s
# Warmup Iteration  26: 197164.775 ops/s
# Warmup Iteration  27: 200104.673 ops/s
# Warmup Iteration  28: 194207.355 ops/s
# Warmup Iteration  29: 192358.411 ops/s
# Warmup Iteration  30: 200247.745 ops/s
Iteration   1: 201216.385 ops/s
Iteration   2: 191058.746 ops/s
Iteration   3: 201016.726 ops/s
Iteration   4: 192147.930 ops/s
Iteration   5: 199144.840 ops/s
Iteration   6: 197506.406 ops/s
Iteration   7: 197748.892 ops/s
Iteration   8: 194166.650 ops/s
Iteration   9: 191237.772 ops/s
Iteration  10: 207747.089 ops/s
Iteration  11: 191503.397 ops/s
Iteration  12: 199440.133 ops/s
Iteration  13: 190565.565 ops/s
Iteration  14: 196130.688 ops/s
Iteration  15: 198793.119 ops/s
Iteration  16: 197040.555 ops/s
Iteration  17: 198394.943 ops/s
Iteration  18: 203764.188 ops/s
Iteration  19: 193022.217 ops/s
Iteration  20: 201425.226 ops/s
Iteration  21: 193735.311 ops/s
Iteration  22: 202256.152 ops/s
Iteration  23: 191435.102 ops/s
Iteration  24: 203935.869 ops/s
Iteration  25: 192938.697 ops/s
Iteration  26: 191273.628 ops/s
Iteration  27: 198593.764 ops/s
Iteration  28: 191748.168 ops/s
Iteration  29: 197881.625 ops/s
Iteration  30: 202747.380 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  196987.239 ±(99.9%) 3163.354 ops/s [Average]
  (min, avg, max) = (190565.565, 196987.239, 207747.089), stdev = 4734.760
  CI (99.9%): [193823.885, 200150.593] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  196987.239 ± 3163.354  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60226.121 ops/s
# Warmup Iteration   2: 309073.278 ops/s
# Warmup Iteration   3: 394096.191 ops/s
# Warmup Iteration   4: 394176.353 ops/s
# Warmup Iteration   5: 404428.783 ops/s
# Warmup Iteration   6: 388951.150 ops/s
# Warmup Iteration   7: 403066.169 ops/s
# Warmup Iteration   8: 426799.643 ops/s
# Warmup Iteration   9: 400106.193 ops/s
# Warmup Iteration  10: 409034.205 ops/s
# Warmup Iteration  11: 415326.658 ops/s
# Warmup Iteration  12: 391290.958 ops/s
# Warmup Iteration  13: 421038.805 ops/s
# Warmup Iteration  14: 403234.532 ops/s
# Warmup Iteration  15: 417319.839 ops/s
# Warmup Iteration  16: 311396.867 ops/s
# Warmup Iteration  17: 415067.320 ops/s
# Warmup Iteration  18: 438066.948 ops/s
# Warmup Iteration  19: 403647.004 ops/s
# Warmup Iteration  20: 421436.026 ops/s
# Warmup Iteration  21: 430725.777 ops/s
# Warmup Iteration  22: 421096.765 ops/s
# Warmup Iteration  23: 404654.567 ops/s
# Warmup Iteration  24: 412386.568 ops/s
# Warmup Iteration  25: 429763.617 ops/s
# Warmup Iteration  26: 434244.336 ops/s
# Warmup Iteration  27: 412737.158 ops/s
# Warmup Iteration  28: 440567.782 ops/s
# Warmup Iteration  29: 419431.659 ops/s
# Warmup Iteration  30: 442804.273 ops/s
Iteration   1: 441402.508 ops/s
Iteration   2: 412019.675 ops/s
Iteration   3: 418626.876 ops/s
Iteration   4: 421057.443 ops/s
Iteration   5: 430137.385 ops/s
Iteration   6: 411173.951 ops/s
Iteration   7: 425880.198 ops/s
Iteration   8: 416973.086 ops/s
Iteration   9: 439259.782 ops/s
Iteration  10: 438680.418 ops/s
Iteration  11: 426076.625 ops/s
Iteration  12: 417775.595 ops/s
Iteration  13: 435527.031 ops/s
Iteration  14: 393574.526 ops/s
Iteration  15: 427945.709 ops/s
Iteration  16: 418139.287 ops/s
Iteration  17: 422643.424 ops/s
Iteration  18: 431671.901 ops/s
Iteration  19: 437604.657 ops/s
Iteration  20: 422517.660 ops/s
Iteration  21: 428720.003 ops/s
Iteration  22: 440617.584 ops/s
Iteration  23: 418962.506 ops/s
Iteration  24: 441584.913 ops/s
Iteration  25: 412702.845 ops/s
Iteration  26: 428703.953 ops/s
Iteration  27: 427761.942 ops/s
Iteration  28: 417832.240 ops/s
Iteration  29: 447194.285 ops/s
Iteration  30: 406545.382 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerNull":
  425310.446 ±(99.9%) 8052.793 ops/s [Average]
  (min, avg, max) = (393574.526, 425310.446, 447194.285), stdev = 12053.043
  CI (99.9%): [417257.653, 433363.239] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerNull  thrpt   30  425310.446 ± 8052.793  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15637.208 ops/s
# Warmup Iteration   2: 80848.713 ops/s
# Warmup Iteration   3: 146496.979 ops/s
# Warmup Iteration   4: 176519.744 ops/s
# Warmup Iteration   5: 170666.324 ops/s
# Warmup Iteration   6: 174083.878 ops/s
# Warmup Iteration   7: 179993.654 ops/s
# Warmup Iteration   8: 169873.712 ops/s
# Warmup Iteration   9: 178925.358 ops/s
# Warmup Iteration  10: 169401.492 ops/s
# Warmup Iteration  11: 169375.636 ops/s
# Warmup Iteration  12: 180269.046 ops/s
# Warmup Iteration  13: 166388.845 ops/s
# Warmup Iteration  14: 176151.834 ops/s
# Warmup Iteration  15: 172200.016 ops/s
# Warmup Iteration  16: 177580.867 ops/s
# Warmup Iteration  17: 172749.364 ops/s
# Warmup Iteration  18: 187553.522 ops/s
# Warmup Iteration  19: 189742.209 ops/s
# Warmup Iteration  20: 186912.814 ops/s
# Warmup Iteration  21: 190104.340 ops/s
# Warmup Iteration  22: 189797.412 ops/s
# Warmup Iteration  23: 185687.896 ops/s
# Warmup Iteration  24: 191617.236 ops/s
# Warmup Iteration  25: 190191.384 ops/s
# Warmup Iteration  26: 182354.995 ops/s
# Warmup Iteration  27: 188633.204 ops/s
# Warmup Iteration  28: 192856.619 ops/s
# Warmup Iteration  29: 187256.583 ops/s
# Warmup Iteration  30: 187858.464 ops/s
Iteration   1: 187450.895 ops/s
Iteration   2: 184397.759 ops/s
Iteration   3: 193185.050 ops/s
Iteration   4: 178909.154 ops/s
Iteration   5: 196069.951 ops/s
Iteration   6: 195973.529 ops/s
Iteration   7: 182264.650 ops/s
Iteration   8: 191610.332 ops/s
Iteration   9: 189177.194 ops/s
Iteration  10: 195002.277 ops/s
Iteration  11: 187334.944 ops/s
Iteration  12: 186472.585 ops/s
Iteration  13: 180028.153 ops/s
Iteration  14: 186975.077 ops/s
Iteration  15: 192632.933 ops/s
Iteration  16: 184493.929 ops/s
Iteration  17: 194949.467 ops/s
Iteration  18: 191477.041 ops/s
Iteration  19: 181984.702 ops/s
Iteration  20: 192041.255 ops/s
Iteration  21: 184530.771 ops/s
Iteration  22: 193928.113 ops/s
Iteration  23: 188838.435 ops/s
Iteration  24: 188638.677 ops/s
Iteration  25: 190821.349 ops/s
Iteration  26: 188187.278 ops/s
Iteration  27: 192931.365 ops/s
Iteration  28: 189094.648 ops/s
Iteration  29: 187148.332 ops/s
Iteration  30: 189858.639 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel":
  188880.283 ±(99.9%) 3100.694 ops/s [Average]
  (min, avg, max) = (178909.154, 188880.283, 196069.951), stdev = 4640.973
  CI (99.9%): [185779.589, 191980.977] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  188880.283 ± 3100.694  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundaryConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundaryConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124046.593 ops/s
# Warmup Iteration   2: 901397.776 ops/s
# Warmup Iteration   3: 1214662.445 ops/s
# Warmup Iteration   4: 1329923.805 ops/s
# Warmup Iteration   5: 1370285.007 ops/s
# Warmup Iteration   6: 1372043.879 ops/s
# Warmup Iteration   7: 1304822.624 ops/s
# Warmup Iteration   8: 1374284.294 ops/s
# Warmup Iteration   9: 1376664.359 ops/s
# Warmup Iteration  10: 1158099.795 ops/s
# Warmup Iteration  11: 1192788.211 ops/s
# Warmup Iteration  12: 1424430.817 ops/s
# Warmup Iteration  13: 1361216.106 ops/s
# Warmup Iteration  14: 1398665.998 ops/s
# Warmup Iteration  15: 1295529.774 ops/s
# Warmup Iteration  16: 1347416.571 ops/s
# Warmup Iteration  17: 1421578.440 ops/s
# Warmup Iteration  18: 1339216.828 ops/s
# Warmup Iteration  19: 1324132.969 ops/s
# Warmup Iteration  20: 1387910.443 ops/s
# Warmup Iteration  21: 1306600.697 ops/s
# Warmup Iteration  22: 1374255.679 ops/s
# Warmup Iteration  23: 1343268.547 ops/s
# Warmup Iteration  24: 1362289.709 ops/s
# Warmup Iteration  25: 1403272.413 ops/s
# Warmup Iteration  26: 1308395.386 ops/s
# Warmup Iteration  27: 1369190.957 ops/s
# Warmup Iteration  28: 1411770.742 ops/s
# Warmup Iteration  29: 1310595.603 ops/s
# Warmup Iteration  30: 1367498.249 ops/s
Iteration   1: 1355037.021 ops/s
Iteration   2: 1362242.507 ops/s
Iteration   3: 1352301.705 ops/s
Iteration   4: 1384099.223 ops/s
Iteration   5: 1375611.457 ops/s
Iteration   6: 1341793.903 ops/s
Iteration   7: 1398598.183 ops/s
Iteration   8: 1351238.391 ops/s
Iteration   9: 1415381.781 ops/s
Iteration  10: 1308033.659 ops/s
Iteration  11: 1351981.285 ops/s
Iteration  12: 1366126.620 ops/s
Iteration  13: 1336456.019 ops/s
Iteration  14: 1356033.962 ops/s
Iteration  15: 1341096.429 ops/s
Iteration  16: 1381403.079 ops/s
Iteration  17: 1325781.926 ops/s
Iteration  18: 1347042.542 ops/s
Iteration  19: 1396995.166 ops/s
Iteration  20: 1345566.104 ops/s
Iteration  21: 1390724.923 ops/s
Iteration  22: 1302997.865 ops/s
Iteration  23: 1407162.859 ops/s
Iteration  24: 1314680.635 ops/s
Iteration  25: 1373331.353 ops/s
Iteration  26: 1381749.461 ops/s
Iteration  27: 1351001.645 ops/s
Iteration  28: 1403940.814 ops/s
Iteration  29: 1401591.162 ops/s
Iteration  30: 1358020.774 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundaryConditional":
  1362600.749 ±(99.9%) 19868.676 ops/s [Average]
  (min, avg, max) = (1302997.865, 1362600.749, 1415381.781), stdev = 29738.501
  CI (99.9%): [1342732.072, 1382469.425] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundaryConditional  thrpt   30  1362600.749 ± 19868.676  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriberTest._Benchmark.benchmark_offerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriberTest._Benchmark.benchmark_offerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 261987.164 ops/s
# Warmup Iteration   2: 295420.696 ops/s
# Warmup Iteration   3: 369248.129 ops/s
# Warmup Iteration   4: 329815.584 ops/s
# Warmup Iteration   5: 388011.649 ops/s
# Warmup Iteration   6: 371805.267 ops/s
# Warmup Iteration   7: 371000.370 ops/s
# Warmup Iteration   8: 381020.800 ops/s
# Warmup Iteration   9: 369765.904 ops/s
# Warmup Iteration  10: 384558.603 ops/s
# Warmup Iteration  11: 384453.957 ops/s
# Warmup Iteration  12: 354688.514 ops/s
# Warmup Iteration  13: 387974.219 ops/s
# Warmup Iteration  14: 364179.521 ops/s
# Warmup Iteration  15: 385917.578 ops/s
# Warmup Iteration  16: 370725.629 ops/s
# Warmup Iteration  17: 398772.692 ops/s
# Warmup Iteration  18: 405037.569 ops/s
# Warmup Iteration  19: 387102.661 ops/s
# Warmup Iteration  20: 415822.220 ops/s
# Warmup Iteration  21: 388374.947 ops/s
# Warmup Iteration  22: 402876.522 ops/s
# Warmup Iteration  23: 394855.742 ops/s
# Warmup Iteration  24: 397053.608 ops/s
# Warmup Iteration  25: 411905.918 ops/s
# Warmup Iteration  26: 377193.881 ops/s
# Warmup Iteration  27: 400575.680 ops/s
# Warmup Iteration  28: 378360.243 ops/s
# Warmup Iteration  29: 397034.331 ops/s
# Warmup Iteration  30: 403908.861 ops/s
Iteration   1: 389316.994 ops/s
Iteration   2: 406032.003 ops/s
Iteration   3: 395608.205 ops/s
Iteration   4: 391902.601 ops/s
Iteration   5: 405345.927 ops/s
Iteration   6: 404861.417 ops/s
Iteration   7: 391828.581 ops/s
Iteration   8: 402645.444 ops/s
Iteration   9: 402448.545 ops/s
Iteration  10: 395704.901 ops/s
Iteration  11: 406902.398 ops/s
Iteration  12: 398388.006 ops/s
Iteration  13: 407823.927 ops/s
Iteration  14: 392926.990 ops/s
Iteration  15: 389449.314 ops/s
Iteration  16: 399456.434 ops/s
Iteration  17: 406281.251 ops/s
Iteration  18: 386635.417 ops/s
Iteration  19: 403502.486 ops/s
Iteration  20: 401145.087 ops/s
Iteration  21: 405732.385 ops/s
Iteration  22: 391873.078 ops/s
Iteration  23: 399787.702 ops/s
Iteration  24: 403083.022 ops/s
Iteration  25: 393510.801 ops/s
Iteration  26: 406910.468 ops/s
Iteration  27: 396691.973 ops/s
Iteration  28: 401868.379 ops/s
Iteration  29: 387042.403 ops/s
Iteration  30: 389716.295 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriberTest._Benchmark.benchmark_offerThrows":
  398480.748 ±(99.9%) 4486.470 ops/s [Average]
  (min, avg, max) = (386635.417, 398480.748, 407823.927), stdev = 6715.138
  CI (99.9%): [393994.278, 402967.218] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
BasicFuseableConditionalSubscriberTest._Benchmark.benchmark_offerThrows  thrpt   30  398480.748 ± 4486.470  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 116240.769 ops/s
# Warmup Iteration   2: 458197.659 ops/s
# Warmup Iteration   3: 478573.362 ops/s
# Warmup Iteration   4: 498638.124 ops/s
# Warmup Iteration   5: 407423.532 ops/s
# Warmup Iteration   6: 451893.467 ops/s
# Warmup Iteration   7: 527211.286 ops/s
# Warmup Iteration   8: 521385.815 ops/s
# Warmup Iteration   9: 548274.253 ops/s
# Warmup Iteration  10: 516664.422 ops/s
# Warmup Iteration  11: 544703.647 ops/s
# Warmup Iteration  12: 525511.636 ops/s
# Warmup Iteration  13: 540270.176 ops/s
# Warmup Iteration  14: 518625.572 ops/s
# Warmup Iteration  15: 544636.872 ops/s
# Warmup Iteration  16: 540926.243 ops/s
# Warmup Iteration  17: 549669.580 ops/s
# Warmup Iteration  18: 552720.549 ops/s
# Warmup Iteration  19: 567912.019 ops/s
# Warmup Iteration  20: 556471.785 ops/s
# Warmup Iteration  21: 568355.420 ops/s
# Warmup Iteration  22: 547302.671 ops/s
# Warmup Iteration  23: 555474.086 ops/s
# Warmup Iteration  24: 561807.207 ops/s
# Warmup Iteration  25: 540770.382 ops/s
# Warmup Iteration  26: 561575.341 ops/s
# Warmup Iteration  27: 557635.927 ops/s
# Warmup Iteration  28: 553629.165 ops/s
# Warmup Iteration  29: 557537.744 ops/s
# Warmup Iteration  30: 549874.497 ops/s
Iteration   1: 567118.689 ops/s
Iteration   2: 547924.337 ops/s
Iteration   3: 568421.568 ops/s
Iteration   4: 549191.151 ops/s
Iteration   5: 567298.932 ops/s
Iteration   6: 548788.795 ops/s
Iteration   7: 570089.111 ops/s
Iteration   8: 544043.195 ops/s
Iteration   9: 557950.933 ops/s
Iteration  10: 567345.963 ops/s
Iteration  11: 553912.577 ops/s
Iteration  12: 569771.616 ops/s
Iteration  13: 543315.871 ops/s
Iteration  14: 558834.251 ops/s
Iteration  15: 542670.403 ops/s
Iteration  16: 572889.634 ops/s
Iteration  17: 536775.350 ops/s
Iteration  18: 571731.432 ops/s
Iteration  19: 544021.672 ops/s
Iteration  20: 576891.669 ops/s
Iteration  21: 575924.866 ops/s
Iteration  22: 542663.189 ops/s
Iteration  23: 568837.013 ops/s
Iteration  24: 542339.757 ops/s
Iteration  25: 571609.648 ops/s
Iteration  26: 547893.949 ops/s
Iteration  27: 550712.162 ops/s
Iteration  28: 572257.385 ops/s
Iteration  29: 553121.001 ops/s
Iteration  30: 565263.453 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_mapperCrash":
  558320.319 ±(99.9%) 8347.059 ops/s [Average]
  (min, avg, max) = (536775.350, 558320.319, 576891.669), stdev = 12493.486
  CI (99.9%): [549973.260, 566667.378] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_mapperCrash  thrpt   30  558320.319 ± 8347.059  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_switchOverDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_switchOverDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65183.531 ops/s
# Warmup Iteration   2: 141373.319 ops/s
# Warmup Iteration   3: 481006.736 ops/s
# Warmup Iteration   4: 448580.343 ops/s
# Warmup Iteration   5: 522167.876 ops/s
# Warmup Iteration   6: 451611.229 ops/s
# Warmup Iteration   7: 522236.286 ops/s
# Warmup Iteration   8: 556536.145 ops/s
# Warmup Iteration   9: 542642.267 ops/s
# Warmup Iteration  10: 534148.203 ops/s
# Warmup Iteration  11: 496292.350 ops/s
# Warmup Iteration  12: 534176.496 ops/s
# Warmup Iteration  13: 526966.997 ops/s
# Warmup Iteration  14: 529603.947 ops/s
# Warmup Iteration  15: 530135.612 ops/s
# Warmup Iteration  16: 523607.996 ops/s
# Warmup Iteration  17: 582103.386 ops/s
# Warmup Iteration  18: 573754.456 ops/s
# Warmup Iteration  19: 552417.933 ops/s
# Warmup Iteration  20: 545496.840 ops/s
# Warmup Iteration  21: 561438.808 ops/s
# Warmup Iteration  22: 560349.626 ops/s
# Warmup Iteration  23: 570462.369 ops/s
# Warmup Iteration  24: 541175.045 ops/s
# Warmup Iteration  25: 546888.481 ops/s
# Warmup Iteration  26: 565680.510 ops/s
# Warmup Iteration  27: 543483.896 ops/s
# Warmup Iteration  28: 528586.825 ops/s
# Warmup Iteration  29: 578855.946 ops/s
# Warmup Iteration  30: 526939.014 ops/s
Iteration   1: 573199.830 ops/s
Iteration   2: 564588.013 ops/s
Iteration   3: 565390.535 ops/s
Iteration   4: 575456.275 ops/s
Iteration   5: 527564.282 ops/s
Iteration   6: 565160.511 ops/s
Iteration   7: 557849.837 ops/s
Iteration   8: 565836.462 ops/s
Iteration   9: 619627.996 ops/s
Iteration  10: 540205.463 ops/s
Iteration  11: 552945.596 ops/s
Iteration  12: 557754.150 ops/s
Iteration  13: 551463.828 ops/s
Iteration  14: 551126.212 ops/s
Iteration  15: 535425.334 ops/s
Iteration  16: 558915.072 ops/s
Iteration  17: 550765.479 ops/s
Iteration  18: 549521.628 ops/s
Iteration  19: 571992.530 ops/s
Iteration  20: 574340.367 ops/s
Iteration  21: 540664.840 ops/s
Iteration  22: 568862.733 ops/s
Iteration  23: 546699.202 ops/s
Iteration  24: 546830.939 ops/s
Iteration  25: 573936.076 ops/s
Iteration  26: 531701.926 ops/s
Iteration  27: 549849.848 ops/s
Iteration  28: 555384.869 ops/s
Iteration  29: 555271.062 ops/s
Iteration  30: 569378.266 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_switchOverDelayError":
  558256.972 ±(99.9%) 11655.041 ops/s [Average]
  (min, avg, max) = (527564.282, 558256.972, 619627.996), stdev = 17444.718
  CI (99.9%): [546601.931, 569912.013] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_switchOverDelayError  thrpt   30  558256.972 ± 11655.041  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 380588.844 ops/s
# Warmup Iteration   2: 1619682.660 ops/s
# Warmup Iteration   3: 2336286.726 ops/s
# Warmup Iteration   4: 2352611.469 ops/s
# Warmup Iteration   5: 2247755.316 ops/s
# Warmup Iteration   6: 2307652.963 ops/s
# Warmup Iteration   7: 2436943.311 ops/s
# Warmup Iteration   8: 2541194.066 ops/s
# Warmup Iteration   9: 2391497.590 ops/s
# Warmup Iteration  10: 2575624.240 ops/s
# Warmup Iteration  11: 2467342.782 ops/s
# Warmup Iteration  12: 2476348.251 ops/s
# Warmup Iteration  13: 2459836.471 ops/s
# Warmup Iteration  14: 2547065.147 ops/s
# Warmup Iteration  15: 2419464.507 ops/s
# Warmup Iteration  16: 2483357.728 ops/s
# Warmup Iteration  17: 2416522.504 ops/s
# Warmup Iteration  18: 2448301.869 ops/s
# Warmup Iteration  19: 2466443.643 ops/s
# Warmup Iteration  20: 2428576.861 ops/s
# Warmup Iteration  21: 2549878.428 ops/s
# Warmup Iteration  22: 2492682.951 ops/s
# Warmup Iteration  23: 2430886.959 ops/s
# Warmup Iteration  24: 2444989.816 ops/s
# Warmup Iteration  25: 2477036.772 ops/s
# Warmup Iteration  26: 2470891.635 ops/s
# Warmup Iteration  27: 2526842.438 ops/s
# Warmup Iteration  28: 2429925.795 ops/s
# Warmup Iteration  29: 2526678.169 ops/s
# Warmup Iteration  30: 2445680.917 ops/s
Iteration   1: 2494507.733 ops/s
Iteration   2: 2532628.087 ops/s
Iteration   3: 2444017.968 ops/s
Iteration   4: 2461289.765 ops/s
Iteration   5: 2510127.163 ops/s
Iteration   6: 2431162.397 ops/s
Iteration   7: 2511350.519 ops/s
Iteration   8: 2437963.476 ops/s
Iteration   9: 2467575.593 ops/s
Iteration  10: 2440844.044 ops/s
Iteration  11: 2490391.205 ops/s
Iteration  12: 2406781.556 ops/s
Iteration  13: 2414235.044 ops/s
Iteration  14: 2482942.809 ops/s
Iteration  15: 2388542.853 ops/s
Iteration  16: 2459294.540 ops/s
Iteration  17: 2408527.225 ops/s
Iteration  18: 2561593.039 ops/s
Iteration  19: 2503920.164 ops/s
Iteration  20: 2447480.810 ops/s
Iteration  21: 2524585.845 ops/s
Iteration  22: 2444395.637 ops/s
Iteration  23: 2450247.737 ops/s
Iteration  24: 2545246.548 ops/s
Iteration  25: 2448702.552 ops/s
Iteration  26: 2552039.598 ops/s
Iteration  27: 2396679.962 ops/s
Iteration  28: 2494783.701 ops/s
Iteration  29: 2565350.292 ops/s
Iteration  30: 2430144.952 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_cancel":
  2471578.427 ±(99.9%) 33684.810 ops/s [Average]
  (min, avg, max) = (2388542.853, 2471578.427, 2565350.292), stdev = 50417.841
  CI (99.9%): [2437893.618, 2505263.237] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_cancel  thrpt   30  2471578.427 ± 33684.810  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_checkDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_checkDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 570252.706 ops/s
# Warmup Iteration   2: 2618943.221 ops/s
# Warmup Iteration   3: 3385404.205 ops/s
# Warmup Iteration   4: 3088061.397 ops/s
# Warmup Iteration   5: 3457998.367 ops/s
# Warmup Iteration   6: 3482727.225 ops/s
# Warmup Iteration   7: 3606836.941 ops/s
# Warmup Iteration   8: 3458544.321 ops/s
# Warmup Iteration   9: 3686353.800 ops/s
# Warmup Iteration  10: 3581161.032 ops/s
# Warmup Iteration  11: 3486603.695 ops/s
# Warmup Iteration  12: 3524791.297 ops/s
# Warmup Iteration  13: 3626420.834 ops/s
# Warmup Iteration  14: 3487412.183 ops/s
# Warmup Iteration  15: 3604793.402 ops/s
# Warmup Iteration  16: 3464884.913 ops/s
# Warmup Iteration  17: 3553562.683 ops/s
# Warmup Iteration  18: 3624621.711 ops/s
# Warmup Iteration  19: 3400391.075 ops/s
# Warmup Iteration  20: 3631285.223 ops/s
# Warmup Iteration  21: 3423831.083 ops/s
# Warmup Iteration  22: 3594633.212 ops/s
# Warmup Iteration  23: 3531055.282 ops/s
# Warmup Iteration  24: 3461165.709 ops/s
# Warmup Iteration  25: 3562917.365 ops/s
# Warmup Iteration  26: 3574331.383 ops/s
# Warmup Iteration  27: 3575637.522 ops/s
# Warmup Iteration  28: 3626709.828 ops/s
# Warmup Iteration  29: 3442075.986 ops/s
# Warmup Iteration  30: 3698264.537 ops/s
Iteration   1: 3396964.418 ops/s
Iteration   2: 3624856.253 ops/s
Iteration   3: 3362505.077 ops/s
Iteration   4: 3497783.670 ops/s
Iteration   5: 3548126.284 ops/s
Iteration   6: 3599330.395 ops/s
Iteration   7: 3458700.397 ops/s
Iteration   8: 3623607.563 ops/s
Iteration   9: 3557479.204 ops/s
Iteration  10: 3540755.347 ops/s
Iteration  11: 3614886.484 ops/s
Iteration  12: 3525816.301 ops/s
Iteration  13: 3603062.188 ops/s
Iteration  14: 3485561.740 ops/s
Iteration  15: 3511297.350 ops/s
Iteration  16: 3532170.432 ops/s
Iteration  17: 3524164.301 ops/s
Iteration  18: 3645186.906 ops/s
Iteration  19: 3542268.845 ops/s
Iteration  20: 3492604.919 ops/s
Iteration  21: 3513718.380 ops/s
Iteration  22: 3695612.948 ops/s
Iteration  23: 3562577.733 ops/s
Iteration  24: 3432690.562 ops/s
Iteration  25: 3365108.130 ops/s
Iteration  26: 3014470.431 ops/s
Iteration  27: 3579274.169 ops/s
Iteration  28: 3417809.834 ops/s
Iteration  29: 3478265.340 ops/s
Iteration  30: 3469118.939 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_checkDisposed":
  3507192.485 ±(99.9%) 82515.887 ops/s [Average]
  (min, avg, max) = (3014470.431, 3507192.485, 3695612.948), stdev = 123505.904
  CI (99.9%): [3424676.598, 3589708.372] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_checkDisposed  thrpt   30  3507192.485 ± 82515.887  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_switchOver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_switchOver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 59679.903 ops/s
# Warmup Iteration   2: 138503.499 ops/s
# Warmup Iteration   3: 490285.408 ops/s
# Warmup Iteration   4: 521363.141 ops/s
# Warmup Iteration   5: 526269.113 ops/s
# Warmup Iteration   6: 542077.878 ops/s
# Warmup Iteration   7: 519139.830 ops/s
# Warmup Iteration   8: 546118.762 ops/s
# Warmup Iteration   9: 522623.287 ops/s
# Warmup Iteration  10: 515980.858 ops/s
# Warmup Iteration  11: 528081.828 ops/s
# Warmup Iteration  12: 529656.882 ops/s
# Warmup Iteration  13: 517581.196 ops/s
# Warmup Iteration  14: 541185.149 ops/s
# Warmup Iteration  15: 526970.827 ops/s
# Warmup Iteration  16: 542479.709 ops/s
# Warmup Iteration  17: 564201.456 ops/s
# Warmup Iteration  18: 550135.672 ops/s
# Warmup Iteration  19: 548152.024 ops/s
# Warmup Iteration  20: 558584.865 ops/s
# Warmup Iteration  21: 527440.444 ops/s
# Warmup Iteration  22: 552129.295 ops/s
# Warmup Iteration  23: 550468.584 ops/s
# Warmup Iteration  24: 544099.160 ops/s
# Warmup Iteration  25: 574003.937 ops/s
# Warmup Iteration  26: 544254.713 ops/s
# Warmup Iteration  27: 557822.249 ops/s
# Warmup Iteration  28: 576724.633 ops/s
# Warmup Iteration  29: 540190.631 ops/s
# Warmup Iteration  30: 551057.801 ops/s
Iteration   1: 565992.802 ops/s
Iteration   2: 550991.241 ops/s
Iteration   3: 578495.799 ops/s
Iteration   4: 546268.196 ops/s
Iteration   5: 568956.805 ops/s
Iteration   6: 559163.854 ops/s
Iteration   7: 550711.896 ops/s
Iteration   8: 564235.739 ops/s
Iteration   9: 536688.696 ops/s
Iteration  10: 573661.979 ops/s
Iteration  11: 555015.237 ops/s
Iteration  12: 559806.521 ops/s
Iteration  13: 590980.088 ops/s
Iteration  14: 552808.042 ops/s
Iteration  15: 573342.242 ops/s
Iteration  16: 534900.011 ops/s
Iteration  17: 534135.771 ops/s
Iteration  18: 552717.527 ops/s
Iteration  19: 537415.065 ops/s
Iteration  20: 566977.859 ops/s
Iteration  21: 581202.451 ops/s
Iteration  22: 549246.992 ops/s
Iteration  23: 562058.716 ops/s
Iteration  24: 556735.838 ops/s
Iteration  25: 561610.236 ops/s
Iteration  26: 587564.001 ops/s
Iteration  27: 578939.314 ops/s
Iteration  28: 545515.612 ops/s
Iteration  29: 577986.306 ops/s
Iteration  30: 553671.661 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_switchOver":
  560259.883 ±(99.9%) 10350.767 ops/s [Average]
  (min, avg, max) = (534135.771, 560259.883, 590980.088), stdev = 15492.542
  CI (99.9%): [549909.116, 570610.650] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_switchOver  thrpt   30  560259.883 ± 10350.767  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_innerErrorAfterTermination$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_innerErrorAfterTermination

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15171.216 ops/s
# Warmup Iteration   2: 103794.926 ops/s
# Warmup Iteration   3: 151893.634 ops/s
# Warmup Iteration   4: 174734.772 ops/s
# Warmup Iteration   5: 181448.212 ops/s
# Warmup Iteration   6: 179600.158 ops/s
# Warmup Iteration   7: 168804.023 ops/s
# Warmup Iteration   8: 178568.758 ops/s
# Warmup Iteration   9: 175881.224 ops/s
# Warmup Iteration  10: 176511.720 ops/s
# Warmup Iteration  11: 175939.812 ops/s
# Warmup Iteration  12: 173758.887 ops/s
# Warmup Iteration  13: 171033.484 ops/s
# Warmup Iteration  14: 165728.330 ops/s
# Warmup Iteration  15: 177332.061 ops/s
# Warmup Iteration  16: 180474.801 ops/s
# Warmup Iteration  17: 186325.181 ops/s
# Warmup Iteration  18: 193338.996 ops/s
# Warmup Iteration  19: 180550.053 ops/s
# Warmup Iteration  20: 181759.637 ops/s
# Warmup Iteration  21: 196603.253 ops/s
# Warmup Iteration  22: 184481.045 ops/s
# Warmup Iteration  23: 175568.718 ops/s
# Warmup Iteration  24: 189881.854 ops/s
# Warmup Iteration  25: 178576.935 ops/s
# Warmup Iteration  26: 190245.180 ops/s
# Warmup Iteration  27: 183825.735 ops/s
# Warmup Iteration  28: 190431.141 ops/s
# Warmup Iteration  29: 180560.561 ops/s
# Warmup Iteration  30: 187742.988 ops/s
Iteration   1: 183259.412 ops/s
Iteration   2: 182852.470 ops/s
Iteration   3: 188137.649 ops/s
Iteration   4: 193473.819 ops/s
Iteration   5: 178353.586 ops/s
Iteration   6: 188474.317 ops/s
Iteration   7: 182841.983 ops/s
Iteration   8: 191650.097 ops/s
Iteration   9: 183225.326 ops/s
Iteration  10: 187858.070 ops/s
Iteration  11: 188683.852 ops/s
Iteration  12: 178348.033 ops/s
Iteration  13: 191417.940 ops/s
Iteration  14: 185804.262 ops/s
Iteration  15: 177264.802 ops/s
Iteration  16: 178760.528 ops/s
Iteration  17: 185696.993 ops/s
Iteration  18: 186009.138 ops/s
Iteration  19: 189445.330 ops/s
Iteration  20: 129826.389 ops/s
Iteration  21: 187003.830 ops/s
Iteration  22: 194809.146 ops/s
Iteration  23: 180328.057 ops/s
Iteration  24: 188475.491 ops/s
Iteration  25: 184965.214 ops/s
Iteration  26: 185776.701 ops/s
Iteration  27: 188794.079 ops/s
Iteration  28: 188046.981 ops/s
Iteration  29: 182007.990 ops/s
Iteration  30: 183486.204 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_innerErrorAfterTermination":
  183835.923 ±(99.9%) 7442.444 ops/s [Average]
  (min, avg, max) = (129826.389, 183835.923, 194809.146), stdev = 11139.500
  CI (99.9%): [176393.479, 191278.367] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_innerErrorAfterTermination  thrpt   30  183835.923 ± 7442.444  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_scalarEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_scalarEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1195880.385 ops/s
# Warmup Iteration   2: 6007602.185 ops/s
# Warmup Iteration   3: 7925582.646 ops/s
# Warmup Iteration   4: 8337277.213 ops/s
# Warmup Iteration   5: 8563644.007 ops/s
# Warmup Iteration   6: 8301532.638 ops/s
# Warmup Iteration   7: 8009685.402 ops/s
# Warmup Iteration   8: 8339357.330 ops/s
# Warmup Iteration   9: 8380749.003 ops/s
# Warmup Iteration  10: 8496161.303 ops/s
# Warmup Iteration  11: 8475951.422 ops/s
# Warmup Iteration  12: 7902980.778 ops/s
# Warmup Iteration  13: 8712282.630 ops/s
# Warmup Iteration  14: 8416259.288 ops/s
# Warmup Iteration  15: 8333528.966 ops/s
# Warmup Iteration  16: 8590660.966 ops/s
# Warmup Iteration  17: 8443362.147 ops/s
# Warmup Iteration  18: 8412475.231 ops/s
# Warmup Iteration  19: 8319453.115 ops/s
# Warmup Iteration  20: 8383050.600 ops/s
# Warmup Iteration  21: 8659477.888 ops/s
# Warmup Iteration  22: 8059688.370 ops/s
# Warmup Iteration  23: 8437612.896 ops/s
# Warmup Iteration  24: 8460475.923 ops/s
# Warmup Iteration  25: 8246659.758 ops/s
# Warmup Iteration  26: 8697325.014 ops/s
# Warmup Iteration  27: 8456316.175 ops/s
# Warmup Iteration  28: 8178421.936 ops/s
# Warmup Iteration  29: 8846331.799 ops/s
# Warmup Iteration  30: 8384188.205 ops/s
Iteration   1: 8520951.653 ops/s
Iteration   2: 8111854.596 ops/s
Iteration   3: 8771198.784 ops/s
Iteration   4: 8439202.067 ops/s
Iteration   5: 8295099.593 ops/s
Iteration   6: 8522742.626 ops/s
Iteration   7: 8387744.951 ops/s
Iteration   8: 8550849.816 ops/s
Iteration   9: 8385256.795 ops/s
Iteration  10: 8245237.417 ops/s
Iteration  11: 8846919.493 ops/s
Iteration  12: 8332578.538 ops/s
Iteration  13: 8322637.309 ops/s
Iteration  14: 8434395.665 ops/s
Iteration  15: 8451491.471 ops/s
Iteration  16: 8532849.173 ops/s
Iteration  17: 8547729.439 ops/s
Iteration  18: 8247572.724 ops/s
Iteration  19: 8720344.889 ops/s
Iteration  20: 8292955.685 ops/s
Iteration  21: 8350163.520 ops/s
Iteration  22: 8745850.275 ops/s
Iteration  23: 8226451.087 ops/s
Iteration  24: 8519117.828 ops/s
Iteration  25: 8326112.617 ops/s
Iteration  26: 8428235.094 ops/s
Iteration  27: 8258349.238 ops/s
Iteration  28: 8408262.538 ops/s
Iteration  29: 8645174.709 ops/s
Iteration  30: 8230215.986 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_scalarEmptySource":
  8436584.853 ±(99.9%) 120451.719 ops/s [Average]
  (min, avg, max) = (8111854.596, 8436584.853, 8846919.493), stdev = 180286.476
  CI (99.9%): [8316133.134, 8557036.571] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_scalarEmptySource  thrpt   30  8436584.853 ± 120451.719  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_scalarMapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_scalarMapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 207860.823 ops/s
# Warmup Iteration   2: 533772.164 ops/s
# Warmup Iteration   3: 634760.250 ops/s
# Warmup Iteration   4: 616362.998 ops/s
# Warmup Iteration   5: 653366.511 ops/s
# Warmup Iteration   6: 614627.490 ops/s
# Warmup Iteration   7: 631072.424 ops/s
# Warmup Iteration   8: 654637.788 ops/s
# Warmup Iteration   9: 618273.283 ops/s
# Warmup Iteration  10: 629407.392 ops/s
# Warmup Iteration  11: 616881.411 ops/s
# Warmup Iteration  12: 627319.267 ops/s
# Warmup Iteration  13: 646367.354 ops/s
# Warmup Iteration  14: 598267.139 ops/s
# Warmup Iteration  15: 625617.761 ops/s
# Warmup Iteration  16: 652490.366 ops/s
# Warmup Iteration  17: 644618.819 ops/s
# Warmup Iteration  18: 672043.116 ops/s
# Warmup Iteration  19: 631109.176 ops/s
# Warmup Iteration  20: 691860.785 ops/s
# Warmup Iteration  21: 678973.790 ops/s
# Warmup Iteration  22: 655696.545 ops/s
# Warmup Iteration  23: 686028.557 ops/s
# Warmup Iteration  24: 654294.903 ops/s
# Warmup Iteration  25: 655883.183 ops/s
# Warmup Iteration  26: 690743.086 ops/s
# Warmup Iteration  27: 651067.039 ops/s
# Warmup Iteration  28: 676770.261 ops/s
# Warmup Iteration  29: 645395.779 ops/s
# Warmup Iteration  30: 671219.773 ops/s
Iteration   1: 675648.662 ops/s
Iteration   2: 648084.564 ops/s
Iteration   3: 681459.764 ops/s
Iteration   4: 622213.093 ops/s
Iteration   5: 638646.301 ops/s
Iteration   6: 681407.468 ops/s
Iteration   7: 669105.953 ops/s
Iteration   8: 674285.237 ops/s
Iteration   9: 675646.241 ops/s
Iteration  10: 669931.885 ops/s
Iteration  11: 682038.775 ops/s
Iteration  12: 659954.310 ops/s
Iteration  13: 666658.490 ops/s
Iteration  14: 660171.644 ops/s
Iteration  15: 501683.059 ops/s
Iteration  16: 670524.542 ops/s
Iteration  17: 655138.713 ops/s
Iteration  18: 689293.086 ops/s
Iteration  19: 661510.497 ops/s
Iteration  20: 679089.437 ops/s
Iteration  21: 660929.652 ops/s
Iteration  22: 633548.399 ops/s
Iteration  23: 669519.286 ops/s
Iteration  24: 653197.643 ops/s
Iteration  25: 662097.630 ops/s
Iteration  26: 693465.332 ops/s
Iteration  27: 658582.917 ops/s
Iteration  28: 688947.138 ops/s
Iteration  29: 654020.202 ops/s
Iteration  30: 663160.878 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_scalarMapperCrash":
  659998.693 ±(99.9%) 22748.640 ops/s [Average]
  (min, avg, max) = (501683.059, 659998.693, 693465.332), stdev = 34049.095
  CI (99.9%): [637250.054, 682747.333] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_scalarMapperCrash  thrpt   30  659998.693 ± 22748.640  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33444.793 ops/s
# Warmup Iteration   2: 150704.535 ops/s
# Warmup Iteration   3: 191876.197 ops/s
# Warmup Iteration   4: 209106.323 ops/s
# Warmup Iteration   5: 212348.435 ops/s
# Warmup Iteration   6: 207094.771 ops/s
# Warmup Iteration   7: 209673.383 ops/s
# Warmup Iteration   8: 207304.966 ops/s
# Warmup Iteration   9: 207920.090 ops/s
# Warmup Iteration  10: 207580.075 ops/s
# Warmup Iteration  11: 212903.907 ops/s
# Warmup Iteration  12: 211429.917 ops/s
# Warmup Iteration  13: 197031.486 ops/s
# Warmup Iteration  14: 210710.589 ops/s
# Warmup Iteration  15: 206642.790 ops/s
# Warmup Iteration  16: 217197.387 ops/s
# Warmup Iteration  17: 224301.322 ops/s
# Warmup Iteration  18: 215106.100 ops/s
# Warmup Iteration  19: 224184.103 ops/s
# Warmup Iteration  20: 211886.031 ops/s
# Warmup Iteration  21: 221374.546 ops/s
# Warmup Iteration  22: 212835.891 ops/s
# Warmup Iteration  23: 223526.747 ops/s
# Warmup Iteration  24: 221837.912 ops/s
# Warmup Iteration  25: 214495.404 ops/s
# Warmup Iteration  26: 223234.319 ops/s
# Warmup Iteration  27: 224446.467 ops/s
# Warmup Iteration  28: 210064.485 ops/s
# Warmup Iteration  29: 222626.174 ops/s
# Warmup Iteration  30: 210286.463 ops/s
Iteration   1: 215164.734 ops/s
Iteration   2: 207090.079 ops/s
Iteration   3: 219960.178 ops/s
Iteration   4: 221368.775 ops/s
Iteration   5: 208751.883 ops/s
Iteration   6: 217381.347 ops/s
Iteration   7: 221072.222 ops/s
Iteration   8: 207934.035 ops/s
Iteration   9: 222504.754 ops/s
Iteration  10: 209079.346 ops/s
Iteration  11: 225320.017 ops/s
Iteration  12: 224114.246 ops/s
Iteration  13: 213645.470 ops/s
Iteration  14: 222663.109 ops/s
Iteration  15: 217126.714 ops/s
Iteration  16: 217425.946 ops/s
Iteration  17: 225656.655 ops/s
Iteration  18: 206820.975 ops/s
Iteration  19: 213758.718 ops/s
Iteration  20: 220375.961 ops/s
Iteration  21: 216165.776 ops/s
Iteration  22: 217219.542 ops/s
Iteration  23: 213882.868 ops/s
Iteration  24: 222795.673 ops/s
Iteration  25: 213950.830 ops/s
Iteration  26: 218201.709 ops/s
Iteration  27: 216898.242 ops/s
Iteration  28: 214361.631 ops/s
Iteration  29: 231089.584 ops/s
Iteration  30: 212972.147 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  217158.439 ±(99.9%) 3979.725 ops/s [Average]
  (min, avg, max) = (206820.975, 217158.439, 231089.584), stdev = 5956.666
  CI (99.9%): [213178.714, 221138.164] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  217158.439 ± 3979.725  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_cancelMainOnOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_cancelMainOnOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69208.665 ops/s
# Warmup Iteration   2: 502587.709 ops/s
# Warmup Iteration   3: 575371.126 ops/s
# Warmup Iteration   4: 610288.410 ops/s
# Warmup Iteration   5: 598842.323 ops/s
# Warmup Iteration   6: 602175.014 ops/s
# Warmup Iteration   7: 580298.271 ops/s
# Warmup Iteration   8: 602026.742 ops/s
# Warmup Iteration   9: 621965.652 ops/s
# Warmup Iteration  10: 597879.282 ops/s
# Warmup Iteration  11: 595873.646 ops/s
# Warmup Iteration  12: 624907.880 ops/s
# Warmup Iteration  13: 602006.901 ops/s
# Warmup Iteration  14: 609876.038 ops/s
# Warmup Iteration  15: 600306.253 ops/s
# Warmup Iteration  16: 610192.470 ops/s
# Warmup Iteration  17: 644054.894 ops/s
# Warmup Iteration  18: 653851.447 ops/s
# Warmup Iteration  19: 601120.523 ops/s
# Warmup Iteration  20: 643746.685 ops/s
# Warmup Iteration  21: 653576.683 ops/s
# Warmup Iteration  22: 624159.102 ops/s
# Warmup Iteration  23: 647627.748 ops/s
# Warmup Iteration  24: 617039.484 ops/s
# Warmup Iteration  25: 637950.090 ops/s
# Warmup Iteration  26: 648675.423 ops/s
# Warmup Iteration  27: 616588.696 ops/s
# Warmup Iteration  28: 656765.291 ops/s
# Warmup Iteration  29: 639701.020 ops/s
# Warmup Iteration  30: 638334.198 ops/s
Iteration   1: 662842.830 ops/s
Iteration   2: 621167.169 ops/s
Iteration   3: 639661.724 ops/s
Iteration   4: 647420.658 ops/s
Iteration   5: 615708.275 ops/s
Iteration   6: 647325.564 ops/s
Iteration   7: 669176.063 ops/s
Iteration   8: 613436.157 ops/s
Iteration   9: 563274.679 ops/s
Iteration  10: 644881.386 ops/s
Iteration  11: 615770.045 ops/s
Iteration  12: 671027.769 ops/s
Iteration  13: 663067.990 ops/s
Iteration  14: 636277.607 ops/s
Iteration  15: 610916.927 ops/s
Iteration  16: 629859.354 ops/s
Iteration  17: 643183.215 ops/s
Iteration  18: 638679.742 ops/s
Iteration  19: 674437.110 ops/s
Iteration  20: 643031.613 ops/s
Iteration  21: 650088.484 ops/s
Iteration  22: 631933.401 ops/s
Iteration  23: 659566.743 ops/s
Iteration  24: 624754.924 ops/s
Iteration  25: 647507.937 ops/s
Iteration  26: 645800.949 ops/s
Iteration  27: 656599.341 ops/s
Iteration  28: 643196.146 ops/s
Iteration  29: 634844.951 ops/s
Iteration  30: 658207.803 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_cancelMainOnOtherError":
  640121.552 ±(99.9%) 15098.247 ops/s [Average]
  (min, avg, max) = (563274.679, 640121.552, 674437.110), stdev = 22598.347
  CI (99.9%): [625023.305, 655219.799] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_cancelMainOnOtherError  thrpt   30  640121.552 ± 15098.247  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_cancelOtherOnMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_cancelOtherOnMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 128011.307 ops/s
# Warmup Iteration   2: 466319.150 ops/s
# Warmup Iteration   3: 530316.858 ops/s
# Warmup Iteration   4: 593092.242 ops/s
# Warmup Iteration   5: 548791.121 ops/s
# Warmup Iteration   6: 603028.563 ops/s
# Warmup Iteration   7: 629020.500 ops/s
# Warmup Iteration   8: 616079.566 ops/s
# Warmup Iteration   9: 615638.726 ops/s
# Warmup Iteration  10: 597545.841 ops/s
# Warmup Iteration  11: 616797.590 ops/s
# Warmup Iteration  12: 604186.845 ops/s
# Warmup Iteration  13: 613679.045 ops/s
# Warmup Iteration  14: 568047.628 ops/s
# Warmup Iteration  15: 614341.581 ops/s
# Warmup Iteration  16: 614301.747 ops/s
# Warmup Iteration  17: 631325.356 ops/s
# Warmup Iteration  18: 654282.829 ops/s
# Warmup Iteration  19: 645096.870 ops/s
# Warmup Iteration  20: 640056.971 ops/s
# Warmup Iteration  21: 664803.099 ops/s
# Warmup Iteration  22: 639401.118 ops/s
# Warmup Iteration  23: 638649.298 ops/s
# Warmup Iteration  24: 638104.672 ops/s
# Warmup Iteration  25: 649383.265 ops/s
# Warmup Iteration  26: 640406.173 ops/s
# Warmup Iteration  27: 653142.798 ops/s
# Warmup Iteration  28: 630403.202 ops/s
# Warmup Iteration  29: 677109.582 ops/s
# Warmup Iteration  30: 665496.405 ops/s
Iteration   1: 628794.303 ops/s
Iteration   2: 662187.881 ops/s
Iteration   3: 630473.805 ops/s
Iteration   4: 629880.988 ops/s
Iteration   5: 635931.528 ops/s
Iteration   6: 637740.040 ops/s
Iteration   7: 669875.168 ops/s
Iteration   8: 627943.509 ops/s
Iteration   9: 638702.601 ops/s
Iteration  10: 645277.429 ops/s
Iteration  11: 650697.234 ops/s
Iteration  12: 675385.927 ops/s
Iteration  13: 621754.645 ops/s
Iteration  14: 661510.771 ops/s
Iteration  15: 636842.804 ops/s
Iteration  16: 639439.479 ops/s
Iteration  17: 655592.335 ops/s
Iteration  18: 625341.821 ops/s
Iteration  19: 644069.086 ops/s
Iteration  20: 653783.036 ops/s
Iteration  21: 641775.042 ops/s
Iteration  22: 663874.308 ops/s
Iteration  23: 624224.787 ops/s
Iteration  24: 664452.522 ops/s
Iteration  25: 632060.742 ops/s
Iteration  26: 654319.619 ops/s
Iteration  27: 630980.474 ops/s
Iteration  28: 648396.883 ops/s
Iteration  29: 640562.142 ops/s
Iteration  30: 642753.799 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_cancelOtherOnMainError":
  643820.824 ±(99.9%) 9726.989 ops/s [Average]
  (min, avg, max) = (621754.645, 643820.824, 675385.927), stdev = 14558.900
  CI (99.9%): [634093.835, 653547.812] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_cancelOtherOnMainError  thrpt   30  643820.824 ± 9726.989  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 572910.303 ops/s
# Warmup Iteration   2: 4254446.727 ops/s
# Warmup Iteration   3: 5225900.944 ops/s
# Warmup Iteration   4: 5762148.276 ops/s
# Warmup Iteration   5: 6014852.905 ops/s
# Warmup Iteration   6: 5766910.023 ops/s
# Warmup Iteration   7: 5767777.287 ops/s
# Warmup Iteration   8: 6138786.969 ops/s
# Warmup Iteration   9: 5693509.130 ops/s
# Warmup Iteration  10: 5826007.409 ops/s
# Warmup Iteration  11: 6174946.709 ops/s
# Warmup Iteration  12: 5753438.469 ops/s
# Warmup Iteration  13: 6052793.936 ops/s
# Warmup Iteration  14: 5783833.263 ops/s
# Warmup Iteration  15: 5902759.926 ops/s
# Warmup Iteration  16: 5793277.863 ops/s
# Warmup Iteration  17: 5930105.929 ops/s
# Warmup Iteration  18: 6151412.992 ops/s
# Warmup Iteration  19: 5779354.969 ops/s
# Warmup Iteration  20: 5883576.309 ops/s
# Warmup Iteration  21: 6108704.933 ops/s
# Warmup Iteration  22: 5939905.830 ops/s
# Warmup Iteration  23: 5982804.813 ops/s
# Warmup Iteration  24: 6119358.084 ops/s
# Warmup Iteration  25: 5809443.979 ops/s
# Warmup Iteration  26: 6075108.089 ops/s
# Warmup Iteration  27: 6114169.339 ops/s
# Warmup Iteration  28: 5766184.086 ops/s
# Warmup Iteration  29: 6115416.187 ops/s
# Warmup Iteration  30: 5815539.808 ops/s
Iteration   1: 5881922.330 ops/s
Iteration   2: 6135630.721 ops/s
Iteration   3: 6139951.369 ops/s
Iteration   4: 4347214.902 ops/s
Iteration   5: 5769983.200 ops/s
Iteration   6: 5885414.267 ops/s
Iteration   7: 5942752.060 ops/s
Iteration   8: 5990253.767 ops/s
Iteration   9: 5705518.575 ops/s
Iteration  10: 6030179.042 ops/s
Iteration  11: 5822577.423 ops/s
Iteration  12: 6115094.366 ops/s
Iteration  13: 5861483.437 ops/s
Iteration  14: 5837565.204 ops/s
Iteration  15: 5912075.277 ops/s
Iteration  16: 5671363.517 ops/s
Iteration  17: 6115509.770 ops/s
Iteration  18: 5842856.905 ops/s
Iteration  19: 5941154.960 ops/s
Iteration  20: 5759812.361 ops/s
Iteration  21: 5791574.224 ops/s
Iteration  22: 6110547.534 ops/s
Iteration  23: 5975981.583 ops/s
Iteration  24: 5771372.931 ops/s
Iteration  25: 6163718.697 ops/s
Iteration  26: 6040225.701 ops/s
Iteration  27: 5822982.761 ops/s
Iteration  28: 6166732.765 ops/s
Iteration  29: 5647412.173 ops/s
Iteration  30: 5912827.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValue":
  5870389.649 ±(99.9%) 217376.703 ops/s [Average]
  (min, avg, max) = (4347214.902, 5870389.649, 6166732.765), stdev = 325359.240
  CI (99.9%): [5653012.946, 6087766.352] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValue  thrpt   30  5870389.649 ± 217376.703  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValueDifferentType$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValueDifferentType

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1043889.688 ops/s
# Warmup Iteration   2: 3964883.051 ops/s
# Warmup Iteration   3: 5532898.777 ops/s
# Warmup Iteration   4: 5648897.127 ops/s
# Warmup Iteration   5: 5735978.000 ops/s
# Warmup Iteration   6: 5835118.609 ops/s
# Warmup Iteration   7: 5636123.207 ops/s
# Warmup Iteration   8: 5686753.992 ops/s
# Warmup Iteration   9: 5805396.064 ops/s
# Warmup Iteration  10: 5571666.730 ops/s
# Warmup Iteration  11: 5511791.260 ops/s
# Warmup Iteration  12: 5926162.440 ops/s
# Warmup Iteration  13: 5564983.305 ops/s
# Warmup Iteration  14: 5652176.195 ops/s
# Warmup Iteration  15: 5787673.048 ops/s
# Warmup Iteration  16: 5663305.457 ops/s
# Warmup Iteration  17: 5773803.608 ops/s
# Warmup Iteration  18: 5605446.457 ops/s
# Warmup Iteration  19: 5791541.884 ops/s
# Warmup Iteration  20: 5767565.410 ops/s
# Warmup Iteration  21: 5486711.068 ops/s
# Warmup Iteration  22: 5896461.156 ops/s
# Warmup Iteration  23: 5861903.146 ops/s
# Warmup Iteration  24: 5679284.539 ops/s
# Warmup Iteration  25: 5911196.654 ops/s
# Warmup Iteration  26: 5508038.962 ops/s
# Warmup Iteration  27: 5788280.296 ops/s
# Warmup Iteration  28: 5737956.968 ops/s
# Warmup Iteration  29: 5670034.065 ops/s
# Warmup Iteration  30: 5846025.910 ops/s
Iteration   1: 5640834.905 ops/s
Iteration   2: 5901716.930 ops/s
Iteration   3: 5808043.490 ops/s
Iteration   4: 5680805.145 ops/s
Iteration   5: 5953405.735 ops/s
Iteration   6: 5817551.414 ops/s
Iteration   7: 5573248.494 ops/s
Iteration   8: 5890514.950 ops/s
Iteration   9: 5520091.795 ops/s
Iteration  10: 5824269.389 ops/s
Iteration  11: 5627017.729 ops/s
Iteration  12: 5828666.566 ops/s
Iteration  13: 5867862.346 ops/s
Iteration  14: 5556362.600 ops/s
Iteration  15: 5782670.100 ops/s
Iteration  16: 5873505.321 ops/s
Iteration  17: 5696581.128 ops/s
Iteration  18: 5831250.523 ops/s
Iteration  19: 5545678.496 ops/s
Iteration  20: 5791188.998 ops/s
Iteration  21: 5829066.213 ops/s
Iteration  22: 5784011.503 ops/s
Iteration  23: 5824462.109 ops/s
Iteration  24: 5595088.585 ops/s
Iteration  25: 5737221.686 ops/s
Iteration  26: 5695780.445 ops/s
Iteration  27: 5899059.326 ops/s
Iteration  28: 5730583.104 ops/s
Iteration  29: 5790921.556 ops/s
Iteration  30: 5679726.997 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValueDifferentType":
  5752572.919 ±(99.9%) 79379.763 ops/s [Average]
  (min, avg, max) = (5520091.795, 5752572.919, 5953405.735), stdev = 118811.901
  CI (99.9%): [5673193.156, 5831952.682] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MaybeFlatMapSingleTest._Benchmark.benchmark_flatMapSingleValueDifferentType  thrpt   30  5752572.919 ± 79379.763  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 203407.513 ops/s
# Warmup Iteration   2: 502730.023 ops/s
# Warmup Iteration   3: 611612.794 ops/s
# Warmup Iteration   4: 627144.017 ops/s
# Warmup Iteration   5: 639977.122 ops/s
# Warmup Iteration   6: 651389.093 ops/s
# Warmup Iteration   7: 615370.549 ops/s
# Warmup Iteration   8: 610008.041 ops/s
# Warmup Iteration   9: 611599.783 ops/s
# Warmup Iteration  10: 628560.616 ops/s
# Warmup Iteration  11: 613394.270 ops/s
# Warmup Iteration  12: 649925.700 ops/s
# Warmup Iteration  13: 630897.495 ops/s
# Warmup Iteration  14: 642486.417 ops/s
# Warmup Iteration  15: 617408.894 ops/s
# Warmup Iteration  16: 647405.994 ops/s
# Warmup Iteration  17: 641576.691 ops/s
# Warmup Iteration  18: 673005.098 ops/s
# Warmup Iteration  19: 663927.122 ops/s
# Warmup Iteration  20: 651952.211 ops/s
# Warmup Iteration  21: 668955.764 ops/s
# Warmup Iteration  22: 641314.103 ops/s
# Warmup Iteration  23: 647960.158 ops/s
# Warmup Iteration  24: 641274.133 ops/s
# Warmup Iteration  25: 648276.121 ops/s
# Warmup Iteration  26: 659777.682 ops/s
# Warmup Iteration  27: 656288.329 ops/s
# Warmup Iteration  28: 511577.674 ops/s
# Warmup Iteration  29: 633960.002 ops/s
# Warmup Iteration  30: 652362.241 ops/s
Iteration   1: 674113.480 ops/s
Iteration   2: 661091.413 ops/s
Iteration   3: 647748.975 ops/s
Iteration   4: 682988.157 ops/s
Iteration   5: 616013.153 ops/s
Iteration   6: 652572.240 ops/s
Iteration   7: 669621.488 ops/s
Iteration   8: 642507.050 ops/s
Iteration   9: 658670.871 ops/s
Iteration  10: 667237.746 ops/s
Iteration  11: 652256.806 ops/s
Iteration  12: 686913.327 ops/s
Iteration  13: 633505.265 ops/s
Iteration  14: 663760.490 ops/s
Iteration  15: 674019.742 ops/s
Iteration  16: 647551.461 ops/s
Iteration  17: 681061.099 ops/s
Iteration  18: 678357.536 ops/s
Iteration  19: 631392.664 ops/s
Iteration  20: 667607.011 ops/s
Iteration  21: 678668.066 ops/s
Iteration  22: 638804.201 ops/s
Iteration  23: 670252.176 ops/s
Iteration  24: 646174.476 ops/s
Iteration  25: 663824.734 ops/s
Iteration  26: 657164.303 ops/s
Iteration  27: 647956.156 ops/s
Iteration  28: 654059.097 ops/s
Iteration  29: 639633.052 ops/s
Iteration  30: 650979.235 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_mapperCrash":
  657883.516 ±(99.9%) 11431.019 ops/s [Average]
  (min, avg, max) = (616013.153, 657883.516, 686913.327), stdev = 17109.413
  CI (99.9%): [646452.496, 669314.535] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_mapperCrash  thrpt   30  657883.516 ± 11431.019  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successMany$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successMany

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 479036.797 ops/s
# Warmup Iteration   2: 2293653.912 ops/s
# Warmup Iteration   3: 3220620.405 ops/s
# Warmup Iteration   4: 3007943.969 ops/s
# Warmup Iteration   5: 3224276.406 ops/s
# Warmup Iteration   6: 3221193.565 ops/s
# Warmup Iteration   7: 3014691.010 ops/s
# Warmup Iteration   8: 2817691.740 ops/s
# Warmup Iteration   9: 3117102.572 ops/s
# Warmup Iteration  10: 3098678.969 ops/s
# Warmup Iteration  11: 2992379.249 ops/s
# Warmup Iteration  12: 3285718.088 ops/s
# Warmup Iteration  13: 3052906.900 ops/s
# Warmup Iteration  14: 3122864.706 ops/s
# Warmup Iteration  15: 3219689.913 ops/s
# Warmup Iteration  16: 3106658.367 ops/s
# Warmup Iteration  17: 3168180.938 ops/s
# Warmup Iteration  18: 3196477.348 ops/s
# Warmup Iteration  19: 3091219.740 ops/s
# Warmup Iteration  20: 3230839.414 ops/s
# Warmup Iteration  21: 3239422.838 ops/s
# Warmup Iteration  22: 3070137.915 ops/s
# Warmup Iteration  23: 3268228.295 ops/s
# Warmup Iteration  24: 3111009.439 ops/s
# Warmup Iteration  25: 3063676.063 ops/s
# Warmup Iteration  26: 3227482.420 ops/s
# Warmup Iteration  27: 2994389.611 ops/s
# Warmup Iteration  28: 3138392.851 ops/s
# Warmup Iteration  29: 3139915.532 ops/s
# Warmup Iteration  30: 3029513.220 ops/s
Iteration   1: 3189912.707 ops/s
Iteration   2: 3059523.710 ops/s
Iteration   3: 3270853.431 ops/s
Iteration   4: 3145203.733 ops/s
Iteration   5: 3066467.906 ops/s
Iteration   6: 3164489.938 ops/s
Iteration   7: 3270720.524 ops/s
Iteration   8: 3063066.996 ops/s
Iteration   9: 3218955.211 ops/s
Iteration  10: 3103533.928 ops/s
Iteration  11: 3132632.959 ops/s
Iteration  12: 3140242.989 ops/s
Iteration  13: 3166021.010 ops/s
Iteration  14: 3014068.490 ops/s
Iteration  15: 3067773.930 ops/s
Iteration  16: 3050934.253 ops/s
Iteration  17: 3249252.225 ops/s
Iteration  18: 3104664.485 ops/s
Iteration  19: 3150687.579 ops/s
Iteration  20: 3329081.932 ops/s
Iteration  21: 3026890.140 ops/s
Iteration  22: 3234010.676 ops/s
Iteration  23: 3086520.259 ops/s
Iteration  24: 3197417.501 ops/s
Iteration  25: 3030045.702 ops/s
Iteration  26: 3142016.918 ops/s
Iteration  27: 3170517.646 ops/s
Iteration  28: 3017127.324 ops/s
Iteration  29: 3242534.583 ops/s
Iteration  30: 3213082.665 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successMany":
  3143941.712 ±(99.9%) 57229.652 ops/s [Average]
  (min, avg, max) = (3014068.490, 3143941.712, 3329081.932), stdev = 85658.655
  CI (99.9%): [3086712.060, 3201171.363] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successMany  thrpt   30  3143941.712 ± 57229.652  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 444820.791 ops/s
# Warmup Iteration   2: 2844778.102 ops/s
# Warmup Iteration   3: 4307171.568 ops/s
# Warmup Iteration   4: 4377269.531 ops/s
# Warmup Iteration   5: 4178786.178 ops/s
# Warmup Iteration   6: 3850750.914 ops/s
# Warmup Iteration   7: 4569385.952 ops/s
# Warmup Iteration   8: 4277483.561 ops/s
# Warmup Iteration   9: 4462695.804 ops/s
# Warmup Iteration  10: 4416977.105 ops/s
# Warmup Iteration  11: 4314256.611 ops/s
# Warmup Iteration  12: 4514550.881 ops/s
# Warmup Iteration  13: 4303368.310 ops/s
# Warmup Iteration  14: 4578141.080 ops/s
# Warmup Iteration  15: 4371839.092 ops/s
# Warmup Iteration  16: 4373861.337 ops/s
# Warmup Iteration  17: 4364502.838 ops/s
# Warmup Iteration  18: 4398597.300 ops/s
# Warmup Iteration  19: 4628431.952 ops/s
# Warmup Iteration  20: 4247154.289 ops/s
# Warmup Iteration  21: 4545660.926 ops/s
# Warmup Iteration  22: 4273997.742 ops/s
# Warmup Iteration  23: 3031399.996 ops/s
# Warmup Iteration  24: 4468299.477 ops/s
# Warmup Iteration  25: 4309166.399 ops/s
# Warmup Iteration  26: 4546679.011 ops/s
# Warmup Iteration  27: 4349596.869 ops/s
# Warmup Iteration  28: 4238879.504 ops/s
# Warmup Iteration  29: 4489469.351 ops/s
# Warmup Iteration  30: 4257945.526 ops/s
Iteration   1: 4630962.471 ops/s
Iteration   2: 4510810.907 ops/s
Iteration   3: 4335772.528 ops/s
Iteration   4: 4536723.406 ops/s
Iteration   5: 4553074.238 ops/s
Iteration   6: 4292703.449 ops/s
Iteration   7: 4565447.273 ops/s
Iteration   8: 4225060.626 ops/s
Iteration   9: 4552540.756 ops/s
Iteration  10: 4442301.193 ops/s
Iteration  11: 4485388.229 ops/s
Iteration  12: 4427699.623 ops/s
Iteration  13: 4377042.700 ops/s
Iteration  14: 4449941.716 ops/s
Iteration  15: 4347951.037 ops/s
Iteration  16: 4400015.323 ops/s
Iteration  17: 4396368.367 ops/s
Iteration  18: 4521005.067 ops/s
Iteration  19: 4409274.540 ops/s
Iteration  20: 4551234.937 ops/s
Iteration  21: 4405302.683 ops/s
Iteration  22: 4349988.089 ops/s
Iteration  23: 4517312.781 ops/s
Iteration  24: 4280196.349 ops/s
Iteration  25: 4522691.358 ops/s
Iteration  26: 4368123.242 ops/s
Iteration  27: 4408891.469 ops/s
Iteration  28: 4597748.156 ops/s
Iteration  29: 4401571.621 ops/s
Iteration  30: 4288543.364 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successJust":
  4438389.583 ±(99.9%) 69291.606 ops/s [Average]
  (min, avg, max) = (4225060.626, 4438389.583, 4630962.471), stdev = 103712.421
  CI (99.9%): [4369097.978, 4507681.189] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsObservableTest._Benchmark.benchmark_successJust  thrpt   30  4438389.583 ± 69291.606  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_cancelOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_cancelOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 919390.298 ops/s
# Warmup Iteration   2: 3102495.967 ops/s
# Warmup Iteration   3: 3421926.141 ops/s
# Warmup Iteration   4: 3867991.999 ops/s
# Warmup Iteration   5: 4066654.408 ops/s
# Warmup Iteration   6: 3844399.090 ops/s
# Warmup Iteration   7: 3926247.311 ops/s
# Warmup Iteration   8: 3995679.383 ops/s
# Warmup Iteration   9: 3758419.717 ops/s
# Warmup Iteration  10: 4005506.784 ops/s
# Warmup Iteration  11: 3998602.151 ops/s
# Warmup Iteration  12: 3814008.677 ops/s
# Warmup Iteration  13: 4040697.313 ops/s
# Warmup Iteration  14: 3930898.613 ops/s
# Warmup Iteration  15: 3916215.517 ops/s
# Warmup Iteration  16: 3816459.676 ops/s
# Warmup Iteration  17: 3940766.640 ops/s
# Warmup Iteration  18: 3956899.901 ops/s
# Warmup Iteration  19: 3839877.066 ops/s
# Warmup Iteration  20: 4014351.224 ops/s
# Warmup Iteration  21: 3887474.125 ops/s
# Warmup Iteration  22: 3943543.543 ops/s
# Warmup Iteration  23: 4082185.100 ops/s
# Warmup Iteration  24: 3838842.568 ops/s
# Warmup Iteration  25: 3833862.811 ops/s
# Warmup Iteration  26: 3993470.647 ops/s
# Warmup Iteration  27: 3851595.833 ops/s
# Warmup Iteration  28: 3781335.783 ops/s
# Warmup Iteration  29: 3974038.201 ops/s
# Warmup Iteration  30: 3992520.321 ops/s
Iteration   1: 3922200.413 ops/s
Iteration   2: 3992828.710 ops/s
Iteration   3: 3805805.056 ops/s
Iteration   4: 3870418.699 ops/s
Iteration   5: 4048145.707 ops/s
Iteration   6: 3972051.644 ops/s
Iteration   7: 3984563.831 ops/s
Iteration   8: 3857376.976 ops/s
Iteration   9: 3994981.006 ops/s
Iteration  10: 3982906.396 ops/s
Iteration  11: 3830929.656 ops/s
Iteration  12: 3984724.200 ops/s
Iteration  13: 3921788.324 ops/s
Iteration  14: 3924856.647 ops/s
Iteration  15: 4009728.892 ops/s
Iteration  16: 3886853.381 ops/s
Iteration  17: 3911331.735 ops/s
Iteration  18: 3990439.451 ops/s
Iteration  19: 3825766.792 ops/s
Iteration  20: 3941607.104 ops/s
Iteration  21: 3840302.672 ops/s
Iteration  22: 3812990.502 ops/s
Iteration  23: 4060039.203 ops/s
Iteration  24: 3844526.628 ops/s
Iteration  25: 4046953.095 ops/s
Iteration  26: 3828291.123 ops/s
Iteration  27: 4103690.103 ops/s
Iteration  28: 3931711.855 ops/s
Iteration  29: 3825234.216 ops/s
Iteration  30: 3971287.015 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_cancelOther":
  3930811.034 ±(99.9%) 55886.254 ops/s [Average]
  (min, avg, max) = (3805805.056, 3930811.034, 4103690.103), stdev = 83647.920
  CI (99.9%): [3874924.780, 3986697.288] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableConcatWithMaybeTest._Benchmark.benchmark_cancelOther  thrpt   30  3930811.034 ± 55886.254  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_doesntContain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_doesntContain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1543460.312 ops/s
# Warmup Iteration   2: 4792718.230 ops/s
# Warmup Iteration   3: 7005229.600 ops/s
# Warmup Iteration   4: 6703012.356 ops/s
# Warmup Iteration   5: 7034932.031 ops/s
# Warmup Iteration   6: 6832246.238 ops/s
# Warmup Iteration   7: 6807473.944 ops/s
# Warmup Iteration   8: 6783240.988 ops/s
# Warmup Iteration   9: 6830577.714 ops/s
# Warmup Iteration  10: 6798044.467 ops/s
# Warmup Iteration  11: 6640000.300 ops/s
# Warmup Iteration  12: 7040956.224 ops/s
# Warmup Iteration  13: 6718217.745 ops/s
# Warmup Iteration  14: 6884665.282 ops/s
# Warmup Iteration  15: 6740829.088 ops/s
# Warmup Iteration  16: 6851829.723 ops/s
# Warmup Iteration  17: 5535612.690 ops/s
# Warmup Iteration  18: 6941300.346 ops/s
# Warmup Iteration  19: 6691060.389 ops/s
# Warmup Iteration  20: 7069923.913 ops/s
# Warmup Iteration  21: 6850525.123 ops/s
# Warmup Iteration  22: 6801969.900 ops/s
# Warmup Iteration  23: 7036075.104 ops/s
# Warmup Iteration  24: 6619896.229 ops/s
# Warmup Iteration  25: 6814180.116 ops/s
# Warmup Iteration  26: 7039411.586 ops/s
# Warmup Iteration  27: 6560270.795 ops/s
# Warmup Iteration  28: 7133974.867 ops/s
# Warmup Iteration  29: 6936667.499 ops/s
# Warmup Iteration  30: 6779107.888 ops/s
Iteration   1: 6983260.278 ops/s
Iteration   2: 6869325.667 ops/s
Iteration   3: 7056838.246 ops/s
Iteration   4: 6784604.535 ops/s
Iteration   5: 6851530.016 ops/s
Iteration   6: 7045582.208 ops/s
Iteration   7: 6739799.811 ops/s
Iteration   8: 7085228.856 ops/s
Iteration   9: 7028075.865 ops/s
Iteration  10: 6772354.774 ops/s
Iteration  11: 7114480.339 ops/s
Iteration  12: 6827290.434 ops/s
Iteration  13: 6904626.428 ops/s
Iteration  14: 6916419.708 ops/s
Iteration  15: 6820371.557 ops/s
Iteration  16: 6733793.034 ops/s
Iteration  17: 7125286.133 ops/s
Iteration  18: 6581080.196 ops/s
Iteration  19: 6939818.578 ops/s
Iteration  20: 6747801.958 ops/s
Iteration  21: 7009338.072 ops/s
Iteration  22: 6863428.814 ops/s
Iteration  23: 7026030.535 ops/s
Iteration  24: 6965654.238 ops/s
Iteration  25: 6980536.365 ops/s
Iteration  26: 7034923.799 ops/s
Iteration  27: 6552732.001 ops/s
Iteration  28: 6969027.378 ops/s
Iteration  29: 7112098.424 ops/s
Iteration  30: 6624303.108 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_doesntContain":
  6902188.045 ±(99.9%) 105939.670 ops/s [Average]
  (min, avg, max) = (6552732.001, 6902188.045, 7125286.133), stdev = 158565.523
  CI (99.9%): [6796248.375, 7008127.715] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
MaybeContainsTest._Benchmark.benchmark_doesntContain  thrpt   30  6902188.045 ± 105939.670  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_doesContain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_doesContain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2217392.459 ops/s
# Warmup Iteration   2: 4716572.572 ops/s
# Warmup Iteration   3: 7334310.498 ops/s
# Warmup Iteration   4: 7246704.423 ops/s
# Warmup Iteration   5: 6680048.570 ops/s
# Warmup Iteration   6: 7146876.465 ops/s
# Warmup Iteration   7: 6697466.686 ops/s
# Warmup Iteration   8: 6940597.971 ops/s
# Warmup Iteration   9: 7318312.659 ops/s
# Warmup Iteration  10: 6857926.006 ops/s
# Warmup Iteration  11: 7043283.952 ops/s
# Warmup Iteration  12: 7150179.615 ops/s
# Warmup Iteration  13: 6990713.170 ops/s
# Warmup Iteration  14: 7200101.383 ops/s
# Warmup Iteration  15: 6851792.499 ops/s
# Warmup Iteration  16: 6956084.355 ops/s
# Warmup Iteration  17: 7077075.775 ops/s
# Warmup Iteration  18: 6926980.554 ops/s
# Warmup Iteration  19: 7233799.621 ops/s
# Warmup Iteration  20: 6833252.390 ops/s
# Warmup Iteration  21: 7121953.450 ops/s
# Warmup Iteration  22: 7104727.455 ops/s
# Warmup Iteration  23: 6929618.737 ops/s
# Warmup Iteration  24: 6946257.120 ops/s
# Warmup Iteration  25: 7225608.655 ops/s
# Warmup Iteration  26: 6765583.837 ops/s
# Warmup Iteration  27: 6993721.893 ops/s
# Warmup Iteration  28: 7118588.733 ops/s
# Warmup Iteration  29: 6867454.484 ops/s
# Warmup Iteration  30: 7267571.236 ops/s
Iteration   1: 6896434.763 ops/s
Iteration   2: 7043200.846 ops/s
Iteration   3: 7201859.414 ops/s
Iteration   4: 6826090.361 ops/s
Iteration   5: 7006104.866 ops/s
Iteration   6: 7186387.240 ops/s
Iteration   7: 6845063.658 ops/s
Iteration   8: 7148614.520 ops/s
Iteration   9: 7081002.798 ops/s
Iteration  10: 6977009.856 ops/s
Iteration  11: 7258260.889 ops/s
Iteration  12: 6800703.594 ops/s
Iteration  13: 7108698.612 ops/s
Iteration  14: 7089542.563 ops/s
Iteration  15: 7171878.930 ops/s
Iteration  16: 6941571.434 ops/s
Iteration  17: 7011889.974 ops/s
Iteration  18: 7219287.572 ops/s
Iteration  19: 6964342.565 ops/s
Iteration  20: 7241143.536 ops/s
Iteration  21: 7259175.154 ops/s
Iteration  22: 7070383.291 ops/s
Iteration  23: 7236411.301 ops/s
Iteration  24: 6935631.120 ops/s
Iteration  25: 6969032.495 ops/s
Iteration  26: 7028479.017 ops/s
Iteration  27: 7097350.703 ops/s
Iteration  28: 6926197.388 ops/s
Iteration  29: 6815374.911 ops/s
Iteration  30: 7405464.563 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_doesContain":
  7058752.931 ±(99.9%) 102471.166 ops/s [Average]
  (min, avg, max) = (6800703.594, 7058752.931, 7405464.563), stdev = 153374.029
  CI (99.9%): [6956281.765, 7161224.097] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score        Error  Units
MaybeContainsTest._Benchmark.benchmark_doesContain  thrpt   30  7058752.931 ± 102471.166  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2019019.400 ops/s
# Warmup Iteration   2: 5688743.128 ops/s
# Warmup Iteration   3: 7985422.346 ops/s
# Warmup Iteration   4: 8078744.400 ops/s
# Warmup Iteration   5: 7520012.054 ops/s
# Warmup Iteration   6: 7809139.060 ops/s
# Warmup Iteration   7: 7782721.307 ops/s
# Warmup Iteration   8: 7674518.663 ops/s
# Warmup Iteration   9: 7876722.175 ops/s
# Warmup Iteration  10: 7706497.246 ops/s
# Warmup Iteration  11: 7753770.882 ops/s
# Warmup Iteration  12: 6466331.216 ops/s
# Warmup Iteration  13: 7438682.077 ops/s
# Warmup Iteration  14: 8159239.527 ops/s
# Warmup Iteration  15: 7998537.766 ops/s
# Warmup Iteration  16: 7669669.954 ops/s
# Warmup Iteration  17: 7904634.215 ops/s
# Warmup Iteration  18: 7496598.477 ops/s
# Warmup Iteration  19: 7796100.541 ops/s
# Warmup Iteration  20: 7904375.342 ops/s
# Warmup Iteration  21: 7724931.636 ops/s
# Warmup Iteration  22: 7690231.130 ops/s
# Warmup Iteration  23: 7765010.044 ops/s
# Warmup Iteration  24: 7504825.824 ops/s
# Warmup Iteration  25: 7851294.602 ops/s
# Warmup Iteration  26: 7595455.007 ops/s
# Warmup Iteration  27: 7736954.930 ops/s
# Warmup Iteration  28: 7807512.313 ops/s
# Warmup Iteration  29: 8081739.659 ops/s
# Warmup Iteration  30: 7506746.001 ops/s
Iteration   1: 7616537.243 ops/s
Iteration   2: 7959380.478 ops/s
Iteration   3: 7801425.627 ops/s
Iteration   4: 7985533.764 ops/s
Iteration   5: 7557664.065 ops/s
Iteration   6: 7795955.319 ops/s
Iteration   7: 8166017.676 ops/s
Iteration   8: 7596128.355 ops/s
Iteration   9: 7839202.354 ops/s
Iteration  10: 7486052.444 ops/s
Iteration  11: 7821683.448 ops/s
Iteration  12: 7752909.483 ops/s
Iteration  13: 7775176.945 ops/s
Iteration  14: 7910925.056 ops/s
Iteration  15: 7777547.700 ops/s
Iteration  16: 7801033.304 ops/s
Iteration  17: 8020302.925 ops/s
Iteration  18: 7481447.102 ops/s
Iteration  19: 7825334.524 ops/s
Iteration  20: 7630495.208 ops/s
Iteration  21: 7697559.496 ops/s
Iteration  22: 7840192.911 ops/s
Iteration  23: 7835628.284 ops/s
Iteration  24: 7939653.029 ops/s
Iteration  25: 7834539.740 ops/s
Iteration  26: 7531448.948 ops/s
Iteration  27: 8102521.394 ops/s
Iteration  28: 8030337.951 ops/s
Iteration  29: 7514631.649 ops/s
Iteration  30: 8075637.350 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_dispose":
  7800096.792 ±(99.9%) 126006.626 ops/s [Average]
  (min, avg, max) = (7481447.102, 7800096.792, 8166017.676), stdev = 188600.800
  CI (99.9%): [7674090.167, 7926103.418] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
MaybeFlatMapNotificationTest._Benchmark.benchmark_dispose  thrpt   30  7800096.792 ± 126006.626  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 765755.948 ops/s
# Warmup Iteration   2: 4781307.074 ops/s
# Warmup Iteration   3: 6475711.700 ops/s
# Warmup Iteration   4: 7046879.342 ops/s
# Warmup Iteration   5: 7236822.157 ops/s
# Warmup Iteration   6: 6981458.682 ops/s
# Warmup Iteration   7: 7172516.313 ops/s
# Warmup Iteration   8: 7031237.296 ops/s
# Warmup Iteration   9: 7281264.795 ops/s
# Warmup Iteration  10: 6771236.608 ops/s
# Warmup Iteration  11: 7278343.137 ops/s
# Warmup Iteration  12: 6749239.161 ops/s
# Warmup Iteration  13: 7220182.460 ops/s
# Warmup Iteration  14: 7101032.682 ops/s
# Warmup Iteration  15: 7083069.799 ops/s
# Warmup Iteration  16: 7109993.799 ops/s
# Warmup Iteration  17: 7293026.444 ops/s
# Warmup Iteration  18: 6999054.452 ops/s
# Warmup Iteration  19: 7220996.496 ops/s
# Warmup Iteration  20: 7017725.381 ops/s
# Warmup Iteration  21: 7449197.902 ops/s
# Warmup Iteration  22: 6977436.210 ops/s
# Warmup Iteration  23: 7076945.614 ops/s
# Warmup Iteration  24: 7028880.066 ops/s
# Warmup Iteration  25: 7116093.818 ops/s
# Warmup Iteration  26: 7059106.403 ops/s
# Warmup Iteration  27: 7095005.735 ops/s
# Warmup Iteration  28: 7390999.181 ops/s
# Warmup Iteration  29: 7058127.776 ops/s
# Warmup Iteration  30: 7244588.410 ops/s
Iteration   1: 6901819.340 ops/s
Iteration   2: 7317647.438 ops/s
Iteration   3: 7365067.102 ops/s
Iteration   4: 7015216.170 ops/s
Iteration   5: 7090339.124 ops/s
Iteration   6: 7182340.556 ops/s
Iteration   7: 7328611.785 ops/s
Iteration   8: 7015419.496 ops/s
Iteration   9: 7189024.742 ops/s
Iteration  10: 6912902.866 ops/s
Iteration  11: 6920716.939 ops/s
Iteration  12: 7370185.084 ops/s
Iteration  13: 7020096.003 ops/s
Iteration  14: 7272025.286 ops/s
Iteration  15: 7226430.189 ops/s
Iteration  16: 7286174.026 ops/s
Iteration  17: 6911307.004 ops/s
Iteration  18: 7260727.753 ops/s
Iteration  19: 7014951.973 ops/s
Iteration  20: 7261216.512 ops/s
Iteration  21: 7301168.926 ops/s
Iteration  22: 6960561.573 ops/s
Iteration  23: 7412223.375 ops/s
Iteration  24: 7157804.945 ops/s
Iteration  25: 6984853.711 ops/s
Iteration  26: 7338680.536 ops/s
Iteration  27: 7044081.552 ops/s
Iteration  28: 7015687.005 ops/s
Iteration  29: 7188604.359 ops/s
Iteration  30: 7057193.791 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_normal":
  7144102.639 ±(99.9%) 107606.656 ops/s [Average]
  (min, avg, max) = (6901819.340, 7144102.639, 7412223.375), stdev = 161060.590
  CI (99.9%): [7036495.982, 7251709.295] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score        Error  Units
MaybeIsEmptyTest._Benchmark.benchmark_normal  thrpt   30  7144102.639 ± 107606.656  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_success$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_success

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1066935.651 ops/s
# Warmup Iteration   2: 4719988.497 ops/s
# Warmup Iteration   3: 6340748.000 ops/s
# Warmup Iteration   4: 6723394.894 ops/s
# Warmup Iteration   5: 7028206.767 ops/s
# Warmup Iteration   6: 6520130.232 ops/s
# Warmup Iteration   7: 5902967.323 ops/s
# Warmup Iteration   8: 6763799.452 ops/s
# Warmup Iteration   9: 6684758.811 ops/s
# Warmup Iteration  10: 6991824.312 ops/s
# Warmup Iteration  11: 6655212.322 ops/s
# Warmup Iteration  12: 6951394.251 ops/s
# Warmup Iteration  13: 6609464.097 ops/s
# Warmup Iteration  14: 7005028.021 ops/s
# Warmup Iteration  15: 6756559.424 ops/s
# Warmup Iteration  16: 6692108.738 ops/s
# Warmup Iteration  17: 7016222.979 ops/s
# Warmup Iteration  18: 6529394.227 ops/s
# Warmup Iteration  19: 6962397.046 ops/s
# Warmup Iteration  20: 6689283.102 ops/s
# Warmup Iteration  21: 6845967.169 ops/s
# Warmup Iteration  22: 6948334.815 ops/s
# Warmup Iteration  23: 6610509.391 ops/s
# Warmup Iteration  24: 6890695.957 ops/s
# Warmup Iteration  25: 6822882.886 ops/s
# Warmup Iteration  26: 6714704.702 ops/s
# Warmup Iteration  27: 6904843.837 ops/s
# Warmup Iteration  28: 6762261.020 ops/s
# Warmup Iteration  29: 7107333.043 ops/s
# Warmup Iteration  30: 7007865.956 ops/s
Iteration   1: 6578623.714 ops/s
Iteration   2: 6869564.665 ops/s
Iteration   3: 7090727.099 ops/s
Iteration   4: 6677125.848 ops/s
Iteration   5: 6723251.798 ops/s
Iteration   6: 6834575.248 ops/s
Iteration   7: 6754426.086 ops/s
Iteration   8: 7087588.389 ops/s
Iteration   9: 6643446.799 ops/s
Iteration  10: 6866211.924 ops/s
Iteration  11: 6747053.995 ops/s
Iteration  12: 7040324.468 ops/s
Iteration  13: 6858527.878 ops/s
Iteration  14: 6633887.547 ops/s
Iteration  15: 6793228.907 ops/s
Iteration  16: 7102539.156 ops/s
Iteration  17: 6581881.704 ops/s
Iteration  18: 6914981.389 ops/s
Iteration  19: 6871820.536 ops/s
Iteration  20: 7057494.594 ops/s
Iteration  21: 6570754.861 ops/s
Iteration  22: 6963739.495 ops/s
Iteration  23: 7054953.236 ops/s
Iteration  24: 6714642.237 ops/s
Iteration  25: 7053142.137 ops/s
Iteration  26: 6633000.236 ops/s
Iteration  27: 6785255.400 ops/s
Iteration  28: 6955286.206 ops/s
Iteration  29: 6604675.581 ops/s
Iteration  30: 6901374.986 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterializeTest._Benchmark.benchmark_success":
  6832136.871 ±(99.9%) 116055.172 ops/s [Average]
  (min, avg, max) = (6570754.861, 6832136.871, 7102539.156), stdev = 173705.931
  CI (99.9%): [6716081.699, 6948192.043] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
MaybeMaterializeTest._Benchmark.benchmark_success  thrpt   30  6832136.871 ± 116055.172  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_defaultIfEmptyNonEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_defaultIfEmptyNonEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1604385.038 ops/s
# Warmup Iteration   2: 4638181.432 ops/s
# Warmup Iteration   3: 6957450.484 ops/s
# Warmup Iteration   4: 6928879.266 ops/s
# Warmup Iteration   5: 7328164.906 ops/s
# Warmup Iteration   6: 6990320.092 ops/s
# Warmup Iteration   7: 7204776.297 ops/s
# Warmup Iteration   8: 7409066.625 ops/s
# Warmup Iteration   9: 6847882.665 ops/s
# Warmup Iteration  10: 7351646.026 ops/s
# Warmup Iteration  11: 7053170.253 ops/s
# Warmup Iteration  12: 7293165.738 ops/s
# Warmup Iteration  13: 7034847.990 ops/s
# Warmup Iteration  14: 7365885.557 ops/s
# Warmup Iteration  15: 7075717.345 ops/s
# Warmup Iteration  16: 7331719.010 ops/s
# Warmup Iteration  17: 7215544.110 ops/s
# Warmup Iteration  18: 6984968.934 ops/s
# Warmup Iteration  19: 7499703.849 ops/s
# Warmup Iteration  20: 6928594.221 ops/s
# Warmup Iteration  21: 7503692.775 ops/s
# Warmup Iteration  22: 6936483.393 ops/s
# Warmup Iteration  23: 7121828.501 ops/s
# Warmup Iteration  24: 6883131.791 ops/s
# Warmup Iteration  25: 7497366.508 ops/s
# Warmup Iteration  26: 6999363.286 ops/s
# Warmup Iteration  27: 7389714.833 ops/s
# Warmup Iteration  28: 7287044.312 ops/s
# Warmup Iteration  29: 7091341.510 ops/s
# Warmup Iteration  30: 7204535.712 ops/s
Iteration   1: 7112082.673 ops/s
Iteration   2: 7012320.467 ops/s
Iteration   3: 7106428.498 ops/s
Iteration   4: 7180398.282 ops/s
Iteration   5: 7196340.779 ops/s
Iteration   6: 6900977.324 ops/s
Iteration   7: 7440384.908 ops/s
Iteration   8: 7009472.304 ops/s
Iteration   9: 7158874.763 ops/s
Iteration  10: 7095603.250 ops/s
Iteration  11: 7394851.301 ops/s
Iteration  12: 7001332.620 ops/s
Iteration  13: 7119668.427 ops/s
Iteration  14: 7425233.457 ops/s
Iteration  15: 7033524.689 ops/s
Iteration  16: 7396858.824 ops/s
Iteration  17: 7134630.031 ops/s
Iteration  18: 6975123.670 ops/s
Iteration  19: 7477463.263 ops/s
Iteration  20: 6920587.909 ops/s
Iteration  21: 7149433.446 ops/s
Iteration  22: 7325711.153 ops/s
Iteration  23: 6958898.642 ops/s
Iteration  24: 7577880.634 ops/s
Iteration  25: 7056464.671 ops/s
Iteration  26: 7127915.262 ops/s
Iteration  27: 7319391.886 ops/s
Iteration  28: 7275805.066 ops/s
Iteration  29: 7301334.504 ops/s
Iteration  30: 7084654.442 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_defaultIfEmptyNonEmpty":
  7175654.905 ±(99.9%) 119648.161 ops/s [Average]
  (min, avg, max) = (6900977.324, 7175654.905, 7577880.634), stdev = 179083.749
  CI (99.9%): [7056006.744, 7295303.066] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score        Error  Units
MaybeSwitchIfEmptyTest._Benchmark.benchmark_defaultIfEmptyNonEmpty  thrpt   30  7175654.905 ± 119648.161  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_normalWithEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_normalWithEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 885265.725 ops/s
# Warmup Iteration   2: 4048499.985 ops/s
# Warmup Iteration   3: 5725877.975 ops/s
# Warmup Iteration   4: 6084028.560 ops/s
# Warmup Iteration   5: 6266027.402 ops/s
# Warmup Iteration   6: 6042155.758 ops/s
# Warmup Iteration   7: 6129099.724 ops/s
# Warmup Iteration   8: 6305850.699 ops/s
# Warmup Iteration   9: 5998264.682 ops/s
# Warmup Iteration  10: 6172903.416 ops/s
# Warmup Iteration  11: 6202499.020 ops/s
# Warmup Iteration  12: 5987503.408 ops/s
# Warmup Iteration  13: 6222552.209 ops/s
# Warmup Iteration  14: 5806923.577 ops/s
# Warmup Iteration  15: 6189996.323 ops/s
# Warmup Iteration  16: 5999287.426 ops/s
# Warmup Iteration  17: 5974027.309 ops/s
# Warmup Iteration  18: 6252145.230 ops/s
# Warmup Iteration  19: 6156965.457 ops/s
# Warmup Iteration  20: 6119342.606 ops/s
# Warmup Iteration  21: 6265308.846 ops/s
# Warmup Iteration  22: 5951304.369 ops/s
# Warmup Iteration  23: 6209771.539 ops/s
# Warmup Iteration  24: 5837218.633 ops/s
# Warmup Iteration  25: 6029860.551 ops/s
# Warmup Iteration  26: 6073264.822 ops/s
# Warmup Iteration  27: 6250034.596 ops/s
# Warmup Iteration  28: 5972721.822 ops/s
# Warmup Iteration  29: 6090638.565 ops/s
# Warmup Iteration  30: 6165493.542 ops/s
Iteration   1: 5854825.787 ops/s
Iteration   2: 6041414.241 ops/s
Iteration   3: 6361907.429 ops/s
Iteration   4: 6079050.138 ops/s
Iteration   5: 6234696.024 ops/s
Iteration   6: 5990783.414 ops/s
Iteration   7: 6229347.809 ops/s
Iteration   8: 6252331.995 ops/s
Iteration   9: 5928110.502 ops/s
Iteration  10: 6062755.119 ops/s
Iteration  11: 5955110.332 ops/s
Iteration  12: 6308657.388 ops/s
Iteration  13: 5901483.308 ops/s
Iteration  14: 6183658.059 ops/s
Iteration  15: 6188146.643 ops/s
Iteration  16: 6058468.569 ops/s
Iteration  17: 5934928.789 ops/s
Iteration  18: 6133969.187 ops/s
Iteration  19: 6078817.412 ops/s
Iteration  20: 6212923.212 ops/s
Iteration  21: 6204601.997 ops/s
Iteration  22: 6101695.495 ops/s
Iteration  23: 6215873.455 ops/s
Iteration  24: 6371698.267 ops/s
Iteration  25: 6005930.375 ops/s
Iteration  26: 6125664.896 ops/s
Iteration  27: 6227551.705 ops/s
Iteration  28: 6065796.106 ops/s
Iteration  29: 6249225.472 ops/s
Iteration  30: 6069564.583 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_normalWithEmpty":
  6120966.257 ±(99.9%) 90380.516 ops/s [Average]
  (min, avg, max) = (5854825.787, 6120966.257, 6371698.267), stdev = 135277.312
  CI (99.9%): [6030585.741, 6211346.773] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MaybeFlatMapBiSelectorTest._Benchmark.benchmark_normalWithEmpty  thrpt   30  6120966.257 ± 90380.516  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147061.075 ops/s
# Warmup Iteration   2: 560880.231 ops/s
# Warmup Iteration   3: 519437.070 ops/s
# Warmup Iteration   4: 550647.569 ops/s
# Warmup Iteration   5: 654239.061 ops/s
# Warmup Iteration   6: 607638.461 ops/s
# Warmup Iteration   7: 560394.050 ops/s
# Warmup Iteration   8: 598888.825 ops/s
# Warmup Iteration   9: 635376.672 ops/s
# Warmup Iteration  10: 632838.548 ops/s
# Warmup Iteration  11: 600206.030 ops/s
# Warmup Iteration  12: 644080.375 ops/s
# Warmup Iteration  13: 619170.015 ops/s
# Warmup Iteration  14: 637758.310 ops/s
# Warmup Iteration  15: 623642.462 ops/s
# Warmup Iteration  16: 627684.616 ops/s
# Warmup Iteration  17: 677753.189 ops/s
# Warmup Iteration  18: 636608.252 ops/s
# Warmup Iteration  19: 673460.016 ops/s
# Warmup Iteration  20: 659818.418 ops/s
# Warmup Iteration  21: 663931.637 ops/s
# Warmup Iteration  22: 660092.917 ops/s
# Warmup Iteration  23: 644621.748 ops/s
# Warmup Iteration  24: 654855.365 ops/s
# Warmup Iteration  25: 676221.827 ops/s
# Warmup Iteration  26: 637203.237 ops/s
# Warmup Iteration  27: 695315.438 ops/s
# Warmup Iteration  28: 646473.397 ops/s
# Warmup Iteration  29: 651591.086 ops/s
# Warmup Iteration  30: 674839.902 ops/s
Iteration   1: 643821.933 ops/s
Iteration   2: 678778.495 ops/s
Iteration   3: 646680.254 ops/s
Iteration   4: 664867.187 ops/s
Iteration   5: 662743.374 ops/s
Iteration   6: 650646.007 ops/s
Iteration   7: 657729.969 ops/s
Iteration   8: 663899.419 ops/s
Iteration   9: 642221.574 ops/s
Iteration  10: 683393.867 ops/s
Iteration  11: 647706.708 ops/s
Iteration  12: 672514.978 ops/s
Iteration  13: 642686.980 ops/s
Iteration  14: 655759.343 ops/s
Iteration  15: 674045.325 ops/s
Iteration  16: 637788.690 ops/s
Iteration  17: 653376.819 ops/s
Iteration  18: 674011.652 ops/s
Iteration  19: 640933.239 ops/s
Iteration  20: 682903.590 ops/s
Iteration  21: 635495.061 ops/s
Iteration  22: 686737.983 ops/s
Iteration  23: 643738.889 ops/s
Iteration  24: 654059.234 ops/s
Iteration  25: 673223.079 ops/s
Iteration  26: 649856.146 ops/s
Iteration  27: 673643.283 ops/s
Iteration  28: 430014.346 ops/s
Iteration  29: 669299.383 ops/s
Iteration  30: 655561.617 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull":
  651604.614 ±(99.9%) 29672.842 ops/s [Average]
  (min, avg, max) = (430014.346, 651604.614, 686737.983), stdev = 44412.917
  CI (99.9%): [621931.772, 681277.456] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
MaybeFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull  thrpt   30  651604.614 ± 29672.842  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 92228.653 ops/s
# Warmup Iteration   2: 531693.227 ops/s
# Warmup Iteration   3: 597305.273 ops/s
# Warmup Iteration   4: 555014.411 ops/s
# Warmup Iteration   5: 570803.990 ops/s
# Warmup Iteration   6: 592531.779 ops/s
# Warmup Iteration   7: 637721.653 ops/s
# Warmup Iteration   8: 610216.269 ops/s
# Warmup Iteration   9: 617396.619 ops/s
# Warmup Iteration  10: 628147.153 ops/s
# Warmup Iteration  11: 616061.918 ops/s
# Warmup Iteration  12: 626219.795 ops/s
# Warmup Iteration  13: 630921.283 ops/s
# Warmup Iteration  14: 599338.742 ops/s
# Warmup Iteration  15: 629466.383 ops/s
# Warmup Iteration  16: 626227.022 ops/s
# Warmup Iteration  17: 624242.471 ops/s
# Warmup Iteration  18: 673631.348 ops/s
# Warmup Iteration  19: 627910.331 ops/s
# Warmup Iteration  20: 651459.692 ops/s
# Warmup Iteration  21: 639145.071 ops/s
# Warmup Iteration  22: 639821.567 ops/s
# Warmup Iteration  23: 661907.333 ops/s
# Warmup Iteration  24: 624349.712 ops/s
# Warmup Iteration  25: 625301.698 ops/s
# Warmup Iteration  26: 671979.548 ops/s
# Warmup Iteration  27: 660967.623 ops/s
# Warmup Iteration  28: 635468.061 ops/s
# Warmup Iteration  29: 648660.237 ops/s
# Warmup Iteration  30: 667402.205 ops/s
Iteration   1: 634163.179 ops/s
Iteration   2: 636204.064 ops/s
Iteration   3: 657299.052 ops/s
Iteration   4: 625587.983 ops/s
Iteration   5: 640864.569 ops/s
Iteration   6: 641849.326 ops/s
Iteration   7: 631642.517 ops/s
Iteration   8: 629083.196 ops/s
Iteration   9: 653492.758 ops/s
Iteration  10: 676496.055 ops/s
Iteration  11: 627593.605 ops/s
Iteration  12: 642217.849 ops/s
Iteration  13: 652519.986 ops/s
Iteration  14: 642668.762 ops/s
Iteration  15: 660726.185 ops/s
Iteration  16: 634472.673 ops/s
Iteration  17: 645729.991 ops/s
Iteration  18: 643315.860 ops/s
Iteration  19: 647303.662 ops/s
Iteration  20: 654067.755 ops/s
Iteration  21: 629424.410 ops/s
Iteration  22: 680180.880 ops/s
Iteration  23: 631270.906 ops/s
Iteration  24: 658728.217 ops/s
Iteration  25: 642651.547 ops/s
Iteration  26: 647645.707 ops/s
Iteration  27: 630103.008 ops/s
Iteration  28: 650114.759 ops/s
Iteration  29: 663370.472 ops/s
Iteration  30: 627261.418 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull":
  644601.678 ±(99.9%) 9475.207 ops/s [Average]
  (min, avg, max) = (625587.983, 644601.678, 680180.880), stdev = 14182.044
  CI (99.9%): [635126.472, 654076.885] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MaybeConcatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull  thrpt   30  644601.678 ± 9475.207  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_singleErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_singleErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 198637.340 ops/s
# Warmup Iteration   2: 510132.123 ops/s
# Warmup Iteration   3: 570249.265 ops/s
# Warmup Iteration   4: 557090.995 ops/s
# Warmup Iteration   5: 531478.065 ops/s
# Warmup Iteration   6: 594655.970 ops/s
# Warmup Iteration   7: 586997.053 ops/s
# Warmup Iteration   8: 597913.666 ops/s
# Warmup Iteration   9: 600750.327 ops/s
# Warmup Iteration  10: 581971.229 ops/s
# Warmup Iteration  11: 600604.291 ops/s
# Warmup Iteration  12: 586647.854 ops/s
# Warmup Iteration  13: 602368.437 ops/s
# Warmup Iteration  14: 598046.513 ops/s
# Warmup Iteration  15: 589949.107 ops/s
# Warmup Iteration  16: 588157.274 ops/s
# Warmup Iteration  17: 618469.025 ops/s
# Warmup Iteration  18: 628351.276 ops/s
# Warmup Iteration  19: 619546.091 ops/s
# Warmup Iteration  20: 632142.717 ops/s
# Warmup Iteration  21: 615322.262 ops/s
# Warmup Iteration  22: 615874.967 ops/s
# Warmup Iteration  23: 652990.248 ops/s
# Warmup Iteration  24: 608642.382 ops/s
# Warmup Iteration  25: 618413.220 ops/s
# Warmup Iteration  26: 647918.303 ops/s
# Warmup Iteration  27: 600008.998 ops/s
# Warmup Iteration  28: 638274.700 ops/s
# Warmup Iteration  29: 610547.349 ops/s
# Warmup Iteration  30: 622496.635 ops/s
Iteration   1: 633277.818 ops/s
Iteration   2: 604156.902 ops/s
Iteration   3: 618920.435 ops/s
Iteration   4: 638342.119 ops/s
Iteration   5: 611260.184 ops/s
Iteration   6: 645200.512 ops/s
Iteration   7: 612543.684 ops/s
Iteration   8: 616647.770 ops/s
Iteration   9: 637394.060 ops/s
Iteration  10: 610175.117 ops/s
Iteration  11: 647557.110 ops/s
Iteration  12: 609770.299 ops/s
Iteration  13: 631317.685 ops/s
Iteration  14: 630991.840 ops/s
Iteration  15: 603035.108 ops/s
Iteration  16: 608929.142 ops/s
Iteration  17: 650472.191 ops/s
Iteration  18: 618004.174 ops/s
Iteration  19: 631549.841 ops/s
Iteration  20: 620544.570 ops/s
Iteration  21: 630877.527 ops/s
Iteration  22: 496309.261 ops/s
Iteration  23: 650357.570 ops/s
Iteration  24: 573173.988 ops/s
Iteration  25: 639658.446 ops/s
Iteration  26: 606057.210 ops/s
Iteration  27: 633622.899 ops/s
Iteration  28: 645382.300 ops/s
Iteration  29: 602854.589 ops/s
Iteration  30: 642216.805 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_singleErrors":
  620020.039 ±(99.9%) 19719.009 ops/s [Average]
  (min, avg, max) = (496309.261, 620020.039, 650472.191), stdev = 29514.486
  CI (99.9%): [600301.030, 639739.047] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
MaybeFlatMapSingleElementTest._Benchmark.benchmark_singleErrors  thrpt   30  620020.039 ± 19719.009  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_singleErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_singleErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 111534.823 ops/s
# Warmup Iteration   2: 481854.711 ops/s
# Warmup Iteration   3: 551518.495 ops/s
# Warmup Iteration   4: 583634.893 ops/s
# Warmup Iteration   5: 567147.691 ops/s
# Warmup Iteration   6: 563392.106 ops/s
# Warmup Iteration   7: 617003.012 ops/s
# Warmup Iteration   8: 591486.859 ops/s
# Warmup Iteration   9: 610990.376 ops/s
# Warmup Iteration  10: 605445.837 ops/s
# Warmup Iteration  11: 565416.275 ops/s
# Warmup Iteration  12: 615441.690 ops/s
# Warmup Iteration  13: 575925.468 ops/s
# Warmup Iteration  14: 612104.474 ops/s
# Warmup Iteration  15: 596238.261 ops/s
# Warmup Iteration  16: 603974.419 ops/s
# Warmup Iteration  17: 625103.042 ops/s
# Warmup Iteration  18: 602842.133 ops/s
# Warmup Iteration  19: 656468.709 ops/s
# Warmup Iteration  20: 607907.105 ops/s
# Warmup Iteration  21: 636748.210 ops/s
# Warmup Iteration  22: 610298.551 ops/s
# Warmup Iteration  23: 621894.757 ops/s
# Warmup Iteration  24: 622047.968 ops/s
# Warmup Iteration  25: 616238.377 ops/s
# Warmup Iteration  26: 629819.967 ops/s
# Warmup Iteration  27: 618903.067 ops/s
# Warmup Iteration  28: 628091.831 ops/s
# Warmup Iteration  29: 627096.416 ops/s
# Warmup Iteration  30: 626635.934 ops/s
Iteration   1: 656853.686 ops/s
Iteration   2: 608688.932 ops/s
Iteration   3: 636467.209 ops/s
Iteration   4: 620095.554 ops/s
Iteration   5: 639355.087 ops/s
Iteration   6: 618521.008 ops/s
Iteration   7: 624121.505 ops/s
Iteration   8: 628181.083 ops/s
Iteration   9: 633305.433 ops/s
Iteration  10: 631185.055 ops/s
Iteration  11: 591636.779 ops/s
Iteration  12: 587750.911 ops/s
Iteration  13: 631542.940 ops/s
Iteration  14: 617289.801 ops/s
Iteration  15: 632074.313 ops/s
Iteration  16: 628853.626 ops/s
Iteration  17: 617799.459 ops/s
Iteration  18: 641390.281 ops/s
Iteration  19: 620375.319 ops/s
Iteration  20: 629847.932 ops/s
Iteration  21: 622524.754 ops/s
Iteration  22: 645147.276 ops/s
Iteration  23: 629740.361 ops/s
Iteration  24: 631793.589 ops/s
Iteration  25: 629779.768 ops/s
Iteration  26: 625023.595 ops/s
Iteration  27: 628314.671 ops/s
Iteration  28: 612544.557 ops/s
Iteration  29: 628672.547 ops/s
Iteration  30: 658937.697 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_singleErrors":
  626927.158 ±(99.9%) 10047.796 ops/s [Average]
  (min, avg, max) = (587750.911, 626927.158, 658937.697), stdev = 15039.070
  CI (99.9%): [616879.361, 636974.954] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
MaybeConcatMapSingleTest._Benchmark.benchmark_singleErrors  thrpt   30  626927.158 ± 10047.796  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161176.226 ops/s
# Warmup Iteration   2: 597492.374 ops/s
# Warmup Iteration   3: 674510.124 ops/s
# Warmup Iteration   4: 618613.899 ops/s
# Warmup Iteration   5: 689187.573 ops/s
# Warmup Iteration   6: 596019.598 ops/s
# Warmup Iteration   7: 700009.062 ops/s
# Warmup Iteration   8: 682183.535 ops/s
# Warmup Iteration   9: 712320.041 ops/s
# Warmup Iteration  10: 680651.585 ops/s
# Warmup Iteration  11: 686774.159 ops/s
# Warmup Iteration  12: 713888.758 ops/s
# Warmup Iteration  13: 732603.129 ops/s
# Warmup Iteration  14: 691780.072 ops/s
# Warmup Iteration  15: 708602.792 ops/s
# Warmup Iteration  16: 725595.914 ops/s
# Warmup Iteration  17: 767189.384 ops/s
# Warmup Iteration  18: 722326.451 ops/s
# Warmup Iteration  19: 759505.842 ops/s
# Warmup Iteration  20: 754560.793 ops/s
# Warmup Iteration  21: 730560.751 ops/s
# Warmup Iteration  22: 751195.954 ops/s
# Warmup Iteration  23: 734495.763 ops/s
# Warmup Iteration  24: 728368.248 ops/s
# Warmup Iteration  25: 726940.556 ops/s
# Warmup Iteration  26: 760057.147 ops/s
# Warmup Iteration  27: 715779.595 ops/s
# Warmup Iteration  28: 754427.652 ops/s
# Warmup Iteration  29: 719697.222 ops/s
# Warmup Iteration  30: 723161.903 ops/s
Iteration   1: 736291.460 ops/s
Iteration   2: 789874.986 ops/s
Iteration   3: 749812.399 ops/s
Iteration   4: 720764.390 ops/s
Iteration   5: 715659.131 ops/s
Iteration   6: 757779.978 ops/s
Iteration   7: 733682.699 ops/s
Iteration   8: 741466.645 ops/s
Iteration   9: 730664.860 ops/s
Iteration  10: 763614.923 ops/s
Iteration  11: 771131.828 ops/s
Iteration  12: 705264.233 ops/s
Iteration  13: 759480.552 ops/s
Iteration  14: 722218.260 ops/s
Iteration  15: 735438.490 ops/s
Iteration  16: 698636.262 ops/s
Iteration  17: 605909.534 ops/s
Iteration  18: 729339.716 ops/s
Iteration  19: 724112.433 ops/s
Iteration  20: 775456.739 ops/s
Iteration  21: 717846.970 ops/s
Iteration  22: 720384.351 ops/s
Iteration  23: 761384.338 ops/s
Iteration  24: 717631.975 ops/s
Iteration  25: 749563.336 ops/s
Iteration  26: 728185.064 ops/s
Iteration  27: 768994.220 ops/s
Iteration  28: 754509.303 ops/s
Iteration  29: 724064.913 ops/s
Iteration  30: 777321.894 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_mainError":
  736216.196 ±(99.9%) 22572.567 ops/s [Average]
  (min, avg, max) = (605909.534, 736216.196, 789874.986), stdev = 33785.559
  CI (99.9%): [713643.629, 758788.763] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableConcatWithSingleTest._Benchmark.benchmark_mainError  thrpt   30  736216.196 ± 22572.567  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 129078.950 ops/s
# Warmup Iteration   2: 480488.538 ops/s
# Warmup Iteration   3: 535033.243 ops/s
# Warmup Iteration   4: 551550.903 ops/s
# Warmup Iteration   5: 582543.985 ops/s
# Warmup Iteration   6: 553459.670 ops/s
# Warmup Iteration   7: 557528.137 ops/s
# Warmup Iteration   8: 555375.734 ops/s
# Warmup Iteration   9: 573864.277 ops/s
# Warmup Iteration  10: 542091.809 ops/s
# Warmup Iteration  11: 575182.260 ops/s
# Warmup Iteration  12: 537940.172 ops/s
# Warmup Iteration  13: 553831.135 ops/s
# Warmup Iteration  14: 574291.681 ops/s
# Warmup Iteration  15: 539696.330 ops/s
# Warmup Iteration  16: 579840.969 ops/s
# Warmup Iteration  17: 569900.186 ops/s
# Warmup Iteration  18: 576976.277 ops/s
# Warmup Iteration  19: 572667.899 ops/s
# Warmup Iteration  20: 592079.618 ops/s
# Warmup Iteration  21: 610132.398 ops/s
# Warmup Iteration  22: 570311.524 ops/s
# Warmup Iteration  23: 599930.139 ops/s
# Warmup Iteration  24: 579314.167 ops/s
# Warmup Iteration  25: 580837.559 ops/s
# Warmup Iteration  26: 591993.984 ops/s
# Warmup Iteration  27: 583040.095 ops/s
# Warmup Iteration  28: 596762.128 ops/s
# Warmup Iteration  29: 597947.281 ops/s
# Warmup Iteration  30: 589678.049 ops/s
Iteration   1: 588456.824 ops/s
Iteration   2: 593125.303 ops/s
Iteration   3: 581539.076 ops/s
Iteration   4: 583897.245 ops/s
Iteration   5: 589461.635 ops/s
Iteration   6: 585964.956 ops/s
Iteration   7: 591759.070 ops/s
Iteration   8: 575064.595 ops/s
Iteration   9: 598261.415 ops/s
Iteration  10: 565270.543 ops/s
Iteration  11: 602958.917 ops/s
Iteration  12: 580113.173 ops/s
Iteration  13: 573185.891 ops/s
Iteration  14: 570634.980 ops/s
Iteration  15: 560806.201 ops/s
Iteration  16: 601142.293 ops/s
Iteration  17: 610627.899 ops/s
Iteration  18: 570987.600 ops/s
Iteration  19: 602259.063 ops/s
Iteration  20: 581721.441 ops/s
Iteration  21: 611416.130 ops/s
Iteration  22: 576446.718 ops/s
Iteration  23: 604544.072 ops/s
Iteration  24: 579186.432 ops/s
Iteration  25: 586776.495 ops/s
Iteration  26: 598636.570 ops/s
Iteration  27: 572456.346 ops/s
Iteration  28: 587956.362 ops/s
Iteration  29: 573818.635 ops/s
Iteration  30: 587855.347 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorReturnsNull":
  586211.041 ±(99.9%) 8905.646 ops/s [Average]
  (min, avg, max) = (560806.201, 586211.041, 611416.130), stdev = 13329.552
  CI (99.9%): [577305.395, 595116.687] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MaybeFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorReturnsNull  thrpt   30  586211.041 ± 8905.646  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 150043.639 ops/s
# Warmup Iteration   2: 475053.245 ops/s
# Warmup Iteration   3: 511155.254 ops/s
# Warmup Iteration   4: 484452.163 ops/s
# Warmup Iteration   5: 576679.246 ops/s
# Warmup Iteration   6: 444249.592 ops/s
# Warmup Iteration   7: 562616.925 ops/s
# Warmup Iteration   8: 549465.760 ops/s
# Warmup Iteration   9: 554538.459 ops/s
# Warmup Iteration  10: 549513.955 ops/s
# Warmup Iteration  11: 552772.267 ops/s
# Warmup Iteration  12: 548673.058 ops/s
# Warmup Iteration  13: 574769.850 ops/s
# Warmup Iteration  14: 538441.477 ops/s
# Warmup Iteration  15: 557519.266 ops/s
# Warmup Iteration  16: 569604.848 ops/s
# Warmup Iteration  17: 557007.034 ops/s
# Warmup Iteration  18: 585486.635 ops/s
# Warmup Iteration  19: 567571.094 ops/s
# Warmup Iteration  20: 577214.967 ops/s
# Warmup Iteration  21: 587253.422 ops/s
# Warmup Iteration  22: 582219.436 ops/s
# Warmup Iteration  23: 570558.426 ops/s
# Warmup Iteration  24: 580589.230 ops/s
# Warmup Iteration  25: 586189.390 ops/s
# Warmup Iteration  26: 569166.679 ops/s
# Warmup Iteration  27: 574769.809 ops/s
# Warmup Iteration  28: 568205.725 ops/s
# Warmup Iteration  29: 593036.597 ops/s
# Warmup Iteration  30: 562985.234 ops/s
Iteration   1: 576347.705 ops/s
Iteration   2: 573356.710 ops/s
Iteration   3: 581597.665 ops/s
Iteration   4: 577106.565 ops/s
Iteration   5: 555808.548 ops/s
Iteration   6: 575636.518 ops/s
Iteration   7: 567543.446 ops/s
Iteration   8: 578703.757 ops/s
Iteration   9: 574972.178 ops/s
Iteration  10: 553148.928 ops/s
Iteration  11: 480543.937 ops/s
Iteration  12: 572632.596 ops/s
Iteration  13: 575772.126 ops/s
Iteration  14: 565829.430 ops/s
Iteration  15: 588703.106 ops/s
Iteration  16: 565122.444 ops/s
Iteration  17: 565814.903 ops/s
Iteration  18: 588820.848 ops/s
Iteration  19: 571562.227 ops/s
Iteration  20: 600415.589 ops/s
Iteration  21: 575943.040 ops/s
Iteration  22: 571228.281 ops/s
Iteration  23: 592258.787 ops/s
Iteration  24: 581176.809 ops/s
Iteration  25: 572566.334 ops/s
Iteration  26: 591026.363 ops/s
Iteration  27: 563096.214 ops/s
Iteration  28: 591435.238 ops/s
Iteration  29: 573229.275 ops/s
Iteration  30: 575694.834 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorThrows":
  572569.813 ±(99.9%) 13619.478 ops/s [Average]
  (min, avg, max) = (480543.937, 572569.813, 600415.589), stdev = 20384.995
  CI (99.9%): [558950.336, 586189.291] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
MaybeFlatMapBiSelectorTest._Benchmark.benchmark_resultSelectorThrows  thrpt   30  572569.813 ± 13619.478  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_delayedErrorOnSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_delayedErrorOnSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 379829.257 ops/s
# Warmup Iteration   2: 1499089.702 ops/s
# Warmup Iteration   3: 2247848.364 ops/s
# Warmup Iteration   4: 2293702.816 ops/s
# Warmup Iteration   5: 2354759.766 ops/s
# Warmup Iteration   6: 2306924.945 ops/s
# Warmup Iteration   7: 2181856.331 ops/s
# Warmup Iteration   8: 2266990.693 ops/s
# Warmup Iteration   9: 2321501.456 ops/s
# Warmup Iteration  10: 2314625.494 ops/s
# Warmup Iteration  11: 2302584.660 ops/s
# Warmup Iteration  12: 2388343.723 ops/s
# Warmup Iteration  13: 2271404.924 ops/s
# Warmup Iteration  14: 2397339.460 ops/s
# Warmup Iteration  15: 2327646.651 ops/s
# Warmup Iteration  16: 2312704.168 ops/s
# Warmup Iteration  17: 2437409.939 ops/s
# Warmup Iteration  18: 2418112.259 ops/s
# Warmup Iteration  19: 2313791.727 ops/s
# Warmup Iteration  20: 2352451.708 ops/s
# Warmup Iteration  21: 2337331.307 ops/s
# Warmup Iteration  22: 2400079.996 ops/s
# Warmup Iteration  23: 2325004.427 ops/s
# Warmup Iteration  24: 2269216.003 ops/s
# Warmup Iteration  25: 2424113.801 ops/s
# Warmup Iteration  26: 2243320.557 ops/s
# Warmup Iteration  27: 2385360.912 ops/s
# Warmup Iteration  28: 2270004.241 ops/s
# Warmup Iteration  29: 2375373.129 ops/s
# Warmup Iteration  30: 2336806.501 ops/s
Iteration   1: 2321240.021 ops/s
Iteration   2: 2395770.736 ops/s
Iteration   3: 2362444.532 ops/s
Iteration   4: 2335765.462 ops/s
Iteration   5: 2313689.167 ops/s
Iteration   6: 2443018.920 ops/s
Iteration   7: 2371494.651 ops/s
Iteration   8: 2296739.949 ops/s
Iteration   9: 2404206.909 ops/s
Iteration  10: 2329518.185 ops/s
Iteration  11: 2371563.351 ops/s
Iteration  12: 2381403.210 ops/s
Iteration  13: 2231577.160 ops/s
Iteration  14: 2372087.230 ops/s
Iteration  15: 2329868.279 ops/s
Iteration  16: 2321719.424 ops/s
Iteration  17: 2416998.735 ops/s
Iteration  18: 2284390.387 ops/s
Iteration  19: 2412533.173 ops/s
Iteration  20: 2271858.708 ops/s
Iteration  21: 2394351.015 ops/s
Iteration  22: 2431990.941 ops/s
Iteration  23: 2301572.135 ops/s
Iteration  24: 2414999.448 ops/s
Iteration  25: 2292541.851 ops/s
Iteration  26: 2337150.203 ops/s
Iteration  27: 2396728.065 ops/s
Iteration  28: 2293951.528 ops/s
Iteration  29: 2378200.652 ops/s
Iteration  30: 2334803.471 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_delayedErrorOnSuccess":
  2351472.583 ±(99.9%) 35287.285 ops/s [Average]
  (min, avg, max) = (2231577.160, 2351472.583, 2443018.920), stdev = 52816.351
  CI (99.9%): [2316185.299, 2386759.868] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MaybeDelayTest._Benchmark.benchmark_delayedErrorOnSuccess  thrpt   30  2351472.583 ± 35287.285  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_singleSourceZipperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_singleSourceZipperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 123504.206 ops/s
# Warmup Iteration   2: 499460.487 ops/s
# Warmup Iteration   3: 520571.670 ops/s
# Warmup Iteration   4: 567382.807 ops/s
# Warmup Iteration   5: 581892.591 ops/s
# Warmup Iteration   6: 565769.597 ops/s
# Warmup Iteration   7: 549094.794 ops/s
# Warmup Iteration   8: 571914.621 ops/s
# Warmup Iteration   9: 543403.333 ops/s
# Warmup Iteration  10: 570327.469 ops/s
# Warmup Iteration  11: 588316.041 ops/s
# Warmup Iteration  12: 552324.312 ops/s
# Warmup Iteration  13: 574872.549 ops/s
# Warmup Iteration  14: 545287.960 ops/s
# Warmup Iteration  15: 585802.980 ops/s
# Warmup Iteration  16: 555483.541 ops/s
# Warmup Iteration  17: 594730.165 ops/s
# Warmup Iteration  18: 608505.743 ops/s
# Warmup Iteration  19: 593157.892 ops/s
# Warmup Iteration  20: 621632.305 ops/s
# Warmup Iteration  21: 556583.512 ops/s
# Warmup Iteration  22: 598568.648 ops/s
# Warmup Iteration  23: 617496.275 ops/s
# Warmup Iteration  24: 580173.631 ops/s
# Warmup Iteration  25: 605784.967 ops/s
# Warmup Iteration  26: 577548.992 ops/s
# Warmup Iteration  27: 594389.525 ops/s
# Warmup Iteration  28: 606669.186 ops/s
# Warmup Iteration  29: 590199.450 ops/s
# Warmup Iteration  30: 608933.976 ops/s
Iteration   1: 595957.076 ops/s
Iteration   2: 619326.295 ops/s
Iteration   3: 579788.437 ops/s
Iteration   4: 593076.301 ops/s
Iteration   5: 595390.988 ops/s
Iteration   6: 467137.917 ops/s
Iteration   7: 599996.271 ops/s
Iteration   8: 608766.687 ops/s
Iteration   9: 590254.317 ops/s
Iteration  10: 612632.359 ops/s
Iteration  11: 585679.568 ops/s
Iteration  12: 597058.624 ops/s
Iteration  13: 605726.775 ops/s
Iteration  14: 582672.073 ops/s
Iteration  15: 598146.659 ops/s
Iteration  16: 605065.958 ops/s
Iteration  17: 590873.846 ops/s
Iteration  18: 590930.291 ops/s
Iteration  19: 575775.697 ops/s
Iteration  20: 615807.099 ops/s
Iteration  21: 572648.971 ops/s
Iteration  22: 591701.125 ops/s
Iteration  23: 585341.643 ops/s
Iteration  24: 609087.634 ops/s
Iteration  25: 588554.880 ops/s
Iteration  26: 582989.837 ops/s
Iteration  27: 613890.251 ops/s
Iteration  28: 584435.370 ops/s
Iteration  29: 626286.079 ops/s
Iteration  30: 578768.276 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_singleSourceZipperReturnsNull":
  591458.910 ±(99.9%) 18129.083 ops/s [Average]
  (min, avg, max) = (467137.917, 591458.910, 626286.079), stdev = 27134.760
  CI (99.9%): [573329.827, 609587.993] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
MaybeZipIterableTest._Benchmark.benchmark_singleSourceZipperReturnsNull  thrpt   30  591458.910 ± 18129.083  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_zipperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_zipperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90922.822 ops/s
# Warmup Iteration   2: 443247.246 ops/s
# Warmup Iteration   3: 541605.356 ops/s
# Warmup Iteration   4: 533761.587 ops/s
# Warmup Iteration   5: 556117.516 ops/s
# Warmup Iteration   6: 528807.350 ops/s
# Warmup Iteration   7: 567642.872 ops/s
# Warmup Iteration   8: 539073.640 ops/s
# Warmup Iteration   9: 548268.418 ops/s
# Warmup Iteration  10: 553604.186 ops/s
# Warmup Iteration  11: 536531.139 ops/s
# Warmup Iteration  12: 556577.426 ops/s
# Warmup Iteration  13: 534328.386 ops/s
# Warmup Iteration  14: 546631.982 ops/s
# Warmup Iteration  15: 534253.200 ops/s
# Warmup Iteration  16: 553849.181 ops/s
# Warmup Iteration  17: 561766.752 ops/s
# Warmup Iteration  18: 570750.755 ops/s
# Warmup Iteration  19: 594569.315 ops/s
# Warmup Iteration  20: 571664.922 ops/s
# Warmup Iteration  21: 598446.807 ops/s
# Warmup Iteration  22: 559055.926 ops/s
# Warmup Iteration  23: 532379.360 ops/s
# Warmup Iteration  24: 569114.851 ops/s
# Warmup Iteration  25: 582737.052 ops/s
# Warmup Iteration  26: 562004.969 ops/s
# Warmup Iteration  27: 606239.711 ops/s
# Warmup Iteration  28: 563925.907 ops/s
# Warmup Iteration  29: 573965.411 ops/s
# Warmup Iteration  30: 590630.897 ops/s
Iteration   1: 569322.021 ops/s
Iteration   2: 605160.727 ops/s
Iteration   3: 581761.139 ops/s
Iteration   4: 568528.456 ops/s
Iteration   5: 585725.102 ops/s
Iteration   6: 541888.942 ops/s
Iteration   7: 590422.077 ops/s
Iteration   8: 595838.195 ops/s
Iteration   9: 561973.849 ops/s
Iteration  10: 578989.482 ops/s
Iteration  11: 594161.389 ops/s
Iteration  12: 569450.304 ops/s
Iteration  13: 583431.496 ops/s
Iteration  14: 575221.630 ops/s
Iteration  15: 563292.222 ops/s
Iteration  16: 602693.864 ops/s
Iteration  17: 570275.160 ops/s
Iteration  18: 582797.269 ops/s
Iteration  19: 569139.875 ops/s
Iteration  20: 593450.996 ops/s
Iteration  21: 570460.666 ops/s
Iteration  22: 582760.766 ops/s
Iteration  23: 602513.650 ops/s
Iteration  24: 602586.540 ops/s
Iteration  25: 554357.118 ops/s
Iteration  26: 591371.084 ops/s
Iteration  27: 571290.156 ops/s
Iteration  28: 582114.884 ops/s
Iteration  29: 572283.957 ops/s
Iteration  30: 566345.066 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_zipperReturnsNull":
  579320.269 ±(99.9%) 10237.680 ops/s [Average]
  (min, avg, max) = (541888.942, 579320.269, 605160.727), stdev = 15323.278
  CI (99.9%): [569082.590, 589557.949] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
MaybeZipIterableTest._Benchmark.benchmark_zipperReturnsNull  thrpt   30  579320.269 ± 10237.680  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_singleSourceZipperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_singleSourceZipperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 122832.609 ops/s
# Warmup Iteration   2: 507710.425 ops/s
# Warmup Iteration   3: 530930.314 ops/s
# Warmup Iteration   4: 562465.229 ops/s
# Warmup Iteration   5: 569547.813 ops/s
# Warmup Iteration   6: 563810.197 ops/s
# Warmup Iteration   7: 574782.121 ops/s
# Warmup Iteration   8: 556945.077 ops/s
# Warmup Iteration   9: 557581.296 ops/s
# Warmup Iteration  10: 576895.922 ops/s
# Warmup Iteration  11: 534876.583 ops/s
# Warmup Iteration  12: 567215.756 ops/s
# Warmup Iteration  13: 577227.210 ops/s
# Warmup Iteration  14: 561391.021 ops/s
# Warmup Iteration  15: 580764.561 ops/s
# Warmup Iteration  16: 554969.867 ops/s
# Warmup Iteration  17: 611229.281 ops/s
# Warmup Iteration  18: 588511.709 ops/s
# Warmup Iteration  19: 600608.038 ops/s
# Warmup Iteration  20: 599875.444 ops/s
# Warmup Iteration  21: 589201.278 ops/s
# Warmup Iteration  22: 606024.928 ops/s
# Warmup Iteration  23: 587115.859 ops/s
# Warmup Iteration  24: 587587.531 ops/s
# Warmup Iteration  25: 603029.959 ops/s
# Warmup Iteration  26: 596435.546 ops/s
# Warmup Iteration  27: 579411.497 ops/s
# Warmup Iteration  28: 608634.964 ops/s
# Warmup Iteration  29: 556722.202 ops/s
# Warmup Iteration  30: 591193.929 ops/s
Iteration   1: 492988.162 ops/s
Iteration   2: 564245.053 ops/s
Iteration   3: 605652.377 ops/s
Iteration   4: 588879.857 ops/s
Iteration   5: 608932.853 ops/s
Iteration   6: 584207.155 ops/s
Iteration   7: 595516.111 ops/s
Iteration   8: 585167.716 ops/s
Iteration   9: 601686.841 ops/s
Iteration  10: 581177.521 ops/s
Iteration  11: 601082.098 ops/s
Iteration  12: 618226.054 ops/s
Iteration  13: 578360.917 ops/s
Iteration  14: 603179.249 ops/s
Iteration  15: 584184.962 ops/s
Iteration  16: 591590.807 ops/s
Iteration  17: 618330.817 ops/s
Iteration  18: 577437.889 ops/s
Iteration  19: 574341.734 ops/s
Iteration  20: 585323.173 ops/s
Iteration  21: 585598.401 ops/s
Iteration  22: 625080.999 ops/s
Iteration  23: 596328.362 ops/s
Iteration  24: 574849.857 ops/s
Iteration  25: 611964.459 ops/s
Iteration  26: 587245.395 ops/s
Iteration  27: 599595.110 ops/s
Iteration  28: 583723.058 ops/s
Iteration  29: 591667.909 ops/s
Iteration  30: 611721.641 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_singleSourceZipperReturnsNull":
  590276.218 ±(99.9%) 15735.802 ops/s [Average]
  (min, avg, max) = (492988.162, 590276.218, 625080.999), stdev = 23552.610
  CI (99.9%): [574540.416, 606012.020] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
MaybeZipArrayTest._Benchmark.benchmark_singleSourceZipperReturnsNull  thrpt   30  590276.218 ± 15735.802  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_zipperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_zipperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162095.526 ops/s
# Warmup Iteration   2: 476256.612 ops/s
# Warmup Iteration   3: 520139.131 ops/s
# Warmup Iteration   4: 518532.543 ops/s
# Warmup Iteration   5: 475216.425 ops/s
# Warmup Iteration   6: 526090.041 ops/s
# Warmup Iteration   7: 557818.129 ops/s
# Warmup Iteration   8: 564501.178 ops/s
# Warmup Iteration   9: 536587.385 ops/s
# Warmup Iteration  10: 568612.308 ops/s
# Warmup Iteration  11: 540060.752 ops/s
# Warmup Iteration  12: 566870.629 ops/s
# Warmup Iteration  13: 531901.761 ops/s
# Warmup Iteration  14: 562438.592 ops/s
# Warmup Iteration  15: 552696.807 ops/s
# Warmup Iteration  16: 548917.369 ops/s
# Warmup Iteration  17: 587955.972 ops/s
# Warmup Iteration  18: 579061.624 ops/s
# Warmup Iteration  19: 584435.027 ops/s
# Warmup Iteration  20: 565686.130 ops/s
# Warmup Iteration  21: 600090.207 ops/s
# Warmup Iteration  22: 575032.148 ops/s
# Warmup Iteration  23: 563260.926 ops/s
# Warmup Iteration  24: 586418.483 ops/s
# Warmup Iteration  25: 579013.461 ops/s
# Warmup Iteration  26: 571124.009 ops/s
# Warmup Iteration  27: 585787.212 ops/s
# Warmup Iteration  28: 590474.400 ops/s
# Warmup Iteration  29: 561363.828 ops/s
# Warmup Iteration  30: 590911.828 ops/s
Iteration   1: 567909.112 ops/s
Iteration   2: 578670.455 ops/s
Iteration   3: 573102.367 ops/s
Iteration   4: 580972.990 ops/s
Iteration   5: 585011.538 ops/s
Iteration   6: 571038.802 ops/s
Iteration   7: 590140.462 ops/s
Iteration   8: 585392.916 ops/s
Iteration   9: 573549.491 ops/s
Iteration  10: 583681.786 ops/s
Iteration  11: 563948.022 ops/s
Iteration  12: 572298.505 ops/s
Iteration  13: 599538.097 ops/s
Iteration  14: 555621.473 ops/s
Iteration  15: 565876.269 ops/s
Iteration  16: 572810.478 ops/s
Iteration  17: 566433.206 ops/s
Iteration  18: 574631.788 ops/s
Iteration  19: 568096.685 ops/s
Iteration  20: 589401.141 ops/s
Iteration  21: 568050.153 ops/s
Iteration  22: 583945.490 ops/s
Iteration  23: 568195.859 ops/s
Iteration  24: 593415.261 ops/s
Iteration  25: 582385.457 ops/s
Iteration  26: 557181.232 ops/s
Iteration  27: 603325.554 ops/s
Iteration  28: 571284.962 ops/s
Iteration  29: 579751.973 ops/s
Iteration  30: 580693.562 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_zipperThrows":
  576878.503 ±(99.9%) 7656.400 ops/s [Average]
  (min, avg, max) = (555621.473, 576878.503, 603325.554), stdev = 11459.740
  CI (99.9%): [569222.103, 584534.903] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
MaybeZipIterableTest._Benchmark.benchmark_zipperThrows  thrpt   30  576878.503 ± 7656.400  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromIterableValueNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromIterableValueNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 304571.705 ops/s
# Warmup Iteration   2: 542956.182 ops/s
# Warmup Iteration   3: 698083.164 ops/s
# Warmup Iteration   4: 549964.850 ops/s
# Warmup Iteration   5: 715473.374 ops/s
# Warmup Iteration   6: 694861.844 ops/s
# Warmup Iteration   7: 692605.508 ops/s
# Warmup Iteration   8: 689497.910 ops/s
# Warmup Iteration   9: 696363.937 ops/s
# Warmup Iteration  10: 671779.876 ops/s
# Warmup Iteration  11: 675221.155 ops/s
# Warmup Iteration  12: 700687.944 ops/s
# Warmup Iteration  13: 685058.697 ops/s
# Warmup Iteration  14: 703879.578 ops/s
# Warmup Iteration  15: 670080.226 ops/s
# Warmup Iteration  16: 711619.208 ops/s
# Warmup Iteration  17: 740536.913 ops/s
# Warmup Iteration  18: 700664.507 ops/s
# Warmup Iteration  19: 730934.738 ops/s
# Warmup Iteration  20: 719756.742 ops/s
# Warmup Iteration  21: 731146.649 ops/s
# Warmup Iteration  22: 753417.332 ops/s
# Warmup Iteration  23: 693044.191 ops/s
# Warmup Iteration  24: 723569.728 ops/s
# Warmup Iteration  25: 734236.011 ops/s
# Warmup Iteration  26: 555526.405 ops/s
# Warmup Iteration  27: 748919.576 ops/s
# Warmup Iteration  28: 711032.856 ops/s
# Warmup Iteration  29: 747088.544 ops/s
# Warmup Iteration  30: 713848.500 ops/s
Iteration   1: 732031.678 ops/s
Iteration   2: 739786.433 ops/s
Iteration   3: 711455.912 ops/s
Iteration   4: 741023.170 ops/s
Iteration   5: 730351.034 ops/s
Iteration   6: 710292.625 ops/s
Iteration   7: 731458.751 ops/s
Iteration   8: 723746.447 ops/s
Iteration   9: 704530.134 ops/s
Iteration  10: 746662.120 ops/s
Iteration  11: 712788.508 ops/s
Iteration  12: 722389.817 ops/s
Iteration  13: 708570.412 ops/s
Iteration  14: 727228.715 ops/s
Iteration  15: 742160.644 ops/s
Iteration  16: 695443.329 ops/s
Iteration  17: 732001.643 ops/s
Iteration  18: 716467.719 ops/s
Iteration  19: 748208.795 ops/s
Iteration  20: 717030.009 ops/s
Iteration  21: 719236.463 ops/s
Iteration  22: 746690.264 ops/s
Iteration  23: 712117.612 ops/s
Iteration  24: 720794.301 ops/s
Iteration  25: 735215.829 ops/s
Iteration  26: 687170.700 ops/s
Iteration  27: 750095.513 ops/s
Iteration  28: 708425.500 ops/s
Iteration  29: 692368.120 ops/s
Iteration  30: 738584.810 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromIterableValueNull":
  723477.567 ±(99.9%) 11448.200 ops/s [Average]
  (min, avg, max) = (687170.700, 723477.567, 750095.513), stdev = 17135.129
  CI (99.9%): [712029.367, 734925.767] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_fromIterableValueNull  thrpt   30  723477.567 ± 11448.200  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_takeWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_takeWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106838.514 ops/s
# Warmup Iteration   2: 402926.236 ops/s
# Warmup Iteration   3: 432307.637 ops/s
# Warmup Iteration   4: 423550.112 ops/s
# Warmup Iteration   5: 407764.745 ops/s
# Warmup Iteration   6: 460930.874 ops/s
# Warmup Iteration   7: 443179.023 ops/s
# Warmup Iteration   8: 479997.378 ops/s
# Warmup Iteration   9: 472620.877 ops/s
# Warmup Iteration  10: 461256.237 ops/s
# Warmup Iteration  11: 442423.775 ops/s
# Warmup Iteration  12: 466280.832 ops/s
# Warmup Iteration  13: 464118.433 ops/s
# Warmup Iteration  14: 474281.187 ops/s
# Warmup Iteration  15: 464017.292 ops/s
# Warmup Iteration  16: 452793.234 ops/s
# Warmup Iteration  17: 493801.602 ops/s
# Warmup Iteration  18: 490403.298 ops/s
# Warmup Iteration  19: 470195.244 ops/s
# Warmup Iteration  20: 473487.377 ops/s
# Warmup Iteration  21: 492559.598 ops/s
# Warmup Iteration  22: 470918.792 ops/s
# Warmup Iteration  23: 489117.409 ops/s
# Warmup Iteration  24: 473137.406 ops/s
# Warmup Iteration  25: 494337.400 ops/s
# Warmup Iteration  26: 485954.250 ops/s
# Warmup Iteration  27: 470258.804 ops/s
# Warmup Iteration  28: 484906.381 ops/s
# Warmup Iteration  29: 479652.260 ops/s
# Warmup Iteration  30: 483766.837 ops/s
Iteration   1: 475022.675 ops/s
Iteration   2: 466522.403 ops/s
Iteration   3: 496518.582 ops/s
Iteration   4: 469339.166 ops/s
Iteration   5: 486797.557 ops/s
Iteration   6: 463549.613 ops/s
Iteration   7: 489679.199 ops/s
Iteration   8: 488390.612 ops/s
Iteration   9: 483086.720 ops/s
Iteration  10: 483770.325 ops/s
Iteration  11: 464049.956 ops/s
Iteration  12: 491687.194 ops/s
Iteration  13: 497520.111 ops/s
Iteration  14: 479687.506 ops/s
Iteration  15: 472818.435 ops/s
Iteration  16: 469395.559 ops/s
Iteration  17: 502894.584 ops/s
Iteration  18: 460725.711 ops/s
Iteration  19: 479715.632 ops/s
Iteration  20: 497101.854 ops/s
Iteration  21: 472247.683 ops/s
Iteration  22: 484232.683 ops/s
Iteration  23: 479285.614 ops/s
Iteration  24: 473340.811 ops/s
Iteration  25: 488714.686 ops/s
Iteration  26: 486812.746 ops/s
Iteration  27: 481841.655 ops/s
Iteration  28: 480280.246 ops/s
Iteration  29: 486937.131 ops/s
Iteration  30: 479778.984 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_takeWithError":
  481058.188 ±(99.9%) 7246.059 ops/s [Average]
  (min, avg, max) = (460725.711, 481058.188, 502894.584), stdev = 10845.560
  CI (99.9%): [473812.129, 488304.246] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ObservableTakeTest._Benchmark.benchmark_takeWithError  thrpt   30  481058.188 ± 7246.059  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDetachTest._Benchmark.benchmark_onComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDetachTest._Benchmark.benchmark_onComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2721608.541 ops/s
# Warmup Iteration   2: 6210003.524 ops/s
# Warmup Iteration   3: 8567603.036 ops/s
# Warmup Iteration   4: 8121406.236 ops/s
# Warmup Iteration   5: 8259811.700 ops/s
# Warmup Iteration   6: 8447771.367 ops/s
# Warmup Iteration   7: 8298965.878 ops/s
# Warmup Iteration   8: 8443435.963 ops/s
# Warmup Iteration   9: 8553945.134 ops/s
# Warmup Iteration  10: 7952405.616 ops/s
# Warmup Iteration  11: 8631713.094 ops/s
# Warmup Iteration  12: 8202228.642 ops/s
# Warmup Iteration  13: 8722602.648 ops/s
# Warmup Iteration  14: 8190954.317 ops/s
# Warmup Iteration  15: 8368801.541 ops/s
# Warmup Iteration  16: 8238117.053 ops/s
# Warmup Iteration  17: 8369592.286 ops/s
# Warmup Iteration  18: 8736454.794 ops/s
# Warmup Iteration  19: 7993271.033 ops/s
# Warmup Iteration  20: 7125408.103 ops/s
# Warmup Iteration  21: 8369366.806 ops/s
# Warmup Iteration  22: 8501762.982 ops/s
# Warmup Iteration  23: 8156804.187 ops/s
# Warmup Iteration  24: 8426077.138 ops/s
# Warmup Iteration  25: 8682825.541 ops/s
# Warmup Iteration  26: 8567030.459 ops/s
# Warmup Iteration  27: 8079481.679 ops/s
# Warmup Iteration  28: 8538689.268 ops/s
# Warmup Iteration  29: 8433117.075 ops/s
# Warmup Iteration  30: 8412495.595 ops/s
Iteration   1: 8546837.783 ops/s
Iteration   2: 8014495.876 ops/s
Iteration   3: 8407346.459 ops/s
Iteration   4: 8421896.021 ops/s
Iteration   5: 8478051.964 ops/s
Iteration   6: 8573725.001 ops/s
Iteration   7: 8191654.092 ops/s
Iteration   8: 8826003.991 ops/s
Iteration   9: 8143078.509 ops/s
Iteration  10: 8234734.627 ops/s
Iteration  11: 8704130.435 ops/s
Iteration  12: 8309260.292 ops/s
Iteration  13: 8737971.467 ops/s
Iteration  14: 8400691.610 ops/s
Iteration  15: 8396406.583 ops/s
Iteration  16: 8272148.566 ops/s
Iteration  17: 8478240.707 ops/s
Iteration  18: 8228942.558 ops/s
Iteration  19: 8796010.659 ops/s
Iteration  20: 8603901.791 ops/s
Iteration  21: 8197862.996 ops/s
Iteration  22: 8546457.506 ops/s
Iteration  23: 8338773.600 ops/s
Iteration  24: 8503290.113 ops/s
Iteration  25: 8258228.090 ops/s
Iteration  26: 8494118.648 ops/s
Iteration  27: 8602737.682 ops/s
Iteration  28: 8220054.823 ops/s
Iteration  29: 8675051.275 ops/s
Iteration  30: 8208172.185 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDetachTest._Benchmark.benchmark_onComplete":
  8427009.197 ±(99.9%) 139264.141 ops/s [Average]
  (min, avg, max) = (8014495.876, 8427009.197, 8826003.991), stdev = 208444.026
  CI (99.9%): [8287745.056, 8566273.338] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
CompletableDetachTest._Benchmark.benchmark_onComplete  thrpt   30  8427009.197 ± 139264.141  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMaterializeTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMaterializeTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 949798.675 ops/s
# Warmup Iteration   2: 5074566.528 ops/s
# Warmup Iteration   3: 5383680.208 ops/s
# Warmup Iteration   4: 6472153.506 ops/s
# Warmup Iteration   5: 6732217.106 ops/s
# Warmup Iteration   6: 6076353.620 ops/s
# Warmup Iteration   7: 6666883.361 ops/s
# Warmup Iteration   8: 6494258.290 ops/s
# Warmup Iteration   9: 6461010.122 ops/s
# Warmup Iteration  10: 6439758.076 ops/s
# Warmup Iteration  11: 6635311.629 ops/s
# Warmup Iteration  12: 6595279.220 ops/s
# Warmup Iteration  13: 6613843.435 ops/s
# Warmup Iteration  14: 6428254.302 ops/s
# Warmup Iteration  15: 6512473.437 ops/s
# Warmup Iteration  16: 6478513.653 ops/s
# Warmup Iteration  17: 6721638.264 ops/s
# Warmup Iteration  18: 6483950.439 ops/s
# Warmup Iteration  19: 6579980.620 ops/s
# Warmup Iteration  20: 6731904.070 ops/s
# Warmup Iteration  21: 6407041.582 ops/s
# Warmup Iteration  22: 6445241.241 ops/s
# Warmup Iteration  23: 6768420.787 ops/s
# Warmup Iteration  24: 6351906.188 ops/s
# Warmup Iteration  25: 6544191.795 ops/s
# Warmup Iteration  26: 6357270.755 ops/s
# Warmup Iteration  27: 6715546.502 ops/s
# Warmup Iteration  28: 6298724.530 ops/s
# Warmup Iteration  29: 6719242.448 ops/s
# Warmup Iteration  30: 6519050.099 ops/s
Iteration   1: 6580372.501 ops/s
Iteration   2: 6692586.593 ops/s
Iteration   3: 6531447.141 ops/s
Iteration   4: 6523459.896 ops/s
Iteration   5: 6442732.691 ops/s
Iteration   6: 6751798.090 ops/s
Iteration   7: 6381621.574 ops/s
Iteration   8: 6354481.235 ops/s
Iteration   9: 6816666.657 ops/s
Iteration  10: 6375601.804 ops/s
Iteration  11: 6719697.046 ops/s
Iteration  12: 6406534.251 ops/s
Iteration  13: 6770872.911 ops/s
Iteration  14: 6770028.907 ops/s
Iteration  15: 6557779.445 ops/s
Iteration  16: 6422534.781 ops/s
Iteration  17: 6733566.037 ops/s
Iteration  18: 6263015.915 ops/s
Iteration  19: 6619820.012 ops/s
Iteration  20: 6729084.231 ops/s
Iteration  21: 6296085.488 ops/s
Iteration  22: 6677298.682 ops/s
Iteration  23: 6441091.027 ops/s
Iteration  24: 6778392.046 ops/s
Iteration  25: 6440843.720 ops/s
Iteration  26: 6491326.991 ops/s
Iteration  27: 6657710.509 ops/s
Iteration  28: 6541602.595 ops/s
Iteration  29: 6581110.119 ops/s
Iteration  30: 6365191.182 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMaterializeTest._Benchmark.benchmark_empty":
  6557145.136 ±(99.9%) 108430.978 ops/s [Average]
  (min, avg, max) = (6263015.915, 6557145.136, 6816666.657), stdev = 162294.396
  CI (99.9%): [6448714.158, 6665576.114] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
CompletableMaterializeTest._Benchmark.benchmark_empty  thrpt   30  6557145.136 ± 108430.978  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_normalEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_normalEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3257386.289 ops/s
# Warmup Iteration   2: 5913200.176 ops/s
# Warmup Iteration   3: 8039585.474 ops/s
# Warmup Iteration   4: 7724794.370 ops/s
# Warmup Iteration   5: 8101945.086 ops/s
# Warmup Iteration   6: 7809231.253 ops/s
# Warmup Iteration   7: 8002070.585 ops/s
# Warmup Iteration   8: 8002953.233 ops/s
# Warmup Iteration   9: 7584221.513 ops/s
# Warmup Iteration  10: 8149671.440 ops/s
# Warmup Iteration  11: 7528366.285 ops/s
# Warmup Iteration  12: 8045518.729 ops/s
# Warmup Iteration  13: 7900577.815 ops/s
# Warmup Iteration  14: 6994224.830 ops/s
# Warmup Iteration  15: 6382386.335 ops/s
# Warmup Iteration  16: 8086033.039 ops/s
# Warmup Iteration  17: 7611187.625 ops/s
# Warmup Iteration  18: 8060288.352 ops/s
# Warmup Iteration  19: 7995848.170 ops/s
# Warmup Iteration  20: 7757311.739 ops/s
# Warmup Iteration  21: 7890756.600 ops/s
# Warmup Iteration  22: 8172680.465 ops/s
# Warmup Iteration  23: 7873945.586 ops/s
# Warmup Iteration  24: 7982411.534 ops/s
# Warmup Iteration  25: 7923906.557 ops/s
# Warmup Iteration  26: 7920769.997 ops/s
# Warmup Iteration  27: 7912017.909 ops/s
# Warmup Iteration  28: 7860935.623 ops/s
# Warmup Iteration  29: 8258554.329 ops/s
# Warmup Iteration  30: 7825935.765 ops/s
Iteration   1: 7730353.985 ops/s
Iteration   2: 7979663.001 ops/s
Iteration   3: 8148121.889 ops/s
Iteration   4: 7704922.029 ops/s
Iteration   5: 7926080.541 ops/s
Iteration   6: 7798921.571 ops/s
Iteration   7: 8166221.829 ops/s
Iteration   8: 7762559.728 ops/s
Iteration   9: 7959344.136 ops/s
Iteration  10: 8001761.100 ops/s
Iteration  11: 7884404.357 ops/s
Iteration  12: 7905508.857 ops/s
Iteration  13: 8200841.275 ops/s
Iteration  14: 8121854.257 ops/s
Iteration  15: 8209871.979 ops/s
Iteration  16: 7668917.105 ops/s
Iteration  17: 8294824.799 ops/s
Iteration  18: 7751930.923 ops/s
Iteration  19: 8051536.680 ops/s
Iteration  20: 7803053.735 ops/s
Iteration  21: 8223568.620 ops/s
Iteration  22: 7861940.245 ops/s
Iteration  23: 8162163.582 ops/s
Iteration  24: 8154688.810 ops/s
Iteration  25: 7769536.301 ops/s
Iteration  26: 8093486.817 ops/s
Iteration  27: 7849030.645 ops/s
Iteration  28: 8014436.175 ops/s
Iteration  29: 7801270.985 ops/s
Iteration  30: 7970038.780 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_normalEmpty":
  7965695.158 ±(99.9%) 120538.070 ops/s [Average]
  (min, avg, max) = (7668917.105, 7965695.158, 8294824.799), stdev = 180415.723
  CI (99.9%): [7845157.088, 8086233.228] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
CompletableDoFinallyTest._Benchmark.benchmark_normalEmpty  thrpt   30  7965695.158 ± 120538.070  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 186098.964 ops/s
# Warmup Iteration   2: 332917.120 ops/s
# Warmup Iteration   3: 328990.752 ops/s
# Warmup Iteration   4: 339314.733 ops/s
# Warmup Iteration   5: 362018.924 ops/s
# Warmup Iteration   6: 362833.702 ops/s
# Warmup Iteration   7: 374831.456 ops/s
# Warmup Iteration   8: 358826.926 ops/s
# Warmup Iteration   9: 333947.863 ops/s
# Warmup Iteration  10: 369894.944 ops/s
# Warmup Iteration  11: 371178.861 ops/s
# Warmup Iteration  12: 357861.106 ops/s
# Warmup Iteration  13: 371985.791 ops/s
# Warmup Iteration  14: 359630.743 ops/s
# Warmup Iteration  15: 365339.393 ops/s
# Warmup Iteration  16: 374558.665 ops/s
# Warmup Iteration  17: 380706.928 ops/s
# Warmup Iteration  18: 396693.311 ops/s
# Warmup Iteration  19: 369015.803 ops/s
# Warmup Iteration  20: 398687.459 ops/s
# Warmup Iteration  21: 380845.337 ops/s
# Warmup Iteration  22: 386522.739 ops/s
# Warmup Iteration  23: 396172.615 ops/s
# Warmup Iteration  24: 373758.494 ops/s
# Warmup Iteration  25: 402504.078 ops/s
# Warmup Iteration  26: 375394.748 ops/s
# Warmup Iteration  27: 384770.674 ops/s
# Warmup Iteration  28: 384120.848 ops/s
# Warmup Iteration  29: 391672.398 ops/s
# Warmup Iteration  30: 384645.230 ops/s
Iteration   1: 385237.955 ops/s
Iteration   2: 391687.761 ops/s
Iteration   3: 394747.194 ops/s
Iteration   4: 381723.415 ops/s
Iteration   5: 399644.912 ops/s
Iteration   6: 380632.062 ops/s
Iteration   7: 386461.269 ops/s
Iteration   8: 397145.822 ops/s
Iteration   9: 374224.788 ops/s
Iteration  10: 392579.216 ops/s
Iteration  11: 374826.279 ops/s
Iteration  12: 380526.039 ops/s
Iteration  13: 380504.473 ops/s
Iteration  14: 393265.691 ops/s
Iteration  15: 375090.349 ops/s
Iteration  16: 371668.295 ops/s
Iteration  17: 390933.547 ops/s
Iteration  18: 373486.155 ops/s
Iteration  19: 381597.397 ops/s
Iteration  20: 396623.048 ops/s
Iteration  21: 371247.855 ops/s
Iteration  22: 377352.818 ops/s
Iteration  23: 395975.439 ops/s
Iteration  24: 369714.399 ops/s
Iteration  25: 391009.740 ops/s
Iteration  26: 374681.430 ops/s
Iteration  27: 398056.748 ops/s
Iteration  28: 399437.706 ops/s
Iteration  29: 385602.586 ops/s
Iteration  30: 379924.937 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_error":
  384853.644 ±(99.9%) 6396.804 ops/s [Average]
  (min, avg, max) = (369714.399, 384853.644, 399644.912), stdev = 9574.436
  CI (99.9%): [378456.840, 391250.448] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
CompletableToCompletionStageTest._Benchmark.benchmark_error  thrpt   30  384853.644 ± 6396.804  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_hasNext2Throws$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_hasNext2Throws

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61569.373 ops/s
# Warmup Iteration   2: 480733.689 ops/s
# Warmup Iteration   3: 566001.056 ops/s
# Warmup Iteration   4: 577887.526 ops/s
# Warmup Iteration   5: 606963.086 ops/s
# Warmup Iteration   6: 572811.285 ops/s
# Warmup Iteration   7: 565259.205 ops/s
# Warmup Iteration   8: 598956.539 ops/s
# Warmup Iteration   9: 506327.159 ops/s
# Warmup Iteration  10: 551057.094 ops/s
# Warmup Iteration  11: 582947.336 ops/s
# Warmup Iteration  12: 606552.144 ops/s
# Warmup Iteration  13: 555316.273 ops/s
# Warmup Iteration  14: 605248.234 ops/s
# Warmup Iteration  15: 581939.186 ops/s
# Warmup Iteration  16: 577456.184 ops/s
# Warmup Iteration  17: 645175.742 ops/s
# Warmup Iteration  18: 600746.272 ops/s
# Warmup Iteration  19: 639730.697 ops/s
# Warmup Iteration  20: 622211.373 ops/s
# Warmup Iteration  21: 580798.809 ops/s
# Warmup Iteration  22: 633351.365 ops/s
# Warmup Iteration  23: 612171.585 ops/s
# Warmup Iteration  24: 601508.027 ops/s
# Warmup Iteration  25: 637066.634 ops/s
# Warmup Iteration  26: 611991.752 ops/s
# Warmup Iteration  27: 631487.124 ops/s
# Warmup Iteration  28: 601004.938 ops/s
# Warmup Iteration  29: 630578.699 ops/s
# Warmup Iteration  30: 606844.470 ops/s
Iteration   1: 643601.714 ops/s
Iteration   2: 605493.806 ops/s
Iteration   3: 618945.576 ops/s
Iteration   4: 627081.218 ops/s
Iteration   5: 591798.400 ops/s
Iteration   6: 633775.233 ops/s
Iteration   7: 598243.604 ops/s
Iteration   8: 594737.396 ops/s
Iteration   9: 623822.626 ops/s
Iteration  10: 610920.963 ops/s
Iteration  11: 615943.049 ops/s
Iteration  12: 616770.552 ops/s
Iteration  13: 592867.966 ops/s
Iteration  14: 615103.783 ops/s
Iteration  15: 595700.663 ops/s
Iteration  16: 625870.275 ops/s
Iteration  17: 634367.809 ops/s
Iteration  18: 601095.283 ops/s
Iteration  19: 627854.278 ops/s
Iteration  20: 615307.703 ops/s
Iteration  21: 617838.447 ops/s
Iteration  22: 629197.627 ops/s
Iteration  23: 603594.385 ops/s
Iteration  24: 625857.152 ops/s
Iteration  25: 615901.470 ops/s
Iteration  26: 621075.002 ops/s
Iteration  27: 611655.502 ops/s
Iteration  28: 615215.212 ops/s
Iteration  29: 630959.485 ops/s
Iteration  30: 603957.111 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_hasNext2Throws":
  615485.110 ±(99.9%) 9066.974 ops/s [Average]
  (min, avg, max) = (591798.400, 615485.110, 643601.714), stdev = 13571.021
  CI (99.9%): [606418.136, 624552.084] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableFromIterableTest._Benchmark.benchmark_hasNext2Throws  thrpt   30  615485.110 ± 9066.974  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenTest._Benchmark.benchmark_andThenMaybeCompleteError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenTest._Benchmark.benchmark_andThenMaybeCompleteError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 233252.094 ops/s
# Warmup Iteration   2: 577327.187 ops/s
# Warmup Iteration   3: 723735.310 ops/s
# Warmup Iteration   4: 654868.783 ops/s
# Warmup Iteration   5: 713833.318 ops/s
# Warmup Iteration   6: 670967.772 ops/s
# Warmup Iteration   7: 625940.611 ops/s
# Warmup Iteration   8: 735711.766 ops/s
# Warmup Iteration   9: 699715.638 ops/s
# Warmup Iteration  10: 735479.710 ops/s
# Warmup Iteration  11: 686719.678 ops/s
# Warmup Iteration  12: 697736.514 ops/s
# Warmup Iteration  13: 760623.237 ops/s
# Warmup Iteration  14: 700243.111 ops/s
# Warmup Iteration  15: 732976.245 ops/s
# Warmup Iteration  16: 711915.610 ops/s
# Warmup Iteration  17: 774258.669 ops/s
# Warmup Iteration  18: 750703.190 ops/s
# Warmup Iteration  19: 734779.976 ops/s
# Warmup Iteration  20: 770058.154 ops/s
# Warmup Iteration  21: 772089.314 ops/s
# Warmup Iteration  22: 758580.115 ops/s
# Warmup Iteration  23: 775381.767 ops/s
# Warmup Iteration  24: 772457.831 ops/s
# Warmup Iteration  25: 733895.633 ops/s
# Warmup Iteration  26: 779338.376 ops/s
# Warmup Iteration  27: 774378.832 ops/s
# Warmup Iteration  28: 742596.630 ops/s
# Warmup Iteration  29: 770135.047 ops/s
# Warmup Iteration  30: 770802.418 ops/s
Iteration   1: 765215.695 ops/s
Iteration   2: 736328.261 ops/s
Iteration   3: 766940.630 ops/s
Iteration   4: 733834.795 ops/s
Iteration   5: 775731.782 ops/s
Iteration   6: 741686.887 ops/s
Iteration   7: 771454.811 ops/s
Iteration   8: 769197.729 ops/s
Iteration   9: 756622.071 ops/s
Iteration  10: 732938.313 ops/s
Iteration  11: 754468.554 ops/s
Iteration  12: 772115.989 ops/s
Iteration  13: 744991.554 ops/s
Iteration  14: 759935.454 ops/s
Iteration  15: 741642.813 ops/s
Iteration  16: 743261.430 ops/s
Iteration  17: 785757.936 ops/s
Iteration  18: 733373.137 ops/s
Iteration  19: 755842.506 ops/s
Iteration  20: 756008.895 ops/s
Iteration  21: 753411.689 ops/s
Iteration  22: 774958.055 ops/s
Iteration  23: 778274.295 ops/s
Iteration  24: 755513.798 ops/s
Iteration  25: 774207.683 ops/s
Iteration  26: 738301.704 ops/s
Iteration  27: 785650.660 ops/s
Iteration  28: 757322.654 ops/s
Iteration  29: 732365.741 ops/s
Iteration  30: 792971.992 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenTest._Benchmark.benchmark_andThenMaybeCompleteError":
  758010.917 ±(99.9%) 11756.396 ops/s [Average]
  (min, avg, max) = (732365.741, 758010.917, 792971.992), stdev = 17596.422
  CI (99.9%): [746254.521, 769767.313] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
CompletableAndThenTest._Benchmark.benchmark_andThenMaybeCompleteError  thrpt   30  758010.917 ± 11756.396  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenSecondCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenSecondCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1294412.918 ops/s
# Warmup Iteration   2: 3603298.161 ops/s
# Warmup Iteration   3: 4266418.240 ops/s
# Warmup Iteration   4: 4218669.061 ops/s
# Warmup Iteration   5: 4729318.816 ops/s
# Warmup Iteration   6: 4856744.923 ops/s
# Warmup Iteration   7: 4915393.074 ops/s
# Warmup Iteration   8: 4756212.927 ops/s
# Warmup Iteration   9: 4964537.664 ops/s
# Warmup Iteration  10: 4986282.329 ops/s
# Warmup Iteration  11: 4722769.932 ops/s
# Warmup Iteration  12: 4886874.348 ops/s
# Warmup Iteration  13: 4839016.270 ops/s
# Warmup Iteration  14: 4929868.286 ops/s
# Warmup Iteration  15: 4981146.985 ops/s
# Warmup Iteration  16: 4752655.944 ops/s
# Warmup Iteration  17: 5032741.044 ops/s
# Warmup Iteration  18: 5011680.331 ops/s
# Warmup Iteration  19: 4747985.608 ops/s
# Warmup Iteration  20: 5009516.052 ops/s
# Warmup Iteration  21: 4928901.442 ops/s
# Warmup Iteration  22: 4854524.563 ops/s
# Warmup Iteration  23: 5015611.219 ops/s
# Warmup Iteration  24: 4689024.818 ops/s
# Warmup Iteration  25: 4794526.677 ops/s
# Warmup Iteration  26: 5065343.301 ops/s
# Warmup Iteration  27: 4797161.623 ops/s
# Warmup Iteration  28: 4806181.547 ops/s
# Warmup Iteration  29: 5059151.819 ops/s
# Warmup Iteration  30: 4765485.393 ops/s
Iteration   1: 4907663.661 ops/s
Iteration   2: 4852507.202 ops/s
Iteration   3: 4838425.468 ops/s
Iteration   4: 4969070.969 ops/s
Iteration   5: 4802847.957 ops/s
Iteration   6: 4972857.545 ops/s
Iteration   7: 4816092.141 ops/s
Iteration   8: 4954497.321 ops/s
Iteration   9: 4798968.371 ops/s
Iteration  10: 4784989.984 ops/s
Iteration  11: 5025159.990 ops/s
Iteration  12: 4756421.215 ops/s
Iteration  13: 4941898.541 ops/s
Iteration  14: 4812757.168 ops/s
Iteration  15: 4791361.056 ops/s
Iteration  16: 4966205.005 ops/s
Iteration  17: 4805437.515 ops/s
Iteration  18: 4895792.145 ops/s
Iteration  19: 5096991.116 ops/s
Iteration  20: 4751199.835 ops/s
Iteration  21: 5055755.856 ops/s
Iteration  22: 4725369.133 ops/s
Iteration  23: 4906732.460 ops/s
Iteration  24: 4776689.462 ops/s
Iteration  25: 5024278.293 ops/s
Iteration  26: 4990853.011 ops/s
Iteration  27: 4817437.452 ops/s
Iteration  28: 4996388.770 ops/s
Iteration  29: 4901020.701 ops/s
Iteration  30: 4815371.676 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenSecondCancels":
  4885034.701 ±(99.9%) 68073.953 ops/s [Average]
  (min, avg, max) = (4725369.133, 4885034.701, 5096991.116), stdev = 101889.896
  CI (99.9%): [4816960.748, 4953108.654] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
CompletableAndThenCompletableTest._Benchmark.benchmark_andThenSecondCancels  thrpt   30  4885034.701 ± 68073.953  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_collectionSupplierThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_collectionSupplierThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 212590.588 ops/s
# Warmup Iteration   2: 572223.893 ops/s
# Warmup Iteration   3: 629367.306 ops/s
# Warmup Iteration   4: 641081.394 ops/s
# Warmup Iteration   5: 668422.041 ops/s
# Warmup Iteration   6: 626803.066 ops/s
# Warmup Iteration   7: 635606.523 ops/s
# Warmup Iteration   8: 660344.176 ops/s
# Warmup Iteration   9: 629292.207 ops/s
# Warmup Iteration  10: 663939.401 ops/s
# Warmup Iteration  11: 667130.800 ops/s
# Warmup Iteration  12: 638492.544 ops/s
# Warmup Iteration  13: 682427.083 ops/s
# Warmup Iteration  14: 653034.952 ops/s
# Warmup Iteration  15: 684886.027 ops/s
# Warmup Iteration  16: 616119.733 ops/s
# Warmup Iteration  17: 681308.034 ops/s
# Warmup Iteration  18: 725558.609 ops/s
# Warmup Iteration  19: 704165.767 ops/s
# Warmup Iteration  20: 687855.119 ops/s
# Warmup Iteration  21: 717473.300 ops/s
# Warmup Iteration  22: 681745.733 ops/s
# Warmup Iteration  23: 728725.327 ops/s
# Warmup Iteration  24: 676951.471 ops/s
# Warmup Iteration  25: 669856.888 ops/s
# Warmup Iteration  26: 720168.003 ops/s
# Warmup Iteration  27: 656059.710 ops/s
# Warmup Iteration  28: 719246.784 ops/s
# Warmup Iteration  29: 701184.002 ops/s
# Warmup Iteration  30: 685653.272 ops/s
Iteration   1: 705285.490 ops/s
Iteration   2: 683016.082 ops/s
Iteration   3: 672121.701 ops/s
Iteration   4: 721192.898 ops/s
Iteration   5: 652869.482 ops/s
Iteration   6: 721900.930 ops/s
Iteration   7: 693206.114 ops/s
Iteration   8: 690932.901 ops/s
Iteration   9: 708908.188 ops/s
Iteration  10: 699131.059 ops/s
Iteration  11: 708323.008 ops/s
Iteration  12: 667255.600 ops/s
Iteration  13: 690141.080 ops/s
Iteration  14: 694175.217 ops/s
Iteration  15: 676815.653 ops/s
Iteration  16: 703122.374 ops/s
Iteration  17: 694802.553 ops/s
Iteration  18: 681740.955 ops/s
Iteration  19: 703571.356 ops/s
Iteration  20: 662681.619 ops/s
Iteration  21: 727136.479 ops/s
Iteration  22: 673732.443 ops/s
Iteration  23: 718196.044 ops/s
Iteration  24: 684145.168 ops/s
Iteration  25: 688114.544 ops/s
Iteration  26: 725800.056 ops/s
Iteration  27: 695801.349 ops/s
Iteration  28: 717464.171 ops/s
Iteration  29: 673055.151 ops/s
Iteration  30: 660722.548 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_collectionSupplierThrows":
  693178.740 ±(99.9%) 13618.441 ops/s [Average]
  (min, avg, max) = (652869.482, 693178.740, 727136.479), stdev = 20383.444
  CI (99.9%): [679560.299, 706797.182] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableToListTest._Benchmark.benchmark_collectionSupplierThrows  thrpt   30  693178.740 ± 13618.441  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_emptyNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_emptyNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2540073.444 ops/s
# Warmup Iteration   2: 4709410.907 ops/s
# Warmup Iteration   3: 6486812.811 ops/s
# Warmup Iteration   4: 6590546.409 ops/s
# Warmup Iteration   5: 6419512.444 ops/s
# Warmup Iteration   6: 6316758.302 ops/s
# Warmup Iteration   7: 6759853.258 ops/s
# Warmup Iteration   8: 6438243.894 ops/s
# Warmup Iteration   9: 6423396.935 ops/s
# Warmup Iteration  10: 6706908.601 ops/s
# Warmup Iteration  11: 6330803.240 ops/s
# Warmup Iteration  12: 6493340.186 ops/s
# Warmup Iteration  13: 6621250.463 ops/s
# Warmup Iteration  14: 6374112.261 ops/s
# Warmup Iteration  15: 6587352.720 ops/s
# Warmup Iteration  16: 6431466.271 ops/s
# Warmup Iteration  17: 6487190.528 ops/s
# Warmup Iteration  18: 6739584.344 ops/s
# Warmup Iteration  19: 6393125.663 ops/s
# Warmup Iteration  20: 6735814.555 ops/s
# Warmup Iteration  21: 6541659.882 ops/s
# Warmup Iteration  22: 6601686.524 ops/s
# Warmup Iteration  23: 6451031.736 ops/s
# Warmup Iteration  24: 6305889.801 ops/s
# Warmup Iteration  25: 6831300.578 ops/s
# Warmup Iteration  26: 6376795.455 ops/s
# Warmup Iteration  27: 6642671.547 ops/s
# Warmup Iteration  28: 6493817.096 ops/s
# Warmup Iteration  29: 6372415.192 ops/s
# Warmup Iteration  30: 6667731.046 ops/s
Iteration   1: 6320512.337 ops/s
Iteration   2: 6642182.855 ops/s
Iteration   3: 6794521.156 ops/s
Iteration   4: 6473838.507 ops/s
Iteration   5: 6348949.195 ops/s
Iteration   6: 6775226.961 ops/s
Iteration   7: 6286702.066 ops/s
Iteration   8: 6510825.130 ops/s
Iteration   9: 6634757.650 ops/s
Iteration  10: 6301547.436 ops/s
Iteration  11: 6490509.591 ops/s
Iteration  12: 6401350.394 ops/s
Iteration  13: 6609890.221 ops/s
Iteration  14: 6508960.613 ops/s
Iteration  15: 6568054.497 ops/s
Iteration  16: 6603810.645 ops/s
Iteration  17: 6374290.293 ops/s
Iteration  18: 6661540.192 ops/s
Iteration  19: 6502055.328 ops/s
Iteration  20: 6602680.629 ops/s
Iteration  21: 6756616.425 ops/s
Iteration  22: 6251804.025 ops/s
Iteration  23: 6710197.789 ops/s
Iteration  24: 6425365.414 ops/s
Iteration  25: 6609395.979 ops/s
Iteration  26: 6399836.718 ops/s
Iteration  27: 6722953.606 ops/s
Iteration  28: 6543776.956 ops/s
Iteration  29: 6475474.449 ops/s
Iteration  30: 6665595.413 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_emptyNonEager":
  6532440.749 ±(99.9%) 102208.845 ops/s [Average]
  (min, avg, max) = (6251804.025, 6532440.749, 6794521.156), stdev = 152981.400
  CI (99.9%): [6430231.904, 6634649.594] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
CompletableUsingTest._Benchmark.benchmark_emptyNonEager  thrpt   30  6532440.749 ± 102208.845  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 455603.362 ops/s
# Warmup Iteration   2: 2595476.542 ops/s
# Warmup Iteration   3: 3351912.157 ops/s
# Warmup Iteration   4: 3807753.619 ops/s
# Warmup Iteration   5: 3648256.690 ops/s
# Warmup Iteration   6: 3697549.052 ops/s
# Warmup Iteration   7: 3716017.119 ops/s
# Warmup Iteration   8: 3671734.718 ops/s
# Warmup Iteration   9: 3839552.577 ops/s
# Warmup Iteration  10: 3650649.266 ops/s
# Warmup Iteration  11: 3674008.493 ops/s
# Warmup Iteration  12: 3815398.476 ops/s
# Warmup Iteration  13: 3610044.924 ops/s
# Warmup Iteration  14: 3813531.271 ops/s
# Warmup Iteration  15: 3758276.081 ops/s
# Warmup Iteration  16: 3767164.717 ops/s
# Warmup Iteration  17: 3663268.287 ops/s
# Warmup Iteration  18: 3713365.754 ops/s
# Warmup Iteration  19: 3700072.280 ops/s
# Warmup Iteration  20: 3716668.325 ops/s
# Warmup Iteration  21: 3689598.948 ops/s
# Warmup Iteration  22: 3794845.145 ops/s
# Warmup Iteration  23: 3663028.979 ops/s
# Warmup Iteration  24: 3611719.683 ops/s
# Warmup Iteration  25: 3757458.418 ops/s
# Warmup Iteration  26: 3640653.245 ops/s
# Warmup Iteration  27: 3694762.555 ops/s
# Warmup Iteration  28: 3796059.783 ops/s
# Warmup Iteration  29: 3641129.738 ops/s
# Warmup Iteration  30: 3821338.351 ops/s
Iteration   1: 3612979.121 ops/s
Iteration   2: 3654885.185 ops/s
Iteration   3: 3735200.086 ops/s
Iteration   4: 3448028.147 ops/s
Iteration   5: 3756342.376 ops/s
Iteration   6: 3761618.002 ops/s
Iteration   7: 3541492.467 ops/s
Iteration   8: 3821969.158 ops/s
Iteration   9: 3595029.363 ops/s
Iteration  10: 3667709.816 ops/s
Iteration  11: 3661670.560 ops/s
Iteration  12: 3700042.250 ops/s
Iteration  13: 3733316.634 ops/s
Iteration  14: 3696582.957 ops/s
Iteration  15: 3697946.979 ops/s
Iteration  16: 3808490.160 ops/s
Iteration  17: 3658281.951 ops/s
Iteration  18: 3776921.603 ops/s
Iteration  19: 3614526.328 ops/s
Iteration  20: 3746758.360 ops/s
Iteration  21: 3649093.311 ops/s
Iteration  22: 3740827.546 ops/s
Iteration  23: 3831431.772 ops/s
Iteration  24: 3596981.563 ops/s
Iteration  25: 3095955.071 ops/s
Iteration  26: 3829697.943 ops/s
Iteration  27: 3625711.248 ops/s
Iteration  28: 3730668.869 ops/s
Iteration  29: 3548921.054 ops/s
Iteration  30: 3599173.691 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_dispose":
  3664608.452 ±(99.9%) 94533.958 ops/s [Average]
  (min, avg, max) = (3095955.071, 3664608.452, 3831431.772), stdev = 141493.989
  CI (99.9%): [3570074.494, 3759142.411] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
CompletableDisposeOnTest._Benchmark.benchmark_dispose  thrpt   30  3664608.452 ± 94533.958  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_errorReceived$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_errorReceived

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 216377.488 ops/s
# Warmup Iteration   2: 581880.378 ops/s
# Warmup Iteration   3: 674978.100 ops/s
# Warmup Iteration   4: 663012.543 ops/s
# Warmup Iteration   5: 701088.549 ops/s
# Warmup Iteration   6: 686206.437 ops/s
# Warmup Iteration   7: 677879.431 ops/s
# Warmup Iteration   8: 701021.033 ops/s
# Warmup Iteration   9: 623284.508 ops/s
# Warmup Iteration  10: 664186.030 ops/s
# Warmup Iteration  11: 698060.170 ops/s
# Warmup Iteration  12: 702844.157 ops/s
# Warmup Iteration  13: 678661.558 ops/s
# Warmup Iteration  14: 687086.693 ops/s
# Warmup Iteration  15: 681328.575 ops/s
# Warmup Iteration  16: 699879.372 ops/s
# Warmup Iteration  17: 743845.437 ops/s
# Warmup Iteration  18: 707720.911 ops/s
# Warmup Iteration  19: 736043.692 ops/s
# Warmup Iteration  20: 759846.265 ops/s
# Warmup Iteration  21: 698694.207 ops/s
# Warmup Iteration  22: 730778.357 ops/s
# Warmup Iteration  23: 751117.124 ops/s
# Warmup Iteration  24: 712740.815 ops/s
# Warmup Iteration  25: 721189.000 ops/s
# Warmup Iteration  26: 750071.396 ops/s
# Warmup Iteration  27: 700695.644 ops/s
# Warmup Iteration  28: 711046.788 ops/s
# Warmup Iteration  29: 749147.387 ops/s
# Warmup Iteration  30: 731337.900 ops/s
Iteration   1: 712856.906 ops/s
Iteration   2: 682233.638 ops/s
Iteration   3: 719476.041 ops/s
Iteration   4: 747035.405 ops/s
Iteration   5: 694172.946 ops/s
Iteration   6: 757420.067 ops/s
Iteration   7: 763501.710 ops/s
Iteration   8: 748500.950 ops/s
Iteration   9: 708989.818 ops/s
Iteration  10: 739240.364 ops/s
Iteration  11: 714878.569 ops/s
Iteration  12: 728134.416 ops/s
Iteration  13: 739184.499 ops/s
Iteration  14: 718471.586 ops/s
Iteration  15: 693101.664 ops/s
Iteration  16: 736376.671 ops/s
Iteration  17: 718662.516 ops/s
Iteration  18: 736747.219 ops/s
Iteration  19: 729253.296 ops/s
Iteration  20: 732164.395 ops/s
Iteration  21: 682158.205 ops/s
Iteration  22: 708597.248 ops/s
Iteration  23: 731930.862 ops/s
Iteration  24: 708440.507 ops/s
Iteration  25: 732432.944 ops/s
Iteration  26: 704279.022 ops/s
Iteration  27: 768998.452 ops/s
Iteration  28: 707033.481 ops/s
Iteration  29: 729994.655 ops/s
Iteration  30: 736309.976 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_errorReceived":
  724352.601 ±(99.9%) 14705.041 ops/s [Average]
  (min, avg, max) = (682158.205, 724352.601, 768998.452), stdev = 22009.815
  CI (99.9%): [709647.559, 739057.642] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_errorReceived  thrpt   30  724352.601 ± 14705.041  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableCompleteError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableCompleteError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 323442.555 ops/s
# Warmup Iteration   2: 601461.227 ops/s
# Warmup Iteration   3: 648308.880 ops/s
# Warmup Iteration   4: 685607.499 ops/s
# Warmup Iteration   5: 641757.389 ops/s
# Warmup Iteration   6: 711734.733 ops/s
# Warmup Iteration   7: 738097.675 ops/s
# Warmup Iteration   8: 693077.297 ops/s
# Warmup Iteration   9: 726854.743 ops/s
# Warmup Iteration  10: 679763.519 ops/s
# Warmup Iteration  11: 707939.179 ops/s
# Warmup Iteration  12: 718554.789 ops/s
# Warmup Iteration  13: 706953.636 ops/s
# Warmup Iteration  14: 725655.027 ops/s
# Warmup Iteration  15: 693884.366 ops/s
# Warmup Iteration  16: 724758.093 ops/s
# Warmup Iteration  17: 724671.741 ops/s
# Warmup Iteration  18: 754557.640 ops/s
# Warmup Iteration  19: 778332.197 ops/s
# Warmup Iteration  20: 733284.447 ops/s
# Warmup Iteration  21: 778036.185 ops/s
# Warmup Iteration  22: 747985.106 ops/s
# Warmup Iteration  23: 739975.380 ops/s
# Warmup Iteration  24: 736492.498 ops/s
# Warmup Iteration  25: 767161.653 ops/s
# Warmup Iteration  26: 745404.591 ops/s
# Warmup Iteration  27: 750815.773 ops/s
# Warmup Iteration  28: 744070.632 ops/s
# Warmup Iteration  29: 736307.577 ops/s
# Warmup Iteration  30: 779951.518 ops/s
Iteration   1: 727247.890 ops/s
Iteration   2: 757212.814 ops/s
Iteration   3: 758483.161 ops/s
Iteration   4: 734509.151 ops/s
Iteration   5: 753766.253 ops/s
Iteration   6: 781805.155 ops/s
Iteration   7: 705759.068 ops/s
Iteration   8: 772902.203 ops/s
Iteration   9: 730498.297 ops/s
Iteration  10: 773682.587 ops/s
Iteration  11: 747586.339 ops/s
Iteration  12: 762934.714 ops/s
Iteration  13: 761876.493 ops/s
Iteration  14: 736427.888 ops/s
Iteration  15: 726024.087 ops/s
Iteration  16: 742476.938 ops/s
Iteration  17: 781235.544 ops/s
Iteration  18: 744393.742 ops/s
Iteration  19: 596924.689 ops/s
Iteration  20: 778721.739 ops/s
Iteration  21: 771844.938 ops/s
Iteration  22: 735527.712 ops/s
Iteration  23: 773027.954 ops/s
Iteration  24: 736566.118 ops/s
Iteration  25: 740234.448 ops/s
Iteration  26: 754429.976 ops/s
Iteration  27: 763664.801 ops/s
Iteration  28: 759654.012 ops/s
Iteration  29: 727156.647 ops/s
Iteration  30: 752731.538 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableCompleteError":
  746310.230 ±(99.9%) 22754.224 ops/s [Average]
  (min, avg, max) = (596924.689, 746310.230, 781805.155), stdev = 34057.453
  CI (99.9%): [723556.006, 769064.453] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score       Error  Units
CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableCompleteError  thrpt   30  746310.230 ± 22754.224  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnTest._Benchmark.benchmark_successAcceptThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnTest._Benchmark.benchmark_successAcceptThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 349123.920 ops/s
# Warmup Iteration   2: 504532.638 ops/s
# Warmup Iteration   3: 596987.706 ops/s
# Warmup Iteration   4: 583968.962 ops/s
# Warmup Iteration   5: 575701.736 ops/s
# Warmup Iteration   6: 540822.944 ops/s
# Warmup Iteration   7: 633436.437 ops/s
# Warmup Iteration   8: 602851.782 ops/s
# Warmup Iteration   9: 634948.982 ops/s
# Warmup Iteration  10: 625642.763 ops/s
# Warmup Iteration  11: 603026.513 ops/s
# Warmup Iteration  12: 642387.065 ops/s
# Warmup Iteration  13: 614471.369 ops/s
# Warmup Iteration  14: 641993.791 ops/s
# Warmup Iteration  15: 604215.523 ops/s
# Warmup Iteration  16: 617065.388 ops/s
# Warmup Iteration  17: 661288.031 ops/s
# Warmup Iteration  18: 645152.712 ops/s
# Warmup Iteration  19: 681096.579 ops/s
# Warmup Iteration  20: 638087.660 ops/s
# Warmup Iteration  21: 666819.392 ops/s
# Warmup Iteration  22: 679888.918 ops/s
# Warmup Iteration  23: 645282.659 ops/s
# Warmup Iteration  24: 629919.489 ops/s
# Warmup Iteration  25: 659748.323 ops/s
# Warmup Iteration  26: 666118.848 ops/s
# Warmup Iteration  27: 639665.295 ops/s
# Warmup Iteration  28: 663565.654 ops/s
# Warmup Iteration  29: 648465.803 ops/s
# Warmup Iteration  30: 679126.471 ops/s
Iteration   1: 654826.958 ops/s
Iteration   2: 656323.688 ops/s
Iteration   3: 641802.477 ops/s
Iteration   4: 653616.338 ops/s
Iteration   5: 628613.069 ops/s
Iteration   6: 685714.307 ops/s
Iteration   7: 665132.633 ops/s
Iteration   8: 640909.388 ops/s
Iteration   9: 671045.502 ops/s
Iteration  10: 652139.428 ops/s
Iteration  11: 651601.069 ops/s
Iteration  12: 681286.696 ops/s
Iteration  13: 639160.560 ops/s
Iteration  14: 657414.668 ops/s
Iteration  15: 643253.623 ops/s
Iteration  16: 650600.415 ops/s
Iteration  17: 654452.672 ops/s
Iteration  18: 627284.805 ops/s
Iteration  19: 674044.274 ops/s
Iteration  20: 624379.921 ops/s
Iteration  21: 651756.537 ops/s
Iteration  22: 645438.604 ops/s
Iteration  23: 634962.385 ops/s
Iteration  24: 653934.874 ops/s
Iteration  25: 649049.168 ops/s
Iteration  26: 656538.860 ops/s
Iteration  27: 617754.882 ops/s
Iteration  28: 655200.062 ops/s
Iteration  29: 646202.879 ops/s
Iteration  30: 636396.631 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnTest._Benchmark.benchmark_successAcceptThrows":
  650027.912 ±(99.9%) 10513.471 ops/s [Average]
  (min, avg, max) = (617754.882, 650027.912, 685714.307), stdev = 15736.069
  CI (99.9%): [639514.442, 660541.383] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
CompletableDoOnTest._Benchmark.benchmark_successAcceptThrows  thrpt   30  650027.912 ± 10513.471  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 173300.251 ops/s
# Warmup Iteration   2: 592825.246 ops/s
# Warmup Iteration   3: 666993.708 ops/s
# Warmup Iteration   4: 676863.069 ops/s
# Warmup Iteration   5: 732346.178 ops/s
# Warmup Iteration   6: 700881.541 ops/s
# Warmup Iteration   7: 704812.641 ops/s
# Warmup Iteration   8: 739333.475 ops/s
# Warmup Iteration   9: 693050.214 ops/s
# Warmup Iteration  10: 711530.994 ops/s
# Warmup Iteration  11: 713558.805 ops/s
# Warmup Iteration  12: 687213.603 ops/s
# Warmup Iteration  13: 708968.962 ops/s
# Warmup Iteration  14: 694809.351 ops/s
# Warmup Iteration  15: 694122.339 ops/s
# Warmup Iteration  16: 694036.894 ops/s
# Warmup Iteration  17: 754884.108 ops/s
# Warmup Iteration  18: 724737.501 ops/s
# Warmup Iteration  19: 777135.917 ops/s
# Warmup Iteration  20: 736652.891 ops/s
# Warmup Iteration  21: 740944.890 ops/s
# Warmup Iteration  22: 767482.025 ops/s
# Warmup Iteration  23: 770795.552 ops/s
# Warmup Iteration  24: 760496.116 ops/s
# Warmup Iteration  25: 723301.855 ops/s
# Warmup Iteration  26: 776629.292 ops/s
# Warmup Iteration  27: 729459.074 ops/s
# Warmup Iteration  28: 744321.579 ops/s
# Warmup Iteration  29: 742490.338 ops/s
# Warmup Iteration  30: 766376.512 ops/s
Iteration   1: 743217.029 ops/s
Iteration   2: 688057.632 ops/s
Iteration   3: 770203.170 ops/s
Iteration   4: 748198.534 ops/s
Iteration   5: 733205.847 ops/s
Iteration   6: 738385.953 ops/s
Iteration   7: 743178.770 ops/s
Iteration   8: 745362.949 ops/s
Iteration   9: 761638.917 ops/s
Iteration  10: 734636.733 ops/s
Iteration  11: 768812.140 ops/s
Iteration  12: 712467.420 ops/s
Iteration  13: 777865.606 ops/s
Iteration  14: 580836.470 ops/s
Iteration  15: 759053.030 ops/s
Iteration  16: 728812.167 ops/s
Iteration  17: 689751.668 ops/s
Iteration  18: 748550.492 ops/s
Iteration  19: 768313.986 ops/s
Iteration  20: 729695.003 ops/s
Iteration  21: 790602.118 ops/s
Iteration  22: 746080.135 ops/s
Iteration  23: 758890.862 ops/s
Iteration  24: 767360.333 ops/s
Iteration  25: 760836.935 ops/s
Iteration  26: 743867.689 ops/s
Iteration  27: 780936.786 ops/s
Iteration  28: 780774.501 ops/s
Iteration  29: 779847.833 ops/s
Iteration  30: 743415.940 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_error":
  744095.222 ±(99.9%) 26379.137 ops/s [Average]
  (min, avg, max) = (580836.470, 744095.222, 790602.118), stdev = 39483.053
  CI (99.9%): [717716.085, 770474.358] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
SingleConcatMapCompletableTest._Benchmark.benchmark_error  thrpt   30  744095.222 ± 26379.137  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 199015.860 ops/s
# Warmup Iteration   2: 616400.743 ops/s
# Warmup Iteration   3: 687461.933 ops/s
# Warmup Iteration   4: 665211.614 ops/s
# Warmup Iteration   5: 686315.963 ops/s
# Warmup Iteration   6: 659448.278 ops/s
# Warmup Iteration   7: 672036.846 ops/s
# Warmup Iteration   8: 671389.863 ops/s
# Warmup Iteration   9: 680779.457 ops/s
# Warmup Iteration  10: 725638.733 ops/s
# Warmup Iteration  11: 683403.915 ops/s
# Warmup Iteration  12: 680379.883 ops/s
# Warmup Iteration  13: 687377.975 ops/s
# Warmup Iteration  14: 671885.541 ops/s
# Warmup Iteration  15: 692244.991 ops/s
# Warmup Iteration  16: 683122.452 ops/s
# Warmup Iteration  17: 744777.245 ops/s
# Warmup Iteration  18: 720851.226 ops/s
# Warmup Iteration  19: 767320.919 ops/s
# Warmup Iteration  20: 718082.788 ops/s
# Warmup Iteration  21: 712455.150 ops/s
# Warmup Iteration  22: 751477.596 ops/s
# Warmup Iteration  23: 719892.302 ops/s
# Warmup Iteration  24: 696583.628 ops/s
# Warmup Iteration  25: 754186.315 ops/s
# Warmup Iteration  26: 759728.525 ops/s
# Warmup Iteration  27: 753748.348 ops/s
# Warmup Iteration  28: 698232.494 ops/s
# Warmup Iteration  29: 761182.873 ops/s
# Warmup Iteration  30: 722353.793 ops/s
Iteration   1: 741359.653 ops/s
Iteration   2: 752667.224 ops/s
Iteration   3: 717714.739 ops/s
Iteration   4: 781836.973 ops/s
Iteration   5: 710040.409 ops/s
Iteration   6: 730543.512 ops/s
Iteration   7: 708022.292 ops/s
Iteration   8: 748961.839 ops/s
Iteration   9: 720582.477 ops/s
Iteration  10: 756679.089 ops/s
Iteration  11: 742261.365 ops/s
Iteration  12: 735619.962 ops/s
Iteration  13: 763830.306 ops/s
Iteration  14: 730607.454 ops/s
Iteration  15: 710884.902 ops/s
Iteration  16: 727682.632 ops/s
Iteration  17: 741530.356 ops/s
Iteration  18: 726501.977 ops/s
Iteration  19: 721115.055 ops/s
Iteration  20: 762101.454 ops/s
Iteration  21: 724995.681 ops/s
Iteration  22: 740591.769 ops/s
Iteration  23: 721125.469 ops/s
Iteration  24: 738660.440 ops/s
Iteration  25: 741258.919 ops/s
Iteration  26: 740706.237 ops/s
Iteration  27: 751196.124 ops/s
Iteration  28: 741027.135 ops/s
Iteration  29: 707266.541 ops/s
Iteration  30: 759892.906 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_error":
  736575.496 ±(99.9%) 12213.525 ops/s [Average]
  (min, avg, max) = (707266.541, 736575.496, 781836.973), stdev = 18280.630
  CI (99.9%): [724361.972, 748789.021] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score       Error  Units
SingleFlatMapTest._Benchmark.benchmark_error  thrpt   30  736575.496 ± 12213.525  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_emptyDisposerCrashes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_emptyDisposerCrashes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 193038.058 ops/s
# Warmup Iteration   2: 512444.461 ops/s
# Warmup Iteration   3: 605224.339 ops/s
# Warmup Iteration   4: 574944.548 ops/s
# Warmup Iteration   5: 608641.140 ops/s
# Warmup Iteration   6: 576649.185 ops/s
# Warmup Iteration   7: 606779.162 ops/s
# Warmup Iteration   8: 610373.871 ops/s
# Warmup Iteration   9: 555642.548 ops/s
# Warmup Iteration  10: 594734.851 ops/s
# Warmup Iteration  11: 601132.704 ops/s
# Warmup Iteration  12: 598999.460 ops/s
# Warmup Iteration  13: 610056.142 ops/s
# Warmup Iteration  14: 609380.215 ops/s
# Warmup Iteration  15: 592326.553 ops/s
# Warmup Iteration  16: 610847.924 ops/s
# Warmup Iteration  17: 634438.097 ops/s
# Warmup Iteration  18: 630683.003 ops/s
# Warmup Iteration  19: 646845.355 ops/s
# Warmup Iteration  20: 631240.092 ops/s
# Warmup Iteration  21: 655767.080 ops/s
# Warmup Iteration  22: 617319.696 ops/s
# Warmup Iteration  23: 615631.237 ops/s
# Warmup Iteration  24: 652985.664 ops/s
# Warmup Iteration  25: 608937.281 ops/s
# Warmup Iteration  26: 623420.721 ops/s
# Warmup Iteration  27: 646564.481 ops/s
# Warmup Iteration  28: 622376.703 ops/s
# Warmup Iteration  29: 631066.311 ops/s
# Warmup Iteration  30: 621318.304 ops/s
Iteration   1: 609158.508 ops/s
Iteration   2: 647415.404 ops/s
Iteration   3: 604445.240 ops/s
Iteration   4: 644124.323 ops/s
Iteration   5: 634529.317 ops/s
Iteration   6: 617883.508 ops/s
Iteration   7: 640391.702 ops/s
Iteration   8: 441041.895 ops/s
Iteration   9: 615572.588 ops/s
Iteration  10: 621316.444 ops/s
Iteration  11: 649844.396 ops/s
Iteration  12: 637497.928 ops/s
Iteration  13: 623558.595 ops/s
Iteration  14: 640864.103 ops/s
Iteration  15: 626184.455 ops/s
Iteration  16: 634550.153 ops/s
Iteration  17: 646111.073 ops/s
Iteration  18: 620292.212 ops/s
Iteration  19: 653570.946 ops/s
Iteration  20: 646149.018 ops/s
Iteration  21: 615636.601 ops/s
Iteration  22: 634165.460 ops/s
Iteration  23: 634735.645 ops/s
Iteration  24: 611613.149 ops/s
Iteration  25: 629934.041 ops/s
Iteration  26: 622667.444 ops/s
Iteration  27: 648970.764 ops/s
Iteration  28: 617591.853 ops/s
Iteration  29: 632905.243 ops/s
Iteration  30: 627020.988 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_emptyDisposerCrashes":
  624324.767 ±(99.9%) 24773.381 ops/s [Average]
  (min, avg, max) = (441041.895, 624324.767, 653570.946), stdev = 37079.634
  CI (99.9%): [599551.385, 649098.148] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
CompletableUsingTest._Benchmark.benchmark_emptyDisposerCrashes  thrpt   30  624324.767 ± 24773.381  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_justDisposerCrashes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_justDisposerCrashes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 216961.536 ops/s
# Warmup Iteration   2: 542117.581 ops/s
# Warmup Iteration   3: 596724.927 ops/s
# Warmup Iteration   4: 587719.004 ops/s
# Warmup Iteration   5: 566804.006 ops/s
# Warmup Iteration   6: 578631.527 ops/s
# Warmup Iteration   7: 586399.542 ops/s
# Warmup Iteration   8: 603344.673 ops/s
# Warmup Iteration   9: 599330.550 ops/s
# Warmup Iteration  10: 606116.555 ops/s
# Warmup Iteration  11: 604535.973 ops/s
# Warmup Iteration  12: 588765.875 ops/s
# Warmup Iteration  13: 616627.978 ops/s
# Warmup Iteration  14: 585259.766 ops/s
# Warmup Iteration  15: 598072.930 ops/s
# Warmup Iteration  16: 592243.069 ops/s
# Warmup Iteration  17: 609194.898 ops/s
# Warmup Iteration  18: 634351.803 ops/s
# Warmup Iteration  19: 654605.029 ops/s
# Warmup Iteration  20: 626767.328 ops/s
# Warmup Iteration  21: 645665.413 ops/s
# Warmup Iteration  22: 626510.838 ops/s
# Warmup Iteration  23: 627563.278 ops/s
# Warmup Iteration  24: 616851.042 ops/s
# Warmup Iteration  25: 601745.305 ops/s
# Warmup Iteration  26: 637006.788 ops/s
# Warmup Iteration  27: 617650.105 ops/s
# Warmup Iteration  28: 610614.445 ops/s
# Warmup Iteration  29: 653898.119 ops/s
# Warmup Iteration  30: 603932.446 ops/s
Iteration   1: 640857.934 ops/s
Iteration   2: 624052.891 ops/s
Iteration   3: 615966.748 ops/s
Iteration   4: 634927.700 ops/s
Iteration   5: 656409.171 ops/s
Iteration   6: 604742.428 ops/s
Iteration   7: 657070.784 ops/s
Iteration   8: 619116.028 ops/s
Iteration   9: 648102.248 ops/s
Iteration  10: 622282.644 ops/s
Iteration  11: 621520.774 ops/s
Iteration  12: 626505.075 ops/s
Iteration  13: 610746.476 ops/s
Iteration  14: 628877.868 ops/s
Iteration  15: 633543.831 ops/s
Iteration  16: 619576.526 ops/s
Iteration  17: 654496.400 ops/s
Iteration  18: 625100.740 ops/s
Iteration  19: 623534.221 ops/s
Iteration  20: 619088.630 ops/s
Iteration  21: 644739.600 ops/s
Iteration  22: 630009.329 ops/s
Iteration  23: 619726.966 ops/s
Iteration  24: 668478.643 ops/s
Iteration  25: 611626.742 ops/s
Iteration  26: 654569.448 ops/s
Iteration  27: 646388.764 ops/s
Iteration  28: 620206.072 ops/s
Iteration  29: 650394.618 ops/s
Iteration  30: 625070.383 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_justDisposerCrashes":
  631924.323 ±(99.9%) 10921.224 ops/s [Average]
  (min, avg, max) = (604742.428, 631924.323, 668478.643), stdev = 16346.376
  CI (99.9%): [621003.098, 642845.547] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
CompletableUsingTest._Benchmark.benchmark_justDisposerCrashes  thrpt   30  631924.323 ± 10921.224  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTimerTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTimerTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1559521.946 ops/s
# Warmup Iteration   2: 3946902.836 ops/s
# Warmup Iteration   3: 5986085.124 ops/s
# Warmup Iteration   4: 5617481.392 ops/s
# Warmup Iteration   5: 5900468.707 ops/s
# Warmup Iteration   6: 5626152.254 ops/s
# Warmup Iteration   7: 5767236.131 ops/s
# Warmup Iteration   8: 5626500.158 ops/s
# Warmup Iteration   9: 5732834.952 ops/s
# Warmup Iteration  10: 6046231.747 ops/s
# Warmup Iteration  11: 5982141.136 ops/s
# Warmup Iteration  12: 5593498.429 ops/s
# Warmup Iteration  13: 5832359.097 ops/s
# Warmup Iteration  14: 5734330.707 ops/s
# Warmup Iteration  15: 6058472.323 ops/s
# Warmup Iteration  16: 5593690.977 ops/s
# Warmup Iteration  17: 5769404.402 ops/s
# Warmup Iteration  18: 5768319.103 ops/s
# Warmup Iteration  19: 5689958.008 ops/s
# Warmup Iteration  20: 5904280.955 ops/s
# Warmup Iteration  21: 5639561.459 ops/s
# Warmup Iteration  22: 5630377.670 ops/s
# Warmup Iteration  23: 5897327.926 ops/s
# Warmup Iteration  24: 5665719.798 ops/s
# Warmup Iteration  25: 5583931.016 ops/s
# Warmup Iteration  26: 5867591.908 ops/s
# Warmup Iteration  27: 5847331.062 ops/s
# Warmup Iteration  28: 5867084.336 ops/s
# Warmup Iteration  29: 5586514.877 ops/s
# Warmup Iteration  30: 5709509.009 ops/s
Iteration   1: 5751661.541 ops/s
Iteration   2: 5812206.344 ops/s
Iteration   3: 4404523.526 ops/s
Iteration   4: 5542256.753 ops/s
Iteration   5: 5825231.609 ops/s
Iteration   6: 5568429.272 ops/s
Iteration   7: 5704973.312 ops/s
Iteration   8: 5709355.577 ops/s
Iteration   9: 5557022.419 ops/s
Iteration  10: 5945744.040 ops/s
Iteration  11: 5668484.183 ops/s
Iteration  12: 5764001.366 ops/s
Iteration  13: 5890843.745 ops/s
Iteration  14: 5726802.049 ops/s
Iteration  15: 5644959.762 ops/s
Iteration  16: 5806645.662 ops/s
Iteration  17: 5683342.823 ops/s
Iteration  18: 5826201.460 ops/s
Iteration  19: 5955927.997 ops/s
Iteration  20: 5676786.770 ops/s
Iteration  21: 5906294.544 ops/s
Iteration  22: 5680985.792 ops/s
Iteration  23: 5972788.613 ops/s
Iteration  24: 5841302.765 ops/s
Iteration  25: 5551753.306 ops/s
Iteration  26: 5981171.211 ops/s
Iteration  27: 5694016.769 ops/s
Iteration  28: 5892016.659 ops/s
Iteration  29: 5605954.131 ops/s
Iteration  30: 5819751.319 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTimerTest._Benchmark.benchmark_dispose":
  5713714.511 ±(99.9%) 186676.095 ops/s [Average]
  (min, avg, max) = (4404523.526, 5713714.511, 5981171.211), stdev = 279408.012
  CI (99.9%): [5527038.416, 5900390.605] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
CompletableTimerTest._Benchmark.benchmark_dispose  thrpt   30  5713714.511 ± 186676.095  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_selectorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_selectorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 173979.216 ops/s
# Warmup Iteration   2: 557612.988 ops/s
# Warmup Iteration   3: 620295.185 ops/s
# Warmup Iteration   4: 547461.928 ops/s
# Warmup Iteration   5: 679655.033 ops/s
# Warmup Iteration   6: 539301.765 ops/s
# Warmup Iteration   7: 656041.040 ops/s
# Warmup Iteration   8: 689175.458 ops/s
# Warmup Iteration   9: 643262.954 ops/s
# Warmup Iteration  10: 668387.187 ops/s
# Warmup Iteration  11: 644211.535 ops/s
# Warmup Iteration  12: 671435.065 ops/s
# Warmup Iteration  13: 657542.833 ops/s
# Warmup Iteration  14: 647760.904 ops/s
# Warmup Iteration  15: 677802.370 ops/s
# Warmup Iteration  16: 654964.173 ops/s
# Warmup Iteration  17: 709888.298 ops/s
# Warmup Iteration  18: 674594.528 ops/s
# Warmup Iteration  19: 708304.486 ops/s
# Warmup Iteration  20: 676347.585 ops/s
# Warmup Iteration  21: 703558.181 ops/s
# Warmup Iteration  22: 694916.886 ops/s
# Warmup Iteration  23: 675413.966 ops/s
# Warmup Iteration  24: 689764.922 ops/s
# Warmup Iteration  25: 686683.961 ops/s
# Warmup Iteration  26: 705427.428 ops/s
# Warmup Iteration  27: 712154.013 ops/s
# Warmup Iteration  28: 688274.066 ops/s
# Warmup Iteration  29: 707372.532 ops/s
# Warmup Iteration  30: 680787.752 ops/s
Iteration   1: 684677.061 ops/s
Iteration   2: 687476.184 ops/s
Iteration   3: 672941.786 ops/s
Iteration   4: 710166.434 ops/s
Iteration   5: 670438.874 ops/s
Iteration   6: 702777.994 ops/s
Iteration   7: 680395.290 ops/s
Iteration   8: 679211.808 ops/s
Iteration   9: 719601.423 ops/s
Iteration  10: 671853.378 ops/s
Iteration  11: 701373.496 ops/s
Iteration  12: 685220.543 ops/s
Iteration  13: 695612.283 ops/s
Iteration  14: 689973.358 ops/s
Iteration  15: 672355.468 ops/s
Iteration  16: 709641.378 ops/s
Iteration  17: 684880.942 ops/s
Iteration  18: 720925.707 ops/s
Iteration  19: 674734.363 ops/s
Iteration  20: 685127.752 ops/s
Iteration  21: 716156.334 ops/s
Iteration  22: 684161.285 ops/s
Iteration  23: 694782.074 ops/s
Iteration  24: 677968.207 ops/s
Iteration  25: 706787.163 ops/s
Iteration  26: 660192.549 ops/s
Iteration  27: 686899.461 ops/s
Iteration  28: 711356.402 ops/s
Iteration  29: 668166.186 ops/s
Iteration  30: 686534.643 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_selectorCrash":
  689746.327 ±(99.9%) 10972.137 ops/s [Average]
  (min, avg, max) = (660192.549, 689746.327, 720925.707), stdev = 16422.579
  CI (99.9%): [678774.191, 700718.464] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_selectorCrash  thrpt   30  689746.327 ± 10972.137  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 669572.898 ops/s
# Warmup Iteration   2: 2899111.869 ops/s
# Warmup Iteration   3: 4636431.270 ops/s
# Warmup Iteration   4: 4764722.843 ops/s
# Warmup Iteration   5: 5000991.436 ops/s
# Warmup Iteration   6: 4706650.930 ops/s
# Warmup Iteration   7: 4635690.338 ops/s
# Warmup Iteration   8: 4817244.831 ops/s
# Warmup Iteration   9: 4805466.058 ops/s
# Warmup Iteration  10: 4854778.076 ops/s
# Warmup Iteration  11: 4678505.965 ops/s
# Warmup Iteration  12: 4860557.328 ops/s
# Warmup Iteration  13: 4953038.894 ops/s
# Warmup Iteration  14: 4696853.756 ops/s
# Warmup Iteration  15: 4992634.810 ops/s
# Warmup Iteration  16: 4882541.729 ops/s
# Warmup Iteration  17: 4756363.516 ops/s
# Warmup Iteration  18: 4777580.461 ops/s
# Warmup Iteration  19: 4864267.268 ops/s
# Warmup Iteration  20: 4679896.756 ops/s
# Warmup Iteration  21: 4955242.303 ops/s
# Warmup Iteration  22: 4695577.392 ops/s
# Warmup Iteration  23: 4688988.100 ops/s
# Warmup Iteration  24: 4849079.057 ops/s
# Warmup Iteration  25: 4896434.794 ops/s
# Warmup Iteration  26: 4724839.812 ops/s
# Warmup Iteration  27: 4854397.680 ops/s
# Warmup Iteration  28: 3775334.280 ops/s
# Warmup Iteration  29: 4701267.303 ops/s
# Warmup Iteration  30: 4992272.627 ops/s
Iteration   1: 4755507.595 ops/s
Iteration   2: 4643882.694 ops/s
Iteration   3: 4900879.887 ops/s
Iteration   4: 4671771.536 ops/s
Iteration   5: 4907172.894 ops/s
Iteration   6: 4678980.439 ops/s
Iteration   7: 4961328.693 ops/s
Iteration   8: 4827881.632 ops/s
Iteration   9: 4679231.466 ops/s
Iteration  10: 4885767.832 ops/s
Iteration  11: 4671204.735 ops/s
Iteration  12: 4988821.505 ops/s
Iteration  13: 4672811.840 ops/s
Iteration  14: 4845721.619 ops/s
Iteration  15: 4845927.258 ops/s
Iteration  16: 4632044.160 ops/s
Iteration  17: 4875717.074 ops/s
Iteration  18: 4762988.881 ops/s
Iteration  19: 4743977.272 ops/s
Iteration  20: 4891096.096 ops/s
Iteration  21: 4714707.729 ops/s
Iteration  22: 4915598.072 ops/s
Iteration  23: 4714532.613 ops/s
Iteration  24: 4913077.150 ops/s
Iteration  25: 4724243.498 ops/s
Iteration  26: 4772465.805 ops/s
Iteration  27: 4864832.943 ops/s
Iteration  28: 4802134.883 ops/s
Iteration  29: 4943425.771 ops/s
Iteration  30: 4767095.179 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_normal":
  4799160.958 ±(99.9%) 70213.004 ops/s [Average]
  (min, avg, max) = (4632044.160, 4799160.958, 4988821.505), stdev = 105091.526
  CI (99.9%): [4728947.955, 4869373.962] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
CompletableDisposeOnTest._Benchmark.benchmark_normal  thrpt   30  4799160.958 ± 70213.004  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 723449.645 ops/s
# Warmup Iteration   2: 1743185.637 ops/s
# Warmup Iteration   3: 2616758.842 ops/s
# Warmup Iteration   4: 2622253.731 ops/s
# Warmup Iteration   5: 2680225.372 ops/s
# Warmup Iteration   6: 2639408.451 ops/s
# Warmup Iteration   7: 2574857.000 ops/s
# Warmup Iteration   8: 2660964.200 ops/s
# Warmup Iteration   9: 2696158.873 ops/s
# Warmup Iteration  10: 2699889.848 ops/s
# Warmup Iteration  11: 2570466.269 ops/s
# Warmup Iteration  12: 2672433.319 ops/s
# Warmup Iteration  13: 2711000.778 ops/s
# Warmup Iteration  14: 2726751.135 ops/s
# Warmup Iteration  15: 2610742.884 ops/s
# Warmup Iteration  16: 2772437.092 ops/s
# Warmup Iteration  17: 2705253.656 ops/s
# Warmup Iteration  18: 2662632.522 ops/s
# Warmup Iteration  19: 2794366.067 ops/s
# Warmup Iteration  20: 2620766.007 ops/s
# Warmup Iteration  21: 2621442.421 ops/s
# Warmup Iteration  22: 2690349.116 ops/s
# Warmup Iteration  23: 2777175.413 ops/s
# Warmup Iteration  24: 2574155.993 ops/s
# Warmup Iteration  25: 2784990.355 ops/s
# Warmup Iteration  26: 2742138.367 ops/s
# Warmup Iteration  27: 2626966.838 ops/s
# Warmup Iteration  28: 2669723.068 ops/s
# Warmup Iteration  29: 2621561.248 ops/s
# Warmup Iteration  30: 2665743.256 ops/s
Iteration   1: 2751151.223 ops/s
Iteration   2: 2571004.167 ops/s
Iteration   3: 2653416.149 ops/s
Iteration   4: 2749569.433 ops/s
Iteration   5: 2617620.316 ops/s
Iteration   6: 2643120.473 ops/s
Iteration   7: 2580933.229 ops/s
Iteration   8: 2757579.414 ops/s
Iteration   9: 2722433.287 ops/s
Iteration  10: 2656336.365 ops/s
Iteration  11: 2739904.943 ops/s
Iteration  12: 2725263.310 ops/s
Iteration  13: 2650854.825 ops/s
Iteration  14: 2738045.682 ops/s
Iteration  15: 2658724.391 ops/s
Iteration  16: 2749593.954 ops/s
Iteration  17: 2530542.804 ops/s
Iteration  18: 2680926.025 ops/s
Iteration  19: 2609481.269 ops/s
Iteration  20: 2714627.749 ops/s
Iteration  21: 2558039.124 ops/s
Iteration  22: 2653621.422 ops/s
Iteration  23: 2721135.348 ops/s
Iteration  24: 2599862.709 ops/s
Iteration  25: 2696090.182 ops/s
Iteration  26: 2655308.024 ops/s
Iteration  27: 2709012.497 ops/s
Iteration  28: 2719758.696 ops/s
Iteration  29: 2659904.354 ops/s
Iteration  30: 2659572.701 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_normal":
  2671114.469 ±(99.9%) 42077.069 ops/s [Average]
  (min, avg, max) = (2530542.804, 2671114.469, 2757579.414), stdev = 62978.981
  CI (99.9%): [2629037.400, 2713191.538] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
CompletableCacheTest._Benchmark.benchmark_normal  thrpt   30  2671114.469 ± 42077.069  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterableTest._Benchmark.benchmark_cancelAfterNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterableTest._Benchmark.benchmark_cancelAfterNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1441341.719 ops/s
# Warmup Iteration   2: 4133025.484 ops/s
# Warmup Iteration   3: 5116287.938 ops/s
# Warmup Iteration   4: 5500425.409 ops/s
# Warmup Iteration   5: 5672158.008 ops/s
# Warmup Iteration   6: 5571585.962 ops/s
# Warmup Iteration   7: 4850404.531 ops/s
# Warmup Iteration   8: 5442265.501 ops/s
# Warmup Iteration   9: 5682021.250 ops/s
# Warmup Iteration  10: 5552555.999 ops/s
# Warmup Iteration  11: 5741462.922 ops/s
# Warmup Iteration  12: 5633025.613 ops/s
# Warmup Iteration  13: 5520324.163 ops/s
# Warmup Iteration  14: 5551088.275 ops/s
# Warmup Iteration  15: 5790119.230 ops/s
# Warmup Iteration  16: 5471030.705 ops/s
# Warmup Iteration  17: 5511723.812 ops/s
# Warmup Iteration  18: 5604719.584 ops/s
# Warmup Iteration  19: 5515183.615 ops/s
# Warmup Iteration  20: 5590590.506 ops/s
# Warmup Iteration  21: 5410371.180 ops/s
# Warmup Iteration  22: 5244559.786 ops/s
# Warmup Iteration  23: 4900638.689 ops/s
# Warmup Iteration  24: 5460889.501 ops/s
# Warmup Iteration  25: 5513749.999 ops/s
# Warmup Iteration  26: 5536115.183 ops/s
# Warmup Iteration  27: 5548124.651 ops/s
# Warmup Iteration  28: 5761839.231 ops/s
# Warmup Iteration  29: 5504206.346 ops/s
# Warmup Iteration  30: 5768592.435 ops/s
Iteration   1: 5563014.303 ops/s
Iteration   2: 5518294.186 ops/s
Iteration   3: 5671325.609 ops/s
Iteration   4: 5451792.683 ops/s
Iteration   5: 5682767.818 ops/s
Iteration   6: 5565838.610 ops/s
Iteration   7: 5500920.086 ops/s
Iteration   8: 5877381.959 ops/s
Iteration   9: 5431225.590 ops/s
Iteration  10: 5720157.791 ops/s
Iteration  11: 5515174.587 ops/s
Iteration  12: 5541035.314 ops/s
Iteration  13: 5778484.690 ops/s
Iteration  14: 5457256.492 ops/s
Iteration  15: 5459158.991 ops/s
Iteration  16: 5778233.639 ops/s
Iteration  17: 5465248.195 ops/s
Iteration  18: 5719344.012 ops/s
Iteration  19: 5705486.692 ops/s
Iteration  20: 5453441.942 ops/s
Iteration  21: 5829753.831 ops/s
Iteration  22: 5525653.181 ops/s
Iteration  23: 5623527.585 ops/s
Iteration  24: 5480094.653 ops/s
Iteration  25: 5661283.664 ops/s
Iteration  26: 5932941.331 ops/s
Iteration  27: 5396314.112 ops/s
Iteration  28: 5709715.384 ops/s
Iteration  29: 5507435.925 ops/s
Iteration  30: 5682291.313 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterableTest._Benchmark.benchmark_cancelAfterNext":
  5606819.806 ±(99.9%) 96709.872 ops/s [Average]
  (min, avg, max) = (5396314.112, 5606819.806, 5932941.331), stdev = 144750.794
  CI (99.9%): [5510109.934, 5703529.677] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
CompletableMergeIterableTest._Benchmark.benchmark_cancelAfterNext  thrpt   30  5606819.806 ± 96709.872  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2262892.399 ops/s
# Warmup Iteration   2: 4472969.920 ops/s
# Warmup Iteration   3: 5193497.043 ops/s
# Warmup Iteration   4: 6185106.982 ops/s
# Warmup Iteration   5: 6648311.309 ops/s
# Warmup Iteration   6: 6202905.695 ops/s
# Warmup Iteration   7: 6526475.017 ops/s
# Warmup Iteration   8: 6773051.098 ops/s
# Warmup Iteration   9: 6242100.990 ops/s
# Warmup Iteration  10: 6431454.033 ops/s
# Warmup Iteration  11: 6550628.528 ops/s
# Warmup Iteration  12: 6326426.913 ops/s
# Warmup Iteration  13: 6735718.976 ops/s
# Warmup Iteration  14: 6240441.109 ops/s
# Warmup Iteration  15: 6582084.974 ops/s
# Warmup Iteration  16: 6599322.079 ops/s
# Warmup Iteration  17: 6256016.122 ops/s
# Warmup Iteration  18: 6731805.485 ops/s
# Warmup Iteration  19: 6395858.670 ops/s
# Warmup Iteration  20: 6540671.989 ops/s
# Warmup Iteration  21: 6554358.248 ops/s
# Warmup Iteration  22: 6325054.023 ops/s
# Warmup Iteration  23: 6625573.380 ops/s
# Warmup Iteration  24: 6182083.157 ops/s
# Warmup Iteration  25: 6458149.802 ops/s
# Warmup Iteration  26: 6757689.665 ops/s
# Warmup Iteration  27: 6339379.278 ops/s
# Warmup Iteration  28: 6333447.783 ops/s
# Warmup Iteration  29: 6636470.520 ops/s
# Warmup Iteration  30: 6507888.874 ops/s
Iteration   1: 6383375.215 ops/s
Iteration   2: 6671447.741 ops/s
Iteration   3: 6393527.119 ops/s
Iteration   4: 6480687.579 ops/s
Iteration   5: 6419612.264 ops/s
Iteration   6: 6353514.609 ops/s
Iteration   7: 6711617.409 ops/s
Iteration   8: 6608495.635 ops/s
Iteration   9: 6386236.481 ops/s
Iteration  10: 6661963.606 ops/s
Iteration  11: 6511845.682 ops/s
Iteration  12: 6634064.089 ops/s
Iteration  13: 6468153.797 ops/s
Iteration  14: 6327944.798 ops/s
Iteration  15: 6406118.081 ops/s
Iteration  16: 6519409.644 ops/s
Iteration  17: 6346585.306 ops/s
Iteration  18: 6621573.465 ops/s
Iteration  19: 6347606.193 ops/s
Iteration  20: 6602135.255 ops/s
Iteration  21: 6497743.847 ops/s
Iteration  22: 6481217.762 ops/s
Iteration  23: 6561167.492 ops/s
Iteration  24: 6290512.695 ops/s
Iteration  25: 6701763.072 ops/s
Iteration  26: 6271360.502 ops/s
Iteration  27: 6553270.055 ops/s
Iteration  28: 6452427.060 ops/s
Iteration  29: 6432181.320 ops/s
Iteration  30: 6662706.110 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_dispose":
  6492008.796 ±(99.9%) 86265.384 ops/s [Average]
  (min, avg, max) = (6271360.502, 6492008.796, 6711617.409), stdev = 129117.976
  CI (99.9%): [6405743.412, 6578274.180] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ScheduledRunnableTest._Benchmark.benchmark_dispose  thrpt   30  6492008.796 ± 86265.384  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedEmptyOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedEmptyOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 13849.866 ops/s
# Warmup Iteration   2: 71684.878 ops/s
# Warmup Iteration   3: 96929.360 ops/s
# Warmup Iteration   4: 137787.045 ops/s
# Warmup Iteration   5: 126855.355 ops/s
# Warmup Iteration   6: 143928.448 ops/s
# Warmup Iteration   7: 130272.128 ops/s
# Warmup Iteration   8: 144001.085 ops/s
# Warmup Iteration   9: 132816.295 ops/s
# Warmup Iteration  10: 135900.442 ops/s
# Warmup Iteration  11: 156455.826 ops/s
# Warmup Iteration  12: 135318.300 ops/s
# Warmup Iteration  13: 127737.524 ops/s
# Warmup Iteration  14: 137951.867 ops/s
# Warmup Iteration  15: 117555.134 ops/s
# Warmup Iteration  16: 133843.535 ops/s
# Warmup Iteration  17: 159416.968 ops/s
# Warmup Iteration  18: 121538.757 ops/s
# Warmup Iteration  19: 128625.493 ops/s
# Warmup Iteration  20: 171023.765 ops/s
# Warmup Iteration  21: 146057.670 ops/s
# Warmup Iteration  22: 126080.566 ops/s
# Warmup Iteration  23: 140866.989 ops/s
# Warmup Iteration  24: 143947.644 ops/s
# Warmup Iteration  25: 114280.935 ops/s
# Warmup Iteration  26: 121247.348 ops/s
# Warmup Iteration  27: 126051.483 ops/s
# Warmup Iteration  28: 119633.929 ops/s
# Warmup Iteration  29: 156822.469 ops/s
# Warmup Iteration  30: 141751.369 ops/s
Iteration   1: 144293.482 ops/s
Iteration   2: 129139.997 ops/s
Iteration   3: 129251.836 ops/s
Iteration   4: 114241.941 ops/s
Iteration   5: 149258.550 ops/s
Iteration   6: 137362.160 ops/s
Iteration   7: 131599.387 ops/s
Iteration   8: 136256.221 ops/s
Iteration   9: 136705.159 ops/s
Iteration  10: 113460.095 ops/s
Iteration  11: 122881.422 ops/s
Iteration  12: 127895.735 ops/s
Iteration  13: 128388.136 ops/s
Iteration  14: 144874.898 ops/s
Iteration  15: 142426.111 ops/s
Iteration  16: 117872.547 ops/s
Iteration  17: 138815.247 ops/s
Iteration  18: 132644.518 ops/s
Iteration  19: 136418.833 ops/s
Iteration  20: 138599.305 ops/s
Iteration  21: 139252.145 ops/s
Iteration  22: 119805.188 ops/s
Iteration  23: 131406.049 ops/s
Iteration  24: 147718.299 ops/s
Iteration  25: 118464.147 ops/s
Iteration  26: 143550.631 ops/s
Iteration  27: 117456.801 ops/s
Iteration  28: 137298.053 ops/s
Iteration  29: 145166.620 ops/s
Iteration  30: 109760.904 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedEmptyOther":
  132075.481 ±(99.9%) 7405.258 ops/s [Average]
  (min, avg, max) = (109760.904, 132075.481, 149258.550), stdev = 11083.843
  CI (99.9%): [124670.222, 139480.739] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableTimeoutTests._Benchmark.benchmark_timedEmptyOther  thrpt   30  132075.481 ± 7405.258  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15687.533 ops/s
# Warmup Iteration   2: 58137.945 ops/s
# Warmup Iteration   3: 106358.497 ops/s
# Warmup Iteration   4: 132425.613 ops/s
# Warmup Iteration   5: 111748.506 ops/s
# Warmup Iteration   6: 136162.597 ops/s
# Warmup Iteration   7: 125344.887 ops/s
# Warmup Iteration   8: 117333.024 ops/s
# Warmup Iteration   9: 111849.407 ops/s
# Warmup Iteration  10: 142955.433 ops/s
# Warmup Iteration  11: 146548.348 ops/s
# Warmup Iteration  12: 146394.990 ops/s
# Warmup Iteration  13: 131759.369 ops/s
# Warmup Iteration  14: 122679.476 ops/s
# Warmup Iteration  15: 127964.213 ops/s
# Warmup Iteration  16: 138645.061 ops/s
# Warmup Iteration  17: 120989.679 ops/s
# Warmup Iteration  18: 135281.818 ops/s
# Warmup Iteration  19: 128769.634 ops/s
# Warmup Iteration  20: 139648.426 ops/s
# Warmup Iteration  21: 143562.458 ops/s
# Warmup Iteration  22: 141597.615 ops/s
# Warmup Iteration  23: 126843.656 ops/s
# Warmup Iteration  24: 123967.724 ops/s
# Warmup Iteration  25: 136996.545 ops/s
# Warmup Iteration  26: 133804.870 ops/s
# Warmup Iteration  27: 123213.955 ops/s
# Warmup Iteration  28: 144417.618 ops/s
# Warmup Iteration  29: 127995.202 ops/s
# Warmup Iteration  30: 134284.574 ops/s
Iteration   1: 131942.650 ops/s
Iteration   2: 160548.024 ops/s
Iteration   3: 152106.924 ops/s
Iteration   4: 141973.999 ops/s
Iteration   5: 127942.109 ops/s
Iteration   6: 128192.983 ops/s
Iteration   7: 138524.323 ops/s
Iteration   8: 144127.223 ops/s
Iteration   9: 138924.065 ops/s
Iteration  10: 122283.973 ops/s
Iteration  11: 135338.323 ops/s
Iteration  12: 122197.043 ops/s
Iteration  13: 156440.452 ops/s
Iteration  14: 158802.647 ops/s
Iteration  15: 117719.983 ops/s
Iteration  16: 133449.347 ops/s
Iteration  17: 146577.347 ops/s
Iteration  18: 142024.579 ops/s
Iteration  19: 120867.887 ops/s
Iteration  20: 118131.536 ops/s
Iteration  21: 133292.987 ops/s
Iteration  22: 138577.242 ops/s
Iteration  23: 128253.233 ops/s
Iteration  24: 145949.993 ops/s
Iteration  25: 122085.618 ops/s
Iteration  26: 127703.790 ops/s
Iteration  27: 125657.490 ops/s
Iteration  28: 135640.971 ops/s
Iteration  29: 142451.861 ops/s
Iteration  30: 147330.670 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_timedEmpty":
  136168.642 ±(99.9%) 8027.603 ops/s [Average]
  (min, avg, max) = (117719.983, 136168.642, 160548.024), stdev = 12015.340
  CI (99.9%): [128141.039, 144196.246] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableTimeoutTests._Benchmark.benchmark_timedEmpty  thrpt   30  136168.642 ± 8027.603  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withParentDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withParentDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6262437.996 ops/s
# Warmup Iteration   2: 11609611.293 ops/s
# Warmup Iteration   3: 10731356.235 ops/s
# Warmup Iteration   4: 14586581.236 ops/s
# Warmup Iteration   5: 14376134.743 ops/s
# Warmup Iteration   6: 15684775.325 ops/s
# Warmup Iteration   7: 15202243.052 ops/s
# Warmup Iteration   8: 10387828.593 ops/s
# Warmup Iteration   9: 15102291.544 ops/s
# Warmup Iteration  10: 14770171.154 ops/s
# Warmup Iteration  11: 14708491.941 ops/s
# Warmup Iteration  12: 15150034.862 ops/s
# Warmup Iteration  13: 15624982.164 ops/s
# Warmup Iteration  14: 14653141.170 ops/s
# Warmup Iteration  15: 14911733.825 ops/s
# Warmup Iteration  16: 14727271.001 ops/s
# Warmup Iteration  17: 14528693.859 ops/s
# Warmup Iteration  18: 15360674.397 ops/s
# Warmup Iteration  19: 15275439.198 ops/s
# Warmup Iteration  20: 14861858.645 ops/s
# Warmup Iteration  21: 15467863.020 ops/s
# Warmup Iteration  22: 14654961.743 ops/s
# Warmup Iteration  23: 14856460.487 ops/s
# Warmup Iteration  24: 14798154.126 ops/s
# Warmup Iteration  25: 15047984.737 ops/s
# Warmup Iteration  26: 14776684.383 ops/s
# Warmup Iteration  27: 15145515.554 ops/s
# Warmup Iteration  28: 15585506.222 ops/s
# Warmup Iteration  29: 14727720.535 ops/s
# Warmup Iteration  30: 15563704.409 ops/s
Iteration   1: 14451916.554 ops/s
Iteration   2: 15206770.744 ops/s
Iteration   3: 14946447.561 ops/s
Iteration   4: 14616336.651 ops/s
Iteration   5: 15379042.402 ops/s
Iteration   6: 14455573.022 ops/s
Iteration   7: 14907107.338 ops/s
Iteration   8: 15003705.282 ops/s
Iteration   9: 14971603.490 ops/s
Iteration  10: 15309825.802 ops/s
Iteration  11: 15233035.363 ops/s
Iteration  12: 14840127.281 ops/s
Iteration  13: 15181200.473 ops/s
Iteration  14: 14387472.157 ops/s
Iteration  15: 14733290.814 ops/s
Iteration  16: 14847613.715 ops/s
Iteration  17: 14946361.242 ops/s
Iteration  18: 15475749.280 ops/s
Iteration  19: 14733401.055 ops/s
Iteration  20: 15162637.387 ops/s
Iteration  21: 15066329.081 ops/s
Iteration  22: 15187839.167 ops/s
Iteration  23: 14483408.513 ops/s
Iteration  24: 14796776.560 ops/s
Iteration  25: 15073329.966 ops/s
Iteration  26: 14270192.040 ops/s
Iteration  27: 15631296.952 ops/s
Iteration  28: 14433090.375 ops/s
Iteration  29: 15313888.612 ops/s
Iteration  30: 15091719.289 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withParentDisposed":
  14937902.939 ±(99.9%) 233583.998 ops/s [Average]
  (min, avg, max) = (14270192.040, 14937902.939, 15631296.952), stdev = 349617.558
  CI (99.9%): [14704318.941, 15171486.937] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ScheduledRunnableTest._Benchmark.benchmark_withParentDisposed  thrpt   30  14937902.939 ± 233583.998  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_badSourceOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_badSourceOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6001.134 ops/s
# Warmup Iteration   2: 12952.336 ops/s
# Warmup Iteration   3: 30101.823 ops/s
# Warmup Iteration   4: 44331.438 ops/s
# Warmup Iteration   5: 47114.075 ops/s
# Warmup Iteration   6: 52890.583 ops/s
# Warmup Iteration   7: 58747.125 ops/s
# Warmup Iteration   8: 50137.822 ops/s
# Warmup Iteration   9: 66626.992 ops/s
# Warmup Iteration  10: 62767.714 ops/s
# Warmup Iteration  11: 50644.480 ops/s
# Warmup Iteration  12: 59706.280 ops/s
# Warmup Iteration  13: 62809.074 ops/s
# Warmup Iteration  14: 60203.316 ops/s
# Warmup Iteration  15: 57229.671 ops/s
# Warmup Iteration  16: 58254.044 ops/s
# Warmup Iteration  17: 62612.348 ops/s
# Warmup Iteration  18: 60580.247 ops/s
# Warmup Iteration  19: 63019.827 ops/s
# Warmup Iteration  20: 60210.741 ops/s
# Warmup Iteration  21: 61067.918 ops/s
# Warmup Iteration  22: 63937.383 ops/s
# Warmup Iteration  23: 59410.634 ops/s
# Warmup Iteration  24: 59403.958 ops/s
# Warmup Iteration  25: 59971.700 ops/s
# Warmup Iteration  26: 65380.883 ops/s
# Warmup Iteration  27: 57077.553 ops/s
# Warmup Iteration  28: 57531.078 ops/s
# Warmup Iteration  29: 62399.366 ops/s
# Warmup Iteration  30: 61672.699 ops/s
Iteration   1: 62959.036 ops/s
Iteration   2: 65153.095 ops/s
Iteration   3: 64200.953 ops/s
Iteration   4: 59679.048 ops/s
Iteration   5: 54782.286 ops/s
Iteration   6: 62462.924 ops/s
Iteration   7: 59428.768 ops/s
Iteration   8: 61221.609 ops/s
Iteration   9: 57923.401 ops/s
Iteration  10: 56153.641 ops/s
Iteration  11: 55207.702 ops/s
Iteration  12: 59961.988 ops/s
Iteration  13: 57626.447 ops/s
Iteration  14: 61391.366 ops/s
Iteration  15: 61099.271 ops/s
Iteration  16: 59862.829 ops/s
Iteration  17: 63416.798 ops/s
Iteration  18: 61342.256 ops/s
Iteration  19: 66944.679 ops/s
Iteration  20: 62113.749 ops/s
Iteration  21: 64783.367 ops/s
Iteration  22: 58991.177 ops/s
Iteration  23: 55383.956 ops/s
Iteration  24: 54487.320 ops/s
Iteration  25: 62746.269 ops/s
Iteration  26: 61268.271 ops/s
Iteration  27: 55432.504 ops/s
Iteration  28: 59437.446 ops/s
Iteration  29: 61702.044 ops/s
Iteration  30: 62341.415 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTests._Benchmark.benchmark_badSourceOther":
  60316.854 ±(99.9%) 2207.202 ops/s [Average]
  (min, avg, max) = (54487.320, 60316.854, 66944.679), stdev = 3303.636
  CI (99.9%): [58109.652, 62524.056] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt      Score      Error  Units
ObservableTimeoutTests._Benchmark.benchmark_badSourceOther  thrpt   30  60316.854 ± 2207.202  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_cancelNoConcurrentClean$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_cancelNoConcurrentClean

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 354836.601 ops/s
# Warmup Iteration   2: 1337725.667 ops/s
# Warmup Iteration   3: 2463685.453 ops/s
# Warmup Iteration   4: 3059536.235 ops/s
# Warmup Iteration   5: 3221403.863 ops/s
# Warmup Iteration   6: 3179568.711 ops/s
# Warmup Iteration   7: 3154712.101 ops/s
# Warmup Iteration   8: 3196883.610 ops/s
# Warmup Iteration   9: 3040240.887 ops/s
# Warmup Iteration  10: 3160309.408 ops/s
# Warmup Iteration  11: 3208496.870 ops/s
# Warmup Iteration  12: 3105874.835 ops/s
# Warmup Iteration  13: 3158459.118 ops/s
# Warmup Iteration  14: 3152327.521 ops/s
# Warmup Iteration  15: 3219459.299 ops/s
# Warmup Iteration  16: 3112202.030 ops/s
# Warmup Iteration  17: 3108144.854 ops/s
# Warmup Iteration  18: 3214618.802 ops/s
# Warmup Iteration  19: 3115357.176 ops/s
# Warmup Iteration  20: 3217960.556 ops/s
# Warmup Iteration  21: 3081997.266 ops/s
# Warmup Iteration  22: 3097263.690 ops/s
# Warmup Iteration  23: 3299584.212 ops/s
# Warmup Iteration  24: 2980859.794 ops/s
# Warmup Iteration  25: 3143995.685 ops/s
# Warmup Iteration  26: 3059163.177 ops/s
# Warmup Iteration  27: 3226266.545 ops/s
# Warmup Iteration  28: 3208585.221 ops/s
# Warmup Iteration  29: 3063823.169 ops/s
# Warmup Iteration  30: 3113691.336 ops/s
Iteration   1: 3160481.800 ops/s
Iteration   2: 3157126.594 ops/s
Iteration   3: 3140001.714 ops/s
Iteration   4: 3191067.967 ops/s
Iteration   5: 3256637.749 ops/s
Iteration   6: 3098614.576 ops/s
Iteration   7: 3188648.848 ops/s
Iteration   8: 3033754.487 ops/s
Iteration   9: 3193056.229 ops/s
Iteration  10: 3236108.197 ops/s
Iteration  11: 3091052.838 ops/s
Iteration  12: 3184197.041 ops/s
Iteration  13: 3099780.037 ops/s
Iteration  14: 3139576.301 ops/s
Iteration  15: 3147664.354 ops/s
Iteration  16: 3115860.941 ops/s
Iteration  17: 3097541.463 ops/s
Iteration  18: 3128829.637 ops/s
Iteration  19: 3259349.812 ops/s
Iteration  20: 3223510.689 ops/s
Iteration  21: 3077268.658 ops/s
Iteration  22: 3292043.442 ops/s
Iteration  23: 3095773.210 ops/s
Iteration  24: 3179420.857 ops/s
Iteration  25: 2973535.471 ops/s
Iteration  26: 3228867.533 ops/s
Iteration  27: 3258571.684 ops/s
Iteration  28: 3112984.783 ops/s
Iteration  29: 3052657.264 ops/s
Iteration  30: 3169635.254 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_cancelNoConcurrentClean":
  3152787.314 ±(99.9%) 49417.895 ops/s [Average]
  (min, avg, max) = (2973535.471, 3152787.314, 3292043.442), stdev = 73966.385
  CI (99.9%): [3103369.419, 3202205.209] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_cancelNoConcurrentClean  thrpt   30  3152787.314 ± 49417.895  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_openCloseTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_openCloseTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.739 ops/s
# Warmup Iteration   2: 22098.333 ops/s
# Warmup Iteration   3: 78942.521 ops/s
# Warmup Iteration   4: 89388.076 ops/s
# Warmup Iteration   5: 88979.711 ops/s
# Warmup Iteration   6: 107261.328 ops/s
# Warmup Iteration   7: 109151.427 ops/s
# Warmup Iteration   8: 192146.567 ops/s
# Warmup Iteration   9: 171160.181 ops/s
# Warmup Iteration  10: 217721.274 ops/s
# Warmup Iteration  11: 216701.872 ops/s
# Warmup Iteration  12: 447175.639 ops/s
# Warmup Iteration  13: 416674.776 ops/s
# Warmup Iteration  14: 451522.821 ops/s
# Warmup Iteration  15: 452143.719 ops/s
# Warmup Iteration  16: 465516.636 ops/s
# Warmup Iteration  17: 446038.225 ops/s
# Warmup Iteration  18: 459634.034 ops/s
# Warmup Iteration  19: 460092.980 ops/s
# Warmup Iteration  20: 440279.910 ops/s
# Warmup Iteration  21: 463945.612 ops/s
# Warmup Iteration  22: 451235.402 ops/s
# Warmup Iteration  23: 457424.900 ops/s
# Warmup Iteration  24: 437334.956 ops/s
# Warmup Iteration  25: 464545.351 ops/s
# Warmup Iteration  26: 457255.174 ops/s
# Warmup Iteration  27: 454555.565 ops/s
# Warmup Iteration  28: 465363.791 ops/s
# Warmup Iteration  29: 450898.340 ops/s
# Warmup Iteration  30: 468668.807 ops/s
Iteration   1: 442172.794 ops/s
Iteration   2: 443180.576 ops/s
Iteration   3: 460413.590 ops/s
Iteration   4: 444861.280 ops/s
Iteration   5: 457746.568 ops/s
Iteration   6: 456207.031 ops/s
Iteration   7: 451921.918 ops/s
Iteration   8: 460927.487 ops/s
Iteration   9: 450716.851 ops/s
Iteration  10: 467025.839 ops/s
Iteration  11: 446512.831 ops/s
Iteration  12: 453090.587 ops/s
Iteration  13: 448560.217 ops/s
Iteration  14: 444495.346 ops/s
Iteration  15: 458109.563 ops/s
Iteration  16: 444113.997 ops/s
Iteration  17: 447716.857 ops/s
Iteration  18: 469966.372 ops/s
Iteration  19: 447189.793 ops/s
Iteration  20: 467685.004 ops/s
Iteration  21: 472309.145 ops/s
Iteration  22: 452923.219 ops/s
Iteration  23: 462067.983 ops/s
Iteration  24: 463864.272 ops/s
Iteration  25: 449962.336 ops/s
Iteration  26: 472745.378 ops/s
Iteration  27: 350929.565 ops/s
Iteration  28: 459959.662 ops/s
Iteration  29: 455919.554 ops/s
Iteration  30: 465109.287 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_openCloseTake":
  452280.163 ±(99.9%) 14154.682 ops/s [Average]
  (min, avg, max) = (350929.565, 452280.163, 472745.378), stdev = 21186.063
  CI (99.9%): [438125.482, 466434.845] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
ObservableBufferTest._Benchmark.benchmark_openCloseTake  thrpt   30  452280.163 ± 14154.682  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33657.777 ops/s
# Warmup Iteration   2: 194535.888 ops/s
# Warmup Iteration   3: 401541.771 ops/s
# Warmup Iteration   4: 387005.864 ops/s
# Warmup Iteration   5: 437538.387 ops/s
# Warmup Iteration   6: 421568.537 ops/s
# Warmup Iteration   7: 439830.925 ops/s
# Warmup Iteration   8: 439519.152 ops/s
# Warmup Iteration   9: 432719.340 ops/s
# Warmup Iteration  10: 424407.164 ops/s
# Warmup Iteration  11: 418190.309 ops/s
# Warmup Iteration  12: 438708.423 ops/s
# Warmup Iteration  13: 441814.847 ops/s
# Warmup Iteration  14: 424702.441 ops/s
# Warmup Iteration  15: 428798.272 ops/s
# Warmup Iteration  16: 450426.389 ops/s
# Warmup Iteration  17: 432641.011 ops/s
# Warmup Iteration  18: 443621.420 ops/s
# Warmup Iteration  19: 434649.225 ops/s
# Warmup Iteration  20: 444423.731 ops/s
# Warmup Iteration  21: 460201.107 ops/s
# Warmup Iteration  22: 438756.544 ops/s
# Warmup Iteration  23: 443593.357 ops/s
# Warmup Iteration  24: 442286.098 ops/s
# Warmup Iteration  25: 451608.280 ops/s
# Warmup Iteration  26: 457012.745 ops/s
# Warmup Iteration  27: 433196.600 ops/s
# Warmup Iteration  28: 448598.657 ops/s
# Warmup Iteration  29: 439571.731 ops/s
# Warmup Iteration  30: 461022.395 ops/s
Iteration   1: 441949.817 ops/s
Iteration   2: 444358.434 ops/s
Iteration   3: 459361.679 ops/s
Iteration   4: 436031.974 ops/s
Iteration   5: 439391.682 ops/s
Iteration   6: 454784.194 ops/s
Iteration   7: 440742.106 ops/s
Iteration   8: 457274.951 ops/s
Iteration   9: 439332.313 ops/s
Iteration  10: 453642.513 ops/s
Iteration  11: 453087.983 ops/s
Iteration  12: 433399.003 ops/s
Iteration  13: 451735.204 ops/s
Iteration  14: 441146.246 ops/s
Iteration  15: 433635.426 ops/s
Iteration  16: 450005.741 ops/s
Iteration  17: 435598.604 ops/s
Iteration  18: 445358.522 ops/s
Iteration  19: 459143.607 ops/s
Iteration  20: 442990.912 ops/s
Iteration  21: 456193.571 ops/s
Iteration  22: 442220.896 ops/s
Iteration  23: 469612.815 ops/s
Iteration  24: 428578.780 ops/s
Iteration  25: 439156.033 ops/s
Iteration  26: 462947.798 ops/s
Iteration  27: 432038.824 ops/s
Iteration  28: 438567.406 ops/s
Iteration  29: 435638.487 ops/s
Iteration  30: 430279.058 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_doubleOnSubscribe":
  444940.153 ±(99.9%) 7110.333 ops/s [Average]
  (min, avg, max) = (428578.780, 444940.153, 469612.815), stdev = 10642.413
  CI (99.9%): [437829.819, 452050.486] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableObserveOnTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  444940.153 ± 7110.333  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_boundaryOpenCloseDisposedOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_boundaryOpenCloseDisposedOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.706 ops/s
# Warmup Iteration   2: 24007.089 ops/s
# Warmup Iteration   3: 81633.511 ops/s
# Warmup Iteration   4: 108050.456 ops/s
# Warmup Iteration   5: 225189.635 ops/s
# Warmup Iteration   6: 213123.911 ops/s
# Warmup Iteration   7: 209893.179 ops/s
# Warmup Iteration   8: 418060.193 ops/s
# Warmup Iteration   9: 484227.306 ops/s
# Warmup Iteration  10: 492267.975 ops/s
# Warmup Iteration  11: 491352.447 ops/s
# Warmup Iteration  12: 432033.941 ops/s
# Warmup Iteration  13: 482015.837 ops/s
# Warmup Iteration  14: 484641.119 ops/s
# Warmup Iteration  15: 486169.406 ops/s
# Warmup Iteration  16: 533411.317 ops/s
# Warmup Iteration  17: 533143.836 ops/s
# Warmup Iteration  18: 481304.177 ops/s
# Warmup Iteration  19: 491427.195 ops/s
# Warmup Iteration  20: 482390.816 ops/s
# Warmup Iteration  21: 493702.076 ops/s
# Warmup Iteration  22: 496737.199 ops/s
# Warmup Iteration  23: 482324.890 ops/s
# Warmup Iteration  24: 492161.747 ops/s
# Warmup Iteration  25: 482003.840 ops/s
# Warmup Iteration  26: 484457.743 ops/s
# Warmup Iteration  27: 503680.619 ops/s
# Warmup Iteration  28: 485161.168 ops/s
# Warmup Iteration  29: 495653.711 ops/s
# Warmup Iteration  30: 498031.226 ops/s
Iteration   1: 495991.706 ops/s
Iteration   2: 478060.844 ops/s
Iteration   3: 509239.494 ops/s
Iteration   4: 473510.389 ops/s
Iteration   5: 503888.825 ops/s
Iteration   6: 469716.208 ops/s
Iteration   7: 480103.234 ops/s
Iteration   8: 495064.187 ops/s
Iteration   9: 480441.094 ops/s
Iteration  10: 497422.437 ops/s
Iteration  11: 485263.519 ops/s
Iteration  12: 484346.530 ops/s
Iteration  13: 492819.538 ops/s
Iteration  14: 489927.166 ops/s
Iteration  15: 486020.579 ops/s
Iteration  16: 497800.249 ops/s
Iteration  17: 486234.152 ops/s
Iteration  18: 504081.038 ops/s
Iteration  19: 475165.428 ops/s
Iteration  20: 491193.267 ops/s
Iteration  21: 397830.412 ops/s
Iteration  22: 475553.024 ops/s
Iteration  23: 493272.232 ops/s
Iteration  24: 472547.588 ops/s
Iteration  25: 490602.471 ops/s
Iteration  26: 474770.946 ops/s
Iteration  27: 481321.691 ops/s
Iteration  28: 488893.636 ops/s
Iteration  29: 476286.721 ops/s
Iteration  30: 498746.149 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_boundaryOpenCloseDisposedOnComplete":
  484203.825 ±(99.9%) 12924.632 ops/s [Average]
  (min, avg, max) = (397830.412, 484203.825, 509239.494), stdev = 19344.981
  CI (99.9%): [471279.194, 497128.457] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
ObservableBufferTest._Benchmark.benchmark_boundaryOpenCloseDisposedOnComplete  thrpt   30  484203.825 ± 12924.632  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_abandonedGroupDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_abandonedGroupDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31323.860 ops/s
# Warmup Iteration   2: 255412.605 ops/s
# Warmup Iteration   3: 428307.490 ops/s
# Warmup Iteration   4: 1122376.326 ops/s
# Warmup Iteration   5: 1074908.286 ops/s
# Warmup Iteration   6: 1180026.847 ops/s
# Warmup Iteration   7: 1151760.719 ops/s
# Warmup Iteration   8: 1141890.848 ops/s
# Warmup Iteration   9: 1141182.477 ops/s
# Warmup Iteration  10: 1040225.952 ops/s
# Warmup Iteration  11: 1007573.318 ops/s
# Warmup Iteration  12: 1239489.174 ops/s
# Warmup Iteration  13: 1138140.432 ops/s
# Warmup Iteration  14: 1166744.366 ops/s
# Warmup Iteration  15: 1139913.640 ops/s
# Warmup Iteration  16: 1176783.137 ops/s
# Warmup Iteration  17: 1209924.755 ops/s
# Warmup Iteration  18: 1158854.242 ops/s
# Warmup Iteration  19: 1172143.175 ops/s
# Warmup Iteration  20: 1166814.977 ops/s
# Warmup Iteration  21: 1147999.438 ops/s
# Warmup Iteration  22: 1184675.033 ops/s
# Warmup Iteration  23: 1155627.321 ops/s
# Warmup Iteration  24: 1160441.497 ops/s
# Warmup Iteration  25: 1173451.480 ops/s
# Warmup Iteration  26: 1208980.152 ops/s
# Warmup Iteration  27: 1129969.131 ops/s
# Warmup Iteration  28: 1184079.153 ops/s
# Warmup Iteration  29: 1135418.234 ops/s
# Warmup Iteration  30: 1193322.418 ops/s
Iteration   1: 1164067.353 ops/s
Iteration   2: 1184740.955 ops/s
Iteration   3: 1159307.872 ops/s
Iteration   4: 1184468.620 ops/s
Iteration   5: 1164643.944 ops/s
Iteration   6: 1116721.243 ops/s
Iteration   7: 1157279.627 ops/s
Iteration   8: 1199506.442 ops/s
Iteration   9: 1117400.725 ops/s
Iteration  10: 1173742.690 ops/s
Iteration  11: 1139884.524 ops/s
Iteration  12: 1209922.116 ops/s
Iteration  13: 1150662.945 ops/s
Iteration  14: 1188057.675 ops/s
Iteration  15: 1165624.922 ops/s
Iteration  16: 1136110.706 ops/s
Iteration  17: 1159944.021 ops/s
Iteration  18: 1192990.470 ops/s
Iteration  19: 1121866.387 ops/s
Iteration  20: 1151628.760 ops/s
Iteration  21: 1137582.653 ops/s
Iteration  22: 1145176.064 ops/s
Iteration  23: 1175348.347 ops/s
Iteration  24: 1151958.847 ops/s
Iteration  25: 1215488.731 ops/s
Iteration  26: 1211880.556 ops/s
Iteration  27: 1109096.194 ops/s
Iteration  28: 1184340.635 ops/s
Iteration  29: 1141949.961 ops/s
Iteration  30: 1196411.124 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_abandonedGroupDispose":
  1163593.504 ±(99.9%) 19585.594 ops/s [Average]
  (min, avg, max) = (1109096.194, 1163593.504, 1215488.731), stdev = 29314.797
  CI (99.9%): [1144007.910, 1183179.098] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableGroupByTest._Benchmark.benchmark_abandonedGroupDispose  thrpt   30  1163593.504 ± 19585.594  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_fusedPollCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_fusedPollCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54039.509 ops/s
# Warmup Iteration   2: 230433.107 ops/s
# Warmup Iteration   3: 466742.598 ops/s
# Warmup Iteration   4: 528257.682 ops/s
# Warmup Iteration   5: 500779.826 ops/s
# Warmup Iteration   6: 514133.409 ops/s
# Warmup Iteration   7: 519399.181 ops/s
# Warmup Iteration   8: 502988.231 ops/s
# Warmup Iteration   9: 512199.989 ops/s
# Warmup Iteration  10: 500644.983 ops/s
# Warmup Iteration  11: 504718.433 ops/s
# Warmup Iteration  12: 514497.360 ops/s
# Warmup Iteration  13: 534431.223 ops/s
# Warmup Iteration  14: 493818.323 ops/s
# Warmup Iteration  15: 497837.603 ops/s
# Warmup Iteration  16: 537137.330 ops/s
# Warmup Iteration  17: 556841.673 ops/s
# Warmup Iteration  18: 547235.063 ops/s
# Warmup Iteration  19: 517016.902 ops/s
# Warmup Iteration  20: 546835.617 ops/s
# Warmup Iteration  21: 517841.792 ops/s
# Warmup Iteration  22: 548192.514 ops/s
# Warmup Iteration  23: 511478.860 ops/s
# Warmup Iteration  24: 543382.653 ops/s
# Warmup Iteration  25: 548550.694 ops/s
# Warmup Iteration  26: 532294.479 ops/s
# Warmup Iteration  27: 535532.165 ops/s
# Warmup Iteration  28: 524237.466 ops/s
# Warmup Iteration  29: 535551.101 ops/s
# Warmup Iteration  30: 547458.467 ops/s
Iteration   1: 529562.514 ops/s
Iteration   2: 539262.173 ops/s
Iteration   3: 512460.793 ops/s
Iteration   4: 523575.407 ops/s
Iteration   5: 541266.243 ops/s
Iteration   6: 536163.115 ops/s
Iteration   7: 538216.397 ops/s
Iteration   8: 549056.105 ops/s
Iteration   9: 527859.636 ops/s
Iteration  10: 545852.256 ops/s
Iteration  11: 517471.208 ops/s
Iteration  12: 545495.864 ops/s
Iteration  13: 526435.076 ops/s
Iteration  14: 535249.923 ops/s
Iteration  15: 450468.910 ops/s
Iteration  16: 529075.675 ops/s
Iteration  17: 545835.009 ops/s
Iteration  18: 548730.373 ops/s
Iteration  19: 529203.072 ops/s
Iteration  20: 543576.355 ops/s
Iteration  21: 522602.460 ops/s
Iteration  22: 546378.575 ops/s
Iteration  23: 525526.066 ops/s
Iteration  24: 534525.227 ops/s
Iteration  25: 523996.591 ops/s
Iteration  26: 538781.652 ops/s
Iteration  27: 554880.852 ops/s
Iteration  28: 515914.483 ops/s
Iteration  29: 531712.907 ops/s
Iteration  30: 560780.238 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_fusedPollCrash":
  532330.505 ±(99.9%) 12963.361 ops/s [Average]
  (min, avg, max) = (450468.910, 532330.505, 560780.238), stdev = 19402.950
  CI (99.9%): [519367.144, 545293.866] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_fusedPollCrash  thrpt   30  532330.505 ± 12963.361  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundaryConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundaryConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 80051.338 ops/s
# Warmup Iteration   2: 362797.955 ops/s
# Warmup Iteration   3: 1304482.927 ops/s
# Warmup Iteration   4: 1393295.733 ops/s
# Warmup Iteration   5: 1648050.974 ops/s
# Warmup Iteration   6: 1585119.806 ops/s
# Warmup Iteration   7: 1605142.677 ops/s
# Warmup Iteration   8: 1632747.126 ops/s
# Warmup Iteration   9: 1596231.255 ops/s
# Warmup Iteration  10: 1681026.441 ops/s
# Warmup Iteration  11: 1549994.218 ops/s
# Warmup Iteration  12: 1650658.170 ops/s
# Warmup Iteration  13: 1562469.774 ops/s
# Warmup Iteration  14: 1569577.611 ops/s
# Warmup Iteration  15: 1657778.013 ops/s
# Warmup Iteration  16: 1573706.120 ops/s
# Warmup Iteration  17: 1654319.876 ops/s
# Warmup Iteration  18: 1636499.760 ops/s
# Warmup Iteration  19: 1624766.507 ops/s
# Warmup Iteration  20: 1671229.409 ops/s
# Warmup Iteration  21: 1602369.487 ops/s
# Warmup Iteration  22: 1585284.862 ops/s
# Warmup Iteration  23: 1678906.594 ops/s
# Warmup Iteration  24: 1640538.226 ops/s
# Warmup Iteration  25: 1607709.287 ops/s
# Warmup Iteration  26: 1669417.329 ops/s
# Warmup Iteration  27: 1579924.647 ops/s
# Warmup Iteration  28: 1626023.221 ops/s
# Warmup Iteration  29: 1666279.696 ops/s
# Warmup Iteration  30: 1593857.682 ops/s
Iteration   1: 1680127.716 ops/s
Iteration   2: 1636850.455 ops/s
Iteration   3: 1658518.344 ops/s
Iteration   4: 1614750.911 ops/s
Iteration   5: 1581470.793 ops/s
Iteration   6: 1619498.473 ops/s
Iteration   7: 1576907.003 ops/s
Iteration   8: 1612401.086 ops/s
Iteration   9: 1635253.650 ops/s
Iteration  10: 1589095.619 ops/s
Iteration  11: 1653809.971 ops/s
Iteration  12: 1540760.552 ops/s
Iteration  13: 1680491.527 ops/s
Iteration  14: 1635065.034 ops/s
Iteration  15: 1607095.619 ops/s
Iteration  16: 1567189.593 ops/s
Iteration  17: 1709316.257 ops/s
Iteration  18: 1615490.594 ops/s
Iteration  19: 1667079.468 ops/s
Iteration  20: 1670840.535 ops/s
Iteration  21: 1621203.182 ops/s
Iteration  22: 1703402.521 ops/s
Iteration  23: 1585878.773 ops/s
Iteration  24: 1654041.041 ops/s
Iteration  25: 1610087.394 ops/s
Iteration  26: 1635106.959 ops/s
Iteration  27: 1656099.644 ops/s
Iteration  28: 1593786.612 ops/s
Iteration  29: 1655484.499 ops/s
Iteration  30: 1572166.549 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundaryConditional":
  1627975.679 ±(99.9%) 27824.009 ops/s [Average]
  (min, avg, max) = (1540760.552, 1627975.679, 1709316.257), stdev = 41645.670
  CI (99.9%): [1600151.670, 1655799.688] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_asyncFusedBoundaryConditional  thrpt   30  1627975.679 ± 27824.009  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupByShouldPropagateError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupByShouldPropagateError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 17980.416 ops/s
# Warmup Iteration   2: 67600.455 ops/s
# Warmup Iteration   3: 92497.428 ops/s
# Warmup Iteration   4: 99335.077 ops/s
# Warmup Iteration   5: 242407.177 ops/s
# Warmup Iteration   6: 295721.171 ops/s
# Warmup Iteration   7: 315316.006 ops/s
# Warmup Iteration   8: 298975.265 ops/s
# Warmup Iteration   9: 334134.112 ops/s
# Warmup Iteration  10: 327367.616 ops/s
# Warmup Iteration  11: 327254.707 ops/s
# Warmup Iteration  12: 339896.492 ops/s
# Warmup Iteration  13: 323115.968 ops/s
# Warmup Iteration  14: 327308.538 ops/s
# Warmup Iteration  15: 320681.270 ops/s
# Warmup Iteration  16: 339705.384 ops/s
# Warmup Iteration  17: 332307.014 ops/s
# Warmup Iteration  18: 343111.202 ops/s
# Warmup Iteration  19: 328671.342 ops/s
# Warmup Iteration  20: 334464.121 ops/s
# Warmup Iteration  21: 341718.261 ops/s
# Warmup Iteration  22: 347202.397 ops/s
# Warmup Iteration  23: 337876.135 ops/s
# Warmup Iteration  24: 340181.354 ops/s
# Warmup Iteration  25: 330504.876 ops/s
# Warmup Iteration  26: 341847.950 ops/s
# Warmup Iteration  27: 346572.393 ops/s
# Warmup Iteration  28: 326122.850 ops/s
# Warmup Iteration  29: 328380.074 ops/s
# Warmup Iteration  30: 343273.470 ops/s
Iteration   1: 328367.298 ops/s
Iteration   2: 343821.165 ops/s
Iteration   3: 323122.059 ops/s
Iteration   4: 346353.940 ops/s
Iteration   5: 331164.600 ops/s
Iteration   6: 319050.808 ops/s
Iteration   7: 348677.374 ops/s
Iteration   8: 336368.912 ops/s
Iteration   9: 262292.567 ops/s
Iteration  10: 351497.650 ops/s
Iteration  11: 329867.585 ops/s
Iteration  12: 350671.559 ops/s
Iteration  13: 330097.042 ops/s
Iteration  14: 342148.149 ops/s
Iteration  15: 343074.066 ops/s
Iteration  16: 324427.377 ops/s
Iteration  17: 344475.063 ops/s
Iteration  18: 336420.015 ops/s
Iteration  19: 340624.037 ops/s
Iteration  20: 342826.828 ops/s
Iteration  21: 331810.275 ops/s
Iteration  22: 340730.802 ops/s
Iteration  23: 335869.420 ops/s
Iteration  24: 346669.668 ops/s
Iteration  25: 330013.381 ops/s
Iteration  26: 337223.536 ops/s
Iteration  27: 335396.191 ops/s
Iteration  28: 335459.261 ops/s
Iteration  29: 347590.871 ops/s
Iteration  30: 328319.510 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupByShouldPropagateError":
  334814.367 ±(99.9%) 10765.395 ops/s [Average]
  (min, avg, max) = (262292.567, 334814.367, 351497.650), stdev = 16113.137
  CI (99.9%): [324048.972, 345579.762] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableGroupByTest._Benchmark.benchmark_groupByShouldPropagateError  thrpt   30  334814.367 ± 10765.395  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 450212.891 ops/s
# Warmup Iteration   2: 568208.808 ops/s
# Warmup Iteration   3: 614114.750 ops/s
# Warmup Iteration   4: 559037.921 ops/s
# Warmup Iteration   5: 623912.124 ops/s
# Warmup Iteration   6: 640227.330 ops/s
# Warmup Iteration   7: 631091.885 ops/s
# Warmup Iteration   8: 664592.706 ops/s
# Warmup Iteration   9: 658781.478 ops/s
# Warmup Iteration  10: 617315.778 ops/s
# Warmup Iteration  11: 653793.126 ops/s
# Warmup Iteration  12: 639280.042 ops/s
# Warmup Iteration  13: 637110.735 ops/s
# Warmup Iteration  14: 641325.656 ops/s
# Warmup Iteration  15: 629632.116 ops/s
# Warmup Iteration  16: 640779.720 ops/s
# Warmup Iteration  17: 663728.117 ops/s
# Warmup Iteration  18: 664178.979 ops/s
# Warmup Iteration  19: 689971.042 ops/s
# Warmup Iteration  20: 654990.352 ops/s
# Warmup Iteration  21: 677203.036 ops/s
# Warmup Iteration  22: 666144.461 ops/s
# Warmup Iteration  23: 666909.362 ops/s
# Warmup Iteration  24: 675544.619 ops/s
# Warmup Iteration  25: 660238.017 ops/s
# Warmup Iteration  26: 699925.633 ops/s
# Warmup Iteration  27: 657083.823 ops/s
# Warmup Iteration  28: 680893.478 ops/s
# Warmup Iteration  29: 680200.342 ops/s
# Warmup Iteration  30: 667095.080 ops/s
Iteration   1: 674526.817 ops/s
Iteration   2: 662297.135 ops/s
Iteration   3: 687328.149 ops/s
Iteration   4: 645241.587 ops/s
Iteration   5: 677512.864 ops/s
Iteration   6: 691331.489 ops/s
Iteration   7: 653082.653 ops/s
Iteration   8: 686480.182 ops/s
Iteration   9: 662139.938 ops/s
Iteration  10: 682506.857 ops/s
Iteration  11: 646209.354 ops/s
Iteration  12: 663771.032 ops/s
Iteration  13: 676990.404 ops/s
Iteration  14: 645480.295 ops/s
Iteration  15: 660436.908 ops/s
Iteration  16: 663420.365 ops/s
Iteration  17: 663147.047 ops/s
Iteration  18: 688222.258 ops/s
Iteration  19: 664658.907 ops/s
Iteration  20: 685830.196 ops/s
Iteration  21: 662163.750 ops/s
Iteration  22: 668407.607 ops/s
Iteration  23: 684016.805 ops/s
Iteration  24: 670701.355 ops/s
Iteration  25: 661818.113 ops/s
Iteration  26: 706861.873 ops/s
Iteration  27: 649919.013 ops/s
Iteration  28: 668835.322 ops/s
Iteration  29: 664082.635 ops/s
Iteration  30: 684698.824 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_remove":
  670070.658 ±(99.9%) 10132.788 ops/s [Average]
  (min, avg, max) = (645241.587, 670070.658, 706861.873), stdev = 15166.282
  CI (99.9%): [659937.869, 680203.446] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
BlockingObservableToIteratorTest._Benchmark.benchmark_remove  thrpt   30  670070.658 ± 10132.788  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_asyncFusedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_asyncFusedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118355.283 ops/s
# Warmup Iteration   2: 655735.146 ops/s
# Warmup Iteration   3: 1342317.079 ops/s
# Warmup Iteration   4: 1703275.997 ops/s
# Warmup Iteration   5: 1755064.446 ops/s
# Warmup Iteration   6: 1717193.876 ops/s
# Warmup Iteration   7: 1663421.367 ops/s
# Warmup Iteration   8: 1758242.561 ops/s
# Warmup Iteration   9: 1670493.406 ops/s
# Warmup Iteration  10: 1756030.058 ops/s
# Warmup Iteration  11: 1696587.525 ops/s
# Warmup Iteration  12: 1693014.669 ops/s
# Warmup Iteration  13: 1764776.010 ops/s
# Warmup Iteration  14: 1693549.968 ops/s
# Warmup Iteration  15: 1701392.206 ops/s
# Warmup Iteration  16: 1744929.485 ops/s
# Warmup Iteration  17: 1781234.635 ops/s
# Warmup Iteration  18: 1697998.864 ops/s
# Warmup Iteration  19: 1752133.854 ops/s
# Warmup Iteration  20: 1693554.455 ops/s
# Warmup Iteration  21: 1715239.760 ops/s
# Warmup Iteration  22: 1710678.166 ops/s
# Warmup Iteration  23: 1729299.099 ops/s
# Warmup Iteration  24: 1733630.702 ops/s
# Warmup Iteration  25: 1751360.344 ops/s
# Warmup Iteration  26: 1679097.171 ops/s
# Warmup Iteration  27: 1729844.420 ops/s
# Warmup Iteration  28: 1681160.450 ops/s
# Warmup Iteration  29: 1733662.553 ops/s
# Warmup Iteration  30: 1717538.303 ops/s
Iteration   1: 1717618.171 ops/s
Iteration   2: 1766323.327 ops/s
Iteration   3: 1542324.742 ops/s
Iteration   4: 1501995.540 ops/s
Iteration   5: 1752164.370 ops/s
Iteration   6: 1703541.951 ops/s
Iteration   7: 1731955.565 ops/s
Iteration   8: 1655355.671 ops/s
Iteration   9: 1779322.952 ops/s
Iteration  10: 1715586.004 ops/s
Iteration  11: 1718505.120 ops/s
Iteration  12: 1798647.943 ops/s
Iteration  13: 1719380.116 ops/s
Iteration  14: 1641541.703 ops/s
Iteration  15: 1739250.245 ops/s
Iteration  16: 1670744.601 ops/s
Iteration  17: 1718144.099 ops/s
Iteration  18: 1723085.710 ops/s
Iteration  19: 1691010.515 ops/s
Iteration  20: 1725811.193 ops/s
Iteration  21: 1714930.846 ops/s
Iteration  22: 1736941.393 ops/s
Iteration  23: 1707171.518 ops/s
Iteration  24: 1759968.862 ops/s
Iteration  25: 1693177.114 ops/s
Iteration  26: 1784769.395 ops/s
Iteration  27: 1705131.693 ops/s
Iteration  28: 1684607.688 ops/s
Iteration  29: 1707107.173 ops/s
Iteration  30: 1686512.095 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_asyncFusedConditional":
  1706420.910 ±(99.9%) 41270.823 ops/s [Average]
  (min, avg, max) = (1501995.540, 1706420.910, 1798647.943), stdev = 61772.229
  CI (99.9%): [1665150.088, 1747691.733] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_asyncFusedConditional  thrpt   30  1706420.910 ± 41270.823  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_eagerDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_eagerDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54836.261 ops/s
# Warmup Iteration   2: 292002.214 ops/s
# Warmup Iteration   3: 855688.316 ops/s
# Warmup Iteration   4: 1113978.390 ops/s
# Warmup Iteration   5: 1274932.672 ops/s
# Warmup Iteration   6: 1219567.631 ops/s
# Warmup Iteration   7: 1203880.388 ops/s
# Warmup Iteration   8: 1242327.784 ops/s
# Warmup Iteration   9: 1209562.172 ops/s
# Warmup Iteration  10: 1243712.957 ops/s
# Warmup Iteration  11: 1243062.284 ops/s
# Warmup Iteration  12: 1265139.549 ops/s
# Warmup Iteration  13: 1166490.124 ops/s
# Warmup Iteration  14: 1262204.246 ops/s
# Warmup Iteration  15: 1222328.174 ops/s
# Warmup Iteration  16: 1230360.227 ops/s
# Warmup Iteration  17: 1231425.938 ops/s
# Warmup Iteration  18: 1216972.396 ops/s
# Warmup Iteration  19: 1300921.632 ops/s
# Warmup Iteration  20: 1224135.107 ops/s
# Warmup Iteration  21: 1271152.336 ops/s
# Warmup Iteration  22: 1254410.600 ops/s
# Warmup Iteration  23: 1215204.509 ops/s
# Warmup Iteration  24: 1222689.012 ops/s
# Warmup Iteration  25: 1275503.911 ops/s
# Warmup Iteration  26: 1194575.738 ops/s
# Warmup Iteration  27: 1240382.215 ops/s
# Warmup Iteration  28: 1274677.899 ops/s
# Warmup Iteration  29: 1215311.797 ops/s
# Warmup Iteration  30: 1257053.457 ops/s
Iteration   1: 1177449.316 ops/s
Iteration   2: 1213260.012 ops/s
Iteration   3: 1228376.665 ops/s
Iteration   4: 1248148.366 ops/s
Iteration   5: 1256401.987 ops/s
Iteration   6: 1222412.153 ops/s
Iteration   7: 1247888.255 ops/s
Iteration   8: 1217708.857 ops/s
Iteration   9: 1274676.190 ops/s
Iteration  10: 1263747.768 ops/s
Iteration  11: 1174923.231 ops/s
Iteration  12: 1246811.940 ops/s
Iteration  13: 1206432.451 ops/s
Iteration  14: 1211483.776 ops/s
Iteration  15: 1206423.129 ops/s
Iteration  16: 1219091.005 ops/s
Iteration  17: 1252709.447 ops/s
Iteration  18: 1217569.888 ops/s
Iteration  19: 1260286.626 ops/s
Iteration  20: 1221173.062 ops/s
Iteration  21: 1291627.586 ops/s
Iteration  22: 1182800.844 ops/s
Iteration  23: 1271314.240 ops/s
Iteration  24: 1255816.172 ops/s
Iteration  25: 1233753.025 ops/s
Iteration  26: 1253517.364 ops/s
Iteration  27: 1204521.737 ops/s
Iteration  28: 1226513.676 ops/s
Iteration  29: 1270220.768 ops/s
Iteration  30: 1182651.969 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_eagerDispose":
  1231323.717 ±(99.9%) 20657.375 ops/s [Average]
  (min, avg, max) = (1174923.231, 1231323.717, 1291627.586), stdev = 30918.989
  CI (99.9%): [1210666.342, 1251981.092] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_eagerDispose  thrpt   30  1231323.717 ± 20657.375  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1641535.625 ops/s
# Warmup Iteration   2: 3701807.994 ops/s
# Warmup Iteration   3: 4236437.614 ops/s
# Warmup Iteration   4: 4557077.915 ops/s
# Warmup Iteration   5: 4293496.422 ops/s
# Warmup Iteration   6: 4312924.974 ops/s
# Warmup Iteration   7: 4461767.956 ops/s
# Warmup Iteration   8: 4282346.476 ops/s
# Warmup Iteration   9: 4553159.691 ops/s
# Warmup Iteration  10: 4259499.574 ops/s
# Warmup Iteration  11: 4428830.930 ops/s
# Warmup Iteration  12: 4582053.510 ops/s
# Warmup Iteration  13: 4242147.491 ops/s
# Warmup Iteration  14: 4560569.679 ops/s
# Warmup Iteration  15: 4410416.740 ops/s
# Warmup Iteration  16: 4407405.680 ops/s
# Warmup Iteration  17: 4329824.803 ops/s
# Warmup Iteration  18: 4275518.489 ops/s
# Warmup Iteration  19: 4612230.812 ops/s
# Warmup Iteration  20: 4320731.647 ops/s
# Warmup Iteration  21: 4480163.742 ops/s
# Warmup Iteration  22: 4617100.032 ops/s
# Warmup Iteration  23: 4468426.460 ops/s
# Warmup Iteration  24: 4219438.112 ops/s
# Warmup Iteration  25: 4523862.225 ops/s
# Warmup Iteration  26: 4345592.417 ops/s
# Warmup Iteration  27: 4271912.209 ops/s
# Warmup Iteration  28: 3564460.223 ops/s
# Warmup Iteration  29: 4356775.708 ops/s
# Warmup Iteration  30: 4453107.797 ops/s
Iteration   1: 4390827.217 ops/s
Iteration   2: 4340141.231 ops/s
Iteration   3: 4525615.098 ops/s
Iteration   4: 4267260.498 ops/s
Iteration   5: 4617115.569 ops/s
Iteration   6: 4515821.238 ops/s
Iteration   7: 4311263.237 ops/s
Iteration   8: 4445295.685 ops/s
Iteration   9: 4488279.386 ops/s
Iteration  10: 4253791.059 ops/s
Iteration  11: 4494250.202 ops/s
Iteration  12: 4311144.150 ops/s
Iteration  13: 4417111.212 ops/s
Iteration  14: 4501142.237 ops/s
Iteration  15: 4403769.709 ops/s
Iteration  16: 4378598.525 ops/s
Iteration  17: 4553392.832 ops/s
Iteration  18: 4190421.840 ops/s
Iteration  19: 4679610.178 ops/s
Iteration  20: 4361205.818 ops/s
Iteration  21: 4520324.905 ops/s
Iteration  22: 4274953.672 ops/s
Iteration  23: 4445076.811 ops/s
Iteration  24: 4625474.220 ops/s
Iteration  25: 4262103.191 ops/s
Iteration  26: 4453932.338 ops/s
Iteration  27: 4275734.055 ops/s
Iteration  28: 4511445.557 ops/s
Iteration  29: 4460566.794 ops/s
Iteration  30: 4187834.023 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_dispose":
  4415450.083 ±(99.9%) 86483.648 ops/s [Average]
  (min, avg, max) = (4187834.023, 4415450.083, 4679610.178), stdev = 129444.662
  CI (99.9%): [4328966.435, 4501933.730] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
BlockingObservableToIteratorTest._Benchmark.benchmark_dispose  thrpt   30  4415450.083 ± 86483.648  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_doneButNotEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_doneButNotEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31627.427 ops/s
# Warmup Iteration   2: 245393.133 ops/s
# Warmup Iteration   3: 610940.010 ops/s
# Warmup Iteration   4: 1031203.138 ops/s
# Warmup Iteration   5: 1205713.171 ops/s
# Warmup Iteration   6: 1187258.986 ops/s
# Warmup Iteration   7: 1234865.784 ops/s
# Warmup Iteration   8: 1190600.804 ops/s
# Warmup Iteration   9: 1159742.393 ops/s
# Warmup Iteration  10: 1218578.835 ops/s
# Warmup Iteration  11: 1152440.635 ops/s
# Warmup Iteration  12: 1164785.862 ops/s
# Warmup Iteration  13: 1203504.274 ops/s
# Warmup Iteration  14: 1158687.762 ops/s
# Warmup Iteration  15: 1192393.743 ops/s
# Warmup Iteration  16: 1144763.448 ops/s
# Warmup Iteration  17: 1234183.213 ops/s
# Warmup Iteration  18: 1208193.272 ops/s
# Warmup Iteration  19: 1174752.757 ops/s
# Warmup Iteration  20: 1177110.506 ops/s
# Warmup Iteration  21: 1216919.761 ops/s
# Warmup Iteration  22: 1178394.136 ops/s
# Warmup Iteration  23: 1193995.236 ops/s
# Warmup Iteration  24: 1218067.682 ops/s
# Warmup Iteration  25: 1167027.838 ops/s
# Warmup Iteration  26: 1173953.267 ops/s
# Warmup Iteration  27: 1205155.552 ops/s
# Warmup Iteration  28: 1177973.286 ops/s
# Warmup Iteration  29: 1223984.803 ops/s
# Warmup Iteration  30: 1141534.687 ops/s
Iteration   1: 1224709.148 ops/s
Iteration   2: 1192255.575 ops/s
Iteration   3: 1183310.325 ops/s
Iteration   4: 1181120.161 ops/s
Iteration   5: 1209318.449 ops/s
Iteration   6: 1208709.873 ops/s
Iteration   7: 1132670.440 ops/s
Iteration   8: 1187383.074 ops/s
Iteration   9: 1188847.863 ops/s
Iteration  10: 1182242.322 ops/s
Iteration  11: 1181500.879 ops/s
Iteration  12: 1193632.518 ops/s
Iteration  13: 1224410.720 ops/s
Iteration  14: 1161168.603 ops/s
Iteration  15: 1206151.144 ops/s
Iteration  16: 1165515.937 ops/s
Iteration  17: 1156700.413 ops/s
Iteration  18: 1163247.816 ops/s
Iteration  19: 1190846.466 ops/s
Iteration  20: 1206988.225 ops/s
Iteration  21: 1221564.144 ops/s
Iteration  22: 1188477.917 ops/s
Iteration  23: 1188782.600 ops/s
Iteration  24: 1170285.782 ops/s
Iteration  25: 1197043.860 ops/s
Iteration  26: 1174860.867 ops/s
Iteration  27: 1217199.518 ops/s
Iteration  28: 1201385.628 ops/s
Iteration  29: 1205415.398 ops/s
Iteration  30: 1180198.677 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_doneButNotEmpty":
  1189531.478 ±(99.9%) 14335.221 ops/s [Average]
  (min, avg, max) = (1132670.440, 1189531.478, 1224709.148), stdev = 21456.285
  CI (99.9%): [1175196.257, 1203866.699] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_doneButNotEmpty  thrpt   30  1189531.478 ± 14335.221  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedNone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedNone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124265.489 ops/s
# Warmup Iteration   2: 1153418.355 ops/s
# Warmup Iteration   3: 1844155.332 ops/s
# Warmup Iteration   4: 1940530.888 ops/s
# Warmup Iteration   5: 2076459.024 ops/s
# Warmup Iteration   6: 2007178.703 ops/s
# Warmup Iteration   7: 2044000.127 ops/s
# Warmup Iteration   8: 2009843.249 ops/s
# Warmup Iteration   9: 2076043.279 ops/s
# Warmup Iteration  10: 2124994.773 ops/s
# Warmup Iteration  11: 2025283.255 ops/s
# Warmup Iteration  12: 2060659.464 ops/s
# Warmup Iteration  13: 2031541.416 ops/s
# Warmup Iteration  14: 2061614.736 ops/s
# Warmup Iteration  15: 2081762.554 ops/s
# Warmup Iteration  16: 2031339.695 ops/s
# Warmup Iteration  17: 2036878.359 ops/s
# Warmup Iteration  18: 2105836.905 ops/s
# Warmup Iteration  19: 2037442.143 ops/s
# Warmup Iteration  20: 2136051.179 ops/s
# Warmup Iteration  21: 1966900.548 ops/s
# Warmup Iteration  22: 1724932.437 ops/s
# Warmup Iteration  23: 1884125.349 ops/s
# Warmup Iteration  24: 1989266.633 ops/s
# Warmup Iteration  25: 1999195.640 ops/s
# Warmup Iteration  26: 2115644.932 ops/s
# Warmup Iteration  27: 2053003.200 ops/s
# Warmup Iteration  28: 1990638.661 ops/s
# Warmup Iteration  29: 2016741.385 ops/s
# Warmup Iteration  30: 2115250.025 ops/s
Iteration   1: 2073137.836 ops/s
Iteration   2: 1982019.975 ops/s
Iteration   3: 2092430.076 ops/s
Iteration   4: 1999725.145 ops/s
Iteration   5: 2037428.246 ops/s
Iteration   6: 2119392.065 ops/s
Iteration   7: 1956262.860 ops/s
Iteration   8: 2050715.921 ops/s
Iteration   9: 1999148.949 ops/s
Iteration  10: 2031996.986 ops/s
Iteration  11: 2092568.645 ops/s
Iteration  12: 2008677.643 ops/s
Iteration  13: 2073455.714 ops/s
Iteration  14: 2138666.403 ops/s
Iteration  15: 1968426.890 ops/s
Iteration  16: 2068608.712 ops/s
Iteration  17: 2013705.075 ops/s
Iteration  18: 2070236.285 ops/s
Iteration  19: 1970115.021 ops/s
Iteration  20: 1981838.049 ops/s
Iteration  21: 2099737.428 ops/s
Iteration  22: 2010333.346 ops/s
Iteration  23: 2079680.234 ops/s
Iteration  24: 2038053.507 ops/s
Iteration  25: 2046191.691 ops/s
Iteration  26: 2061032.379 ops/s
Iteration  27: 1979240.321 ops/s
Iteration  28: 2076812.193 ops/s
Iteration  29: 2014635.332 ops/s
Iteration  30: 2040461.475 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedNone":
  2039157.813 ±(99.9%) 32014.989 ops/s [Average]
  (min, avg, max) = (1956262.860, 2039157.813, 2138666.403), stdev = 47918.532
  CI (99.9%): [2007142.824, 2071172.802] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedNone  thrpt   30  2039157.813 ± 32014.989  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20884.012 ops/s
# Warmup Iteration   2: 94045.563 ops/s
# Warmup Iteration   3: 132032.870 ops/s
# Warmup Iteration   4: 149329.465 ops/s
# Warmup Iteration   5: 153762.479 ops/s
# Warmup Iteration   6: 157655.787 ops/s
# Warmup Iteration   7: 156929.158 ops/s
# Warmup Iteration   8: 152173.759 ops/s
# Warmup Iteration   9: 141336.061 ops/s
# Warmup Iteration  10: 154507.374 ops/s
# Warmup Iteration  11: 156946.743 ops/s
# Warmup Iteration  12: 160154.699 ops/s
# Warmup Iteration  13: 153775.854 ops/s
# Warmup Iteration  14: 159158.755 ops/s
# Warmup Iteration  15: 154401.970 ops/s
# Warmup Iteration  16: 156069.695 ops/s
# Warmup Iteration  17: 168990.122 ops/s
# Warmup Iteration  18: 157645.653 ops/s
# Warmup Iteration  19: 160633.791 ops/s
# Warmup Iteration  20: 164977.784 ops/s
# Warmup Iteration  21: 157390.181 ops/s
# Warmup Iteration  22: 167996.595 ops/s
# Warmup Iteration  23: 157664.453 ops/s
# Warmup Iteration  24: 158931.730 ops/s
# Warmup Iteration  25: 164880.186 ops/s
# Warmup Iteration  26: 163171.234 ops/s
# Warmup Iteration  27: 168517.092 ops/s
# Warmup Iteration  28: 157948.880 ops/s
# Warmup Iteration  29: 165587.520 ops/s
# Warmup Iteration  30: 159908.903 ops/s
Iteration   1: 165256.432 ops/s
Iteration   2: 166953.868 ops/s
Iteration   3: 155240.089 ops/s
Iteration   4: 169250.108 ops/s
Iteration   5: 165481.323 ops/s
Iteration   6: 158908.463 ops/s
Iteration   7: 167493.865 ops/s
Iteration   8: 155424.386 ops/s
Iteration   9: 168384.424 ops/s
Iteration  10: 159691.220 ops/s
Iteration  11: 166423.866 ops/s
Iteration  12: 158666.102 ops/s
Iteration  13: 158878.949 ops/s
Iteration  14: 170355.520 ops/s
Iteration  15: 164223.921 ops/s
Iteration  16: 155708.789 ops/s
Iteration  17: 158325.322 ops/s
Iteration  18: 167187.461 ops/s
Iteration  19: 156578.871 ops/s
Iteration  20: 162466.292 ops/s
Iteration  21: 165732.924 ops/s
Iteration  22: 157882.845 ops/s
Iteration  23: 165645.646 ops/s
Iteration  24: 158878.551 ops/s
Iteration  25: 166108.580 ops/s
Iteration  26: 156934.806 ops/s
Iteration  27: 162147.340 ops/s
Iteration  28: 164847.822 ops/s
Iteration  29: 152764.752 ops/s
Iteration  30: 162741.462 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSource":
  162152.800 ±(99.9%) 3256.826 ops/s [Average]
  (min, avg, max) = (152764.752, 162152.800, 170355.520), stdev = 4874.664
  CI (99.9%): [158895.974, 165409.626] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSource  thrpt   30  162152.800 ± 3256.826  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSourceDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSourceDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22206.361 ops/s
# Warmup Iteration   2: 75625.891 ops/s
# Warmup Iteration   3: 150179.672 ops/s
# Warmup Iteration   4: 155215.268 ops/s
# Warmup Iteration   5: 159502.340 ops/s
# Warmup Iteration   6: 154922.944 ops/s
# Warmup Iteration   7: 157826.985 ops/s
# Warmup Iteration   8: 156443.037 ops/s
# Warmup Iteration   9: 155418.146 ops/s
# Warmup Iteration  10: 158840.101 ops/s
# Warmup Iteration  11: 162549.969 ops/s
# Warmup Iteration  12: 154310.712 ops/s
# Warmup Iteration  13: 162885.295 ops/s
# Warmup Iteration  14: 157779.530 ops/s
# Warmup Iteration  15: 157613.802 ops/s
# Warmup Iteration  16: 157930.770 ops/s
# Warmup Iteration  17: 122216.903 ops/s
# Warmup Iteration  18: 158971.468 ops/s
# Warmup Iteration  19: 164663.878 ops/s
# Warmup Iteration  20: 162197.030 ops/s
# Warmup Iteration  21: 164541.637 ops/s
# Warmup Iteration  22: 160546.074 ops/s
# Warmup Iteration  23: 163745.303 ops/s
# Warmup Iteration  24: 165606.642 ops/s
# Warmup Iteration  25: 158657.943 ops/s
# Warmup Iteration  26: 169595.372 ops/s
# Warmup Iteration  27: 159345.008 ops/s
# Warmup Iteration  28: 165629.152 ops/s
# Warmup Iteration  29: 166121.494 ops/s
# Warmup Iteration  30: 156201.658 ops/s
Iteration   1: 168975.998 ops/s
Iteration   2: 165442.423 ops/s
Iteration   3: 158860.604 ops/s
Iteration   4: 169405.154 ops/s
Iteration   5: 163176.239 ops/s
Iteration   6: 169666.584 ops/s
Iteration   7: 160166.485 ops/s
Iteration   8: 168501.011 ops/s
Iteration   9: 164191.687 ops/s
Iteration  10: 165184.323 ops/s
Iteration  11: 169963.002 ops/s
Iteration  12: 164113.865 ops/s
Iteration  13: 166235.871 ops/s
Iteration  14: 168432.437 ops/s
Iteration  15: 163303.772 ops/s
Iteration  16: 162610.814 ops/s
Iteration  17: 169665.124 ops/s
Iteration  18: 163135.409 ops/s
Iteration  19: 162110.180 ops/s
Iteration  20: 171042.250 ops/s
Iteration  21: 158577.105 ops/s
Iteration  22: 170997.347 ops/s
Iteration  23: 165373.639 ops/s
Iteration  24: 166760.686 ops/s
Iteration  25: 163253.289 ops/s
Iteration  26: 170458.855 ops/s
Iteration  27: 168404.468 ops/s
Iteration  28: 159133.800 ops/s
Iteration  29: 171050.380 ops/s
Iteration  30: 158826.365 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSourceDelayError":
  165567.306 ±(99.9%) 2707.650 ops/s [Average]
  (min, avg, max) = (158577.105, 165567.306, 171050.380), stdev = 4052.684
  CI (99.9%): [162859.655, 168274.956] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_badInnerSourceDelayError  thrpt   30  165567.306 ± 2707.650  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedMixedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedMixedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 55167.120 ops/s
# Warmup Iteration   2: 338728.009 ops/s
# Warmup Iteration   3: 1046292.191 ops/s
# Warmup Iteration   4: 1260412.012 ops/s
# Warmup Iteration   5: 1345568.193 ops/s
# Warmup Iteration   6: 1310894.511 ops/s
# Warmup Iteration   7: 1260761.497 ops/s
# Warmup Iteration   8: 1351580.256 ops/s
# Warmup Iteration   9: 1257797.153 ops/s
# Warmup Iteration  10: 1335689.147 ops/s
# Warmup Iteration  11: 1211132.455 ops/s
# Warmup Iteration  12: 1155525.442 ops/s
# Warmup Iteration  13: 1263289.689 ops/s
# Warmup Iteration  14: 1260147.605 ops/s
# Warmup Iteration  15: 1355414.548 ops/s
# Warmup Iteration  16: 1296460.960 ops/s
# Warmup Iteration  17: 1302832.337 ops/s
# Warmup Iteration  18: 1330581.924 ops/s
# Warmup Iteration  19: 1315226.329 ops/s
# Warmup Iteration  20: 1330267.870 ops/s
# Warmup Iteration  21: 1292415.449 ops/s
# Warmup Iteration  22: 1314432.275 ops/s
# Warmup Iteration  23: 1353734.497 ops/s
# Warmup Iteration  24: 1273042.168 ops/s
# Warmup Iteration  25: 1330806.147 ops/s
# Warmup Iteration  26: 1272852.767 ops/s
# Warmup Iteration  27: 1351456.479 ops/s
# Warmup Iteration  28: 1279157.206 ops/s
# Warmup Iteration  29: 1307718.068 ops/s
# Warmup Iteration  30: 1393798.907 ops/s
Iteration   1: 1313601.116 ops/s
Iteration   2: 1288811.957 ops/s
Iteration   3: 1344160.714 ops/s
Iteration   4: 1288623.935 ops/s
Iteration   5: 1320932.140 ops/s
Iteration   6: 1341130.541 ops/s
Iteration   7: 1292501.568 ops/s
Iteration   8: 1363457.472 ops/s
Iteration   9: 1299820.165 ops/s
Iteration  10: 1366620.677 ops/s
Iteration  11: 1276695.982 ops/s
Iteration  12: 1331123.114 ops/s
Iteration  13: 1297631.244 ops/s
Iteration  14: 1296754.781 ops/s
Iteration  15: 1300264.861 ops/s
Iteration  16: 1296501.363 ops/s
Iteration  17: 1337343.464 ops/s
Iteration  18: 1294279.976 ops/s
Iteration  19: 1274466.189 ops/s
Iteration  20: 1345332.264 ops/s
Iteration  21: 1267591.897 ops/s
Iteration  22: 1334491.097 ops/s
Iteration  23: 1279146.171 ops/s
Iteration  24: 1344223.136 ops/s
Iteration  25: 1346133.295 ops/s
Iteration  26: 1304869.657 ops/s
Iteration  27: 1344471.093 ops/s
Iteration  28: 1310606.961 ops/s
Iteration  29: 1336849.366 ops/s
Iteration  30: 1315161.137 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedMixedConditional":
  1315119.911 ±(99.9%) 18534.199 ops/s [Average]
  (min, avg, max) = (1267591.897, 1315119.911, 1366620.677), stdev = 27741.119
  CI (99.9%): [1296585.712, 1333654.110] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_asyncFusedMixedConditional  thrpt   30  1315119.911 ± 18534.199  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_emptySerialized$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_emptySerialized

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 642924.692 ops/s
# Warmup Iteration   2: 3453078.940 ops/s
# Warmup Iteration   3: 4973872.727 ops/s
# Warmup Iteration   4: 5447987.958 ops/s
# Warmup Iteration   5: 5041110.449 ops/s
# Warmup Iteration   6: 5273031.260 ops/s
# Warmup Iteration   7: 5429074.168 ops/s
# Warmup Iteration   8: 5175434.330 ops/s
# Warmup Iteration   9: 5321911.518 ops/s
# Warmup Iteration  10: 5324365.760 ops/s
# Warmup Iteration  11: 3797096.571 ops/s
# Warmup Iteration  12: 5421584.674 ops/s
# Warmup Iteration  13: 5258634.297 ops/s
# Warmup Iteration  14: 5361678.783 ops/s
# Warmup Iteration  15: 5223731.484 ops/s
# Warmup Iteration  16: 5286977.041 ops/s
# Warmup Iteration  17: 5352739.543 ops/s
# Warmup Iteration  18: 5268204.579 ops/s
# Warmup Iteration  19: 5455312.819 ops/s
# Warmup Iteration  20: 5330609.165 ops/s
# Warmup Iteration  21: 5418469.040 ops/s
# Warmup Iteration  22: 5217340.138 ops/s
# Warmup Iteration  23: 5432767.209 ops/s
# Warmup Iteration  24: 5243057.848 ops/s
# Warmup Iteration  25: 5425769.938 ops/s
# Warmup Iteration  26: 5449357.735 ops/s
# Warmup Iteration  27: 5313109.426 ops/s
# Warmup Iteration  28: 5446005.653 ops/s
# Warmup Iteration  29: 5200453.197 ops/s
# Warmup Iteration  30: 5447642.508 ops/s
Iteration   1: 5302371.456 ops/s
Iteration   2: 5317094.923 ops/s
Iteration   3: 5537670.652 ops/s
Iteration   4: 5126474.295 ops/s
Iteration   5: 5481627.773 ops/s
Iteration   6: 5065277.375 ops/s
Iteration   7: 5452893.861 ops/s
Iteration   8: 5412488.724 ops/s
Iteration   9: 5178022.940 ops/s
Iteration  10: 5473794.868 ops/s
Iteration  11: 5183704.871 ops/s
Iteration  12: 5375671.597 ops/s
Iteration  13: 5411229.311 ops/s
Iteration  14: 5250176.664 ops/s
Iteration  15: 5361227.972 ops/s
Iteration  16: 5296601.546 ops/s
Iteration  17: 5422075.105 ops/s
Iteration  18: 5117493.554 ops/s
Iteration  19: 5538183.759 ops/s
Iteration  20: 5425112.338 ops/s
Iteration  21: 5171960.020 ops/s
Iteration  22: 5530111.168 ops/s
Iteration  23: 5171481.185 ops/s
Iteration  24: 5517919.283 ops/s
Iteration  25: 5269997.239 ops/s
Iteration  26: 5318452.611 ops/s
Iteration  27: 5339953.642 ops/s
Iteration  28: 5354960.527 ops/s
Iteration  29: 5533026.318 ops/s
Iteration  30: 5113306.678 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_emptySerialized":
  5335012.075 ±(99.9%) 96591.407 ops/s [Average]
  (min, avg, max) = (5065277.375, 5335012.075, 5538183.759), stdev = 144573.482
  CI (99.9%): [5238420.668, 5431603.482] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableCreateTest._Benchmark.benchmark_emptySerialized  thrpt   30  5335012.075 ± 96591.407  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41456.988 ops/s
# Warmup Iteration   2: 327341.393 ops/s
# Warmup Iteration   3: 765229.228 ops/s
# Warmup Iteration   4: 1094259.308 ops/s
# Warmup Iteration   5: 1404188.565 ops/s
# Warmup Iteration   6: 1407690.103 ops/s
# Warmup Iteration   7: 1377194.241 ops/s
# Warmup Iteration   8: 1360439.687 ops/s
# Warmup Iteration   9: 1419841.633 ops/s
# Warmup Iteration  10: 1344921.355 ops/s
# Warmup Iteration  11: 1398195.150 ops/s
# Warmup Iteration  12: 1365106.830 ops/s
# Warmup Iteration  13: 1371088.989 ops/s
# Warmup Iteration  14: 1418857.639 ops/s
# Warmup Iteration  15: 1362631.837 ops/s
# Warmup Iteration  16: 1396444.066 ops/s
# Warmup Iteration  17: 1373352.076 ops/s
# Warmup Iteration  18: 1349057.658 ops/s
# Warmup Iteration  19: 1429139.102 ops/s
# Warmup Iteration  20: 1328455.181 ops/s
# Warmup Iteration  21: 1363197.616 ops/s
# Warmup Iteration  22: 1427499.598 ops/s
# Warmup Iteration  23: 1331993.839 ops/s
# Warmup Iteration  24: 1408380.792 ops/s
# Warmup Iteration  25: 1382296.676 ops/s
# Warmup Iteration  26: 1405008.043 ops/s
# Warmup Iteration  27: 1358791.173 ops/s
# Warmup Iteration  28: 1342386.955 ops/s
# Warmup Iteration  29: 1407098.881 ops/s
# Warmup Iteration  30: 1354850.192 ops/s
Iteration   1: 1455440.441 ops/s
Iteration   2: 1439996.244 ops/s
Iteration   3: 1320892.311 ops/s
Iteration   4: 1451945.847 ops/s
Iteration   5: 1322452.160 ops/s
Iteration   6: 1424258.142 ops/s
Iteration   7: 1367217.752 ops/s
Iteration   8: 1360781.543 ops/s
Iteration   9: 1401224.557 ops/s
Iteration  10: 1429864.581 ops/s
Iteration  11: 1355978.879 ops/s
Iteration  12: 1387509.294 ops/s
Iteration  13: 1404445.182 ops/s
Iteration  14: 1363156.736 ops/s
Iteration  15: 1368807.377 ops/s
Iteration  16: 1437388.128 ops/s
Iteration  17: 1313341.943 ops/s
Iteration  18: 1378127.447 ops/s
Iteration  19: 1420554.001 ops/s
Iteration  20: 1361796.339 ops/s
Iteration  21: 1437862.469 ops/s
Iteration  22: 1328655.671 ops/s
Iteration  23: 1407363.219 ops/s
Iteration  24: 1371116.167 ops/s
Iteration  25: 1384272.079 ops/s
Iteration  26: 1400420.859 ops/s
Iteration  27: 1362406.497 ops/s
Iteration  28: 1356627.832 ops/s
Iteration  29: 1452338.423 ops/s
Iteration  30: 1338639.545 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSize":
  1386829.389 ±(99.9%) 28210.761 ops/s [Average]
  (min, avg, max) = (1313341.943, 1386829.389, 1455440.441), stdev = 42224.543
  CI (99.9%): [1358618.627, 1415040.150] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamSize  thrpt   30  1386829.389 ± 28210.761  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowOpenMainCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowOpenMainCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12793.933 ops/s
# Warmup Iteration   2: 105476.934 ops/s
# Warmup Iteration   3: 264107.777 ops/s
# Warmup Iteration   4: 560158.155 ops/s
# Warmup Iteration   5: 501242.891 ops/s
# Warmup Iteration   6: 368798.694 ops/s
# Warmup Iteration   7: 525910.713 ops/s
# Warmup Iteration   8: 531806.760 ops/s
# Warmup Iteration   9: 576736.128 ops/s
# Warmup Iteration  10: 525166.744 ops/s
# Warmup Iteration  11: 559863.774 ops/s
# Warmup Iteration  12: 557637.707 ops/s
# Warmup Iteration  13: 550289.005 ops/s
# Warmup Iteration  14: 573864.978 ops/s
# Warmup Iteration  15: 569459.742 ops/s
# Warmup Iteration  16: 570720.937 ops/s
# Warmup Iteration  17: 535625.142 ops/s
# Warmup Iteration  18: 562971.914 ops/s
# Warmup Iteration  19: 550857.450 ops/s
# Warmup Iteration  20: 554224.135 ops/s
# Warmup Iteration  21: 562159.507 ops/s
# Warmup Iteration  22: 531737.909 ops/s
# Warmup Iteration  23: 571102.083 ops/s
# Warmup Iteration  24: 541951.952 ops/s
# Warmup Iteration  25: 543848.129 ops/s
# Warmup Iteration  26: 562743.474 ops/s
# Warmup Iteration  27: 549130.405 ops/s
# Warmup Iteration  28: 536788.047 ops/s
# Warmup Iteration  29: 565274.428 ops/s
# Warmup Iteration  30: 552740.250 ops/s
Iteration   1: 554531.470 ops/s
Iteration   2: 552527.332 ops/s
Iteration   3: 543090.899 ops/s
Iteration   4: 572488.956 ops/s
Iteration   5: 536984.951 ops/s
Iteration   6: 554814.227 ops/s
Iteration   7: 547320.590 ops/s
Iteration   8: 567464.595 ops/s
Iteration   9: 535095.273 ops/s
Iteration  10: 561563.970 ops/s
Iteration  11: 545666.848 ops/s
Iteration  12: 540885.185 ops/s
Iteration  13: 566749.472 ops/s
Iteration  14: 544113.262 ops/s
Iteration  15: 547524.484 ops/s
Iteration  16: 547779.574 ops/s
Iteration  17: 565894.256 ops/s
Iteration  18: 537321.269 ops/s
Iteration  19: 555608.081 ops/s
Iteration  20: 556836.898 ops/s
Iteration  21: 529751.154 ops/s
Iteration  22: 568714.645 ops/s
Iteration  23: 535117.280 ops/s
Iteration  24: 546887.963 ops/s
Iteration  25: 542555.616 ops/s
Iteration  26: 541846.679 ops/s
Iteration  27: 576385.524 ops/s
Iteration  28: 533911.333 ops/s
Iteration  29: 554215.448 ops/s
Iteration  30: 552156.567 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowOpenMainCompletes":
  550526.793 ±(99.9%) 8269.869 ops/s [Average]
  (min, avg, max) = (529751.154, 550526.793, 576385.524), stdev = 12377.951
  CI (99.9%): [542256.925, 558796.662] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowOpenMainCompletes  thrpt   30  550526.793 ± 8269.869  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_badSourceDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_badSourceDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21109.445 ops/s
# Warmup Iteration   2: 114686.710 ops/s
# Warmup Iteration   3: 147141.089 ops/s
# Warmup Iteration   4: 160246.882 ops/s
# Warmup Iteration   5: 168584.787 ops/s
# Warmup Iteration   6: 165439.883 ops/s
# Warmup Iteration   7: 166044.480 ops/s
# Warmup Iteration   8: 151777.887 ops/s
# Warmup Iteration   9: 161612.281 ops/s
# Warmup Iteration  10: 165315.762 ops/s
# Warmup Iteration  11: 163693.079 ops/s
# Warmup Iteration  12: 165786.453 ops/s
# Warmup Iteration  13: 171007.976 ops/s
# Warmup Iteration  14: 169241.141 ops/s
# Warmup Iteration  15: 163794.433 ops/s
# Warmup Iteration  16: 169927.795 ops/s
# Warmup Iteration  17: 169505.797 ops/s
# Warmup Iteration  18: 176496.015 ops/s
# Warmup Iteration  19: 184529.026 ops/s
# Warmup Iteration  20: 167332.245 ops/s
# Warmup Iteration  21: 180283.396 ops/s
# Warmup Iteration  22: 165910.955 ops/s
# Warmup Iteration  23: 179308.091 ops/s
# Warmup Iteration  24: 171582.198 ops/s
# Warmup Iteration  25: 179342.358 ops/s
# Warmup Iteration  26: 172405.883 ops/s
# Warmup Iteration  27: 178127.014 ops/s
# Warmup Iteration  28: 173034.383 ops/s
# Warmup Iteration  29: 175020.195 ops/s
# Warmup Iteration  30: 170731.220 ops/s
Iteration   1: 173187.031 ops/s
Iteration   2: 179388.693 ops/s
Iteration   3: 167784.278 ops/s
Iteration   4: 171494.524 ops/s
Iteration   5: 173943.774 ops/s
Iteration   6: 168608.142 ops/s
Iteration   7: 173607.394 ops/s
Iteration   8: 168170.224 ops/s
Iteration   9: 172832.907 ops/s
Iteration  10: 178768.133 ops/s
Iteration  11: 170276.703 ops/s
Iteration  12: 182731.972 ops/s
Iteration  13: 177460.993 ops/s
Iteration  14: 168472.339 ops/s
Iteration  15: 169809.764 ops/s
Iteration  16: 173917.104 ops/s
Iteration  17: 169542.036 ops/s
Iteration  18: 176305.111 ops/s
Iteration  19: 166588.535 ops/s
Iteration  20: 170912.935 ops/s
Iteration  21: 174709.640 ops/s
Iteration  22: 170490.214 ops/s
Iteration  23: 175978.494 ops/s
Iteration  24: 167955.004 ops/s
Iteration  25: 177422.468 ops/s
Iteration  26: 172034.391 ops/s
Iteration  27: 167315.656 ops/s
Iteration  28: 176465.983 ops/s
Iteration  29: 171333.173 ops/s
Iteration  30: 175473.434 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_badSourceDelayError":
  172766.035 ±(99.9%) 2732.258 ops/s [Average]
  (min, avg, max) = (166588.535, 172766.035, 182731.972), stdev = 4089.515
  CI (99.9%): [170033.777, 175498.293] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_badSourceDelayError  thrpt   30  172766.035 ± 2732.258  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_takeOneAnotherBoundary$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_takeOneAnotherBoundary

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 145031.824 ops/s
# Warmup Iteration   2: 994761.977 ops/s
# Warmup Iteration   3: 1205516.890 ops/s
# Warmup Iteration   4: 1480218.146 ops/s
# Warmup Iteration   5: 1405891.685 ops/s
# Warmup Iteration   6: 1427144.167 ops/s
# Warmup Iteration   7: 1464245.943 ops/s
# Warmup Iteration   8: 1461026.445 ops/s
# Warmup Iteration   9: 1426669.460 ops/s
# Warmup Iteration  10: 1416932.496 ops/s
# Warmup Iteration  11: 1422678.305 ops/s
# Warmup Iteration  12: 1427845.848 ops/s
# Warmup Iteration  13: 1439145.068 ops/s
# Warmup Iteration  14: 1469408.181 ops/s
# Warmup Iteration  15: 1392162.526 ops/s
# Warmup Iteration  16: 1477186.954 ops/s
# Warmup Iteration  17: 1450411.965 ops/s
# Warmup Iteration  18: 1430104.146 ops/s
# Warmup Iteration  19: 1439849.841 ops/s
# Warmup Iteration  20: 1416461.297 ops/s
# Warmup Iteration  21: 1435424.837 ops/s
# Warmup Iteration  22: 1450776.599 ops/s
# Warmup Iteration  23: 1353853.067 ops/s
# Warmup Iteration  24: 1481935.336 ops/s
# Warmup Iteration  25: 1427340.126 ops/s
# Warmup Iteration  26: 1382552.151 ops/s
# Warmup Iteration  27: 1481188.641 ops/s
# Warmup Iteration  28: 1419440.353 ops/s
# Warmup Iteration  29: 1463771.709 ops/s
# Warmup Iteration  30: 1417405.688 ops/s
Iteration   1: 1480346.094 ops/s
Iteration   2: 1494202.768 ops/s
Iteration   3: 1453171.275 ops/s
Iteration   4: 1477861.438 ops/s
Iteration   5: 1448758.520 ops/s
Iteration   6: 1449603.820 ops/s
Iteration   7: 1445386.844 ops/s
Iteration   8: 1510132.328 ops/s
Iteration   9: 1437644.880 ops/s
Iteration  10: 1460247.083 ops/s
Iteration  11: 1402291.711 ops/s
Iteration  12: 1490092.486 ops/s
Iteration  13: 1418421.889 ops/s
Iteration  14: 1408218.773 ops/s
Iteration  15: 1436531.497 ops/s
Iteration  16: 1476664.489 ops/s
Iteration  17: 1416425.347 ops/s
Iteration  18: 1422775.970 ops/s
Iteration  19: 1508211.329 ops/s
Iteration  20: 1377277.477 ops/s
Iteration  21: 1507078.542 ops/s
Iteration  22: 1400731.425 ops/s
Iteration  23: 1509848.047 ops/s
Iteration  24: 1452369.464 ops/s
Iteration  25: 1408499.495 ops/s
Iteration  26: 1483177.198 ops/s
Iteration  27: 1417340.137 ops/s
Iteration  28: 1452940.773 ops/s
Iteration  29: 1471381.236 ops/s
Iteration  30: 1402021.498 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_takeOneAnotherBoundary":
  1450655.128 ±(99.9%) 25285.982 ops/s [Average]
  (min, avg, max) = (1377277.477, 1450655.128, 1510132.328), stdev = 37846.871
  CI (99.9%): [1425369.146, 1475941.110] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
ObservableWindowWithObservableTest._Benchmark.benchmark_takeOneAnotherBoundary  thrpt   30  1450655.128 ± 25285.982  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_emitterHasToString$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_emitterHasToString

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26433.305 ops/s
# Warmup Iteration   2: 66108.635 ops/s
# Warmup Iteration   3: 124026.422 ops/s
# Warmup Iteration   4: 271614.978 ops/s
# Warmup Iteration   5: 353315.702 ops/s
# Warmup Iteration   6: 382246.980 ops/s
# Warmup Iteration   7: 411472.437 ops/s
# Warmup Iteration   8: 387683.328 ops/s
# Warmup Iteration   9: 402388.576 ops/s
# Warmup Iteration  10: 397266.140 ops/s
# Warmup Iteration  11: 392227.079 ops/s
# Warmup Iteration  12: 404723.815 ops/s
# Warmup Iteration  13: 388639.071 ops/s
# Warmup Iteration  14: 394929.253 ops/s
# Warmup Iteration  15: 397622.472 ops/s
# Warmup Iteration  16: 398349.586 ops/s
# Warmup Iteration  17: 408239.128 ops/s
# Warmup Iteration  18: 394336.569 ops/s
# Warmup Iteration  19: 410014.416 ops/s
# Warmup Iteration  20: 413226.331 ops/s
# Warmup Iteration  21: 379214.025 ops/s
# Warmup Iteration  22: 392992.575 ops/s
# Warmup Iteration  23: 414996.541 ops/s
# Warmup Iteration  24: 400013.837 ops/s
# Warmup Iteration  25: 407867.920 ops/s
# Warmup Iteration  26: 404141.371 ops/s
# Warmup Iteration  27: 389537.047 ops/s
# Warmup Iteration  28: 389150.554 ops/s
# Warmup Iteration  29: 416262.765 ops/s
# Warmup Iteration  30: 386653.865 ops/s
Iteration   1: 414405.243 ops/s
Iteration   2: 389957.877 ops/s
Iteration   3: 406986.960 ops/s
Iteration   4: 399543.185 ops/s
Iteration   5: 395281.593 ops/s
Iteration   6: 396757.344 ops/s
Iteration   7: 403280.529 ops/s
Iteration   8: 404093.670 ops/s
Iteration   9: 399799.965 ops/s
Iteration  10: 379751.057 ops/s
Iteration  11: 396867.914 ops/s
Iteration  12: 402464.651 ops/s
Iteration  13: 416559.262 ops/s
Iteration  14: 387816.092 ops/s
Iteration  15: 392274.388 ops/s
Iteration  16: 409143.346 ops/s
Iteration  17: 389886.078 ops/s
Iteration  18: 414474.586 ops/s
Iteration  19: 387849.238 ops/s
Iteration  20: 398076.994 ops/s
Iteration  21: 397370.675 ops/s
Iteration  22: 396235.024 ops/s
Iteration  23: 412446.076 ops/s
Iteration  24: 393069.934 ops/s
Iteration  25: 407883.914 ops/s
Iteration  26: 267407.694 ops/s
Iteration  27: 408603.359 ops/s
Iteration  28: 386096.237 ops/s
Iteration  29: 408020.773 ops/s
Iteration  30: 401582.571 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_emitterHasToString":
  395466.208 ±(99.9%) 17305.737 ops/s [Average]
  (min, avg, max) = (267407.694, 395466.208, 416559.262), stdev = 25902.414
  CI (99.9%): [378160.471, 412771.944] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableCreateTest._Benchmark.benchmark_emitterHasToString  thrpt   30  395466.208 ± 17305.737  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20713.664 ops/s
# Warmup Iteration   2: 94611.781 ops/s
# Warmup Iteration   3: 148407.353 ops/s
# Warmup Iteration   4: 152953.253 ops/s
# Warmup Iteration   5: 148609.652 ops/s
# Warmup Iteration   6: 164889.658 ops/s
# Warmup Iteration   7: 174721.416 ops/s
# Warmup Iteration   8: 168588.362 ops/s
# Warmup Iteration   9: 171992.107 ops/s
# Warmup Iteration  10: 163491.174 ops/s
# Warmup Iteration  11: 174329.770 ops/s
# Warmup Iteration  12: 163127.754 ops/s
# Warmup Iteration  13: 171797.118 ops/s
# Warmup Iteration  14: 173838.807 ops/s
# Warmup Iteration  15: 165754.263 ops/s
# Warmup Iteration  16: 171083.071 ops/s
# Warmup Iteration  17: 176112.768 ops/s
# Warmup Iteration  18: 178003.107 ops/s
# Warmup Iteration  19: 172771.604 ops/s
# Warmup Iteration  20: 178074.796 ops/s
# Warmup Iteration  21: 181739.392 ops/s
# Warmup Iteration  22: 178660.254 ops/s
# Warmup Iteration  23: 178744.150 ops/s
# Warmup Iteration  24: 174546.930 ops/s
# Warmup Iteration  25: 176962.646 ops/s
# Warmup Iteration  26: 174782.632 ops/s
# Warmup Iteration  27: 179546.867 ops/s
# Warmup Iteration  28: 175365.544 ops/s
# Warmup Iteration  29: 177469.484 ops/s
# Warmup Iteration  30: 184871.924 ops/s
Iteration   1: 181870.391 ops/s
Iteration   2: 171969.970 ops/s
Iteration   3: 180650.883 ops/s
Iteration   4: 174549.306 ops/s
Iteration   5: 179352.836 ops/s
Iteration   6: 175670.572 ops/s
Iteration   7: 175362.430 ops/s
Iteration   8: 185761.486 ops/s
Iteration   9: 171669.852 ops/s
Iteration  10: 177438.713 ops/s
Iteration  11: 177376.676 ops/s
Iteration  12: 174567.592 ops/s
Iteration  13: 181697.595 ops/s
Iteration  14: 177062.779 ops/s
Iteration  15: 170729.790 ops/s
Iteration  16: 177700.548 ops/s
Iteration  17: 180386.248 ops/s
Iteration  18: 175596.472 ops/s
Iteration  19: 173452.095 ops/s
Iteration  20: 184423.625 ops/s
Iteration  21: 171528.428 ops/s
Iteration  22: 175144.824 ops/s
Iteration  23: 174738.430 ops/s
Iteration  24: 181627.213 ops/s
Iteration  25: 177958.611 ops/s
Iteration  26: 175112.366 ops/s
Iteration  27: 182150.645 ops/s
Iteration  28: 176888.320 ops/s
Iteration  29: 172270.686 ops/s
Iteration  30: 178842.587 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_badSource":
  177118.399 ±(99.9%) 2629.043 ops/s [Average]
  (min, avg, max) = (170729.790, 177118.399, 185761.486), stdev = 3935.028
  CI (99.9%): [174489.356, 179747.442] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_badSource  thrpt   30  177118.399 ± 2629.043  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19327.075 ops/s
# Warmup Iteration   2: 123539.897 ops/s
# Warmup Iteration   3: 373120.165 ops/s
# Warmup Iteration   4: 392551.098 ops/s
# Warmup Iteration   5: 423044.379 ops/s
# Warmup Iteration   6: 383258.306 ops/s
# Warmup Iteration   7: 425268.868 ops/s
# Warmup Iteration   8: 446197.606 ops/s
# Warmup Iteration   9: 440879.421 ops/s
# Warmup Iteration  10: 448940.195 ops/s
# Warmup Iteration  11: 426510.680 ops/s
# Warmup Iteration  12: 432719.120 ops/s
# Warmup Iteration  13: 440320.137 ops/s
# Warmup Iteration  14: 424798.576 ops/s
# Warmup Iteration  15: 440403.142 ops/s
# Warmup Iteration  16: 436211.758 ops/s
# Warmup Iteration  17: 463353.594 ops/s
# Warmup Iteration  18: 454367.484 ops/s
# Warmup Iteration  19: 439146.906 ops/s
# Warmup Iteration  20: 461469.537 ops/s
# Warmup Iteration  21: 437124.534 ops/s
# Warmup Iteration  22: 459148.882 ops/s
# Warmup Iteration  23: 457104.377 ops/s
# Warmup Iteration  24: 440922.716 ops/s
# Warmup Iteration  25: 448708.170 ops/s
# Warmup Iteration  26: 472682.896 ops/s
# Warmup Iteration  27: 453406.085 ops/s
# Warmup Iteration  28: 439678.506 ops/s
# Warmup Iteration  29: 444409.568 ops/s
# Warmup Iteration  30: 454376.875 ops/s
Iteration   1: 440002.819 ops/s
Iteration   2: 467983.108 ops/s
Iteration   3: 435373.813 ops/s
Iteration   4: 446853.432 ops/s
Iteration   5: 468347.140 ops/s
Iteration   6: 434757.764 ops/s
Iteration   7: 461601.581 ops/s
Iteration   8: 454581.171 ops/s
Iteration   9: 448660.563 ops/s
Iteration  10: 469490.627 ops/s
Iteration  11: 444596.510 ops/s
Iteration  12: 467156.188 ops/s
Iteration  13: 437386.262 ops/s
Iteration  14: 435654.669 ops/s
Iteration  15: 458967.827 ops/s
Iteration  16: 440819.734 ops/s
Iteration  17: 447740.028 ops/s
Iteration  18: 467158.021 ops/s
Iteration  19: 452515.382 ops/s
Iteration  20: 436014.745 ops/s
Iteration  21: 360182.382 ops/s
Iteration  22: 437634.617 ops/s
Iteration  23: 456698.673 ops/s
Iteration  24: 441742.106 ops/s
Iteration  25: 443568.168 ops/s
Iteration  26: 458650.712 ops/s
Iteration  27: 453062.433 ops/s
Iteration  28: 449063.700 ops/s
Iteration  29: 443100.129 ops/s
Iteration  30: 453317.215 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone2":
  447089.384 ±(99.9%) 13230.291 ops/s [Average]
  (min, avg, max) = (360182.382, 447089.384, 469490.627), stdev = 19802.478
  CI (99.9%): [433859.093, 460319.675] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone2  thrpt   30  447089.384 ± 13230.291  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_mainIgnoresCancelBeforeOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_mainIgnoresCancelBeforeOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4091.461 ops/s
# Warmup Iteration   2: 27460.249 ops/s
# Warmup Iteration   3: 64576.088 ops/s
# Warmup Iteration   4: 102296.879 ops/s
# Warmup Iteration   5: 120481.034 ops/s
# Warmup Iteration   6: 109075.923 ops/s
# Warmup Iteration   7: 118956.973 ops/s
# Warmup Iteration   8: 126280.975 ops/s
# Warmup Iteration   9: 119488.247 ops/s
# Warmup Iteration  10: 123555.697 ops/s
# Warmup Iteration  11: 123480.848 ops/s
# Warmup Iteration  12: 119314.459 ops/s
# Warmup Iteration  13: 125493.483 ops/s
# Warmup Iteration  14: 119917.510 ops/s
# Warmup Iteration  15: 124887.523 ops/s
# Warmup Iteration  16: 123472.503 ops/s
# Warmup Iteration  17: 122839.673 ops/s
# Warmup Iteration  18: 125745.501 ops/s
# Warmup Iteration  19: 127393.207 ops/s
# Warmup Iteration  20: 124456.118 ops/s
# Warmup Iteration  21: 124556.860 ops/s
# Warmup Iteration  22: 123368.834 ops/s
# Warmup Iteration  23: 131046.951 ops/s
# Warmup Iteration  24: 126508.342 ops/s
# Warmup Iteration  25: 123481.491 ops/s
# Warmup Iteration  26: 128394.962 ops/s
# Warmup Iteration  27: 123747.333 ops/s
# Warmup Iteration  28: 123031.392 ops/s
# Warmup Iteration  29: 127727.493 ops/s
# Warmup Iteration  30: 124529.330 ops/s
Iteration   1: 123718.235 ops/s
Iteration   2: 122330.743 ops/s
Iteration   3: 124460.961 ops/s
Iteration   4: 124416.182 ops/s
Iteration   5: 127692.575 ops/s
Iteration   6: 122894.005 ops/s
Iteration   7: 129441.793 ops/s
Iteration   8: 122026.544 ops/s
Iteration   9: 127301.315 ops/s
Iteration  10: 123829.736 ops/s
Iteration  11: 125007.529 ops/s
Iteration  12: 127065.206 ops/s
Iteration  13: 125846.476 ops/s
Iteration  14: 120048.140 ops/s
Iteration  15: 126613.009 ops/s
Iteration  16: 122999.332 ops/s
Iteration  17: 125080.894 ops/s
Iteration  18: 128354.269 ops/s
Iteration  19: 124620.547 ops/s
Iteration  20: 127396.766 ops/s
Iteration  21: 122803.378 ops/s
Iteration  22: 128930.033 ops/s
Iteration  23: 120685.509 ops/s
Iteration  24: 125750.352 ops/s
Iteration  25: 127651.852 ops/s
Iteration  26: 121784.457 ops/s
Iteration  27: 126312.785 ops/s
Iteration  28: 123992.008 ops/s
Iteration  29: 127653.397 ops/s
Iteration  30: 123410.875 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_mainIgnoresCancelBeforeOnError":
  125003.963 ±(99.9%) 1658.487 ops/s [Average]
  (min, avg, max) = (120048.140, 125003.963, 129441.793), stdev = 2482.346
  CI (99.9%): [123345.476, 126662.451] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_mainIgnoresCancelBeforeOnError  thrpt   30  125003.963 ± 1658.487  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 37138.905 ops/s
# Warmup Iteration   2: 180397.770 ops/s
# Warmup Iteration   3: 237669.267 ops/s
# Warmup Iteration   4: 763142.871 ops/s
# Warmup Iteration   5: 734840.329 ops/s
# Warmup Iteration   6: 700172.191 ops/s
# Warmup Iteration   7: 652288.843 ops/s
# Warmup Iteration   8: 703945.452 ops/s
# Warmup Iteration   9: 775817.041 ops/s
# Warmup Iteration  10: 725078.856 ops/s
# Warmup Iteration  11: 705693.460 ops/s
# Warmup Iteration  12: 768101.369 ops/s
# Warmup Iteration  13: 729769.808 ops/s
# Warmup Iteration  14: 775765.407 ops/s
# Warmup Iteration  15: 770835.925 ops/s
# Warmup Iteration  16: 754085.875 ops/s
# Warmup Iteration  17: 738857.731 ops/s
# Warmup Iteration  18: 776650.243 ops/s
# Warmup Iteration  19: 732791.486 ops/s
# Warmup Iteration  20: 768881.162 ops/s
# Warmup Iteration  21: 735410.523 ops/s
# Warmup Iteration  22: 743389.141 ops/s
# Warmup Iteration  23: 780732.309 ops/s
# Warmup Iteration  24: 739096.678 ops/s
# Warmup Iteration  25: 777316.853 ops/s
# Warmup Iteration  26: 743870.628 ops/s
# Warmup Iteration  27: 783187.405 ops/s
# Warmup Iteration  28: 726723.904 ops/s
# Warmup Iteration  29: 715830.278 ops/s
# Warmup Iteration  30: 759796.894 ops/s
Iteration   1: 735067.341 ops/s
Iteration   2: 755185.433 ops/s
Iteration   3: 735164.568 ops/s
Iteration   4: 746841.986 ops/s
Iteration   5: 748437.748 ops/s
Iteration   6: 762196.294 ops/s
Iteration   7: 759183.492 ops/s
Iteration   8: 771839.030 ops/s
Iteration   9: 733390.910 ops/s
Iteration  10: 770353.485 ops/s
Iteration  11: 737391.968 ops/s
Iteration  12: 733656.624 ops/s
Iteration  13: 719771.787 ops/s
Iteration  14: 785554.412 ops/s
Iteration  15: 563704.111 ops/s
Iteration  16: 733129.413 ops/s
Iteration  17: 773393.624 ops/s
Iteration  18: 747478.069 ops/s
Iteration  19: 728938.479 ops/s
Iteration  20: 766677.067 ops/s
Iteration  21: 742448.359 ops/s
Iteration  22: 765826.165 ops/s
Iteration  23: 767347.959 ops/s
Iteration  24: 725725.965 ops/s
Iteration  25: 769030.465 ops/s
Iteration  26: 730064.500 ops/s
Iteration  27: 772544.764 ops/s
Iteration  28: 728525.276 ops/s
Iteration  29: 749586.415 ops/s
Iteration  30: 773180.279 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamOverlap":
  744387.866 ±(99.9%) 25807.962 ops/s [Average]
  (min, avg, max) = (563704.111, 744387.866, 785554.412), stdev = 38628.145
  CI (99.9%): [718579.905, 770195.828] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_windowAbandonmentCancelsUpstreamOverlap  thrpt   30  744387.866 ± 25807.962  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_callbackThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_callbackThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14167.275 ops/s
# Warmup Iteration   2: 102851.870 ops/s
# Warmup Iteration   3: 103816.517 ops/s
# Warmup Iteration   4: 116811.180 ops/s
# Warmup Iteration   5: 122082.095 ops/s
# Warmup Iteration   6: 114330.838 ops/s
# Warmup Iteration   7: 123621.025 ops/s
# Warmup Iteration   8: 116365.977 ops/s
# Warmup Iteration   9: 118498.127 ops/s
# Warmup Iteration  10: 116755.219 ops/s
# Warmup Iteration  11: 116365.707 ops/s
# Warmup Iteration  12: 114196.845 ops/s
# Warmup Iteration  13: 114044.708 ops/s
# Warmup Iteration  14: 121828.386 ops/s
# Warmup Iteration  15: 112366.240 ops/s
# Warmup Iteration  16: 122420.527 ops/s
# Warmup Iteration  17: 131891.137 ops/s
# Warmup Iteration  18: 121939.930 ops/s
# Warmup Iteration  19: 128478.261 ops/s
# Warmup Iteration  20: 123366.007 ops/s
# Warmup Iteration  21: 125515.891 ops/s
# Warmup Iteration  22: 130410.746 ops/s
# Warmup Iteration  23: 123170.409 ops/s
# Warmup Iteration  24: 126766.810 ops/s
# Warmup Iteration  25: 126240.549 ops/s
# Warmup Iteration  26: 125610.889 ops/s
# Warmup Iteration  27: 126971.931 ops/s
# Warmup Iteration  28: 124745.254 ops/s
# Warmup Iteration  29: 126225.782 ops/s
# Warmup Iteration  30: 123034.457 ops/s
Iteration   1: 127066.778 ops/s
Iteration   2: 127875.060 ops/s
Iteration   3: 129742.023 ops/s
Iteration   4: 127187.438 ops/s
Iteration   5: 121072.349 ops/s
Iteration   6: 128278.180 ops/s
Iteration   7: 127761.754 ops/s
Iteration   8: 122193.467 ops/s
Iteration   9: 127900.373 ops/s
Iteration  10: 123492.839 ops/s
Iteration  11: 124266.614 ops/s
Iteration  12: 128883.214 ops/s
Iteration  13: 123440.771 ops/s
Iteration  14: 129449.234 ops/s
Iteration  15: 126570.974 ops/s
Iteration  16: 122621.952 ops/s
Iteration  17: 119296.943 ops/s
Iteration  18: 126756.293 ops/s
Iteration  19: 124116.757 ops/s
Iteration  20: 131217.676 ops/s
Iteration  21: 129307.090 ops/s
Iteration  22: 124020.457 ops/s
Iteration  23: 128783.434 ops/s
Iteration  24: 126030.488 ops/s
Iteration  25: 127068.208 ops/s
Iteration  26: 123167.285 ops/s
Iteration  27: 128562.627 ops/s
Iteration  28: 127965.316 ops/s
Iteration  29: 124172.109 ops/s
Iteration  30: 125430.389 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_callbackThrows":
  126123.270 ±(99.9%) 1922.867 ops/s [Average]
  (min, avg, max) = (119296.943, 126123.270, 131217.676), stdev = 2878.056
  CI (99.9%): [124200.403, 128046.136] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
FlowableCreateTest._Benchmark.benchmark_callbackThrows  thrpt   30  126123.270 ± 1922.867  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_serialized$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_serialized

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 178219.899 ops/s
# Warmup Iteration   2: 608553.736 ops/s
# Warmup Iteration   3: 1364839.034 ops/s
# Warmup Iteration   4: 1606400.962 ops/s
# Warmup Iteration   5: 1701063.189 ops/s
# Warmup Iteration   6: 1682306.135 ops/s
# Warmup Iteration   7: 1636700.995 ops/s
# Warmup Iteration   8: 1714465.454 ops/s
# Warmup Iteration   9: 1522208.078 ops/s
# Warmup Iteration  10: 1615233.189 ops/s
# Warmup Iteration  11: 1627140.800 ops/s
# Warmup Iteration  12: 1528888.502 ops/s
# Warmup Iteration  13: 1730433.360 ops/s
# Warmup Iteration  14: 1635546.456 ops/s
# Warmup Iteration  15: 1765424.036 ops/s
# Warmup Iteration  16: 1715160.236 ops/s
# Warmup Iteration  17: 1597271.077 ops/s
# Warmup Iteration  18: 1678183.456 ops/s
# Warmup Iteration  19: 1717460.753 ops/s
# Warmup Iteration  20: 1722141.568 ops/s
# Warmup Iteration  21: 1615841.635 ops/s
# Warmup Iteration  22: 1723162.133 ops/s
# Warmup Iteration  23: 1696902.944 ops/s
# Warmup Iteration  24: 1628223.610 ops/s
# Warmup Iteration  25: 1711596.572 ops/s
# Warmup Iteration  26: 1661193.507 ops/s
# Warmup Iteration  27: 1700808.569 ops/s
# Warmup Iteration  28: 1693339.679 ops/s
# Warmup Iteration  29: 1683602.756 ops/s
# Warmup Iteration  30: 1696216.345 ops/s
Iteration   1: 1695989.363 ops/s
Iteration   2: 1673054.589 ops/s
Iteration   3: 1717964.902 ops/s
Iteration   4: 1705119.906 ops/s
Iteration   5: 1624243.703 ops/s
Iteration   6: 1716150.281 ops/s
Iteration   7: 1730862.818 ops/s
Iteration   8: 1669716.583 ops/s
Iteration   9: 1656094.713 ops/s
Iteration  10: 1412496.147 ops/s
Iteration  11: 1666172.314 ops/s
Iteration  12: 1709364.661 ops/s
Iteration  13: 1675517.249 ops/s
Iteration  14: 1744802.221 ops/s
Iteration  15: 1710879.248 ops/s
Iteration  16: 1660455.690 ops/s
Iteration  17: 1719844.837 ops/s
Iteration  18: 1697700.889 ops/s
Iteration  19: 1725416.748 ops/s
Iteration  20: 1687099.029 ops/s
Iteration  21: 1680531.164 ops/s
Iteration  22: 1731109.202 ops/s
Iteration  23: 1656057.353 ops/s
Iteration  24: 1677657.677 ops/s
Iteration  25: 1749247.367 ops/s
Iteration  26: 1645450.915 ops/s
Iteration  27: 1743692.431 ops/s
Iteration  28: 1655123.771 ops/s
Iteration  29: 1746532.321 ops/s
Iteration  30: 1698846.406 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_serialized":
  1686106.483 ±(99.9%) 41102.089 ops/s [Average]
  (min, avg, max) = (1412496.147, 1686106.483, 1749247.367), stdev = 61519.677
  CI (99.9%): [1645004.394, 1727208.573] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableCreateTest._Benchmark.benchmark_serialized  thrpt   30  1686106.483 ± 41102.089  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_fusedFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_fusedFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93574.978 ops/s
# Warmup Iteration   2: 540624.653 ops/s
# Warmup Iteration   3: 638805.531 ops/s
# Warmup Iteration   4: 747810.530 ops/s
# Warmup Iteration   5: 733645.361 ops/s
# Warmup Iteration   6: 798258.849 ops/s
# Warmup Iteration   7: 663976.322 ops/s
# Warmup Iteration   8: 781014.359 ops/s
# Warmup Iteration   9: 799393.960 ops/s
# Warmup Iteration  10: 768401.237 ops/s
# Warmup Iteration  11: 799059.625 ops/s
# Warmup Iteration  12: 769872.912 ops/s
# Warmup Iteration  13: 797564.983 ops/s
# Warmup Iteration  14: 794466.971 ops/s
# Warmup Iteration  15: 780362.918 ops/s
# Warmup Iteration  16: 786674.775 ops/s
# Warmup Iteration  17: 758427.835 ops/s
# Warmup Iteration  18: 799462.738 ops/s
# Warmup Iteration  19: 756716.358 ops/s
# Warmup Iteration  20: 800535.368 ops/s
# Warmup Iteration  21: 770645.163 ops/s
# Warmup Iteration  22: 799251.339 ops/s
# Warmup Iteration  23: 792150.642 ops/s
# Warmup Iteration  24: 760196.127 ops/s
# Warmup Iteration  25: 749917.614 ops/s
# Warmup Iteration  26: 814952.690 ops/s
# Warmup Iteration  27: 802124.289 ops/s
# Warmup Iteration  28: 766387.197 ops/s
# Warmup Iteration  29: 774506.811 ops/s
# Warmup Iteration  30: 825072.598 ops/s
Iteration   1: 774211.408 ops/s
Iteration   2: 796839.403 ops/s
Iteration   3: 781435.510 ops/s
Iteration   4: 773070.311 ops/s
Iteration   5: 797440.023 ops/s
Iteration   6: 772308.853 ops/s
Iteration   7: 805637.973 ops/s
Iteration   8: 775142.491 ops/s
Iteration   9: 809675.813 ops/s
Iteration  10: 794295.446 ops/s
Iteration  11: 762465.950 ops/s
Iteration  12: 791504.916 ops/s
Iteration  13: 775871.231 ops/s
Iteration  14: 765974.171 ops/s
Iteration  15: 791178.352 ops/s
Iteration  16: 762183.994 ops/s
Iteration  17: 777876.038 ops/s
Iteration  18: 813274.640 ops/s
Iteration  19: 767888.752 ops/s
Iteration  20: 793340.866 ops/s
Iteration  21: 758568.325 ops/s
Iteration  22: 794237.159 ops/s
Iteration  23: 786226.953 ops/s
Iteration  24: 771308.180 ops/s
Iteration  25: 805073.321 ops/s
Iteration  26: 768373.448 ops/s
Iteration  27: 815760.336 ops/s
Iteration  28: 793907.775 ops/s
Iteration  29: 745558.601 ops/s
Iteration  30: 809800.263 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_fusedFlowable":
  784347.683 ±(99.9%) 12123.106 ops/s [Average]
  (min, avg, max) = (745558.601, 784347.683, 815760.336), stdev = 18145.296
  CI (99.9%): [772224.577, 796470.789] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_fusedFlowable  thrpt   30  784347.683 ± 12123.106  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_fused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_fused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 117852.561 ops/s
# Warmup Iteration   2: 558635.247 ops/s
# Warmup Iteration   3: 597878.893 ops/s
# Warmup Iteration   4: 791187.189 ops/s
# Warmup Iteration   5: 767350.027 ops/s
# Warmup Iteration   6: 775877.897 ops/s
# Warmup Iteration   7: 796167.447 ops/s
# Warmup Iteration   8: 751025.128 ops/s
# Warmup Iteration   9: 761867.208 ops/s
# Warmup Iteration  10: 804190.002 ops/s
# Warmup Iteration  11: 753972.021 ops/s
# Warmup Iteration  12: 744335.586 ops/s
# Warmup Iteration  13: 741166.597 ops/s
# Warmup Iteration  14: 775804.189 ops/s
# Warmup Iteration  15: 795042.035 ops/s
# Warmup Iteration  16: 777263.497 ops/s
# Warmup Iteration  17: 806643.904 ops/s
# Warmup Iteration  18: 785696.113 ops/s
# Warmup Iteration  19: 758964.771 ops/s
# Warmup Iteration  20: 807925.928 ops/s
# Warmup Iteration  21: 762047.461 ops/s
# Warmup Iteration  22: 796839.874 ops/s
# Warmup Iteration  23: 771335.904 ops/s
# Warmup Iteration  24: 759021.335 ops/s
# Warmup Iteration  25: 804457.838 ops/s
# Warmup Iteration  26: 755342.655 ops/s
# Warmup Iteration  27: 793584.287 ops/s
# Warmup Iteration  28: 801947.170 ops/s
# Warmup Iteration  29: 771202.022 ops/s
# Warmup Iteration  30: 814407.328 ops/s
Iteration   1: 820165.308 ops/s
Iteration   2: 796471.783 ops/s
Iteration   3: 759561.283 ops/s
Iteration   4: 641764.460 ops/s
Iteration   5: 760062.586 ops/s
Iteration   6: 804361.740 ops/s
Iteration   7: 776406.432 ops/s
Iteration   8: 800842.278 ops/s
Iteration   9: 746772.635 ops/s
Iteration  10: 816550.762 ops/s
Iteration  11: 806632.582 ops/s
Iteration  12: 770078.725 ops/s
Iteration  13: 798517.137 ops/s
Iteration  14: 767037.940 ops/s
Iteration  15: 784267.328 ops/s
Iteration  16: 786283.664 ops/s
Iteration  17: 773660.563 ops/s
Iteration  18: 804190.775 ops/s
Iteration  19: 774616.934 ops/s
Iteration  20: 811421.869 ops/s
Iteration  21: 773502.312 ops/s
Iteration  22: 795452.694 ops/s
Iteration  23: 801718.691 ops/s
Iteration  24: 755791.856 ops/s
Iteration  25: 793649.644 ops/s
Iteration  26: 807609.413 ops/s
Iteration  27: 758296.915 ops/s
Iteration  28: 798108.097 ops/s
Iteration  29: 759913.884 ops/s
Iteration  30: 808636.190 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_fused":
  781744.883 ±(99.9%) 22375.204 ops/s [Average]
  (min, avg, max) = (641764.460, 781744.883, 820165.308), stdev = 33490.154
  CI (99.9%): [759369.679, 804120.086] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_fused  thrpt   30  781744.883 ± 22375.204  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 248929.186 ops/s
# Warmup Iteration   2: 1431162.285 ops/s
# Warmup Iteration   3: 1990510.126 ops/s
# Warmup Iteration   4: 2477236.255 ops/s
# Warmup Iteration   5: 2652304.324 ops/s
# Warmup Iteration   6: 2753219.111 ops/s
# Warmup Iteration   7: 2529134.705 ops/s
# Warmup Iteration   8: 2664808.176 ops/s
# Warmup Iteration   9: 2544636.670 ops/s
# Warmup Iteration  10: 2561631.926 ops/s
# Warmup Iteration  11: 2647537.280 ops/s
# Warmup Iteration  12: 2492487.745 ops/s
# Warmup Iteration  13: 2591253.940 ops/s
# Warmup Iteration  14: 2706866.007 ops/s
# Warmup Iteration  15: 2617548.007 ops/s
# Warmup Iteration  16: 2650493.661 ops/s
# Warmup Iteration  17: 2698886.646 ops/s
# Warmup Iteration  18: 2518718.467 ops/s
# Warmup Iteration  19: 2722458.757 ops/s
# Warmup Iteration  20: 2468104.010 ops/s
# Warmup Iteration  21: 2613651.796 ops/s
# Warmup Iteration  22: 2664826.722 ops/s
# Warmup Iteration  23: 2562417.676 ops/s
# Warmup Iteration  24: 2641004.197 ops/s
# Warmup Iteration  25: 2594132.391 ops/s
# Warmup Iteration  26: 2654808.440 ops/s
# Warmup Iteration  27: 2580269.482 ops/s
# Warmup Iteration  28: 2641499.127 ops/s
# Warmup Iteration  29: 2667397.749 ops/s
# Warmup Iteration  30: 2580866.205 ops/s
Iteration   1: 2608419.813 ops/s
Iteration   2: 2690127.267 ops/s
Iteration   3: 2599524.490 ops/s
Iteration   4: 2569540.472 ops/s
Iteration   5: 2656365.780 ops/s
Iteration   6: 2579822.933 ops/s
Iteration   7: 2600186.315 ops/s
Iteration   8: 2670100.271 ops/s
Iteration   9: 2486419.331 ops/s
Iteration  10: 2622335.600 ops/s
Iteration  11: 2647168.554 ops/s
Iteration  12: 2639177.578 ops/s
Iteration  13: 2584920.324 ops/s
Iteration  14: 2585181.208 ops/s
Iteration  15: 2651226.136 ops/s
Iteration  16: 2565735.850 ops/s
Iteration  17: 2625528.130 ops/s
Iteration  18: 2677182.946 ops/s
Iteration  19: 2625660.123 ops/s
Iteration  20: 2604618.217 ops/s
Iteration  21: 2618677.221 ops/s
Iteration  22: 2664193.645 ops/s
Iteration  23: 2590922.678 ops/s
Iteration  24: 2634914.618 ops/s
Iteration  25: 2714804.482 ops/s
Iteration  26: 2578693.883 ops/s
Iteration  27: 2682273.403 ops/s
Iteration  28: 2600790.801 ops/s
Iteration  29: 2536587.877 ops/s
Iteration  30: 2719432.664 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_innerComplete":
  2621017.754 ±(99.9%) 34542.963 ops/s [Average]
  (min, avg, max) = (2486419.331, 2621017.754, 2719432.664), stdev = 51702.284
  CI (99.9%): [2586474.791, 2655560.716] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_innerComplete  thrpt   30  2621017.754 ± 34542.963  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24307.005 ops/s
# Warmup Iteration   2: 144601.863 ops/s
# Warmup Iteration   3: 205144.101 ops/s
# Warmup Iteration   4: 211173.940 ops/s
# Warmup Iteration   5: 217574.593 ops/s
# Warmup Iteration   6: 204153.521 ops/s
# Warmup Iteration   7: 209297.249 ops/s
# Warmup Iteration   8: 224300.310 ops/s
# Warmup Iteration   9: 216093.013 ops/s
# Warmup Iteration  10: 223415.848 ops/s
# Warmup Iteration  11: 214155.609 ops/s
# Warmup Iteration  12: 218329.922 ops/s
# Warmup Iteration  13: 222442.866 ops/s
# Warmup Iteration  14: 212309.024 ops/s
# Warmup Iteration  15: 228993.760 ops/s
# Warmup Iteration  16: 213602.703 ops/s
# Warmup Iteration  17: 230954.108 ops/s
# Warmup Iteration  18: 216200.915 ops/s
# Warmup Iteration  19: 230914.896 ops/s
# Warmup Iteration  20: 228179.191 ops/s
# Warmup Iteration  21: 226038.952 ops/s
# Warmup Iteration  22: 232525.547 ops/s
# Warmup Iteration  23: 216574.182 ops/s
# Warmup Iteration  24: 224510.261 ops/s
# Warmup Iteration  25: 216851.493 ops/s
# Warmup Iteration  26: 233034.796 ops/s
# Warmup Iteration  27: 230672.369 ops/s
# Warmup Iteration  28: 220651.497 ops/s
# Warmup Iteration  29: 178067.004 ops/s
# Warmup Iteration  30: 224854.463 ops/s
Iteration   1: 234398.927 ops/s
Iteration   2: 222778.016 ops/s
Iteration   3: 217934.932 ops/s
Iteration   4: 229047.161 ops/s
Iteration   5: 223864.008 ops/s
Iteration   6: 232033.734 ops/s
Iteration   7: 218077.063 ops/s
Iteration   8: 231234.474 ops/s
Iteration   9: 226604.336 ops/s
Iteration  10: 227067.852 ops/s
Iteration  11: 230412.882 ops/s
Iteration  12: 229699.052 ops/s
Iteration  13: 225619.943 ops/s
Iteration  14: 220950.980 ops/s
Iteration  15: 224219.433 ops/s
Iteration  16: 224210.596 ops/s
Iteration  17: 227213.561 ops/s
Iteration  18: 230430.592 ops/s
Iteration  19: 221036.978 ops/s
Iteration  20: 236619.592 ops/s
Iteration  21: 218645.389 ops/s
Iteration  22: 228254.155 ops/s
Iteration  23: 222307.617 ops/s
Iteration  24: 221223.132 ops/s
Iteration  25: 225752.585 ops/s
Iteration  26: 218004.832 ops/s
Iteration  27: 234415.090 ops/s
Iteration  28: 220700.987 ops/s
Iteration  29: 226483.713 ops/s
Iteration  30: 234877.271 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_badSource":
  226137.296 ±(99.9%) 3614.015 ops/s [Average]
  (min, avg, max) = (217934.932, 226137.296, 236619.592), stdev = 5409.289
  CI (99.9%): [222523.281, 229751.312] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_badSource  thrpt   30  226137.296 ± 3614.015  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_completeAfterMainDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_completeAfterMainDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 286367.344 ops/s
# Warmup Iteration   2: 1335678.906 ops/s
# Warmup Iteration   3: 1935996.937 ops/s
# Warmup Iteration   4: 2272097.779 ops/s
# Warmup Iteration   5: 2236552.565 ops/s
# Warmup Iteration   6: 2262459.403 ops/s
# Warmup Iteration   7: 2150425.953 ops/s
# Warmup Iteration   8: 2278181.289 ops/s
# Warmup Iteration   9: 2236112.009 ops/s
# Warmup Iteration  10: 2222831.344 ops/s
# Warmup Iteration  11: 2305261.905 ops/s
# Warmup Iteration  12: 2184171.357 ops/s
# Warmup Iteration  13: 2255598.352 ops/s
# Warmup Iteration  14: 2266831.819 ops/s
# Warmup Iteration  15: 2352859.327 ops/s
# Warmup Iteration  16: 2176114.645 ops/s
# Warmup Iteration  17: 2227459.371 ops/s
# Warmup Iteration  18: 2189177.899 ops/s
# Warmup Iteration  19: 2254479.757 ops/s
# Warmup Iteration  20: 2151835.375 ops/s
# Warmup Iteration  21: 2156631.937 ops/s
# Warmup Iteration  22: 2269108.302 ops/s
# Warmup Iteration  23: 2262819.160 ops/s
# Warmup Iteration  24: 2297781.493 ops/s
# Warmup Iteration  25: 2254367.930 ops/s
# Warmup Iteration  26: 2283690.140 ops/s
# Warmup Iteration  27: 2207040.973 ops/s
# Warmup Iteration  28: 2332455.148 ops/s
# Warmup Iteration  29: 2181137.242 ops/s
# Warmup Iteration  30: 2343541.921 ops/s
Iteration   1: 2182351.858 ops/s
Iteration   2: 2250081.011 ops/s
Iteration   3: 2216704.189 ops/s
Iteration   4: 2245245.305 ops/s
Iteration   5: 2282886.634 ops/s
Iteration   6: 2227676.237 ops/s
Iteration   7: 2344549.963 ops/s
Iteration   8: 2182346.625 ops/s
Iteration   9: 2321073.586 ops/s
Iteration  10: 2211797.195 ops/s
Iteration  11: 2240922.262 ops/s
Iteration  12: 2299291.676 ops/s
Iteration  13: 2187492.083 ops/s
Iteration  14: 2317646.714 ops/s
Iteration  15: 2273988.678 ops/s
Iteration  16: 2218821.939 ops/s
Iteration  17: 2317665.099 ops/s
Iteration  18: 2202197.816 ops/s
Iteration  19: 2319494.277 ops/s
Iteration  20: 2205977.432 ops/s
Iteration  21: 2295738.686 ops/s
Iteration  22: 2208817.417 ops/s
Iteration  23: 2209344.468 ops/s
Iteration  24: 2352712.300 ops/s
Iteration  25: 2136671.619 ops/s
Iteration  26: 2323056.249 ops/s
Iteration  27: 2109306.299 ops/s
Iteration  28: 2310167.293 ops/s
Iteration  29: 2180442.990 ops/s
Iteration  30: 2297583.433 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_completeAfterMainDelayError":
  2249068.378 ±(99.9%) 42645.202 ops/s [Average]
  (min, avg, max) = (2109306.299, 2249068.378, 2352712.300), stdev = 63829.336
  CI (99.9%): [2206423.176, 2291713.580] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_completeAfterMainDelayError  thrpt   30  2249068.378 ± 42645.202  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_badSourceFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_badSourceFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22932.955 ops/s
# Warmup Iteration   2: 159451.534 ops/s
# Warmup Iteration   3: 193344.140 ops/s
# Warmup Iteration   4: 192345.391 ops/s
# Warmup Iteration   5: 215049.934 ops/s
# Warmup Iteration   6: 224117.866 ops/s
# Warmup Iteration   7: 214150.403 ops/s
# Warmup Iteration   8: 220075.473 ops/s
# Warmup Iteration   9: 217263.790 ops/s
# Warmup Iteration  10: 223526.329 ops/s
# Warmup Iteration  11: 219630.476 ops/s
# Warmup Iteration  12: 218120.384 ops/s
# Warmup Iteration  13: 226353.377 ops/s
# Warmup Iteration  14: 210068.843 ops/s
# Warmup Iteration  15: 227623.819 ops/s
# Warmup Iteration  16: 218961.437 ops/s
# Warmup Iteration  17: 222418.727 ops/s
# Warmup Iteration  18: 235477.733 ops/s
# Warmup Iteration  19: 232671.200 ops/s
# Warmup Iteration  20: 224855.317 ops/s
# Warmup Iteration  21: 239450.672 ops/s
# Warmup Iteration  22: 236324.612 ops/s
# Warmup Iteration  23: 180396.574 ops/s
# Warmup Iteration  24: 226765.258 ops/s
# Warmup Iteration  25: 218709.637 ops/s
# Warmup Iteration  26: 236232.209 ops/s
# Warmup Iteration  27: 221459.743 ops/s
# Warmup Iteration  28: 236374.538 ops/s
# Warmup Iteration  29: 222586.838 ops/s
# Warmup Iteration  30: 234085.821 ops/s
Iteration   1: 226491.570 ops/s
Iteration   2: 233647.741 ops/s
Iteration   3: 221818.626 ops/s
Iteration   4: 225455.821 ops/s
Iteration   5: 236585.478 ops/s
Iteration   6: 226227.890 ops/s
Iteration   7: 231491.681 ops/s
Iteration   8: 228037.283 ops/s
Iteration   9: 230631.817 ops/s
Iteration  10: 225561.728 ops/s
Iteration  11: 229865.084 ops/s
Iteration  12: 232019.431 ops/s
Iteration  13: 223466.430 ops/s
Iteration  14: 234206.302 ops/s
Iteration  15: 225535.247 ops/s
Iteration  16: 225486.626 ops/s
Iteration  17: 227148.051 ops/s
Iteration  18: 225002.525 ops/s
Iteration  19: 229607.352 ops/s
Iteration  20: 226065.742 ops/s
Iteration  21: 237408.546 ops/s
Iteration  22: 234320.023 ops/s
Iteration  23: 223355.411 ops/s
Iteration  24: 235899.177 ops/s
Iteration  25: 219129.545 ops/s
Iteration  26: 238715.584 ops/s
Iteration  27: 227078.918 ops/s
Iteration  28: 228651.621 ops/s
Iteration  29: 224358.923 ops/s
Iteration  30: 235338.456 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_badSourceFlowable":
  228953.621 ±(99.9%) 3363.402 ops/s [Average]
  (min, avg, max) = (219129.545, 228953.621, 238715.584), stdev = 5034.182
  CI (99.9%): [225590.219, 232317.023] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_badSourceFlowable  thrpt   30  228953.621 ± 3363.402  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribeCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribeCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81275.622 ops/s
# Warmup Iteration   2: 428346.993 ops/s
# Warmup Iteration   3: 432938.168 ops/s
# Warmup Iteration   4: 484397.050 ops/s
# Warmup Iteration   5: 485070.325 ops/s
# Warmup Iteration   6: 500294.633 ops/s
# Warmup Iteration   7: 495694.086 ops/s
# Warmup Iteration   8: 515620.881 ops/s
# Warmup Iteration   9: 502872.692 ops/s
# Warmup Iteration  10: 496042.818 ops/s
# Warmup Iteration  11: 496910.972 ops/s
# Warmup Iteration  12: 498727.816 ops/s
# Warmup Iteration  13: 497970.767 ops/s
# Warmup Iteration  14: 520935.467 ops/s
# Warmup Iteration  15: 493350.770 ops/s
# Warmup Iteration  16: 508859.919 ops/s
# Warmup Iteration  17: 513185.793 ops/s
# Warmup Iteration  18: 518951.962 ops/s
# Warmup Iteration  19: 527215.553 ops/s
# Warmup Iteration  20: 513011.377 ops/s
# Warmup Iteration  21: 532103.346 ops/s
# Warmup Iteration  22: 516828.271 ops/s
# Warmup Iteration  23: 525904.957 ops/s
# Warmup Iteration  24: 544958.834 ops/s
# Warmup Iteration  25: 510371.981 ops/s
# Warmup Iteration  26: 536416.389 ops/s
# Warmup Iteration  27: 507763.457 ops/s
# Warmup Iteration  28: 516998.918 ops/s
# Warmup Iteration  29: 536078.128 ops/s
# Warmup Iteration  30: 508201.279 ops/s
Iteration   1: 544100.153 ops/s
Iteration   2: 520273.666 ops/s
Iteration   3: 530496.574 ops/s
Iteration   4: 522162.631 ops/s
Iteration   5: 515645.970 ops/s
Iteration   6: 542112.083 ops/s
Iteration   7: 519541.492 ops/s
Iteration   8: 524869.239 ops/s
Iteration   9: 516199.813 ops/s
Iteration  10: 539781.923 ops/s
Iteration  11: 520960.370 ops/s
Iteration  12: 531162.990 ops/s
Iteration  13: 526915.889 ops/s
Iteration  14: 510863.499 ops/s
Iteration  15: 533508.128 ops/s
Iteration  16: 518135.803 ops/s
Iteration  17: 523681.225 ops/s
Iteration  18: 524093.825 ops/s
Iteration  19: 524377.336 ops/s
Iteration  20: 549125.565 ops/s
Iteration  21: 510319.528 ops/s
Iteration  22: 533275.794 ops/s
Iteration  23: 509730.541 ops/s
Iteration  24: 521193.479 ops/s
Iteration  25: 544090.183 ops/s
Iteration  26: 511461.184 ops/s
Iteration  27: 530872.180 ops/s
Iteration  28: 527183.330 ops/s
Iteration  29: 507613.046 ops/s
Iteration  30: 548523.315 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribeCompletable":
  526075.692 ±(99.9%) 7879.262 ops/s [Average]
  (min, avg, max) = (507613.046, 526075.692, 549125.565), stdev = 11793.309
  CI (99.9%): [518196.430, 533954.954] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_doubleOnSubscribeCompletable  thrpt   30  526075.692 ± 7879.262  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_arrayUndeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_arrayUndeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 17262.853 ops/s
# Warmup Iteration   2: 115796.993 ops/s
# Warmup Iteration   3: 134589.088 ops/s
# Warmup Iteration   4: 158924.678 ops/s
# Warmup Iteration   5: 150161.940 ops/s
# Warmup Iteration   6: 164273.832 ops/s
# Warmup Iteration   7: 168729.731 ops/s
# Warmup Iteration   8: 164186.459 ops/s
# Warmup Iteration   9: 168671.109 ops/s
# Warmup Iteration  10: 166576.334 ops/s
# Warmup Iteration  11: 170300.173 ops/s
# Warmup Iteration  12: 169384.027 ops/s
# Warmup Iteration  13: 167305.414 ops/s
# Warmup Iteration  14: 172383.078 ops/s
# Warmup Iteration  15: 164260.505 ops/s
# Warmup Iteration  16: 167618.185 ops/s
# Warmup Iteration  17: 175562.963 ops/s
# Warmup Iteration  18: 168241.434 ops/s
# Warmup Iteration  19: 149002.960 ops/s
# Warmup Iteration  20: 166671.728 ops/s
# Warmup Iteration  21: 182039.381 ops/s
# Warmup Iteration  22: 168197.092 ops/s
# Warmup Iteration  23: 175049.613 ops/s
# Warmup Iteration  24: 169177.099 ops/s
# Warmup Iteration  25: 170091.484 ops/s
# Warmup Iteration  26: 171849.224 ops/s
# Warmup Iteration  27: 172094.850 ops/s
# Warmup Iteration  28: 167538.804 ops/s
# Warmup Iteration  29: 175823.833 ops/s
# Warmup Iteration  30: 172196.319 ops/s
Iteration   1: 175882.029 ops/s
Iteration   2: 167846.673 ops/s
Iteration   3: 172110.283 ops/s
Iteration   4: 172584.308 ops/s
Iteration   5: 172648.736 ops/s
Iteration   6: 170670.077 ops/s
Iteration   7: 169626.436 ops/s
Iteration   8: 178913.373 ops/s
Iteration   9: 166967.386 ops/s
Iteration  10: 169369.942 ops/s
Iteration  11: 166380.601 ops/s
Iteration  12: 170773.366 ops/s
Iteration  13: 174387.045 ops/s
Iteration  14: 169748.372 ops/s
Iteration  15: 169880.066 ops/s
Iteration  16: 175440.884 ops/s
Iteration  17: 172214.474 ops/s
Iteration  18: 173108.359 ops/s
Iteration  19: 170542.891 ops/s
Iteration  20: 170573.594 ops/s
Iteration  21: 176538.497 ops/s
Iteration  22: 167305.367 ops/s
Iteration  23: 176211.245 ops/s
Iteration  24: 170446.076 ops/s
Iteration  25: 177439.949 ops/s
Iteration  26: 173112.533 ops/s
Iteration  27: 169929.245 ops/s
Iteration  28: 179278.188 ops/s
Iteration  29: 168381.299 ops/s
Iteration  30: 182514.405 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_arrayUndeliverableUponCancelDelayError":
  172360.857 ±(99.9%) 2651.553 ops/s [Average]
  (min, avg, max) = (166380.601, 172360.857, 182514.405), stdev = 3968.719
  CI (99.9%): [169709.304, 175012.409] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
CompletableMergeTest._Benchmark.benchmark_arrayUndeliverableUponCancelDelayError  thrpt   30  172360.857 ± 2651.553  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowCloseIngoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowCloseIngoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7673.379 ops/s
# Warmup Iteration   2: 27720.618 ops/s
# Warmup Iteration   3: 57535.754 ops/s
# Warmup Iteration   4: 110554.375 ops/s
# Warmup Iteration   5: 138984.732 ops/s
# Warmup Iteration   6: 135564.411 ops/s
# Warmup Iteration   7: 136240.112 ops/s
# Warmup Iteration   8: 144574.127 ops/s
# Warmup Iteration   9: 133322.748 ops/s
# Warmup Iteration  10: 139271.421 ops/s
# Warmup Iteration  11: 133885.955 ops/s
# Warmup Iteration  12: 143445.815 ops/s
# Warmup Iteration  13: 132955.830 ops/s
# Warmup Iteration  14: 134305.631 ops/s
# Warmup Iteration  15: 130771.481 ops/s
# Warmup Iteration  16: 138763.498 ops/s
# Warmup Iteration  17: 134870.791 ops/s
# Warmup Iteration  18: 137540.543 ops/s
# Warmup Iteration  19: 151196.897 ops/s
# Warmup Iteration  20: 148287.744 ops/s
# Warmup Iteration  21: 140111.907 ops/s
# Warmup Iteration  22: 145930.957 ops/s
# Warmup Iteration  23: 143146.921 ops/s
# Warmup Iteration  24: 142662.046 ops/s
# Warmup Iteration  25: 148543.532 ops/s
# Warmup Iteration  26: 139582.051 ops/s
# Warmup Iteration  27: 147608.806 ops/s
# Warmup Iteration  28: 143045.341 ops/s
# Warmup Iteration  29: 150243.492 ops/s
# Warmup Iteration  30: 141370.895 ops/s
Iteration   1: 142640.809 ops/s
Iteration   2: 148300.030 ops/s
Iteration   3: 142734.746 ops/s
Iteration   4: 148645.597 ops/s
Iteration   5: 149459.327 ops/s
Iteration   6: 140856.384 ops/s
Iteration   7: 146805.935 ops/s
Iteration   8: 143371.732 ops/s
Iteration   9: 147693.698 ops/s
Iteration  10: 143726.251 ops/s
Iteration  11: 140575.945 ops/s
Iteration  12: 147201.098 ops/s
Iteration  13: 145206.850 ops/s
Iteration  14: 145754.799 ops/s
Iteration  15: 144543.472 ops/s
Iteration  16: 142774.181 ops/s
Iteration  17: 150641.765 ops/s
Iteration  18: 146809.673 ops/s
Iteration  19: 142103.997 ops/s
Iteration  20: 144892.930 ops/s
Iteration  21: 143807.797 ops/s
Iteration  22: 149685.833 ops/s
Iteration  23: 141347.211 ops/s
Iteration  24: 145829.273 ops/s
Iteration  25: 144525.845 ops/s
Iteration  26: 143957.985 ops/s
Iteration  27: 149370.919 ops/s
Iteration  28: 140745.911 ops/s
Iteration  29: 142911.376 ops/s
Iteration  30: 147631.641 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowCloseIngoresCancel":
  145151.767 ±(99.9%) 1949.595 ops/s [Average]
  (min, avg, max) = (140575.945, 145151.767, 150641.765), stdev = 2918.063
  CI (99.9%): [143202.172, 147101.363] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowCloseIngoresCancel  thrpt   30  145151.767 ± 1949.595  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_serializedCompleteOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_serializedCompleteOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 486256.278 ops/s
# Warmup Iteration   2: 1832779.297 ops/s
# Warmup Iteration   3: 3390410.906 ops/s
# Warmup Iteration   4: 3935633.814 ops/s
# Warmup Iteration   5: 4042069.804 ops/s
# Warmup Iteration   6: 3785590.444 ops/s
# Warmup Iteration   7: 3933789.379 ops/s
# Warmup Iteration   8: 3946379.514 ops/s
# Warmup Iteration   9: 3890901.446 ops/s
# Warmup Iteration  10: 4100431.477 ops/s
# Warmup Iteration  11: 3926773.007 ops/s
# Warmup Iteration  12: 3157512.311 ops/s
# Warmup Iteration  13: 3633851.633 ops/s
# Warmup Iteration  14: 3997720.341 ops/s
# Warmup Iteration  15: 3905326.113 ops/s
# Warmup Iteration  16: 3978000.028 ops/s
# Warmup Iteration  17: 3801593.001 ops/s
# Warmup Iteration  18: 3963865.004 ops/s
# Warmup Iteration  19: 3842143.454 ops/s
# Warmup Iteration  20: 3901499.197 ops/s
# Warmup Iteration  21: 4010227.723 ops/s
# Warmup Iteration  22: 3881582.471 ops/s
# Warmup Iteration  23: 4065761.365 ops/s
# Warmup Iteration  24: 3820235.664 ops/s
# Warmup Iteration  25: 4001593.549 ops/s
# Warmup Iteration  26: 3875532.446 ops/s
# Warmup Iteration  27: 3975438.654 ops/s
# Warmup Iteration  28: 4029499.913 ops/s
# Warmup Iteration  29: 3907424.005 ops/s
# Warmup Iteration  30: 4117984.126 ops/s
Iteration   1: 4024607.665 ops/s
Iteration   2: 3917144.045 ops/s
Iteration   3: 3929615.444 ops/s
Iteration   4: 4031449.599 ops/s
Iteration   5: 3780003.846 ops/s
Iteration   6: 4039027.312 ops/s
Iteration   7: 3861002.487 ops/s
Iteration   8: 3882102.907 ops/s
Iteration   9: 3971165.406 ops/s
Iteration  10: 3857791.148 ops/s
Iteration  11: 3971728.036 ops/s
Iteration  12: 3862035.670 ops/s
Iteration  13: 3990428.418 ops/s
Iteration  14: 4007370.322 ops/s
Iteration  15: 3890685.067 ops/s
Iteration  16: 4062427.698 ops/s
Iteration  17: 3788792.698 ops/s
Iteration  18: 4079595.893 ops/s
Iteration  19: 3935696.484 ops/s
Iteration  20: 3907240.847 ops/s
Iteration  21: 4039145.112 ops/s
Iteration  22: 3953071.210 ops/s
Iteration  23: 3947888.279 ops/s
Iteration  24: 4007074.862 ops/s
Iteration  25: 3923269.851 ops/s
Iteration  26: 3994173.883 ops/s
Iteration  27: 3796918.420 ops/s
Iteration  28: 3924169.813 ops/s
Iteration  29: 4094679.999 ops/s
Iteration  30: 3886088.411 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_serializedCompleteOnNext":
  3945213.028 ±(99.9%) 56640.396 ops/s [Average]
  (min, avg, max) = (3780003.846, 3945213.028, 4094679.999), stdev = 84776.684
  CI (99.9%): [3888572.632, 4001853.423] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableCreateTest._Benchmark.benchmark_serializedCompleteOnNext  thrpt   30  3945213.028 ± 56640.396  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 59642.167 ops/s
# Warmup Iteration   2: 205149.781 ops/s
# Warmup Iteration   3: 337809.697 ops/s
# Warmup Iteration   4: 739706.510 ops/s
# Warmup Iteration   5: 917244.747 ops/s
# Warmup Iteration   6: 840638.187 ops/s
# Warmup Iteration   7: 898272.013 ops/s
# Warmup Iteration   8: 904477.734 ops/s
# Warmup Iteration   9: 862118.023 ops/s
# Warmup Iteration  10: 905165.671 ops/s
# Warmup Iteration  11: 899785.764 ops/s
# Warmup Iteration  12: 844554.865 ops/s
# Warmup Iteration  13: 921963.246 ops/s
# Warmup Iteration  14: 849677.372 ops/s
# Warmup Iteration  15: 929888.552 ops/s
# Warmup Iteration  16: 883730.920 ops/s
# Warmup Iteration  17: 862734.069 ops/s
# Warmup Iteration  18: 888433.721 ops/s
# Warmup Iteration  19: 869227.770 ops/s
# Warmup Iteration  20: 862650.930 ops/s
# Warmup Iteration  21: 898540.910 ops/s
# Warmup Iteration  22: 842217.946 ops/s
# Warmup Iteration  23: 898008.142 ops/s
# Warmup Iteration  24: 906615.438 ops/s
# Warmup Iteration  25: 852944.196 ops/s
# Warmup Iteration  26: 898041.912 ops/s
# Warmup Iteration  27: 876333.292 ops/s
# Warmup Iteration  28: 871419.216 ops/s
# Warmup Iteration  29: 907010.356 ops/s
# Warmup Iteration  30: 861485.522 ops/s
Iteration   1: 907854.087 ops/s
Iteration   2: 883667.860 ops/s
Iteration   3: 848753.759 ops/s
Iteration   4: 861544.970 ops/s
Iteration   5: 886318.768 ops/s
Iteration   6: 850920.643 ops/s
Iteration   7: 854971.535 ops/s
Iteration   8: 889207.632 ops/s
Iteration   9: 874370.920 ops/s
Iteration  10: 874028.203 ops/s
Iteration  11: 883247.489 ops/s
Iteration  12: 869675.161 ops/s
Iteration  13: 921823.670 ops/s
Iteration  14: 872257.950 ops/s
Iteration  15: 886157.886 ops/s
Iteration  16: 856009.085 ops/s
Iteration  17: 894659.941 ops/s
Iteration  18: 837318.718 ops/s
Iteration  19: 892620.866 ops/s
Iteration  20: 889533.521 ops/s
Iteration  21: 832283.678 ops/s
Iteration  22: 906621.114 ops/s
Iteration  23: 850344.357 ops/s
Iteration  24: 880276.219 ops/s
Iteration  25: 851240.724 ops/s
Iteration  26: 889041.282 ops/s
Iteration  27: 879816.378 ops/s
Iteration  28: 857107.759 ops/s
Iteration  29: 853804.051 ops/s
Iteration  30: 885834.674 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_dispose":
  874043.763 ±(99.9%) 14442.221 ops/s [Average]
  (min, avg, max) = (832283.678, 874043.763, 921823.670), stdev = 21616.438
  CI (99.9%): [859601.542, 888485.984] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
FlowableGroupByTest._Benchmark.benchmark_dispose  thrpt   30  874043.763 ± 14442.221  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsIf3RequestedFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsIf3RequestedFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 753664.241 ops/s
# Warmup Iteration   2: 4033660.753 ops/s
# Warmup Iteration   3: 5905967.043 ops/s
# Warmup Iteration   4: 7082582.766 ops/s
# Warmup Iteration   5: 6783266.250 ops/s
# Warmup Iteration   6: 6710609.846 ops/s
# Warmup Iteration   7: 5836188.009 ops/s
# Warmup Iteration   8: 6719300.804 ops/s
# Warmup Iteration   9: 6986669.652 ops/s
# Warmup Iteration  10: 6746905.911 ops/s
# Warmup Iteration  11: 6956178.768 ops/s
# Warmup Iteration  12: 6970727.877 ops/s
# Warmup Iteration  13: 6752289.884 ops/s
# Warmup Iteration  14: 7258418.147 ops/s
# Warmup Iteration  15: 6741453.534 ops/s
# Warmup Iteration  16: 7046389.889 ops/s
# Warmup Iteration  17: 6784713.242 ops/s
# Warmup Iteration  18: 6931524.543 ops/s
# Warmup Iteration  19: 7150814.847 ops/s
# Warmup Iteration  20: 6764336.954 ops/s
# Warmup Iteration  21: 7028415.690 ops/s
# Warmup Iteration  22: 6863864.113 ops/s
# Warmup Iteration  23: 6687515.752 ops/s
# Warmup Iteration  24: 6936271.197 ops/s
# Warmup Iteration  25: 6940251.381 ops/s
# Warmup Iteration  26: 6904838.604 ops/s
# Warmup Iteration  27: 7063419.394 ops/s
# Warmup Iteration  28: 6725097.352 ops/s
# Warmup Iteration  29: 7090532.096 ops/s
# Warmup Iteration  30: 6855948.391 ops/s
Iteration   1: 7128053.263 ops/s
Iteration   2: 6835993.144 ops/s
Iteration   3: 7101687.392 ops/s
Iteration   4: 7049940.392 ops/s
Iteration   5: 6895882.280 ops/s
Iteration   6: 7159512.508 ops/s
Iteration   7: 6638618.551 ops/s
Iteration   8: 7087671.444 ops/s
Iteration   9: 6833338.268 ops/s
Iteration  10: 6805188.556 ops/s
Iteration  11: 7023226.510 ops/s
Iteration  12: 6814698.780 ops/s
Iteration  13: 7087405.198 ops/s
Iteration  14: 7116058.116 ops/s
Iteration  15: 6679548.807 ops/s
Iteration  16: 7042217.885 ops/s
Iteration  17: 6845447.215 ops/s
Iteration  18: 6998753.484 ops/s
Iteration  19: 7184807.857 ops/s
Iteration  20: 6784249.275 ops/s
Iteration  21: 7007076.485 ops/s
Iteration  22: 6750277.077 ops/s
Iteration  23: 6957321.183 ops/s
Iteration  24: 7208756.653 ops/s
Iteration  25: 6650888.835 ops/s
Iteration  26: 7221860.822 ops/s
Iteration  27: 6730813.993 ops/s
Iteration  28: 6885635.237 ops/s
Iteration  29: 7089606.934 ops/s
Iteration  30: 6648062.024 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsIf3RequestedFlowable":
  6942086.606 ±(99.9%) 121381.223 ops/s [Average]
  (min, avg, max) = (6638618.551, 6942086.606, 7221860.822), stdev = 181677.714
  CI (99.9%): [6820705.383, 7063467.828] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt        Score        Error  Units
FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsIf3RequestedFlowable  thrpt   30  6942086.606 ± 121381.223  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleRequestsExactlyWhatItNeedsIf1RequestedFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleRequestsExactlyWhatItNeedsIf1RequestedFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 509338.555 ops/s
# Warmup Iteration   2: 2926738.494 ops/s
# Warmup Iteration   3: 5443014.734 ops/s
# Warmup Iteration   4: 6128041.758 ops/s
# Warmup Iteration   5: 6403450.040 ops/s
# Warmup Iteration   6: 6114533.361 ops/s
# Warmup Iteration   7: 6281812.222 ops/s
# Warmup Iteration   8: 6224765.408 ops/s
# Warmup Iteration   9: 6287938.339 ops/s
# Warmup Iteration  10: 6510716.553 ops/s
# Warmup Iteration  11: 6127970.148 ops/s
# Warmup Iteration  12: 6449289.770 ops/s
# Warmup Iteration  13: 6262699.669 ops/s
# Warmup Iteration  14: 6370741.938 ops/s
# Warmup Iteration  15: 6199410.191 ops/s
# Warmup Iteration  16: 6213457.063 ops/s
# Warmup Iteration  17: 6249741.354 ops/s
# Warmup Iteration  18: 6554601.170 ops/s
# Warmup Iteration  19: 6048900.359 ops/s
# Warmup Iteration  20: 6480115.524 ops/s
# Warmup Iteration  21: 6225469.448 ops/s
# Warmup Iteration  22: 6237939.318 ops/s
# Warmup Iteration  23: 6383542.469 ops/s
# Warmup Iteration  24: 6245451.556 ops/s
# Warmup Iteration  25: 6443560.056 ops/s
# Warmup Iteration  26: 6224706.448 ops/s
# Warmup Iteration  27: 6150107.928 ops/s
# Warmup Iteration  28: 6506320.740 ops/s
# Warmup Iteration  29: 6038583.348 ops/s
# Warmup Iteration  30: 6375963.006 ops/s
Iteration   1: 6270277.527 ops/s
Iteration   2: 6591838.048 ops/s
Iteration   3: 6284907.394 ops/s
Iteration   4: 6219242.995 ops/s
Iteration   5: 6274320.162 ops/s
Iteration   6: 6170171.913 ops/s
Iteration   7: 6263916.475 ops/s
Iteration   8: 6263597.765 ops/s
Iteration   9: 6349639.790 ops/s
Iteration  10: 6507663.413 ops/s
Iteration  11: 6195340.253 ops/s
Iteration  12: 6321204.573 ops/s
Iteration  13: 6609792.045 ops/s
Iteration  14: 6257416.703 ops/s
Iteration  15: 5918795.296 ops/s
Iteration  16: 6415151.467 ops/s
Iteration  17: 6478838.843 ops/s
Iteration  18: 6165561.968 ops/s
Iteration  19: 6530839.209 ops/s
Iteration  20: 5957990.432 ops/s
Iteration  21: 6462109.093 ops/s
Iteration  22: 6111536.889 ops/s
Iteration  23: 6223283.910 ops/s
Iteration  24: 6452993.650 ops/s
Iteration  25: 6145697.456 ops/s
Iteration  26: 6370215.908 ops/s
Iteration  27: 6275351.036 ops/s
Iteration  28: 6260025.083 ops/s
Iteration  29: 6440147.818 ops/s
Iteration  30: 6098197.705 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleRequestsExactlyWhatItNeedsIf1RequestedFlowable":
  6296202.161 ±(99.9%) 112932.235 ops/s [Average]
  (min, avg, max) = (5918795.296, 6296202.161, 6609792.045), stdev = 169031.666
  CI (99.9%): [6183269.926, 6409134.396] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt        Score        Error  Units
FlowableSingleTest._Benchmark.benchmark_singleRequestsExactlyWhatItNeedsIf1RequestedFlowable  thrpt   30  6296202.161 ± 112932.235  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsIf1Then2RequestedFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsIf1Then2RequestedFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 211415.862 ops/s
# Warmup Iteration   2: 2865072.736 ops/s
# Warmup Iteration   3: 5302059.358 ops/s
# Warmup Iteration   4: 6603990.499 ops/s
# Warmup Iteration   5: 6537499.064 ops/s
# Warmup Iteration   6: 6254479.143 ops/s
# Warmup Iteration   7: 6634191.520 ops/s
# Warmup Iteration   8: 6349915.585 ops/s
# Warmup Iteration   9: 6535674.007 ops/s
# Warmup Iteration  10: 6411698.472 ops/s
# Warmup Iteration  11: 6467193.157 ops/s
# Warmup Iteration  12: 6668897.998 ops/s
# Warmup Iteration  13: 6201907.543 ops/s
# Warmup Iteration  14: 6628568.674 ops/s
# Warmup Iteration  15: 6341535.495 ops/s
# Warmup Iteration  16: 6703143.240 ops/s
# Warmup Iteration  17: 6577202.748 ops/s
# Warmup Iteration  18: 6417681.780 ops/s
# Warmup Iteration  19: 6655410.034 ops/s
# Warmup Iteration  20: 6317864.300 ops/s
# Warmup Iteration  21: 6688153.648 ops/s
# Warmup Iteration  22: 6375815.506 ops/s
# Warmup Iteration  23: 6526567.001 ops/s
# Warmup Iteration  24: 6403567.887 ops/s
# Warmup Iteration  25: 6520481.261 ops/s
# Warmup Iteration  26: 6661179.068 ops/s
# Warmup Iteration  27: 6327881.216 ops/s
# Warmup Iteration  28: 6414195.010 ops/s
# Warmup Iteration  29: 6692700.302 ops/s
# Warmup Iteration  30: 6306572.684 ops/s
Iteration   1: 6615946.888 ops/s
Iteration   2: 6261838.206 ops/s
Iteration   3: 6654497.133 ops/s
Iteration   4: 6296705.973 ops/s
Iteration   5: 6362435.496 ops/s
Iteration   6: 6722374.504 ops/s
Iteration   7: 6459560.935 ops/s
Iteration   8: 6201332.257 ops/s
Iteration   9: 6760340.137 ops/s
Iteration  10: 6476384.197 ops/s
Iteration  11: 6459663.956 ops/s
Iteration  12: 6714624.953 ops/s
Iteration  13: 6761191.039 ops/s
Iteration  14: 6517957.272 ops/s
Iteration  15: 6175672.296 ops/s
Iteration  16: 6625369.071 ops/s
Iteration  17: 6422567.020 ops/s
Iteration  18: 6429054.993 ops/s
Iteration  19: 6697955.221 ops/s
Iteration  20: 6368299.381 ops/s
Iteration  21: 6742099.946 ops/s
Iteration  22: 6466769.454 ops/s
Iteration  23: 6508604.593 ops/s
Iteration  24: 6414546.808 ops/s
Iteration  25: 6345180.123 ops/s
Iteration  26: 6589352.683 ops/s
Iteration  27: 6481752.381 ops/s
Iteration  28: 6368746.528 ops/s
Iteration  29: 6680105.105 ops/s
Iteration  30: 6206720.502 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsIf1Then2RequestedFlowable":
  6492921.635 ±(99.9%) 117774.896 ops/s [Average]
  (min, avg, max) = (6175672.296, 6492921.635, 6761191.039), stdev = 176279.933
  CI (99.9%): [6375146.739, 6610696.531] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt        Score        Error  Units
FlowableSingleTest._Benchmark.benchmark_singleDoesNotRequestMoreThanItNeedsIf1Then2RequestedFlowable  thrpt   30  6492921.635 ± 117774.896  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex1OnEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex1OnEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2434026.935 ops/s
# Warmup Iteration   2: 6685423.730 ops/s
# Warmup Iteration   3: 9597084.788 ops/s
# Warmup Iteration   4: 8996932.222 ops/s
# Warmup Iteration   5: 9556788.988 ops/s
# Warmup Iteration   6: 9304608.513 ops/s
# Warmup Iteration   7: 9474106.979 ops/s
# Warmup Iteration   8: 9282066.395 ops/s
# Warmup Iteration   9: 9466101.625 ops/s
# Warmup Iteration  10: 9297446.772 ops/s
# Warmup Iteration  11: 9187222.939 ops/s
# Warmup Iteration  12: 9574565.171 ops/s
# Warmup Iteration  13: 9267417.270 ops/s
# Warmup Iteration  14: 9680757.152 ops/s
# Warmup Iteration  15: 9141920.656 ops/s
# Warmup Iteration  16: 9431861.178 ops/s
# Warmup Iteration  17: 9316495.800 ops/s
# Warmup Iteration  18: 9641892.735 ops/s
# Warmup Iteration  19: 9648074.629 ops/s
# Warmup Iteration  20: 9255412.954 ops/s
# Warmup Iteration  21: 9514291.097 ops/s
# Warmup Iteration  22: 9248099.605 ops/s
# Warmup Iteration  23: 9516412.554 ops/s
# Warmup Iteration  24: 9504017.287 ops/s
# Warmup Iteration  25: 9187615.392 ops/s
# Warmup Iteration  26: 9779311.375 ops/s
# Warmup Iteration  27: 9273765.947 ops/s
# Warmup Iteration  28: 9278058.511 ops/s
# Warmup Iteration  29: 9721112.008 ops/s
# Warmup Iteration  30: 9296767.498 ops/s
Iteration   1: 9663800.775 ops/s
Iteration   2: 9050538.350 ops/s
Iteration   3: 9418453.619 ops/s
Iteration   4: 9589993.724 ops/s
Iteration   5: 9121666.459 ops/s
Iteration   6: 9621194.342 ops/s
Iteration   7: 9044381.165 ops/s
Iteration   8: 9470993.824 ops/s
Iteration   9: 9516222.515 ops/s
Iteration  10: 9056940.049 ops/s
Iteration  11: 9409852.464 ops/s
Iteration  12: 9733529.839 ops/s
Iteration  13: 9181558.827 ops/s
Iteration  14: 9720002.097 ops/s
Iteration  15: 9333546.535 ops/s
Iteration  16: 9327690.715 ops/s
Iteration  17: 9277833.924 ops/s
Iteration  18: 9594081.769 ops/s
Iteration  19: 9248921.187 ops/s
Iteration  20: 9098907.389 ops/s
Iteration  21: 9610123.301 ops/s
Iteration  22: 9034630.784 ops/s
Iteration  23: 9673337.304 ops/s
Iteration  24: 9499048.740 ops/s
Iteration  25: 9356844.029 ops/s
Iteration  26: 9555196.135 ops/s
Iteration  27: 9299460.623 ops/s
Iteration  28: 6748095.299 ops/s
Iteration  29: 9855568.040 ops/s
Iteration  30: 9349767.866 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex1OnEmptySource":
  9315406.056 ±(99.9%) 359161.100 ops/s [Average]
  (min, avg, max) = (6748095.299, 9315406.056, 9855568.040), stdev = 537575.468
  CI (99.9%): [8956244.956, 9674567.157] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtIndex1OnEmptySource  thrpt   30  9315406.056 ± 359161.100  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex0OnEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex0OnEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1764486.309 ops/s
# Warmup Iteration   2: 5841451.611 ops/s
# Warmup Iteration   3: 7485034.716 ops/s
# Warmup Iteration   4: 7812974.948 ops/s
# Warmup Iteration   5: 8110962.375 ops/s
# Warmup Iteration   6: 7704775.225 ops/s
# Warmup Iteration   7: 7732161.400 ops/s
# Warmup Iteration   8: 7982223.434 ops/s
# Warmup Iteration   9: 7724767.774 ops/s
# Warmup Iteration  10: 7947328.895 ops/s
# Warmup Iteration  11: 8204251.359 ops/s
# Warmup Iteration  12: 7696067.043 ops/s
# Warmup Iteration  13: 7829248.712 ops/s
# Warmup Iteration  14: 8156468.524 ops/s
# Warmup Iteration  15: 7899407.014 ops/s
# Warmup Iteration  16: 7972005.623 ops/s
# Warmup Iteration  17: 7646923.360 ops/s
# Warmup Iteration  18: 8140843.635 ops/s
# Warmup Iteration  19: 7900278.933 ops/s
# Warmup Iteration  20: 7995325.073 ops/s
# Warmup Iteration  21: 8256539.605 ops/s
# Warmup Iteration  22: 7829976.988 ops/s
# Warmup Iteration  23: 8043680.076 ops/s
# Warmup Iteration  24: 7523786.661 ops/s
# Warmup Iteration  25: 8006631.901 ops/s
# Warmup Iteration  26: 8159709.937 ops/s
# Warmup Iteration  27: 7985032.932 ops/s
# Warmup Iteration  28: 7734205.726 ops/s
# Warmup Iteration  29: 8112370.336 ops/s
# Warmup Iteration  30: 7820471.558 ops/s
Iteration   1: 8147112.199 ops/s
Iteration   2: 8127416.895 ops/s
Iteration   3: 7723248.653 ops/s
Iteration   4: 8251986.486 ops/s
Iteration   5: 7884840.864 ops/s
Iteration   6: 8052377.744 ops/s
Iteration   7: 7790716.568 ops/s
Iteration   8: 7882229.038 ops/s
Iteration   9: 7721291.843 ops/s
Iteration  10: 7924155.875 ops/s
Iteration  11: 8177121.189 ops/s
Iteration  12: 7758675.224 ops/s
Iteration  13: 8093650.204 ops/s
Iteration  14: 7878653.347 ops/s
Iteration  15: 8074783.207 ops/s
Iteration  16: 7851134.192 ops/s
Iteration  17: 7846632.364 ops/s
Iteration  18: 8089853.760 ops/s
Iteration  19: 7721687.012 ops/s
Iteration  20: 8100678.948 ops/s
Iteration  21: 7884820.147 ops/s
Iteration  22: 8160903.655 ops/s
Iteration  23: 7572267.374 ops/s
Iteration  24: 7954354.016 ops/s
Iteration  25: 7919707.711 ops/s
Iteration  26: 7787248.780 ops/s
Iteration  27: 8167691.007 ops/s
Iteration  28: 7672807.156 ops/s
Iteration  29: 7947395.941 ops/s
Iteration  30: 7801067.261 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex0OnEmptySource":
  7932216.955 ±(99.9%) 118396.707 ops/s [Average]
  (min, avg, max) = (7572267.374, 7932216.955, 8251986.486), stdev = 177210.631
  CI (99.9%): [7813820.248, 8050613.662] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtIndex0OnEmptySource  thrpt   30  7932216.955 ± 118396.707  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_eventOrdering2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_eventOrdering2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 582172.370 ops/s
# Warmup Iteration   2: 2644699.720 ops/s
# Warmup Iteration   3: 3196518.153 ops/s
# Warmup Iteration   4: 3382925.330 ops/s
# Warmup Iteration   5: 3759772.773 ops/s
# Warmup Iteration   6: 3492454.218 ops/s
# Warmup Iteration   7: 3482881.894 ops/s
# Warmup Iteration   8: 3681973.115 ops/s
# Warmup Iteration   9: 3488241.333 ops/s
# Warmup Iteration  10: 3544054.197 ops/s
# Warmup Iteration  11: 3584584.183 ops/s
# Warmup Iteration  12: 3445524.680 ops/s
# Warmup Iteration  13: 3598163.527 ops/s
# Warmup Iteration  14: 3646282.177 ops/s
# Warmup Iteration  15: 3638063.092 ops/s
# Warmup Iteration  16: 3674249.522 ops/s
# Warmup Iteration  17: 3507783.029 ops/s
# Warmup Iteration  18: 3801393.697 ops/s
# Warmup Iteration  19: 3694601.731 ops/s
# Warmup Iteration  20: 3494244.234 ops/s
# Warmup Iteration  21: 3703472.424 ops/s
# Warmup Iteration  22: 3508416.472 ops/s
# Warmup Iteration  23: 3568648.797 ops/s
# Warmup Iteration  24: 3569576.793 ops/s
# Warmup Iteration  25: 3501847.989 ops/s
# Warmup Iteration  26: 3691961.642 ops/s
# Warmup Iteration  27: 3653831.717 ops/s
# Warmup Iteration  28: 3567894.552 ops/s
# Warmup Iteration  29: 3666788.367 ops/s
# Warmup Iteration  30: 3564359.640 ops/s
Iteration   1: 3717816.730 ops/s
Iteration   2: 3477104.579 ops/s
Iteration   3: 3623496.300 ops/s
Iteration   4: 3511955.915 ops/s
Iteration   5: 3744900.294 ops/s
Iteration   6: 3716001.177 ops/s
Iteration   7: 3514119.758 ops/s
Iteration   8: 3630217.153 ops/s
Iteration   9: 3680980.377 ops/s
Iteration  10: 3566211.441 ops/s
Iteration  11: 3601422.934 ops/s
Iteration  12: 3646816.997 ops/s
Iteration  13: 3507530.415 ops/s
Iteration  14: 3517215.642 ops/s
Iteration  15: 3541809.753 ops/s
Iteration  16: 3644024.820 ops/s
Iteration  17: 3605080.965 ops/s
Iteration  18: 3481723.844 ops/s
Iteration  19: 3811738.465 ops/s
Iteration  20: 3577759.996 ops/s
Iteration  21: 3612257.732 ops/s
Iteration  22: 2857776.479 ops/s
Iteration  23: 3444414.881 ops/s
Iteration  24: 3755752.113 ops/s
Iteration  25: 3509483.935 ops/s
Iteration  26: 3653480.485 ops/s
Iteration  27: 3687251.968 ops/s
Iteration  28: 3498468.410 ops/s
Iteration  29: 3735422.505 ops/s
Iteration  30: 3473321.035 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_eventOrdering2":
  3578185.237 ±(99.9%) 112249.396 ops/s [Average]
  (min, avg, max) = (2857776.479, 3578185.237, 3811738.465), stdev = 168009.624
  CI (99.9%): [3465935.841, 3690434.632] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_eventOrdering2  thrpt   30  3578185.237 ± 112249.396  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_justAndRetry$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_justAndRetry

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95574.514 ops/s
# Warmup Iteration   2: 334487.579 ops/s
# Warmup Iteration   3: 362092.572 ops/s
# Warmup Iteration   4: 357544.714 ops/s
# Warmup Iteration   5: 339893.631 ops/s
# Warmup Iteration   6: 348643.086 ops/s
# Warmup Iteration   7: 395894.879 ops/s
# Warmup Iteration   8: 378303.144 ops/s
# Warmup Iteration   9: 380057.440 ops/s
# Warmup Iteration  10: 387605.668 ops/s
# Warmup Iteration  11: 386974.625 ops/s
# Warmup Iteration  12: 371939.106 ops/s
# Warmup Iteration  13: 397862.803 ops/s
# Warmup Iteration  14: 404344.550 ops/s
# Warmup Iteration  15: 379981.059 ops/s
# Warmup Iteration  16: 403618.375 ops/s
# Warmup Iteration  17: 388724.170 ops/s
# Warmup Iteration  18: 405796.252 ops/s
# Warmup Iteration  19: 411134.952 ops/s
# Warmup Iteration  20: 401042.066 ops/s
# Warmup Iteration  21: 386660.770 ops/s
# Warmup Iteration  22: 410267.761 ops/s
# Warmup Iteration  23: 404113.201 ops/s
# Warmup Iteration  24: 394396.257 ops/s
# Warmup Iteration  25: 402698.546 ops/s
# Warmup Iteration  26: 404571.158 ops/s
# Warmup Iteration  27: 400344.775 ops/s
# Warmup Iteration  28: 391585.321 ops/s
# Warmup Iteration  29: 415902.619 ops/s
# Warmup Iteration  30: 396222.101 ops/s
Iteration   1: 413408.085 ops/s
Iteration   2: 409560.494 ops/s
Iteration   3: 391007.881 ops/s
Iteration   4: 403538.238 ops/s
Iteration   5: 407032.075 ops/s
Iteration   6: 389525.719 ops/s
Iteration   7: 406395.808 ops/s
Iteration   8: 389223.466 ops/s
Iteration   9: 409400.935 ops/s
Iteration  10: 404372.744 ops/s
Iteration  11: 397977.063 ops/s
Iteration  12: 409560.711 ops/s
Iteration  13: 389068.252 ops/s
Iteration  14: 396033.415 ops/s
Iteration  15: 402199.444 ops/s
Iteration  16: 389455.121 ops/s
Iteration  17: 416705.626 ops/s
Iteration  18: 396953.504 ops/s
Iteration  19: 410122.396 ops/s
Iteration  20: 412551.727 ops/s
Iteration  21: 383821.224 ops/s
Iteration  22: 417640.820 ops/s
Iteration  23: 392049.889 ops/s
Iteration  24: 414411.496 ops/s
Iteration  25: 412488.275 ops/s
Iteration  26: 394634.760 ops/s
Iteration  27: 416497.577 ops/s
Iteration  28: 390166.784 ops/s
Iteration  29: 408825.390 ops/s
Iteration  30: 397770.018 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_justAndRetry":
  402413.298 ±(99.9%) 6782.857 ops/s [Average]
  (min, avg, max) = (383821.224, 402413.298, 417640.820), stdev = 10152.262
  CI (99.9%): [395630.441, 409196.155] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableRetryWithPredicateTest._Benchmark.benchmark_justAndRetry  thrpt   30  402413.298 ± 6782.857  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingForEachThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingForEachThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 159789.650 ops/s
# Warmup Iteration   2: 477474.006 ops/s
# Warmup Iteration   3: 533968.794 ops/s
# Warmup Iteration   4: 561947.797 ops/s
# Warmup Iteration   5: 579074.504 ops/s
# Warmup Iteration   6: 557234.600 ops/s
# Warmup Iteration   7: 585161.681 ops/s
# Warmup Iteration   8: 597331.499 ops/s
# Warmup Iteration   9: 580980.203 ops/s
# Warmup Iteration  10: 561738.915 ops/s
# Warmup Iteration  11: 559188.655 ops/s
# Warmup Iteration  12: 573164.974 ops/s
# Warmup Iteration  13: 568218.754 ops/s
# Warmup Iteration  14: 565937.269 ops/s
# Warmup Iteration  15: 573644.501 ops/s
# Warmup Iteration  16: 595118.132 ops/s
# Warmup Iteration  17: 580993.365 ops/s
# Warmup Iteration  18: 603436.585 ops/s
# Warmup Iteration  19: 614343.213 ops/s
# Warmup Iteration  20: 551096.802 ops/s
# Warmup Iteration  21: 629108.566 ops/s
# Warmup Iteration  22: 595951.134 ops/s
# Warmup Iteration  23: 608376.986 ops/s
# Warmup Iteration  24: 602008.124 ops/s
# Warmup Iteration  25: 594061.612 ops/s
# Warmup Iteration  26: 606994.004 ops/s
# Warmup Iteration  27: 574978.429 ops/s
# Warmup Iteration  28: 598870.851 ops/s
# Warmup Iteration  29: 598782.510 ops/s
# Warmup Iteration  30: 595970.661 ops/s
Iteration   1: 611433.559 ops/s
Iteration   2: 573099.015 ops/s
Iteration   3: 600054.603 ops/s
Iteration   4: 600107.041 ops/s
Iteration   5: 577539.562 ops/s
Iteration   6: 609234.981 ops/s
Iteration   7: 592091.460 ops/s
Iteration   8: 614360.993 ops/s
Iteration   9: 619353.256 ops/s
Iteration  10: 557682.908 ops/s
Iteration  11: 612637.764 ops/s
Iteration  12: 586333.162 ops/s
Iteration  13: 603698.900 ops/s
Iteration  14: 572910.013 ops/s
Iteration  15: 602497.506 ops/s
Iteration  16: 535868.674 ops/s
Iteration  17: 520088.958 ops/s
Iteration  18: 604966.188 ops/s
Iteration  19: 588008.815 ops/s
Iteration  20: 610179.287 ops/s
Iteration  21: 586412.960 ops/s
Iteration  22: 624755.579 ops/s
Iteration  23: 592908.286 ops/s
Iteration  24: 606633.250 ops/s
Iteration  25: 614219.383 ops/s
Iteration  26: 588493.641 ops/s
Iteration  27: 625517.613 ops/s
Iteration  28: 568865.680 ops/s
Iteration  29: 615392.304 ops/s
Iteration  30: 581480.076 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingForEachThrows":
  593227.514 ±(99.9%) 16552.356 ops/s [Average]
  (min, avg, max) = (520088.958, 593227.514, 625517.613), stdev = 24774.789
  CI (99.9%): [576675.158, 609779.870] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
FlowableBlockingTest._Benchmark.benchmark_blockingForEachThrows  thrpt   30  593227.514 ± 16552.356  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toMapValueSelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toMapValueSelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2264550.002 ops/s
# Warmup Iteration   2: 5700818.956 ops/s
# Warmup Iteration   3: 7149032.780 ops/s
# Warmup Iteration   4: 7851619.161 ops/s
# Warmup Iteration   5: 7976379.906 ops/s
# Warmup Iteration   6: 7465052.305 ops/s
# Warmup Iteration   7: 7938795.267 ops/s
# Warmup Iteration   8: 8172384.874 ops/s
# Warmup Iteration   9: 7704767.419 ops/s
# Warmup Iteration  10: 7988716.567 ops/s
# Warmup Iteration  11: 8003000.710 ops/s
# Warmup Iteration  12: 7598590.320 ops/s
# Warmup Iteration  13: 7797940.370 ops/s
# Warmup Iteration  14: 7746114.879 ops/s
# Warmup Iteration  15: 8218797.163 ops/s
# Warmup Iteration  16: 7805766.337 ops/s
# Warmup Iteration  17: 7589137.100 ops/s
# Warmup Iteration  18: 8218778.709 ops/s
# Warmup Iteration  19: 7551358.253 ops/s
# Warmup Iteration  20: 7889261.463 ops/s
# Warmup Iteration  21: 8074360.279 ops/s
# Warmup Iteration  22: 7647806.541 ops/s
# Warmup Iteration  23: 7706684.522 ops/s
# Warmup Iteration  24: 7979682.090 ops/s
# Warmup Iteration  25: 7935732.299 ops/s
# Warmup Iteration  26: 7944552.487 ops/s
# Warmup Iteration  27: 7655044.204 ops/s
# Warmup Iteration  28: 8017913.818 ops/s
# Warmup Iteration  29: 7753913.349 ops/s
# Warmup Iteration  30: 7685791.919 ops/s
Iteration   1: 8081343.700 ops/s
Iteration   2: 7816693.573 ops/s
Iteration   3: 7868312.949 ops/s
Iteration   4: 7858166.500 ops/s
Iteration   5: 7722521.359 ops/s
Iteration   6: 8073751.993 ops/s
Iteration   7: 7706753.476 ops/s
Iteration   8: 7914079.080 ops/s
Iteration   9: 7667418.725 ops/s
Iteration  10: 7822446.683 ops/s
Iteration  11: 7992729.612 ops/s
Iteration  12: 7857314.589 ops/s
Iteration  13: 7935092.218 ops/s
Iteration  14: 7750764.552 ops/s
Iteration  15: 7874864.430 ops/s
Iteration  16: 7974819.393 ops/s
Iteration  17: 7700952.147 ops/s
Iteration  18: 8067108.103 ops/s
Iteration  19: 8084808.301 ops/s
Iteration  20: 7498230.445 ops/s
Iteration  21: 7820784.750 ops/s
Iteration  22: 7801609.039 ops/s
Iteration  23: 7791542.112 ops/s
Iteration  24: 7864551.216 ops/s
Iteration  25: 7871197.816 ops/s
Iteration  26: 7982714.349 ops/s
Iteration  27: 7643773.422 ops/s
Iteration  28: 8073331.885 ops/s
Iteration  29: 7723738.162 ops/s
Iteration  30: 7627811.108 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toMapValueSelectorReturnsNull":
  7848974.190 ±(99.9%) 101140.294 ops/s [Average]
  (min, avg, max) = (7498230.445, 7848974.190, 8084808.301), stdev = 151382.042
  CI (99.9%): [7747833.895, 7950114.484] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
FlowableNullTests._Benchmark.benchmark_toMapValueSelectorReturnsNull  thrpt   30  7848974.190 ± 101140.294  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toMultiMapValueSelectorReturnsNullAllowed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toMultiMapValueSelectorReturnsNullAllowed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1768740.656 ops/s
# Warmup Iteration   2: 5413792.968 ops/s
# Warmup Iteration   3: 7287174.564 ops/s
# Warmup Iteration   4: 7513764.624 ops/s
# Warmup Iteration   5: 7447009.094 ops/s
# Warmup Iteration   6: 7396513.021 ops/s
# Warmup Iteration   7: 7565554.499 ops/s
# Warmup Iteration   8: 7335343.590 ops/s
# Warmup Iteration   9: 7794187.937 ops/s
# Warmup Iteration  10: 7327178.646 ops/s
# Warmup Iteration  11: 7231466.043 ops/s
# Warmup Iteration  12: 7553819.879 ops/s
# Warmup Iteration  13: 7269885.316 ops/s
# Warmup Iteration  14: 7475105.417 ops/s
# Warmup Iteration  15: 7466385.590 ops/s
# Warmup Iteration  16: 7392194.451 ops/s
# Warmup Iteration  17: 7615772.834 ops/s
# Warmup Iteration  18: 7284451.156 ops/s
# Warmup Iteration  19: 7404134.546 ops/s
# Warmup Iteration  20: 7561082.803 ops/s
# Warmup Iteration  21: 7240579.777 ops/s
# Warmup Iteration  22: 7629524.579 ops/s
# Warmup Iteration  23: 7284710.806 ops/s
# Warmup Iteration  24: 7534314.324 ops/s
# Warmup Iteration  25: 7158710.458 ops/s
# Warmup Iteration  26: 7579043.041 ops/s
# Warmup Iteration  27: 7624328.523 ops/s
# Warmup Iteration  28: 7342411.250 ops/s
# Warmup Iteration  29: 7637326.522 ops/s
# Warmup Iteration  30: 7133686.039 ops/s
Iteration   1: 7614649.015 ops/s
Iteration   2: 7563319.515 ops/s
Iteration   3: 7444966.773 ops/s
Iteration   4: 7443803.197 ops/s
Iteration   5: 7169832.521 ops/s
Iteration   6: 7396563.712 ops/s
Iteration   7: 7495595.344 ops/s
Iteration   8: 7276597.577 ops/s
Iteration   9: 7571995.307 ops/s
Iteration  10: 7224910.676 ops/s
Iteration  11: 5638576.060 ops/s
Iteration  12: 7665346.005 ops/s
Iteration  13: 7103799.981 ops/s
Iteration  14: 7500055.174 ops/s
Iteration  15: 7201670.018 ops/s
Iteration  16: 7352653.163 ops/s
Iteration  17: 7699645.798 ops/s
Iteration  18: 7295693.707 ops/s
Iteration  19: 7488242.764 ops/s
Iteration  20: 7593777.333 ops/s
Iteration  21: 7319826.414 ops/s
Iteration  22: 7504848.810 ops/s
Iteration  23: 7219543.642 ops/s
Iteration  24: 7430500.042 ops/s
Iteration  25: 7157652.688 ops/s
Iteration  26: 7299062.048 ops/s
Iteration  27: 7598630.797 ops/s
Iteration  28: 7280981.983 ops/s
Iteration  29: 7427678.542 ops/s
Iteration  30: 7541527.470 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_toMultiMapValueSelectorReturnsNullAllowed":
  7350731.536 ±(99.9%) 241659.040 ops/s [Average]
  (min, avg, max) = (5638576.060, 7350731.536, 7699645.798), stdev = 361703.902
  CI (99.9%): [7109072.496, 7592390.576] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score        Error  Units
FlowableNullTests._Benchmark.benchmark_toMultiMapValueSelectorReturnsNullAllowed  thrpt   30  7350731.536 ± 241659.040  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83598.156 ops/s
# Warmup Iteration   2: 265676.339 ops/s
# Warmup Iteration   3: 412952.116 ops/s
# Warmup Iteration   4: 445949.905 ops/s
# Warmup Iteration   5: 456383.581 ops/s
# Warmup Iteration   6: 485296.235 ops/s
# Warmup Iteration   7: 501205.785 ops/s
# Warmup Iteration   8: 478456.389 ops/s
# Warmup Iteration   9: 491273.035 ops/s
# Warmup Iteration  10: 480526.252 ops/s
# Warmup Iteration  11: 502489.748 ops/s
# Warmup Iteration  12: 491267.884 ops/s
# Warmup Iteration  13: 492796.913 ops/s
# Warmup Iteration  14: 503815.646 ops/s
# Warmup Iteration  15: 476294.292 ops/s
# Warmup Iteration  16: 498075.069 ops/s
# Warmup Iteration  17: 499684.128 ops/s
# Warmup Iteration  18: 504936.369 ops/s
# Warmup Iteration  19: 526108.868 ops/s
# Warmup Iteration  20: 503936.666 ops/s
# Warmup Iteration  21: 525845.044 ops/s
# Warmup Iteration  22: 524724.023 ops/s
# Warmup Iteration  23: 499818.870 ops/s
# Warmup Iteration  24: 525681.648 ops/s
# Warmup Iteration  25: 486016.056 ops/s
# Warmup Iteration  26: 513666.291 ops/s
# Warmup Iteration  27: 516630.857 ops/s
# Warmup Iteration  28: 502410.550 ops/s
# Warmup Iteration  29: 531785.041 ops/s
# Warmup Iteration  30: 524638.553 ops/s
Iteration   1: 497920.477 ops/s
Iteration   2: 507272.545 ops/s
Iteration   3: 538475.988 ops/s
Iteration   4: 499734.150 ops/s
Iteration   5: 518696.023 ops/s
Iteration   6: 522217.047 ops/s
Iteration   7: 519153.336 ops/s
Iteration   8: 503424.487 ops/s
Iteration   9: 530330.160 ops/s
Iteration  10: 505896.416 ops/s
Iteration  11: 522890.479 ops/s
Iteration  12: 505610.154 ops/s
Iteration  13: 512655.980 ops/s
Iteration  14: 512243.894 ops/s
Iteration  15: 520286.170 ops/s
Iteration  16: 488088.831 ops/s
Iteration  17: 519216.484 ops/s
Iteration  18: 503383.279 ops/s
Iteration  19: 508606.483 ops/s
Iteration  20: 516061.693 ops/s
Iteration  21: 508499.487 ops/s
Iteration  22: 530983.181 ops/s
Iteration  23: 497971.535 ops/s
Iteration  24: 528780.291 ops/s
Iteration  25: 504204.943 ops/s
Iteration  26: 515828.283 ops/s
Iteration  27: 522939.200 ops/s
Iteration  28: 512942.780 ops/s
Iteration  29: 497091.916 ops/s
Iteration  30: 527276.470 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_badRequest":
  513289.405 ±(99.9%) 7969.763 ops/s [Average]
  (min, avg, max) = (488088.831, 513289.405, 538475.988), stdev = 11928.766
  CI (99.9%): [505319.643, 521259.168] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableOnBackpressureLatestTest._Benchmark.benchmark_badRequest  thrpt   30  513289.405 ± 7969.763  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatOuterBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatOuterBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 912146.934 ops/s
# Warmup Iteration   2: 2446935.421 ops/s
# Warmup Iteration   3: 2968885.097 ops/s
# Warmup Iteration   4: 3538356.769 ops/s
# Warmup Iteration   5: 3666063.330 ops/s
# Warmup Iteration   6: 3549494.234 ops/s
# Warmup Iteration   7: 3584539.311 ops/s
# Warmup Iteration   8: 3639828.313 ops/s
# Warmup Iteration   9: 3564642.037 ops/s
# Warmup Iteration  10: 3692311.754 ops/s
# Warmup Iteration  11: 3391119.942 ops/s
# Warmup Iteration  12: 3631379.952 ops/s
# Warmup Iteration  13: 3533337.457 ops/s
# Warmup Iteration  14: 3576578.091 ops/s
# Warmup Iteration  15: 3647486.036 ops/s
# Warmup Iteration  16: 3467472.485 ops/s
# Warmup Iteration  17: 3701843.000 ops/s
# Warmup Iteration  18: 3532534.605 ops/s
# Warmup Iteration  19: 3600085.678 ops/s
# Warmup Iteration  20: 3470658.868 ops/s
# Warmup Iteration  21: 3544951.764 ops/s
# Warmup Iteration  22: 3686976.585 ops/s
# Warmup Iteration  23: 3432070.053 ops/s
# Warmup Iteration  24: 3522281.120 ops/s
# Warmup Iteration  25: 3554958.056 ops/s
# Warmup Iteration  26: 3692907.301 ops/s
# Warmup Iteration  27: 3562561.882 ops/s
# Warmup Iteration  28: 3509480.932 ops/s
# Warmup Iteration  29: 3551964.738 ops/s
# Warmup Iteration  30: 3490651.478 ops/s
Iteration   1: 3621025.227 ops/s
Iteration   2: 3368726.554 ops/s
Iteration   3: 3687065.871 ops/s
Iteration   4: 3740876.402 ops/s
Iteration   5: 3362277.680 ops/s
Iteration   6: 2713058.420 ops/s
Iteration   7: 3633468.397 ops/s
Iteration   8: 3467908.263 ops/s
Iteration   9: 3621260.133 ops/s
Iteration  10: 3644787.184 ops/s
Iteration  11: 3497531.673 ops/s
Iteration  12: 3701374.479 ops/s
Iteration  13: 3692771.769 ops/s
Iteration  14: 3401847.150 ops/s
Iteration  15: 3491563.423 ops/s
Iteration  16: 3691582.941 ops/s
Iteration  17: 3656741.452 ops/s
Iteration  18: 3471398.233 ops/s
Iteration  19: 3565856.536 ops/s
Iteration  20: 3586070.350 ops/s
Iteration  21: 3554040.110 ops/s
Iteration  22: 3639313.419 ops/s
Iteration  23: 3474666.456 ops/s
Iteration  24: 3562919.675 ops/s
Iteration  25: 3471581.151 ops/s
Iteration  26: 3640838.899 ops/s
Iteration  27: 3480139.200 ops/s
Iteration  28: 3534888.870 ops/s
Iteration  29: 3714333.791 ops/s
Iteration  30: 3459026.270 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatOuterBackpressure":
  3538297.999 ±(99.9%) 126017.115 ops/s [Average]
  (min, avg, max) = (2713058.420, 3538297.999, 3740876.402), stdev = 188616.500
  CI (99.9%): [3412280.884, 3664315.115] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
FlowableConcatTest._Benchmark.benchmark_concatOuterBackpressure  thrpt   30  3538297.999 ± 126017.115  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_normalEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_normalEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 214001.920 ops/s
# Warmup Iteration   2: 1367087.345 ops/s
# Warmup Iteration   3: 2954463.165 ops/s
# Warmup Iteration   4: 3273623.157 ops/s
# Warmup Iteration   5: 3146180.640 ops/s
# Warmup Iteration   6: 2970880.277 ops/s
# Warmup Iteration   7: 3075528.704 ops/s
# Warmup Iteration   8: 3144154.887 ops/s
# Warmup Iteration   9: 3372593.055 ops/s
# Warmup Iteration  10: 3236550.799 ops/s
# Warmup Iteration  11: 3109710.319 ops/s
# Warmup Iteration  12: 3309043.581 ops/s
# Warmup Iteration  13: 3240061.842 ops/s
# Warmup Iteration  14: 3234377.612 ops/s
# Warmup Iteration  15: 3255510.337 ops/s
# Warmup Iteration  16: 3328812.214 ops/s
# Warmup Iteration  17: 3192411.452 ops/s
# Warmup Iteration  18: 3174316.285 ops/s
# Warmup Iteration  19: 3334141.179 ops/s
# Warmup Iteration  20: 3260183.677 ops/s
# Warmup Iteration  21: 3299695.621 ops/s
# Warmup Iteration  22: 3231856.631 ops/s
# Warmup Iteration  23: 3240121.448 ops/s
# Warmup Iteration  24: 3303326.224 ops/s
# Warmup Iteration  25: 3122617.977 ops/s
# Warmup Iteration  26: 3282062.595 ops/s
# Warmup Iteration  27: 3205993.460 ops/s
# Warmup Iteration  28: 3284790.740 ops/s
# Warmup Iteration  29: 3193697.008 ops/s
# Warmup Iteration  30: 3238982.712 ops/s
Iteration   1: 3195565.731 ops/s
Iteration   2: 3174292.049 ops/s
Iteration   3: 3305827.531 ops/s
Iteration   4: 3106560.219 ops/s
Iteration   5: 3183017.651 ops/s
Iteration   6: 3355324.152 ops/s
Iteration   7: 3426313.824 ops/s
Iteration   8: 3164433.355 ops/s
Iteration   9: 3323141.835 ops/s
Iteration  10: 3162457.380 ops/s
Iteration  11: 3292349.269 ops/s
Iteration  12: 3371388.178 ops/s
Iteration  13: 3130874.413 ops/s
Iteration  14: 3303096.735 ops/s
Iteration  15: 3252558.453 ops/s
Iteration  16: 3150919.242 ops/s
Iteration  17: 3269851.715 ops/s
Iteration  18: 3145133.596 ops/s
Iteration  19: 3207805.786 ops/s
Iteration  20: 3201052.001 ops/s
Iteration  21: 3198824.031 ops/s
Iteration  22: 3325032.922 ops/s
Iteration  23: 3180059.679 ops/s
Iteration  24: 3345051.410 ops/s
Iteration  25: 3171991.279 ops/s
Iteration  26: 3294227.609 ops/s
Iteration  27: 3208566.346 ops/s
Iteration  28: 3189423.896 ops/s
Iteration  29: 3257707.776 ops/s
Iteration  30: 3204416.889 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_normalEmpty":
  3236575.498 ±(99.9%) 54171.472 ops/s [Average]
  (min, avg, max) = (3106560.219, 3236575.498, 3426313.824), stdev = 81081.315
  CI (99.9%): [3182404.026, 3290746.971] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableConcatWithMaybeTest._Benchmark.benchmark_normalEmpty  thrpt   30  3236575.498 ± 54171.472  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109367.429 ops/s
# Warmup Iteration   2: 516880.611 ops/s
# Warmup Iteration   3: 659139.817 ops/s
# Warmup Iteration   4: 617070.769 ops/s
# Warmup Iteration   5: 610457.916 ops/s
# Warmup Iteration   6: 689712.873 ops/s
# Warmup Iteration   7: 673358.215 ops/s
# Warmup Iteration   8: 704440.744 ops/s
# Warmup Iteration   9: 703085.610 ops/s
# Warmup Iteration  10: 717204.947 ops/s
# Warmup Iteration  11: 722303.330 ops/s
# Warmup Iteration  12: 665997.009 ops/s
# Warmup Iteration  13: 727588.892 ops/s
# Warmup Iteration  14: 699461.977 ops/s
# Warmup Iteration  15: 695814.043 ops/s
# Warmup Iteration  16: 702084.808 ops/s
# Warmup Iteration  17: 736536.576 ops/s
# Warmup Iteration  18: 723446.501 ops/s
# Warmup Iteration  19: 751760.266 ops/s
# Warmup Iteration  20: 739084.885 ops/s
# Warmup Iteration  21: 757055.762 ops/s
# Warmup Iteration  22: 724390.910 ops/s
# Warmup Iteration  23: 699276.976 ops/s
# Warmup Iteration  24: 755785.300 ops/s
# Warmup Iteration  25: 732981.187 ops/s
# Warmup Iteration  26: 708711.216 ops/s
# Warmup Iteration  27: 755000.118 ops/s
# Warmup Iteration  28: 733652.630 ops/s
# Warmup Iteration  29: 744555.931 ops/s
# Warmup Iteration  30: 638072.459 ops/s
Iteration   1: 713955.943 ops/s
Iteration   2: 729019.020 ops/s
Iteration   3: 746737.758 ops/s
Iteration   4: 727561.369 ops/s
Iteration   5: 752426.083 ops/s
Iteration   6: 708719.984 ops/s
Iteration   7: 737052.981 ops/s
Iteration   8: 730728.760 ops/s
Iteration   9: 708656.628 ops/s
Iteration  10: 758717.575 ops/s
Iteration  11: 757697.040 ops/s
Iteration  12: 727211.515 ops/s
Iteration  13: 766139.162 ops/s
Iteration  14: 743478.985 ops/s
Iteration  15: 720857.982 ops/s
Iteration  16: 740199.259 ops/s
Iteration  17: 758980.456 ops/s
Iteration  18: 727857.842 ops/s
Iteration  19: 759892.117 ops/s
Iteration  20: 736060.133 ops/s
Iteration  21: 728956.614 ops/s
Iteration  22: 768652.377 ops/s
Iteration  23: 735205.909 ops/s
Iteration  24: 758254.693 ops/s
Iteration  25: 727938.833 ops/s
Iteration  26: 763272.929 ops/s
Iteration  27: 739094.974 ops/s
Iteration  28: 749865.327 ops/s
Iteration  29: 753949.319 ops/s
Iteration  30: 712269.103 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_otherError":
  739647.022 ±(99.9%) 11809.646 ops/s [Average]
  (min, avg, max) = (708656.628, 739647.022, 768652.377), stdev = 17676.123
  CI (99.9%): [727837.377, 751456.668] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
MaybeDelaySubscriptionTest._Benchmark.benchmark_otherError  thrpt   30  739647.022 ± 11809.646  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 169739.597 ops/s
# Warmup Iteration   2: 584119.125 ops/s
# Warmup Iteration   3: 686089.847 ops/s
# Warmup Iteration   4: 671077.299 ops/s
# Warmup Iteration   5: 644177.824 ops/s
# Warmup Iteration   6: 658681.383 ops/s
# Warmup Iteration   7: 699708.049 ops/s
# Warmup Iteration   8: 701431.445 ops/s
# Warmup Iteration   9: 721814.380 ops/s
# Warmup Iteration  10: 708018.503 ops/s
# Warmup Iteration  11: 697422.931 ops/s
# Warmup Iteration  12: 732866.114 ops/s
# Warmup Iteration  13: 670582.294 ops/s
# Warmup Iteration  14: 709688.459 ops/s
# Warmup Iteration  15: 726572.383 ops/s
# Warmup Iteration  16: 690544.384 ops/s
# Warmup Iteration  17: 776903.238 ops/s
# Warmup Iteration  18: 732801.592 ops/s
# Warmup Iteration  19: 749500.579 ops/s
# Warmup Iteration  20: 749398.648 ops/s
# Warmup Iteration  21: 740928.509 ops/s
# Warmup Iteration  22: 768146.581 ops/s
# Warmup Iteration  23: 726770.185 ops/s
# Warmup Iteration  24: 767066.668 ops/s
# Warmup Iteration  25: 753678.645 ops/s
# Warmup Iteration  26: 722216.146 ops/s
# Warmup Iteration  27: 770602.725 ops/s
# Warmup Iteration  28: 777000.562 ops/s
# Warmup Iteration  29: 730819.895 ops/s
# Warmup Iteration  30: 747971.119 ops/s
Iteration   1: 745774.590 ops/s
Iteration   2: 771613.623 ops/s
Iteration   3: 737135.846 ops/s
Iteration   4: 742497.526 ops/s
Iteration   5: 699872.525 ops/s
Iteration   6: 735452.343 ops/s
Iteration   7: 758177.182 ops/s
Iteration   8: 744881.055 ops/s
Iteration   9: 752497.309 ops/s
Iteration  10: 742619.915 ops/s
Iteration  11: 710568.771 ops/s
Iteration  12: 758535.532 ops/s
Iteration  13: 743383.546 ops/s
Iteration  14: 756843.286 ops/s
Iteration  15: 755237.162 ops/s
Iteration  16: 738090.078 ops/s
Iteration  17: 754281.595 ops/s
Iteration  18: 781296.586 ops/s
Iteration  19: 737173.621 ops/s
Iteration  20: 755286.776 ops/s
Iteration  21: 757603.614 ops/s
Iteration  22: 749410.082 ops/s
Iteration  23: 760391.653 ops/s
Iteration  24: 734971.623 ops/s
Iteration  25: 755685.434 ops/s
Iteration  26: 740910.371 ops/s
Iteration  27: 748811.702 ops/s
Iteration  28: 750544.156 ops/s
Iteration  29: 761675.481 ops/s
Iteration  30: 745131.116 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_error":
  747545.137 ±(99.9%) 10491.175 ops/s [Average]
  (min, avg, max) = (699872.525, 747545.137, 781296.586), stdev = 15702.699
  CI (99.9%): [737053.961, 758036.312] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score       Error  Units
FlowableLastTest._Benchmark.benchmark_error  thrpt   30  747545.137 ± 10491.175  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_noSubsequentSubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_noSubsequentSubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 181911.711 ops/s
# Warmup Iteration   2: 1554474.533 ops/s
# Warmup Iteration   3: 2309114.685 ops/s
# Warmup Iteration   4: 3108852.196 ops/s
# Warmup Iteration   5: 3042158.339 ops/s
# Warmup Iteration   6: 3164455.151 ops/s
# Warmup Iteration   7: 2993182.942 ops/s
# Warmup Iteration   8: 3129897.147 ops/s
# Warmup Iteration   9: 3050029.119 ops/s
# Warmup Iteration  10: 3065638.676 ops/s
# Warmup Iteration  11: 3128338.145 ops/s
# Warmup Iteration  12: 2997366.744 ops/s
# Warmup Iteration  13: 3080611.089 ops/s
# Warmup Iteration  14: 3237347.991 ops/s
# Warmup Iteration  15: 3242176.641 ops/s
# Warmup Iteration  16: 3213019.688 ops/s
# Warmup Iteration  17: 3070206.477 ops/s
# Warmup Iteration  18: 3126749.451 ops/s
# Warmup Iteration  19: 3032588.877 ops/s
# Warmup Iteration  20: 3237273.276 ops/s
# Warmup Iteration  21: 3061694.662 ops/s
# Warmup Iteration  22: 3014627.985 ops/s
# Warmup Iteration  23: 3236492.367 ops/s
# Warmup Iteration  24: 2661436.580 ops/s
# Warmup Iteration  25: 2659020.629 ops/s
# Warmup Iteration  26: 2985548.949 ops/s
# Warmup Iteration  27: 3089401.261 ops/s
# Warmup Iteration  28: 3122324.091 ops/s
# Warmup Iteration  29: 3089051.814 ops/s
# Warmup Iteration  30: 3126193.465 ops/s
Iteration   1: 3076776.070 ops/s
Iteration   2: 3174012.672 ops/s
Iteration   3: 3138835.599 ops/s
Iteration   4: 3078467.297 ops/s
Iteration   5: 3188372.143 ops/s
Iteration   6: 3109375.214 ops/s
Iteration   7: 3099337.870 ops/s
Iteration   8: 3205951.954 ops/s
Iteration   9: 3028868.601 ops/s
Iteration  10: 3146732.667 ops/s
Iteration  11: 3113704.782 ops/s
Iteration  12: 3082677.835 ops/s
Iteration  13: 3098374.038 ops/s
Iteration  14: 2986057.493 ops/s
Iteration  15: 3068198.330 ops/s
Iteration  16: 3064641.606 ops/s
Iteration  17: 3090007.068 ops/s
Iteration  18: 3178006.943 ops/s
Iteration  19: 3056369.885 ops/s
Iteration  20: 3101296.503 ops/s
Iteration  21: 3069581.668 ops/s
Iteration  22: 3096491.156 ops/s
Iteration  23: 3074161.781 ops/s
Iteration  24: 2928123.530 ops/s
Iteration  25: 3212303.163 ops/s
Iteration  26: 3121591.831 ops/s
Iteration  27: 3036199.184 ops/s
Iteration  28: 3183006.171 ops/s
Iteration  29: 3110697.368 ops/s
Iteration  30: 3010239.671 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_noSubsequentSubscription":
  3097615.336 ±(99.9%) 43221.797 ops/s [Average]
  (min, avg, max) = (2928123.530, 3097615.336, 3212303.163), stdev = 64692.357
  CI (99.9%): [3054393.539, 3140837.134] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MaybeConcatIterableTest._Benchmark.benchmark_noSubsequentSubscription  thrpt   30  3097615.336 ± 43221.797  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_noSubsequentSubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_noSubsequentSubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 264858.033 ops/s
# Warmup Iteration   2: 1806943.788 ops/s
# Warmup Iteration   3: 2673010.551 ops/s
# Warmup Iteration   4: 3188492.153 ops/s
# Warmup Iteration   5: 3394912.121 ops/s
# Warmup Iteration   6: 3226358.046 ops/s
# Warmup Iteration   7: 3190920.714 ops/s
# Warmup Iteration   8: 3270888.401 ops/s
# Warmup Iteration   9: 3228269.119 ops/s
# Warmup Iteration  10: 3259138.892 ops/s
# Warmup Iteration  11: 3332143.787 ops/s
# Warmup Iteration  12: 3175004.263 ops/s
# Warmup Iteration  13: 3248654.415 ops/s
# Warmup Iteration  14: 3202537.845 ops/s
# Warmup Iteration  15: 3286804.553 ops/s
# Warmup Iteration  16: 3336764.485 ops/s
# Warmup Iteration  17: 3235624.982 ops/s
# Warmup Iteration  18: 3345186.440 ops/s
# Warmup Iteration  19: 3206589.539 ops/s
# Warmup Iteration  20: 3258400.095 ops/s
# Warmup Iteration  21: 3364256.086 ops/s
# Warmup Iteration  22: 3204780.981 ops/s
# Warmup Iteration  23: 3371271.011 ops/s
# Warmup Iteration  24: 3148759.427 ops/s
# Warmup Iteration  25: 3204216.149 ops/s
# Warmup Iteration  26: 3383891.498 ops/s
# Warmup Iteration  27: 3259374.213 ops/s
# Warmup Iteration  28: 3205884.776 ops/s
# Warmup Iteration  29: 3330561.645 ops/s
# Warmup Iteration  30: 3382951.244 ops/s
Iteration   1: 3269180.749 ops/s
Iteration   2: 3363356.613 ops/s
Iteration   3: 3222299.020 ops/s
Iteration   4: 3248820.972 ops/s
Iteration   5: 3392178.964 ops/s
Iteration   6: 3349910.640 ops/s
Iteration   7: 3132996.614 ops/s
Iteration   8: 3256368.828 ops/s
Iteration   9: 3257830.538 ops/s
Iteration  10: 3353152.846 ops/s
Iteration  11: 3321475.678 ops/s
Iteration  12: 3213867.756 ops/s
Iteration  13: 3274678.517 ops/s
Iteration  14: 3278437.097 ops/s
Iteration  15: 3258059.558 ops/s
Iteration  16: 3249686.893 ops/s
Iteration  17: 3213533.023 ops/s
Iteration  18: 3248875.766 ops/s
Iteration  19: 3265588.007 ops/s
Iteration  20: 3294301.520 ops/s
Iteration  21: 3279983.464 ops/s
Iteration  22: 3223520.611 ops/s
Iteration  23: 3416296.792 ops/s
Iteration  24: 3148261.564 ops/s
Iteration  25: 3327152.276 ops/s
Iteration  26: 3242881.126 ops/s
Iteration  27: 3353686.460 ops/s
Iteration  28: 3270161.876 ops/s
Iteration  29: 3217871.018 ops/s
Iteration  30: 3401688.150 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_noSubsequentSubscription":
  3278203.431 ±(99.9%) 45919.957 ops/s [Average]
  (min, avg, max) = (3132996.614, 3278203.431, 3416296.792), stdev = 68730.836
  CI (99.9%): [3232283.474, 3324123.389] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_noSubsequentSubscription  thrpt   30  3278203.431 ± 45919.957  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_concatMapReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_concatMapReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 311796.226 ops/s
# Warmup Iteration   2: 576677.717 ops/s
# Warmup Iteration   3: 640108.668 ops/s
# Warmup Iteration   4: 620115.343 ops/s
# Warmup Iteration   5: 693589.790 ops/s
# Warmup Iteration   6: 599728.270 ops/s
# Warmup Iteration   7: 658489.144 ops/s
# Warmup Iteration   8: 704674.012 ops/s
# Warmup Iteration   9: 673216.216 ops/s
# Warmup Iteration  10: 653282.882 ops/s
# Warmup Iteration  11: 688701.344 ops/s
# Warmup Iteration  12: 690716.823 ops/s
# Warmup Iteration  13: 668366.432 ops/s
# Warmup Iteration  14: 716677.903 ops/s
# Warmup Iteration  15: 705805.745 ops/s
# Warmup Iteration  16: 700010.355 ops/s
# Warmup Iteration  17: 716742.764 ops/s
# Warmup Iteration  18: 681745.699 ops/s
# Warmup Iteration  19: 560318.124 ops/s
# Warmup Iteration  20: 736176.589 ops/s
# Warmup Iteration  21: 704670.466 ops/s
# Warmup Iteration  22: 709008.471 ops/s
# Warmup Iteration  23: 710553.540 ops/s
# Warmup Iteration  24: 694719.775 ops/s
# Warmup Iteration  25: 731051.168 ops/s
# Warmup Iteration  26: 747225.514 ops/s
# Warmup Iteration  27: 698923.438 ops/s
# Warmup Iteration  28: 721249.600 ops/s
# Warmup Iteration  29: 704069.537 ops/s
# Warmup Iteration  30: 714754.951 ops/s
Iteration   1: 720844.849 ops/s
Iteration   2: 703023.172 ops/s
Iteration   3: 719133.421 ops/s
Iteration   4: 697199.576 ops/s
Iteration   5: 711902.761 ops/s
Iteration   6: 743120.037 ops/s
Iteration   7: 697630.926 ops/s
Iteration   8: 727476.724 ops/s
Iteration   9: 736623.542 ops/s
Iteration  10: 708476.300 ops/s
Iteration  11: 715121.083 ops/s
Iteration  12: 699581.751 ops/s
Iteration  13: 728492.922 ops/s
Iteration  14: 700575.861 ops/s
Iteration  15: 685953.654 ops/s
Iteration  16: 735092.445 ops/s
Iteration  17: 680293.575 ops/s
Iteration  18: 727191.264 ops/s
Iteration  19: 708626.759 ops/s
Iteration  20: 719383.437 ops/s
Iteration  21: 703165.610 ops/s
Iteration  22: 722499.219 ops/s
Iteration  23: 701282.233 ops/s
Iteration  24: 708348.512 ops/s
Iteration  25: 737487.792 ops/s
Iteration  26: 708161.038 ops/s
Iteration  27: 719909.314 ops/s
Iteration  28: 728868.447 ops/s
Iteration  29: 687193.691 ops/s
Iteration  30: 715018.402 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_concatMapReturnsNull":
  713255.944 ±(99.9%) 10706.472 ops/s [Average]
  (min, avg, max) = (680293.575, 713255.944, 743120.037), stdev = 16024.945
  CI (99.9%): [702549.472, 723962.416] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_concatMapReturnsNull  thrpt   30  713255.944 ± 10706.472  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_nonFatalExceptionThrownByCombinatorForSingleSourceIsNotReportedByUpstreamOperator$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_nonFatalExceptionThrownByCombinatorForSingleSourceIsNotReportedByUpstreamOperator

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87399.233 ops/s
# Warmup Iteration   2: 335530.550 ops/s
# Warmup Iteration   3: 376586.856 ops/s
# Warmup Iteration   4: 405106.282 ops/s
# Warmup Iteration   5: 353492.111 ops/s
# Warmup Iteration   6: 433215.447 ops/s
# Warmup Iteration   7: 420030.928 ops/s
# Warmup Iteration   8: 427376.256 ops/s
# Warmup Iteration   9: 418556.094 ops/s
# Warmup Iteration  10: 409336.452 ops/s
# Warmup Iteration  11: 431502.671 ops/s
# Warmup Iteration  12: 417696.942 ops/s
# Warmup Iteration  13: 427617.681 ops/s
# Warmup Iteration  14: 416752.294 ops/s
# Warmup Iteration  15: 422649.882 ops/s
# Warmup Iteration  16: 438632.371 ops/s
# Warmup Iteration  17: 432580.739 ops/s
# Warmup Iteration  18: 414752.554 ops/s
# Warmup Iteration  19: 441764.910 ops/s
# Warmup Iteration  20: 421767.754 ops/s
# Warmup Iteration  21: 451773.957 ops/s
# Warmup Iteration  22: 425189.110 ops/s
# Warmup Iteration  23: 424408.014 ops/s
# Warmup Iteration  24: 421898.577 ops/s
# Warmup Iteration  25: 451236.802 ops/s
# Warmup Iteration  26: 428863.549 ops/s
# Warmup Iteration  27: 434395.249 ops/s
# Warmup Iteration  28: 422856.272 ops/s
# Warmup Iteration  29: 440231.235 ops/s
# Warmup Iteration  30: 432743.887 ops/s
Iteration   1: 433032.653 ops/s
Iteration   2: 445059.516 ops/s
Iteration   3: 434614.413 ops/s
Iteration   4: 424864.639 ops/s
Iteration   5: 444022.228 ops/s
Iteration   6: 419390.420 ops/s
Iteration   7: 444719.979 ops/s
Iteration   8: 419683.988 ops/s
Iteration   9: 439085.764 ops/s
Iteration  10: 436448.752 ops/s
Iteration  11: 443881.501 ops/s
Iteration  12: 432029.388 ops/s
Iteration  13: 421957.619 ops/s
Iteration  14: 443125.032 ops/s
Iteration  15: 451093.453 ops/s
Iteration  16: 423935.397 ops/s
Iteration  17: 443606.860 ops/s
Iteration  18: 426103.109 ops/s
Iteration  19: 442985.493 ops/s
Iteration  20: 425294.784 ops/s
Iteration  21: 435118.047 ops/s
Iteration  22: 442645.047 ops/s
Iteration  23: 422708.264 ops/s
Iteration  24: 436675.908 ops/s
Iteration  25: 421887.511 ops/s
Iteration  26: 454738.575 ops/s
Iteration  27: 444373.018 ops/s
Iteration  28: 429764.567 ops/s
Iteration  29: 441135.450 ops/s
Iteration  30: 426723.785 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_nonFatalExceptionThrownByCombinatorForSingleSourceIsNotReportedByUpstreamOperator":
  435023.505 ±(99.9%) 6672.578 ops/s [Average]
  (min, avg, max) = (419390.420, 435023.505, 454738.575), stdev = 9987.202
  CI (99.9%): [428350.927, 441696.084] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                          Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_nonFatalExceptionThrownByCombinatorForSingleSourceIsNotReportedByUpstreamOperator  thrpt   30  435023.505 ± 6672.578  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 482211.464 ops/s
# Warmup Iteration   2: 1885619.688 ops/s
# Warmup Iteration   3: 2211451.211 ops/s
# Warmup Iteration   4: 2727562.983 ops/s
# Warmup Iteration   5: 2749856.478 ops/s
# Warmup Iteration   6: 2712757.278 ops/s
# Warmup Iteration   7: 2743184.551 ops/s
# Warmup Iteration   8: 2743780.089 ops/s
# Warmup Iteration   9: 2788858.325 ops/s
# Warmup Iteration  10: 2875871.489 ops/s
# Warmup Iteration  11: 2635409.649 ops/s
# Warmup Iteration  12: 2862932.763 ops/s
# Warmup Iteration  13: 2281060.240 ops/s
# Warmup Iteration  14: 2750600.183 ops/s
# Warmup Iteration  15: 2807435.625 ops/s
# Warmup Iteration  16: 2643397.086 ops/s
# Warmup Iteration  17: 2842563.067 ops/s
# Warmup Iteration  18: 2787204.863 ops/s
# Warmup Iteration  19: 2740966.555 ops/s
# Warmup Iteration  20: 2819182.624 ops/s
# Warmup Iteration  21: 2750091.562 ops/s
# Warmup Iteration  22: 2721914.100 ops/s
# Warmup Iteration  23: 2824881.836 ops/s
# Warmup Iteration  24: 2718455.295 ops/s
# Warmup Iteration  25: 2664197.956 ops/s
# Warmup Iteration  26: 2742016.752 ops/s
# Warmup Iteration  27: 2834231.410 ops/s
# Warmup Iteration  28: 2750481.870 ops/s
# Warmup Iteration  29: 2752220.455 ops/s
# Warmup Iteration  30: 2807120.819 ops/s
Iteration   1: 2837602.095 ops/s
Iteration   2: 2775213.696 ops/s
Iteration   3: 2726600.063 ops/s
Iteration   4: 2760605.727 ops/s
Iteration   5: 2781195.272 ops/s
Iteration   6: 2754146.683 ops/s
Iteration   7: 2879443.269 ops/s
Iteration   8: 2732022.423 ops/s
Iteration   9: 2831410.976 ops/s
Iteration  10: 2717780.132 ops/s
Iteration  11: 2826680.493 ops/s
Iteration  12: 2728204.473 ops/s
Iteration  13: 2744137.559 ops/s
Iteration  14: 2828846.152 ops/s
Iteration  15: 2814771.619 ops/s
Iteration  16: 2683611.303 ops/s
Iteration  17: 2883199.484 ops/s
Iteration  18: 2688806.018 ops/s
Iteration  19: 2920511.107 ops/s
Iteration  20: 2646268.254 ops/s
Iteration  21: 2820317.730 ops/s
Iteration  22: 2750833.072 ops/s
Iteration  23: 2833715.523 ops/s
Iteration  24: 2773651.896 ops/s
Iteration  25: 2716325.018 ops/s
Iteration  26: 2767990.924 ops/s
Iteration  27: 2944231.431 ops/s
Iteration  28: 2692905.592 ops/s
Iteration  29: 2765499.232 ops/s
Iteration  30: 2802540.715 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeComplete":
  2780968.931 ±(99.9%) 47473.416 ops/s [Average]
  (min, avg, max) = (2646268.254, 2780968.931, 2944231.431), stdev = 71055.979
  CI (99.9%): [2733495.515, 2828442.347] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_requestBeforeComplete  thrpt   30  2780968.931 ± 47473.416  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 223093.319 ops/s
# Warmup Iteration   2: 1233993.682 ops/s
# Warmup Iteration   3: 2499441.661 ops/s
# Warmup Iteration   4: 2576030.769 ops/s
# Warmup Iteration   5: 2692084.332 ops/s
# Warmup Iteration   6: 2601495.627 ops/s
# Warmup Iteration   7: 2475472.701 ops/s
# Warmup Iteration   8: 2571747.233 ops/s
# Warmup Iteration   9: 2606433.968 ops/s
# Warmup Iteration  10: 2682126.662 ops/s
# Warmup Iteration  11: 2545710.426 ops/s
# Warmup Iteration  12: 2534072.136 ops/s
# Warmup Iteration  13: 2723541.749 ops/s
# Warmup Iteration  14: 2605125.992 ops/s
# Warmup Iteration  15: 2714011.460 ops/s
# Warmup Iteration  16: 2680825.464 ops/s
# Warmup Iteration  17: 2578090.574 ops/s
# Warmup Iteration  18: 2649200.190 ops/s
# Warmup Iteration  19: 2583786.253 ops/s
# Warmup Iteration  20: 2622373.645 ops/s
# Warmup Iteration  21: 2676182.372 ops/s
# Warmup Iteration  22: 2630838.071 ops/s
# Warmup Iteration  23: 2646288.116 ops/s
# Warmup Iteration  24: 2593151.451 ops/s
# Warmup Iteration  25: 2628225.269 ops/s
# Warmup Iteration  26: 2779846.220 ops/s
# Warmup Iteration  27: 2666752.986 ops/s
# Warmup Iteration  28: 2666140.398 ops/s
# Warmup Iteration  29: 2599932.641 ops/s
# Warmup Iteration  30: 2635751.253 ops/s
Iteration   1: 2616107.413 ops/s
Iteration   2: 2674443.550 ops/s
Iteration   3: 2703866.778 ops/s
Iteration   4: 2568858.987 ops/s
Iteration   5: 2736432.657 ops/s
Iteration   6: 2609535.773 ops/s
Iteration   7: 2716810.150 ops/s
Iteration   8: 2597620.426 ops/s
Iteration   9: 2701018.172 ops/s
Iteration  10: 2694262.998 ops/s
Iteration  11: 2633760.941 ops/s
Iteration  12: 2687571.283 ops/s
Iteration  13: 2636024.456 ops/s
Iteration  14: 2657489.834 ops/s
Iteration  15: 2637649.566 ops/s
Iteration  16: 2646117.433 ops/s
Iteration  17: 2768118.385 ops/s
Iteration  18: 2587148.298 ops/s
Iteration  19: 2606392.534 ops/s
Iteration  20: 2669842.539 ops/s
Iteration  21: 2688808.423 ops/s
Iteration  22: 2723222.784 ops/s
Iteration  23: 2750893.724 ops/s
Iteration  24: 2578000.290 ops/s
Iteration  25: 2750456.043 ops/s
Iteration  26: 2659151.135 ops/s
Iteration  27: 2690211.855 ops/s
Iteration  28: 2571913.685 ops/s
Iteration  29: 2641349.591 ops/s
Iteration  30: 2739808.271 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSource":
  2664762.933 ±(99.9%) 38465.034 ops/s [Average]
  (min, avg, max) = (2568858.987, 2664762.933, 2768118.385), stdev = 57572.656
  CI (99.9%): [2626297.899, 2703227.967] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSource  thrpt   30  2664762.933 ± 38465.034  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36969.939 ops/s
# Warmup Iteration   2: 117484.685 ops/s
# Warmup Iteration   3: 139592.910 ops/s
# Warmup Iteration   4: 141139.990 ops/s
# Warmup Iteration   5: 140077.772 ops/s
# Warmup Iteration   6: 139344.207 ops/s
# Warmup Iteration   7: 113312.177 ops/s
# Warmup Iteration   8: 139571.824 ops/s
# Warmup Iteration   9: 143973.468 ops/s
# Warmup Iteration  10: 149995.687 ops/s
# Warmup Iteration  11: 144058.676 ops/s
# Warmup Iteration  12: 147211.928 ops/s
# Warmup Iteration  13: 152053.791 ops/s
# Warmup Iteration  14: 144877.202 ops/s
# Warmup Iteration  15: 152861.775 ops/s
# Warmup Iteration  16: 147450.518 ops/s
# Warmup Iteration  17: 152214.824 ops/s
# Warmup Iteration  18: 158142.140 ops/s
# Warmup Iteration  19: 153201.362 ops/s
# Warmup Iteration  20: 153568.084 ops/s
# Warmup Iteration  21: 150606.352 ops/s
# Warmup Iteration  22: 154353.304 ops/s
# Warmup Iteration  23: 156131.494 ops/s
# Warmup Iteration  24: 150080.379 ops/s
# Warmup Iteration  25: 154419.072 ops/s
# Warmup Iteration  26: 152955.954 ops/s
# Warmup Iteration  27: 155083.943 ops/s
# Warmup Iteration  28: 155716.141 ops/s
# Warmup Iteration  29: 151879.655 ops/s
# Warmup Iteration  30: 158314.455 ops/s
Iteration   1: 148427.121 ops/s
Iteration   2: 152898.001 ops/s
Iteration   3: 155199.059 ops/s
Iteration   4: 152643.867 ops/s
Iteration   5: 154740.411 ops/s
Iteration   6: 148503.324 ops/s
Iteration   7: 157028.232 ops/s
Iteration   8: 150679.546 ops/s
Iteration   9: 152979.363 ops/s
Iteration  10: 148165.256 ops/s
Iteration  11: 150245.326 ops/s
Iteration  12: 155210.864 ops/s
Iteration  13: 151142.939 ops/s
Iteration  14: 150712.864 ops/s
Iteration  15: 147948.841 ops/s
Iteration  16: 150663.962 ops/s
Iteration  17: 156316.531 ops/s
Iteration  18: 152269.658 ops/s
Iteration  19: 158827.992 ops/s
Iteration  20: 147250.045 ops/s
Iteration  21: 159672.162 ops/s
Iteration  22: 150247.546 ops/s
Iteration  23: 150883.271 ops/s
Iteration  24: 152839.530 ops/s
Iteration  25: 158186.861 ops/s
Iteration  26: 147682.126 ops/s
Iteration  27: 156892.726 ops/s
Iteration  28: 151268.255 ops/s
Iteration  29: 154026.293 ops/s
Iteration  30: 158692.493 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile2":
  152741.482 ±(99.9%) 2438.117 ops/s [Average]
  (min, avg, max) = (147250.045, 152741.482, 159672.162), stdev = 3649.258
  CI (99.9%): [150303.366, 155179.599] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRetryWhile2  thrpt   30  152741.482 ± 2438.117  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_upstreamDisposedWhenOutputsDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_upstreamDisposedWhenOutputsDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31298.366 ops/s
# Warmup Iteration   2: 133418.099 ops/s
# Warmup Iteration   3: 223517.652 ops/s
# Warmup Iteration   4: 710653.407 ops/s
# Warmup Iteration   5: 676543.269 ops/s
# Warmup Iteration   6: 721088.132 ops/s
# Warmup Iteration   7: 659894.769 ops/s
# Warmup Iteration   8: 681279.789 ops/s
# Warmup Iteration   9: 671788.862 ops/s
# Warmup Iteration  10: 702446.354 ops/s
# Warmup Iteration  11: 720578.608 ops/s
# Warmup Iteration  12: 682544.733 ops/s
# Warmup Iteration  13: 701240.248 ops/s
# Warmup Iteration  14: 746730.724 ops/s
# Warmup Iteration  15: 691091.152 ops/s
# Warmup Iteration  16: 732628.144 ops/s
# Warmup Iteration  17: 716600.577 ops/s
# Warmup Iteration  18: 698397.552 ops/s
# Warmup Iteration  19: 748975.606 ops/s
# Warmup Iteration  20: 703344.512 ops/s
# Warmup Iteration  21: 732988.963 ops/s
# Warmup Iteration  22: 695775.320 ops/s
# Warmup Iteration  23: 708203.364 ops/s
# Warmup Iteration  24: 734946.629 ops/s
# Warmup Iteration  25: 710017.034 ops/s
# Warmup Iteration  26: 724316.446 ops/s
# Warmup Iteration  27: 743129.967 ops/s
# Warmup Iteration  28: 706545.050 ops/s
# Warmup Iteration  29: 728436.203 ops/s
# Warmup Iteration  30: 702330.045 ops/s
Iteration   1: 701097.133 ops/s
Iteration   2: 701432.054 ops/s
Iteration   3: 694978.381 ops/s
Iteration   4: 700779.575 ops/s
Iteration   5: 738718.469 ops/s
Iteration   6: 717001.612 ops/s
Iteration   7: 704206.055 ops/s
Iteration   8: 705851.087 ops/s
Iteration   9: 744244.011 ops/s
Iteration  10: 708326.730 ops/s
Iteration  11: 734843.955 ops/s
Iteration  12: 704417.261 ops/s
Iteration  13: 705804.586 ops/s
Iteration  14: 742341.702 ops/s
Iteration  15: 738707.013 ops/s
Iteration  16: 705759.585 ops/s
Iteration  17: 720675.536 ops/s
Iteration  18: 705195.814 ops/s
Iteration  19: 709073.303 ops/s
Iteration  20: 735118.460 ops/s
Iteration  21: 686422.131 ops/s
Iteration  22: 726392.156 ops/s
Iteration  23: 694066.130 ops/s
Iteration  24: 727190.312 ops/s
Iteration  25: 717625.701 ops/s
Iteration  26: 723032.857 ops/s
Iteration  27: 709450.875 ops/s
Iteration  28: 721570.291 ops/s
Iteration  29: 735065.311 ops/s
Iteration  30: 699974.738 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_upstreamDisposedWhenOutputsDisposed":
  715312.094 ±(99.9%) 10747.718 ops/s [Average]
  (min, avg, max) = (686422.131, 715312.094, 744244.011), stdev = 16086.679
  CI (99.9%): [704564.376, 726059.812] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score       Error  Units
FlowableWindowWithFlowableTest._Benchmark.benchmark_upstreamDisposedWhenOutputsDisposed  thrpt   30  715312.094 ± 10747.718  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_normalBehavior$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_normalBehavior

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2656.385 ops/s
# Warmup Iteration   2: 9202.677 ops/s
# Warmup Iteration   3: 27137.137 ops/s
# Warmup Iteration   4: 38539.020 ops/s
# Warmup Iteration   5: 80610.456 ops/s
# Warmup Iteration   6: 105921.444 ops/s
# Warmup Iteration   7: 97194.458 ops/s
# Warmup Iteration   8: 101738.637 ops/s
# Warmup Iteration   9: 104661.612 ops/s
# Warmup Iteration  10: 107717.530 ops/s
# Warmup Iteration  11: 106152.146 ops/s
# Warmup Iteration  12: 105712.043 ops/s
# Warmup Iteration  13: 102208.676 ops/s
# Warmup Iteration  14: 109669.870 ops/s
# Warmup Iteration  15: 101977.069 ops/s
# Warmup Iteration  16: 106860.684 ops/s
# Warmup Iteration  17: 110864.742 ops/s
# Warmup Iteration  18: 104633.197 ops/s
# Warmup Iteration  19: 107386.471 ops/s
# Warmup Iteration  20: 104292.115 ops/s
# Warmup Iteration  21: 103719.144 ops/s
# Warmup Iteration  22: 109122.511 ops/s
# Warmup Iteration  23: 104592.094 ops/s
# Warmup Iteration  24: 105567.445 ops/s
# Warmup Iteration  25: 108751.816 ops/s
# Warmup Iteration  26: 104135.172 ops/s
# Warmup Iteration  27: 105183.553 ops/s
# Warmup Iteration  28: 104701.067 ops/s
# Warmup Iteration  29: 105069.466 ops/s
# Warmup Iteration  30: 104676.514 ops/s
Iteration   1: 105514.221 ops/s
Iteration   2: 108910.972 ops/s
Iteration   3: 107181.019 ops/s
Iteration   4: 103701.635 ops/s
Iteration   5: 108061.345 ops/s
Iteration   6: 103230.971 ops/s
Iteration   7: 109314.825 ops/s
Iteration   8: 104272.904 ops/s
Iteration   9: 108586.303 ops/s
Iteration  10: 106450.670 ops/s
Iteration  11: 102822.883 ops/s
Iteration  12: 110564.805 ops/s
Iteration  13: 103866.404 ops/s
Iteration  14: 107923.886 ops/s
Iteration  15: 108538.376 ops/s
Iteration  16: 103477.632 ops/s
Iteration  17: 111427.027 ops/s
Iteration  18: 109890.063 ops/s
Iteration  19: 105186.612 ops/s
Iteration  20: 109605.280 ops/s
Iteration  21: 105729.239 ops/s
Iteration  22: 105037.891 ops/s
Iteration  23: 110046.981 ops/s
Iteration  24: 104602.868 ops/s
Iteration  25: 111112.633 ops/s
Iteration  26: 111627.071 ops/s
Iteration  27: 104248.725 ops/s
Iteration  28: 110331.847 ops/s
Iteration  29: 103140.070 ops/s
Iteration  30: 108724.174 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_normalBehavior":
  107104.311 ±(99.9%) 1907.469 ops/s [Average]
  (min, avg, max) = (102822.883, 107104.311, 111627.071), stdev = 2855.010
  CI (99.9%): [105196.842, 109011.780] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_normalBehavior  thrpt   30  107104.311 ± 1907.469  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByEvictionCancellationOfSource5933$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByEvictionCancellationOfSource5933

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1981.140 ops/s
# Warmup Iteration   2: 29316.772 ops/s
# Warmup Iteration   3: 41457.874 ops/s
# Warmup Iteration   4: 50898.690 ops/s
# Warmup Iteration   5: 46995.796 ops/s
# Warmup Iteration   6: 140006.663 ops/s
# Warmup Iteration   7: 143301.464 ops/s
# Warmup Iteration   8: 141275.344 ops/s
# Warmup Iteration   9: 143393.250 ops/s
# Warmup Iteration  10: 137030.767 ops/s
# Warmup Iteration  11: 140412.646 ops/s
# Warmup Iteration  12: 137059.247 ops/s
# Warmup Iteration  13: 143688.031 ops/s
# Warmup Iteration  14: 144585.230 ops/s
# Warmup Iteration  15: 139798.470 ops/s
# Warmup Iteration  16: 139506.969 ops/s
# Warmup Iteration  17: 134666.383 ops/s
# Warmup Iteration  18: 138933.383 ops/s
# Warmup Iteration  19: 142028.832 ops/s
# Warmup Iteration  20: 135989.173 ops/s
# Warmup Iteration  21: 146502.205 ops/s
# Warmup Iteration  22: 142957.040 ops/s
# Warmup Iteration  23: 144833.184 ops/s
# Warmup Iteration  24: 141463.798 ops/s
# Warmup Iteration  25: 146367.480 ops/s
# Warmup Iteration  26: 142964.422 ops/s
# Warmup Iteration  27: 139938.075 ops/s
# Warmup Iteration  28: 151203.817 ops/s
# Warmup Iteration  29: 144207.862 ops/s
# Warmup Iteration  30: 145789.596 ops/s
Iteration   1: 140342.186 ops/s
Iteration   2: 145828.805 ops/s
Iteration   3: 142690.429 ops/s
Iteration   4: 143769.476 ops/s
Iteration   5: 144302.068 ops/s
Iteration   6: 142634.727 ops/s
Iteration   7: 147782.782 ops/s
Iteration   8: 140066.545 ops/s
Iteration   9: 150863.150 ops/s
Iteration  10: 138390.582 ops/s
Iteration  11: 138746.531 ops/s
Iteration  12: 147594.018 ops/s
Iteration  13: 142627.472 ops/s
Iteration  14: 147102.908 ops/s
Iteration  15: 143681.489 ops/s
Iteration  16: 141601.883 ops/s
Iteration  17: 150432.607 ops/s
Iteration  18: 141912.034 ops/s
Iteration  19: 145473.285 ops/s
Iteration  20: 147374.252 ops/s
Iteration  21: 143644.323 ops/s
Iteration  22: 140867.426 ops/s
Iteration  23: 145376.101 ops/s
Iteration  24: 145221.277 ops/s
Iteration  25: 140767.861 ops/s
Iteration  26: 148456.462 ops/s
Iteration  27: 137029.090 ops/s
Iteration  28: 114833.473 ops/s
Iteration  29: 137733.631 ops/s
Iteration  30: 142506.369 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_groupByEvictionCancellationOfSource5933":
  142655.108 ±(99.9%) 4254.775 ops/s [Average]
  (min, avg, max) = (114833.473, 142655.108, 150863.150), stdev = 6368.347
  CI (99.9%): [138400.333, 146909.883] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_groupByEvictionCancellationOfSource5933  thrpt   30  142655.108 ± 4254.775  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_overlappingOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_overlappingOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7029.307 ops/s
# Warmup Iteration   2: 46222.742 ops/s
# Warmup Iteration   3: 55910.182 ops/s
# Warmup Iteration   4: 63310.288 ops/s
# Warmup Iteration   5: 128271.454 ops/s
# Warmup Iteration   6: 180313.944 ops/s
# Warmup Iteration   7: 179338.678 ops/s
# Warmup Iteration   8: 171603.356 ops/s
# Warmup Iteration   9: 183197.964 ops/s
# Warmup Iteration  10: 178528.796 ops/s
# Warmup Iteration  11: 174859.579 ops/s
# Warmup Iteration  12: 183274.563 ops/s
# Warmup Iteration  13: 166504.056 ops/s
# Warmup Iteration  14: 187836.480 ops/s
# Warmup Iteration  15: 178653.509 ops/s
# Warmup Iteration  16: 186945.880 ops/s
# Warmup Iteration  17: 183333.370 ops/s
# Warmup Iteration  18: 184207.408 ops/s
# Warmup Iteration  19: 185115.198 ops/s
# Warmup Iteration  20: 187509.590 ops/s
# Warmup Iteration  21: 187277.937 ops/s
# Warmup Iteration  22: 180290.565 ops/s
# Warmup Iteration  23: 188944.044 ops/s
# Warmup Iteration  24: 188307.950 ops/s
# Warmup Iteration  25: 176781.760 ops/s
# Warmup Iteration  26: 174066.451 ops/s
# Warmup Iteration  27: 189329.368 ops/s
# Warmup Iteration  28: 186359.921 ops/s
# Warmup Iteration  29: 191572.910 ops/s
# Warmup Iteration  30: 185453.772 ops/s
Iteration   1: 192964.081 ops/s
Iteration   2: 189141.621 ops/s
Iteration   3: 180548.009 ops/s
Iteration   4: 189197.642 ops/s
Iteration   5: 183290.738 ops/s
Iteration   6: 187272.215 ops/s
Iteration   7: 193787.673 ops/s
Iteration   8: 184246.768 ops/s
Iteration   9: 191577.490 ops/s
Iteration  10: 184805.201 ops/s
Iteration  11: 187089.829 ops/s
Iteration  12: 192592.676 ops/s
Iteration  13: 186585.616 ops/s
Iteration  14: 181552.718 ops/s
Iteration  15: 192509.015 ops/s
Iteration  16: 179938.015 ops/s
Iteration  17: 194435.927 ops/s
Iteration  18: 193507.523 ops/s
Iteration  19: 186117.924 ops/s
Iteration  20: 186952.646 ops/s
Iteration  21: 194192.367 ops/s
Iteration  22: 182866.534 ops/s
Iteration  23: 191159.113 ops/s
Iteration  24: 180427.569 ops/s
Iteration  25: 189289.625 ops/s
Iteration  26: 182247.615 ops/s
Iteration  27: 185624.647 ops/s
Iteration  28: 186204.001 ops/s
Iteration  29: 190548.098 ops/s
Iteration  30: 176056.565 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_overlappingOnError":
  187224.315 ±(99.9%) 3306.164 ops/s [Average]
  (min, avg, max) = (176056.565, 187224.315, 194435.927), stdev = 4948.511
  CI (99.9%): [183918.151, 190530.480] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_overlappingOnError  thrpt   30  187224.315 ± 3306.164  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_cancelOtherOnMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_cancelOtherOnMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100217.786 ops/s
# Warmup Iteration   2: 371303.727 ops/s
# Warmup Iteration   3: 526165.939 ops/s
# Warmup Iteration   4: 595551.172 ops/s
# Warmup Iteration   5: 586759.318 ops/s
# Warmup Iteration   6: 579601.799 ops/s
# Warmup Iteration   7: 600279.287 ops/s
# Warmup Iteration   8: 584357.418 ops/s
# Warmup Iteration   9: 553614.854 ops/s
# Warmup Iteration  10: 593571.772 ops/s
# Warmup Iteration  11: 576855.485 ops/s
# Warmup Iteration  12: 566626.460 ops/s
# Warmup Iteration  13: 599629.593 ops/s
# Warmup Iteration  14: 599358.251 ops/s
# Warmup Iteration  15: 572167.970 ops/s
# Warmup Iteration  16: 584118.884 ops/s
# Warmup Iteration  17: 600197.493 ops/s
# Warmup Iteration  18: 625301.007 ops/s
# Warmup Iteration  19: 606136.203 ops/s
# Warmup Iteration  20: 597923.095 ops/s
# Warmup Iteration  21: 626922.182 ops/s
# Warmup Iteration  22: 640739.470 ops/s
# Warmup Iteration  23: 600297.683 ops/s
# Warmup Iteration  24: 610167.409 ops/s
# Warmup Iteration  25: 573417.053 ops/s
# Warmup Iteration  26: 591785.860 ops/s
# Warmup Iteration  27: 620040.680 ops/s
# Warmup Iteration  28: 606414.380 ops/s
# Warmup Iteration  29: 617556.905 ops/s
# Warmup Iteration  30: 604563.685 ops/s
Iteration   1: 632434.712 ops/s
Iteration   2: 609239.834 ops/s
Iteration   3: 622090.110 ops/s
Iteration   4: 612479.894 ops/s
Iteration   5: 588926.120 ops/s
Iteration   6: 625413.684 ops/s
Iteration   7: 581088.997 ops/s
Iteration   8: 594946.076 ops/s
Iteration   9: 605313.748 ops/s
Iteration  10: 634771.834 ops/s
Iteration  11: 619506.199 ops/s
Iteration  12: 634264.110 ops/s
Iteration  13: 598477.058 ops/s
Iteration  14: 611181.475 ops/s
Iteration  15: 626929.667 ops/s
Iteration  16: 606454.079 ops/s
Iteration  17: 634063.566 ops/s
Iteration  18: 648780.060 ops/s
Iteration  19: 610447.096 ops/s
Iteration  20: 635234.413 ops/s
Iteration  21: 635274.679 ops/s
Iteration  22: 445009.537 ops/s
Iteration  23: 636657.709 ops/s
Iteration  24: 599180.693 ops/s
Iteration  25: 653221.784 ops/s
Iteration  26: 626305.949 ops/s
Iteration  27: 596858.437 ops/s
Iteration  28: 641609.489 ops/s
Iteration  29: 629331.487 ops/s
Iteration  30: 598144.446 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_cancelOtherOnMainError":
  613121.232 ±(99.9%) 24527.521 ops/s [Average]
  (min, avg, max) = (445009.537, 613121.232, 653221.784), stdev = 36711.642
  CI (99.9%): [588593.710, 637648.753] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_cancelOtherOnMainError  thrpt   30  613121.232 ± 24527.521  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_errorFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_errorFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 148117.512 ops/s
# Warmup Iteration   2: 575089.874 ops/s
# Warmup Iteration   3: 647316.484 ops/s
# Warmup Iteration   4: 645951.975 ops/s
# Warmup Iteration   5: 574623.651 ops/s
# Warmup Iteration   6: 717545.163 ops/s
# Warmup Iteration   7: 675918.466 ops/s
# Warmup Iteration   8: 696992.300 ops/s
# Warmup Iteration   9: 685021.352 ops/s
# Warmup Iteration  10: 709459.167 ops/s
# Warmup Iteration  11: 692793.263 ops/s
# Warmup Iteration  12: 693988.012 ops/s
# Warmup Iteration  13: 688876.945 ops/s
# Warmup Iteration  14: 697507.137 ops/s
# Warmup Iteration  15: 691503.415 ops/s
# Warmup Iteration  16: 708544.703 ops/s
# Warmup Iteration  17: 728450.287 ops/s
# Warmup Iteration  18: 731783.157 ops/s
# Warmup Iteration  19: 746493.161 ops/s
# Warmup Iteration  20: 749297.784 ops/s
# Warmup Iteration  21: 735469.045 ops/s
# Warmup Iteration  22: 730647.424 ops/s
# Warmup Iteration  23: 743806.048 ops/s
# Warmup Iteration  24: 707640.604 ops/s
# Warmup Iteration  25: 763438.137 ops/s
# Warmup Iteration  26: 741546.366 ops/s
# Warmup Iteration  27: 714875.600 ops/s
# Warmup Iteration  28: 746573.084 ops/s
# Warmup Iteration  29: 732504.671 ops/s
# Warmup Iteration  30: 758867.971 ops/s
Iteration   1: 710092.130 ops/s
Iteration   2: 728928.461 ops/s
Iteration   3: 758530.033 ops/s
Iteration   4: 724143.251 ops/s
Iteration   5: 748635.214 ops/s
Iteration   6: 739972.971 ops/s
Iteration   7: 721162.628 ops/s
Iteration   8: 751554.469 ops/s
Iteration   9: 743945.232 ops/s
Iteration  10: 730300.040 ops/s
Iteration  11: 724575.362 ops/s
Iteration  12: 720414.139 ops/s
Iteration  13: 752709.985 ops/s
Iteration  14: 721301.610 ops/s
Iteration  15: 716903.582 ops/s
Iteration  16: 746136.194 ops/s
Iteration  17: 733679.060 ops/s
Iteration  18: 737342.544 ops/s
Iteration  19: 747320.755 ops/s
Iteration  20: 723391.008 ops/s
Iteration  21: 747784.844 ops/s
Iteration  22: 726187.585 ops/s
Iteration  23: 745004.443 ops/s
Iteration  24: 742560.105 ops/s
Iteration  25: 743676.445 ops/s
Iteration  26: 729051.966 ops/s
Iteration  27: 738473.917 ops/s
Iteration  28: 763136.041 ops/s
Iteration  29: 714193.070 ops/s
Iteration  30: 740605.394 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_errorFlowable":
  735723.749 ±(99.9%) 9147.619 ops/s [Average]
  (min, avg, max) = (710092.130, 735723.749, 763136.041), stdev = 13691.726
  CI (99.9%): [726576.130, 744871.368] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableElementAtTest._Benchmark.benchmark_errorFlowable  thrpt   30  735723.749 ± 9147.619  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_errorToFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_errorToFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95230.777 ops/s
# Warmup Iteration   2: 539372.575 ops/s
# Warmup Iteration   3: 633262.702 ops/s
# Warmup Iteration   4: 637815.479 ops/s
# Warmup Iteration   5: 593691.383 ops/s
# Warmup Iteration   6: 692321.983 ops/s
# Warmup Iteration   7: 673654.971 ops/s
# Warmup Iteration   8: 706347.105 ops/s
# Warmup Iteration   9: 674539.792 ops/s
# Warmup Iteration  10: 684027.384 ops/s
# Warmup Iteration  11: 675137.126 ops/s
# Warmup Iteration  12: 679004.199 ops/s
# Warmup Iteration  13: 693575.693 ops/s
# Warmup Iteration  14: 682461.041 ops/s
# Warmup Iteration  15: 696518.479 ops/s
# Warmup Iteration  16: 701048.094 ops/s
# Warmup Iteration  17: 725682.958 ops/s
# Warmup Iteration  18: 727359.210 ops/s
# Warmup Iteration  19: 717580.118 ops/s
# Warmup Iteration  20: 725885.630 ops/s
# Warmup Iteration  21: 722307.445 ops/s
# Warmup Iteration  22: 710040.310 ops/s
# Warmup Iteration  23: 720049.858 ops/s
# Warmup Iteration  24: 714812.933 ops/s
# Warmup Iteration  25: 745050.087 ops/s
# Warmup Iteration  26: 720681.577 ops/s
# Warmup Iteration  27: 737815.321 ops/s
# Warmup Iteration  28: 750168.630 ops/s
# Warmup Iteration  29: 685623.620 ops/s
# Warmup Iteration  30: 759042.440 ops/s
Iteration   1: 714103.146 ops/s
Iteration   2: 724543.125 ops/s
Iteration   3: 759973.626 ops/s
Iteration   4: 735093.439 ops/s
Iteration   5: 712954.558 ops/s
Iteration   6: 749101.403 ops/s
Iteration   7: 741401.406 ops/s
Iteration   8: 719919.087 ops/s
Iteration   9: 761383.391 ops/s
Iteration  10: 716872.516 ops/s
Iteration  11: 734161.501 ops/s
Iteration  12: 712775.116 ops/s
Iteration  13: 726799.608 ops/s
Iteration  14: 727577.421 ops/s
Iteration  15: 702726.280 ops/s
Iteration  16: 734514.377 ops/s
Iteration  17: 504149.194 ops/s
Iteration  18: 706609.534 ops/s
Iteration  19: 725758.095 ops/s
Iteration  20: 703461.236 ops/s
Iteration  21: 729960.763 ops/s
Iteration  22: 721916.681 ops/s
Iteration  23: 717625.065 ops/s
Iteration  24: 748294.343 ops/s
Iteration  25: 704048.195 ops/s
Iteration  26: 770750.719 ops/s
Iteration  27: 719971.148 ops/s
Iteration  28: 755703.918 ops/s
Iteration  29: 720451.010 ops/s
Iteration  30: 725243.558 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_errorToFlowable":
  720928.115 ±(99.9%) 29857.497 ops/s [Average]
  (min, avg, max) = (504149.194, 720928.115, 770750.719), stdev = 44689.299
  CI (99.9%): [691070.618, 750785.612] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_errorToFlowable  thrpt   30  720928.115 ± 29857.497  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_synchronousDisconnect$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_synchronousDisconnect

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 64269.423 ops/s
# Warmup Iteration   2: 344702.935 ops/s
# Warmup Iteration   3: 516608.234 ops/s
# Warmup Iteration   4: 675465.795 ops/s
# Warmup Iteration   5: 693097.383 ops/s
# Warmup Iteration   6: 684861.620 ops/s
# Warmup Iteration   7: 684271.813 ops/s
# Warmup Iteration   8: 716971.069 ops/s
# Warmup Iteration   9: 690855.355 ops/s
# Warmup Iteration  10: 697278.219 ops/s
# Warmup Iteration  11: 700440.394 ops/s
# Warmup Iteration  12: 688325.611 ops/s
# Warmup Iteration  13: 723386.500 ops/s
# Warmup Iteration  14: 654732.226 ops/s
# Warmup Iteration  15: 672127.210 ops/s
# Warmup Iteration  16: 691758.627 ops/s
# Warmup Iteration  17: 709183.654 ops/s
# Warmup Iteration  18: 720156.221 ops/s
# Warmup Iteration  19: 693022.381 ops/s
# Warmup Iteration  20: 726972.640 ops/s
# Warmup Iteration  21: 680553.213 ops/s
# Warmup Iteration  22: 716259.936 ops/s
# Warmup Iteration  23: 677748.179 ops/s
# Warmup Iteration  24: 704070.172 ops/s
# Warmup Iteration  25: 725466.840 ops/s
# Warmup Iteration  26: 691179.135 ops/s
# Warmup Iteration  27: 722464.352 ops/s
# Warmup Iteration  28: 695460.013 ops/s
# Warmup Iteration  29: 712676.576 ops/s
# Warmup Iteration  30: 717329.993 ops/s
Iteration   1: 673522.411 ops/s
Iteration   2: 719670.081 ops/s
Iteration   3: 734710.287 ops/s
Iteration   4: 693842.625 ops/s
Iteration   5: 714128.268 ops/s
Iteration   6: 693806.441 ops/s
Iteration   7: 720539.198 ops/s
Iteration   8: 693235.817 ops/s
Iteration   9: 707824.451 ops/s
Iteration  10: 721218.333 ops/s
Iteration  11: 685103.745 ops/s
Iteration  12: 724637.623 ops/s
Iteration  13: 678085.232 ops/s
Iteration  14: 690451.087 ops/s
Iteration  15: 686036.849 ops/s
Iteration  16: 706603.319 ops/s
Iteration  17: 687352.898 ops/s
Iteration  18: 702867.553 ops/s
Iteration  19: 690717.333 ops/s
Iteration  20: 719860.910 ops/s
Iteration  21: 674664.246 ops/s
Iteration  22: 714073.462 ops/s
Iteration  23: 699354.154 ops/s
Iteration  24: 666106.208 ops/s
Iteration  25: 722768.919 ops/s
Iteration  26: 694481.437 ops/s
Iteration  27: 724968.822 ops/s
Iteration  28: 711052.364 ops/s
Iteration  29: 690192.284 ops/s
Iteration  30: 769311.947 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_synchronousDisconnect":
  703706.277 ±(99.9%) 14472.286 ops/s [Average]
  (min, avg, max) = (666106.208, 703706.277, 769311.947), stdev = 21661.437
  CI (99.9%): [689233.991, 718178.562] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_synchronousDisconnect  thrpt   30  703706.277 ± 14472.286  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_synchronousDisconnect$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_synchronousDisconnect

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 57712.689 ops/s
# Warmup Iteration   2: 395673.418 ops/s
# Warmup Iteration   3: 524575.307 ops/s
# Warmup Iteration   4: 666051.333 ops/s
# Warmup Iteration   5: 695115.664 ops/s
# Warmup Iteration   6: 671798.013 ops/s
# Warmup Iteration   7: 682618.908 ops/s
# Warmup Iteration   8: 694511.550 ops/s
# Warmup Iteration   9: 686891.366 ops/s
# Warmup Iteration  10: 705520.313 ops/s
# Warmup Iteration  11: 650712.959 ops/s
# Warmup Iteration  12: 725317.793 ops/s
# Warmup Iteration  13: 683780.465 ops/s
# Warmup Iteration  14: 715502.442 ops/s
# Warmup Iteration  15: 697946.131 ops/s
# Warmup Iteration  16: 679914.603 ops/s
# Warmup Iteration  17: 697987.626 ops/s
# Warmup Iteration  18: 675902.347 ops/s
# Warmup Iteration  19: 694379.704 ops/s
# Warmup Iteration  20: 670123.156 ops/s
# Warmup Iteration  21: 680571.847 ops/s
# Warmup Iteration  22: 717204.728 ops/s
# Warmup Iteration  23: 706491.997 ops/s
# Warmup Iteration  24: 671629.845 ops/s
# Warmup Iteration  25: 706470.095 ops/s
# Warmup Iteration  26: 685774.434 ops/s
# Warmup Iteration  27: 701646.369 ops/s
# Warmup Iteration  28: 700819.058 ops/s
# Warmup Iteration  29: 679358.626 ops/s
# Warmup Iteration  30: 729451.941 ops/s
Iteration   1: 645038.899 ops/s
Iteration   2: 697924.917 ops/s
Iteration   3: 689155.489 ops/s
Iteration   4: 660024.793 ops/s
Iteration   5: 696480.218 ops/s
Iteration   6: 638286.342 ops/s
Iteration   7: 726138.374 ops/s
Iteration   8: 689449.616 ops/s
Iteration   9: 703651.726 ops/s
Iteration  10: 680691.656 ops/s
Iteration  11: 571796.262 ops/s
Iteration  12: 702062.383 ops/s
Iteration  13: 688921.740 ops/s
Iteration  14: 691835.572 ops/s
Iteration  15: 690544.570 ops/s
Iteration  16: 689200.095 ops/s
Iteration  17: 686733.120 ops/s
Iteration  18: 722787.619 ops/s
Iteration  19: 689832.393 ops/s
Iteration  20: 670211.503 ops/s
Iteration  21: 722103.391 ops/s
Iteration  22: 677721.577 ops/s
Iteration  23: 721948.729 ops/s
Iteration  24: 665905.587 ops/s
Iteration  25: 720381.742 ops/s
Iteration  26: 681364.917 ops/s
Iteration  27: 712312.925 ops/s
Iteration  28: 696850.532 ops/s
Iteration  29: 678621.828 ops/s
Iteration  30: 732975.889 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_synchronousDisconnect":
  688031.814 ±(99.9%) 21151.166 ops/s [Average]
  (min, avg, max) = (571796.262, 688031.814, 732975.889), stdev = 31658.071
  CI (99.9%): [666880.648, 709182.979] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_synchronousDisconnect  thrpt   30  688031.814 ± 21151.166  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromFutureReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromFutureReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 97580.639 ops/s
# Warmup Iteration   2: 446601.960 ops/s
# Warmup Iteration   3: 527650.170 ops/s
# Warmup Iteration   4: 623407.417 ops/s
# Warmup Iteration   5: 616264.130 ops/s
# Warmup Iteration   6: 599989.573 ops/s
# Warmup Iteration   7: 572658.992 ops/s
# Warmup Iteration   8: 631524.452 ops/s
# Warmup Iteration   9: 601691.709 ops/s
# Warmup Iteration  10: 600888.543 ops/s
# Warmup Iteration  11: 595137.708 ops/s
# Warmup Iteration  12: 609179.360 ops/s
# Warmup Iteration  13: 616262.150 ops/s
# Warmup Iteration  14: 597903.419 ops/s
# Warmup Iteration  15: 620781.594 ops/s
# Warmup Iteration  16: 582983.646 ops/s
# Warmup Iteration  17: 639356.189 ops/s
# Warmup Iteration  18: 666845.427 ops/s
# Warmup Iteration  19: 617295.870 ops/s
# Warmup Iteration  20: 646739.578 ops/s
# Warmup Iteration  21: 635861.425 ops/s
# Warmup Iteration  22: 642268.919 ops/s
# Warmup Iteration  23: 625085.007 ops/s
# Warmup Iteration  24: 619556.013 ops/s
# Warmup Iteration  25: 589148.245 ops/s
# Warmup Iteration  26: 636715.423 ops/s
# Warmup Iteration  27: 621689.017 ops/s
# Warmup Iteration  28: 649251.333 ops/s
# Warmup Iteration  29: 625378.323 ops/s
# Warmup Iteration  30: 651958.694 ops/s
Iteration   1: 639906.005 ops/s
Iteration   2: 642289.374 ops/s
Iteration   3: 655141.044 ops/s
Iteration   4: 618054.350 ops/s
Iteration   5: 678731.152 ops/s
Iteration   6: 646102.751 ops/s
Iteration   7: 630450.050 ops/s
Iteration   8: 621000.370 ops/s
Iteration   9: 663193.163 ops/s
Iteration  10: 606969.119 ops/s
Iteration  11: 632047.310 ops/s
Iteration  12: 655399.833 ops/s
Iteration  13: 617467.501 ops/s
Iteration  14: 650828.122 ops/s
Iteration  15: 642610.144 ops/s
Iteration  16: 623795.868 ops/s
Iteration  17: 647968.525 ops/s
Iteration  18: 618840.213 ops/s
Iteration  19: 658854.947 ops/s
Iteration  20: 613810.742 ops/s
Iteration  21: 632191.981 ops/s
Iteration  22: 619290.642 ops/s
Iteration  23: 642751.498 ops/s
Iteration  24: 636043.718 ops/s
Iteration  25: 613687.024 ops/s
Iteration  26: 642879.545 ops/s
Iteration  27: 624482.344 ops/s
Iteration  28: 630507.995 ops/s
Iteration  29: 629693.999 ops/s
Iteration  30: 636309.647 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_fromFutureReturnsNull":
  635709.966 ±(99.9%) 11230.701 ops/s [Average]
  (min, avg, max) = (606969.119, 635709.966, 678731.152), stdev = 16809.586
  CI (99.9%): [624479.265, 646940.667] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_fromFutureReturnsNull  thrpt   30  635709.966 ± 11230.701  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31010.862 ops/s
# Warmup Iteration   2: 56116.559 ops/s
# Warmup Iteration   3: 116297.328 ops/s
# Warmup Iteration   4: 161097.414 ops/s
# Warmup Iteration   5: 168070.496 ops/s
# Warmup Iteration   6: 171072.789 ops/s
# Warmup Iteration   7: 162941.384 ops/s
# Warmup Iteration   8: 165790.000 ops/s
# Warmup Iteration   9: 162701.017 ops/s
# Warmup Iteration  10: 168656.848 ops/s
# Warmup Iteration  11: 168776.710 ops/s
# Warmup Iteration  12: 170914.657 ops/s
# Warmup Iteration  13: 167393.628 ops/s
# Warmup Iteration  14: 172095.296 ops/s
# Warmup Iteration  15: 164590.712 ops/s
# Warmup Iteration  16: 176012.791 ops/s
# Warmup Iteration  17: 178533.667 ops/s
# Warmup Iteration  18: 168626.722 ops/s
# Warmup Iteration  19: 174704.430 ops/s
# Warmup Iteration  20: 181133.450 ops/s
# Warmup Iteration  21: 170373.098 ops/s
# Warmup Iteration  22: 180520.982 ops/s
# Warmup Iteration  23: 174912.104 ops/s
# Warmup Iteration  24: 172459.681 ops/s
# Warmup Iteration  25: 179265.392 ops/s
# Warmup Iteration  26: 173645.291 ops/s
# Warmup Iteration  27: 176305.766 ops/s
# Warmup Iteration  28: 172570.007 ops/s
# Warmup Iteration  29: 173263.994 ops/s
# Warmup Iteration  30: 177614.652 ops/s
Iteration   1: 167866.946 ops/s
Iteration   2: 178812.969 ops/s
Iteration   3: 181599.405 ops/s
Iteration   4: 175620.118 ops/s
Iteration   5: 135009.233 ops/s
Iteration   6: 161415.242 ops/s
Iteration   7: 180655.338 ops/s
Iteration   8: 178390.971 ops/s
Iteration   9: 175720.775 ops/s
Iteration  10: 180037.737 ops/s
Iteration  11: 169482.815 ops/s
Iteration  12: 174566.407 ops/s
Iteration  13: 175822.084 ops/s
Iteration  14: 170529.861 ops/s
Iteration  15: 177745.733 ops/s
Iteration  16: 173596.577 ops/s
Iteration  17: 173769.950 ops/s
Iteration  18: 174681.266 ops/s
Iteration  19: 175276.489 ops/s
Iteration  20: 182737.771 ops/s
Iteration  21: 172609.401 ops/s
Iteration  22: 174425.740 ops/s
Iteration  23: 178518.550 ops/s
Iteration  24: 172554.016 ops/s
Iteration  25: 175017.078 ops/s
Iteration  26: 179181.194 ops/s
Iteration  27: 171836.545 ops/s
Iteration  28: 177785.362 ops/s
Iteration  29: 169558.622 ops/s
Iteration  30: 171983.173 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_doubleOnSubscribe":
  173560.246 ±(99.9%) 5713.857 ops/s [Average]
  (min, avg, max) = (135009.233, 173560.246, 182737.771), stdev = 8552.233
  CI (99.9%): [167846.388, 179274.103] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableElementAtTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  173560.246 ± 5713.857  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2242712.106 ops/s
# Warmup Iteration   2: 5974733.213 ops/s
# Warmup Iteration   3: 8919969.976 ops/s
# Warmup Iteration   4: 8594703.053 ops/s
# Warmup Iteration   5: 8885310.264 ops/s
# Warmup Iteration   6: 8576974.575 ops/s
# Warmup Iteration   7: 8560975.679 ops/s
# Warmup Iteration   8: 8815429.442 ops/s
# Warmup Iteration   9: 8398304.908 ops/s
# Warmup Iteration  10: 8767052.412 ops/s
# Warmup Iteration  11: 8584462.284 ops/s
# Warmup Iteration  12: 8793244.556 ops/s
# Warmup Iteration  13: 8915929.448 ops/s
# Warmup Iteration  14: 8590237.744 ops/s
# Warmup Iteration  15: 8828763.180 ops/s
# Warmup Iteration  16: 8615059.736 ops/s
# Warmup Iteration  17: 8794606.544 ops/s
# Warmup Iteration  18: 8508456.229 ops/s
# Warmup Iteration  19: 8541899.213 ops/s
# Warmup Iteration  20: 8851544.693 ops/s
# Warmup Iteration  21: 8686019.075 ops/s
# Warmup Iteration  22: 8734200.608 ops/s
# Warmup Iteration  23: 8650678.180 ops/s
# Warmup Iteration  24: 8661573.555 ops/s
# Warmup Iteration  25: 8966613.174 ops/s
# Warmup Iteration  26: 8536810.294 ops/s
# Warmup Iteration  27: 8625325.673 ops/s
# Warmup Iteration  28: 8842082.885 ops/s
# Warmup Iteration  29: 8860007.334 ops/s
# Warmup Iteration  30: 8660210.659 ops/s
Iteration   1: 8749550.996 ops/s
Iteration   2: 9003544.240 ops/s
Iteration   3: 8468161.713 ops/s
Iteration   4: 9030101.792 ops/s
Iteration   5: 8483481.750 ops/s
Iteration   6: 8688188.009 ops/s
Iteration   7: 8872305.774 ops/s
Iteration   8: 8655255.093 ops/s
Iteration   9: 8664223.018 ops/s
Iteration  10: 8857809.850 ops/s
Iteration  11: 8441009.196 ops/s
Iteration  12: 8979497.787 ops/s
Iteration  13: 8534616.669 ops/s
Iteration  14: 8673059.193 ops/s
Iteration  15: 8810513.122 ops/s
Iteration  16: 8791243.518 ops/s
Iteration  17: 8358601.263 ops/s
Iteration  18: 8952430.453 ops/s
Iteration  19: 8615081.866 ops/s
Iteration  20: 9049885.381 ops/s
Iteration  21: 9067048.832 ops/s
Iteration  22: 8669781.518 ops/s
Iteration  23: 8527325.679 ops/s
Iteration  24: 8942985.456 ops/s
Iteration  25: 8505554.164 ops/s
Iteration  26: 8793138.780 ops/s
Iteration  27: 8559343.294 ops/s
Iteration  28: 8678694.301 ops/s
Iteration  29: 9007004.839 ops/s
Iteration  30: 8642325.672 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_empty":
  8735725.441 ±(99.9%) 136834.102 ops/s [Average]
  (min, avg, max) = (8358601.263, 8735725.441, 9067048.832), stdev = 204806.858
  CI (99.9%): [8598891.338, 8872559.543] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
FlowableOnErrorCompleteTest._Benchmark.benchmark_empty  thrpt   30  8735725.441 ± 136834.102  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71664.415 ops/s
# Warmup Iteration   2: 385606.014 ops/s
# Warmup Iteration   3: 428400.634 ops/s
# Warmup Iteration   4: 443262.129 ops/s
# Warmup Iteration   5: 532163.723 ops/s
# Warmup Iteration   6: 514100.321 ops/s
# Warmup Iteration   7: 512423.174 ops/s
# Warmup Iteration   8: 515679.086 ops/s
# Warmup Iteration   9: 506067.308 ops/s
# Warmup Iteration  10: 528045.817 ops/s
# Warmup Iteration  11: 509310.892 ops/s
# Warmup Iteration  12: 505875.758 ops/s
# Warmup Iteration  13: 522989.733 ops/s
# Warmup Iteration  14: 512328.927 ops/s
# Warmup Iteration  15: 529140.998 ops/s
# Warmup Iteration  16: 495697.388 ops/s
# Warmup Iteration  17: 518360.122 ops/s
# Warmup Iteration  18: 539907.978 ops/s
# Warmup Iteration  19: 541543.947 ops/s
# Warmup Iteration  20: 522089.149 ops/s
# Warmup Iteration  21: 535488.273 ops/s
# Warmup Iteration  22: 513551.772 ops/s
# Warmup Iteration  23: 532988.169 ops/s
# Warmup Iteration  24: 517029.706 ops/s
# Warmup Iteration  25: 536877.691 ops/s
# Warmup Iteration  26: 543618.186 ops/s
# Warmup Iteration  27: 522474.567 ops/s
# Warmup Iteration  28: 551108.288 ops/s
# Warmup Iteration  29: 534199.463 ops/s
# Warmup Iteration  30: 388189.290 ops/s
Iteration   1: 527181.028 ops/s
Iteration   2: 544663.437 ops/s
Iteration   3: 542078.542 ops/s
Iteration   4: 530279.351 ops/s
Iteration   5: 528629.122 ops/s
Iteration   6: 529529.086 ops/s
Iteration   7: 529132.480 ops/s
Iteration   8: 550703.570 ops/s
Iteration   9: 520908.004 ops/s
Iteration  10: 513293.665 ops/s
Iteration  11: 541621.397 ops/s
Iteration  12: 508397.594 ops/s
Iteration  13: 539825.708 ops/s
Iteration  14: 537055.174 ops/s
Iteration  15: 546386.833 ops/s
Iteration  16: 526429.196 ops/s
Iteration  17: 547370.716 ops/s
Iteration  18: 527868.771 ops/s
Iteration  19: 552881.690 ops/s
Iteration  20: 547139.311 ops/s
Iteration  21: 532096.833 ops/s
Iteration  22: 527559.162 ops/s
Iteration  23: 545387.877 ops/s
Iteration  24: 521526.628 ops/s
Iteration  25: 571915.190 ops/s
Iteration  26: 541507.488 ops/s
Iteration  27: 523862.725 ops/s
Iteration  28: 555308.537 ops/s
Iteration  29: 554730.869 ops/s
Iteration  30: 518187.517 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_badRequest":
  536115.250 ±(99.9%) 9473.610 ops/s [Average]
  (min, avg, max) = (508397.594, 536115.250, 571915.190), stdev = 14179.655
  CI (99.9%): [526641.640, 545588.860] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_badRequest  thrpt   30  536115.250 ± 9473.610  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromOptionalTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromOptionalTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2463499.655 ops/s
# Warmup Iteration   2: 6894596.834 ops/s
# Warmup Iteration   3: 8374443.263 ops/s
# Warmup Iteration   4: 9509947.639 ops/s
# Warmup Iteration   5: 9145900.500 ops/s
# Warmup Iteration   6: 9272097.610 ops/s
# Warmup Iteration   7: 9456877.437 ops/s
# Warmup Iteration   8: 8992409.505 ops/s
# Warmup Iteration   9: 9509415.770 ops/s
# Warmup Iteration  10: 8926918.310 ops/s
# Warmup Iteration  11: 9049032.232 ops/s
# Warmup Iteration  12: 9370390.395 ops/s
# Warmup Iteration  13: 9734883.268 ops/s
# Warmup Iteration  14: 9526221.915 ops/s
# Warmup Iteration  15: 9169951.466 ops/s
# Warmup Iteration  16: 9452060.009 ops/s
# Warmup Iteration  17: 9019318.642 ops/s
# Warmup Iteration  18: 9240623.876 ops/s
# Warmup Iteration  19: 9397541.253 ops/s
# Warmup Iteration  20: 9197908.378 ops/s
# Warmup Iteration  21: 9330126.468 ops/s
# Warmup Iteration  22: 9434766.858 ops/s
# Warmup Iteration  23: 9130609.763 ops/s
# Warmup Iteration  24: 9297242.924 ops/s
# Warmup Iteration  25: 9217420.165 ops/s
# Warmup Iteration  26: 9007960.994 ops/s
# Warmup Iteration  27: 9453320.727 ops/s
# Warmup Iteration  28: 9658330.677 ops/s
# Warmup Iteration  29: 9000773.129 ops/s
# Warmup Iteration  30: 9101008.635 ops/s
Iteration   1: 8930448.231 ops/s
Iteration   2: 9206713.841 ops/s
Iteration   3: 9126251.166 ops/s
Iteration   4: 9291928.470 ops/s
Iteration   5: 9182127.451 ops/s
Iteration   6: 8887246.553 ops/s
Iteration   7: 9501528.851 ops/s
Iteration   8: 8909541.780 ops/s
Iteration   9: 9248708.310 ops/s
Iteration  10: 9269158.870 ops/s
Iteration  11: 9214752.469 ops/s
Iteration  12: 9526943.085 ops/s
Iteration  13: 9120034.758 ops/s
Iteration  14: 9263078.727 ops/s
Iteration  15: 9263863.163 ops/s
Iteration  16: 9188330.976 ops/s
Iteration  17: 9307254.685 ops/s
Iteration  18: 9577654.688 ops/s
Iteration  19: 8992043.454 ops/s
Iteration  20: 9357632.691 ops/s
Iteration  21: 9167096.836 ops/s
Iteration  22: 9221678.109 ops/s
Iteration  23: 9230668.836 ops/s
Iteration  24: 9160465.273 ops/s
Iteration  25: 9141776.138 ops/s
Iteration  26: 9185051.966 ops/s
Iteration  27: 9556168.379 ops/s
Iteration  28: 8886064.804 ops/s
Iteration  29: 9317487.396 ops/s
Iteration  30: 9310035.758 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromOptionalTest._Benchmark.benchmark_empty":
  9218057.857 ±(99.9%) 121577.535 ops/s [Average]
  (min, avg, max) = (8886064.804, 9218057.857, 9577654.688), stdev = 181971.544
  CI (99.9%): [9096480.323, 9339635.392] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
FlowableFromOptionalTest._Benchmark.benchmark_empty  thrpt   30  9218057.857 ± 121577.535  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2756922.425 ops/s
# Warmup Iteration   2: 5531718.674 ops/s
# Warmup Iteration   3: 7629938.117 ops/s
# Warmup Iteration   4: 8155600.932 ops/s
# Warmup Iteration   5: 7911909.772 ops/s
# Warmup Iteration   6: 7907221.517 ops/s
# Warmup Iteration   7: 8026697.020 ops/s
# Warmup Iteration   8: 7914148.849 ops/s
# Warmup Iteration   9: 8073332.553 ops/s
# Warmup Iteration  10: 7810494.875 ops/s
# Warmup Iteration  11: 7821276.597 ops/s
# Warmup Iteration  12: 8110419.703 ops/s
# Warmup Iteration  13: 7705363.893 ops/s
# Warmup Iteration  14: 8174713.859 ops/s
# Warmup Iteration  15: 7901129.232 ops/s
# Warmup Iteration  16: 7989149.160 ops/s
# Warmup Iteration  17: 8174921.083 ops/s
# Warmup Iteration  18: 7680825.506 ops/s
# Warmup Iteration  19: 8168580.413 ops/s
# Warmup Iteration  20: 7954869.419 ops/s
# Warmup Iteration  21: 7757431.549 ops/s
# Warmup Iteration  22: 8208677.916 ops/s
# Warmup Iteration  23: 7658976.869 ops/s
# Warmup Iteration  24: 6758422.427 ops/s
# Warmup Iteration  25: 7341626.204 ops/s
# Warmup Iteration  26: 8023915.146 ops/s
# Warmup Iteration  27: 7699666.934 ops/s
# Warmup Iteration  28: 8087553.262 ops/s
# Warmup Iteration  29: 7766435.533 ops/s
# Warmup Iteration  30: 7857582.861 ops/s
Iteration   1: 7932491.099 ops/s
Iteration   2: 7944716.354 ops/s
Iteration   3: 8086526.182 ops/s
Iteration   4: 7820380.617 ops/s
Iteration   5: 8114192.351 ops/s
Iteration   6: 7831487.220 ops/s
Iteration   7: 7916441.415 ops/s
Iteration   8: 7863484.123 ops/s
Iteration   9: 8044563.055 ops/s
Iteration  10: 7772469.826 ops/s
Iteration  11: 7872427.008 ops/s
Iteration  12: 8120172.861 ops/s
Iteration  13: 7774396.109 ops/s
Iteration  14: 8133684.203 ops/s
Iteration  15: 7980068.571 ops/s
Iteration  16: 7870512.913 ops/s
Iteration  17: 8012389.618 ops/s
Iteration  18: 8383765.877 ops/s
Iteration  19: 7800221.145 ops/s
Iteration  20: 8192399.468 ops/s
Iteration  21: 7825952.200 ops/s
Iteration  22: 8083549.403 ops/s
Iteration  23: 8059121.711 ops/s
Iteration  24: 7665793.464 ops/s
Iteration  25: 8190006.451 ops/s
Iteration  26: 8005058.887 ops/s
Iteration  27: 8045059.015 ops/s
Iteration  28: 7900263.339 ops/s
Iteration  29: 8152762.098 ops/s
Iteration  30: 7997073.879 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_empty":
  7979714.349 ±(99.9%) 105327.874 ops/s [Average]
  (min, avg, max) = (7665793.464, 7979714.349, 8383765.877), stdev = 157649.815
  CI (99.9%): [7874386.475, 8085042.223] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score        Error  Units
FlowableDetachTest._Benchmark.benchmark_empty  thrpt   30  7979714.349 ± 105327.874  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_rangeWithOverflow5$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_rangeWithOverflow5

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 971358.699 ops/s
# Warmup Iteration   2: 2964853.853 ops/s
# Warmup Iteration   3: 4021407.500 ops/s
# Warmup Iteration   4: 3959783.054 ops/s
# Warmup Iteration   5: 3941794.358 ops/s
# Warmup Iteration   6: 3848925.881 ops/s
# Warmup Iteration   7: 4096139.130 ops/s
# Warmup Iteration   8: 4021371.900 ops/s
# Warmup Iteration   9: 3963159.991 ops/s
# Warmup Iteration  10: 4029635.266 ops/s
# Warmup Iteration  11: 3820866.576 ops/s
# Warmup Iteration  12: 4074442.599 ops/s
# Warmup Iteration  13: 3863488.639 ops/s
# Warmup Iteration  14: 3966399.772 ops/s
# Warmup Iteration  15: 4082902.421 ops/s
# Warmup Iteration  16: 3831620.684 ops/s
# Warmup Iteration  17: 4081879.738 ops/s
# Warmup Iteration  18: 3875479.908 ops/s
# Warmup Iteration  19: 3970476.228 ops/s
# Warmup Iteration  20: 3910776.560 ops/s
# Warmup Iteration  21: 3856603.573 ops/s
# Warmup Iteration  22: 3874343.601 ops/s
# Warmup Iteration  23: 3894838.826 ops/s
# Warmup Iteration  24: 3877996.879 ops/s
# Warmup Iteration  25: 3950281.626 ops/s
# Warmup Iteration  26: 3757067.501 ops/s
# Warmup Iteration  27: 3914379.205 ops/s
# Warmup Iteration  28: 3885945.319 ops/s
# Warmup Iteration  29: 3877869.839 ops/s
# Warmup Iteration  30: 3952648.255 ops/s
Iteration   1: 3764077.519 ops/s
Iteration   2: 4029615.345 ops/s
Iteration   3: 3780804.108 ops/s
Iteration   4: 3840968.704 ops/s
Iteration   5: 3893665.377 ops/s
Iteration   6: 3974277.960 ops/s
Iteration   7: 3960044.332 ops/s
Iteration   8: 3798201.716 ops/s
Iteration   9: 3967347.943 ops/s
Iteration  10: 3984083.065 ops/s
Iteration  11: 3779338.099 ops/s
Iteration  12: 4023498.450 ops/s
Iteration  13: 3650548.688 ops/s
Iteration  14: 3918980.114 ops/s
Iteration  15: 3952283.763 ops/s
Iteration  16: 3749623.992 ops/s
Iteration  17: 3862422.058 ops/s
Iteration  18: 4020801.730 ops/s
Iteration  19: 3863977.300 ops/s
Iteration  20: 3978454.394 ops/s
Iteration  21: 3822876.489 ops/s
Iteration  22: 3944266.024 ops/s
Iteration  23: 3877810.884 ops/s
Iteration  24: 3902306.810 ops/s
Iteration  25: 3814619.126 ops/s
Iteration  26: 3993868.577 ops/s
Iteration  27: 4012324.643 ops/s
Iteration  28: 3830130.747 ops/s
Iteration  29: 3732397.628 ops/s
Iteration  30: 3953618.885 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_rangeWithOverflow5":
  3889241.149 ±(99.9%) 67361.753 ops/s [Average]
  (min, avg, max) = (3650548.688, 3889241.149, 4029615.345), stdev = 100823.908
  CI (99.9%): [3821879.396, 3956602.902] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_rangeWithOverflow5  thrpt   30  3889241.149 ± 67361.753  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1685312.286 ops/s
# Warmup Iteration   2: 4149226.045 ops/s
# Warmup Iteration   3: 6463476.010 ops/s
# Warmup Iteration   4: 6310986.698 ops/s
# Warmup Iteration   5: 5935167.776 ops/s
# Warmup Iteration   6: 5944984.117 ops/s
# Warmup Iteration   7: 5912930.344 ops/s
# Warmup Iteration   8: 6294415.951 ops/s
# Warmup Iteration   9: 5955764.678 ops/s
# Warmup Iteration  10: 5918261.460 ops/s
# Warmup Iteration  11: 6186973.854 ops/s
# Warmup Iteration  12: 6199979.693 ops/s
# Warmup Iteration  13: 6210215.335 ops/s
# Warmup Iteration  14: 5941534.704 ops/s
# Warmup Iteration  15: 6337121.852 ops/s
# Warmup Iteration  16: 6285001.979 ops/s
# Warmup Iteration  17: 6323330.746 ops/s
# Warmup Iteration  18: 5886130.987 ops/s
# Warmup Iteration  19: 4788645.471 ops/s
# Warmup Iteration  20: 6246859.537 ops/s
# Warmup Iteration  21: 6040562.346 ops/s
# Warmup Iteration  22: 6115015.808 ops/s
# Warmup Iteration  23: 6221148.479 ops/s
# Warmup Iteration  24: 6000731.617 ops/s
# Warmup Iteration  25: 6101328.249 ops/s
# Warmup Iteration  26: 6328324.650 ops/s
# Warmup Iteration  27: 6035345.987 ops/s
# Warmup Iteration  28: 6153014.846 ops/s
# Warmup Iteration  29: 6168860.670 ops/s
# Warmup Iteration  30: 5867414.725 ops/s
Iteration   1: 5971132.066 ops/s
Iteration   2: 6265087.243 ops/s
Iteration   3: 6002160.780 ops/s
Iteration   4: 6181634.623 ops/s
Iteration   5: 6380842.609 ops/s
Iteration   6: 5861034.758 ops/s
Iteration   7: 6162785.988 ops/s
Iteration   8: 6054401.982 ops/s
Iteration   9: 6130207.776 ops/s
Iteration  10: 6018242.667 ops/s
Iteration  11: 6272458.605 ops/s
Iteration  12: 6263343.487 ops/s
Iteration  13: 6102242.278 ops/s
Iteration  14: 6080212.045 ops/s
Iteration  15: 6002379.975 ops/s
Iteration  16: 6380798.392 ops/s
Iteration  17: 6056176.821 ops/s
Iteration  18: 6055736.333 ops/s
Iteration  19: 6027431.394 ops/s
Iteration  20: 6043273.009 ops/s
Iteration  21: 6246340.746 ops/s
Iteration  22: 6245331.944 ops/s
Iteration  23: 5958031.591 ops/s
Iteration  24: 6404311.333 ops/s
Iteration  25: 6055899.666 ops/s
Iteration  26: 6175908.740 ops/s
Iteration  27: 6453096.731 ops/s
Iteration  28: 6114425.607 ops/s
Iteration  29: 6156159.715 ops/s
Iteration  30: 6024647.276 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNextTest._Benchmark.benchmark_empty":
  6138191.206 ±(99.9%) 97706.413 ops/s [Average]
  (min, avg, max) = (5861034.758, 6138191.206, 6453096.731), stdev = 146242.370
  CI (99.9%): [6040484.793, 6235897.619] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
FlowableDoAfterNextTest._Benchmark.benchmark_empty  thrpt   30  6138191.206 ± 97706.413  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_rangeWithOverflow5$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_rangeWithOverflow5

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1654470.637 ops/s
# Warmup Iteration   2: 3600468.141 ops/s
# Warmup Iteration   3: 4511874.838 ops/s
# Warmup Iteration   4: 4260832.466 ops/s
# Warmup Iteration   5: 4563267.522 ops/s
# Warmup Iteration   6: 4439356.306 ops/s
# Warmup Iteration   7: 4325169.202 ops/s
# Warmup Iteration   8: 4362871.720 ops/s
# Warmup Iteration   9: 4517586.715 ops/s
# Warmup Iteration  10: 4421676.706 ops/s
# Warmup Iteration  11: 4368322.080 ops/s
# Warmup Iteration  12: 4599275.884 ops/s
# Warmup Iteration  13: 4345088.386 ops/s
# Warmup Iteration  14: 4308983.912 ops/s
# Warmup Iteration  15: 4674532.090 ops/s
# Warmup Iteration  16: 4301199.148 ops/s
# Warmup Iteration  17: 4462870.336 ops/s
# Warmup Iteration  18: 4530815.139 ops/s
# Warmup Iteration  19: 4334319.218 ops/s
# Warmup Iteration  20: 4536005.378 ops/s
# Warmup Iteration  21: 4311306.073 ops/s
# Warmup Iteration  22: 4466879.011 ops/s
# Warmup Iteration  23: 4378065.160 ops/s
# Warmup Iteration  24: 4352343.846 ops/s
# Warmup Iteration  25: 4604575.213 ops/s
# Warmup Iteration  26: 4280200.819 ops/s
# Warmup Iteration  27: 4581019.819 ops/s
# Warmup Iteration  28: 4353243.388 ops/s
# Warmup Iteration  29: 4476115.783 ops/s
# Warmup Iteration  30: 4410000.353 ops/s
Iteration   1: 4248381.643 ops/s
Iteration   2: 4651242.174 ops/s
Iteration   3: 4397516.636 ops/s
Iteration   4: 4374241.908 ops/s
Iteration   5: 4647636.751 ops/s
Iteration   6: 4483263.932 ops/s
Iteration   7: 4392224.773 ops/s
Iteration   8: 4528238.228 ops/s
Iteration   9: 4344347.272 ops/s
Iteration  10: 4421787.467 ops/s
Iteration  11: 4509825.679 ops/s
Iteration  12: 4331422.332 ops/s
Iteration  13: 4548217.756 ops/s
Iteration  14: 4385355.192 ops/s
Iteration  15: 4534599.114 ops/s
Iteration  16: 4383859.931 ops/s
Iteration  17: 4350870.228 ops/s
Iteration  18: 4590387.044 ops/s
Iteration  19: 4286899.010 ops/s
Iteration  20: 4515925.779 ops/s
Iteration  21: 4373451.578 ops/s
Iteration  22: 4425927.477 ops/s
Iteration  23: 4632864.355 ops/s
Iteration  24: 4321390.569 ops/s
Iteration  25: 4518630.359 ops/s
Iteration  26: 4488576.416 ops/s
Iteration  27: 4286600.420 ops/s
Iteration  28: 4506029.923 ops/s
Iteration  29: 4364670.900 ops/s
Iteration  30: 4431887.113 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_rangeWithOverflow5":
  4442542.399 ±(99.9%) 73722.811 ops/s [Average]
  (min, avg, max) = (4248381.643, 4442542.399, 4651242.174), stdev = 110344.841
  CI (99.9%): [4368819.588, 4516265.210] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_rangeWithOverflow5  thrpt   30  4442542.399 ± 73722.811  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_unsubscribeJustBeforeCompletionNotificationShouldPreventThatNotificationArriving$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_unsubscribeJustBeforeCompletionNotificationShouldPreventThatNotificationArriving

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1826233.929 ops/s
# Warmup Iteration   2: 4165089.055 ops/s
# Warmup Iteration   3: 5064272.524 ops/s
# Warmup Iteration   4: 5271090.115 ops/s
# Warmup Iteration   5: 5618554.280 ops/s
# Warmup Iteration   6: 5448080.011 ops/s
# Warmup Iteration   7: 5433061.306 ops/s
# Warmup Iteration   8: 5454108.586 ops/s
# Warmup Iteration   9: 5355295.435 ops/s
# Warmup Iteration  10: 5442454.232 ops/s
# Warmup Iteration  11: 5343540.509 ops/s
# Warmup Iteration  12: 5315787.793 ops/s
# Warmup Iteration  13: 4591887.624 ops/s
# Warmup Iteration  14: 5330600.660 ops/s
# Warmup Iteration  15: 5256462.995 ops/s
# Warmup Iteration  16: 5425147.807 ops/s
# Warmup Iteration  17: 5550570.914 ops/s
# Warmup Iteration  18: 5303593.211 ops/s
# Warmup Iteration  19: 5502454.696 ops/s
# Warmup Iteration  20: 5515547.164 ops/s
# Warmup Iteration  21: 5299050.925 ops/s
# Warmup Iteration  22: 5557065.353 ops/s
# Warmup Iteration  23: 5400253.349 ops/s
# Warmup Iteration  24: 5207319.262 ops/s
# Warmup Iteration  25: 5411859.750 ops/s
# Warmup Iteration  26: 5348648.556 ops/s
# Warmup Iteration  27: 5320447.328 ops/s
# Warmup Iteration  28: 5654548.080 ops/s
# Warmup Iteration  29: 5225748.549 ops/s
# Warmup Iteration  30: 5702222.566 ops/s
Iteration   1: 5371775.883 ops/s
Iteration   2: 5587971.887 ops/s
Iteration   3: 5235856.048 ops/s
Iteration   4: 5403186.916 ops/s
Iteration   5: 5541900.699 ops/s
Iteration   6: 5315122.347 ops/s
Iteration   7: 5644655.920 ops/s
Iteration   8: 5287451.202 ops/s
Iteration   9: 5566517.058 ops/s
Iteration  10: 5435463.520 ops/s
Iteration  11: 5402369.621 ops/s
Iteration  12: 5522027.162 ops/s
Iteration  13: 5221310.729 ops/s
Iteration  14: 5523761.722 ops/s
Iteration  15: 5513664.856 ops/s
Iteration  16: 5212359.950 ops/s
Iteration  17: 5455193.684 ops/s
Iteration  18: 5574663.266 ops/s
Iteration  19: 5349749.098 ops/s
Iteration  20: 5527386.443 ops/s
Iteration  21: 5280522.214 ops/s
Iteration  22: 5455990.543 ops/s
Iteration  23: 5600156.282 ops/s
Iteration  24: 5380677.613 ops/s
Iteration  25: 5364902.258 ops/s
Iteration  26: 5603933.303 ops/s
Iteration  27: 5358823.619 ops/s
Iteration  28: 5536741.908 ops/s
Iteration  29: 5300203.547 ops/s
Iteration  30: 5278836.490 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_unsubscribeJustBeforeCompletionNotificationShouldPreventThatNotificationArriving":
  5428439.193 ±(99.9%) 85591.400 ops/s [Average]
  (min, avg, max) = (5212359.950, 5428439.193, 5644655.920), stdev = 128109.188
  CI (99.9%): [5342847.793, 5514030.593] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                       Mode  Cnt        Score       Error  Units
FlowableMaterializeTest._Benchmark.benchmark_unsubscribeJustBeforeCompletionNotificationShouldPreventThatNotificationArriving  thrpt   30  5428439.193 ± 85591.400  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_empty2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_empty2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 285718.777 ops/s
# Warmup Iteration   2: 600666.458 ops/s
# Warmup Iteration   3: 675917.111 ops/s
# Warmup Iteration   4: 584916.118 ops/s
# Warmup Iteration   5: 713376.253 ops/s
# Warmup Iteration   6: 562163.603 ops/s
# Warmup Iteration   7: 721103.480 ops/s
# Warmup Iteration   8: 728391.844 ops/s
# Warmup Iteration   9: 699655.702 ops/s
# Warmup Iteration  10: 674220.572 ops/s
# Warmup Iteration  11: 710355.682 ops/s
# Warmup Iteration  12: 677741.943 ops/s
# Warmup Iteration  13: 717167.807 ops/s
# Warmup Iteration  14: 666646.194 ops/s
# Warmup Iteration  15: 694734.636 ops/s
# Warmup Iteration  16: 697414.704 ops/s
# Warmup Iteration  17: 739341.595 ops/s
# Warmup Iteration  18: 727290.370 ops/s
# Warmup Iteration  19: 726006.567 ops/s
# Warmup Iteration  20: 757867.932 ops/s
# Warmup Iteration  21: 717640.179 ops/s
# Warmup Iteration  22: 745441.358 ops/s
# Warmup Iteration  23: 731068.525 ops/s
# Warmup Iteration  24: 707420.327 ops/s
# Warmup Iteration  25: 740314.708 ops/s
# Warmup Iteration  26: 724322.746 ops/s
# Warmup Iteration  27: 759544.525 ops/s
# Warmup Iteration  28: 715484.047 ops/s
# Warmup Iteration  29: 765148.496 ops/s
# Warmup Iteration  30: 718992.585 ops/s
Iteration   1: 744129.378 ops/s
Iteration   2: 721328.008 ops/s
Iteration   3: 731194.514 ops/s
Iteration   4: 747542.278 ops/s
Iteration   5: 697384.407 ops/s
Iteration   6: 764128.610 ops/s
Iteration   7: 723269.993 ops/s
Iteration   8: 745982.075 ops/s
Iteration   9: 769706.770 ops/s
Iteration  10: 744500.910 ops/s
Iteration  11: 725047.427 ops/s
Iteration  12: 755684.073 ops/s
Iteration  13: 713425.924 ops/s
Iteration  14: 731261.555 ops/s
Iteration  15: 722510.226 ops/s
Iteration  16: 733590.669 ops/s
Iteration  17: 771716.679 ops/s
Iteration  18: 737099.760 ops/s
Iteration  19: 732769.356 ops/s
Iteration  20: 767727.324 ops/s
Iteration  21: 728862.785 ops/s
Iteration  22: 750776.425 ops/s
Iteration  23: 746996.912 ops/s
Iteration  24: 712221.533 ops/s
Iteration  25: 753143.314 ops/s
Iteration  26: 718531.841 ops/s
Iteration  27: 740183.734 ops/s
Iteration  28: 725397.559 ops/s
Iteration  29: 717367.922 ops/s
Iteration  30: 735160.477 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_empty2":
  736954.748 ±(99.9%) 12229.381 ops/s [Average]
  (min, avg, max) = (697384.407, 736954.748, 771716.679), stdev = 18304.363
  CI (99.9%): [724725.367, 749184.129] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
BlockingFlowableLatestTest._Benchmark.benchmark_empty2  thrpt   30  736954.748 ± 12229.381  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNextTest._Benchmark.benchmark_interrupt$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNextTest._Benchmark.benchmark_interrupt

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 86881.831 ops/s
# Warmup Iteration   2: 264200.812 ops/s
# Warmup Iteration   3: 286397.649 ops/s
# Warmup Iteration   4: 278250.013 ops/s
# Warmup Iteration   5: 293586.621 ops/s
# Warmup Iteration   6: 294510.679 ops/s
# Warmup Iteration   7: 275187.431 ops/s
# Warmup Iteration   8: 224043.244 ops/s
# Warmup Iteration   9: 267335.581 ops/s
# Warmup Iteration  10: 292610.753 ops/s
# Warmup Iteration  11: 290117.677 ops/s
# Warmup Iteration  12: 281182.970 ops/s
# Warmup Iteration  13: 282074.668 ops/s
# Warmup Iteration  14: 284861.380 ops/s
# Warmup Iteration  15: 294884.586 ops/s
# Warmup Iteration  16: 290412.910 ops/s
# Warmup Iteration  17: 289201.434 ops/s
# Warmup Iteration  18: 305818.651 ops/s
# Warmup Iteration  19: 295167.748 ops/s
# Warmup Iteration  20: 301917.318 ops/s
# Warmup Iteration  21: 304222.969 ops/s
# Warmup Iteration  22: 285649.146 ops/s
# Warmup Iteration  23: 301812.651 ops/s
# Warmup Iteration  24: 292984.334 ops/s
# Warmup Iteration  25: 287591.615 ops/s
# Warmup Iteration  26: 310025.585 ops/s
# Warmup Iteration  27: 296310.012 ops/s
# Warmup Iteration  28: 289039.026 ops/s
# Warmup Iteration  29: 303058.314 ops/s
# Warmup Iteration  30: 287990.500 ops/s
Iteration   1: 307498.281 ops/s
Iteration   2: 300167.377 ops/s
Iteration   3: 301525.289 ops/s
Iteration   4: 302470.005 ops/s
Iteration   5: 292267.500 ops/s
Iteration   6: 310860.187 ops/s
Iteration   7: 306745.806 ops/s
Iteration   8: 288123.733 ops/s
Iteration   9: 305073.992 ops/s
Iteration  10: 284299.801 ops/s
Iteration  11: 304058.654 ops/s
Iteration  12: 296084.686 ops/s
Iteration  13: 306046.776 ops/s
Iteration  14: 306970.129 ops/s
Iteration  15: 301445.809 ops/s
Iteration  16: 289875.241 ops/s
Iteration  17: 303638.385 ops/s
Iteration  18: 297527.509 ops/s
Iteration  19: 294611.810 ops/s
Iteration  20: 286066.435 ops/s
Iteration  21: 291722.748 ops/s
Iteration  22: 299579.712 ops/s
Iteration  23: 317265.403 ops/s
Iteration  24: 289208.357 ops/s
Iteration  25: 301239.632 ops/s
Iteration  26: 297467.228 ops/s
Iteration  27: 302495.899 ops/s
Iteration  28: 302320.129 ops/s
Iteration  29: 297720.133 ops/s
Iteration  30: 311965.770 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNextTest._Benchmark.benchmark_interrupt":
  299878.080 ±(99.9%) 5287.029 ops/s [Average]
  (min, avg, max) = (284299.801, 299878.080, 317265.403), stdev = 7913.377
  CI (99.9%): [294591.051, 305165.110] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
BlockingFlowableNextTest._Benchmark.benchmark_interrupt  thrpt   30  299878.080 ± 5287.029  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleTooManyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleTooManyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 104832.474 ops/s
# Warmup Iteration   2: 268883.917 ops/s
# Warmup Iteration   3: 304379.787 ops/s
# Warmup Iteration   4: 296697.574 ops/s
# Warmup Iteration   5: 298494.504 ops/s
# Warmup Iteration   6: 308186.411 ops/s
# Warmup Iteration   7: 297614.800 ops/s
# Warmup Iteration   8: 292632.201 ops/s
# Warmup Iteration   9: 304058.375 ops/s
# Warmup Iteration  10: 291236.782 ops/s
# Warmup Iteration  11: 298691.736 ops/s
# Warmup Iteration  12: 310376.822 ops/s
# Warmup Iteration  13: 297483.367 ops/s
# Warmup Iteration  14: 308756.932 ops/s
# Warmup Iteration  15: 310695.045 ops/s
# Warmup Iteration  16: 303288.246 ops/s
# Warmup Iteration  17: 327572.654 ops/s
# Warmup Iteration  18: 316987.006 ops/s
# Warmup Iteration  19: 323459.710 ops/s
# Warmup Iteration  20: 315639.883 ops/s
# Warmup Iteration  21: 311068.605 ops/s
# Warmup Iteration  22: 322368.426 ops/s
# Warmup Iteration  23: 311393.647 ops/s
# Warmup Iteration  24: 321121.165 ops/s
# Warmup Iteration  25: 312264.327 ops/s
# Warmup Iteration  26: 309392.251 ops/s
# Warmup Iteration  27: 319528.660 ops/s
# Warmup Iteration  28: 318726.875 ops/s
# Warmup Iteration  29: 328614.534 ops/s
# Warmup Iteration  30: 309328.853 ops/s
Iteration   1: 320125.334 ops/s
Iteration   2: 324102.722 ops/s
Iteration   3: 314277.038 ops/s
Iteration   4: 331455.208 ops/s
Iteration   5: 311344.208 ops/s
Iteration   6: 317516.756 ops/s
Iteration   7: 324543.035 ops/s
Iteration   8: 309367.365 ops/s
Iteration   9: 321646.100 ops/s
Iteration  10: 310849.315 ops/s
Iteration  11: 324343.853 ops/s
Iteration  12: 326465.382 ops/s
Iteration  13: 308402.484 ops/s
Iteration  14: 330364.693 ops/s
Iteration  15: 316657.988 ops/s
Iteration  16: 307299.790 ops/s
Iteration  17: 329384.727 ops/s
Iteration  18: 311637.796 ops/s
Iteration  19: 322772.427 ops/s
Iteration  20: 320997.880 ops/s
Iteration  21: 324164.911 ops/s
Iteration  22: 317116.567 ops/s
Iteration  23: 316843.778 ops/s
Iteration  24: 332487.204 ops/s
Iteration  25: 310870.019 ops/s
Iteration  26: 329625.071 ops/s
Iteration  27: 312374.763 ops/s
Iteration  28: 320817.939 ops/s
Iteration  29: 321222.740 ops/s
Iteration  30: 327196.718 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleTooManyCancels":
  319875.794 ±(99.9%) 4967.242 ops/s [Average]
  (min, avg, max) = (307299.790, 319875.794, 332487.204), stdev = 7434.735
  CI (99.9%): [314908.551, 324843.036] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleTooManyCancels  thrpt   30  319875.794 ± 4967.242  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleTooManyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleTooManyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78776.507 ops/s
# Warmup Iteration   2: 210557.937 ops/s
# Warmup Iteration   3: 280719.649 ops/s
# Warmup Iteration   4: 293691.100 ops/s
# Warmup Iteration   5: 297577.954 ops/s
# Warmup Iteration   6: 297597.091 ops/s
# Warmup Iteration   7: 283114.003 ops/s
# Warmup Iteration   8: 293322.246 ops/s
# Warmup Iteration   9: 298323.439 ops/s
# Warmup Iteration  10: 310107.613 ops/s
# Warmup Iteration  11: 294862.128 ops/s
# Warmup Iteration  12: 300226.931 ops/s
# Warmup Iteration  13: 309953.462 ops/s
# Warmup Iteration  14: 297543.052 ops/s
# Warmup Iteration  15: 313723.205 ops/s
# Warmup Iteration  16: 305313.893 ops/s
# Warmup Iteration  17: 314356.932 ops/s
# Warmup Iteration  18: 324322.499 ops/s
# Warmup Iteration  19: 324535.303 ops/s
# Warmup Iteration  20: 320067.948 ops/s
# Warmup Iteration  21: 320128.346 ops/s
# Warmup Iteration  22: 311986.364 ops/s
# Warmup Iteration  23: 319883.382 ops/s
# Warmup Iteration  24: 318084.760 ops/s
# Warmup Iteration  25: 316316.461 ops/s
# Warmup Iteration  26: 326486.079 ops/s
# Warmup Iteration  27: 309206.748 ops/s
# Warmup Iteration  28: 316647.481 ops/s
# Warmup Iteration  29: 328578.961 ops/s
# Warmup Iteration  30: 311948.709 ops/s
Iteration   1: 330909.965 ops/s
Iteration   2: 310973.389 ops/s
Iteration   3: 322110.955 ops/s
Iteration   4: 313081.559 ops/s
Iteration   5: 312197.315 ops/s
Iteration   6: 310761.305 ops/s
Iteration   7: 314181.518 ops/s
Iteration   8: 324757.720 ops/s
Iteration   9: 313228.894 ops/s
Iteration  10: 330661.718 ops/s
Iteration  11: 301308.037 ops/s
Iteration  12: 327588.364 ops/s
Iteration  13: 307499.568 ops/s
Iteration  14: 317044.306 ops/s
Iteration  15: 316612.802 ops/s
Iteration  16: 318282.966 ops/s
Iteration  17: 327254.909 ops/s
Iteration  18: 307788.636 ops/s
Iteration  19: 326860.751 ops/s
Iteration  20: 316517.429 ops/s
Iteration  21: 323142.005 ops/s
Iteration  22: 310403.223 ops/s
Iteration  23: 332228.391 ops/s
Iteration  24: 318271.802 ops/s
Iteration  25: 311900.945 ops/s
Iteration  26: 323669.561 ops/s
Iteration  27: 310442.240 ops/s
Iteration  28: 328192.322 ops/s
Iteration  29: 313756.286 ops/s
Iteration  30: 318117.357 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleTooManyCancels":
  317991.541 ±(99.9%) 5373.540 ops/s [Average]
  (min, avg, max) = (301308.037, 317991.541, 332228.391), stdev = 8042.862
  CI (99.9%): [312618.001, 323365.081] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleTooManyCancels  thrpt   30  317991.541 ± 5373.540  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_nonNullConnection$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_nonNullConnection

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4434817.303 ops/s
# Warmup Iteration   2: 8426728.625 ops/s
# Warmup Iteration   3: 11618754.042 ops/s
# Warmup Iteration   4: 11191836.334 ops/s
# Warmup Iteration   5: 12284992.325 ops/s
# Warmup Iteration   6: 11757763.980 ops/s
# Warmup Iteration   7: 11421702.310 ops/s
# Warmup Iteration   8: 11693922.997 ops/s
# Warmup Iteration   9: 11436966.063 ops/s
# Warmup Iteration  10: 11541568.711 ops/s
# Warmup Iteration  11: 11219703.034 ops/s
# Warmup Iteration  12: 11291318.211 ops/s
# Warmup Iteration  13: 11907236.038 ops/s
# Warmup Iteration  14: 11857760.316 ops/s
# Warmup Iteration  15: 11186447.859 ops/s
# Warmup Iteration  16: 11672626.523 ops/s
# Warmup Iteration  17: 11930825.532 ops/s
# Warmup Iteration  18: 11892013.054 ops/s
# Warmup Iteration  19: 11264805.139 ops/s
# Warmup Iteration  20: 11805338.918 ops/s
# Warmup Iteration  21: 11388405.365 ops/s
# Warmup Iteration  22: 11638840.171 ops/s
# Warmup Iteration  23: 11836976.783 ops/s
# Warmup Iteration  24: 11410785.931 ops/s
# Warmup Iteration  25: 11845311.202 ops/s
# Warmup Iteration  26: 11148242.550 ops/s
# Warmup Iteration  27: 11680995.552 ops/s
# Warmup Iteration  28: 11326746.600 ops/s
# Warmup Iteration  29: 11999522.642 ops/s
# Warmup Iteration  30: 11904064.869 ops/s
Iteration   1: 11271838.315 ops/s
Iteration   2: 11227648.421 ops/s
Iteration   3: 11418017.678 ops/s
Iteration   4: 11444881.806 ops/s
Iteration   5: 11696018.209 ops/s
Iteration   6: 11441027.703 ops/s
Iteration   7: 11958573.456 ops/s
Iteration   8: 11432465.196 ops/s
Iteration   9: 11829526.679 ops/s
Iteration  10: 11491658.042 ops/s
Iteration  11: 11610844.375 ops/s
Iteration  12: 11410279.906 ops/s
Iteration  13: 11729716.953 ops/s
Iteration  14: 11829488.673 ops/s
Iteration  15: 11392709.550 ops/s
Iteration  16: 11473668.564 ops/s
Iteration  17: 12083295.403 ops/s
Iteration  18: 11244018.814 ops/s
Iteration  19: 11947978.971 ops/s
Iteration  20: 11229654.793 ops/s
Iteration  21: 11501497.302 ops/s
Iteration  22: 12028526.176 ops/s
Iteration  23: 11568730.479 ops/s
Iteration  24: 10783195.980 ops/s
Iteration  25: 11633418.030 ops/s
Iteration  26: 11046274.204 ops/s
Iteration  27: 11935533.192 ops/s
Iteration  28: 11633684.515 ops/s
Iteration  29: 8505937.198 ops/s
Iteration  30: 11535396.208 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_nonNullConnection":
  11444516.826 ±(99.9%) 420309.533 ops/s [Average]
  (min, avg, max) = (8505937.198, 11444516.826, 12083295.403), stdev = 629099.570
  CI (99.9%): [11024207.293, 11864826.360] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
FlowablePublishTest._Benchmark.benchmark_nonNullConnection  thrpt   30  11444516.826 ± 420309.533  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_resetWhileActiveIsNoOp$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_resetWhileActiveIsNoOp

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4144874.933 ops/s
# Warmup Iteration   2: 8763842.929 ops/s
# Warmup Iteration   3: 12044955.952 ops/s
# Warmup Iteration   4: 12142145.171 ops/s
# Warmup Iteration   5: 11940029.383 ops/s
# Warmup Iteration   6: 11991607.121 ops/s
# Warmup Iteration   7: 11463340.334 ops/s
# Warmup Iteration   8: 12369484.425 ops/s
# Warmup Iteration   9: 11724639.063 ops/s
# Warmup Iteration  10: 11524885.024 ops/s
# Warmup Iteration  11: 11887929.453 ops/s
# Warmup Iteration  12: 12037579.168 ops/s
# Warmup Iteration  13: 11885632.371 ops/s
# Warmup Iteration  14: 12161402.034 ops/s
# Warmup Iteration  15: 11906902.990 ops/s
# Warmup Iteration  16: 12155874.812 ops/s
# Warmup Iteration  17: 11709451.332 ops/s
# Warmup Iteration  18: 12227361.596 ops/s
# Warmup Iteration  19: 12051625.282 ops/s
# Warmup Iteration  20: 12016883.811 ops/s
# Warmup Iteration  21: 12159617.344 ops/s
# Warmup Iteration  22: 12167943.766 ops/s
# Warmup Iteration  23: 11819803.729 ops/s
# Warmup Iteration  24: 12025788.674 ops/s
# Warmup Iteration  25: 12034183.593 ops/s
# Warmup Iteration  26: 12137796.768 ops/s
# Warmup Iteration  27: 11916714.673 ops/s
# Warmup Iteration  28: 12232388.417 ops/s
# Warmup Iteration  29: 11907806.882 ops/s
# Warmup Iteration  30: 12053567.096 ops/s
Iteration   1: 11746906.000 ops/s
Iteration   2: 11728527.923 ops/s
Iteration   3: 12172127.175 ops/s
Iteration   4: 11857844.470 ops/s
Iteration   5: 11850252.221 ops/s
Iteration   6: 12186711.917 ops/s
Iteration   7: 11653830.437 ops/s
Iteration   8: 12191194.425 ops/s
Iteration   9: 11453824.124 ops/s
Iteration  10: 12199798.908 ops/s
Iteration  11: 11743031.235 ops/s
Iteration  12: 12003708.287 ops/s
Iteration  13: 12425996.990 ops/s
Iteration  14: 11837333.771 ops/s
Iteration  15: 12073103.559 ops/s
Iteration  16: 12098857.896 ops/s
Iteration  17: 11898132.056 ops/s
Iteration  18: 12277660.868 ops/s
Iteration  19: 11709046.605 ops/s
Iteration  20: 11941057.745 ops/s
Iteration  21: 12226139.507 ops/s
Iteration  22: 11947443.197 ops/s
Iteration  23: 12380766.118 ops/s
Iteration  24: 11891871.221 ops/s
Iteration  25: 12319938.169 ops/s
Iteration  26: 11796093.034 ops/s
Iteration  27: 11970096.906 ops/s
Iteration  28: 12426749.117 ops/s
Iteration  29: 11918165.588 ops/s
Iteration  30: 12410874.528 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_resetWhileActiveIsNoOp":
  12011236.133 ±(99.9%) 171616.223 ops/s [Average]
  (min, avg, max) = (11453824.124, 12011236.133, 12426749.117), stdev = 256867.103
  CI (99.9%): [11839619.910, 12182852.357] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
FlowablePublishTest._Benchmark.benchmark_resetWhileActiveIsNoOp  thrpt   30  12011236.133 ± 171616.223  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1217461.705 ops/s
# Warmup Iteration   2: 3152940.701 ops/s
# Warmup Iteration   3: 4225629.733 ops/s
# Warmup Iteration   4: 4777873.797 ops/s
# Warmup Iteration   5: 4658884.715 ops/s
# Warmup Iteration   6: 4752521.116 ops/s
# Warmup Iteration   7: 4664092.348 ops/s
# Warmup Iteration   8: 4589541.093 ops/s
# Warmup Iteration   9: 4844977.220 ops/s
# Warmup Iteration  10: 4565456.179 ops/s
# Warmup Iteration  11: 4682645.023 ops/s
# Warmup Iteration  12: 4882811.789 ops/s
# Warmup Iteration  13: 4591482.580 ops/s
# Warmup Iteration  14: 4844191.306 ops/s
# Warmup Iteration  15: 4603944.010 ops/s
# Warmup Iteration  16: 4724484.781 ops/s
# Warmup Iteration  17: 4606377.284 ops/s
# Warmup Iteration  18: 4746344.202 ops/s
# Warmup Iteration  19: 4808337.839 ops/s
# Warmup Iteration  20: 4670532.545 ops/s
# Warmup Iteration  21: 4846161.583 ops/s
# Warmup Iteration  22: 4607608.821 ops/s
# Warmup Iteration  23: 4646165.665 ops/s
# Warmup Iteration  24: 4757041.275 ops/s
# Warmup Iteration  25: 4624033.828 ops/s
# Warmup Iteration  26: 4563675.555 ops/s
# Warmup Iteration  27: 4873606.425 ops/s
# Warmup Iteration  28: 4919388.548 ops/s
# Warmup Iteration  29: 4635568.048 ops/s
# Warmup Iteration  30: 4703506.143 ops/s
Iteration   1: 4765390.322 ops/s
Iteration   2: 4714415.661 ops/s
Iteration   3: 4713000.185 ops/s
Iteration   4: 4581846.642 ops/s
Iteration   5: 4782520.941 ops/s
Iteration   6: 4691980.846 ops/s
Iteration   7: 4722897.379 ops/s
Iteration   8: 4840512.519 ops/s
Iteration   9: 4546660.336 ops/s
Iteration  10: 4737274.084 ops/s
Iteration  11: 4619093.737 ops/s
Iteration  12: 4695123.602 ops/s
Iteration  13: 4813797.786 ops/s
Iteration  14: 4656621.722 ops/s
Iteration  15: 4690337.341 ops/s
Iteration  16: 4582337.099 ops/s
Iteration  17: 4774556.654 ops/s
Iteration  18: 4555090.784 ops/s
Iteration  19: 4759677.280 ops/s
Iteration  20: 4651416.680 ops/s
Iteration  21: 4728751.129 ops/s
Iteration  22: 4944376.017 ops/s
Iteration  23: 3443633.052 ops/s
Iteration  24: 4834599.363 ops/s
Iteration  25: 4838019.363 ops/s
Iteration  26: 4580593.910 ops/s
Iteration  27: 4804789.464 ops/s
Iteration  28: 4703562.547 ops/s
Iteration  29: 4588121.845 ops/s
Iteration  30: 4907705.609 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_empty":
  4675623.463 ±(99.9%) 170007.214 ops/s [Average]
  (min, avg, max) = (3443633.052, 4675623.463, 4944376.017), stdev = 254458.814
  CI (99.9%): [4505616.249, 4845630.678] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_empty  thrpt   30  4675623.463 ± 170007.214  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_badRequestOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_badRequestOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53312.558 ops/s
# Warmup Iteration   2: 219464.627 ops/s
# Warmup Iteration   3: 356321.832 ops/s
# Warmup Iteration   4: 365911.465 ops/s
# Warmup Iteration   5: 366715.022 ops/s
# Warmup Iteration   6: 406410.519 ops/s
# Warmup Iteration   7: 409499.566 ops/s
# Warmup Iteration   8: 405713.789 ops/s
# Warmup Iteration   9: 412238.616 ops/s
# Warmup Iteration  10: 415159.561 ops/s
# Warmup Iteration  11: 405043.893 ops/s
# Warmup Iteration  12: 425796.766 ops/s
# Warmup Iteration  13: 426141.180 ops/s
# Warmup Iteration  14: 399129.966 ops/s
# Warmup Iteration  15: 414196.443 ops/s
# Warmup Iteration  16: 405883.764 ops/s
# Warmup Iteration  17: 415982.683 ops/s
# Warmup Iteration  18: 420527.286 ops/s
# Warmup Iteration  19: 423761.091 ops/s
# Warmup Iteration  20: 428119.461 ops/s
# Warmup Iteration  21: 405944.020 ops/s
# Warmup Iteration  22: 424573.416 ops/s
# Warmup Iteration  23: 429684.153 ops/s
# Warmup Iteration  24: 416118.914 ops/s
# Warmup Iteration  25: 430671.285 ops/s
# Warmup Iteration  26: 425127.599 ops/s
# Warmup Iteration  27: 421121.481 ops/s
# Warmup Iteration  28: 441973.611 ops/s
# Warmup Iteration  29: 411568.414 ops/s
# Warmup Iteration  30: 422239.368 ops/s
Iteration   1: 415426.010 ops/s
Iteration   2: 430365.669 ops/s
Iteration   3: 441364.305 ops/s
Iteration   4: 415362.438 ops/s
Iteration   5: 433583.725 ops/s
Iteration   6: 423091.473 ops/s
Iteration   7: 411806.005 ops/s
Iteration   8: 423187.900 ops/s
Iteration   9: 423828.851 ops/s
Iteration  10: 438241.230 ops/s
Iteration  11: 408091.660 ops/s
Iteration  12: 434254.353 ops/s
Iteration  13: 431263.152 ops/s
Iteration  14: 416195.696 ops/s
Iteration  15: 415990.163 ops/s
Iteration  16: 441330.085 ops/s
Iteration  17: 404208.418 ops/s
Iteration  18: 432189.325 ops/s
Iteration  19: 413840.895 ops/s
Iteration  20: 446639.557 ops/s
Iteration  21: 414675.129 ops/s
Iteration  22: 424695.784 ops/s
Iteration  23: 441777.233 ops/s
Iteration  24: 423624.555 ops/s
Iteration  25: 423470.086 ops/s
Iteration  26: 438766.586 ops/s
Iteration  27: 415517.215 ops/s
Iteration  28: 440949.081 ops/s
Iteration  29: 436664.924 ops/s
Iteration  30: 420495.675 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_badRequestOverlap":
  426029.906 ±(99.9%) 7724.178 ops/s [Average]
  (min, avg, max) = (404208.418, 426029.906, 446639.557), stdev = 11561.187
  CI (99.9%): [418305.728, 433754.084] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_badRequestOverlap  thrpt   30  426029.906 ± 7724.178  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanEmptyBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanEmptyBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 273051.067 ops/s
# Warmup Iteration   2: 1116291.558 ops/s
# Warmup Iteration   3: 2029017.924 ops/s
# Warmup Iteration   4: 2449041.582 ops/s
# Warmup Iteration   5: 2334551.760 ops/s
# Warmup Iteration   6: 2289241.403 ops/s
# Warmup Iteration   7: 2404791.391 ops/s
# Warmup Iteration   8: 2320196.458 ops/s
# Warmup Iteration   9: 2352388.962 ops/s
# Warmup Iteration  10: 2395682.963 ops/s
# Warmup Iteration  11: 2335976.688 ops/s
# Warmup Iteration  12: 2386116.321 ops/s
# Warmup Iteration  13: 2442108.091 ops/s
# Warmup Iteration  14: 2299994.621 ops/s
# Warmup Iteration  15: 2514390.388 ops/s
# Warmup Iteration  16: 2393091.093 ops/s
# Warmup Iteration  17: 2372450.882 ops/s
# Warmup Iteration  18: 2370733.917 ops/s
# Warmup Iteration  19: 2455242.373 ops/s
# Warmup Iteration  20: 2376699.092 ops/s
# Warmup Iteration  21: 2475976.119 ops/s
# Warmup Iteration  22: 2374790.300 ops/s
# Warmup Iteration  23: 2338575.232 ops/s
# Warmup Iteration  24: 2336994.448 ops/s
# Warmup Iteration  25: 2315365.644 ops/s
# Warmup Iteration  26: 2390904.074 ops/s
# Warmup Iteration  27: 2331545.782 ops/s
# Warmup Iteration  28: 2390806.972 ops/s
# Warmup Iteration  29: 2464395.319 ops/s
# Warmup Iteration  30: 2300157.668 ops/s
Iteration   1: 2387298.043 ops/s
Iteration   2: 2333783.946 ops/s
Iteration   3: 2345099.753 ops/s
Iteration   4: 2364263.837 ops/s
Iteration   5: 2364943.219 ops/s
Iteration   6: 2551600.779 ops/s
Iteration   7: 2361881.248 ops/s
Iteration   8: 2308714.682 ops/s
Iteration   9: 2423961.417 ops/s
Iteration  10: 2339230.598 ops/s
Iteration  11: 2424702.153 ops/s
Iteration  12: 2346138.938 ops/s
Iteration  13: 2414052.727 ops/s
Iteration  14: 2406596.399 ops/s
Iteration  15: 2337941.941 ops/s
Iteration  16: 2499725.729 ops/s
Iteration  17: 2300610.186 ops/s
Iteration  18: 2070323.326 ops/s
Iteration  19: 2413532.257 ops/s
Iteration  20: 2416646.023 ops/s
Iteration  21: 2343840.935 ops/s
Iteration  22: 2423402.829 ops/s
Iteration  23: 2503032.932 ops/s
Iteration  24: 2336672.118 ops/s
Iteration  25: 2357826.362 ops/s
Iteration  26: 2426162.056 ops/s
Iteration  27: 2325621.837 ops/s
Iteration  28: 2362603.281 ops/s
Iteration  29: 2392383.257 ops/s
Iteration  30: 2341774.444 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanEmptyBackpressured":
  2374145.575 ±(99.9%) 54756.580 ops/s [Average]
  (min, avg, max) = (2070323.326, 2374145.575, 2551600.779), stdev = 81957.078
  CI (99.9%): [2319388.995, 2428902.155] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableScanTest._Benchmark.benchmark_scanEmptyBackpressured  thrpt   30  2374145.575 ± 54756.580  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manyIteratorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manyIteratorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 194918.380 ops/s
# Warmup Iteration   2: 482984.045 ops/s
# Warmup Iteration   3: 573383.506 ops/s
# Warmup Iteration   4: 556146.660 ops/s
# Warmup Iteration   5: 526085.513 ops/s
# Warmup Iteration   6: 581105.555 ops/s
# Warmup Iteration   7: 598309.065 ops/s
# Warmup Iteration   8: 624140.117 ops/s
# Warmup Iteration   9: 606602.859 ops/s
# Warmup Iteration  10: 588889.824 ops/s
# Warmup Iteration  11: 615616.180 ops/s
# Warmup Iteration  12: 588381.139 ops/s
# Warmup Iteration  13: 592516.375 ops/s
# Warmup Iteration  14: 603373.396 ops/s
# Warmup Iteration  15: 587143.065 ops/s
# Warmup Iteration  16: 616994.777 ops/s
# Warmup Iteration  17: 627846.036 ops/s
# Warmup Iteration  18: 617504.788 ops/s
# Warmup Iteration  19: 634824.671 ops/s
# Warmup Iteration  20: 619978.518 ops/s
# Warmup Iteration  21: 655436.778 ops/s
# Warmup Iteration  22: 631381.567 ops/s
# Warmup Iteration  23: 613924.673 ops/s
# Warmup Iteration  24: 637188.991 ops/s
# Warmup Iteration  25: 620433.311 ops/s
# Warmup Iteration  26: 624489.299 ops/s
# Warmup Iteration  27: 632381.792 ops/s
# Warmup Iteration  28: 620038.939 ops/s
# Warmup Iteration  29: 652670.385 ops/s
# Warmup Iteration  30: 639131.957 ops/s
Iteration   1: 634582.682 ops/s
Iteration   2: 624070.115 ops/s
Iteration   3: 642604.180 ops/s
Iteration   4: 617812.588 ops/s
Iteration   5: 657669.461 ops/s
Iteration   6: 650167.200 ops/s
Iteration   7: 609226.682 ops/s
Iteration   8: 649405.131 ops/s
Iteration   9: 612523.187 ops/s
Iteration  10: 635101.162 ops/s
Iteration  11: 645019.324 ops/s
Iteration  12: 605389.744 ops/s
Iteration  13: 631219.463 ops/s
Iteration  14: 615241.905 ops/s
Iteration  15: 599285.750 ops/s
Iteration  16: 628178.870 ops/s
Iteration  17: 610999.967 ops/s
Iteration  18: 629711.914 ops/s
Iteration  19: 624464.090 ops/s
Iteration  20: 630108.391 ops/s
Iteration  21: 648726.561 ops/s
Iteration  22: 612782.934 ops/s
Iteration  23: 650080.296 ops/s
Iteration  24: 616221.903 ops/s
Iteration  25: 630609.791 ops/s
Iteration  26: 646454.306 ops/s
Iteration  27: 650052.296 ops/s
Iteration  28: 644860.166 ops/s
Iteration  29: 628091.101 ops/s
Iteration  30: 636717.190 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_manyIteratorThrows":
  630579.278 ±(99.9%) 10554.524 ops/s [Average]
  (min, avg, max) = (599285.750, 630579.278, 657669.461), stdev = 15797.516
  CI (99.9%): [620024.754, 641133.803] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_manyIteratorThrows  thrpt   30  630579.278 ± 10554.524  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerDisposedOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerDisposedOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 253885.172 ops/s
# Warmup Iteration   2: 513900.114 ops/s
# Warmup Iteration   3: 641591.815 ops/s
# Warmup Iteration   4: 616647.840 ops/s
# Warmup Iteration   5: 636999.831 ops/s
# Warmup Iteration   6: 567184.706 ops/s
# Warmup Iteration   7: 604852.849 ops/s
# Warmup Iteration   8: 566411.252 ops/s
# Warmup Iteration   9: 615682.717 ops/s
# Warmup Iteration  10: 640673.728 ops/s
# Warmup Iteration  11: 580758.489 ops/s
# Warmup Iteration  12: 634810.504 ops/s
# Warmup Iteration  13: 627952.076 ops/s
# Warmup Iteration  14: 622399.575 ops/s
# Warmup Iteration  15: 629360.348 ops/s
# Warmup Iteration  16: 629447.369 ops/s
# Warmup Iteration  17: 647896.787 ops/s
# Warmup Iteration  18: 641415.599 ops/s
# Warmup Iteration  19: 633076.955 ops/s
# Warmup Iteration  20: 696074.168 ops/s
# Warmup Iteration  21: 638111.571 ops/s
# Warmup Iteration  22: 668584.879 ops/s
# Warmup Iteration  23: 660373.337 ops/s
# Warmup Iteration  24: 651691.860 ops/s
# Warmup Iteration  25: 669078.850 ops/s
# Warmup Iteration  26: 636428.484 ops/s
# Warmup Iteration  27: 681518.172 ops/s
# Warmup Iteration  28: 680016.422 ops/s
# Warmup Iteration  29: 647832.237 ops/s
# Warmup Iteration  30: 678368.513 ops/s
Iteration   1: 651075.215 ops/s
Iteration   2: 643641.890 ops/s
Iteration   3: 675418.889 ops/s
Iteration   4: 652990.433 ops/s
Iteration   5: 676552.889 ops/s
Iteration   6: 662686.274 ops/s
Iteration   7: 653195.072 ops/s
Iteration   8: 673712.014 ops/s
Iteration   9: 660474.250 ops/s
Iteration  10: 656352.103 ops/s
Iteration  11: 672067.034 ops/s
Iteration  12: 553588.860 ops/s
Iteration  13: 643026.874 ops/s
Iteration  14: 670838.868 ops/s
Iteration  15: 674319.012 ops/s
Iteration  16: 641416.163 ops/s
Iteration  17: 667542.233 ops/s
Iteration  18: 632948.507 ops/s
Iteration  19: 683691.203 ops/s
Iteration  20: 692709.890 ops/s
Iteration  21: 652425.367 ops/s
Iteration  22: 682914.196 ops/s
Iteration  23: 679879.395 ops/s
Iteration  24: 652157.557 ops/s
Iteration  25: 688976.227 ops/s
Iteration  26: 647018.041 ops/s
Iteration  27: 664168.310 ops/s
Iteration  28: 647950.449 ops/s
Iteration  29: 654639.034 ops/s
Iteration  30: 680595.975 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerDisposedOnError":
  659632.407 ±(99.9%) 16950.583 ops/s [Average]
  (min, avg, max) = (553588.860, 659632.407, 692709.890), stdev = 25370.837
  CI (99.9%): [642681.824, 676582.991] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableUsingTest._Benchmark.benchmark_eagerDisposedOnError  thrpt   30  659632.407 ± 16950.583  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 818435.450 ops/s
# Warmup Iteration   2: 2409953.662 ops/s
# Warmup Iteration   3: 2858273.706 ops/s
# Warmup Iteration   4: 3091506.972 ops/s
# Warmup Iteration   5: 3224250.541 ops/s
# Warmup Iteration   6: 3345319.783 ops/s
# Warmup Iteration   7: 3182341.662 ops/s
# Warmup Iteration   8: 3254232.109 ops/s
# Warmup Iteration   9: 3232994.187 ops/s
# Warmup Iteration  10: 3198864.494 ops/s
# Warmup Iteration  11: 3098103.560 ops/s
# Warmup Iteration  12: 3413678.704 ops/s
# Warmup Iteration  13: 3188879.872 ops/s
# Warmup Iteration  14: 3248601.809 ops/s
# Warmup Iteration  15: 3303069.591 ops/s
# Warmup Iteration  16: 3264017.427 ops/s
# Warmup Iteration  17: 3251807.119 ops/s
# Warmup Iteration  18: 3398107.135 ops/s
# Warmup Iteration  19: 3166789.190 ops/s
# Warmup Iteration  20: 3411596.022 ops/s
# Warmup Iteration  21: 3171859.060 ops/s
# Warmup Iteration  22: 3408138.994 ops/s
# Warmup Iteration  23: 3332960.720 ops/s
# Warmup Iteration  24: 3307742.760 ops/s
# Warmup Iteration  25: 3211563.590 ops/s
# Warmup Iteration  26: 3236124.523 ops/s
# Warmup Iteration  27: 3398390.772 ops/s
# Warmup Iteration  28: 3175668.335 ops/s
# Warmup Iteration  29: 3398759.716 ops/s
# Warmup Iteration  30: 3211239.125 ops/s
Iteration   1: 3354585.235 ops/s
Iteration   2: 3197639.753 ops/s
Iteration   3: 3286738.940 ops/s
Iteration   4: 3377588.159 ops/s
Iteration   5: 3167334.480 ops/s
Iteration   6: 3348385.060 ops/s
Iteration   7: 3306776.839 ops/s
Iteration   8: 3229909.901 ops/s
Iteration   9: 3302998.933 ops/s
Iteration  10: 3158718.036 ops/s
Iteration  11: 3402248.507 ops/s
Iteration  12: 3309418.439 ops/s
Iteration  13: 3220108.288 ops/s
Iteration  14: 3368321.865 ops/s
Iteration  15: 3206001.615 ops/s
Iteration  16: 3208921.965 ops/s
Iteration  17: 3414426.460 ops/s
Iteration  18: 3178126.655 ops/s
Iteration  19: 3273754.575 ops/s
Iteration  20: 3200579.063 ops/s
Iteration  21: 3279688.117 ops/s
Iteration  22: 3377349.218 ops/s
Iteration  23: 3075129.379 ops/s
Iteration  24: 3364992.784 ops/s
Iteration  25: 3187069.032 ops/s
Iteration  26: 3330859.287 ops/s
Iteration  27: 3408801.032 ops/s
Iteration  28: 3159964.357 ops/s
Iteration  29: 3388520.725 ops/s
Iteration  30: 3220265.220 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathCancel":
  3276840.731 ±(99.9%) 61560.698 ops/s [Average]
  (min, avg, max) = (3075129.379, 3276840.731, 3414426.460), stdev = 92141.162
  CI (99.9%): [3215280.032, 3338401.429] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_conditionalSlowPathCancel  thrpt   30  3276840.731 ± 61560.698  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_withCompletionCausingError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_withCompletionCausingError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 94169.542 ops/s
# Warmup Iteration   2: 541190.284 ops/s
# Warmup Iteration   3: 580087.635 ops/s
# Warmup Iteration   4: 570306.886 ops/s
# Warmup Iteration   5: 557931.742 ops/s
# Warmup Iteration   6: 595478.267 ops/s
# Warmup Iteration   7: 623919.832 ops/s
# Warmup Iteration   8: 636977.941 ops/s
# Warmup Iteration   9: 617094.384 ops/s
# Warmup Iteration  10: 650172.979 ops/s
# Warmup Iteration  11: 610783.183 ops/s
# Warmup Iteration  12: 640867.472 ops/s
# Warmup Iteration  13: 642576.116 ops/s
# Warmup Iteration  14: 648366.969 ops/s
# Warmup Iteration  15: 608340.335 ops/s
# Warmup Iteration  16: 638828.248 ops/s
# Warmup Iteration  17: 668931.851 ops/s
# Warmup Iteration  18: 648949.301 ops/s
# Warmup Iteration  19: 677101.831 ops/s
# Warmup Iteration  20: 674209.652 ops/s
# Warmup Iteration  21: 674582.305 ops/s
# Warmup Iteration  22: 673920.678 ops/s
# Warmup Iteration  23: 653114.718 ops/s
# Warmup Iteration  24: 676539.968 ops/s
# Warmup Iteration  25: 658723.772 ops/s
# Warmup Iteration  26: 665777.960 ops/s
# Warmup Iteration  27: 662552.258 ops/s
# Warmup Iteration  28: 688006.115 ops/s
# Warmup Iteration  29: 639687.736 ops/s
# Warmup Iteration  30: 672557.502 ops/s
Iteration   1: 645369.560 ops/s
Iteration   2: 693014.687 ops/s
Iteration   3: 668247.605 ops/s
Iteration   4: 637979.090 ops/s
Iteration   5: 664634.332 ops/s
Iteration   6: 595647.917 ops/s
Iteration   7: 614184.762 ops/s
Iteration   8: 668226.605 ops/s
Iteration   9: 678380.721 ops/s
Iteration  10: 651887.300 ops/s
Iteration  11: 666702.737 ops/s
Iteration  12: 678674.349 ops/s
Iteration  13: 640746.261 ops/s
Iteration  14: 688150.879 ops/s
Iteration  15: 660545.930 ops/s
Iteration  16: 660344.807 ops/s
Iteration  17: 652632.702 ops/s
Iteration  18: 652898.124 ops/s
Iteration  19: 680665.692 ops/s
Iteration  20: 641613.655 ops/s
Iteration  21: 680221.959 ops/s
Iteration  22: 648646.100 ops/s
Iteration  23: 683637.484 ops/s
Iteration  24: 649512.007 ops/s
Iteration  25: 653095.581 ops/s
Iteration  26: 663876.316 ops/s
Iteration  27: 662890.334 ops/s
Iteration  28: 656136.904 ops/s
Iteration  29: 687112.241 ops/s
Iteration  30: 640710.052 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_withCompletionCausingError":
  658879.556 ±(99.9%) 14350.443 ops/s [Average]
  (min, avg, max) = (595647.917, 658879.556, 693014.687), stdev = 21479.069
  CI (99.9%): [644529.114, 673229.999] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
FlowableMaterializeTest._Benchmark.benchmark_withCompletionCausingError  thrpt   30  658879.556 ± 14350.443  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorInnerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorInnerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 113035.790 ops/s
# Warmup Iteration   2: 478370.113 ops/s
# Warmup Iteration   3: 535486.181 ops/s
# Warmup Iteration   4: 523086.216 ops/s
# Warmup Iteration   5: 561513.735 ops/s
# Warmup Iteration   6: 561198.707 ops/s
# Warmup Iteration   7: 565420.684 ops/s
# Warmup Iteration   8: 592411.312 ops/s
# Warmup Iteration   9: 564041.480 ops/s
# Warmup Iteration  10: 593982.742 ops/s
# Warmup Iteration  11: 587017.692 ops/s
# Warmup Iteration  12: 552997.741 ops/s
# Warmup Iteration  13: 599922.285 ops/s
# Warmup Iteration  14: 572677.565 ops/s
# Warmup Iteration  15: 590066.236 ops/s
# Warmup Iteration  16: 568362.937 ops/s
# Warmup Iteration  17: 629497.365 ops/s
# Warmup Iteration  18: 607424.112 ops/s
# Warmup Iteration  19: 604513.658 ops/s
# Warmup Iteration  20: 618044.121 ops/s
# Warmup Iteration  21: 589795.890 ops/s
# Warmup Iteration  22: 609875.872 ops/s
# Warmup Iteration  23: 577559.472 ops/s
# Warmup Iteration  24: 594274.191 ops/s
# Warmup Iteration  25: 591027.914 ops/s
# Warmup Iteration  26: 594911.091 ops/s
# Warmup Iteration  27: 611857.778 ops/s
# Warmup Iteration  28: 626875.121 ops/s
# Warmup Iteration  29: 587793.438 ops/s
# Warmup Iteration  30: 615644.001 ops/s
Iteration   1: 594070.775 ops/s
Iteration   2: 626420.675 ops/s
Iteration   3: 588122.301 ops/s
Iteration   4: 614985.732 ops/s
Iteration   5: 601106.357 ops/s
Iteration   6: 602592.876 ops/s
Iteration   7: 623901.412 ops/s
Iteration   8: 599884.463 ops/s
Iteration   9: 626865.343 ops/s
Iteration  10: 595799.298 ops/s
Iteration  11: 600619.145 ops/s
Iteration  12: 621730.842 ops/s
Iteration  13: 598826.515 ops/s
Iteration  14: 615454.882 ops/s
Iteration  15: 611194.033 ops/s
Iteration  16: 608190.306 ops/s
Iteration  17: 616459.575 ops/s
Iteration  18: 601614.674 ops/s
Iteration  19: 599810.896 ops/s
Iteration  20: 614039.846 ops/s
Iteration  21: 608784.241 ops/s
Iteration  22: 616362.813 ops/s
Iteration  23: 587809.979 ops/s
Iteration  24: 616001.174 ops/s
Iteration  25: 590275.187 ops/s
Iteration  26: 598153.845 ops/s
Iteration  27: 598339.371 ops/s
Iteration  28: 590044.311 ops/s
Iteration  29: 593668.095 ops/s
Iteration  30: 631251.795 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorInnerError":
  606412.692 ±(99.9%) 8346.461 ops/s [Average]
  (min, avg, max) = (587809.979, 606412.692, 631251.795), stdev = 12492.591
  CI (99.9%): [598066.231, 614759.153] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_selectorInnerError  thrpt   30  606412.692 ± 8346.461  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 46994.322 ops/s
# Warmup Iteration   2: 304409.858 ops/s
# Warmup Iteration   3: 352247.956 ops/s
# Warmup Iteration   4: 312423.596 ops/s
# Warmup Iteration   5: 337969.273 ops/s
# Warmup Iteration   6: 333443.992 ops/s
# Warmup Iteration   7: 362549.099 ops/s
# Warmup Iteration   8: 329680.521 ops/s
# Warmup Iteration   9: 330347.001 ops/s
# Warmup Iteration  10: 354880.932 ops/s
# Warmup Iteration  11: 348662.155 ops/s
# Warmup Iteration  12: 345132.881 ops/s
# Warmup Iteration  13: 355645.821 ops/s
# Warmup Iteration  14: 343301.338 ops/s
# Warmup Iteration  15: 328776.428 ops/s
# Warmup Iteration  16: 353181.682 ops/s
# Warmup Iteration  17: 349978.036 ops/s
# Warmup Iteration  18: 359922.287 ops/s
# Warmup Iteration  19: 349744.818 ops/s
# Warmup Iteration  20: 354177.248 ops/s
# Warmup Iteration  21: 361177.318 ops/s
# Warmup Iteration  22: 356147.830 ops/s
# Warmup Iteration  23: 369481.979 ops/s
# Warmup Iteration  24: 342976.709 ops/s
# Warmup Iteration  25: 359538.044 ops/s
# Warmup Iteration  26: 354725.216 ops/s
# Warmup Iteration  27: 356064.425 ops/s
# Warmup Iteration  28: 363369.873 ops/s
# Warmup Iteration  29: 349950.635 ops/s
# Warmup Iteration  30: 370477.687 ops/s
Iteration   1: 335898.168 ops/s
Iteration   2: 302376.169 ops/s
Iteration   3: 367147.468 ops/s
Iteration   4: 361692.814 ops/s
Iteration   5: 353645.385 ops/s
Iteration   6: 353384.968 ops/s
Iteration   7: 363838.694 ops/s
Iteration   8: 352646.147 ops/s
Iteration   9: 360863.988 ops/s
Iteration  10: 352105.384 ops/s
Iteration  11: 363785.161 ops/s
Iteration  12: 360307.758 ops/s
Iteration  13: 350085.558 ops/s
Iteration  14: 363623.566 ops/s
Iteration  15: 352373.429 ops/s
Iteration  16: 348381.495 ops/s
Iteration  17: 369815.211 ops/s
Iteration  18: 345404.436 ops/s
Iteration  19: 358900.787 ops/s
Iteration  20: 354074.077 ops/s
Iteration  21: 361087.827 ops/s
Iteration  22: 348770.622 ops/s
Iteration  23: 362512.828 ops/s
Iteration  24: 348030.505 ops/s
Iteration  25: 370453.368 ops/s
Iteration  26: 358717.857 ops/s
Iteration  27: 348173.985 ops/s
Iteration  28: 371537.405 ops/s
Iteration  29: 346732.547 ops/s
Iteration  30: 356104.419 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapOptionalTest._Benchmark.benchmark_error":
  354749.068 ±(99.9%) 8649.826 ops/s [Average]
  (min, avg, max) = (302376.169, 354749.068, 371537.405), stdev = 12946.653
  CI (99.9%): [346099.241, 363398.894] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ParallelMapOptionalTest._Benchmark.benchmark_error  thrpt   30  354749.068 ± 8649.826  ops/s
----------------------------------------
